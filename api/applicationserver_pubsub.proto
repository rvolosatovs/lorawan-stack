// Copyright Â© 2019 The Things Network Foundation, The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "lorawan-stack/api/identifiers.proto";

package ttn.lorawan.v3;

option go_package = "go.thethings.network/lorawan-stack/pkg/ttnpb";

message ApplicationPubSubIdentifiers {
  ApplicationIdentifiers application_ids = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (validate.rules).message.required = true];
  string pub_sub_id = 2 [(gogoproto.customname) = "PubSubID", (validate.rules).string = {pattern: "^[a-z0-9](?:[-]?[a-z0-9]){2,}$" , max_len: 36}];
}

message ApplicationPubSub {
  ApplicationPubSubIdentifiers ids = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (validate.rules).message.required = true];
  google.protobuf.Timestamp created_at = 2 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  google.protobuf.Timestamp updated_at = 3 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];

  // The format to use for the body.
  // Supported values depend on the Application Server configuration.
  string format = 4 [(validate.rules).string = {pattern: "^[a-z0-9](?:[-]?[a-z0-9]){2,}$" , max_len: 20}];

  // The NATS provider settings.
  message NATSProvider {
    // The server connection URL.
    string server_url = 1 [(gogoproto.customname) = "ServerURL", (validate.rules).string.uri = true];
  }
  // The MQTT provider settings.
  message MQTTProvider {
    string server_url = 1 [(gogoproto.customname) = "ServerURL", (validate.rules).string.uri = true];
    string client_id = 2 [(gogoproto.customname) = "ClientID", (validate.rules).string.max_len = 23];
    string username = 3 [(validate.rules).string.max_len = 100];
    string password = 4 [(validate.rules).string.max_len = 100];

    enum QoS {
      AT_MOST_ONCE = 0;
      AT_LEAST_ONCE = 1;
      EXACTLY_ONCE = 2;
    }
    QoS subscribe_qos = 5 [(gogoproto.customname) = "SubscribeQoS"];
    QoS publish_qos = 6 [(gogoproto.customname) = "PublishQoS"];

    bool use_tls = 7 [(gogoproto.customname) = "UseTLS"];
    // The server Root CA certificate. PEM formatted.
    bytes tls_ca = 8 [(gogoproto.customname) = "TLSCA"];
    // The client certificate. PEM formatted.
    bytes tls_client_cert = 9 [(gogoproto.customname) = "TLSClientCert"];
    // The client private key. PEM formatted.
    bytes tls_client_key = 10 [(gogoproto.customname) = "TLSClientKey"];
  }
  // The provider for the PubSub.
  oneof provider {
    option (validate.required) = true;

    NATSProvider nats = 17 [(gogoproto.customname) = "NATS"];
    MQTTProvider mqtt = 25 [(gogoproto.customname) = "MQTT"];
  };

  // Base topic name to which the messages topic is appended.
  string base_topic = 6 [(validate.rules).string.max_len = 100];

  message Message {
    // The topic on which the Application Server publishes or receives the messages.
    string topic = 1 [(validate.rules).string.max_len = 100];
  }

  // The topic to which the Application Server subscribes for downlink queue push operations.
  Message downlink_push = 7;
  // The topic to which the Application Server subscribes for downlink queue replace operations.
  Message downlink_replace = 8;

  Message uplink_message = 9;
  Message join_accept = 10;
  Message downlink_ack = 11;
  Message downlink_nack = 12;
  Message downlink_sent = 13;
  Message downlink_failed = 14;
  Message downlink_queued = 15;
  Message location_solved = 16;
}

message ApplicationPubSubs {
  repeated ApplicationPubSub pubsubs = 1;
}

message ApplicationPubSubFormats {
  // Format and description.
  map<string, string> formats = 1;
}

message GetApplicationPubSubRequest {
  ApplicationPubSubIdentifiers ids = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (validate.rules).message.required = true];
  google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message ListApplicationPubSubsRequest {
  ApplicationIdentifiers application_ids = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (validate.rules).message.required = true];
  google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message SetApplicationPubSubRequest {
  ApplicationPubSub pubsub = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (validate.rules).message.required = true];
  google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

service ApplicationPubSubRegistry {
  rpc GetFormats(google.protobuf.Empty) returns (ApplicationPubSubFormats) {
    option (google.api.http) = {
      get: "/as/pubsub-formats"
    };
  };

  rpc Get(GetApplicationPubSubRequest) returns (ApplicationPubSub) {
    option (google.api.http) = {
      get: "/as/pubsub/{ids.application_ids.application_id}/{ids.pub_sub_id}"
    };
  };

  rpc List(ListApplicationPubSubsRequest) returns (ApplicationPubSubs) {
    option (google.api.http) = {
      get: "/as/pubsub/{application_ids.application_id}"
    };
  };

  rpc Set(SetApplicationPubSubRequest) returns (ApplicationPubSub) {
    option (google.api.http) = {
      put: "/as/pubsub/{pubsub.ids.application_ids.application_id}/{pubsub.ids.pub_sub_id}"
      body: "*"
      additional_bindings {
        post: "/as/pubsub/{pubsub.ids.application_ids.application_id}"
        body: "*"
      }
    };
  };

  rpc Delete(ApplicationPubSubIdentifiers) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/as/pubsub/{application_ids.application_id}/{pub_sub_id}",
    };
  };
}
