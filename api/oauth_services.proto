// Copyright Â© 2019 The Things Network Foundation, The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "lorawan-stack/api/oauth.proto";

package ttn.lorawan.v3;

option go_package = "go.thethings.network/lorawan-stack/pkg/ttnpb";

service OAuthAuthorizationRegistry {
  rpc List(ListOAuthClientAuthorizationsRequest) returns (OAuthClientAuthorizations) {
    option (google.api.http) = {
      get: "/users/{user_ids.user_id}/authorizations"
    };
  }
  rpc ListTokens(ListOAuthAccessTokensRequest) returns (OAuthAccessTokens) {
    option (google.api.http) = {
      get: "/users/{user_ids.user_id}/authorizations/{client_ids.client_id}/tokens"
    };
  }
  rpc Delete(OAuthClientAuthorizationIdentifiers) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/users/{user_ids.user_id}/authorizations/{client_ids.client_id}"
    };
  }
  rpc DeleteToken(OAuthAccessTokenIdentifiers) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/users/{user_ids.user_id}/authorizations/{client_ids.client_id}/tokens/{id}"
    };
  }
}
