// Copyright Â© 2019 The Things Network Foundation, The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "lorawan-stack/api/client.proto";
import "lorawan-stack/api/contact_info.proto";
import "lorawan-stack/api/enums.proto";
import "lorawan-stack/api/identifiers.proto";
import "lorawan-stack/api/picture.proto";
import "lorawan-stack/api/rights.proto";

package ttn.lorawan.v3;

option go_package = "go.thethings.network/lorawan-stack/pkg/ttnpb";

// User is the message that defines an user on the network.
message User {
  UserIdentifiers ids = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (validate.rules).message.required = true];
  google.protobuf.Timestamp created_at = 2 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  google.protobuf.Timestamp updated_at = 3 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];

  string name = 4 [(validate.rules).string.max_len = 50];
  string description = 5 [(validate.rules).string.max_len = 2000];
  map<string,string> attributes = 6 [(validate.rules).map.keys.string = {pattern: "^[a-z0-9](?:[-]?[a-z0-9]){2,}$" , max_len: 36}];
  repeated ContactInfo contact_info = 7;

  // Primary email address that can be used for logging in.
  // This address is not public, use contact_info for that.
  string primary_email_address = 8 [(validate.rules).string.email = true];
  google.protobuf.Timestamp primary_email_address_validated_at = 9 [(gogoproto.stdtime) = true];

  // Only used on create; never returned on API calls.
  string password = 10;
  google.protobuf.Timestamp password_updated_at = 11 [(gogoproto.stdtime) = true];
  bool require_password_update = 12;

  // The reviewing state of the user.
  // This field can only be modified by admins.
  State state = 13 [(validate.rules).enum.defined_only = true];
  // This user is an admin.
  // This field can only be modified by other admins.
  bool admin = 14;

  // The temporary password can only be used to update a user's password; never returned on API calls.
  string temporary_password = 15;
  google.protobuf.Timestamp temporary_password_created_at = 16 [(gogoproto.stdtime) = true];
  google.protobuf.Timestamp temporary_password_expires_at = 17 [(gogoproto.stdtime) = true];

  Picture profile_picture = 18;
}

message Users {
  repeated User users = 1;
}

message GetUserRequest {
  UserIdentifiers user_ids = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (validate.rules).message.required = true];
  google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message CreateUserRequest {
  User user = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (validate.rules).message.required = true];
  string invitation_token = 2;
}

message UpdateUserRequest {
  User user = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (validate.rules).message.required = true];
  google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message CreateTemporaryPasswordRequest {
  UserIdentifiers user_ids = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (validate.rules).message.required = true];
}

message UpdateUserPasswordRequest {
  UserIdentifiers user_ids = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (validate.rules).message.required = true];
  string new = 2;
  string old = 3;
  // Revoke active sessions and access tokens of user if true. To be used if credentials are suspected to be compromised.
  bool revoke_all_access = 4;
}

message ListUserAPIKeysRequest {
  UserIdentifiers user_ids = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (validate.rules).message.required = true];
  // Limit the number of results per page.
  uint32 limit = 2 [(validate.rules).uint32.lte = 1000];
  // Page number for pagination. 0 is interpreted as 1.
  uint32 page = 3;
}

message GetUserAPIKeyRequest {
  UserIdentifiers user_ids = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (validate.rules).message.required = true];
  // Unique public identifier for the API key.
  string key_id = 2 [(gogoproto.customname) = "KeyID"];
}

message CreateUserAPIKeyRequest {
  UserIdentifiers user_ids = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (validate.rules).message.required = true];
  string name = 2 [(validate.rules).string.max_len = 50];
  repeated Right rights = 3 [(validate.rules).repeated.items.enum.defined_only = true];
}

message UpdateUserAPIKeyRequest {
  UserIdentifiers user_ids = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (validate.rules).message.required = true];
  APIKey api_key = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (validate.rules).message.required = true];
}

message Invitation {
  string email = 1 [(validate.rules).string.email = true];
  string token = 2;

  google.protobuf.Timestamp expires_at = 3 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  google.protobuf.Timestamp created_at = 4 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  google.protobuf.Timestamp updated_at = 5 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];

  google.protobuf.Timestamp accepted_at = 6 [(gogoproto.stdtime) = true];
  UserIdentifiers accepted_by = 7;
}

message ListInvitationsRequest {
  // Limit the number of results per page.
  uint32 limit = 1 [(validate.rules).uint32.lte = 1000];
  // Page number for pagination. 0 is interpreted as 1.
  uint32 page = 2;
}

message Invitations {
  repeated Invitation invitations = 1;
}

message SendInvitationRequest {
  string email = 1 [(validate.rules).string.email = true];
}

message DeleteInvitationRequest {
  string email = 1 [(validate.rules).string.email = true];
}

message UserSessionIdentifiers {
  UserIdentifiers user_ids = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (validate.rules).message.required = true];
  string session_id = 2 [(gogoproto.customname) = "SessionID", (validate.rules).string.max_len = 64];
}

message UserSession {
  UserIdentifiers user_ids = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (validate.rules).message.required = true];
  string session_id = 2 [(gogoproto.customname) = "SessionID", (validate.rules).string.max_len = 64];
  google.protobuf.Timestamp created_at = 3 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  google.protobuf.Timestamp updated_at = 4 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  google.protobuf.Timestamp expires_at = 5 [(gogoproto.stdtime) = true];
}

message UserSessions {
  repeated UserSession sessions = 1;
}

message ListUserSessionsRequest {
  UserIdentifiers user_ids = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (validate.rules).message.required = true];
  // Order the results by this field path (must be present in the field mask).
  // Default ordering is by ID. Prepend with a minus (-) to reverse the order.
  string order = 2;
  // Limit the number of results per page.
  uint32 limit = 3 [(validate.rules).uint32.lte = 1000];
  // Page number for pagination. 0 is interpreted as 1.
  uint32 page = 4;
}
