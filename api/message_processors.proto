// Copyright Â© 2018 The Things Network Foundation, The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "github.com/TheThingsNetwork/ttn/api/end_device.proto";
import "github.com/TheThingsNetwork/ttn/api/identifiers.proto";
import "github.com/TheThingsNetwork/ttn/api/lorawan.proto";
import "github.com/TheThingsNetwork/ttn/api/messages.proto";
import "github.com/TheThingsNetwork/ttn/api/metadata.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

package ttn.lorawan.v3;

option go_package = "github.com/TheThingsNetwork/ttn/pkg/ttnpb";

message ProcessUplinkMessageRequest {
  EndDeviceVersion device_version = 1 [(gogoproto.nullable) = false];
  UplinkMessage message = 2 [(gogoproto.nullable) = false];
  string parameter = 3;
}

message ProcessDownlinkMessageRequest {
  EndDeviceVersion device_version = 1 [(gogoproto.nullable) = false];
  DownlinkMessage message = 2 [(gogoproto.nullable) = false];
  string parameter = 3;
}

// The UplinkMessageProcessor service processes uplink messages.
service UplinkMessageProcessor {
  rpc Process(ProcessUplinkMessageRequest) returns (UplinkMessage);
}

// The DownlinkMessageProcessor service processes downlink messages.
service DownlinkMessageProcessor {
  rpc Process(ProcessDownlinkMessageRequest) returns (DownlinkMessage);
}
