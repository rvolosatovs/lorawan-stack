// Copyright Â© 2019 The Things Network Foundation, The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "lorawan-stack/api/end_device.proto";
import "lorawan-stack/api/identifiers.proto";
import "lorawan-stack/api/messages.proto";
import "lorawan-stack/api/mqtt.proto";

package ttn.lorawan.v3;

option go_package = "go.thethings.network/lorawan-stack/v3/pkg/ttnpb";

message ApplicationLink {
  // The address of the external Network Server where to link to.
  // The typical format of the address is "host:port". If the port is omitted,
  // the normal port inference (with DNS lookup, otherwise defaults) is used.
  // Leave empty when linking to a cluster Network Server.
  string network_server_address = 1 [(validate.rules).string.pattern = "^(?:(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*(?:[A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])(?::[0-9]{1,5})?$|^$"];
  // The API key to use to link the Application Server to Network Server.
  // This API key needs to have RIGHT_APPLICATION_LINK.
  string api_key = 2 [(gogoproto.customname) = "APIKey", (validate.rules).string.min_len = 1];
  // Default message payload formatters to use when there are no formatters
  // defined on the end device level.
  MessagePayloadFormatters default_formatters = 3;
  // Enable TLS for linking to the external Network Server.
  // For cluster-local Network Servers, the cluster's TLS setting is used.
  bool tls = 4 [(gogoproto.customname) = "TLS"];
  // Skip decryption of uplink payloads and encryption of downlink payloads.
  // Leave empty for the using the Application Server's default setting.
  google.protobuf.BoolValue skip_payload_crypto = 5;
}

message GetApplicationLinkRequest {
  ApplicationIdentifiers application_ids = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (validate.rules).message.required = true];
  google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message SetApplicationLinkRequest {
  ApplicationIdentifiers application_ids = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (validate.rules).message.required = true];
  ApplicationLink link = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (validate.rules).message.required = true];
  google.protobuf.FieldMask field_mask = 3 [(gogoproto.nullable) = false];
}

// Link stats as monitored by the Application Server.
message ApplicationLinkStats {
  google.protobuf.Timestamp linked_at = 1 [(gogoproto.stdtime) = true];
  string network_server_address = 2 [(validate.rules).string.pattern = "^(?:(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*(?:[A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])(?::[0-9]{1,5})?$|^$"];
  // Timestamp when the last upstream message has been received from a Network Server.
  // This can be a join-accept, uplink message or downlink message event.
  google.protobuf.Timestamp last_up_received_at = 3 [(gogoproto.stdtime) = true];
  // Number of upstream messages received.
  uint64 up_count = 4;
  // Timestamp when the last downlink message has been forwarded to a Network Server.
  google.protobuf.Timestamp last_downlink_forwarded_at = 5 [(gogoproto.stdtime) = true];
  // Number of downlink messages forwarded.
  uint64 downlink_count = 6;
}

// The As service manages the Application Server.
service As {
  // Get a link configuration from the Application Server to Network Server.
  // This only contains the configuration. Use GetLinkStats to view statistics and any link errors.
  rpc GetLink(GetApplicationLinkRequest) returns (ApplicationLink) {
    option (google.api.http) = {
      get: "/as/applications/{application_ids.application_id}/link"
    };
  };

  // Set a link configuration from the Application Server a Network Server.
  // This call returns immediately after setting the link configuration; it does not wait for a link to establish.
  // To get link statistics or errors, use GetLinkStats.
  // Note that there can only be one Application Server instance linked to a Network Server for a given application at a time.
  rpc SetLink(SetApplicationLinkRequest) returns (ApplicationLink) {
    option (google.api.http) = {
      put: "/as/applications/{application_ids.application_id}/link",
      body: "*"
    };
  };

  // Delete the link between the Application Server and Network Server for the specified application.
  rpc DeleteLink(ApplicationIdentifiers) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/as/applications/{application_id}/link",
    };
  };

  // GetLinkStats returns the link statistics.
  // This call returns a NotFound error code if there is no link for the given application identifiers.
  // This call returns the error code of the link error if linking to a Network Server failed.
  rpc GetLinkStats(ApplicationIdentifiers) returns (ApplicationLinkStats) {
    option (google.api.http) = {
      get: "/as/applications/{application_id}/link/stats"
    };
  };
}

message NsAsHandleUplinkRequest {
  repeated ApplicationUp application_ups = 1 [(validate.rules).repeated.min_items = 1];
}

// The NsAs service connects a Network Server to an Application Server.
service NsAs {
  rpc HandleUplink(NsAsHandleUplinkRequest) returns (google.protobuf.Empty);
}

// The AppAs service connects an application or integration to an Application Server.
service AppAs {
  // Subscribe to upstream messages.
  rpc Subscribe(ApplicationIdentifiers) returns (stream ApplicationUp);
  // Push downlink messages to the end of the downlink queue.
  rpc DownlinkQueuePush(DownlinkQueueRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/as/applications/{end_device_ids.application_ids.application_id}/devices/{end_device_ids.device_id}/down/push",
      body: "*"
    };
  };
  // Replace the entire downlink queue with the specified messages.
  // This can also be used to empty the queue by specifying no messages.
  rpc DownlinkQueueReplace(DownlinkQueueRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/as/applications/{end_device_ids.application_ids.application_id}/devices/{end_device_ids.device_id}/down/replace",
      body: "*"
    };
  };
  // List the items currently in the downlink queue.
  rpc DownlinkQueueList(EndDeviceIdentifiers) returns (ApplicationDownlinks) {
    option (google.api.http) = {
      get: "/as/applications/{application_ids.application_id}/devices/{device_id}/down"
    };
  };
  // Get connection information to connect an MQTT client.
  rpc GetMQTTConnectionInfo(ApplicationIdentifiers) returns (MQTTConnectionInfo) {
    option (google.api.http) = {
      get: "/as/applications/{application_id}/mqtt-connection-info"
    };
  };
  // Simulate an upstream message. This can be used to test integrations.
  rpc SimulateUplink(ApplicationUp) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/as/applications/{end_device_ids.application_ids.application_id}/devices/{end_device_ids.device_id}/up/simulate",
      body: "*"
    };
  };
}

// The AsEndDeviceRegistry service allows clients to manage their end devices on the Application Server.
service AsEndDeviceRegistry {
  // Get returns the device that matches the given identifiers.
  // If there are multiple matches, an error will be returned.
  rpc Get(GetEndDeviceRequest) returns (EndDevice) {
    option (google.api.http) = {
      get: "/as/applications/{end_device_ids.application_ids.application_id}/devices/{end_device_ids.device_id}"
    };
  };

  // Set creates or updates the device.
  rpc Set(SetEndDeviceRequest) returns (EndDevice) {
    option (google.api.http) = {
      put: "/as/applications/{end_device.ids.application_ids.application_id}/devices/{end_device.ids.device_id}"
      body: "*"
      additional_bindings {
        post: "/as/applications/{end_device.ids.application_ids.application_id}/devices"
        body: "*"
      };
    };
  };

  // Delete deletes the device that matches the given identifiers.
  // If there are multiple matches, an error will be returned.
  rpc Delete(EndDeviceIdentifiers) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/as/applications/{application_ids.application_id}/devices/{device_id}"
    };
  };
}
