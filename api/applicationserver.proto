// Copyright Â© 2018 The Things Network Foundation, The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "go.thethings.network/lorawan-stack/api/application.proto";
import "go.thethings.network/lorawan-stack/api/identifiers.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";

package ttn.lorawan.v3;

option go_package = "go.thethings.network/lorawan-stack/pkg/ttnpb";

message SetApplicationRequest{
  Application application = 1 [(gogoproto.nullable) = false];
  google.protobuf.FieldMask field_mask = 2;
}

service AsApplicationRegistry {
  // GetApplication returns the application that matches the given identifiers.
  // If there are multiple matches, an error will be returned.
  rpc GetApplication(ApplicationIdentifiers) returns (Application) {
    option (google.api.http) = {
      get: "/as/applications/{application_id}"
    };
  };

  // SetApplication creates or updates the application
  rpc SetApplication(SetApplicationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/as/applications/{application.ids.application_id}"
      body: "*"
      additional_bindings {
        post: "/as/applications"
        body: "*"
      };
    };
  };

  // DeleteApplication deletes the application that matches the given identifiers.
  // If there are multiple matches, an error will be returned.
  rpc DeleteApplication(ApplicationIdentifiers) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/as/applications/{application_id}"
    };
  };
}

// The As service connects an application or integration to an Application Server.
service As {
  rpc Subscribe(ApplicationIdentifiers) returns (stream ApplicationUp);
}
