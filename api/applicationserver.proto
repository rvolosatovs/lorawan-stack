// Copyright Â© 2018 The Things Network Foundation, The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "lorawan-stack/api/identifiers.proto";
import "lorawan-stack/api/messages.proto";

package ttn.lorawan.v3;

option go_package = "go.thethings.network/lorawan-stack/pkg/ttnpb";

message ApplicationLink {
  string network_server_address = 1;
  string api_key = 2 [(gogoproto.customname) = "APIKey"];
  MessagePayloadFormatters default_formatters = 3;
}

message SetApplicationLinkRequest {
  ApplicationIdentifiers application_ids = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
  ApplicationLink link = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
}

// The As service connects an application or integration to an Application Server.
service As {
  rpc GetLink(ApplicationIdentifiers) returns (ApplicationLink){
    option (google.api.http) = {
      get: "/as/applications/{application_id}/link"
    };
  };

  rpc SetLink(SetApplicationLinkRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/as/applications/{application_ids.application_id}/link",
      body: "*"
    };
  };

  rpc DeleteLink(ApplicationIdentifiers) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/as/applications/{application_id}/link",
    };
  };

  rpc Subscribe(ApplicationIdentifiers) returns (stream ApplicationUp);
}
