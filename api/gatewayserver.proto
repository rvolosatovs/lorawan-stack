// Copyright Â© 2017 The Things Network Foundation, distributed under the MIT license (see LICENSE file)

syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/TheThingsNetwork/ttn/api/identifiers.proto";
import "github.com/TheThingsNetwork/ttn/api/gateway.proto";
import "github.com/TheThingsNetwork/ttn/api/messages.proto";
import "google/protobuf/empty.proto";

package ttn.v3;

option go_package = "github.com/TheThingsNetwork/ttn/pkg/ttnpb";

// GatewayUp may contain zero or more uplink messages and/or a status message for the gateway.
message GatewayUp {
  repeated UplinkMessage uplink_message = 1;
  GatewayStatus gateway_status = 2;
}

// GatewayDown contains downlink messages for the gateway
message GatewayDown {
  DownlinkMessage downlink_message = 1;
}

// FrequencyPlan contains the frequency plan for the gateway
message FrequencyPlan {
  string band_id = 1 [(gogoproto.customname) = "BandID",  (gogoproto.moretags) = "yaml:\"band-id\""];

  message Channel {
    uint32 frequency = 1 [(gogoproto.moretags) = "yaml:\"frequency\""];

    message ForceDataRate {
      uint32 index = 1 [(gogoproto.moretags) = "yaml:\"index,omitempty\""];
    }

    ForceDataRate data_rate = 2 [(gogoproto.moretags) = "yaml:\"data-rate,omitempty\""];
  }

  repeated Channel channels = 2 [(gogoproto.moretags) = "yaml:\"channels\""];

  message LBTConfig {
    float rssi_target = 1 [(gogoproto.customname) = "RSSITarget",  (gogoproto.moretags) = "yaml:\"rssi-target\""];
    // RSSIOffset describes the LBT config-specific RSSI offset
    float rssi_offset = 2 [(gogoproto.customname) = "RSSIOffset",  (gogoproto.moretags) = "yaml:\"rssi-offset\""];
    int32 scan_time = 3 [(gogoproto.moretags) = "yaml:\"scan-time\""];
  }

  LBTConfig lbt = 3 [(gogoproto.customname) = "LBT",  (gogoproto.moretags) = "yaml:\"lbt,omitempty\""];

  message Radio {
    uint32 frequency = 1 [(gogoproto.moretags) = "yaml:\"frequency\""];

    message TxConfiguration {
      uint32 min_frequency = 1 [(gogoproto.moretags) = "yaml:\"min-frequency\""];
      uint32 max_frequency = 2 [(gogoproto.moretags) = "yaml:\"max-frequency\""];
      uint32 notch_frequency = 3 [(gogoproto.moretags) = "yaml:\"notch-frequency\""];
    }

    TxConfiguration radio_tx_config = 2 [(gogoproto.customname) = "TXConfig",  (gogoproto.moretags) = "yaml:\"tx\""];
  }

  repeated Radio radios = 4 [(gogoproto.moretags) = "yaml:\"radios\""];
}

message FrequencyPlanRequest {
  string frequency_plan_id = 1 [(gogoproto.customname) = "FrequencyPlanID"];
}

// The GtwGs service connects a gateway to a gateway server.
service GtwGs {
  // Link the gateway to the gateway server. The authentication information will
  // be used to determine the gateway ID. If no authentication information is present,
  // this gateway may not be used for downlink.
  rpc Link(stream GatewayUp) returns (stream GatewayDown);
  // FetchFrequencyPlan associated to the gateway. The gateway is ID'd by its authentication
  // token.
  rpc FetchFrequencyPlan(FrequencyPlanRequest) returns (FrequencyPlan);
}

// The NsGs service connects a network server to a gateway server.
service NsGs {
  // ScheduleDownlink instructs the gateway server to schedule a downlink message.
  // The gateway server may refuse if there are any conflicts in the schedule or
  // if a duty cycle prevents the gateway from transmitting.
  rpc ScheduleDownlink(DownlinkMessage) returns (google.protobuf.Empty);
}

// Service Gs allows clients to retrieve the status of their gateways
service Gs {
  rpc GetGatewayObservations(GatewayIdentifiers) returns (GatewayObservations);
}
