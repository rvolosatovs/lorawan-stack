// Copyright Â© 2018 The Things Network Foundation, The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "lorawan-stack/api/contact_info.proto";
import "lorawan-stack/api/enums.proto";
import "lorawan-stack/api/identifiers.proto";
import "lorawan-stack/api/messages.proto";
import "lorawan-stack/api/rights.proto";

package ttn.lorawan.v3;

option go_package = "go.thethings.network/lorawan-stack/pkg/ttnpb";

// Application is the message that defines an Application in the network.
// The persistence of the Application is divided between the Identity Server and the Application Server.
// SDKs are responsible for combining (if desired) the two.
message Application {
  ApplicationIdentifiers ids = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
  google.protobuf.Timestamp created_at = 2 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  google.protobuf.Timestamp updated_at = 3 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];

  string name = 4;
  string description = 5;
  map<string,string> attributes = 6;
  repeated ContactInfo contact_info = 7;

  MessagePayloadFormatters default_formatters = 8;
}

message Applications {
  repeated Application applications = 1;
}

message GetApplicationRequest {
  ApplicationIdentifiers application_ids = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
  google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message ListApplicationsRequest {
  // By default we list all applications the caller has rights on.
  // Set the user or the organization (not both) to instead list the applications
  // where the user or organization is collaborator on.

  OrganizationOrUserIdentifiers collaborator = 1;
  google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message CreateApplicationRequest {
  Application application = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
  // By default the account of the caller is set as first collaborator with admin rights.
  // Set the organization to instead make the organization the first collaborator with admin rights.
  OrganizationIdentifiers organization_ids = 2 [(gogoproto.customname) = "OrganizationIDs"];
}

message UpdateApplicationRequest {
  Application application = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
  google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message SetApplicationAPIKeyRequest {
  ApplicationIdentifiers application_ids = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
  string id = 2 [(gogoproto.customname) = "ID"];
  repeated Right rights = 3;
}

message RemoveApplicationAPIKeyRequest {
  ApplicationIdentifiers application_ids = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
  string id = 2 [(gogoproto.customname) = "ID"];
}

message SetApplicationCollaboratorRequest {
  ApplicationIdentifiers application_ids = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
  Collaborator collaborator = 2 [(gogoproto.nullable) = false];
}
