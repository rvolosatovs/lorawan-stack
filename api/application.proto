// Copyright Â© 2018 The Things Network Foundation, The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "go.thethings.network/lorawan-stack/api/identifiers.proto";
import "go.thethings.network/lorawan-stack/api/keys.proto";
import "go.thethings.network/lorawan-stack/api/messages.proto";
import "go.thethings.network/lorawan-stack/api/metadata.proto";
import "go.thethings.network/lorawan-stack/api/payload_formatter.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

package ttn.lorawan.v3;

option go_package = "go.thethings.network/lorawan-stack/pkg/ttnpb";

// Application is the message that defines an application in the network.
message Application {
  // Application identifiers.
  ApplicationIdentifiers ids = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  // description is the description of the application.
  string description = 2;

  // created_at is the time when the application was created.
  // This is a read-only field.
  google.protobuf.Timestamp created_at = 3 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];

  // updated_at is the last time the application was updated.
  // This is a read-only field.
  google.protobuf.Timestamp updated_at = 4 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];

  PayloadFormatter up_formatter = 5;
  string up_formatter_parameter = 6;
  PayloadFormatter down_formatter = 7;
  string down_formatter_parameter = 8;
}

message Applications {
  repeated Application applications = 1;
}

// ApplicationUp wraps multiple application-layer uplink types
message ApplicationUp {
  EndDeviceIdentifiers end_device = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  oneof up {
    ApplicationUplink uplink_message = 2;
    ApplicationJoinAccept join_accept = 3;
    bool downlink_ack = 4;
    google.protobuf.Empty downlink_sent = 5;
    google.protobuf.Empty downlink_queued = 6;
    // Downlink queue invalidated (LoRaWAN 1.0)
  }
}

message ApplicationDownlinks {
  repeated ApplicationDownlink downlinks = 1;
}

message DownlinkQueueRequest {
  repeated ApplicationDownlink downlinks = 1;
  EndDeviceIdentifiers end_device = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
}

// The NsApplicationDownlinkQueue service allows management of the application-layer downlink queue on the Network Server.
service NsApplicationDownlinkQueue {
  rpc DownlinkQueueReplace(DownlinkQueueRequest) returns (google.protobuf.Empty);
  rpc DownlinkQueuePush(DownlinkQueueRequest) returns (google.protobuf.Empty);
  rpc DownlinkQueueList(EndDeviceIdentifiers) returns (ApplicationDownlinks);
  rpc DownlinkQueueClear(EndDeviceIdentifiers) returns (google.protobuf.Empty);
}

// The AsApplicationDownlinkQueue service allows management of the application-layer downlink queue on the Application Server.
service AsApplicationDownlinkQueue {
  rpc DownlinkQueueReplace(DownlinkQueueRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/as/applications/{end_device.application_ids.application_id}/devices/{end_device.device_id}/downlink-queue"
    };
  };
  rpc DownlinkQueuePush(DownlinkQueueRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/as/applications/{end_device.application_ids.application_id}/devices/{end_device.device_id}/downlink-queue"
    };
  };
  rpc DownlinkQueueList(EndDeviceIdentifiers) returns (ApplicationDownlinks) {
    option (google.api.http) = {
      get: "/as/applications/{application_ids.application_id}/devices/{device_id}/downlink-queue"
    };
  };
  rpc DownlinkQueueClear(EndDeviceIdentifiers) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/as/applications/{application_ids.application_id}/devices/{device_id}/downlink-queue"
    };
  };
}
