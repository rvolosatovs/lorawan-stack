// Copyright Â© 2017 The Things Network Foundation, distributed under the MIT license (see LICENSE file)

syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/TheThingsNetwork/ttn/api/metadata.proto";
import "github.com/TheThingsNetwork/ttn/api/identifiers.proto";
import "github.com/TheThingsNetwork/ttn/api/rights.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

package ttn.v3;

option go_package = "github.com/TheThingsNetwork/ttn/pkg/ttnpb";

// Gateway is the message that defines a gateway on the network.
message Gateway {
  // id is the Gateway's unique and immutable ID.
  GatewayIdentifier id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  // description is the description of the gateway.
  string description = 2;

  // api_keys are the API keys of the gateway.
  // This is an only read field. API keys can be added, modified and removed
  // through the specific application API key methods of the IsGateway service.
  repeated APIKey api_keys = 3 [(gogoproto.nullable) = false, (gogoproto.customname) = "APIKeys"];

  // frequency_plan_id indicates the ID of the frequency plan.
  string frequency_plan_id = 4 [(gogoproto.customname) = "FrequencyPlanID"];

  // activated_at denotes when the gateway was activated.
  // This a read-only field.
  google.protobuf.Timestamp activated_at = 5 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];

  // privacy_settings defines the different privacy settings for this gateway.
  GatewayPrivacySettings privacy_settings = 6 [(gogoproto.nullable) = false];

  // auto_update indicates whether or not the gateway should be able to
  // automatically fetch and execute firmware updates.
  bool auto_update = 7;

  // platform is the gateway platform, e.g. "The Things Gateway" or "Kerklink iBTS".
  string platform = 8;

  // antennas is all the antennas that the gateway has.
  repeated GatewayAntenna antennas = 9 [(gogoproto.nullable) = false];

  // attributes is a free form map of attributes.
  map<string, string> attributes = 10;

  // cluster_address indicates the URI of the gateway server cluster to connect
  // to, in a "<ip>:<port>" format.
  string cluster_address = 11;

  // contact_account is the user ID that will be displayed (given the set privacy
  // settings) as contact person for this gateway.
  // TODO(gomezjdaniel): allow to use an organization ID as contact account when
  // they are added.
  UserIdentifier contact_account = 12 [(gogoproto.nullable) = false];

  // created_at is the time when the gateway was created.
  // This a read-only field.
  google.protobuf.Timestamp created_at = 13 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];

  // updated_at is the last time the gateway was updated.
  // This a read-only field.
  google.protobuf.Timestamp updated_at = 14 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];

  // archived_at is the time when the gateway was archived and therefore
  // permantly disabled.
  // This a read-only field.
  google.protobuf.Timestamp archived_at = 15 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
}

// GatewayPrivacySettings is the message that defines the different privacy settings
// of the gateway such as if the owner information or gateway location are public.
message GatewayPrivacySettings {
  // status_public denotes whether or not the gateway's status is public or not.
  bool status_public = 1;

  // location_public denotes whether or not the gateway's location is public.
  bool location_public = 2;

  // contactable denotes whether the user ID thas has been set as contact person
  // is private or public.
  bool contactable = 3;
}

// GatewayAntenna is the message that defines a gateway antenna.
message GatewayAntenna {
  // gain is the antenna gain relative to this gateway, in dBi.
  float gain = 1;

  // location is the antenna's location.
  Location location = 2 [(gogoproto.nullable) = false];

  // type denotes the antenna's type.
  string type = 3;

  // model denotes the antenna's model.
  string model = 4;

  // placement denotes whether if the antenna is placed indoors or outdoors.
  GatewayAntennaPlacement placement = 5;
}

// GatewayAntennaPlacement enum defines whether if the gateway antenna is placed
// indoors or outdoors.
enum GatewayAntennaPlacement {
  option (gogoproto.goproto_enum_prefix) = false;
  // The antenna is placed indoors.
  PLACEMENT_INDOOR  = 0;

  // The antenna is placed outdoors.
  PLACEMENT_OUTDOOR = 1;
}

// GatewayConfiguration contains all the latest values relative to this gateway.
message GatewayConfiguration {
  // api_key is the API key that is used to identify the gateway against other
  // components in the network.
  string api_key = 1 [(gogoproto.customname) = "APIKey"];

  // frequency_plan_id indicates the ID of the frequency plan.
  string frequency_plan_id = 2 [(gogoproto.customname) = "FrequencyPlanID"];

  // cluster_address indicates the URI of the gateway server cluster to connect to,
  // in a "<ip>:<port>" format.
  string cluster_address = 3;

  message GatewayAntennaConfiguration {
    // gain is the antenna gain relative to this gateway, in dBi.
    float gain = 1;

    // location is the antenna's location.
    Location location = 2 [(gogoproto.nullable) = false];
  }
  repeated GatewayAntennaConfiguration antennas = 4 [(gogoproto.nullable) = false];

  message Radio {
    uint32 frequency = 1;

    message TxConfiguration {
      uint32 min_frequency = 1;
      uint32 max_frequency = 2;
      uint32 notch_frequency = 3;
    }

    TxConfiguration radio_tx_config = 2 [(gogoproto.customname) = "TXConfig"];
  }
  repeated Radio radios = 6 [(gogoproto.nullable) = false];
}

message GatewayStatus {
  // Current time of the gateway
  google.protobuf.Timestamp time = 1 [(gogoproto.stdtime) = true];

  // Boot time of the gateway
  // - can be left out to save bandwidth; old value will be kept
  google.protobuf.Timestamp boot_time = 2 [(gogoproto.stdtime) = true];

  // Gateway Platform
  // - can be left out to save bandwidth; old value will be kept
  // - for example: "Kerlink iBTS", "MultiTech Conduit AEP", "The Things Gateway", "..."
  string platform = 3;

  // Versions of gateway subsystems
  // - each field can be left out to save bandwidth; old value will be kept
  // - map keys are written in snake_case
  // - for example:
  //     firmware: "2.0.4"
  //     forwarder: "v2-3.3.1"
  //     fpga: "48"
  //     dsp: "27"
  //     hal: "v2-3.5.0"
  map<string,string> versions = 4;

  // Location of each gateway's antenna
  // - if left out, server uses registry-set location as fallback
  repeated Location antennas_location = 5;

  // IP addresses of this gateway
  repeated string ip = 6 [(gogoproto.customname) = "IP"];

  // Round-trip time to the server
  google.protobuf.Duration rtt = 7 [(gogoproto.customname) = "RTT", (gogoproto.stdduration) = true];

  // Metrics
  // - can be used for forwarding gateway metrics such as temperatures or performance metrics
  // - map keys are written in snake_case
  map<string,float> metrics = 8;

  // Advanced metadata fields
  // - can be used for advanced information or experimental features that are not yet formally defined in the API
  // - field names are written in snake_case
  google.protobuf.Struct advanced = 99;
}

// GatewayObservations as observed by the gateway server
message GatewayObservations {
  // Time when the last uplink message was received
  google.protobuf.Timestamp last_uplink_received = 1 [(gogoproto.stdtime) = true];
  // Uplink message counter. This counter may be reset to 0 when the gateway disconnects.
  uint64 uplink_count = 2;

  // Time when the last downlink message was received
  google.protobuf.Timestamp last_downlink_received = 3 [(gogoproto.stdtime) = true];
  // Downlink message counter. This counter may be reset to 0 when the gateway disconnects.
  uint64 downlink_count = 4;

  // Time when the last status message was received
  google.protobuf.Timestamp last_status_received = 5 [(gogoproto.stdtime) = true];
  // Status message counter. This counter may be reset to 0 when the gateway disconnects.
  uint64 status_count = 6;
  // Contents of the last status message
  GatewayStatus last_status = 7;
}
