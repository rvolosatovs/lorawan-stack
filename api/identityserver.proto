// Copyright Â© 2018 The Things Network Foundation, distributed under the MIT license (see LICENSE file)

syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/TheThingsNetwork/ttn/api/application.proto";
import "github.com/TheThingsNetwork/ttn/api/client.proto";
import "github.com/TheThingsNetwork/ttn/api/collaborator.proto";
import "github.com/TheThingsNetwork/ttn/api/auth.proto";
import "github.com/TheThingsNetwork/ttn/api/rights.proto";
import "github.com/TheThingsNetwork/ttn/api/identifiers.proto";
import "github.com/TheThingsNetwork/ttn/api/gateway.proto";
import "github.com/TheThingsNetwork/ttn/api/organization.proto";
import "github.com/TheThingsNetwork/ttn/api/user.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

package ttn.v3;

option go_package = "github.com/TheThingsNetwork/ttn/pkg/ttnpb";

message PullConfigurationRequest {
  // gateway_id is the gateway's ID to be fetched in the stream.
  GatewayIdentifier gateway_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  // projection_mask is the symbolic set of fields that will be filtered in the
  // response. If empty all fields will be returned.
  google.protobuf.FieldMask projection_mask = 2;
}

// GtwGr implements a Gateway Registry service.
service GtwGr {
  // PullConfiguration sends a new DeviceConfiguration, with all the latest values,
  // at connection and when a gateway's configuration is updated.
  rpc PullConfiguration(PullConfigurationRequest) returns (stream Gateway);
}

message IdentityServerSettings {
  // updated_at is the last time the settings were updated.
  // This is a read-only field.
  google.protobuf.Timestamp updated_at = 1 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];

  // blacklisted_ids is the list of IDs that are not allowed to use in the network.
  repeated string blacklisted_ids = 2 [(gogoproto.customname) = "BlacklistedIDs"];

  message UserRegistrationFlow {
    // skip_validation denotes whether if users need to validate their email
    // account after registration or this step is skipped.
    bool skip_validation = 1;

    // self_registration denotes whether people can register themselves an user
    // account or they need to be granted an invitation to do so.
    bool self_registration = 2;

    // admin_approval denotes whether or not admins need to validate user accounts
    // after they are registered.
    bool admin_approval = 3;
  }
  // user_registration are the settings used to configure the user registration flow.
  UserRegistrationFlow user_registration = 3 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  // validation_token_ttl denotes the time an account validation token is valid
  // after being issued.
  google.protobuf.Duration validation_token_ttl = 4 [(gogoproto.customname) = "ValidationTokenTTL", (gogoproto.nullable) = false, (gogoproto.stdduration) = true];

  // allowed_emails is a list of globs to restrict emails to. If empty all emails are valid.
  repeated string allowed_emails = 5;

  // invitation_token_ttl denotes the time an invitation token is valid after being issued.
  google.protobuf.Duration invitation_token_ttl = 6 [(gogoproto.customname) = "InvitationTokenTTL", (gogoproto.nullable) = false, (gogoproto.stdduration) = true];
}

message UpdateSettingsRequest {
  // settings are the settings to be updated.
  IdentityServerSettings settings = 1 [(gogoproto.nullable) = false];

  // update_mask is the symbolic set of fields that will be affected in the update
  // operation. Fields not included in the update_mask are not changed and ignored
  // in the request. Must be non-empty.
  google.protobuf.FieldMask update_mask = 2 [(gogoproto.nullable) = false];
}

message ResetUserPasswordResponse {
  // password is the user's new auto-generated password.
  string password = 1;
}

message SendInvitationRequest {
  // email is the email the invitation will be sent at.
  string email = 1;
}

message ListInvitationsResponse {
  message Invitation {
    // email is the email the invitation was sent at.
    string email = 1;

    // issued_at denotes when the invitation was issued.
    google.protobuf.Timestamp issued_at = 2 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];

    // expires_at denotes the time the invitation will expire.
    // This timestamp is based on the setting `InvitationTokenTTL` and is set
    // on the time the invitation is issued.
    google.protobuf.Timestamp expires_at = 3 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  }
  // invitation is the list of sent invitations.
  repeated Invitation invitations = 1;
}

message DeleteInvitationRequest {
  // email is the email the invitation was sent at.
  string email = 1;
}

message ListUsersRequest {
  message FilterState {
    ReviewingState state = 1;
  }
  // filter is a optional field to filter the response by the reviewing state.
  FilterState filter = 1 [(gogoproto.embed) = true];
}

message ListUsersResponse {
  repeated User users = 1;
}

message ListClientsRequest {
  message FilterState {
    ReviewingState state = 1;
  }
  // filter_state is a optional field to filter the response by the reviewing state.
  FilterState filter_state = 1 [(gogoproto.embed) = true];
}

// IsAdmin is the service that provides an admin methods to manage the server.
service IsAdmin {
  // GetSettings returns the values of the editable settings.
  rpc GetSettings(google.protobuf.Empty) returns (IdentityServerSettings) {
    option (google.api.http) = {
      get: "/admin/settings"
    };
  };

  // UpdateSettings updates the editable settings.
  rpc UpdateSettings(UpdateSettingsRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      patch: "/admin/settings"
      body: "*"
    };
  };

  // CreateUser creates an account on behalf of an user.
  // A password is generated and sent to the user's email.
  rpc CreateUser(CreateUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/admin/users"
      body: "*"
    };
  };

  // GetUser returns the user account that matches the identifier.
  rpc GetUser(UserIdentifier) returns (User) {
    option (google.api.http) = {
      get: "/admin/users/{user_id}"
    };
  };

  // ListUsers returns a list of users with optional filtering.
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {
      get: "/admin/users"
    };
  };

  // UpdateUser updates an user.
  // If email address is updated it sends an email to validate it if and only if
  // the `SkipValidation` setting is disabled.
  rpc UpdateUser(UpdateUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      patch: "/admin/users/{user.id.user_id}"
      body: "*"
    };
  };

  // ResetUserPassword sets an autogenerated password to the user that matches
  // the identifier. The new password is returned on the response but also send
  // by email to the user.
  rpc ResetUserPassword(UserIdentifier) returns (ResetUserPasswordResponse) {
    option (google.api.http) = {
      post: "/admin/users/{user_id}/reset-password"
    };
  };

  // DeleteUser deletes an user.
  rpc DeleteUser(UserIdentifier) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/admin/users/{user_id}"
    };
  };

  // SendInvitation sends by email a token that can be used to create a new account.
  // All invitations are expirable and the TTL is defined on a setitngs variable.
  rpc SendInvitation(SendInvitationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/admin/invitations"
      body: "*"
    };
  };

  // ListInvitations lists all the sent invitations.
  rpc ListInvitations(google.protobuf.Empty) returns (ListInvitationsResponse) {
    option (google.api.http) = {
      get: "/admin/invitations"
    };
  };

  // DeleteInvitation revokes an unused invitation or deletes an expired one.
  rpc DeleteInvitation(DeleteInvitationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/admin/invitations/{email}"
    };
  };

  // GetClient returns the client that matches the identifier.
  rpc GetClient(ClientIdentifier) returns (Client) {
    option (google.api.http) = {
      get: "/admin/clients/{client_id}"
    };
  };

  // ListClients returns a list of third-party clients with optional filtering.
  rpc ListClients(ListClientsRequest) returns (ListClientsResponse) {
    option (google.api.http) = {
      get: "/admin/clients"
    };
  };

  // UpdateClient updates a third-party client.
  rpc UpdateClient(UpdateClientRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      patch: "/admin/clients/{client.id.client_id}"
      body: "*"
    };
  };

  // DeleteClient deletes the client that matches the identifier and revokes all
  // user authorizations.
  rpc DeleteClient(ClientIdentifier) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/admin/clients/{client_id}"
    };
  };
}

message CreateUserRequest {
  // user is the user to be created.
  User user = 1 [(gogoproto.nullable) = false];

  // invitation_token is the token provided within the registration process to
  // be able to create an user account.
  // This token can be issued by an admin and is only required when the Identity Server
  // registration mode is set to "invitation only", otherwise it will be ignored.
  string invitation_token = 2;
}

message UpdateUserRequest {
  // User is the user to be updated.
  User user = 1 [(gogoproto.nullable) = false];

  // update_mask is the symbolic set of fields that will be affected in the update
  // operation. Fields not included in the update_mask are not changed and ignored
  // in the request. Must be non-empty.
  google.protobuf.FieldMask update_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateUserPasswordRequest {
  // old is the user's old password.
  string old = 1;

  // new is the user's new password.
  string new = 2;
}

message GenerateUserAPIKeyRequest {
  // name is the name of the API key to be generated.
  string name = 1;

  // rights the are rights the generated API key will bear.
  repeated Right rights = 2;
}

message ListUserAPIKeysResponse {
  // api_keys are the API keys that the user has currently registered.
  repeated APIKey api_keys = 1 [(gogoproto.customname) = "APIKeys"];
}

message UpdateUserAPIKeyRequest {
  // name is the name of the API key to be generated.
  string name = 1;

  // rights the are rights the generated API key will bear.
  repeated Right rights = 2;
}

message RemoveUserAPIKeyRequest {
  // name is the name of the user API key to be removed.
  string name = 1;
}

message ValidateUserEmailRequest {
  // token is the token sent to the user's email address in order to validate it.
  string token = 1;
}

message ListAuthorizedClientsResponse {
  // clients is the list of clients an user has currently authorized.
  repeated Client clients = 1;
}

// IsUser is the interface that provides methods to manage users in the Identity Server.
service IsUser {
  // CreateUser creates a new user on the network.
  rpc CreateUser(CreateUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/users"
      body: "*"
    };
  };

  // GetUser returns the current user.
  rpc GetUser(google.protobuf.Empty) returns (User) {
    option (google.api.http) = {
      get: "/users/me"
    };
  };

  // UpdateUser edits the profile of the authenticated user.
  // If email address is updated it sends an email to validate it if and only if
  // the `SkipValidation` setting is disabled.
  rpc UpdateUser(UpdateUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      patch: "/users/me"
      body: "*"
    };
  };

  // UpdateUserPassword sets a new password for the authenticated user account.
  rpc UpdateUserPassword(UpdateUserPasswordRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/users/me/password"
      body: "*"
    };
  };

  // DeleteUser permantly deletes the user account of the authenticated user.
  rpc DeleteUser(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/users/me"
    };
  };

  // GenerateUserAPIKey generates a new API key for the authenticated user and returns it.
  rpc GenerateUserAPIKey(GenerateUserAPIKeyRequest) returns (APIKey) {
    option (google.api.http) = {
      post: "/users/me/api-keys"
      body: "*"
    };
  };

  // ListUserAPIKeys returns all the user API keys that the authenticated user has.
  rpc ListUserAPIKeys(google.protobuf.Empty) returns (ListUserAPIKeysResponse) {
    option (google.api.http) = {
      get: "/users/me/api-keys"
    };
  };

  // UpdateUserAPIKey updates the rights of an API key of the authenticated user.
  rpc UpdateUserAPIKey(UpdateUserAPIKeyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      patch: "/users/me/api-keys/{name}"
      body: "*"
    };
  };

  // RemoveUserAPIKey removes an API key from the authenticated user.
  rpc RemoveUserAPIKey(RemoveUserAPIKeyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/users/me/api-keys/{name}"
    };
  };

  // ValidateUserEmail validates the user's email address of the authenticated
  // user by using the token sent to the user's email address.
  rpc ValidateUserEmail(ValidateUserEmailRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/users/me/validate-email"
      body: "*"
    };
  };

  // RequestUserEmailValidation re-issues a new email validation token and sends
  // it to the user's email address so he can validate it. Any previous validation
  // token that has not been used will be revoked.
  rpc RequestUserEmailValidation(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/users/me/validate-email/challenge"
    };
  };

  // ListAuthorizedClients returns the list of clients that the authenticated user
  // has currently authorized to access its account.
  rpc ListAuthorizedClients(google.protobuf.Empty) returns (ListAuthorizedClientsResponse) {
    option (google.api.http) = {
      get: "/users/me/authorized-clients"
    };
  };

  // RevokeClient revokes the access of an authorized client to the authenticated
  // user's account.
  rpc RevokeAuthorizedClient(ClientIdentifier) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/users/me/authorized-clients/{client_id}"
    };
  };
}

message CreateApplicationRequest {
  // application is the application to be created.
  Application application = 1 [(gogoproto.nullable) = false];

  // organization_id is the optional organization's ID that creates the application.
  OrganizationIdentifier organization_id = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
}

message ListApplicationsRequest {
  // organization_id is the optional organization's ID whose applications will be
  // listed of.
  OrganizationIdentifier organization_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
}

message ListApplicationsResponse {
  // applications is the list of applications the authenticated user has access to.
  repeated Application applications = 1;
}

message UpdateApplicationRequest {
  // application is the application to be updated.
  Application application = 1 [(gogoproto.nullable) = false];

  // update_mask is the set of field paths that will be affected in the update
  // operation. Fields not included in the update_mask are not changed and ignored
  // in the request. Must be non-empty.
  google.protobuf.FieldMask update_mask = 2 [(gogoproto.nullable) = false];
}

message GenerateApplicationAPIKeyRequest {
  // application_id is the application's ID which API key will be added to.
  ApplicationIdentifier application_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ""];

  // name is the name of the API key to be generated.
  string name = 2;

  // rights the are rights the generated API key will bear.
  repeated Right rights = 3;
}

message ListApplicationAPIKeysResponse {
  // api_keys are the API keys that the application has currently registered.
  repeated APIKey api_keys = 1 [(gogoproto.customname) = "APIKeys"];
}

message UpdateApplicationAPIKeyRequest {
  // application_id is the application's ID which an API key will be modified.
  ApplicationIdentifier application_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ""];

  // name is the name of the application API key to be updated.
  string name = 2;

  // rights are the list of rights that will be set.
  repeated Right rights = 3;
}

message RemoveApplicationAPIKeyRequest {
  // application_id is the application's ID which the API key will be removed from.
  ApplicationIdentifier application_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ""];

  // name is the name of the application API key to be removed.
  string name = 2;
}

message ListApplicationCollaboratorsResponse {
  // collaborators is the list of collaborators the application has.
  repeated ApplicationCollaborator collaborators = 1;
}

message ListApplicationRightsResponse {
  // rights are the rights that a caller has to an application.
  repeated Right rights = 1;
}

// IsApplication is the interface that provides methods to manage applications
// in the Identity Server.
service IsApplication {
  // CreateApplication creates a new application on the network and adds the
  // authenticated user as collaborator with all the possible rights. If an
  // organization identifier is provided the application will be created under
  // the organization whose will be added as collaborator with all the possible
  // rights if and only if the authenticated user is member of the organization
  // with enough rights.
  rpc CreateApplication(CreateApplicationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/applications"
      body: "application"
      additional_bindings {
        post: "/organizations/{organization_id.organization_id}/applications"
        body: "application"
      }
    };
  };

  // GetApplication returns the application that matches the identifier.
  rpc GetApplication(ApplicationIdentifier) returns (Application) {
    option (google.api.http) = {
      get: "/applications/{application_id}"
    };
  };

  // ListApplications returns either all the applications which the authenticated
  // user has access to or the applications that the organization that matches the
  // identifier is collaborator of if and only if the authenticated user has enough
  // rights.
  rpc ListApplications(ListApplicationsRequest) returns (ListApplicationsResponse) {
    option (google.api.http) = {
      get: "/applications"
      additional_bindings {
        get: "/organizations/{organization_id.organization_id}/applications"
      }
    };
  };

  // UpdateApplication edits an application.
  rpc UpdateApplication(UpdateApplicationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      patch: "/applications/{application.id.application_id}"
      body: "*"
    };
  };

  // DeleteApplication permantly deletes an application.
  rpc DeleteApplication(ApplicationIdentifier) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/applications/{application_id}"
    };
  };

  // GenerateApplicationAPIKey generates a new API key for a given application
  // and returns it.
  rpc GenerateApplicationAPIKey(GenerateApplicationAPIKeyRequest) returns (APIKey) {
    option (google.api.http) = {
      post: "/applications/{application_id.application_id}/api-keys"
      body: "*"
    };
  };

  // ListApplicationAPIKeys returns all the application API keys that a given
  // application has.
  rpc ListApplicationAPIKeys(ApplicationIdentifier) returns (ListApplicationAPIKeysResponse) {
    option (google.api.http) = {
      get: "/applications/{application_id}/api-keys"
    };
  };

  // UpdateApplicationAPIKey updates the rights of a given application API key.
  rpc UpdateApplicationAPIKey(UpdateApplicationAPIKeyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      patch: "/applications/{application_id.application_id}/api-keys/{name}"
      body: "*"
    };
  };

  // RemoveApplicationAPIKey removes a given API key from an application.
  rpc RemoveApplicationAPIKey(RemoveApplicationAPIKeyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/applications/{application_id.application_id}/api-keys/{name}"
    };
  };

  // SetApplicationCollaborator sets a collaborator for a given application. If
  // the list of rights is empty the collaborator will be removed.
  rpc SetApplicationCollaborator(ApplicationCollaborator) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/applications/{application_id.application_id}/collaborators"
      body: "*"
    };
  };

  // ListApplicationCollaborators returns all the collaborators for a given application.
  rpc ListApplicationCollaborators(ApplicationIdentifier) returns (ListApplicationCollaboratorsResponse) {
    option (google.api.http) = {
      get: "/applications/{application_id}/collaborators"
    };
  };

  // ListApplicationRights returns all the rights that the caller has to the specified application.
  rpc ListApplicationRights(ApplicationIdentifier) returns (ListApplicationRightsResponse) {
    option (google.api.http) = {
      get: "/applications/{application_id}/rights"
    };
  };
}

message CreateGatewayRequest {
  // gateway is the gateway to be created.
  Gateway gateway = 1 [(gogoproto.nullable) = false];

  // organization_id is the optional organization's ID that creates the gateway.
  OrganizationIdentifier organization_id = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
}

message ListGatewaysRequest {
  // organization_id is the optional organization's ID whose gateways will be listed of.
  OrganizationIdentifier organization_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
}

message ListGatewaysResponse {
  // gateways it the list of gateways the authenticated user has access to.
  repeated Gateway gateways = 1;
}

message UpdateGatewayRequest {
  // gateway is the gateway to be updated.
  Gateway gateway = 1 [(gogoproto.nullable) = false];

  // update_mask is the set of field paths that will be affected in the update
  // operation. Fields not included in the update_mask are not changed and ignored
  // in the request. Must be non-empty.
  google.protobuf.FieldMask update_mask = 2 [(gogoproto.nullable) = false];
}

message GenerateGatewayAPIKeyRequest {
  // gateway_id is the gateway's ID which API key will be added to.
  GatewayIdentifier gateway_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ""];

  // name is the name of the API key to be generated.
  string name = 2;

  // rights the are rights the generated API key will bear.
  repeated Right rights = 3;
}

message ListGatewayAPIKeysResponse {
  // api_keys are the API keys that the gateways has currently registered.
  repeated APIKey api_keys = 1 [(gogoproto.customname) = "APIKeys"];
}

message UpdateGatewayAPIKeyRequest {
  // gateway_id is the gateway's ID which an API key will be modified.
  GatewayIdentifier gateway_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ""];

  // name is the name of the gateway API key to be updated.
  string name = 2;

  // rights are the list of rights that will be set.
  repeated Right rights = 3;
}

message RemoveGatewayAPIKeyRequest {
  // gateway_id is the gateway's ID which API key will be removed from.
  GatewayIdentifier gateway_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ""];

  // name is the name of the gateway API key to be removed.
  string name = 2;
}

message ListGatewayCollaboratorsResponse {
  // collaborators is the list of collaborators a gateway has.
  repeated GatewayCollaborator collaborators = 1;
}

message ListGatewayRightsResponse {
  // rights are the rights that a caller has to a gateway.
  repeated Right rights = 1;
}

// IsGateway is the interface that provides methods to manage gateways in the
// Identity Server.
service IsGateway {
  // CreateGateway creates a new gateway on the network and adds the authenticated
  // user as collaborator with all the possible rights. If an organization identifier
  // is provided the application will be created under the organization whose
  // will be added as collaborator with all the possible rights if and only if
  // the authenticated user is member of the organization with enough rights.
  rpc CreateGateway(CreateGatewayRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/gateways"
      body: "gateway"
      additional_bindings {
        post: "/organizations/{organization_id.organization_id}/gateways"
        body: "gateway"
      }
    };
  };

  // GetGateway returns the gateway that matches the identifier.
  rpc GetGateway(GatewayIdentifier) returns (Gateway) {
    option (google.api.http) = {
      get: "/gateways/{gateway_id}"
    };
  };

  // ListGateways returns either all the gateways which the authenticated user
  // has access to or the gateways that the organization that matches the identifier
  // is collaborator if and only if the authenticated user has enough rights.
  rpc ListGateways(ListGatewaysRequest) returns (ListGatewaysResponse) {
    option (google.api.http) = {
      get: "/gateways"
      additional_bindings {
        get: "/organizations/{organization_id.organization_id}/gateways"
      }
    };
  };

  // UpdateGateway edits a gateway and retrieves the updated version.
  rpc UpdateGateway(UpdateGatewayRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      patch: "/gateways/{gateway.id.gateway_id}"
      body: "*"
    };
  };

  // DeleteGateway permantly deletes a gateway.
  rpc DeleteGateway(GatewayIdentifier) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/gateways/{gateway_id}"
    };
  };

  // GenerateGatewayAPIKey generates a new API key for a given gateway and
  // returns it.
  rpc GenerateGatewayAPIKey(GenerateGatewayAPIKeyRequest) returns (APIKey) {
    option (google.api.http) = {
      post: "/gateways/{gateway_id.gateway_id}/api-keys"
      body: "*"
    };
  };

  // ListGatewayAPIKeys returns all the gateway API keys that a given gateway has.
  rpc ListGatewayAPIKeys(GatewayIdentifier) returns (ListGatewayAPIKeysResponse) {
    option (google.api.http) = {
      get: "/gateways/{gateway_id}/api-keys"
    };
  };

  // UpdateGatewayAPIKey updates the rights of a gateway API key.
  rpc UpdateGatewayAPIKey(UpdateGatewayAPIKeyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      patch: "/gateways/{gateway_id.gateway_id}/api-keys/{name}"
      body: "*"
    };
  };

  // RemoveGatewayAPIKey removes a given API key from a gateway.
  rpc RemoveGatewayAPIKey(RemoveGatewayAPIKeyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/gateways/{gateway_id.gateway_id}/api-keys/{name}"
    };
  };

  // SetGatewayCollaborator sets a collaborator for a given gateway. If the list
  // of rights is empty the collaborator will be removed.
  rpc SetGatewayCollaborator(GatewayCollaborator) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/gateways/{gateway_id.gateway_id}/collaborators"
      body: "*"
    };
  };

  // ListGatewayCollaborators returns all the collaborators for a given gateway.
  rpc ListGatewayCollaborators(GatewayIdentifier) returns (ListGatewayCollaboratorsResponse) {
    option (google.api.http) = {
      get: "/gateways/{gateway_id}/collaborators"
    };
  };

  // ListGatewayRights returns all the rights that the caller has to the specified gateway.
  rpc ListGatewayRights(GatewayIdentifier) returns (ListGatewayRightsResponse) {
    option (google.api.http) = {
      get: "/gateways/{gateway_id}/rights"
    };
  };
}

message CreateClientRequest {
  // client is the client to be created.
  Client client = 1 [(gogoproto.nullable) = false];
}

message ListClientsResponse {
  // clients is a list of third-party clients.
  repeated Client clients = 1;
}

message UpdateClientRequest {
  // client is the client to be updated.
  Client client = 1 [(gogoproto.nullable) = false];

  // update_mask is the set of field paths that will be affected in the update
  // operation. Fields not included in the update_mask are not changed and ignored
  // in the request. Must be non-empty.
  google.protobuf.FieldMask update_mask = 2 [(gogoproto.nullable) = false];
}

// IsClient is the interface that provides methods to manage third-party clients
// in the Identity Server.
service IsClient {
  // CreateClient sends a request to create a third-party client. The request
  // has to be approved by the admins.
  rpc CreateClient(CreateClientRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/clients"
      body: "*"
    };
  };

  // GetClient returns the client that matches the identifier.
  // It allows to be called without authorization credentials, in this case it
  // will only return the publicly information available about the client.
  rpc GetClient(ClientIdentifier) returns (Client) {
    option (google.api.http) = {
      get: "/clients/{client_id}"
    };
  };

  // ListClients returns all the clients the authenticated user has created.
  rpc ListClients(google.protobuf.Empty) returns (ListClientsResponse) {
    option (google.api.http) = {
      get: "/clients"
    };
  };

  // UpdateClient sends a request to update a client.
  rpc UpdateClient(UpdateClientRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      patch: "/clients/{client.id.client_id}"
      body: "*"
    };
  };

  // DeleteClient deletes the client that matches the identifier and revokes all
  // user authorizations.
  rpc DeleteClient(ClientIdentifier) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/clients/{client_id}"
    };
  };
}

message CreateOrganizationRequest {
  // organization is the organization to be created.
  Organization organization = 1 [(gogoproto.nullable) = false];
}

message ListOrganizationsResponse {
  // organizations is the list of organizations an user is member of.
  repeated Organization organizations = 1;
}

message UpdateOrganizationRequest {
  // organization is the organization to be updated.
  Organization organization = 1 [(gogoproto.nullable) = false];

  google.protobuf.FieldMask update_mask = 2 [(gogoproto.nullable) = false];
}

message GenerateOrganizationAPIKeyRequest {
  // organization_id is the organization's ID which API key will be added to.
  OrganizationIdentifier organization_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  // name is the name of the API key to be generated.
  string name = 2;

  // rights the are rights the generated API key will bear.
  repeated Right rights = 3;
}

message ListOrganizationAPIKeysResponse {
  // api_keys are the API keys that the organization has currently registered.
  repeated APIKey api_keys = 1 [(gogoproto.customname) = "APIKeys"];
}

message UpdateOrganizationAPIKeyRequest {
  // organization_id is the organization's ID which API key will be added to.
  OrganizationIdentifier organization_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  // name is the name of the gateway API key to be updated.
  string name = 2;

  // rights are the list of rights that will be set.
  repeated Right rights = 3;
}

message RemoveOrganizationAPIKeyRequest {
  // organization_id is the organization's ID which API key will be removed from.
  OrganizationIdentifier organization_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  // name is the name of the organization API key to be removed.
  string name = 2;
}

message ListOrganizationMembersResponse {
  // members is the list of members that are part of the organization.
  repeated OrganizationMember members = 1;
}

message ListOrganizationRightsResponse {
  // rights is the list of rights the caller bears to the organization.
  repeated Right rights = 1;
}

service IsOrganization {
  // CreateOrganization creates an organization.
  rpc CreateOrganization(CreateOrganizationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/organizations"
      body: "*"
    };
  };

  // GetOrganization returns an organization.
  rpc GetOrganization(OrganizationIdentifier) returns (Organization) {
    option (google.api.http) = {
      get: "/organizations/{organization_id}"
    };
  };

  // ListOrganizations returns the list of organizations the caller is member of.
  rpc ListOrganizations(google.protobuf.Empty) returns (ListOrganizationsResponse) {
    option (google.api.http) = {
      get: "/organizations"
    };
  };

  // UpdateOrganization updates an organization.
  rpc UpdateOrganization(UpdateOrganizationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      patch: "/organizations/{organization.id.organization_id}"
      body: "*"
    };
  };

  // DeleteOrganization deletes an organization.
  rpc DeleteOrganization(OrganizationIdentifier) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/organizations/{organization_id}"
    };
  };

  // GenerateOrganizationAPIKey generates an API key and returns it.
  rpc GenerateOrganizationAPIKey(GenerateOrganizationAPIKeyRequest) returns (APIKey) {
    option (google.api.http) = {
      post: "/organizations/{organization_id.organization_id}/api-keys"
      body: "*"
    };
  };

  // ListOrganizationAPIKeys list the API keys the organization has.
  rpc ListOrganizationAPIKeys(OrganizationIdentifier) returns (ListOrganizationAPIKeysResponse) {
    option (google.api.http) = {
      get: "/organizations/{organization_id}/api-keys"
    };
  };

  // UpdateOrganizationAPIKey updates an organization's API key.
  rpc UpdateOrganizationAPIKey(UpdateOrganizationAPIKeyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      patch: "/organizations/{organization_id.organization_id}/api-keys/{name}"
      body: "*"
    };
  };

  // RemoveOrganizationAPIKey removes an organization's API key.
  rpc RemoveOrganizationAPIKey(RemoveOrganizationAPIKeyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/organizations/{organization_id.organization_id}/api-keys/{name}"
    };
  };

  // SetOrganizationMember sets a member for a given organization. If the list
  // of rights is empty the member will be removed.
  rpc SetOrganizationMember(OrganizationMember) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/organizations/{organization_id.organization_id}/members"
      body: "*"
    };
  };

  // ListOrganizationMembers returns a list of all the members that belong to an organization.
  rpc ListOrganizationMembers(OrganizationIdentifier) returns (ListOrganizationMembersResponse) {
    option (google.api.http) = {
      get: "/organizations/{organization_id}/members"
    };
  };

  // ListOrganizationRights returns the rights the caller has to an organization.
  rpc ListOrganizationRights(OrganizationIdentifier) returns (ListOrganizationRightsResponse) {
    option (google.api.http) = {
      get: "/organizations/{organization_id}/rights"
    };
  };
}
