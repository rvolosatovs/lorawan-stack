// Copyright Â© 2017 The Things Network Foundation, distributed under the MIT license (see LICENSE file)

syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/TheThingsNetwork/ttn/api/application.proto";
import "github.com/TheThingsNetwork/ttn/api/client.proto";
import "github.com/TheThingsNetwork/ttn/api/collaborator.proto";
import "github.com/TheThingsNetwork/ttn/api/rights.proto";
import "github.com/TheThingsNetwork/ttn/api/identifiers.proto";
import "github.com/TheThingsNetwork/ttn/api/metadata.proto";
import "github.com/TheThingsNetwork/ttn/api/gateway.proto";
import "github.com/TheThingsNetwork/ttn/api/user.proto";
import "google/protobuf/empty.proto";

package ttn.v3;

option go_package = "github.com/TheThingsNetwork/ttn/pkg/ttnpb";

// GtwGr implements a Gateway Registry service.
service GtwGr {
  // PullConfiguration sends a new GatewayConfiguration, with all the latest values,
  // at connection and when a gateway's configuration is updated.
  rpc PullConfiguration(GatewayIdentifier) returns (stream GatewayConfiguration);
}

message CreateUserRequest {
  // user_id is the ID of the user.
  UserIdentifier user_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  // email address of the user.
  string email = 2;

  // password is the user's unencrypted password.
  string password = 3;

  // name is the user's full name.
  string name = 4;
}

message UpdateUserRequest {
  // email is the new email of the user.
  string email = 1;

  // name is the new name of the user.
  string name = 2;
}

message UpdateUserPasswordRequest {
  // old is the user's old password.
  string old = 1;

  // new is the user's new password.
  string new = 2;
}

// IsUser is the interface that provides methods to manage users in the Identity Server.
service IsUser {
  // CreateUser creates a new user on the network.
  rpc CreateUser(CreateUserRequest) returns (google.protobuf.Empty);

  // GetUser returns the profile of an user by ID. If the user identifier is empty it
  // returns the profile of the authenticated user.
  rpc GetUser(UserIdentifier) returns (User);

  // UpdateUser edits the profile of the authenticated user.
  rpc UpdateUser(UpdateUserRequest) returns (google.protobuf.Empty);

  // UpdateUserPassword sets a new password for the authenticated user account.
  rpc UpdateUserPassword(UpdateUserPasswordRequest) returns (google.protobuf.Empty);

  // DeleteUser permantly deletes the user account of the authenticated user.
  rpc DeleteUser(google.protobuf.Empty) returns (google.protobuf.Empty);
}

message CreateApplicationRequest {
  // application_id is the ID of the application to be created.
  ApplicationIdentifier application_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  // description is the description of the application.
  string description = 2;

  // app_euis are the app euis this application uses.
  repeated bytes app_euis = 3 [(gogoproto.customname) = "AppEUIs", (gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/pkg/types.EUI64"];

  // api_keys are the API keys of the application.
  repeated APIKey api_keys = 4 [(gogoproto.nullable) = false, (gogoproto.customname) = "APIKeys"];
}

message ListApplicationsResponse {
  repeated Application applications = 1 [(gogoproto.nullable) = false];
}

message UpdateApplicationRequest {
  ApplicationIdentifier application_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  // description is the description of the application.
  string description = 2;

  // app_euis are the app euis this application uses.
  repeated bytes app_euis = 3 [(gogoproto.customname) = "AppEUIs", (gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/pkg/types.EUI64"];

  // api_keys are the API keys of the application.
  repeated APIKey api_keys = 4 [(gogoproto.nullable) = false, (gogoproto.customname) = "APIKeys"];
}

message AddApplicationAppEUIRequest {
  ApplicationIdentifier application_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  // app_eui is the AppEUI to be added.
  bytes app_eui = 2 [(gogoproto.customname) = "AppEUI", (gogoproto.nullable) = false, (gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/pkg/types.EUI64"];
}

message GenerateApplicationAppEUIResponse {
  // app_eui is the AppEUI that has been generated.
  bytes app_eui = 1 [(gogoproto.customname) = "AppEUI", (gogoproto.nullable) = false, (gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/pkg/types.EUI64"];
}

message ListApplicationAppEUIsResponse {
  repeated bytes app_euis = 1 [(gogoproto.customname) = "AppEUIs", (gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/pkg/types.EUI64"];
}

message RemoveApplicationAppEUIRequest {
  ApplicationIdentifier application_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  // app_eui is the AppEUI to be removed.
  bytes app_eui = 2 [(gogoproto.customname) = "AppEUI", (gogoproto.nullable) = false, (gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/pkg/types.EUI64"];
}

message GenerateApplicationAPIKeyRequest {
  ApplicationIdentifier application_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  // name is the name of the API key to be generated.
  string name = 2;

  // rights the are rights the generated API key will bear.
  repeated Right rights = 3;
}

message ListApplicationAPIKeysResponse {
  repeated APIKey api_keys = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "APIKeys"];
}

message AddApplicationCollaboratorRequest {
  ApplicationIdentifier application_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  Collaborator collaborator = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
}

message ListApplicationCollaboratorsResponse {
  repeated Collaborator collaborators = 1 [(gogoproto.nullable) = false];
}

message RemoveApplicationCollaboratorRequest {
  ApplicationIdentifier application_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  UserIdentifier user_id = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
}

message ApplicationRight {
  ApplicationIdentifier application_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  UserIdentifier user_id = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  // right is the right that the user holds for the application.
  Right right = 3;
}

message ListApplicationRightsResponse {
  // rights is a list of rights that an user holds for an application.
  repeated Right rights = 3;
}

// IsApplication is the interface that provides methods to manage applications
// in the Identity Server.
service IsApplication {
  // CreateApplication creates a new application on the network.
  rpc CreateApplication(CreateApplicationRequest) returns (google.protobuf.Empty);

  // GetApplication finds an application by ID and retrieves it.
  rpc GetApplication(ApplicationIdentifier) returns (Application);

  // ListApplications returns all the applications where the authenticated user
  // is collaborator.
  rpc ListApplications(google.protobuf.Empty) returns (ListApplicationsResponse);

  // UpdateApplication edits an application.
  rpc UpdateApplication(UpdateApplicationRequest) returns (google.protobuf.Empty);

  // DeleteApplication permantly deletes an application.
  rpc DeleteApplication(ApplicationIdentifier) returns (google.protobuf.Empty);

  // AddApplicationAppEUI adds a given AppEUI to a given application.
  rpc AddApplicationAppEUI(AddApplicationAppEUIRequest) returns (google.protobuf.Empty);

  // GenerateApplicationAppEUI generates a new AppEUI for a given application and returns it.
  rpc GenerateApplicationAppEUI(ApplicationIdentifier) returns (GenerateApplicationAppEUIResponse);

  // ListApplicationAppEUIs returns all the registered AppEUIs of an application.
  rpc ListApplicationAppEUIs(ApplicationIdentifier) returns (ListApplicationAppEUIsResponse);

  // RemoveApplicationAppEUI deletes an AppEUI from an application.
  rpc RemoveApplicationAppEUI(RemoveApplicationAppEUIRequest) returns (google.protobuf.Empty);

  // GenerateApplicationAPIKey generates a new API key for a given application
  // and returns it.
  rpc GenerateApplicationAPIKey(GenerateApplicationAPIKeyRequest) returns (APIKey);

  // GetApplicationAPIKey returns a given API key from an application.
  rpc GetApplicationAPIKey(ApplicationAPIKeyIdentifier) returns (APIKey);

  // ListApplicationAPIKeys returns all the API keys that are registered
  // for an application.
  rpc ListApplicationAPIKeys(ApplicationIdentifier) returns (ListApplicationAPIKeysResponse);

  // RemoveApplicationAPIKey removes a given API key from an application.
  rpc RemoveApplicationAPIKey(ApplicationAPIKeyIdentifier) returns (google.protobuf.Empty);

  // AddApplicationCollaborator adds an user as collaborator of an application.
  rpc AddApplicationCollaborator(AddApplicationCollaboratorRequest) returns (google.protobuf.Empty);

  // ListApplicationCollaborators returns all the collaborators of a given application.
  rpc ListApplicationCollaborators(ApplicationIdentifier) returns (ListApplicationCollaboratorsResponse);

  // RemoveApplicationCollaborator removes a collaborator from an application.
  rpc RemoveApplicationCollaborator(RemoveApplicationCollaboratorRequest) returns (google.protobuf.Empty);

  // AddApplicationRight grants a given right to a given user for a given application.
  rpc AddApplicationRight(ApplicationRight) returns (google.protobuf.Empty);

  // ListApplicationRights returns all the rights that the authenticated user has
  // for a given application.
  rpc ListApplicationRights(ApplicationIdentifier) returns (ListApplicationRightsResponse);

  // RemoveApplicationRight revokes a right to an application collaborator.
  rpc RemoveApplicationRight(ApplicationRight) returns (google.protobuf.Empty);
}

message CreateGatewayRequest {
  // gateway_id is the Gateway's ID to be created.
  GatewayIdentifier gateway_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  // description is the description of the gateway.
  string description = 2;

  // frequency_plan_id indicates the ID of the frequency plan.
  string frequency_plan_id = 3 [(gogoproto.customname) = "FrequencyPlanID"];

  // privacy_settings defines the different privacy settings for this gateway.
  GatewayPrivacySettings privacy_settings = 4 [(gogoproto.nullable) = false];

  // auto_update indicates whether or not the gateway should be able to
  // automatically fetch and execute firmware updates.
  bool auto_update = 5;

  // platform is the gateway platform, e.g. "The Things Gateway" or "Kerklink iBTS"
  string platform = 6;

  // antennas is all the antennas that the gateway has.
  repeated GatewayAntenna antennas = 7 [(gogoproto.nullable) = false];

  // attributes is a free form map of attributes.
  map<string, string> attributes = 8;

  // cluster_address indicates the URI of the gateway server cluster to connect to,
  // in a "<ip>:<port>" format.
  string cluster_address = 9;
}

message ListGatewaysResponse {
  repeated Gateway gateways = 1 [(gogoproto.nullable) = false];
}

message UpdateGatewayRequest {
  GatewayIdentifier gateway_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  // description is the description of the gateway.
  string description = 2;

  // frequency_plan_id indicates the ID of the frequency plan.
  string frequency_plan_id = 3 [(gogoproto.customname) = "FrequencyPlanID"];

  // privacy_settings defines the different privacy settings for this gateway.
  GatewayPrivacySettings privacy_settings = 4 [(gogoproto.nullable) = false];

  // auto_update indicates whether or not the gateway should be able to
  // automatically fetch and execute firmware updates.
  bool auto_update = 5;

  // platform is the gateway platform, e.g. "The Things Gateway" or "Kerklink iBTS"
  string platform = 6;

  // antennas is all the antennas that the gateway has.
  repeated GatewayAntenna antennas = 7 [(gogoproto.nullable) = false];

  // attributes is a free form map of attributes.
  map<string, string> attributes = 8;

  // cluster_address indicates the URI of the gateway server cluster to connect to,
  // in a "<ip>:<port>" format.
  string cluster_address = 9;
}

message AddGatewayAttributeRequest {
  GatewayIdentifier gateway_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  // attribute is the name of the attribute to be added.
  string attribute = 2;

  // value is the value of the attribute to be added.
  string value = 3;
}

message ListGatewayAttributesResponse {
  // attributes is a map that contain all the gateway attributes.
  map<string, string> attributes = 1;
}

message RemoveGatewayAttributeRequest {
  GatewayIdentifier gateway_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  // attribute is the key of the attribute to be deleted.
  string attribute = 2;
}

message AddGatewayAntennaRequest {
  GatewayIdentifier gateway_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  // gain is the antenna gain relative to this gateway, in dBi.
  float gain = 2;

  // location is the antenna's location.
  Location location = 3 [(gogoproto.nullable) = false];

  // type denotes the antenna's type.
  string type = 4;

  // model denotes the antenna's model.
  string model = 5;

  // placement denotes whether if the antenna is placed indoors or outdoors.
  GatewayAntennaPlacement placement = 6;
}

message EditGatewayAntennaRequest {
  GatewayAntennaIdentifier antenna_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  // gain is the antenna gain relative to this gateway, in dBi.
  float gain = 2;

  // location is the antenna's location.
  Location location = 3 [(gogoproto.nullable) = false];

  // type denotes the antenna's type.
  string type = 4;

  // model denotes the antenna's model.
  string model = 5;

  // placement denotes whether if the antenna is placed indoors or outdoors.
  GatewayAntennaPlacement placement = 6;
}

message ListGatewayAntennasResponse {
  repeated GatewayAntenna antennas = 1 [(gogoproto.nullable) = false];
}

message AddGatewayCollaboratorRequest {
  GatewayIdentifier gateway_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  Collaborator collaborator = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
}

message ListGatewayCollaboratorsResponse {
  repeated Collaborator collaborators = 1 [(gogoproto.nullable) = false];
}

message ListGatewayOwnersResponse {
  // collaborators is the list of collaborators that have owner rights for the gateway.
  repeated Collaborator collaborators = 1 [(gogoproto.nullable) = false];
}

message RemoveGatewayCollaboratorRequest {
  GatewayIdentifier gateway_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  UserIdentifier user_id = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
}

message GatewayRight {
  GatewayIdentifier gateway_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  UserIdentifier user_id = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  // right is the right this user holds for the gatewa true, (gogoproto.nullable) = false];
  Right right = 3;
}

message ListGatewayRightsResponse {
  // rights is a list of rights that an user has to the gateway.
  repeated Right rights = 1;
}

// IsGateway is the interface that provides methods to manage gateways in the
// Identity Server.
service IsGateway {
  // CreateGateway creates a new gateway on the network and returns it.
  rpc CreateGateway(CreateGatewayRequest) returns (Gateway);

  // GetGateway finds a gateway by ID and retrieves it.
  rpc GetGateway(GatewayIdentifier) returns (Gateway);

  // ListGateways returns all the gateways which the authenticated user is collaborator.
  rpc ListGateways(google.protobuf.Empty) returns (ListGatewaysResponse);

  // UpdateGateway edits a gateway and retrieves the updated version.
  rpc UpdateGateway(UpdateGatewayRequest) returns (Gateway);

  // DeleteGateway permantly deletes a gateway.
  rpc DeleteGateway(GatewayIdentifier) returns (google.protobuf.Empty);

  // AddGatewayAttribute sets an attribute with a key in the gateway.
  rpc AddGatewayAttribute(AddGatewayAttributeRequest) returns (google.protobuf.Empty);

  // ListGatewayAttributes returns all gateway attributes.
  rpc ListGatewayAttributes(GatewayIdentifier) returns (ListGatewayAttributesResponse);

  // RemoveGatewayAttribute removes an attribute matching the given key.
  rpc RemoveGatewayAttribute(RemoveGatewayAttributeRequest) returns (google.protobuf.Empty);

  // AddGatewayAntenna adds a new antenna to a gateway.
  rpc AddGatewayAntenna(AddGatewayAntennaRequest) returns (google.protobuf.Empty);

  // ListGatewayAntenas returns all the antennas that a gateway has registered.
  rpc ListGatewayAntennas(GatewayIdentifier) returns (ListGatewayAntennasResponse);

  // EditGatewayAntenna edits a gateway antenna.
  rpc EditGatewayAntenna(EditGatewayAntennaRequest) returns (google.protobuf.Empty);

  // RemoveGatewayAntenna removes a given antenna from a gateway.
  rpc RemoveGatewayAntenna(GatewayAntennaIdentifier) returns (google.protobuf.Empty);

  // AddGatewayCollaborator makes an user collaborator a gateway.
  rpc AddGatewayCollaborator(AddGatewayCollaboratorRequest) returns (google.protobuf.Empty);

  // ListGatewayCollaborators returns all the collaborators for a given gateway.
  rpc ListGatewayCollaborators(GatewayIdentifier) returns (ListGatewayCollaboratorsResponse);

  // ListGatewayOwners returns all the collaborators that are owners of a gateway.
  rpc ListGatewayOwners(GatewayIdentifier) returns (ListGatewayOwnersResponse);

  // RemoveGatewayCollaborator revokes all the rights that a collaborator has to
  // a given gateway.
  rpc RemoveGatewayCollaborator(RemoveGatewayCollaboratorRequest) returns (google.protobuf.Empty);

  // AddGatewayRight grants a right to a given user for a given gateway.
  rpc AddGatewayRight(GatewayRight) returns (google.protobuf.Empty);

  // ListGatewayRights returns all the rights that the authenticated user has
  // to a given gateway.
  rpc ListGatewayRights(GatewayIdentifier) returns (ListGatewayRightsResponse);

  // RemoveGatewayRight revokes a given right from a given gateway collaborator
  rpc RemoveGatewayRight(GatewayRight) returns (google.protobuf.Empty);
}

message CreateClientRequest {
  // client_id is the client's ID to be created.
  ClientIdentifier client_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  // description is the description of the client.
  string description = 2;

  // secret is the secret used to prove the client identity.
  string secret = 3;

  // callback_uri is the callback URI of the client.
  string callback_uri = 4 [(gogoproto.customname) = "CallbackURI"];

  // grants denotes which OAuth2 flows can the client use to get a token.
  repeated ClientGrant grants = 5;

  // scope denotes what scopes the client will have access to.
  repeated ClientScope scope = 6;
}

message ListClientsResponse {
  // clients is a list of third-party clients.
  repeated Client clients = 1 [(gogoproto.nullable) = false];
}

message UpdateClientRequest {
  ClientIdentifier client_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  // description is the description of the client.
  string description = 2;

  // secret is the secret used to prove the client identity.
  string secret = 3;

  // callback_uri is the callback URI of the client.
  string callback_uri = 4 [(gogoproto.customname) = "CallbackURI"];

  // grants denotes which OAuth2 flows can the client use to get a token.
  repeated ClientGrant grants = 5;

  // scope denotes what scopes the client will have access to.
  repeated ClientScope scope = 6;
}

message SetClientOfficialRequest {
  ClientIdentifier client_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  // official denotes whether if the client is labelled as an official third-party
  // client by the tenant admin.
  bool official = 2;
}

message SetClientStateRequest {
  ClientIdentifier client_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  ClientState state = 2;
}

message AddClientCollaboratorRequest {
  ClientIdentifier client_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  Collaborator collaborator = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
}

message ListClientCollaboratorsResponse {
  repeated Collaborator collaborators = 1 [(gogoproto.nullable) = false];
}

message RemoveClientCollaboratorRequest {
  ClientIdentifier client_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  UserIdentifier user_id = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
}

message ClientRight {
  ClientIdentifier client_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  UserIdentifier user_id = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  // right is the right that the user holds for the client.
  Right right = 3;
}

message ListClientRightsResponse {
  // rights is a list of rights that an user has to the client.
  repeated Right rights = 1;
}

// IsClient is the interface that provides methods to manage third-party clients
// in the Identity Server.
service IsClient {
  // CreateClient creates a new client on the network.
  rpc CreateClient(CreateClientRequest) returns (google.protobuf.Empty);

  // GetClient finds a client by ID and retrieves it.
  rpc GetClient(ClientIdentifier) returns (Client);

  // ListClients returns all the clients which the authenticated user is collaborator.
  rpc ListClients(google.protobuf.Empty) returns (ListClientsResponse);

  // UpdateClient edits a client.
  rpc UpdateClient(UpdateClientRequest) returns (google.protobuf.Empty);

  // DeleteClient permantly deletes a client.
  rpc DeleteClient(ClientIdentifier) returns (google.protobuf.Empty);

  // SetClientOfficial allows to a tenant admin to add or remove the official
  // distinguise "official" label of a third-party client.
  rpc SetClientOfficial(SetClientOfficialRequest) returns (google.protobuf.Empty);

  // SetClientState allows to the tenant admin to set the reviewing state of
  // a third-party client request.
  rpc SetClientState(SetClientStateRequest) returns (google.protobuf.Empty);

  // AddClientCollaborator makes an user collaborator of a client.
  rpc AddClientCollaborator(AddClientCollaboratorRequest) returns (google.protobuf.Empty);

  // ListClientCollaborators returns all the collaborators for a given client.
  rpc ListClientCollaborators(ClientIdentifier) returns (ListClientCollaboratorsResponse);

  // RemoveClientCollaborator revokes all the rights that a collaborator has to
  // a given client.
  rpc RemoveClientCollaborator(RemoveClientCollaboratorRequest) returns (google.protobuf.Empty);

  // AddClientRight grants a right to a given user for a given client.
  rpc AddClientRight(ClientRight) returns (google.protobuf.Empty);

  // ListClientRights returns all the rights that the authenticated user has
  // to a given client.
  rpc ListClientRights(ClientIdentifier) returns (ListClientRightsResponse);

  // RemoveClientRight revokes a given right from a given client collaborator.
  rpc RemoveClientRight(ClientRight) returns (google.protobuf.Empty);
}
