// Copyright Â© 2017 The Things Network Foundation, distributed under the MIT license (see LICENSE file)

syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/TheThingsNetwork/ttn/api/application.proto";
import "github.com/TheThingsNetwork/ttn/api/client.proto";
import "github.com/TheThingsNetwork/ttn/api/collaborator.proto";
import "github.com/TheThingsNetwork/ttn/api/rights.proto";
import "github.com/TheThingsNetwork/ttn/api/identifiers.proto";
import "github.com/TheThingsNetwork/ttn/api/gateway.proto";
import "github.com/TheThingsNetwork/ttn/api/user.proto";
import "github.com/TheThingsNetwork/ttn/api/settings.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";

package ttn.v3;

option go_package = "github.com/TheThingsNetwork/ttn/pkg/ttnpb";

// GtwGr implements a Gateway Registry service.
service GtwGr {
  // PullConfiguration sends a new GatewayConfiguration, with all the latest values,
  // at connection and when a gateway's configuration is updated.
  rpc PullConfiguration(GatewayIdentifier) returns (stream GatewayConfiguration);
}

message GetSettingsRequest {
  // projection_mask is the set of field paths that represents the settings that
  // will be returned in the operation. If the list is empty all settings will be returned.
  google.protobuf.FieldMask projection_mask = 1;
}

message UpdateSettingsRequest {
  // settings are the settings to be updated.
  IdentityServerSettings settings = 1 [(gogoproto.nullable) = false];

  // update_mask is the symbolic set of fields that will be affected in the update
  // operation. Fields not included in the update_mask are not changed and ignored
  // in the request. Must be non-empty.
  google.protobuf.FieldMask update_mask = 2 [(gogoproto.nullable) = false];
}

// IsSettings is the service that provided methods to manage the settings of an
// Identity Server within a tenant.
service IsSettings {
  // GetSettings returns the value of the specified settings.
  rpc GetSettings(GetSettingsRequest) returns (IdentityServerSettings);

  // UpdateSettings updates the settings.
  rpc UpdateSettings(UpdateSettingsRequest) returns (google.protobuf.Empty);
}

message CreateUserRequest {
  // user is the user to be created.
  User user = 1 [(gogoproto.nullable) = false];

  // invitation_token is the token provided within the registration process to
  // be able to create an user account.
  // This token is only required when the Identity Server registration mode is
  // set to "invitation only", otherwise it will be ignored.
  string invitation_token = 2;
}

message UpdateUserRequest {
  // User is the user to be updated.
  User user = 1 [(gogoproto.nullable) = false];

  // update_mask is the symbolic set of fields that will be affected in the update
  // operation. Fields not included in the update_mask are not changed and ignored
  // in the request. Must be non-empty.
  google.protobuf.FieldMask update_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateUserPasswordRequest {
  // old is the user's old password.
  string old = 1;

  // new is the user's new password.
  string new = 2;
}

message ValidateUserEmailRequest {
  // token is the token sent to the user's email address in order to validate it.
  string token = 1;
}

message ListAuthorizedClientsResponse {
  // clients is the list of clients an user has currently authorized.
  repeated Client clients = 1 [(gogoproto.nullable) = false];
}

// IsUser is the interface that provides methods to manage users in the Identity Server.
service IsUser {
  // CreateUser creates a new user on the network.
  rpc CreateUser(CreateUserRequest) returns (google.protobuf.Empty);

  // GetUser returns the profile of an user by ID. If the user identifier is empty it
  // returns the profile of the authenticated user.
  rpc GetUser(UserIdentifier) returns (User);

  // UpdateUser edits the profile of the authenticated user.
  rpc UpdateUser(UpdateUserRequest) returns (google.protobuf.Empty);

  // UpdateUserPassword sets a new password for the authenticated user account.
  rpc UpdateUserPassword(UpdateUserPasswordRequest) returns (google.protobuf.Empty);

  // DeleteUser permantly deletes the user account of the authenticated user.
  rpc DeleteUser(google.protobuf.Empty) returns (google.protobuf.Empty);

  // ValidateUserEmail validates the user's email address of the authenticated
  // user by using the token sent to the user's email address.
  rpc ValidateUserEmail(ValidateUserEmailRequest) returns (google.protobuf.Empty);

  // RequestUserEmailValidation re-issues a new email validation token and sends
  // it to the user's email address so he can validate it. Any previous validation
  // token that has not been used will be revoked.
  rpc RequestUserEmailValidation(google.protobuf.Empty) returns (google.protobuf.Empty);

  // ListAuthorizedClients returns the list of clients that the authenticated user
  // has currently authorized to access its account.
  rpc ListAuthorizedClients(google.protobuf.Empty) returns (ListAuthorizedClientsResponse);

  // RevokeClient revokes the access of an authorized client to the authenticated
  // user's account.
  rpc RevokeAuthorizedClient(ClientIdentifier) returns (google.protobuf.Empty);
}

message CreateApplicationRequest {
  // application is the application to be created.
  Application application = 1 [(gogoproto.nullable) = false];
}

message ListApplicationsResponse {
  // applications is the list of applications the authenticated user has access to.
  repeated Application applications = 1 [(gogoproto.nullable) = false];
}

message UpdateApplicationRequest {
  // application is the application to be updated.
  Application application = 1 [(gogoproto.nullable) = false];

  // update_mask is the set of field paths that will be affected in the update
  // operation. Fields not included in the update_mask are not changed and ignored
  // in the request. Must be non-empty.
  google.protobuf.FieldMask update_mask = 2 [(gogoproto.nullable) = false];
}

message GenerateApplicationAPIKeyRequest {
  // application_id is the application's ID which API key will be added to.
  ApplicationIdentifier application_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  // name is the name of the API key to be generated.
  string name = 2;

  // rights the are rights the generated API key will bear.
  repeated Right rights = 3;
}

message UpdateApplicationAPIKeyRequest {
  // application_id is the application's ID which an API key will be modified.
  ApplicationIdentifier application_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  // key is the API key to be updated.
  APIKey key = 2 [(gogoproto.nullable) = false];

  // update_mask is the symbolic set of fields that will be affected in the update
  // operation. Fields not included in the update_mask are not changed and ignored
  // in the request. Must be non-empty.
  google.protobuf.FieldMask update_mask = 3 [(gogoproto.nullable) = false];
}

message RemoveApplicationAPIKeyRequest {
  // application_id is the application's ID which the API key will be removed from.
  ApplicationIdentifier application_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  // key is the application API key to be removed.
  string key = 2;
}

message SetApplicationCollaboratorRequest {
  // application_id is the application ID where the collaborator will be (un)set.
  ApplicationIdentifier application_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  // collaborator is the collaborator to be set. If the list if rights is empty
  // it will result as unset.
  Collaborator collaborator = 2 [(gogoproto.nullable) = false];
}

message ListApplicationCollaboratorsResponse {
  // collaborators is the list of collaborators the application has.
  repeated Collaborator collaborators = 1 [(gogoproto.nullable) = false];
}

// IsApplication is the interface that provides methods to manage applications
// in the Identity Server.
service IsApplication {
  // CreateApplication creates a new application on the network.
  rpc CreateApplication(CreateApplicationRequest) returns (google.protobuf.Empty);

  // GetApplication finds an application by ID and retrieves it.
  rpc GetApplication(ApplicationIdentifier) returns (Application);

  // ListApplications returns all the applications where the authenticated user
  // has access to.
  rpc ListApplications(google.protobuf.Empty) returns (ListApplicationsResponse);

  // UpdateApplication edits an application.
  rpc UpdateApplication(UpdateApplicationRequest) returns (google.protobuf.Empty);

  // DeleteApplication permantly deletes an application.
  rpc DeleteApplication(ApplicationIdentifier) returns (google.protobuf.Empty);

  // GenerateApplicationAPIKey generates a new API key for a given application
  // and returns it.
  rpc GenerateApplicationAPIKey(GenerateApplicationAPIKeyRequest) returns (APIKey);

  // UpdateApplicationAPIKey updates an application API key name or rights.
  rpc UpdateApplicationAPIKey(UpdateApplicationAPIKeyRequest) returns (google.protobuf.Empty);

  // RemoveApplicationAPIKey removes a given API key from an application.
  rpc RemoveApplicationAPIKey(RemoveApplicationAPIKeyRequest) returns (google.protobuf.Empty);

  // SetApplicationCollaborator sets a collaborator for a given application. If
  // the list of rights is empty the collaborator will be removed.
  rpc SetApplicationCollaborator(SetApplicationCollaboratorRequest) returns (google.protobuf.Empty);

  // ListApplicationCollaborators returns all the collaborators for a given application.
  rpc ListApplicationCollaborators(ApplicationIdentifier) returns (ListApplicationCollaboratorsResponse);
}

message CreateGatewayRequest {
  // gateway is the gateway to be created.
  Gateway gateway = 1 [(gogoproto.nullable) = false];
}

message ListGatewaysResponse {
  // gateways it the list of gateways the authenticated user has access to.
  repeated Gateway gateways = 1 [(gogoproto.nullable) = false];
}

message UpdateGatewayRequest {
  // gateway is the gateway to be updated.
  Gateway gateway = 1 [(gogoproto.nullable) = false];

  // update_mask is the set of field paths that will be affected in the update
  // operation. Fields not included in the update_mask are not changed and ignored
  // in the request. Must be non-empty.
  google.protobuf.FieldMask update_mask = 2 [(gogoproto.nullable) = false];
}

message GenerateGatewayAPIKeyRequest {
  // gateway_id is the gateway's ID which API key will be added to.
  GatewayIdentifier gateway_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  // name is the name of the API key to be generated.
  string name = 2;

  // rights the are rights the generated API key will bear.
  repeated Right rights = 3;
}

message UpdateGatewayAPIKeyRequest {
  // gateway_id is the gateway's ID which an API key will be modified.
  GatewayIdentifier gateway_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  // key is the API key to be updated.
  APIKey key = 2 [(gogoproto.nullable) = false];

  // update_mask is the symbolic set of fields that will be affected in the update
  // operation. Fields not included in the update_mask are not changed and ignored
  // in the request. Must be non-empty.
  google.protobuf.FieldMask update_mask = 3 [(gogoproto.nullable) = false];
}

message RemoveGatewayAPIKeyRequest {
  // gateway_id is the gateway's ID which API key will be removed from.
  GatewayIdentifier gateway_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  // key is the gateway API key to be removed.
  string key = 2;
}

message SetGatewayCollaboratorRequest {
  // gateway_id is the ID of the gateway where the collaborator will be (un)set.
  GatewayIdentifier gateway_id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  // collaborator is the collaborator to be set. If the list if rights is empty
  // it will result as unset.
  Collaborator collaborator = 2 [(gogoproto.nullable) = false];
}

message ListGatewayCollaboratorsResponse {
  // collaborators is the list of collaborators a gateway has.
  repeated Collaborator collaborators = 1 [(gogoproto.nullable) = false];
}

// IsGateway is the interface that provides methods to manage gateways in the
// Identity Server.
service IsGateway {
  // CreateGateway creates a new gateway on the network and returns it.
  rpc CreateGateway(CreateGatewayRequest) returns (google.protobuf.Empty);

  // GetGateway finds a gateway by ID and retrieves it.
  rpc GetGateway(GatewayIdentifier) returns (Gateway);

  // ListGateways returns all the gateways which the authenticated user
  // has access to.
  rpc ListGateways(google.protobuf.Empty) returns (ListGatewaysResponse);

  // UpdateGateway edits a gateway and retrieves the updated version.
  rpc UpdateGateway(UpdateGatewayRequest) returns (google.protobuf.Empty);

  // DeleteGateway permantly deletes a gateway.
  rpc DeleteGateway(GatewayIdentifier) returns (google.protobuf.Empty);

  // GenerateGatewayAPIKey generates a new API key for a given gateway and
  // returns it.
  rpc GenerateGatewayAPIKey(GenerateGatewayAPIKeyRequest) returns (APIKey);

  // UpdateGatewayAPIKey updates an gateway API key name or rights.
  rpc UpdateGatewayAPIKey(UpdateGatewayAPIKeyRequest) returns (google.protobuf.Empty);

  // RemoveGatewayAPIKey removes a given API key from a gateway.
  rpc RemoveGatewayAPIKey(RemoveGatewayAPIKeyRequest) returns (google.protobuf.Empty);

  // SetGatewayCollaborator sets a collaborator for a given gateway. If the list
  // of rights is empty the collaborator will be removed.
  rpc SetGatewayCollaborator(SetGatewayCollaboratorRequest) returns (google.protobuf.Empty);

  // ListGatewayCollaborators returns all the collaborators for a given gateway.
  rpc ListGatewayCollaborators(GatewayIdentifier) returns (ListGatewayCollaboratorsResponse);
}

message CreateClientRequest {
  // client is the client to be created.
  Client client = 1 [(gogoproto.nullable) = false];
}

message ListClientsResponse {
  // clients is a list of third-party clients.
  repeated Client clients = 1 [(gogoproto.nullable) = false];
}

message UpdateClientRequest {
  // client is the client to be updated.
  Client client = 1 [(gogoproto.nullable) = false];

  // update_mask is the set of field paths that will be affected in the update
  // operation. Fields not included in the update_mask are not changed and ignored
  // in the request. Must be non-empty.
  google.protobuf.FieldMask update_mask = 2 [(gogoproto.nullable) = false];
}

// IsClient is the interface that provides methods to manage third-party clients
// in the Identity Server.
service IsClient {
  // CreateClient sends a request to create a third-party client. The request
  // has to be approved by the admins.
  rpc CreateClient(CreateClientRequest) returns (google.protobuf.Empty);

  // GetClient finds a client by ID and retrieves it.
  rpc GetClient(ClientIdentifier) returns (Client);

  // ListClients returns all the clients the authenticated user has created.
  rpc ListClients(google.protobuf.Empty) returns (ListClientsResponse);

  // UpdateClient sends a request to update a client.
  rpc UpdateClient(UpdateClientRequest) returns (google.protobuf.Empty);

  // DeleteClient permantly deletes a client.
  rpc DeleteClient(ClientIdentifier) returns (google.protobuf.Empty);
}
