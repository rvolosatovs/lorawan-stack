// Copyright Â© 2019 The Things Network Foundation, The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "lorawan-stack/api/contact_info.proto";
import "lorawan-stack/api/enums.proto";
import "lorawan-stack/api/identifiers.proto";
import "lorawan-stack/api/rights.proto";

package ttn.lorawan.v3;

option go_package = "go.thethings.network/lorawan-stack/pkg/ttnpb";

// The OAuth2 flows an OAuth client can use to get an access token.
enum GrantType {
  option (gogoproto.goproto_enum_prefix) = false;

  // Grant type used to exchange an authorization code for an access token.
  GRANT_AUTHORIZATION_CODE = 0;
  // Grant type used to exchange a user ID and password for an access token.
  GRANT_PASSWORD = 1;
  // Grant type used to exchange a refresh token for an access token.
  GRANT_REFRESH_TOKEN = 2;
}

// An OAuth client on the network.
message Client {
  ClientIdentifiers ids = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (validate.rules).message.required = true];
  google.protobuf.Timestamp created_at = 2 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  google.protobuf.Timestamp updated_at = 3 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];

  string name = 4 [(validate.rules).string.max_len = 50];
  string description = 5 [(validate.rules).string.max_len = 2000];
  map<string,string> attributes = 6 [(validate.rules).map.keys.string = {pattern: "^[a-z0-9](?:[-]?[a-z0-9]){2,}$" , max_len: 36}];
  repeated ContactInfo contact_info = 7;

  // The client secret is only visible to collaborators of the client.
  string secret = 8;
  // The allowed redirect URIs against which authorization requests are checked.
  // If the authorization request does not pass a redirect URI, the first one
  // from this list is taken.
  repeated string redirect_uris = 9 [(gogoproto.customname) = "RedirectURIs"];
  // The allowed logout redirect URIs against which client initiated logout
  // requests are checked. If the authorization request does not pass a redirect
  // URI, the first one from this list is taken.
  repeated string logout_redirect_uris = 15 [(gogoproto.customname) = "LogoutRedirectURIs"];
  // The reviewing state of the client.
  // This field can only be modified by admins.
  State state = 10 [(validate.rules).enum.defined_only = true];
  // If set, the authorization page will be skipped.
  // This field can only be modified by admins.
  bool skip_authorization = 11;
  // If set, the authorization page will show endorsement.
  // This field can only be modified by admins.
  bool endorsed = 12;
  // OAuth flows that can be used for the client to get a token.
  // After a client is created, this field can only be modified by admins.
  repeated GrantType grants = 13 [(validate.rules).repeated.items.enum.defined_only = true];
  // Rights denotes what rights the client will have access to.
  // Users that previously authorized this client will have to re-authorize the
  // client after rights are added to this list.
  repeated Right rights = 14 [(validate.rules).repeated.items.enum.defined_only = true];
}

message Clients {
  repeated Client clients = 1;
}

message GetClientRequest {
  ClientIdentifiers client_ids = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (validate.rules).message.required = true];
  google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message ListClientsRequest {
  // By default we list all OAuth clients the caller has rights on.
  // Set the user or the organization (not both) to instead list the OAuth clients
  // where the user or organization is collaborator on.

  OrganizationOrUserIdentifiers collaborator = 1;
  google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
  // Order the results by this field path (must be present in the field mask).
  // Default ordering is by ID. Prepend with a minus (-) to reverse the order.
  string order = 3 [
    (validate.rules).string = { in: ["", "client_id", "-client_id", "name", "-name", "created_at", "-created_at"] }
  ];
  // Limit the number of results per page.
  uint32 limit = 4 [(validate.rules).uint32.lte = 1000];
  // Page number for pagination. 0 is interpreted as 1.
  uint32 page = 5;
}

message CreateClientRequest {
  Client client = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (validate.rules).message.required = true];
  // Collaborator to grant all rights on the newly created client.
  OrganizationOrUserIdentifiers collaborator = 2 [(gogoproto.nullable) = false, (validate.rules).message.required = true];
}

message UpdateClientRequest {
  Client client = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (validate.rules).message.required = true];
  google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message ListClientCollaboratorsRequest {
  ClientIdentifiers client_ids = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (validate.rules).message.required = true];
  // Limit the number of results per page.
  uint32 limit = 2 [(validate.rules).uint32.lte = 1000];
  // Page number for pagination. 0 is interpreted as 1.
  uint32 page = 3;
}

message GetClientCollaboratorRequest {
  ClientIdentifiers client_ids = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (validate.rules).message.required = true];
  OrganizationOrUserIdentifiers collaborator = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (validate.rules).message.required = true];
}

message SetClientCollaboratorRequest {
  ClientIdentifiers client_ids = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (validate.rules).message.required = true];
  Collaborator collaborator = 2 [(gogoproto.nullable) = false, (validate.rules).message.required = true];
}
