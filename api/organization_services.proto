// Copyright Â© 2019 The Things Network Foundation, The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "lorawan-stack/api/identifiers.proto";
import "lorawan-stack/api/organization.proto";
import "lorawan-stack/api/rights.proto";

package ttn.lorawan.v3;

option go_package = "go.thethings.network/lorawan-stack/pkg/ttnpb";

service OrganizationRegistry {
  // Create a new organization. This also sets the given user as
  // first collaborator with all possible rights.
  rpc Create(CreateOrganizationRequest) returns (Organization) {
    option (google.api.http) = {
      post: "/users/{collaborator.user_ids.user_id}/organizations"
      body: "*"
    };
  };

  // Get the organization with the given identifiers, selecting the fields given
  // by the field mask. The method may return more or less fields, depending on
  // the rights of the caller.
  rpc Get(GetOrganizationRequest) returns (Organization) {
    option (google.api.http) = {
      get: "/organizations/{organization_ids.organization_id}"
    };
  };

  // List organizations. See request message for details.
  rpc List(ListOrganizationsRequest) returns (Organizations) {
    option (google.api.http) = {
      get: "/organizations"
      additional_bindings {
        get: "/users/{collaborator.user_ids.user_id}/organizations"
      }
    };
  };

  rpc Update(UpdateOrganizationRequest) returns (Organization) {
    option (google.api.http) = {
      put: "/organizations/{organization.ids.organization_id}"
      body: "*"
    };
  };

  rpc Delete(OrganizationIdentifiers) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/organizations/{organization_id}"
    };
  };
}

service OrganizationAccess {
  rpc ListRights(OrganizationIdentifiers) returns (Rights) {
    option (google.api.http) = {
      get: "/organizations/{organization_id}/rights"
    };
  };

  rpc CreateAPIKey(CreateOrganizationAPIKeyRequest) returns (APIKey) {
    option (google.api.http) = {
      post: "/organizations/{organization_ids.organization_id}/api-keys"
      body: "*"
    };
  };

  rpc ListAPIKeys(ListOrganizationAPIKeysRequest) returns (APIKeys) {
    option (google.api.http) = {
      get: "/organizations/{organization_ids.organization_id}/api-keys"
    };
  };

  rpc GetAPIKey(GetOrganizationAPIKeyRequest) returns (APIKey) {
    option (google.api.http) = {
      get: "/organizations/{organization_ids.organization_id}/api-keys/{key_id}"
    };
  };

  // Update the rights of an existing organization API key. To generate an API key,
  // the CreateAPIKey should be used. To delete an API key, update it
  // with zero rights. It is required for the caller to have all assigned or/and removed rights.
  rpc UpdateAPIKey(UpdateOrganizationAPIKeyRequest) returns (APIKey) {
    option (google.api.http) = {
      put: "/organizations/{organization_ids.organization_id}/api-keys/{api_key.id}"
      body: "*"
    };
  };

  // Get the rights of a collaborator (member) of the organization.
  // Pseudo-rights in the response (such as the "_ALL" right) are not expanded.
  rpc GetCollaborator(GetOrganizationCollaboratorRequest) returns (GetCollaboratorResponse) {
    option (google.api.http) = {
      get: "/organizations/{organization_ids.organization_id}/collaborator"
      additional_bindings {
        get: "/organizations/{organization_ids.organization_id}/collaborator/user/{collaborator.user_ids.user_id}"
      }
    };
  }

  // Set the rights of a collaborator (member) on the organization. It is required for the caller to
  // have all assigned or/and removed rights.
  // Setting a collaborator without rights, removes them.
  // Note that only users can collaborate (be member of) an organization.
  rpc SetCollaborator(SetOrganizationCollaboratorRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/organizations/{organization_ids.organization_id}/collaborators"
      body: "*"
    };
  };

  rpc ListCollaborators(ListOrganizationCollaboratorsRequest) returns (Collaborators) {
    option (google.api.http) = {
      get: "/organizations/{organization_ids.organization_id}/collaborators"
    };
  };
}
