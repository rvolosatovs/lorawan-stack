// Copyright Â© 2019 The Things Network Foundation, The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "lorawan-stack/api/identifiers.proto";
import "lorawan-stack/api/rights.proto";

package ttn.lorawan.v3;

option go_package = "go.thethings.network/lorawan-stack/pkg/ttnpb";

message Event {
  string name = 1;
  google.protobuf.Timestamp time = 2 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true, (validate.rules).timestamp.required = true];
  repeated EntityIdentifiers identifiers = 3;
  google.protobuf.Any data = 4;
  repeated string correlation_ids = 5 [(gogoproto.customname) = "CorrelationIDs", (validate.rules).repeated.items.string.max_len = 100];
  string origin = 6;
  map<string,bytes> context = 7;
  // The event will be visible to a caller that has any of these rights.
  Rights visibility = 8;
}

message StreamEventsRequest {
  repeated EntityIdentifiers identifiers = 1;
  // If greater than zero, this will return historical events, up to this maximum when the stream starts.
  // If used in combination with "after", the limit that is reached first, is used.
  // The availability of historical events depends on server support and retention policy.
  uint32 tail = 2;
  // If not empty, this will return historical events after the given time when the stream starts.
  // If used in combination with "tail", the limit that is reached first, is used.
  // The availability of historical events depends on server support and retention policy.
  google.protobuf.Timestamp after = 3 [(gogoproto.stdtime) = true];
}

// The Events service serves events from the cluster.
service Events {
  // Stream live events, optionally with a tail of historical events (depending on server support and retention policy).
  // Events may arrive out-of-order.
  rpc Stream(StreamEventsRequest) returns (stream Event) {
    option (google.api.http) = {
      post: "/events"
      body: "*"
    };
  };
}
