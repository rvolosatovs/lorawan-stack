// Copyright Â© 2018 The Things Network Foundation, The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "lorawan-stack/api/end_device.proto";
import "lorawan-stack/api/identifiers.proto";

package ttn.lorawan.v3;

option go_package = "go.thethings.network/lorawan-stack/pkg/ttnpb";

// The NsDeviceRegistry service allows clients to manage their end devices on the Network Server.
service NsDeviceRegistry {
  // GetDevice returns the device that matches the given identifiers.
  // If there are multiple matches, an error will be returned.
  rpc Get(GetEndDeviceRequest) returns (EndDevice) {
    option (google.api.http) = {
      get: "/ns/applications/{end_device_ids.application_ids.application_id}/devices/{end_device_ids.device_id}"
    };
  };

  // SetDevice creates or updates the device.
  rpc Set(SetDeviceRequest) returns (EndDevice) {
    option (google.api.http) = {
      put: "/ns/applications/{device.ids.application_ids.application_id}/devices/{device.ids.device_id}"
      body: "*"
      additional_bindings {
        post: "/ns/applications/{device.ids.application_ids.application_id}/devices"
        body: "*"
      };
    };
  };

  // DeleteDevice deletes the device that matches the given identifiers.
  // If there are multiple matches, an error will be returned.
  rpc Delete(EndDeviceIdentifiers) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/ns/applications/{application_ids.application_id}/devices/{device_id}"
    };
  };
}

// The AsDeviceRegistry service allows clients to manage their end devices on the Application Server.
service AsDeviceRegistry {
  // GetDevice returns the device that matches the given identifiers.
  // If there are multiple matches, an error will be returned.
  rpc Get(GetEndDeviceRequest) returns (EndDevice) {
    option (google.api.http) = {
      get: "/as/applications/{end_device_ids.application_ids.application_id}/devices/{end_device_ids.device_id}"
    };
  };

  // SetDevice creates or updates the device.
  rpc Set(SetDeviceRequest) returns (EndDevice) {
    option (google.api.http) = {
      put: "/as/applications/{device.ids.application_ids.application_id}/devices/{device.ids.device_id}"
      body: "*"
      additional_bindings {
        post: "/as/applications/{device.ids.application_ids.application_id}/devices"
        body: "*"
      };
    };
  };

  // DeleteDevice deletes the device that matches the given identifiers.
  // If there are multiple matches, an error will be returned.
  rpc Delete(EndDeviceIdentifiers) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/as/applications/{application_ids.application_id}/devices/{device_id}"
    };
  };
}

// The JsDeviceRegistry service allows clients to manage their end devices on the Join Server.
service JsDeviceRegistry {
  // GetDevice returns the device that matches the given identifiers.
  // If there are multiple matches, an error will be returned.
  rpc Get(GetEndDeviceRequest) returns (EndDevice) {
    option (google.api.http) = {
      get: "/js/applications/{end_device_ids.application_ids.application_id}/devices/{end_device_ids.device_id}"
    };
  };

  // SetDevice creates or updates the device.
  rpc Set(SetDeviceRequest) returns (EndDevice) {
    option (google.api.http) = {
      put: "/js/applications/{device.ids.application_ids.application_id}/devices/{device.ids.device_id}"
      body: "*"
      additional_bindings {
        post: "/js/applications/{device.ids.application_ids.application_id}/devices"
        body: "*"
      };
    };
  };

  // DeleteDevice deletes the device that matches the given identifiers.
  // If there are multiple matches, an error will be returned.
  rpc Delete(EndDeviceIdentifiers) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/js/applications/{application_ids.application_id}/devices/{device_id}"
    };
  };
}
