// Copyright Â© 2019 The Things Network Foundation, The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "lorawan-stack/api/end_device.proto";
import "lorawan-stack/api/identifiers.proto";

package ttn.lorawan.v3;

option go_package = "go.thethings.network/lorawan-stack/pkg/ttnpb";

service EndDeviceRegistry {
  // Create a new end device within an application.
  rpc Create(CreateEndDeviceRequest) returns (EndDevice) {
    option (google.api.http) = {
      post: "/applications/{end_device.ids.application_ids.application_id}/devices"
      body: "*"
    };
  };

  // Get the end device with the given identifiers, selecting the fields given
  // by the field mask.
  rpc Get(GetEndDeviceRequest) returns (EndDevice) {
    option (google.api.http) = {
      get: "/applications/{end_device_ids.application_ids.application_id}/devices/{end_device_ids.device_id}"
    };
  };

  rpc GetIdentifiersForEUIs(GetEndDeviceIdentifiersForEUIsRequest) returns (EndDeviceIdentifiers);

  // List applications. See request message for details.
  rpc List(ListEndDevicesRequest) returns (EndDevices) {
    option (google.api.http) = {
      get: "/applications/{application_ids.application_id}/devices"
    };
  };

  rpc Update(UpdateEndDeviceRequest) returns (EndDevice) {
    option (google.api.http) = {
      put: "/applications/{end_device.ids.application_ids.application_id}/devices/{end_device.ids.device_id}"
      body: "*"
    };
  };

  rpc Delete(EndDeviceIdentifiers) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/applications/{application_ids.application_id}/devices/{device_id}"
    };
  };
}

service EndDeviceTemplateConverter {
  // Returns the configured formats to convert from.
  rpc ListFormats(google.protobuf.Empty) returns (EndDeviceTemplateFormats) {
    option (google.api.http) = {
      get: "/edtc/formats"
    };
  };

  // Converts the binary data to a stream of end device templates.
  rpc Convert(ConvertEndDeviceTemplateRequest) returns (stream EndDeviceTemplate) {
    option (google.api.http) = {
      post: "/edtc/convert",
      body: "*"
    };
  };
}
