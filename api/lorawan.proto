// Copyright Â© 2018 The Things Network Foundation, The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

package ttn.lorawan.v3;

option go_package = "go.thethings.network/lorawan-stack/pkg/ttnpb";

message Message {
  option (gogoproto.populate) = false;

  MHDR  m_hdr = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
  bytes mic   = 2 [(gogoproto.customname) = "MIC"];

  // Payload represents either MACPayload, RejoinRequestPayload, JoinRequestPayload or JoinAcceptPayload
  // - MACPayload length is in range [7:M] bytes, where M is region specific(see LoRaWAN spec).
  // - JoinRequestPayload length is 18 bytes.
  // - JoinAcceptPayload length is either 12 or 28 bytes.
  // - RejoinRequestPayload length is 14 for Type 0 and 2, 19 for Type 1.
  oneof Payload {
    MACPayload           mac_payload             = 3 [(gogoproto.customname) = "MACPayload"];
    JoinRequestPayload   join_request_payload    = 4;
    JoinAcceptPayload    join_accept_payload     = 5;
    RejoinRequestPayload rejoin_request_payload  = 6;
  }

  reserved 7; // reserved for proprietary payload
}

enum MType {
  JOIN_REQUEST      = 0;
  JOIN_ACCEPT       = 1;
  UNCONFIRMED_UP    = 2;
  UNCONFIRMED_DOWN  = 3;
  CONFIRMED_UP      = 4;
  CONFIRMED_DOWN    = 5;
  REJOIN_REQUEST    = 6;
  PROPRIETARY       = 7;
}

enum Major {
  LORAWAN_R1 = 0;
}

enum MACVersion {
  option (gogoproto.goproto_enum_prefix) = false;
  option (gogoproto.enum_stringer) = false;

  MAC_UNKNOWN = 0;
  MAC_V1_0 = 1;
  MAC_V1_0_1 = 2;
  MAC_V1_0_2 = 3;
  MAC_V1_1 = 4;
}

enum PHYVersion {
  option (gogoproto.goproto_enum_prefix) = false;
  option (gogoproto.enum_stringer) = false;

  PHY_UNKNOWN = 0;
  PHY_V1_0 = 1;
  PHY_V1_0_1 = 2;
  PHY_V1_0_2_REV_A = 3;
  PHY_V1_0_2_REV_B = 4;
  PHY_V1_1_REV_A = 5;
  PHY_V1_1_REV_B = 6;
}

message MHDR {
  MType m_type  = 1;
  Major major   = 2;
}

message MACPayload {
  option (gogoproto.populate) = false;

  FHDR  f_hdr                            = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
  uint32 f_port                          = 2;
  bytes frm_payload                      = 3 [(gogoproto.customname) = "FRMPayload"];
  google.protobuf.Struct decoded_payload = 4;
}

message FHDR {
  option (gogoproto.populate) = false;

  bytes dev_addr  = 1 [(gogoproto.nullable) = false, (gogoproto.customtype) = "go.thethings.network/lorawan-stack/pkg/types.DevAddr"];
  FCtrl f_ctrl    = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
  uint32 f_cnt    = 3;
  bytes f_opts    = 4;
}

message FCtrl {
  bool    adr         = 1 [(gogoproto.customname) = "ADR"];
  bool    adr_ack_req = 2 [(gogoproto.customname) = "ADRAckReq"]; // only on uplink
  bool    ack         = 3;
  bool    f_pending   = 4; // only on downlink
  bool    class_b     = 5; // only on uplink
}

message JoinRequestPayload {
  option (gogoproto.populate) = false;

  bytes join_eui  = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "JoinEUI", (gogoproto.customtype) = "go.thethings.network/lorawan-stack/pkg/types.EUI64"];
  bytes dev_eui   = 2 [(gogoproto.nullable) = false, (gogoproto.customname) = "DevEUI", (gogoproto.customtype) = "go.thethings.network/lorawan-stack/pkg/types.EUI64"];
  bytes dev_nonce = 3 [(gogoproto.nullable) = false, (gogoproto.customtype) = "go.thethings.network/lorawan-stack/pkg/types.DevNonce"];
}

enum RejoinType {
  CONTEXT = 0; // Resets DevAddr, Session Keys, Frame Counters, Radio Parameters
  SESSION = 1; // Equivalent to the initial JoinRequest
  KEYS    = 2; // Resets DevAddr, Session Keys, Frame Counters, while keeping the Radio Parameters
}

message RejoinRequestPayload {
  option (gogoproto.populate) = false;

  RejoinType  rejoin_type = 1;
  bytes       net_id      = 2 [(gogoproto.nullable) = false, (gogoproto.customname) = "NetID", (gogoproto.customtype) = "go.thethings.network/lorawan-stack/pkg/types.NetID"];
  bytes       join_eui    = 3 [(gogoproto.nullable) = false, (gogoproto.customname) = "JoinEUI", (gogoproto.customtype) = "go.thethings.network/lorawan-stack/pkg/types.EUI64"];
  bytes       dev_eui     = 4 [(gogoproto.nullable) = false, (gogoproto.customname) = "DevEUI", (gogoproto.customtype) = "go.thethings.network/lorawan-stack/pkg/types.EUI64"];
  uint32      rejoin_cnt  = 5; // contains RJCount0 or RJCount1 depending on rejoin_type
}

message JoinAcceptPayload {
  option (gogoproto.populate) = false;

  bytes       encrypted   = 1;
  bytes       join_nonce  = 2 [(gogoproto.nullable) = false, (gogoproto.customtype) = "go.thethings.network/lorawan-stack/pkg/types.JoinNonce"];
  bytes       net_id      = 3 [(gogoproto.nullable) = false, (gogoproto.customname) = "NetID", (gogoproto.customtype) = "go.thethings.network/lorawan-stack/pkg/types.NetID"];
  bytes       dev_addr    = 4 [(gogoproto.nullable) = false, (gogoproto.customtype) = "go.thethings.network/lorawan-stack/pkg/types.DevAddr"];
  DLSettings  dl_settings = 5 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
  uint32      rx_delay    = 6;
  CFList      cf_list     = 7 [(gogoproto.customname) = "CFList"];
}

message DLSettings {
  option (gogoproto.populate) = false;

  uint32 rx1_dr_offset = 1 [(gogoproto.customname) = "Rx1DROffset"];
  uint32 rx2_dr        = 2 [(gogoproto.customname) = "Rx2DR"];
  // OptNeg is set if Network Server implements LoRaWAN 1.1 or greater
  bool opt_neg         = 3 [(gogoproto.customname) = "OptNeg"];
}

enum CFListType {
  FREQUENCIES = 0;
  CHANNEL_MASKS = 1;
}

message CFList {
  option (gogoproto.populate) = false;

  CFListType type = 1;
  // Frequencies to be broadcasted, in hecto-Hz.
  // These values are broadcasted as 24 bits unsigned integers.
  // This field should not contain default values.
  repeated uint32 freq = 2;
  // ChMasks controlling the channels to be used.
  // If this value is used, there should be 80 values.
  repeated bool ch_masks = 3;
}

enum Modulation {
  LORA = 0;
  FSK  = 1;
}

enum Class {
  option (gogoproto.goproto_enum_prefix) = false;
  CLASS_A = 0;
  CLASS_B = 1;
  CLASS_C = 2;
}

// TxSettings contains the LoRaWAN settings for a transmission.
// This message is used in both uplink and downlink
message TxSettings {
  option (gogoproto.populate) = false;

  Modulation modulation = 1;

  // LoRaWAN data rate index
  uint32 data_rate_index = 2;

  // Bandwidth in Hz (derived from data_rate_index)
  uint32 bandwidth = 3;

  // LoRa spreading factor (derived from data_rate_index)
  uint32 spreading_factor = 4;

  // FSK bit rate (derived from data_rate_index)
  uint32 bit_rate = 5;

  // LoRa coding rate
  string coding_rate = 6;

  // Frequency in Hz
  uint64 frequency = 7;

  // Transmit power in dBm
  // - not set on uplink messages
  int32 tx_power = 8;

  // LoRa polarization inversion
  // - gateway to end device: true
  // - end device to gateway: false
  bool polarization_inversion = 9;

  // Index of the channel that received the message.
  uint32 channel_index = 10;
}

enum MACCommandIdentifier {
  option (gogoproto.goproto_enum_prefix) = false;
  CID_RFU_0 = 0;
  CID_RESET = 1;
  CID_LINK_CHECK = 2;
  CID_LINK_ADR = 3;
  CID_DUTY_CYCLE = 4;
  CID_RX_PARAM_SETUP = 5;
  CID_DEV_STATUS = 6;
  CID_NEW_CHANNEL = 7;
  CID_RX_TIMING_SETUP = 8;
  CID_TX_PARAM_SETUP = 9;
  CID_DL_CHANNEL = 10;
  CID_REKEY = 11;
  CID_ADR_PARAM_SETUP = 12;
  CID_DEVICE_TIME = 13;
  CID_FORCE_REJOIN = 14;
  CID_REJOIN_PARAM_SETUP = 15;
  CID_PING_SLOT_INFO = 16;
  CID_PING_SLOT_CHANNEL = 17;
  CID_BEACON_TIMING = 18; // Deprecated
  CID_BEACON_FREQ = 19;
  CID_DEVICE_MODE = 32;
}

message MACCommand {
  MACCommandIdentifier  cid                     = 1 [(gogoproto.customname) = "CID"];

  oneof payload {
    bytes                 raw_payload             = 2;
    ResetInd              reset_ind               = 3;
    ResetConf             reset_conf              = 4;
    LinkCheckAns          link_check_ans          = 5;
    LinkADRReq            link_adr_req            = 6 [(gogoproto.customname) = "LinkADRReq"];
    LinkADRAns            link_adr_ans            = 7 [(gogoproto.customname) = "LinkADRAns"];
    DutyCycleReq          duty_cycle_req          = 8;
    RxParamSetupReq       rx_param_setup_req      = 9;
    RxParamSetupAns       rx_param_setup_ans      = 10;
    DevStatusAns          dev_status_ans          = 11;
    NewChannelReq         new_channel_req         = 12;
    NewChannelAns         new_channel_ans         = 13;
    DLChannelReq          dl_channel_req          = 14;
    DLChannelAns          dl_channel_ans          = 15;
    RxTimingSetupReq      rx_timing_setup_req     = 16;
    TxParamSetupReq       tx_param_setup_req      = 17;
    RekeyInd              rekey_ind               = 18;
    RekeyConf             rekey_conf              = 19;
    ADRParamSetupReq      adr_param_setup_req     = 20 [(gogoproto.customname) = "ADRParamSetupReq"];
    DeviceTimeAns         device_time_ans         = 21;
    ForceRejoinReq        force_rejoin_req        = 22;
    RejoinParamSetupReq   rejoin_param_setup_req  = 23;
    RejoinParamSetupAns   rejoin_param_setup_ans  = 24;
    PingSlotInfoReq       ping_slot_info_req      = 25;
    PingSlotChannelReq    ping_slot_channel_req   = 26;
    PingSlotChannelAns    ping_slot_channel_ans   = 27;
    BeaconTimingAns       beacon_timing_ans       = 28;
    BeaconFreqReq         beacon_freq_req         = 29;
    BeaconFreqAns         beacon_freq_ans         = 30;
    DeviceModeInd         device_mode_ind         = 31;
    DeviceModeConf        device_mode_conf        = 32;
  }

  message ResetInd {
    uint32 minor_version = 1;
  }
  message ResetConf {
    uint32 minor_version = 1;
  }
  message LinkCheckAns {
    // Margin indicates the link margin in dB of the received LinkCheckReq, relative to the demodulation floor.
    uint32 margin = 1;
    uint32 gateway_count = 2;
  }
  message LinkADRReq {
    uint32 data_rate_index = 1;
    uint32 tx_power_index = 2;
    repeated bool channel_mask = 3;
    reserved 4; // for RFU 7th bit of Redundancy
    uint32 channel_mask_control = 5;
    uint32 nb_trans = 6;
  }
  message LinkADRAns {
    bool channel_mask_ack = 1;
    bool data_rate_index_ack = 2;
    bool tx_power_index_ack = 3;
  }
  message DutyCycleReq {
    AggregatedDutyCycle max_duty_cycle = 1;
  }
  message RxParamSetupReq {
    uint32 rx2_data_rate_index = 1;
    uint32 rx1_data_rate_offset = 2;
    uint64 rx2_frequency = 3;
  }
  message RxParamSetupAns {
    bool rx2_data_rate_index_ack = 1;
    bool rx1_data_rate_offset_ack = 2;
    bool rx2_frequency_ack = 3;
  }
  message DevStatusAns {
    // Battery indicates the device battery status.
    // 0 indicates that the device is connected to an external power source.
    // 1..254 indicates a battery level.
    // 255 indicates that the device was not able to measure the battery level.
    uint32 battery = 1;
    // Margin indicates the demodulation SNR in dB in the range [-32, +31].
    int32 margin = 2;
  }
  message NewChannelReq {
    uint32 channel_index = 1;
    uint64 frequency = 2;
    uint32 min_data_rate_index = 3;
    uint32 max_data_rate_index = 4;
  }
  message NewChannelAns {
    bool frequency_ack = 1;
    bool data_rate_ack = 2;
  }
  message DLChannelReq {
    uint32 channel_index = 1;
    uint64 frequency = 2;
  }
  message DLChannelAns {
    bool channel_index_ack = 1;
    bool frequency_ack = 2;
  }
  message RxTimingSetupReq {
    uint32 delay = 1;
  }
  message TxParamSetupReq {
    // MaxEIRPIndex indicates the maximum EIRP value in dBm, indexed by the following table:
    // [ 8 10 12 13 14 16 18 20 21 24 26 27 29 30 33 36 ]
    uint32 max_eirp_index = 1 [(gogoproto.customname) = "MaxEIRPIndex"];
    bool uplink_dwell_time = 2;
    bool downlink_dwell_time = 3;
  }
  message RekeyInd {
    uint32 minor_version = 1;
  }
  message RekeyConf {
    uint32 minor_version = 1;
  }
  message ADRParamSetupReq {
    // ADRAckLimitExponent is the exponent e that configures the ADR_ACK_LIMIT = 2^e messages
    uint32 adr_ack_limit_exponent = 1 [(gogoproto.customname) = "ADRAckLimitExponent"];
    // ADRAckDelayExponent is the exponent e that configures the ADR_ACK_DELAY = 2^e messages
    uint32 adr_ack_delay_exponent = 2 [(gogoproto.customname) = "ADRAckDelayExponent"];
  }
  message DeviceTimeAns {
    google.protobuf.Timestamp time = 7 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  }
  message ForceRejoinReq {
    uint32 rejoin_type = 1;
    uint32 data_rate_index = 2;
    uint32 max_retries = 3;
    // PeriodExponent is the exponent e that configures the rejoin period = 32 * 2^e + rand(0,32) seconds
    uint32 period_exponent = 4;
  }
  message RejoinParamSetupReq {
    // MaxCountExponent is the exponent e that configures the rejoin counter = 2^(e+4) messages
    uint32 max_count_exponent = 1;
    // MaxTimeExponent is the exponent e that configures the rejoin timer = 2^(e+10) seconds
    uint32 max_time_exponent = 2;
  }
  message RejoinParamSetupAns {
    bool max_time_exponent_ack = 1;
  }
  message PingSlotInfoReq {
    PingSlotPeriod period = 1;
  }
  message PingSlotChannelReq {
    uint64 frequency = 1;
    uint32 data_rate_index = 2;
  }
  message PingSlotChannelAns {
    bool frequency_ack = 1;
    bool data_rate_index_ack = 2;
  }
  message BeaconTimingAns {
    uint32 delay = 1;
    uint32 channel_index = 2;
  }
  message BeaconFreqReq {
    uint64 frequency = 1;
  }
  message BeaconFreqAns {
    bool frequency_ack = 1;
  }
  message DeviceModeInd {
    Class class = 1;
  }
  message DeviceModeConf {
    Class class = 1;
  }
}

enum AggregatedDutyCycle {
  option (gogoproto.goproto_enum_prefix) = false;
  // 100%
  DUTY_CYCLE_1     = 0;
  // 50%
  DUTY_CYCLE_2     = 1;
  // 25%
  DUTY_CYCLE_4     = 2;
  // 12.5%
  DUTY_CYCLE_8     = 3;
  // 6.25%
  DUTY_CYCLE_16    = 4;
  // 3.125%
  DUTY_CYCLE_32    = 5;
  // 1.5625%
  DUTY_CYCLE_64    = 6;
  // Roughly 0.781%
  DUTY_CYCLE_128   = 7;
  // Roughly 0.390%
  DUTY_CYCLE_256   = 8;
  // Roughly 0.195%
  DUTY_CYCLE_512   = 9;
  // Roughly 0.098%
  DUTY_CYCLE_1024  = 10;
  // Roughly 0.049%
  DUTY_CYCLE_2048  = 11;
  // Roughly 0.024%
  DUTY_CYCLE_4096  = 12;
  // Roughly 0.012%
  DUTY_CYCLE_8192  = 13;
  // Roughly 0.006%
  DUTY_CYCLE_16384 = 14;
  // Roughly 0.003%
  DUTY_CYCLE_32768 = 15;
}

enum PingSlotPeriod {
  option (gogoproto.goproto_enum_prefix) = false;
  // Every second
  PING_EVERY_1S   = 0;
  // Every 2 seconds
  PING_EVERY_2S   = 1;
  // Every 4 seconds
  PING_EVERY_4S   = 2;
  // Every 8 seconds
  PING_EVERY_8S   = 3;
  // Every 16 seconds
  PING_EVERY_16S  = 4;
  // Every 32 seconds
  PING_EVERY_32S  = 5;
  // Every 64 seconds
  PING_EVERY_64S  = 6;
  // Every 128 seconds
  PING_EVERY_128S = 7;
}

enum RejoinTimePeriod {
  option (gogoproto.goproto_enum_prefix) = false;
  // Every ~17 minutes
  REJOIN_TIME_1   = 0;
  // Every 2 seconds
  REJOIN_TIME_2   = 1;
  // Every 4 seconds
  REJOIN_TIME_4   = 2;
  // Every 8 seconds
  REJOIN_TIME_8   = 3;
  // Every 16 seconds
  REJOIN_TIME_16  = 4;
  // Every 32 seconds
  REJOIN_TIME_32  = 5;
  // Every 64 seconds
  REJOIN_TIME_64  = 6;
  // Every 128 seconds
  REJOIN_TIME_128 = 7;
}
