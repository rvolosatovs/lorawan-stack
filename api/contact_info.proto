// Copyright Â© 2019 The Things Network Foundation, The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "lorawan-stack/api/identifiers.proto";

package ttn.lorawan.v3;

option go_package = "go.thethings.network/lorawan-stack/pkg/ttnpb";

enum ContactType {
  option (gogoproto.goproto_enum_prefix) = false;

  CONTACT_TYPE_OTHER = 0;
  CONTACT_TYPE_ABUSE = 1;
  CONTACT_TYPE_BILLING = 2;
  CONTACT_TYPE_TECHNICAL = 3;
}

enum ContactMethod {
  option (gogoproto.goproto_enum_prefix) = false;

  CONTACT_METHOD_OTHER = 0;
  CONTACT_METHOD_EMAIL = 1;
  CONTACT_METHOD_PHONE = 2;
}

message ContactInfo {
  ContactType contact_type = 1;
  ContactMethod contact_method = 2;
  string value = 3;
  bool public = 4;
  google.protobuf.Timestamp validated_at = 5 [(gogoproto.stdtime) = true];
}

message ContactInfoValidation {
  string id = 1 [(gogoproto.customname) = "ID"];
  string token = 2;
  EntityIdentifiers entity = 3;
  repeated ContactInfo contact_info = 4;
  google.protobuf.Timestamp created_at = 5 [(gogoproto.stdtime) = true];
  google.protobuf.Timestamp expires_at = 6 [(gogoproto.stdtime) = true];
}

service ContactInfoRegistry {
  // Request validation for the non-validated contact info for the given entity.
  rpc RequestValidation(EntityIdentifiers) returns (ContactInfoValidation) {
    option (google.api.http) = {
      post: "/contact_info/validation"
    };
  }
  // Validate confirms a contact info validation.
  rpc Validate(ContactInfoValidation) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      patch: "/contact_info/validation"
    };
  };
}
