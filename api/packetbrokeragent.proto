// Copyright Â© 2021 The Things Network Foundation, The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "lorawan-stack/api/contact_info.proto";
import "lorawan-stack/api/end_device.proto";
import "lorawan-stack/api/messages.proto";

package ttn.lorawan.v3;

option go_package = "go.thethings.network/lorawan-stack/v3/pkg/ttnpb";

// The GsPba service connects a Gateway Server to a Packet Broker Agent.
service GsPba {
  rpc PublishUplink(GatewayUplinkMessage) returns (google.protobuf.Empty);
}

// The NsPba service connects a Network Server to a Packet Broker Agent.
service NsPba {
  // PublishDownlink instructs the Packet Broker Agent to publish a downlink
  // message to Packet Broker Router.
  rpc PublishDownlink(DownlinkMessage) returns (google.protobuf.Empty);
}

message PacketBrokerNetworkIdentifier {
  // LoRa Alliance NetID.
  uint32 net_id = 1 [(gogoproto.customname) = "NetID"];
  // Tenant identifier if the registration leases DevAddr blocks from a NetID.
  string tenant_id = 2 [(gogoproto.customname) = "TenantID", (validate.rules).string = {pattern: "^[a-z0-9](?:[-]?[a-z0-9]){2,}$|^$", max_len: 36}];
}

message PacketBrokerDevAddrBlock {
  DevAddrPrefix dev_addr_prefix = 1;
  string home_network_cluster_id = 2 [(gogoproto.customname) = "HomeNetworkClusterID"];
}

message PacketBrokerNetwork {
  // Packet Broker network identifier.
  PacketBrokerNetworkIdentifier id = 1;
  // Name of the network.
  string name = 2;
  // DevAddr blocks that are assigned to this registration.
  repeated PacketBrokerDevAddrBlock dev_addr_blocks = 3;
  // Contact information.
  repeated ContactInfo contact_info = 4;
  // Whether the network is listed so it can be viewed by other networks.
  bool listed = 5;
}

message PacketBrokerNetworks {
  repeated PacketBrokerNetwork networks = 1;
}

message PacketBrokerInfo {
  // The current registration, unset if there isn't a registration.
  PacketBrokerNetwork registration = 1;
  // Whether the server is configured as Forwarder (with gateways).
  bool forwarder_enabled = 2;
  // Whether the server is configured as Home Network (with end devices).
  bool home_network_enabled = 3;
}

message PacketBrokerRoutingPolicyUplink {
  // Forward join-request messages.
  bool join_request = 1;
  // Forward uplink messages with FPort of 0.
  bool mac_data = 2;
  // Forward uplink messages with FPort between 1 and 255.
  bool application_data = 3;
  // Forward RSSI and SNR.
  bool signal_quality = 4;
  // Forward gateway location, RSSI, SNR and fine timestamp.
  bool localization = 5;
}

message PacketBrokerRoutingPolicyDownlink {
  // Allow join-accept messages.
  bool join_accept = 1;
  // Allow downlink messages with FPort of 0.
  bool mac_data = 2;
  // Allow downlink messages with FPort between 1 and 255.
  bool application_data = 3;
}

message PacketBrokerDefaultRoutingPolicy {
  // Timestamp when the policy got last updated.
  google.protobuf.Timestamp updated_at = 1;
  // Uplink policy.
  PacketBrokerRoutingPolicyUplink uplink = 2;
  // Downlink policy.
  PacketBrokerRoutingPolicyDownlink downlink = 3;
}

message PacketBrokerRoutingPolicy {
  // Packet Broker identifier of the Forwarder.
  PacketBrokerNetworkIdentifier forwarder_id = 1;
  // Packet Broker identifier of the Home Network.
  PacketBrokerNetworkIdentifier home_network_id = 2;
  // Timestamp when the policy got last updated.
  google.protobuf.Timestamp updated_at = 3;
  // Uplink policy.
  PacketBrokerRoutingPolicyUplink uplink = 4;
  // Downlink policy.
  PacketBrokerRoutingPolicyDownlink downlink = 5;
}

message SetPacketBrokerDefaultRoutingPolicyRequest {
  // Uplink policy.
  PacketBrokerRoutingPolicyUplink uplink = 1 [(validate.rules).message.required = true];
  // Downlink policy.
  PacketBrokerRoutingPolicyDownlink downlink = 2 [(validate.rules).message.required = true];
}

message ListHomeNetworkRoutingPoliciesRequest {
  // Limit the number of results per page.
  uint32 limit = 1 [(validate.rules).uint32.lte = 1000];
  // Page number for pagination. 0 is interpreted as 1.
  uint32 page = 2;
}

message PacketBrokerRoutingPolicies {
  repeated PacketBrokerRoutingPolicy policies = 1;
}

message SetPacketBrokerRoutingPolicyRequest {
  // Packet Broker identifier of the Home Network.
  PacketBrokerNetworkIdentifier home_network_id = 1;
  // Uplink policy.
  PacketBrokerRoutingPolicyUplink uplink = 2 [(validate.rules).message.required = true];
  // Downlink policy.
  PacketBrokerRoutingPolicyDownlink downlink = 3 [(validate.rules).message.required = true];
}

message ListHomeNetworksRequest {
  // Limit the number of results per page.
  uint32 limit = 1 [(validate.rules).uint32.lte = 1000];
  // Page number for pagination. 0 is interpreted as 1.
  uint32 page = 2;
}

message ListForwarderRoutingPoliciesRequest {
  // Packet Broker identifier of the Home Network.
  PacketBrokerNetworkIdentifier home_network_id = 1;
  // Limit the number of results per page.
  uint32 limit = 2;
  // Page number for pagination. 0 is interpreted as 1.
  uint32 page = 3;
}

// The Pba service allows clients to manage peering through Packet Broker.
service Pba {
  // Get information about the Packet Broker registration.
  // Viewing Packet Packet information requires administrative access.
  rpc GetInfo(google.protobuf.Empty) returns (PacketBrokerInfo) {
    option (google.api.http) = {
      get: "/pba/info"
    };
  };

  // Register with Packet Broker. If no registration exists, it will be created. Any existing registration will be updated.
  // All registration settings are taken from Packet Broker Agent configuration and caller context.
  // Packet Broker registration requires administrative access.
  rpc Register(google.protobuf.Empty) returns (PacketBrokerNetwork) {
    option (google.api.http) = {
      put: "/pba/registration"
      additional_bindings {
        post: "/pba/registration"
      }
    };
  };

  // Deregister from Packet Broker.
  // Packet Broker deregistration requires administrative access.
  rpc Deregister(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/pba/registration"
    };
  };

  // Get the default routing policy.
  // Getting routing policies requires administrative access.
  rpc GetHomeNetworkDefaultRoutingPolicy(google.protobuf.Empty) returns (PacketBrokerDefaultRoutingPolicy) {
    option (google.api.http) = {
      get: "/pba/home-networks/policies/default"
    };
  };

  // Set the default routing policy.
  // Setting routing policies requires administrative access.
  rpc SetHomeNetworkDefaultRoutingPolicy(SetPacketBrokerDefaultRoutingPolicyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/pba/home-networks/policies/default"
      body: "*"
      additional_bindings {
        post: "/pba/home-networks/policies/default"
        body: "*"
      }
    };
  };

  // Deletes the default routing policy.
  // Deleting routing policies requires administrative access.
  rpc DeleteHomeNetworkDefaultRoutingPolicy(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/pba/home-networks/policies/default"
    };
  };

  // List the routing policies that Packet Broker Agent as Forwarder configured with Home Networks.
  // Listing routing policies requires administrative access.
  rpc ListHomeNetworkRoutingPolicies(ListHomeNetworkRoutingPoliciesRequest) returns (PacketBrokerRoutingPolicies) {
    option (google.api.http) = {
      get: "/pba/home-networks/policies"
    };
  };

  // Get the routing policy for the given Home Network.
  // Getting routing policies requires administrative access.
  rpc GetHomeNetworkRoutingPolicy(PacketBrokerNetworkIdentifier) returns (PacketBrokerRoutingPolicy) {
    option (google.api.http) = {
      get: "/pba/home-networks/policies/{net_id}"
      additional_bindings {
        get: "/pba/home-networks/policies/{net_id}/{tenant_id}"
      }
    };
  };

  // Set the routing policy for the given Home Network.
  // Setting routing policies requires administrative access.
  rpc SetHomeNetworkRoutingPolicy(SetPacketBrokerRoutingPolicyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/pba/home-networks/policies/{home_network_id.net_id}"
      body: "*"
      additional_bindings {
        post: "/pba/home-networks/policies/{home_network_id.net_id}"
        body: "*"
      }
      additional_bindings {
        put: "/pba/home-networks/policies/{home_network_id.net_id}/{home_network_id.tenant_id}"
        body: "*"
      }
      additional_bindings {
        post: "/pba/home-networks/policies/{home_network_id.net_id}/{home_network_id.tenant_id}"
        body: "*"
      }
    };
  };

  // Delete the routing policy for the given Home Network.
  // Deleting routing policies requires administrative access.
  rpc DeleteHomeNetworkRoutingPolicy(PacketBrokerNetworkIdentifier) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/pba/home-networks/policies/{net_id}"
      additional_bindings {
        delete: "/pba/home-networks/policies/{net_id}/{tenant_id}"
      }
    };
  };

  // List the (public) home networks for which routing policies can be configured.
  // Listing home networks requires administrative access.
  rpc ListHomeNetworks(ListHomeNetworksRequest) returns (PacketBrokerNetworks) {
    option (google.api.http) = {
      get: "/pba/home-networks"
    };
  };

  // List the routing policies that Forwarders configured with Packet Broker Agent as Home Network.
  // Listing routing policies requires administrative access.
  rpc ListForwarderRoutingPolicies(ListForwarderRoutingPoliciesRequest) returns (PacketBrokerRoutingPolicies) {
    option (google.api.http) = {
      get: "/pba/forwarders/policies"
    };
  };
}
