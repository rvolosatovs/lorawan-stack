{
  "swagger": "2.0",
  "info": {
    "title": "The Things Network v3 API",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/applications": {
      "get": {
        "summary": "List applications. See request message for details.",
        "operationId": "List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Applications"
            }
          }
        },
        "parameters": [
          {
            "name": "collaborator.organization_ids.organization_id",
            "description": "This ID shares namespace with user IDs.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "collaborator.user_ids.user_id",
            "description": "This ID shares namespace with organization IDs.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "collaborator.user_ids.email",
            "description": "Secondary identifier, which can only be used in specific requests.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "field_mask.paths",
            "description": "The set of field mask paths.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "order",
            "description": "Order the results by this field path (must be present in the field mask).\nDefault ordering is by ID. Prepend with a minus (-) to reverse the order.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Limit the number of results per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "page",
            "description": "Page number for pagination. 0 is interpreted as 1.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "ApplicationRegistry"
        ]
      }
    },
    "/applications/{application.ids.application_id}": {
      "put": {
        "operationId": "Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Application"
            }
          }
        },
        "parameters": [
          {
            "name": "application.ids.application_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3UpdateApplicationRequest"
            }
          }
        ],
        "tags": [
          "ApplicationRegistry"
        ]
      }
    },
    "/applications/{application_ids.application_id}": {
      "get": {
        "summary": "Get the application with the given identifiers, selecting the fields given\nby the field mask. The method may return more or less fields, depending on\nthe rights of the caller.",
        "operationId": "Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Application"
            }
          }
        },
        "parameters": [
          {
            "name": "application_ids.application_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "field_mask.paths",
            "description": "The set of field mask paths.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ApplicationRegistry"
        ]
      }
    },
    "/applications/{application_ids.application_id}/api-keys": {
      "post": {
        "operationId": "CreateAPIKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3APIKey"
            }
          }
        },
        "parameters": [
          {
            "name": "application_ids.application_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3CreateApplicationAPIKeyRequest"
            }
          }
        ],
        "tags": [
          "ApplicationAccess"
        ]
      }
    },
    "/applications/{application_ids.application_id}/api-keys/{api_key.id}": {
      "put": {
        "summary": "Update the rights of an existing application API key. To generate an API key,\nthe CreateAPIKey should be used. To delete an API key, update it\nwith zero rights.",
        "operationId": "UpdateAPIKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3APIKey"
            }
          }
        },
        "parameters": [
          {
            "name": "application_ids.application_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "api_key.id",
            "description": "Immutable and unique public identifier for the API key.\nGenerated by the Access Server.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3UpdateApplicationAPIKeyRequest"
            }
          }
        ],
        "tags": [
          "ApplicationAccess"
        ]
      }
    },
    "/applications/{application_ids.application_id}/collaborators": {
      "put": {
        "summary": "Setting a collaborator without rights, removes them.",
        "operationId": "SetCollaborator",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "application_ids.application_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3SetApplicationCollaboratorRequest"
            }
          }
        ],
        "tags": [
          "ApplicationAccess"
        ]
      }
    },
    "/applications/{application_ids.application_id}/devices": {
      "get": {
        "operationId": "List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3EndDevices"
            }
          }
        },
        "parameters": [
          {
            "name": "application_ids.application_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "field_mask.paths",
            "description": "The set of field mask paths.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "order",
            "description": "Order the results by this field path (must be present in the field mask).\nDefault ordering is by ID. Prepend with a minus (-) to reverse the order.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Limit the number of results per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "page",
            "description": "Page number for pagination. 0 is interpreted as 1.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "EndDeviceRegistry"
        ]
      }
    },
    "/applications/{application_ids.application_id}/devices/{device_id}": {
      "delete": {
        "operationId": "Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "application_ids.application_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "device_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "dev_eui",
            "description": "The LoRaWAN DevEUI.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "join_eui",
            "description": "The LoRaWAN JoinEUI (or AppEUI for LoRaWAN 1.0 end devices).",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "dev_addr",
            "description": "The LoRaWAN DevAddr.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "EndDeviceRegistry"
        ]
      }
    },
    "/applications/{application_id}": {
      "delete": {
        "operationId": "Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ApplicationRegistry"
        ]
      }
    },
    "/applications/{application_id}/api-keys": {
      "get": {
        "operationId": "ListAPIKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3APIKeys"
            }
          }
        },
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ApplicationAccess"
        ]
      }
    },
    "/applications/{application_id}/collaborators": {
      "get": {
        "operationId": "ListCollaborators",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Collaborators"
            }
          }
        },
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ApplicationAccess"
        ]
      }
    },
    "/applications/{application_id}/rights": {
      "get": {
        "operationId": "ListRights",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Rights"
            }
          }
        },
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ApplicationAccess"
        ]
      }
    },
    "/applications/{end_device.ids.application_ids.application_id}/devices": {
      "post": {
        "operationId": "Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3EndDevice"
            }
          }
        },
        "parameters": [
          {
            "name": "end_device.ids.application_ids.application_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3CreateEndDeviceRequest"
            }
          }
        ],
        "tags": [
          "EndDeviceRegistry"
        ]
      }
    },
    "/applications/{end_device.ids.application_ids.application_id}/devices/{end_device.ids.device_id}": {
      "put": {
        "operationId": "Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3EndDevice"
            }
          }
        },
        "parameters": [
          {
            "name": "end_device.ids.application_ids.application_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "end_device.ids.device_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3UpdateEndDeviceRequest"
            }
          }
        ],
        "tags": [
          "EndDeviceRegistry"
        ]
      }
    },
    "/applications/{end_device_ids.application_ids.application_id}/devices/{end_device_ids.device_id}": {
      "get": {
        "operationId": "Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3EndDevice"
            }
          }
        },
        "parameters": [
          {
            "name": "end_device_ids.application_ids.application_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "end_device_ids.device_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "end_device_ids.dev_eui",
            "description": "The LoRaWAN DevEUI.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "end_device_ids.join_eui",
            "description": "The LoRaWAN JoinEUI (or AppEUI for LoRaWAN 1.0 end devices).",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "end_device_ids.dev_addr",
            "description": "The LoRaWAN DevAddr.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "field_mask.paths",
            "description": "The set of field mask paths.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "EndDeviceRegistry"
        ]
      }
    },
    "/as/applications/{application_ids.application_id}/devices/{device_id}": {
      "delete": {
        "operationId": "Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "application_ids.application_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "device_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "dev_eui",
            "description": "The LoRaWAN DevEUI.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "join_eui",
            "description": "The LoRaWAN JoinEUI (or AppEUI for LoRaWAN 1.0 end devices).",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "dev_addr",
            "description": "The LoRaWAN DevAddr.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "AsEndDeviceRegistry"
        ]
      }
    },
    "/as/applications/{application_ids.application_id}/devices/{device_id}/down": {
      "get": {
        "operationId": "DownlinkQueueList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3ApplicationDownlinks"
            }
          }
        },
        "parameters": [
          {
            "name": "application_ids.application_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "device_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "dev_eui",
            "description": "The LoRaWAN DevEUI.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "join_eui",
            "description": "The LoRaWAN JoinEUI (or AppEUI for LoRaWAN 1.0 end devices).",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "dev_addr",
            "description": "The LoRaWAN DevAddr.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "AppAs"
        ]
      }
    },
    "/as/applications/{application_ids.application_id}/link": {
      "get": {
        "summary": "Get returns the device that matches the given identifiers.\nIf there are multiple matches, an error will be returned.",
        "operationId": "GetLink",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3ApplicationLink"
            }
          }
        },
        "parameters": [
          {
            "name": "application_ids.application_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "field_mask.paths",
            "description": "The set of field mask paths.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "As"
        ]
      },
      "put": {
        "summary": "Set creates or updates the device.",
        "operationId": "SetLink",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3ApplicationLink"
            }
          }
        },
        "parameters": [
          {
            "name": "application_ids.application_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3SetApplicationLinkRequest"
            }
          }
        ],
        "tags": [
          "As"
        ]
      }
    },
    "/as/applications/{application_ids.application_id}/webhooks": {
      "get": {
        "operationId": "List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3ApplicationWebhooks"
            }
          }
        },
        "parameters": [
          {
            "name": "application_ids.application_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "field_mask.paths",
            "description": "The set of field mask paths.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ApplicationWebhookRegistry"
        ]
      }
    },
    "/as/applications/{application_ids.application_id}/webhooks/{webhook_id}": {
      "delete": {
        "operationId": "Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "application_ids.application_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "webhook_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ApplicationWebhookRegistry"
        ]
      }
    },
    "/as/applications/{application_id}/link": {
      "delete": {
        "summary": "Delete deletes the device that matches the given identifiers.\nIf there are multiple matches, an error will be returned.",
        "operationId": "DeleteLink",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "As"
        ]
      }
    },
    "/as/applications/{application_id}/link/stats": {
      "get": {
        "operationId": "GetLinkStats",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3ApplicationLinkStats"
            }
          }
        },
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "As"
        ]
      }
    },
    "/as/applications/{end_device.ids.application_ids.application_id}/devices": {
      "post": {
        "operationId": "Set2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3EndDevice"
            }
          }
        },
        "parameters": [
          {
            "name": "end_device.ids.application_ids.application_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3SetEndDeviceRequest"
            }
          }
        ],
        "tags": [
          "AsEndDeviceRegistry"
        ]
      }
    },
    "/as/applications/{end_device.ids.application_ids.application_id}/devices/{end_device.ids.device_id}": {
      "put": {
        "operationId": "Set",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3EndDevice"
            }
          }
        },
        "parameters": [
          {
            "name": "end_device.ids.application_ids.application_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "end_device.ids.device_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3SetEndDeviceRequest"
            }
          }
        ],
        "tags": [
          "AsEndDeviceRegistry"
        ]
      }
    },
    "/as/applications/{end_device_ids.application_ids.application_id}/devices/{end_device_ids.device_id}": {
      "get": {
        "operationId": "Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3EndDevice"
            }
          }
        },
        "parameters": [
          {
            "name": "end_device_ids.application_ids.application_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "end_device_ids.device_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "end_device_ids.dev_eui",
            "description": "The LoRaWAN DevEUI.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "end_device_ids.join_eui",
            "description": "The LoRaWAN JoinEUI (or AppEUI for LoRaWAN 1.0 end devices).",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "end_device_ids.dev_addr",
            "description": "The LoRaWAN DevAddr.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "field_mask.paths",
            "description": "The set of field mask paths.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "AsEndDeviceRegistry"
        ]
      }
    },
    "/as/applications/{end_device_ids.application_ids.application_id}/devices/{end_device_ids.device_id}/down/push": {
      "post": {
        "operationId": "DownlinkQueuePush",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "end_device_ids.application_ids.application_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "end_device_ids.device_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3DownlinkQueueRequest"
            }
          }
        ],
        "tags": [
          "AppAs"
        ]
      }
    },
    "/as/applications/{end_device_ids.application_ids.application_id}/devices/{end_device_ids.device_id}/down/replace": {
      "post": {
        "operationId": "DownlinkQueueReplace",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "end_device_ids.application_ids.application_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "end_device_ids.device_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3DownlinkQueueRequest"
            }
          }
        ],
        "tags": [
          "AppAs"
        ]
      }
    },
    "/as/applications/{ids.application_ids.application_id}/webhooks/{ids.webhook_id}": {
      "get": {
        "operationId": "Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3ApplicationWebhook"
            }
          }
        },
        "parameters": [
          {
            "name": "ids.application_ids.application_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "ids.webhook_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "field_mask.paths",
            "description": "The set of field mask paths.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ApplicationWebhookRegistry"
        ]
      }
    },
    "/as/applications/{webhook.ids.application_ids.application_id}/webhooks/{webhook.ids.webhook_id}": {
      "post": {
        "operationId": "Set",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3ApplicationWebhook"
            }
          }
        },
        "parameters": [
          {
            "name": "webhook.ids.application_ids.application_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "webhook.ids.webhook_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3SetApplicationWebhookRequest"
            }
          }
        ],
        "tags": [
          "ApplicationWebhookRegistry"
        ]
      }
    },
    "/as/webhook-formats": {
      "get": {
        "operationId": "GetFormats",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3ApplicationWebhookFormats"
            }
          }
        },
        "tags": [
          "ApplicationWebhookRegistry"
        ]
      }
    },
    "/auth_info": {
      "get": {
        "operationId": "AuthInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3AuthInfoResponse"
            }
          }
        },
        "tags": [
          "EntityAccess"
        ]
      }
    },
    "/clients": {
      "get": {
        "operationId": "List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Clients"
            }
          }
        },
        "parameters": [
          {
            "name": "collaborator.organization_ids.organization_id",
            "description": "This ID shares namespace with user IDs.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "collaborator.user_ids.user_id",
            "description": "This ID shares namespace with organization IDs.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "collaborator.user_ids.email",
            "description": "Secondary identifier, which can only be used in specific requests.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "field_mask.paths",
            "description": "The set of field mask paths.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "order",
            "description": "Order the results by this field path (must be present in the field mask).\nDefault ordering is by ID. Prepend with a minus (-) to reverse the order.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Limit the number of results per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "page",
            "description": "Page number for pagination. 0 is interpreted as 1.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "ClientRegistry"
        ]
      }
    },
    "/clients/{client.ids.client_id}": {
      "put": {
        "operationId": "Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Client"
            }
          }
        },
        "parameters": [
          {
            "name": "client.ids.client_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3UpdateClientRequest"
            }
          }
        ],
        "tags": [
          "ClientRegistry"
        ]
      }
    },
    "/clients/{client_ids.client_id}": {
      "get": {
        "operationId": "Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Client"
            }
          }
        },
        "parameters": [
          {
            "name": "client_ids.client_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "field_mask.paths",
            "description": "The set of field mask paths.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ClientRegistry"
        ]
      }
    },
    "/clients/{client_ids.client_id}/collaborators": {
      "put": {
        "operationId": "SetCollaborator",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "client_ids.client_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3SetClientCollaboratorRequest"
            }
          }
        ],
        "tags": [
          "ClientAccess"
        ]
      }
    },
    "/clients/{client_id}": {
      "delete": {
        "operationId": "Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ClientRegistry"
        ]
      }
    },
    "/clients/{client_id}/collaborators": {
      "get": {
        "operationId": "ListCollaborators",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Collaborators"
            }
          }
        },
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ClientAccess"
        ]
      }
    },
    "/clients/{client_id}/rights": {
      "get": {
        "operationId": "ListRights",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Rights"
            }
          }
        },
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ClientAccess"
        ]
      }
    },
    "/configuration/frequency-plans": {
      "get": {
        "operationId": "ListFrequencyPlans",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3ListFrequencyPlansResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "base_frequency",
            "description": "Optional base frequency in MHz for hardware support (433, 470, 868 or 915).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Configuration"
        ]
      }
    },
    "/contact_info/validation": {
      "post": {
        "operationId": "RequestValidation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3ContactInfoValidation"
            }
          }
        },
        "tags": [
          "ContactInfoRegistry"
        ]
      },
      "patch": {
        "operationId": "Validate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "tags": [
          "ContactInfoRegistry"
        ]
      }
    },
    "/events": {
      "post": {
        "operationId": "Stream",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "$ref": "#/x-stream-definitions/v3Event"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3StreamEventsRequest"
            }
          }
        ],
        "tags": [
          "Events"
        ]
      }
    },
    "/gateways": {
      "get": {
        "operationId": "List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Gateways"
            }
          }
        },
        "parameters": [
          {
            "name": "collaborator.organization_ids.organization_id",
            "description": "This ID shares namespace with user IDs.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "collaborator.user_ids.user_id",
            "description": "This ID shares namespace with organization IDs.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "collaborator.user_ids.email",
            "description": "Secondary identifier, which can only be used in specific requests.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "field_mask.paths",
            "description": "The set of field mask paths.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "order",
            "description": "Order the results by this field path (must be present in the field mask).\nDefault ordering is by ID. Prepend with a minus (-) to reverse the order.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Limit the number of results per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "page",
            "description": "Page number for pagination. 0 is interpreted as 1.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "GatewayRegistry"
        ]
      }
    },
    "/gateways/{gateway.ids.gateway_id}": {
      "put": {
        "operationId": "Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Gateway"
            }
          }
        },
        "parameters": [
          {
            "name": "gateway.ids.gateway_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3UpdateGatewayRequest"
            }
          }
        ],
        "tags": [
          "GatewayRegistry"
        ]
      }
    },
    "/gateways/{gateway_ids.gateway_id}": {
      "get": {
        "operationId": "Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Gateway"
            }
          }
        },
        "parameters": [
          {
            "name": "gateway_ids.gateway_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "gateway_ids.eui",
            "description": "Secondary identifier, which can only be used in specific requests.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "field_mask.paths",
            "description": "The set of field mask paths.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "GatewayRegistry"
        ]
      }
    },
    "/gateways/{gateway_ids.gateway_id}/api-keys": {
      "post": {
        "operationId": "CreateAPIKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3APIKey"
            }
          }
        },
        "parameters": [
          {
            "name": "gateway_ids.gateway_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3CreateGatewayAPIKeyRequest"
            }
          }
        ],
        "tags": [
          "GatewayAccess"
        ]
      }
    },
    "/gateways/{gateway_ids.gateway_id}/api-keys/{api_key.id}": {
      "put": {
        "operationId": "UpdateAPIKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3APIKey"
            }
          }
        },
        "parameters": [
          {
            "name": "gateway_ids.gateway_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "api_key.id",
            "description": "Immutable and unique public identifier for the API key.\nGenerated by the Access Server.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3UpdateGatewayAPIKeyRequest"
            }
          }
        ],
        "tags": [
          "GatewayAccess"
        ]
      }
    },
    "/gateways/{gateway_ids.gateway_id}/collaborators": {
      "put": {
        "operationId": "SetCollaborator",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "gateway_ids.gateway_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3SetGatewayCollaboratorRequest"
            }
          }
        ],
        "tags": [
          "GatewayAccess"
        ]
      }
    },
    "/gateways/{gateway_id}": {
      "delete": {
        "operationId": "Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "gateway_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "eui",
            "description": "Secondary identifier, which can only be used in specific requests.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "GatewayRegistry"
        ]
      }
    },
    "/gateways/{gateway_id}/api-keys": {
      "get": {
        "operationId": "ListAPIKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3APIKeys"
            }
          }
        },
        "parameters": [
          {
            "name": "gateway_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "eui",
            "description": "Secondary identifier, which can only be used in specific requests.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "GatewayAccess"
        ]
      }
    },
    "/gateways/{gateway_id}/collaborators": {
      "get": {
        "operationId": "ListCollaborators",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Collaborators"
            }
          }
        },
        "parameters": [
          {
            "name": "gateway_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "eui",
            "description": "Secondary identifier, which can only be used in specific requests.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "GatewayAccess"
        ]
      }
    },
    "/gateways/{gateway_id}/rights": {
      "get": {
        "operationId": "ListRights",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Rights"
            }
          }
        },
        "parameters": [
          {
            "name": "gateway_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "eui",
            "description": "Secondary identifier, which can only be used in specific requests.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "GatewayAccess"
        ]
      }
    },
    "/gs/gateways/{gateway_id}/connection/stats": {
      "get": {
        "operationId": "GetGatewayConnectionStats",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3GatewayConnectionStats"
            }
          }
        },
        "parameters": [
          {
            "name": "gateway_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "eui",
            "description": "Secondary identifier, which can only be used in specific requests.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "Gs"
        ]
      }
    },
    "/invitations": {
      "get": {
        "operationId": "List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Invitations"
            }
          }
        },
        "tags": [
          "UserInvitationRegistry"
        ]
      },
      "delete": {
        "operationId": "Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserInvitationRegistry"
        ]
      },
      "post": {
        "operationId": "Send",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Invitation"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3SendInvitationRequest"
            }
          }
        ],
        "tags": [
          "UserInvitationRegistry"
        ]
      }
    },
    "/js/applications/{application_ids.application_id}/devices/{device_id}": {
      "delete": {
        "operationId": "Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "application_ids.application_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "device_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "dev_eui",
            "description": "The LoRaWAN DevEUI.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "join_eui",
            "description": "The LoRaWAN JoinEUI (or AppEUI for LoRaWAN 1.0 end devices).",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "dev_addr",
            "description": "The LoRaWAN DevAddr.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "JsEndDeviceRegistry"
        ]
      }
    },
    "/js/applications/{application_ids.application_id}/provision-devices": {
      "put": {
        "operationId": "Provision",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "$ref": "#/x-stream-definitions/v3EndDevice"
            }
          }
        },
        "parameters": [
          {
            "name": "application_ids.application_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3ProvisionEndDevicesRequest"
            }
          }
        ],
        "tags": [
          "JsEndDeviceRegistry"
        ]
      }
    },
    "/js/applications/{end_device.ids.application_ids.application_id}/devices": {
      "post": {
        "operationId": "Set2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3EndDevice"
            }
          }
        },
        "parameters": [
          {
            "name": "end_device.ids.application_ids.application_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3SetEndDeviceRequest"
            }
          }
        ],
        "tags": [
          "JsEndDeviceRegistry"
        ]
      }
    },
    "/js/applications/{end_device.ids.application_ids.application_id}/devices/{end_device.ids.device_id}": {
      "put": {
        "operationId": "Set",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3EndDevice"
            }
          }
        },
        "parameters": [
          {
            "name": "end_device.ids.application_ids.application_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "end_device.ids.device_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3SetEndDeviceRequest"
            }
          }
        ],
        "tags": [
          "JsEndDeviceRegistry"
        ]
      }
    },
    "/js/applications/{end_device_ids.application_ids.application_id}/devices/{end_device_ids.device_id}": {
      "get": {
        "operationId": "Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3EndDevice"
            }
          }
        },
        "parameters": [
          {
            "name": "end_device_ids.application_ids.application_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "end_device_ids.device_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "end_device_ids.dev_eui",
            "description": "The LoRaWAN DevEUI.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "end_device_ids.join_eui",
            "description": "The LoRaWAN JoinEUI (or AppEUI for LoRaWAN 1.0 end devices).",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "end_device_ids.dev_addr",
            "description": "The LoRaWAN DevAddr.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "field_mask.paths",
            "description": "The set of field mask paths.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "JsEndDeviceRegistry"
        ]
      }
    },
    "/ns/applications/{application_ids.application_id}/devices/{device_id}": {
      "delete": {
        "operationId": "Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "application_ids.application_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "device_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "dev_eui",
            "description": "The LoRaWAN DevEUI.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "join_eui",
            "description": "The LoRaWAN JoinEUI (or AppEUI for LoRaWAN 1.0 end devices).",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "dev_addr",
            "description": "The LoRaWAN DevAddr.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "NsEndDeviceRegistry"
        ]
      }
    },
    "/ns/applications/{end_device.ids.application_ids.application_id}/devices": {
      "post": {
        "operationId": "Set2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3EndDevice"
            }
          }
        },
        "parameters": [
          {
            "name": "end_device.ids.application_ids.application_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3SetEndDeviceRequest"
            }
          }
        ],
        "tags": [
          "NsEndDeviceRegistry"
        ]
      }
    },
    "/ns/applications/{end_device.ids.application_ids.application_id}/devices/{end_device.ids.device_id}": {
      "put": {
        "operationId": "Set",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3EndDevice"
            }
          }
        },
        "parameters": [
          {
            "name": "end_device.ids.application_ids.application_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "end_device.ids.device_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3SetEndDeviceRequest"
            }
          }
        ],
        "tags": [
          "NsEndDeviceRegistry"
        ]
      }
    },
    "/ns/applications/{end_device_ids.application_ids.application_id}/devices/{end_device_ids.device_id}": {
      "get": {
        "operationId": "Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3EndDevice"
            }
          }
        },
        "parameters": [
          {
            "name": "end_device_ids.application_ids.application_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "end_device_ids.device_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "end_device_ids.dev_eui",
            "description": "The LoRaWAN DevEUI.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "end_device_ids.join_eui",
            "description": "The LoRaWAN JoinEUI (or AppEUI for LoRaWAN 1.0 end devices).",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "end_device_ids.dev_addr",
            "description": "The LoRaWAN DevAddr.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "field_mask.paths",
            "description": "The set of field mask paths.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "NsEndDeviceRegistry"
        ]
      }
    },
    "/organizations": {
      "get": {
        "operationId": "List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Organizations"
            }
          }
        },
        "parameters": [
          {
            "name": "collaborator.organization_ids.organization_id",
            "description": "This ID shares namespace with user IDs.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "collaborator.user_ids.user_id",
            "description": "This ID shares namespace with organization IDs.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "collaborator.user_ids.email",
            "description": "Secondary identifier, which can only be used in specific requests.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "field_mask.paths",
            "description": "The set of field mask paths.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "order",
            "description": "Order the results by this field path (must be present in the field mask).\nDefault ordering is by ID. Prepend with a minus (-) to reverse the order.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Limit the number of results per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "page",
            "description": "Page number for pagination. 0 is interpreted as 1.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "OrganizationRegistry"
        ]
      }
    },
    "/organizations/{collaborator.organization_ids.organization_id}/applications": {
      "get": {
        "summary": "List applications. See request message for details.",
        "operationId": "List3",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Applications"
            }
          }
        },
        "parameters": [
          {
            "name": "collaborator.organization_ids.organization_id",
            "description": "This ID shares namespace with user IDs.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "collaborator.user_ids.user_id",
            "description": "This ID shares namespace with organization IDs.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "collaborator.user_ids.email",
            "description": "Secondary identifier, which can only be used in specific requests.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "field_mask.paths",
            "description": "The set of field mask paths.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "order",
            "description": "Order the results by this field path (must be present in the field mask).\nDefault ordering is by ID. Prepend with a minus (-) to reverse the order.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Limit the number of results per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "page",
            "description": "Page number for pagination. 0 is interpreted as 1.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "ApplicationRegistry"
        ]
      },
      "post": {
        "summary": "Create a new application. This also sets the given organization or user as\nfirst collaborator with all possible rights.",
        "operationId": "Create2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Application"
            }
          }
        },
        "parameters": [
          {
            "name": "collaborator.organization_ids.organization_id",
            "description": "This ID shares namespace with user IDs.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3CreateApplicationRequest"
            }
          }
        ],
        "tags": [
          "ApplicationRegistry"
        ]
      }
    },
    "/organizations/{collaborator.organization_ids.organization_id}/clients": {
      "get": {
        "operationId": "List3",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Clients"
            }
          }
        },
        "parameters": [
          {
            "name": "collaborator.organization_ids.organization_id",
            "description": "This ID shares namespace with user IDs.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "collaborator.user_ids.user_id",
            "description": "This ID shares namespace with organization IDs.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "collaborator.user_ids.email",
            "description": "Secondary identifier, which can only be used in specific requests.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "field_mask.paths",
            "description": "The set of field mask paths.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "order",
            "description": "Order the results by this field path (must be present in the field mask).\nDefault ordering is by ID. Prepend with a minus (-) to reverse the order.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Limit the number of results per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "page",
            "description": "Page number for pagination. 0 is interpreted as 1.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "ClientRegistry"
        ]
      },
      "post": {
        "operationId": "Create2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Client"
            }
          }
        },
        "parameters": [
          {
            "name": "collaborator.organization_ids.organization_id",
            "description": "This ID shares namespace with user IDs.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3CreateClientRequest"
            }
          }
        ],
        "tags": [
          "ClientRegistry"
        ]
      }
    },
    "/organizations/{collaborator.organization_ids.organization_id}/gateways": {
      "get": {
        "operationId": "List3",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Gateways"
            }
          }
        },
        "parameters": [
          {
            "name": "collaborator.organization_ids.organization_id",
            "description": "This ID shares namespace with user IDs.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "collaborator.user_ids.user_id",
            "description": "This ID shares namespace with organization IDs.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "collaborator.user_ids.email",
            "description": "Secondary identifier, which can only be used in specific requests.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "field_mask.paths",
            "description": "The set of field mask paths.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "order",
            "description": "Order the results by this field path (must be present in the field mask).\nDefault ordering is by ID. Prepend with a minus (-) to reverse the order.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Limit the number of results per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "page",
            "description": "Page number for pagination. 0 is interpreted as 1.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "GatewayRegistry"
        ]
      },
      "post": {
        "operationId": "Create2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Gateway"
            }
          }
        },
        "parameters": [
          {
            "name": "collaborator.organization_ids.organization_id",
            "description": "This ID shares namespace with user IDs.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3CreateGatewayRequest"
            }
          }
        ],
        "tags": [
          "GatewayRegistry"
        ]
      }
    },
    "/organizations/{organization.ids.organization_id}": {
      "put": {
        "operationId": "Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Organization"
            }
          }
        },
        "parameters": [
          {
            "name": "organization.ids.organization_id",
            "description": "This ID shares namespace with user IDs.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3UpdateOrganizationRequest"
            }
          }
        ],
        "tags": [
          "OrganizationRegistry"
        ]
      }
    },
    "/organizations/{organization_ids.organization_id}": {
      "get": {
        "operationId": "Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Organization"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_ids.organization_id",
            "description": "This ID shares namespace with user IDs.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "field_mask.paths",
            "description": "The set of field mask paths.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "OrganizationRegistry"
        ]
      }
    },
    "/organizations/{organization_ids.organization_id}/api-keys": {
      "post": {
        "operationId": "CreateAPIKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3APIKey"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_ids.organization_id",
            "description": "This ID shares namespace with user IDs.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3CreateOrganizationAPIKeyRequest"
            }
          }
        ],
        "tags": [
          "OrganizationAccess"
        ]
      }
    },
    "/organizations/{organization_ids.organization_id}/api-keys/{api_key.id}": {
      "put": {
        "operationId": "UpdateAPIKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3APIKey"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_ids.organization_id",
            "description": "This ID shares namespace with user IDs.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "api_key.id",
            "description": "Immutable and unique public identifier for the API key.\nGenerated by the Access Server.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3UpdateOrganizationAPIKeyRequest"
            }
          }
        ],
        "tags": [
          "OrganizationAccess"
        ]
      }
    },
    "/organizations/{organization_ids.organization_id}/collaborators": {
      "put": {
        "operationId": "SetCollaborator",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "organization_ids.organization_id",
            "description": "This ID shares namespace with user IDs.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3SetOrganizationCollaboratorRequest"
            }
          }
        ],
        "tags": [
          "OrganizationAccess"
        ]
      }
    },
    "/organizations/{organization_id}": {
      "delete": {
        "operationId": "Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "organization_id",
            "description": "This ID shares namespace with user IDs.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OrganizationRegistry"
        ]
      }
    },
    "/organizations/{organization_id}/api-keys": {
      "get": {
        "operationId": "ListAPIKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3APIKeys"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_id",
            "description": "This ID shares namespace with user IDs.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OrganizationAccess"
        ]
      }
    },
    "/organizations/{organization_id}/collaborators": {
      "get": {
        "operationId": "ListCollaborators",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Collaborators"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_id",
            "description": "This ID shares namespace with user IDs.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OrganizationAccess"
        ]
      }
    },
    "/organizations/{organization_id}/rights": {
      "get": {
        "operationId": "ListRights",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Rights"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_id",
            "description": "This ID shares namespace with user IDs.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OrganizationAccess"
        ]
      }
    },
    "/search/applications": {
      "get": {
        "operationId": "SearchApplications",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Applications"
            }
          }
        },
        "parameters": [
          {
            "name": "id_contains",
            "description": "Find entities where the ID contains this substring.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name_contains",
            "description": "Find entities where the name contains this substring.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "description_contains",
            "description": "Find entities where the description contains this substring.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "field_mask.paths",
            "description": "The set of field mask paths.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "EntityRegistrySearch"
        ]
      }
    },
    "/search/applications/{application_ids.application_id}/devices": {
      "get": {
        "operationId": "SearchEndDevices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3EndDevices"
            }
          }
        },
        "parameters": [
          {
            "name": "application_ids.application_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id_contains",
            "description": "Find end devices where the ID contains this substring.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name_contains",
            "description": "Find end devices where the name contains this substring.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "description_contains",
            "description": "Find end devices where the description contains this substring.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dev_eui_contains",
            "description": "Find end devices where the (hexadecimal) DevEUI contains this substring.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "join_eui_contains",
            "description": "Find end devices where the (hexadecimal) JoinEUI contains this substring.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dev_addr_contains",
            "description": "Find end devices where the (hexadecimal) DevAddr contains this substring.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "field_mask.paths",
            "description": "The set of field mask paths.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "EndDeviceRegistrySearch"
        ]
      }
    },
    "/search/clients": {
      "get": {
        "operationId": "SearchClients",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Clients"
            }
          }
        },
        "parameters": [
          {
            "name": "id_contains",
            "description": "Find entities where the ID contains this substring.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name_contains",
            "description": "Find entities where the name contains this substring.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "description_contains",
            "description": "Find entities where the description contains this substring.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "field_mask.paths",
            "description": "The set of field mask paths.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "EntityRegistrySearch"
        ]
      }
    },
    "/search/gateways": {
      "get": {
        "operationId": "SearchGateways",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Gateways"
            }
          }
        },
        "parameters": [
          {
            "name": "id_contains",
            "description": "Find entities where the ID contains this substring.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name_contains",
            "description": "Find entities where the name contains this substring.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "description_contains",
            "description": "Find entities where the description contains this substring.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "field_mask.paths",
            "description": "The set of field mask paths.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "EntityRegistrySearch"
        ]
      }
    },
    "/search/organizations": {
      "get": {
        "operationId": "SearchOrganizations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Organizations"
            }
          }
        },
        "parameters": [
          {
            "name": "id_contains",
            "description": "Find entities where the ID contains this substring.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name_contains",
            "description": "Find entities where the name contains this substring.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "description_contains",
            "description": "Find entities where the description contains this substring.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "field_mask.paths",
            "description": "The set of field mask paths.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "EntityRegistrySearch"
        ]
      }
    },
    "/search/users": {
      "get": {
        "operationId": "SearchUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Users"
            }
          }
        },
        "parameters": [
          {
            "name": "id_contains",
            "description": "Find entities where the ID contains this substring.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name_contains",
            "description": "Find entities where the name contains this substring.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "description_contains",
            "description": "Find entities where the description contains this substring.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "field_mask.paths",
            "description": "The set of field mask paths.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "EntityRegistrySearch"
        ]
      }
    },
    "/users": {
      "post": {
        "operationId": "Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3User"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3CreateUserRequest"
            }
          }
        ],
        "tags": [
          "UserRegistry"
        ]
      }
    },
    "/users/{collaborator.user_ids.user_id}/applications": {
      "get": {
        "summary": "List applications. See request message for details.",
        "operationId": "List2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Applications"
            }
          }
        },
        "parameters": [
          {
            "name": "collaborator.user_ids.user_id",
            "description": "This ID shares namespace with organization IDs.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "collaborator.organization_ids.organization_id",
            "description": "This ID shares namespace with user IDs.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "collaborator.user_ids.email",
            "description": "Secondary identifier, which can only be used in specific requests.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "field_mask.paths",
            "description": "The set of field mask paths.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "order",
            "description": "Order the results by this field path (must be present in the field mask).\nDefault ordering is by ID. Prepend with a minus (-) to reverse the order.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Limit the number of results per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "page",
            "description": "Page number for pagination. 0 is interpreted as 1.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "ApplicationRegistry"
        ]
      },
      "post": {
        "summary": "Create a new application. This also sets the given organization or user as\nfirst collaborator with all possible rights.",
        "operationId": "Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Application"
            }
          }
        },
        "parameters": [
          {
            "name": "collaborator.user_ids.user_id",
            "description": "This ID shares namespace with organization IDs.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3CreateApplicationRequest"
            }
          }
        ],
        "tags": [
          "ApplicationRegistry"
        ]
      }
    },
    "/users/{collaborator.user_ids.user_id}/clients": {
      "get": {
        "operationId": "List2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Clients"
            }
          }
        },
        "parameters": [
          {
            "name": "collaborator.user_ids.user_id",
            "description": "This ID shares namespace with organization IDs.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "collaborator.organization_ids.organization_id",
            "description": "This ID shares namespace with user IDs.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "collaborator.user_ids.email",
            "description": "Secondary identifier, which can only be used in specific requests.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "field_mask.paths",
            "description": "The set of field mask paths.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "order",
            "description": "Order the results by this field path (must be present in the field mask).\nDefault ordering is by ID. Prepend with a minus (-) to reverse the order.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Limit the number of results per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "page",
            "description": "Page number for pagination. 0 is interpreted as 1.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "ClientRegistry"
        ]
      },
      "post": {
        "operationId": "Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Client"
            }
          }
        },
        "parameters": [
          {
            "name": "collaborator.user_ids.user_id",
            "description": "This ID shares namespace with organization IDs.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3CreateClientRequest"
            }
          }
        ],
        "tags": [
          "ClientRegistry"
        ]
      }
    },
    "/users/{collaborator.user_ids.user_id}/gateways": {
      "get": {
        "operationId": "List2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Gateways"
            }
          }
        },
        "parameters": [
          {
            "name": "collaborator.user_ids.user_id",
            "description": "This ID shares namespace with organization IDs.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "collaborator.organization_ids.organization_id",
            "description": "This ID shares namespace with user IDs.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "collaborator.user_ids.email",
            "description": "Secondary identifier, which can only be used in specific requests.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "field_mask.paths",
            "description": "The set of field mask paths.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "order",
            "description": "Order the results by this field path (must be present in the field mask).\nDefault ordering is by ID. Prepend with a minus (-) to reverse the order.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Limit the number of results per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "page",
            "description": "Page number for pagination. 0 is interpreted as 1.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "GatewayRegistry"
        ]
      },
      "post": {
        "operationId": "Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Gateway"
            }
          }
        },
        "parameters": [
          {
            "name": "collaborator.user_ids.user_id",
            "description": "This ID shares namespace with organization IDs.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3CreateGatewayRequest"
            }
          }
        ],
        "tags": [
          "GatewayRegistry"
        ]
      }
    },
    "/users/{collaborator.user_ids.user_id}/organizations": {
      "get": {
        "operationId": "List2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Organizations"
            }
          }
        },
        "parameters": [
          {
            "name": "collaborator.user_ids.user_id",
            "description": "This ID shares namespace with organization IDs.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "collaborator.organization_ids.organization_id",
            "description": "This ID shares namespace with user IDs.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "collaborator.user_ids.email",
            "description": "Secondary identifier, which can only be used in specific requests.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "field_mask.paths",
            "description": "The set of field mask paths.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "order",
            "description": "Order the results by this field path (must be present in the field mask).\nDefault ordering is by ID. Prepend with a minus (-) to reverse the order.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Limit the number of results per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "page",
            "description": "Page number for pagination. 0 is interpreted as 1.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "OrganizationRegistry"
        ]
      },
      "post": {
        "operationId": "Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Organization"
            }
          }
        },
        "parameters": [
          {
            "name": "collaborator.user_ids.user_id",
            "description": "This ID shares namespace with organization IDs.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3CreateOrganizationRequest"
            }
          }
        ],
        "tags": [
          "OrganizationRegistry"
        ]
      }
    },
    "/users/{user.ids.user_id}": {
      "put": {
        "operationId": "Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3User"
            }
          }
        },
        "parameters": [
          {
            "name": "user.ids.user_id",
            "description": "This ID shares namespace with organization IDs.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3UpdateUserRequest"
            }
          }
        ],
        "tags": [
          "UserRegistry"
        ]
      }
    },
    "/users/{user_ids.user_id}": {
      "get": {
        "operationId": "Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3User"
            }
          }
        },
        "parameters": [
          {
            "name": "user_ids.user_id",
            "description": "This ID shares namespace with organization IDs.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_ids.email",
            "description": "Secondary identifier, which can only be used in specific requests.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "field_mask.paths",
            "description": "The set of field mask paths.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "UserRegistry"
        ]
      }
    },
    "/users/{user_ids.user_id}/api-keys": {
      "post": {
        "operationId": "CreateAPIKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3APIKey"
            }
          }
        },
        "parameters": [
          {
            "name": "user_ids.user_id",
            "description": "This ID shares namespace with organization IDs.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3CreateUserAPIKeyRequest"
            }
          }
        ],
        "tags": [
          "UserAccess"
        ]
      }
    },
    "/users/{user_ids.user_id}/api-keys/{api_key.id}": {
      "put": {
        "operationId": "UpdateAPIKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3APIKey"
            }
          }
        },
        "parameters": [
          {
            "name": "user_ids.user_id",
            "description": "This ID shares namespace with organization IDs.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "api_key.id",
            "description": "Immutable and unique public identifier for the API key.\nGenerated by the Access Server.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3UpdateUserAPIKeyRequest"
            }
          }
        ],
        "tags": [
          "UserAccess"
        ]
      }
    },
    "/users/{user_ids.user_id}/authorizations": {
      "get": {
        "operationId": "List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3OAuthClientAuthorizations"
            }
          }
        },
        "parameters": [
          {
            "name": "user_ids.user_id",
            "description": "This ID shares namespace with organization IDs.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_ids.email",
            "description": "Secondary identifier, which can only be used in specific requests.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "order",
            "description": "Order the results by this field path (must be present in the field mask).\nDefault ordering is by ID. Prepend with a minus (-) to reverse the order.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Limit the number of results per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "page",
            "description": "Page number for pagination. 0 is interpreted as 1.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "OAuthAuthorizationRegistry"
        ]
      }
    },
    "/users/{user_ids.user_id}/authorizations/{client_ids.client_id}": {
      "delete": {
        "operationId": "Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "user_ids.user_id",
            "description": "This ID shares namespace with organization IDs.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "client_ids.client_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_ids.email",
            "description": "Secondary identifier, which can only be used in specific requests.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "OAuthAuthorizationRegistry"
        ]
      }
    },
    "/users/{user_ids.user_id}/authorizations/{client_ids.client_id}/tokens": {
      "get": {
        "operationId": "ListTokens",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3OAuthAccessTokens"
            }
          }
        },
        "parameters": [
          {
            "name": "user_ids.user_id",
            "description": "This ID shares namespace with organization IDs.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "client_ids.client_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_ids.email",
            "description": "Secondary identifier, which can only be used in specific requests.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "order",
            "description": "Order the results by this field path (must be present in the field mask).\nDefault ordering is by ID. Prepend with a minus (-) to reverse the order.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Limit the number of results per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "page",
            "description": "Page number for pagination. 0 is interpreted as 1.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "OAuthAuthorizationRegistry"
        ]
      }
    },
    "/users/{user_ids.user_id}/authorizations/{client_ids.client_id}/tokens/{id}": {
      "delete": {
        "operationId": "DeleteToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "user_ids.user_id",
            "description": "This ID shares namespace with organization IDs.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "client_ids.client_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_ids.email",
            "description": "Secondary identifier, which can only be used in specific requests.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "OAuthAuthorizationRegistry"
        ]
      }
    },
    "/users/{user_ids.user_id}/password": {
      "put": {
        "operationId": "UpdatePassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "user_ids.user_id",
            "description": "This ID shares namespace with organization IDs.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3UpdateUserPasswordRequest"
            }
          }
        ],
        "tags": [
          "UserRegistry"
        ]
      }
    },
    "/users/{user_ids.user_id}/sessions": {
      "get": {
        "operationId": "List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3UserSessions"
            }
          }
        },
        "parameters": [
          {
            "name": "user_ids.user_id",
            "description": "This ID shares namespace with organization IDs.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_ids.email",
            "description": "Secondary identifier, which can only be used in specific requests.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "order",
            "description": "Order the results by this field path (must be present in the field mask).\nDefault ordering is by ID. Prepend with a minus (-) to reverse the order.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Limit the number of results per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "page",
            "description": "Page number for pagination. 0 is interpreted as 1.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "UserSessionRegistry"
        ]
      }
    },
    "/users/{user_ids.user_id}/sessions/{session_id}": {
      "delete": {
        "operationId": "Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "user_ids.user_id",
            "description": "This ID shares namespace with organization IDs.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_ids.email",
            "description": "Secondary identifier, which can only be used in specific requests.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserSessionRegistry"
        ]
      }
    },
    "/users/{user_ids.user_id}/temporary_password": {
      "post": {
        "operationId": "CreateTemporaryPassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "user_ids.user_id",
            "description": "This ID shares namespace with organization IDs.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserRegistry"
        ]
      }
    },
    "/users/{user_id}": {
      "delete": {
        "operationId": "Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "description": "This ID shares namespace with organization IDs.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "email",
            "description": "Secondary identifier, which can only be used in specific requests.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserRegistry"
        ]
      }
    },
    "/users/{user_id}/api-keys": {
      "get": {
        "operationId": "ListAPIKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3APIKeys"
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "description": "This ID shares namespace with organization IDs.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "email",
            "description": "Secondary identifier, which can only be used in specific requests.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserAccess"
        ]
      }
    },
    "/users/{user_id}/rights": {
      "get": {
        "operationId": "ListRights",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Rights"
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "description": "This ID shares namespace with organization IDs.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "email",
            "description": "Secondary identifier, which can only be used in specific requests.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserAccess"
        ]
      }
    }
  },
  "definitions": {
    "ApplicationDownlinkClassBC": {
      "type": "object",
      "properties": {
        "gateways": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3GatewayAntennaIdentifiers"
          },
          "description": "Possible gateway identifiers and antenna index to use for this downlink message.\nThe Network Server selects one of these gateways for downlink, based on connectivity, signal quality, channel utilization and an available slot.\nIf none of the gateways can be selected, the downlink message fails.\nIf empty, a gateway and antenna is selected automatically from the gateways seen in recent uplinks."
        },
        "absolute_time": {
          "type": "string",
          "format": "date-time",
          "description": "Absolute time when the downlink message should be transmitted.\nThis requires the gateway to have GPS time synchronization.\nIf the time is in the past or if there is a scheduling conflict, the downlink message fails.\nIf null, the time is selected based on slot availability. This is recommended in class B mode."
        }
      }
    },
    "AuthInfoResponseAPIKeyAccess": {
      "type": "object",
      "properties": {
        "api_key": {
          "$ref": "#/definitions/v3APIKey"
        },
        "entity_ids": {
          "$ref": "#/definitions/v3EntityIdentifiers"
        }
      }
    },
    "ConcentratorConfigFSKChannel": {
      "type": "object",
      "properties": {
        "frequency": {
          "type": "string",
          "format": "uint64",
          "description": "Frequency (Hz)."
        },
        "radio": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ConcentratorConfigLBTConfiguration": {
      "type": "object",
      "properties": {
        "rssi_target": {
          "type": "number",
          "format": "float",
          "description": "Received signal strength (dBm)."
        },
        "rssi_offset": {
          "type": "number",
          "format": "float",
          "description": "Received signal strength offset (dBm)."
        },
        "scan_time": {
          "type": "string"
        }
      }
    },
    "ConcentratorConfigLoRaStandardChannel": {
      "type": "object",
      "properties": {
        "frequency": {
          "type": "string",
          "format": "uint64",
          "description": "Frequency (Hz)."
        },
        "radio": {
          "type": "integer",
          "format": "int64"
        },
        "bandwidth": {
          "type": "integer",
          "format": "int64",
          "description": "Bandwidth (Hz)."
        },
        "spreading_factor": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "GatewayRadioTxConfiguration": {
      "type": "object",
      "properties": {
        "min_frequency": {
          "type": "string",
          "format": "uint64"
        },
        "max_frequency": {
          "type": "string",
          "format": "uint64"
        },
        "notch_frequency": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "MACCommandADRParamSetupReq": {
      "type": "object",
      "properties": {
        "adr_ack_limit_exponent": {
          "$ref": "#/definitions/v3ADRAckLimitExponent",
          "description": "Exponent e that configures the ADR_ACK_LIMIT = 2^e messages."
        },
        "adr_ack_delay_exponent": {
          "$ref": "#/definitions/v3ADRAckDelayExponent",
          "description": "Exponent e that configures the ADR_ACK_DELAY = 2^e messages."
        }
      }
    },
    "MACCommandBeaconFreqAns": {
      "type": "object",
      "properties": {
        "frequency_ack": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "MACCommandBeaconFreqReq": {
      "type": "object",
      "properties": {
        "frequency": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "MACCommandBeaconTimingAns": {
      "type": "object",
      "properties": {
        "delay": {
          "type": "integer",
          "format": "int64"
        },
        "channel_index": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "MACCommandDLChannelAns": {
      "type": "object",
      "properties": {
        "channel_index_ack": {
          "type": "boolean",
          "format": "boolean"
        },
        "frequency_ack": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "MACCommandDLChannelReq": {
      "type": "object",
      "properties": {
        "channel_index": {
          "type": "integer",
          "format": "int64"
        },
        "frequency": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "MACCommandDevStatusAns": {
      "type": "object",
      "properties": {
        "battery": {
          "type": "integer",
          "format": "int64",
          "description": "Device battery status.\n0 indicates that the device is connected to an external power source.\n1..254 indicates a battery level.\n255 indicates that the device was not able to measure the battery level."
        },
        "margin": {
          "type": "integer",
          "format": "int32",
          "description": "SNR of the last downlink (dB; [-32, +31])."
        }
      }
    },
    "MACCommandDeviceModeConf": {
      "type": "object",
      "properties": {
        "class": {
          "$ref": "#/definitions/v3Class"
        }
      }
    },
    "MACCommandDeviceModeInd": {
      "type": "object",
      "properties": {
        "class": {
          "$ref": "#/definitions/v3Class"
        }
      }
    },
    "MACCommandDeviceTimeAns": {
      "type": "object",
      "properties": {
        "time": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MACCommandDutyCycleReq": {
      "type": "object",
      "properties": {
        "max_duty_cycle": {
          "$ref": "#/definitions/v3AggregatedDutyCycle"
        }
      }
    },
    "MACCommandForceRejoinReq": {
      "type": "object",
      "properties": {
        "rejoin_type": {
          "$ref": "#/definitions/v3RejoinType"
        },
        "data_rate_index": {
          "$ref": "#/definitions/v3DataRateIndex"
        },
        "max_retries": {
          "type": "integer",
          "format": "int64"
        },
        "period_exponent": {
          "$ref": "#/definitions/v3RejoinPeriodExponent",
          "description": "Exponent e that configures the rejoin period = 32 * 2^e + rand(0,32) seconds."
        }
      }
    },
    "MACCommandLinkADRAns": {
      "type": "object",
      "properties": {
        "channel_mask_ack": {
          "type": "boolean",
          "format": "boolean"
        },
        "data_rate_index_ack": {
          "type": "boolean",
          "format": "boolean"
        },
        "tx_power_index_ack": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "MACCommandLinkADRReq": {
      "type": "object",
      "properties": {
        "data_rate_index": {
          "$ref": "#/definitions/v3DataRateIndex"
        },
        "tx_power_index": {
          "type": "integer",
          "format": "int64"
        },
        "channel_mask": {
          "type": "array",
          "items": {
            "type": "boolean",
            "format": "boolean"
          }
        },
        "channel_mask_control": {
          "type": "integer",
          "format": "int64"
        },
        "nb_trans": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "MACCommandLinkCheckAns": {
      "type": "object",
      "properties": {
        "margin": {
          "type": "integer",
          "format": "int64",
          "description": "Indicates the link margin in dB of the received LinkCheckReq, relative to the demodulation floor."
        },
        "gateway_count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "MACCommandNewChannelAns": {
      "type": "object",
      "properties": {
        "frequency_ack": {
          "type": "boolean",
          "format": "boolean"
        },
        "data_rate_ack": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "MACCommandNewChannelReq": {
      "type": "object",
      "properties": {
        "channel_index": {
          "type": "integer",
          "format": "int64"
        },
        "frequency": {
          "type": "string",
          "format": "uint64"
        },
        "min_data_rate_index": {
          "$ref": "#/definitions/v3DataRateIndex"
        },
        "max_data_rate_index": {
          "$ref": "#/definitions/v3DataRateIndex"
        }
      }
    },
    "MACCommandPingSlotChannelAns": {
      "type": "object",
      "properties": {
        "frequency_ack": {
          "type": "boolean",
          "format": "boolean"
        },
        "data_rate_index_ack": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "MACCommandPingSlotChannelReq": {
      "type": "object",
      "properties": {
        "frequency": {
          "type": "string",
          "format": "uint64"
        },
        "data_rate_index": {
          "$ref": "#/definitions/v3DataRateIndex"
        }
      }
    },
    "MACCommandPingSlotInfoReq": {
      "type": "object",
      "properties": {
        "period": {
          "$ref": "#/definitions/v3PingSlotPeriod"
        }
      }
    },
    "MACCommandRejoinParamSetupAns": {
      "type": "object",
      "properties": {
        "max_time_exponent_ack": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "MACCommandRejoinParamSetupReq": {
      "type": "object",
      "properties": {
        "max_count_exponent": {
          "$ref": "#/definitions/v3RejoinCountExponent",
          "description": "Exponent e that configures the rejoin counter = 2^(e+4) messages."
        },
        "max_time_exponent": {
          "$ref": "#/definitions/v3RejoinTimeExponent",
          "description": "Exponent e that configures the rejoin timer = 2^(e+10) seconds."
        }
      }
    },
    "MACCommandRekeyConf": {
      "type": "object",
      "properties": {
        "minor_version": {
          "$ref": "#/definitions/v3Minor"
        }
      }
    },
    "MACCommandRekeyInd": {
      "type": "object",
      "properties": {
        "minor_version": {
          "$ref": "#/definitions/v3Minor"
        }
      }
    },
    "MACCommandResetConf": {
      "type": "object",
      "properties": {
        "minor_version": {
          "$ref": "#/definitions/v3Minor"
        }
      }
    },
    "MACCommandResetInd": {
      "type": "object",
      "properties": {
        "minor_version": {
          "$ref": "#/definitions/v3Minor"
        }
      }
    },
    "MACCommandRxParamSetupAns": {
      "type": "object",
      "properties": {
        "rx2_data_rate_index_ack": {
          "type": "boolean",
          "format": "boolean"
        },
        "rx1_data_rate_offset_ack": {
          "type": "boolean",
          "format": "boolean"
        },
        "rx2_frequency_ack": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "MACCommandRxParamSetupReq": {
      "type": "object",
      "properties": {
        "rx2_data_rate_index": {
          "$ref": "#/definitions/v3DataRateIndex"
        },
        "rx1_data_rate_offset": {
          "type": "integer",
          "format": "int64"
        },
        "rx2_frequency": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "MACCommandRxTimingSetupReq": {
      "type": "object",
      "properties": {
        "delay": {
          "$ref": "#/definitions/v3RxDelay"
        }
      }
    },
    "MACCommandTxParamSetupReq": {
      "type": "object",
      "properties": {
        "max_eirp_index": {
          "$ref": "#/definitions/v3DeviceEIRP",
          "title": "Indicates the maximum EIRP value in dBm, indexed by the following vector:\n[ 8 10 12 13 14 16 18 20 21 24 26 27 29 30 33 36 ]"
        },
        "uplink_dwell_time": {
          "type": "boolean",
          "format": "boolean"
        },
        "downlink_dwell_time": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "MACSettingsAggregatedDutyCycleValue": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/v3AggregatedDutyCycle"
        }
      }
    },
    "MACSettingsDataRateIndexValue": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/v3DataRateIndex"
        }
      }
    },
    "MACSettingsPingSlotPeriodValue": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/v3PingSlotPeriod"
        }
      }
    },
    "MACSettingsRxDelayValue": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/v3RxDelay"
        }
      }
    },
    "MACStateJoinAccept": {
      "type": "object",
      "properties": {
        "payload": {
          "type": "string",
          "format": "byte",
          "description": "Payload of the join-accept received from Join Server."
        },
        "request": {
          "$ref": "#/definitions/v3JoinRequest",
          "description": "JoinRequest sent to Join Server."
        },
        "keys": {
          "$ref": "#/definitions/v3SessionKeys",
          "description": "Network session keys associated with the join."
        }
      }
    },
    "PictureEmbedded": {
      "type": "object",
      "properties": {
        "mime_type": {
          "type": "string",
          "description": "MIME type of the picture."
        },
        "data": {
          "type": "string",
          "format": "byte",
          "description": "Picture data. A data URI can be constructed as follows:\n`data:\u003cmime_type\u003e;base64,\u003cdata\u003e`."
        }
      }
    },
    "ProvisionEndDevicesRequestIdentifiersFromData": {
      "type": "object",
      "properties": {
        "join_eui": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "ProvisionEndDevicesRequestIdentifiersList": {
      "type": "object",
      "properties": {
        "join_eui": {
          "type": "string",
          "format": "byte"
        },
        "end_device_ids": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3EndDeviceIdentifiers"
          }
        }
      }
    },
    "ProvisionEndDevicesRequestIdentifiersRange": {
      "type": "object",
      "properties": {
        "join_eui": {
          "type": "string",
          "format": "byte"
        },
        "start_dev_eui": {
          "type": "string",
          "format": "byte",
          "description": "DevEUI to start issuing from."
        }
      }
    },
    "TxAcknowledgmentResult": {
      "type": "string",
      "enum": [
        "SUCCESS",
        "UNKNOWN_ERROR",
        "TOO_LATE",
        "TOO_EARLY",
        "COLLISION_PACKET",
        "COLLISION_BEACON",
        "TX_FREQ",
        "TX_POWER",
        "GPS_UNLOCKED"
      ],
      "default": "SUCCESS"
    },
    "TxSettingsDownlink": {
      "type": "object",
      "properties": {
        "antenna_index": {
          "type": "integer",
          "format": "int64",
          "description": "Index of the antenna on which the uplink was received and/or downlink must be sent."
        },
        "tx_power": {
          "type": "number",
          "format": "float",
          "description": "Transmission power (dBm). Only on downlink."
        },
        "invert_polarization": {
          "type": "boolean",
          "format": "boolean",
          "description": "Invert LoRa polarization; false for LoRaWAN uplink, true for downlink."
        }
      },
      "description": "Transmission settings for downlink."
    },
    "lorawanv3Location": {
      "type": "object",
      "properties": {
        "latitude": {
          "type": "number",
          "format": "double",
          "description": "The North–South position (degrees; -90 to +90), where 0 is the equator, North pole is positive, South pole is negative."
        },
        "longitude": {
          "type": "number",
          "format": "double",
          "description": "The East-West position (degrees; -180 to +180), where 0 is the Prime Meridian (Greenwich), East is positive , West is negative."
        },
        "altitude": {
          "type": "integer",
          "format": "int32",
          "description": "The altitude (meters), where 0 is the mean sea level."
        },
        "accuracy": {
          "type": "integer",
          "format": "int32",
          "description": "The accuracy of the location (meters)."
        },
        "source": {
          "$ref": "#/definitions/v3LocationSource",
          "description": "Source of the location information."
        }
      }
    },
    "lorawanv3Message": {
      "type": "object",
      "properties": {
        "m_hdr": {
          "$ref": "#/definitions/v3MHDR"
        },
        "mic": {
          "type": "string",
          "format": "byte"
        },
        "mac_payload": {
          "$ref": "#/definitions/v3MACPayload"
        },
        "join_request_payload": {
          "$ref": "#/definitions/v3JoinRequestPayload"
        },
        "join_accept_payload": {
          "$ref": "#/definitions/v3JoinAcceptPayload"
        },
        "rejoin_request_payload": {
          "$ref": "#/definitions/v3RejoinRequestPayload"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "protobufFieldMask": {
      "type": "object",
      "properties": {
        "paths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The set of field mask paths."
        }
      },
      "description": "paths: \"f.a\"\n    paths: \"f.b.d\"\n\nHere `f` represents a field in some root message, `a` and `b`\nfields in the message found in `f`, and `d` a field found in the\nmessage in `f.b`.\n\nField masks are used to specify a subset of fields that should be\nreturned by a get operation or modified by an update operation.\nField masks also have a custom JSON encoding (see below).\n\n# Field Masks in Projections\n\nWhen used in the context of a projection, a response message or\nsub-message is filtered by the API to only contain those fields as\nspecified in the mask. For example, if the mask in the previous\nexample is applied to a response message as follows:\n\n    f {\n      a : 22\n      b {\n        d : 1\n        x : 2\n      }\n      y : 13\n    }\n    z: 8\n\nThe result will not contain specific values for fields x,y and z\n(their value will be set to the default, and omitted in proto text\noutput):\n\n\n    f {\n      a : 22\n      b {\n        d : 1\n      }\n    }\n\nA repeated field is not allowed except at the last position of a\npaths string.\n\nIf a FieldMask object is not present in a get operation, the\noperation applies to all fields (as if a FieldMask of all fields\nhad been specified).\n\nNote that a field mask does not necessarily apply to the\ntop-level response message. In case of a REST get operation, the\nfield mask applies directly to the response, but in case of a REST\nlist operation, the mask instead applies to each individual message\nin the returned resource list. In case of a REST custom method,\nother definitions may be used. Where the mask applies will be\nclearly documented together with its declaration in the API.  In\nany case, the effect on the returned resource/resources is required\nbehavior for APIs.\n\n# Field Masks in Update Operations\n\nA field mask in update operations specifies which fields of the\ntargeted resource are going to be updated. The API is required\nto only change the values of the fields as specified in the mask\nand leave the others untouched. If a resource is passed in to\ndescribe the updated values, the API ignores the values of all\nfields not covered by the mask.\n\nIf a repeated field is specified for an update operation, the existing\nrepeated values in the target resource will be overwritten by the new values.\nNote that a repeated field is only allowed in the last position of a `paths`\nstring.\n\nIf a sub-message is specified in the last position of the field mask for an\nupdate operation, then the existing sub-message in the target resource is\noverwritten. Given the target message:\n\n    f {\n      b {\n        d : 1\n        x : 2\n      }\n      c : 1\n    }\n\nAnd an update message:\n\n    f {\n      b {\n        d : 10\n      }\n    }\n\nthen if the field mask is:\n\n paths: \"f.b\"\n\nthen the result will be:\n\n    f {\n      b {\n        d : 10\n      }\n      c : 1\n    }\n\nHowever, if the update mask was:\n\n paths: \"f.b.d\"\n\nthen the result would be:\n\n    f {\n      b {\n        d : 10\n        x : 2\n      }\n      c : 1\n    }\n\nIn order to reset a field's value to the default, the field must\nbe in the mask and set to the default value in the provided resource.\nHence, in order to reset all fields of a resource, provide a default\ninstance of the resource and set all fields in the mask, or do\nnot provide a mask as described below.\n\nIf a field mask is not present on update, the operation applies to\nall fields (as if a field mask of all fields has been specified).\nNote that in the presence of schema evolution, this may mean that\nfields the client does not know and has therefore not filled into\nthe request will be reset to their default. If this is unwanted\nbehavior, a specific service may require a client to always specify\na field mask, producing an error if not.\n\nAs with get operations, the location of the resource which\ndescribes the updated values in the request message depends on the\noperation kind. In any case, the effect of the field mask is\nrequired to be honored by the API.\n\n## Considerations for HTTP REST\n\nThe HTTP kind of an update operation which uses a field mask must\nbe set to PATCH instead of PUT in order to satisfy HTTP semantics\n(PUT must only be used for full updates).\n\n# JSON Encoding of Field Masks\n\nIn JSON, a field mask is encoded as a single string where paths are\nseparated by a comma. Fields name in each path are converted\nto/from lower-camel naming conventions.\n\nAs an example, consider the following message declarations:\n\n    message Profile {\n      User user = 1;\n      Photo photo = 2;\n    }\n    message User {\n      string display_name = 1;\n      string address = 2;\n    }\n\nIn proto a field mask for `Profile` may look as such:\n\n    mask {\n      paths: \"user.display_name\"\n      paths: \"photo\"\n    }\n\nIn JSON, the same mask is represented as below:\n\n    {\n      mask: \"user.displayName,photo\"\n    }\n\n# Field Masks and Oneof Fields\n\nField masks treat fields in oneofs just as regular fields. Consider the\nfollowing message:\n\n    message SampleMessage {\n      oneof test_oneof {\n        string name = 4;\n        SubMessage sub_message = 9;\n      }\n    }\n\nThe field mask can be:\n\n    mask {\n      paths: \"name\"\n    }\n\nOr:\n\n    mask {\n      paths: \"sub_message\"\n    }\n\nNote that oneof type names (\"test_oneof\" in this case) cannot be used in\npaths.\n\n## Field Mask Verification\n\nThe implementation of any API method which has a FieldMask type field in the\nrequest should verify the included field paths, and return an\n`INVALID_ARGUMENT` error if any path is duplicated or unmappable.",
      "title": "`FieldMask` represents a set of symbolic field paths, for example:"
    },
    "protobufListValue": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufValue"
          },
          "description": "Repeated field of dynamically typed values."
        }
      },
      "description": "`ListValue` is a wrapper around a repeated field of values.\n\nThe JSON representation for `ListValue` is JSON array."
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "protobufStruct": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/protobufValue"
          },
          "description": "Unordered map of dynamically typed values."
        }
      },
      "description": "`Struct` represents a structured data value, consisting of fields\nwhich map to dynamically typed values. In some languages, `Struct`\nmight be supported by a native representation. For example, in\nscripting languages like JS a struct is represented as an\nobject. The details of that representation are described together\nwith the proto support for the language.\n\nThe JSON representation for `Struct` is JSON object."
    },
    "protobufValue": {
      "type": "object",
      "properties": {
        "null_value": {
          "$ref": "#/definitions/protobufNullValue",
          "description": "Represents a null value."
        },
        "number_value": {
          "type": "number",
          "format": "double",
          "description": "Represents a double value."
        },
        "string_value": {
          "type": "string",
          "description": "Represents a string value."
        },
        "bool_value": {
          "type": "boolean",
          "format": "boolean",
          "description": "Represents a boolean value."
        },
        "struct_value": {
          "$ref": "#/definitions/protobufStruct",
          "description": "Represents a structured value."
        },
        "list_value": {
          "$ref": "#/definitions/protobufListValue",
          "description": "Represents a repeated `Value`."
        }
      },
      "description": "`Value` represents a dynamically typed value which can be either\nnull, a number, a string, a boolean, a recursive struct value, or a\nlist of values. A producer of value is expected to set one of that\nvariants, absence of any variant indicates an error.\n\nThe JSON representation for `Value` is JSON value."
    },
    "runtimeStreamError": {
      "type": "object",
      "properties": {
        "grpc_code": {
          "type": "integer",
          "format": "int32"
        },
        "http_code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "http_status": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v3ADRAckDelayExponent": {
      "type": "string",
      "enum": [
        "ADR_ACK_DELAY_1",
        "ADR_ACK_DELAY_2",
        "ADR_ACK_DELAY_4",
        "ADR_ACK_DELAY_8",
        "ADR_ACK_DELAY_16",
        "ADR_ACK_DELAY_32",
        "ADR_ACK_DELAY_64",
        "ADR_ACK_DELAY_128",
        "ADR_ACK_DELAY_256",
        "ADR_ACK_DELAY_512",
        "ADR_ACK_DELAY_1024",
        "ADR_ACK_DELAY_2048",
        "ADR_ACK_DELAY_4096",
        "ADR_ACK_DELAY_8192",
        "ADR_ACK_DELAY_16384",
        "ADR_ACK_DELAY_32768"
      ],
      "default": "ADR_ACK_DELAY_1"
    },
    "v3ADRAckLimitExponent": {
      "type": "string",
      "enum": [
        "ADR_ACK_LIMIT_1",
        "ADR_ACK_LIMIT_2",
        "ADR_ACK_LIMIT_4",
        "ADR_ACK_LIMIT_8",
        "ADR_ACK_LIMIT_16",
        "ADR_ACK_LIMIT_32",
        "ADR_ACK_LIMIT_64",
        "ADR_ACK_LIMIT_128",
        "ADR_ACK_LIMIT_256",
        "ADR_ACK_LIMIT_512",
        "ADR_ACK_LIMIT_1024",
        "ADR_ACK_LIMIT_2048",
        "ADR_ACK_LIMIT_4096",
        "ADR_ACK_LIMIT_8192",
        "ADR_ACK_LIMIT_16384",
        "ADR_ACK_LIMIT_32768"
      ],
      "default": "ADR_ACK_LIMIT_1"
    },
    "v3APIKey": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Immutable and unique public identifier for the API key.\nGenerated by the Access Server."
        },
        "key": {
          "type": "string",
          "description": "Immutable and unique secret value of the API key.\nGenerated by the Access Server."
        },
        "name": {
          "type": "string",
          "description": "User-defined (friendly) name for the API key."
        },
        "rights": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3Right"
          },
          "description": "Rights that are granted to this API key."
        }
      }
    },
    "v3APIKeys": {
      "type": "object",
      "properties": {
        "api_keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3APIKey"
          }
        }
      }
    },
    "v3AggregatedDutyCycle": {
      "type": "string",
      "enum": [
        "DUTY_CYCLE_1",
        "DUTY_CYCLE_2",
        "DUTY_CYCLE_4",
        "DUTY_CYCLE_8",
        "DUTY_CYCLE_16",
        "DUTY_CYCLE_32",
        "DUTY_CYCLE_64",
        "DUTY_CYCLE_128",
        "DUTY_CYCLE_256",
        "DUTY_CYCLE_512",
        "DUTY_CYCLE_1024",
        "DUTY_CYCLE_2048",
        "DUTY_CYCLE_4096",
        "DUTY_CYCLE_8192",
        "DUTY_CYCLE_16384",
        "DUTY_CYCLE_32768"
      ],
      "default": "DUTY_CYCLE_1"
    },
    "v3AppSKeyResponse": {
      "type": "object",
      "properties": {
        "app_s_key": {
          "$ref": "#/definitions/v3KeyEnvelope",
          "description": "The (encrypted) Application Session Key."
        }
      }
    },
    "v3Application": {
      "type": "object",
      "properties": {
        "ids": {
          "$ref": "#/definitions/v3ApplicationIdentifiers"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "contact_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3ContactInfo"
          }
        }
      },
      "description": "Application is the message that defines an Application in the network."
    },
    "v3ApplicationDownlink": {
      "type": "object",
      "properties": {
        "session_key_id": {
          "type": "string",
          "format": "byte",
          "description": "Join Server issued identifier for the session keys used by this downlink."
        },
        "f_port": {
          "type": "integer",
          "format": "int64"
        },
        "f_cnt": {
          "type": "integer",
          "format": "int64"
        },
        "frm_payload": {
          "type": "string",
          "format": "byte"
        },
        "decoded_payload": {
          "$ref": "#/definitions/protobufStruct"
        },
        "confirmed": {
          "type": "boolean",
          "format": "boolean"
        },
        "class_b_c": {
          "$ref": "#/definitions/ApplicationDownlinkClassBC",
          "description": "Optional gateway and timing information for class B and C.\nIf set, this downlink message will only be transmitted as class B or C downlink.\nIf not set, this downlink message may be transmitted in class A, B and C."
        },
        "priority": {
          "$ref": "#/definitions/v3TxSchedulePriority",
          "description": "Priority for scheduling the downlink message."
        },
        "correlation_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v3ApplicationDownlinkFailed": {
      "type": "object",
      "properties": {
        "downlink": {
          "$ref": "#/definitions/v3ApplicationDownlink"
        },
        "error": {
          "$ref": "#/definitions/v3ErrorDetails"
        }
      }
    },
    "v3ApplicationDownlinks": {
      "type": "object",
      "properties": {
        "downlinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3ApplicationDownlink"
          }
        }
      }
    },
    "v3ApplicationIdentifiers": {
      "type": "object",
      "properties": {
        "application_id": {
          "type": "string"
        }
      }
    },
    "v3ApplicationInvalidatedDownlinks": {
      "type": "object",
      "properties": {
        "downlinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3ApplicationDownlink"
          }
        },
        "last_f_cnt_down": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "v3ApplicationJoinAccept": {
      "type": "object",
      "properties": {
        "session_key_id": {
          "type": "string",
          "format": "byte",
          "description": "Join Server issued identifier for the session keys negotiated in this join."
        },
        "app_s_key": {
          "$ref": "#/definitions/v3KeyEnvelope",
          "description": "Encrypted Application Session Key (if Join Server sent it to Network Server)."
        },
        "invalidated_downlinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3ApplicationDownlink"
          },
          "description": "Downlink messages in the queue that got invalidated because of the session change."
        },
        "pending_session": {
          "type": "boolean",
          "format": "boolean",
          "description": "Indicates whether the security context refers to the pending session, i.e. when this join-accept is an answer to a\nrejoin-request."
        }
      }
    },
    "v3ApplicationLink": {
      "type": "object",
      "properties": {
        "network_server_address": {
          "type": "string",
          "description": "The address of the external Network Server where to link to.\nThe typical format of the address is \"host:port\". If the port is omitted,\nthe normal port inference (with DNS lookup, otherwise defaults) is used.\nLeave empty when linking to a cluster Network Server."
        },
        "api_key": {
          "type": "string"
        },
        "default_formatters": {
          "$ref": "#/definitions/v3MessagePayloadFormatters"
        }
      }
    },
    "v3ApplicationLinkStats": {
      "type": "object",
      "properties": {
        "linked_at": {
          "type": "string",
          "format": "date-time"
        },
        "network_server_address": {
          "type": "string"
        },
        "last_up_received_at": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the last upstream message has been received from a Network Server.\nThis can be a join-accept, uplink message or downlink message event."
        },
        "up_count": {
          "type": "string",
          "format": "uint64",
          "description": "Number of upstream messages received."
        },
        "last_downlink_forwarded_at": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the last downlink message has been forwarded to a Network Server."
        },
        "downlink_count": {
          "type": "string",
          "format": "uint64",
          "description": "Number of downlink messages forwarded."
        }
      },
      "description": "Link stats as monitored by the Application Server."
    },
    "v3ApplicationLocation": {
      "type": "object",
      "properties": {
        "service": {
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/lorawanv3Location"
        },
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v3ApplicationUp": {
      "type": "object",
      "properties": {
        "end_device_ids": {
          "$ref": "#/definitions/v3EndDeviceIdentifiers"
        },
        "correlation_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "uplink_message": {
          "$ref": "#/definitions/v3ApplicationUplink"
        },
        "join_accept": {
          "$ref": "#/definitions/v3ApplicationJoinAccept"
        },
        "downlink_ack": {
          "$ref": "#/definitions/v3ApplicationDownlink"
        },
        "downlink_nack": {
          "$ref": "#/definitions/v3ApplicationDownlink"
        },
        "downlink_sent": {
          "$ref": "#/definitions/v3ApplicationDownlink"
        },
        "downlink_failed": {
          "$ref": "#/definitions/v3ApplicationDownlinkFailed"
        },
        "downlink_queued": {
          "$ref": "#/definitions/v3ApplicationDownlink"
        },
        "downlink_queue_invalidated": {
          "$ref": "#/definitions/v3ApplicationInvalidatedDownlinks"
        },
        "location_solved": {
          "$ref": "#/definitions/v3ApplicationLocation"
        }
      }
    },
    "v3ApplicationUplink": {
      "type": "object",
      "properties": {
        "session_key_id": {
          "type": "string",
          "format": "byte",
          "description": "Join Server issued identifier for the session keys used by this uplink."
        },
        "f_port": {
          "type": "integer",
          "format": "int64"
        },
        "f_cnt": {
          "type": "integer",
          "format": "int64"
        },
        "frm_payload": {
          "type": "string",
          "format": "byte"
        },
        "decoded_payload": {
          "$ref": "#/definitions/protobufStruct"
        },
        "rx_metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3RxMetadata"
          }
        },
        "settings": {
          "$ref": "#/definitions/v3TxSettings"
        }
      }
    },
    "v3ApplicationWebhook": {
      "type": "object",
      "properties": {
        "ids": {
          "$ref": "#/definitions/v3ApplicationWebhookIdentifiers"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "base_url": {
          "type": "string",
          "description": "Base URL to which the message's path is appended."
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "HTTP headers to use."
        },
        "format": {
          "type": "string",
          "description": "The format to use for the body.\nSupported values depend on the Application Server configuration."
        },
        "uplink_message": {
          "$ref": "#/definitions/v3ApplicationWebhookMessage"
        },
        "join_accept": {
          "$ref": "#/definitions/v3ApplicationWebhookMessage"
        },
        "downlink_ack": {
          "$ref": "#/definitions/v3ApplicationWebhookMessage"
        },
        "downlink_nack": {
          "$ref": "#/definitions/v3ApplicationWebhookMessage"
        },
        "downlink_sent": {
          "$ref": "#/definitions/v3ApplicationWebhookMessage"
        },
        "downlink_failed": {
          "$ref": "#/definitions/v3ApplicationWebhookMessage"
        },
        "downlink_queued": {
          "$ref": "#/definitions/v3ApplicationWebhookMessage"
        },
        "location_solved": {
          "$ref": "#/definitions/v3ApplicationWebhookMessage"
        }
      }
    },
    "v3ApplicationWebhookFormats": {
      "type": "object",
      "properties": {
        "formats": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Format and description."
        }
      }
    },
    "v3ApplicationWebhookIdentifiers": {
      "type": "object",
      "properties": {
        "application_ids": {
          "$ref": "#/definitions/v3ApplicationIdentifiers"
        },
        "webhook_id": {
          "type": "string"
        }
      }
    },
    "v3ApplicationWebhookMessage": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "Path to append to the base URL."
        }
      }
    },
    "v3ApplicationWebhooks": {
      "type": "object",
      "properties": {
        "webhooks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3ApplicationWebhook"
          }
        }
      }
    },
    "v3Applications": {
      "type": "object",
      "properties": {
        "applications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3Application"
          }
        }
      }
    },
    "v3AuthInfoResponse": {
      "type": "object",
      "properties": {
        "api_key": {
          "$ref": "#/definitions/AuthInfoResponseAPIKeyAccess"
        },
        "oauth_access_token": {
          "$ref": "#/definitions/v3OAuthAccessToken"
        },
        "universal_rights": {
          "$ref": "#/definitions/v3Rights"
        },
        "is_admin": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "v3CFList": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/v3CFListType"
        },
        "freq": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          },
          "description": "Frequencies to be broadcasted, in hecto-Hz.\nThese values are broadcasted as 24 bits unsigned integers.\nThis field should not contain default values."
        },
        "ch_masks": {
          "type": "array",
          "items": {
            "type": "boolean",
            "format": "boolean"
          },
          "description": "ChMasks controlling the channels to be used.\nLength of this field must be equal to the amount of uplink channels\ndefined by the selected frequency plan."
        }
      }
    },
    "v3CFListType": {
      "type": "string",
      "enum": [
        "FREQUENCIES",
        "CHANNEL_MASKS"
      ],
      "default": "FREQUENCIES"
    },
    "v3Class": {
      "type": "string",
      "enum": [
        "CLASS_A",
        "CLASS_B",
        "CLASS_C"
      ],
      "default": "CLASS_A"
    },
    "v3Client": {
      "type": "object",
      "properties": {
        "ids": {
          "$ref": "#/definitions/v3ClientIdentifiers"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "contact_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3ContactInfo"
          }
        },
        "secret": {
          "type": "string",
          "description": "The client secret is only visible to collaborators of the client."
        },
        "redirect_uris": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The allowed redirect URIs against which authorization requests are checked.\nIf the authorization request does not pass a redirect URI, the first one\nfrom this list is taken."
        },
        "state": {
          "$ref": "#/definitions/v3State",
          "description": "The reviewing state of the client.\nThis field can only be modified by admins."
        },
        "skip_authorization": {
          "type": "boolean",
          "format": "boolean",
          "description": "If set, the authorization page will be skipped.\nThis field can only be modified by admins."
        },
        "endorsed": {
          "type": "boolean",
          "format": "boolean",
          "description": "If set, the authorization page will show endorsement.\nThis field can only be modified by admins."
        },
        "grants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3GrantType"
          },
          "description": "OAuth flows that can be used for the client to get a token.\nAfter a client is created, this field can only be modified by admins."
        },
        "rights": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3Right"
          },
          "description": "Rights denotes what rights the client will have access to.\nUsers that previously authorized this client will have to re-authorize the\nclient after rights are added to this list."
        }
      },
      "description": "An OAuth client on the network."
    },
    "v3ClientIdentifiers": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string"
        }
      }
    },
    "v3Clients": {
      "type": "object",
      "properties": {
        "clients": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3Client"
          }
        }
      }
    },
    "v3Collaborator": {
      "type": "object",
      "properties": {
        "ids": {
          "$ref": "#/definitions/v3OrganizationOrUserIdentifiers"
        },
        "rights": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3Right"
          }
        }
      }
    },
    "v3Collaborators": {
      "type": "object",
      "properties": {
        "collaborators": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3Collaborator"
          }
        }
      }
    },
    "v3ConcentratorConfig": {
      "type": "object",
      "properties": {
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3ConcentratorConfigChannel"
          }
        },
        "lora_standard_channel": {
          "$ref": "#/definitions/ConcentratorConfigLoRaStandardChannel"
        },
        "fsk_channel": {
          "$ref": "#/definitions/ConcentratorConfigFSKChannel"
        },
        "lbt": {
          "$ref": "#/definitions/ConcentratorConfigLBTConfiguration"
        },
        "ping_slot": {
          "$ref": "#/definitions/v3ConcentratorConfigChannel"
        },
        "radios": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3GatewayRadio"
          }
        },
        "clock_source": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "v3ConcentratorConfigChannel": {
      "type": "object",
      "properties": {
        "frequency": {
          "type": "string",
          "format": "uint64",
          "description": "Frequency (Hz)."
        },
        "radio": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "v3ContactInfo": {
      "type": "object",
      "properties": {
        "contact_type": {
          "$ref": "#/definitions/v3ContactType"
        },
        "contact_method": {
          "$ref": "#/definitions/v3ContactMethod"
        },
        "value": {
          "type": "string"
        },
        "public": {
          "type": "boolean",
          "format": "boolean"
        },
        "validated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v3ContactInfoValidation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "entity": {
          "$ref": "#/definitions/v3EntityIdentifiers"
        },
        "contact_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3ContactInfo"
          }
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "expires_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v3ContactMethod": {
      "type": "string",
      "enum": [
        "CONTACT_METHOD_OTHER",
        "CONTACT_METHOD_EMAIL",
        "CONTACT_METHOD_PHONE"
      ],
      "default": "CONTACT_METHOD_OTHER"
    },
    "v3ContactType": {
      "type": "string",
      "enum": [
        "CONTACT_TYPE_OTHER",
        "CONTACT_TYPE_ABUSE",
        "CONTACT_TYPE_BILLING",
        "CONTACT_TYPE_TECHNICAL"
      ],
      "default": "CONTACT_TYPE_OTHER"
    },
    "v3CreateApplicationAPIKeyRequest": {
      "type": "object",
      "properties": {
        "application_ids": {
          "$ref": "#/definitions/v3ApplicationIdentifiers"
        },
        "name": {
          "type": "string"
        },
        "rights": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3Right"
          }
        }
      }
    },
    "v3CreateApplicationRequest": {
      "type": "object",
      "properties": {
        "application": {
          "$ref": "#/definitions/v3Application"
        },
        "collaborator": {
          "$ref": "#/definitions/v3OrganizationOrUserIdentifiers",
          "description": "Collaborator to grant all rights on the newly created application."
        }
      }
    },
    "v3CreateClientRequest": {
      "type": "object",
      "properties": {
        "client": {
          "$ref": "#/definitions/v3Client"
        },
        "collaborator": {
          "$ref": "#/definitions/v3OrganizationOrUserIdentifiers",
          "description": "Collaborator to grant all rights on the newly created client."
        }
      }
    },
    "v3CreateEndDeviceRequest": {
      "type": "object",
      "properties": {
        "end_device": {
          "$ref": "#/definitions/v3EndDevice"
        }
      }
    },
    "v3CreateGatewayAPIKeyRequest": {
      "type": "object",
      "properties": {
        "gateway_ids": {
          "$ref": "#/definitions/v3GatewayIdentifiers"
        },
        "name": {
          "type": "string"
        },
        "rights": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3Right"
          }
        }
      }
    },
    "v3CreateGatewayRequest": {
      "type": "object",
      "properties": {
        "gateway": {
          "$ref": "#/definitions/v3Gateway"
        },
        "collaborator": {
          "$ref": "#/definitions/v3OrganizationOrUserIdentifiers",
          "description": "Collaborator to grant all rights on the newly created gateway."
        }
      }
    },
    "v3CreateOrganizationAPIKeyRequest": {
      "type": "object",
      "properties": {
        "organization_ids": {
          "$ref": "#/definitions/v3OrganizationIdentifiers"
        },
        "name": {
          "type": "string"
        },
        "rights": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3Right"
          }
        }
      }
    },
    "v3CreateOrganizationRequest": {
      "type": "object",
      "properties": {
        "organization": {
          "$ref": "#/definitions/v3Organization"
        },
        "collaborator": {
          "$ref": "#/definitions/v3OrganizationOrUserIdentifiers",
          "description": "Collaborator to grant all rights on the newly created application.\nNOTE: It is currently not possible to have organizations collaborating on\nother organizations."
        }
      }
    },
    "v3CreateUserAPIKeyRequest": {
      "type": "object",
      "properties": {
        "user_ids": {
          "$ref": "#/definitions/v3UserIdentifiers"
        },
        "name": {
          "type": "string"
        },
        "rights": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3Right"
          }
        }
      }
    },
    "v3CreateUserRequest": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v3User"
        },
        "invitation_token": {
          "type": "string"
        }
      }
    },
    "v3CryptoServicePayloadRequest": {
      "type": "object",
      "properties": {
        "ids": {
          "$ref": "#/definitions/v3EndDeviceIdentifiers"
        },
        "lorawan_version": {
          "$ref": "#/definitions/v3MACVersion"
        },
        "payload": {
          "type": "string",
          "format": "byte"
        },
        "provisioner_id": {
          "type": "string"
        },
        "provisioning_data": {
          "$ref": "#/definitions/protobufStruct"
        }
      }
    },
    "v3CryptoServicePayloadResponse": {
      "type": "object",
      "properties": {
        "payload": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "v3DLSettings": {
      "type": "object",
      "properties": {
        "rx1_dr_offset": {
          "type": "integer",
          "format": "int64"
        },
        "rx2_dr": {
          "$ref": "#/definitions/v3DataRateIndex"
        },
        "opt_neg": {
          "type": "boolean",
          "format": "boolean",
          "description": "OptNeg is set if Network Server implements LoRaWAN 1.1 or greater."
        }
      }
    },
    "v3DataRate": {
      "type": "object",
      "properties": {
        "lora": {
          "$ref": "#/definitions/v3LoRaDataRate"
        },
        "fsk": {
          "$ref": "#/definitions/v3FSKDataRate"
        }
      }
    },
    "v3DataRateIndex": {
      "type": "string",
      "enum": [
        "DATA_RATE_0",
        "DATA_RATE_1",
        "DATA_RATE_2",
        "DATA_RATE_3",
        "DATA_RATE_4",
        "DATA_RATE_5",
        "DATA_RATE_6",
        "DATA_RATE_7",
        "DATA_RATE_8",
        "DATA_RATE_9",
        "DATA_RATE_10",
        "DATA_RATE_11",
        "DATA_RATE_12",
        "DATA_RATE_13",
        "DATA_RATE_14",
        "DATA_RATE_15"
      ],
      "default": "DATA_RATE_0"
    },
    "v3DeviceEIRP": {
      "type": "string",
      "enum": [
        "DEVICE_EIRP_8",
        "DEVICE_EIRP_10",
        "DEVICE_EIRP_12",
        "DEVICE_EIRP_13",
        "DEVICE_EIRP_14",
        "DEVICE_EIRP_16",
        "DEVICE_EIRP_18",
        "DEVICE_EIRP_20",
        "DEVICE_EIRP_21",
        "DEVICE_EIRP_24",
        "DEVICE_EIRP_26",
        "DEVICE_EIRP_27",
        "DEVICE_EIRP_29",
        "DEVICE_EIRP_30",
        "DEVICE_EIRP_33",
        "DEVICE_EIRP_36"
      ],
      "default": "DEVICE_EIRP_8"
    },
    "v3DownlinkMessage": {
      "type": "object",
      "properties": {
        "raw_payload": {
          "type": "string",
          "format": "byte"
        },
        "payload": {
          "$ref": "#/definitions/lorawanv3Message"
        },
        "end_device_ids": {
          "$ref": "#/definitions/v3EndDeviceIdentifiers"
        },
        "request": {
          "$ref": "#/definitions/v3TxRequest"
        },
        "scheduled": {
          "$ref": "#/definitions/v3TxSettings"
        },
        "correlation_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "Downlink message from the network to the end device"
    },
    "v3DownlinkPath": {
      "type": "object",
      "properties": {
        "uplink_token": {
          "type": "string",
          "format": "byte"
        },
        "fixed": {
          "$ref": "#/definitions/v3GatewayAntennaIdentifiers"
        }
      }
    },
    "v3DownlinkPathConstraint": {
      "type": "string",
      "enum": [
        "DOWNLINK_PATH_CONSTRAINT_NONE",
        "DOWNLINK_PATH_CONSTRAINT_PREFER_OTHER",
        "DOWNLINK_PATH_CONSTRAINT_NEVER"
      ],
      "default": "DOWNLINK_PATH_CONSTRAINT_NONE",
      "description": " - DOWNLINK_PATH_CONSTRAINT_NONE: Indicates that the gateway can be selected for downlink without constraints by the Network Server.\n - DOWNLINK_PATH_CONSTRAINT_PREFER_OTHER: Indicates that the gateway can be selected for downlink only if no other or better gateway can be selected.\n - DOWNLINK_PATH_CONSTRAINT_NEVER: Indicates that this gateway will never be selected for downlink, even if that results in no available downlink path."
    },
    "v3DownlinkQueueRequest": {
      "type": "object",
      "properties": {
        "end_device_ids": {
          "$ref": "#/definitions/v3EndDeviceIdentifiers"
        },
        "downlinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3ApplicationDownlink"
          }
        }
      }
    },
    "v3EndDevice": {
      "type": "object",
      "properties": {
        "ids": {
          "$ref": "#/definitions/v3EndDeviceIdentifiers"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string",
          "description": "Friendly name of the device. Stored in Entity Registry."
        },
        "description": {
          "type": "string",
          "description": "Description of the device. Stored in Entity Registry."
        },
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Attributes of the device. Stored in Entity Registry."
        },
        "version_ids": {
          "$ref": "#/definitions/v3EndDeviceVersionIdentifiers",
          "description": "Version Identifiers. Stored in Entity Registry, Network Server and Application Server."
        },
        "service_profile_id": {
          "type": "string",
          "description": "Default service profile. Stored in Entity Registry."
        },
        "network_server_address": {
          "type": "string",
          "description": "The address of the Network Server where this device is supposed to be registered.\nStored in Entity Registry and Join Server.\nThe typical format of the address is \"host:port\". If the port is omitted,\nthe normal port inference (with DNS lookup, otherwise defaults) is used.\nThe connection shall be established with transport layer security (TLS).\nCustom certificate authorities may be configured out-of-band."
        },
        "application_server_address": {
          "type": "string",
          "description": "The address of the Application Server where this device is supposed to be registered.\nStored in Entity Registry and Join Server.\nThe typical format of the address is \"host:port\". If the port is omitted,\nthe normal port inference (with DNS lookup, otherwise defaults) is used.\nThe connection shall be established with transport layer security (TLS).\nCustom certificate authorities may be configured out-of-band."
        },
        "join_server_address": {
          "type": "string",
          "description": "The address of the Join Server where this device is supposed to be registered.\nStored in Entity Registry.\nThe typical format of the address is \"host:port\". If the port is omitted,\nthe normal port inference (with DNS lookup, otherwise defaults) is used.\nThe connection shall be established with transport layer security (TLS).\nCustom certificate authorities may be configured out-of-band."
        },
        "locations": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/lorawanv3Location"
          },
          "description": "Location of the device. Stored in Entity Registry."
        },
        "supports_class_b": {
          "type": "boolean",
          "format": "boolean",
          "description": "Whether the device supports class B.\nCopied on creation from template identified by version_ids, if any or from the home Network Server device profile, if any."
        },
        "supports_class_c": {
          "type": "boolean",
          "format": "boolean",
          "description": "Whether the device supports class C.\nCopied on creation from template identified by version_ids, if any or from the home Network Server device profile, if any."
        },
        "lorawan_version": {
          "$ref": "#/definitions/v3MACVersion",
          "description": "LoRaWAN MAC version. Stored in Network Server.\nCopied on creation from template identified by version_ids, if any or from the home Network Server device profile, if any."
        },
        "lorawan_phy_version": {
          "$ref": "#/definitions/v3PHYVersion",
          "description": "LoRaWAN PHY version. Stored in Network Server.\nCopied on creation from template identified by version_ids, if any or from the home Network Server device profile, if any."
        },
        "frequency_plan_id": {
          "type": "string",
          "description": "ID of the frequency plan used by this device.\nCopied on creation from template identified by version_ids, if any or from the home Network Server device profile, if any."
        },
        "min_frequency": {
          "type": "string",
          "format": "uint64",
          "description": "Minimum frequency the device is capable of using (Hz). Stored in Network Server.\nCopied on creation from template identified by version_ids, if any or from the home Network Server device profile, if any."
        },
        "max_frequency": {
          "type": "string",
          "format": "uint64",
          "description": "Maximum frequency the device is capable of using (Hz). Stored in Network Server.\nCopied on creation from template identified by version_ids, if any or from the home Network Server device profile, if any."
        },
        "supports_join": {
          "type": "boolean",
          "format": "boolean",
          "description": "The device supports join (it's OTAA).\nCopied on creation from template identified by version_ids, if any or from the home Network Server device profile, if any."
        },
        "resets_join_nonces": {
          "type": "boolean",
          "format": "boolean",
          "description": "Whether the device resets the join and dev nonces (not LoRaWAN 1.1 compliant). Stored in Join Server.\nCopied on creation from template identified by version_ids, if any or from the home Network Server device profile, if any."
        },
        "root_keys": {
          "$ref": "#/definitions/v3RootKeys",
          "description": "Device root keys. Stored in Join Server."
        },
        "net_id": {
          "type": "string",
          "format": "byte",
          "description": "Home NetID. Stored in Join Server."
        },
        "mac_settings": {
          "$ref": "#/definitions/v3MACSettings",
          "description": "Settings for how the Network Server handles MAC layer for this device. Stored in Network Server."
        },
        "mac_state": {
          "$ref": "#/definitions/v3MACState",
          "description": "MAC state of the device. Stored in Network Server."
        },
        "session": {
          "$ref": "#/definitions/v3Session",
          "description": "Current session of the device. Stored in Network Server and Application Server."
        },
        "pending_session": {
          "$ref": "#/definitions/v3Session",
          "description": "Pending session. Stored in Network Server and Application Server until RekeyInd is received."
        },
        "last_dev_nonce": {
          "type": "integer",
          "format": "int64",
          "description": "Last DevNonce used.\nThis field is only used for devices using LoRaWAN version 1.1 and later.\nStored in Join Server."
        },
        "used_dev_nonces": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          },
          "description": "Used DevNonces sorted in ascending order.\nThis field is only used for devices using LoRaWAN versions preceding 1.1.\nStored in Join Server."
        },
        "last_join_nonce": {
          "type": "integer",
          "format": "int64",
          "description": "Last JoinNonce/AppNonce(for devices using LoRaWAN versions preceding 1.1) used.\nStored in Join Server."
        },
        "last_rj_count_0": {
          "type": "integer",
          "format": "int64",
          "description": "Last Rejoin counter value used (type 0/2).\nStored in Join Server."
        },
        "last_rj_count_1": {
          "type": "integer",
          "format": "int64",
          "description": "Last Rejoin counter value used (type 1).\nStored in Join Server."
        },
        "last_dev_status_received_at": {
          "type": "string",
          "format": "date-time",
          "description": "Time when last DevStatus MAC command was received.\nStored in Network Server."
        },
        "power_state": {
          "$ref": "#/definitions/v3PowerState",
          "description": "The power state of the device; whether it is battery-powered or connected to an external power source.\nReceived via the DevStatus MAC command at status_received_at.\nStored in Network Server."
        },
        "battery_percentage": {
          "type": "number",
          "format": "float",
          "description": "Latest-known battery percentage of the device.\nReceived via the DevStatus MAC command at last_dev_status_received_at or earlier.\nStored in Network Server."
        },
        "downlink_margin": {
          "type": "integer",
          "format": "int32",
          "description": "Demodulation signal-to-noise ratio (dB).\nReceived via the DevStatus MAC command at last_dev_status_received_at.\nStored in Network Server."
        },
        "recent_adr_uplinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3UplinkMessage"
          },
          "title": "Recent uplink messages with ADR bit set to 1 sorted by time. Stored in Network Server.\nThe field is reset each time an uplink message carrying MACPayload is received with ADR bit set to 0.\nThe number of messages stored is in the range [0,20];"
        },
        "recent_uplinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3UplinkMessage"
          },
          "description": "Recent uplink messages sorted by time. Stored in Network Server.\nThe number of messages stored may depend on configuration."
        },
        "recent_downlinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3DownlinkMessage"
          },
          "description": "Recent downlink messages sorted by time. Stored in Network Server.\nThe number of messages stored may depend on configuration."
        },
        "queued_application_downlinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3ApplicationDownlink"
          },
          "description": "Queued Application downlink messages. Stored in Application Server,\nwhich sets them on the Network Server."
        },
        "formatters": {
          "$ref": "#/definitions/v3MessagePayloadFormatters",
          "description": "The payload formatters for this end device. Stored in Application Server.\nCopied on creation from template identified by version_ids."
        },
        "provisioner_id": {
          "type": "string",
          "description": "ID of the provisioner. Stored in Join Server."
        },
        "provisioning_data": {
          "$ref": "#/definitions/protobufStruct",
          "description": "Vendor-specific provisioning data. Stored in Join Server."
        }
      },
      "description": "Defines an End Device registration and its state on the network.\nThe persistence of the EndDevice is divided between the Network Server, Application Server and Join Server.\nSDKs are responsible for combining (if desired) the three."
    },
    "v3EndDeviceIdentifiers": {
      "type": "object",
      "properties": {
        "device_id": {
          "type": "string"
        },
        "application_ids": {
          "$ref": "#/definitions/v3ApplicationIdentifiers"
        },
        "dev_eui": {
          "type": "string",
          "format": "byte",
          "description": "The LoRaWAN DevEUI."
        },
        "join_eui": {
          "type": "string",
          "format": "byte",
          "description": "The LoRaWAN JoinEUI (or AppEUI for LoRaWAN 1.0 end devices)."
        },
        "dev_addr": {
          "type": "string",
          "format": "byte",
          "description": "The LoRaWAN DevAddr."
        }
      }
    },
    "v3EndDeviceVersionIdentifiers": {
      "type": "object",
      "properties": {
        "brand_id": {
          "type": "string"
        },
        "model_id": {
          "type": "string"
        },
        "hardware_version": {
          "type": "string"
        },
        "firmware_version": {
          "type": "string"
        }
      },
      "description": "Identifies an end device model with version information."
    },
    "v3EndDevices": {
      "type": "object",
      "properties": {
        "end_devices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3EndDevice"
          }
        }
      }
    },
    "v3EntityIdentifiers": {
      "type": "object",
      "properties": {
        "application_ids": {
          "$ref": "#/definitions/v3ApplicationIdentifiers"
        },
        "client_ids": {
          "$ref": "#/definitions/v3ClientIdentifiers"
        },
        "device_ids": {
          "$ref": "#/definitions/v3EndDeviceIdentifiers"
        },
        "gateway_ids": {
          "$ref": "#/definitions/v3GatewayIdentifiers"
        },
        "organization_ids": {
          "$ref": "#/definitions/v3OrganizationIdentifiers"
        },
        "user_ids": {
          "$ref": "#/definitions/v3UserIdentifiers"
        }
      },
      "description": "EntityIdentifiers contains one of the possible entity identifiers."
    },
    "v3ErrorDetails": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string",
          "description": "Namespace of the error (typically the package name in the stack)."
        },
        "name": {
          "type": "string",
          "description": "Name of the error."
        },
        "message_format": {
          "type": "string",
          "description": "The default (fallback) message format that should be used for the error.\nThis is also used if the client does not have a translation for the error."
        },
        "attributes": {
          "$ref": "#/definitions/protobufStruct",
          "description": "Attributes that should be filled into the message format. Any extra attributes\ncan be displayed as error details."
        },
        "correlation_id": {
          "type": "string",
          "description": "The correlation ID of the error can be used to correlate the error to stack\ntraces the network may (or may not) store about recent errors."
        },
        "cause": {
          "$ref": "#/definitions/v3ErrorDetails",
          "description": "The error that caused this error."
        }
      },
      "description": "Error details that are communicated over gRPC (and HTTP) APIs.\nThe messages (for translation) are stored as \"error:\u003cnamespace\u003e:\u003cname\u003e\"."
    },
    "v3Event": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "time": {
          "type": "string",
          "format": "date-time"
        },
        "identifiers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3EntityIdentifiers"
          }
        },
        "data": {
          "$ref": "#/definitions/protobufAny"
        },
        "correlation_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "origin": {
          "type": "string"
        },
        "context": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          }
        }
      }
    },
    "v3FCtrl": {
      "type": "object",
      "properties": {
        "adr": {
          "type": "boolean",
          "format": "boolean"
        },
        "adr_ack_req": {
          "type": "boolean",
          "format": "boolean"
        },
        "ack": {
          "type": "boolean",
          "format": "boolean"
        },
        "f_pending": {
          "type": "boolean",
          "format": "boolean"
        },
        "class_b": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "v3FHDR": {
      "type": "object",
      "properties": {
        "dev_addr": {
          "type": "string",
          "format": "byte"
        },
        "f_ctrl": {
          "$ref": "#/definitions/v3FCtrl"
        },
        "f_cnt": {
          "type": "integer",
          "format": "int64"
        },
        "f_opts": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "v3FSKDataRate": {
      "type": "object",
      "properties": {
        "bit_rate": {
          "type": "integer",
          "format": "int64",
          "description": "Bit rate (bps)."
        }
      }
    },
    "v3FrequencyPlanDescription": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "base_id": {
          "type": "string",
          "description": "The ID of the frequency that the current frequency plan is based on."
        },
        "name": {
          "type": "string"
        },
        "base_frequency": {
          "type": "integer",
          "format": "int64",
          "title": "Base frequency in MHz for hardware support (433, 470, 868 or 915)"
        }
      }
    },
    "v3Gateway": {
      "type": "object",
      "properties": {
        "ids": {
          "$ref": "#/definitions/v3GatewayIdentifiers"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "contact_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3ContactInfo"
          }
        },
        "version_ids": {
          "$ref": "#/definitions/v3GatewayVersionIdentifiers"
        },
        "gateway_server_address": {
          "type": "string",
          "description": "The address of the Gateway Server to connect to.\nThe typical format of the address is \"host:port\". If the port is omitted,\nthe normal port inference (with DNS lookup, otherwise defaults) is used.\nThe connection shall be established with transport layer security (TLS).\nCustom certificate authorities may be configured out-of-band."
        },
        "auto_update": {
          "type": "boolean",
          "format": "boolean"
        },
        "update_channel": {
          "type": "string"
        },
        "frequency_plan_id": {
          "type": "string"
        },
        "antennas": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3GatewayAntenna"
          }
        },
        "status_public": {
          "type": "boolean",
          "format": "boolean",
          "description": "The status of this gateway may be publicly displayed."
        },
        "location_public": {
          "type": "boolean",
          "format": "boolean",
          "description": "The location of this gateway may be publicly displayed."
        },
        "schedule_downlink_late": {
          "type": "boolean",
          "format": "boolean",
          "description": "Enable server-side buffering of downlink messages. This is recommended for gateways using the Semtech UDP Packet\nForwarder v2.x or older, as it does not feature a just-in-time queue. If enabled, the Gateway Server schedules the\ndownlink message late to the gateway so that it does not overwrite previously scheduled downlink messages that have\nnot been transmitted yet."
        },
        "enforce_duty_cycle": {
          "type": "boolean",
          "format": "boolean",
          "description": "Enforcing gateway duty cycle is recommended for all gateways to respect spectrum regulations. Disable enforcing the\nduty cycle only in controlled research and development environments."
        },
        "downlink_path_constraint": {
          "$ref": "#/definitions/v3DownlinkPathConstraint"
        }
      },
      "description": "Gateway is the message that defines a gateway on the network."
    },
    "v3GatewayAntenna": {
      "type": "object",
      "properties": {
        "gain": {
          "type": "number",
          "format": "float",
          "description": "gain is the antenna gain relative to this gateway, in dBi."
        },
        "location": {
          "$ref": "#/definitions/lorawanv3Location",
          "description": "location is the antenna's location."
        },
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "description": "GatewayAntenna is the message that defines a gateway antenna."
    },
    "v3GatewayAntennaIdentifiers": {
      "type": "object",
      "properties": {
        "gateway_ids": {
          "$ref": "#/definitions/v3GatewayIdentifiers"
        },
        "antenna_index": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "v3GatewayConnectionStats": {
      "type": "object",
      "properties": {
        "connected_at": {
          "type": "string",
          "format": "date-time"
        },
        "protocol": {
          "type": "string"
        },
        "last_status_received_at": {
          "type": "string",
          "format": "date-time"
        },
        "last_status": {
          "$ref": "#/definitions/v3GatewayStatus"
        },
        "last_uplink_received_at": {
          "type": "string",
          "format": "date-time"
        },
        "uplink_count": {
          "type": "string",
          "format": "uint64"
        },
        "last_downlink_received_at": {
          "type": "string",
          "format": "date-time"
        },
        "downlink_count": {
          "type": "string",
          "format": "uint64"
        }
      },
      "description": "Connection stats as monitored by the Gateway Server."
    },
    "v3GatewayDown": {
      "type": "object",
      "properties": {
        "downlink_message": {
          "$ref": "#/definitions/v3DownlinkMessage",
          "description": "DownlinkMessage for the gateway."
        }
      },
      "description": "GatewayDown contains downlink messages for the gateway."
    },
    "v3GatewayIdentifiers": {
      "type": "object",
      "properties": {
        "gateway_id": {
          "type": "string"
        },
        "eui": {
          "type": "string",
          "format": "byte",
          "description": "Secondary identifier, which can only be used in specific requests."
        }
      }
    },
    "v3GatewayRadio": {
      "type": "object",
      "properties": {
        "enable": {
          "type": "boolean",
          "format": "boolean"
        },
        "chip_type": {
          "type": "string"
        },
        "frequency": {
          "type": "string",
          "format": "uint64"
        },
        "rssi_offset": {
          "type": "number",
          "format": "float"
        },
        "tx_configuration": {
          "$ref": "#/definitions/GatewayRadioTxConfiguration"
        }
      }
    },
    "v3GatewayStatus": {
      "type": "object",
      "properties": {
        "time": {
          "type": "string",
          "format": "date-time",
          "title": "Current time of the gateway"
        },
        "boot_time": {
          "type": "string",
          "format": "date-time",
          "title": "Boot time of the gateway\n- can be left out to save bandwidth; old value will be kept"
        },
        "versions": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Versions of gateway subsystems\n- each field can be left out to save bandwidth; old value will be kept\n- map keys are written in snake_case\n- for example:\n    firmware: \"2.0.4\"\n    forwarder: \"v2-3.3.1\"\n    fpga: \"48\"\n    dsp: \"27\"\n    hal: \"v2-3.5.0\""
        },
        "antenna_locations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lorawanv3Location"
          },
          "title": "Location of each gateway's antenna\n- if left out, server uses registry-set location as fallback"
        },
        "ip": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "IP addresses of this gateway.\nRepeated addresses can be used to communicate addresses of multiple interfaces (LAN, Public IP, ...)."
        },
        "metrics": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "float"
          },
          "title": "Metrics\n- can be used for forwarding gateway metrics such as temperatures or performance metrics\n- map keys are written in snake_case"
        },
        "advanced": {
          "$ref": "#/definitions/protobufStruct",
          "title": "Advanced metadata fields\n- can be used for advanced information or experimental features that are not yet formally defined in the API\n- field names are written in snake_case"
        }
      }
    },
    "v3GatewayVersionIdentifiers": {
      "type": "object",
      "properties": {
        "brand_id": {
          "type": "string"
        },
        "model_id": {
          "type": "string"
        },
        "hardware_version": {
          "type": "string"
        },
        "firmware_version": {
          "type": "string"
        }
      },
      "description": "Identifies an end device model with version information."
    },
    "v3Gateways": {
      "type": "object",
      "properties": {
        "gateways": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3Gateway"
          }
        }
      }
    },
    "v3GrantType": {
      "type": "string",
      "enum": [
        "GRANT_AUTHORIZATION_CODE",
        "GRANT_PASSWORD",
        "GRANT_REFRESH_TOKEN"
      ],
      "default": "GRANT_AUTHORIZATION_CODE",
      "description": "The OAuth2 flows an OAuth client can use to get an access token.\n\n - GRANT_AUTHORIZATION_CODE: Grant type used to exchange an authorization code for an access token.\n - GRANT_PASSWORD: Grant type used to exchange a user ID and password for an access token.\n - GRANT_REFRESH_TOKEN: Grant type used to exchange a refresh token for an access token."
    },
    "v3Invitation": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "expires_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "accepted_at": {
          "type": "string",
          "format": "date-time"
        },
        "accepted_by": {
          "$ref": "#/definitions/v3UserIdentifiers"
        }
      }
    },
    "v3Invitations": {
      "type": "object",
      "properties": {
        "invitations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3Invitation"
          }
        }
      }
    },
    "v3JoinAcceptPayload": {
      "type": "object",
      "properties": {
        "encrypted": {
          "type": "string",
          "format": "byte"
        },
        "join_nonce": {
          "type": "string",
          "format": "byte"
        },
        "net_id": {
          "type": "string",
          "format": "byte"
        },
        "dev_addr": {
          "type": "string",
          "format": "byte"
        },
        "dl_settings": {
          "$ref": "#/definitions/v3DLSettings"
        },
        "rx_delay": {
          "$ref": "#/definitions/v3RxDelay"
        },
        "cf_list": {
          "$ref": "#/definitions/v3CFList"
        }
      }
    },
    "v3JoinRequest": {
      "type": "object",
      "properties": {
        "raw_payload": {
          "type": "string",
          "format": "byte"
        },
        "payload": {
          "$ref": "#/definitions/lorawanv3Message"
        },
        "dev_addr": {
          "type": "string",
          "format": "byte"
        },
        "selected_mac_version": {
          "$ref": "#/definitions/v3MACVersion"
        },
        "net_id": {
          "type": "string",
          "format": "byte"
        },
        "downlink_settings": {
          "$ref": "#/definitions/v3DLSettings"
        },
        "rx_delay": {
          "$ref": "#/definitions/v3RxDelay"
        },
        "cf_list": {
          "$ref": "#/definitions/v3CFList",
          "description": "Optional CFList."
        },
        "correlation_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v3JoinRequestPayload": {
      "type": "object",
      "properties": {
        "join_eui": {
          "type": "string",
          "format": "byte"
        },
        "dev_eui": {
          "type": "string",
          "format": "byte"
        },
        "dev_nonce": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "v3JoinResponse": {
      "type": "object",
      "properties": {
        "raw_payload": {
          "type": "string",
          "format": "byte"
        },
        "session_keys": {
          "$ref": "#/definitions/v3SessionKeys"
        },
        "lifetime": {
          "type": "string"
        },
        "correlation_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v3KeyEnvelope": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "format": "byte",
          "description": "The (encrypted) key."
        },
        "kek_label": {
          "type": "string",
          "description": "The label of the RFC 3394 key-encryption-key (KEK) that was used to encrypt the key."
        }
      }
    },
    "v3ListFrequencyPlansResponse": {
      "type": "object",
      "properties": {
        "frequency_plans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3FrequencyPlanDescription"
          }
        }
      }
    },
    "v3LoRaDataRate": {
      "type": "object",
      "properties": {
        "bandwidth": {
          "type": "integer",
          "format": "int64",
          "description": "Bandwidth (Hz)."
        },
        "spreading_factor": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "v3LocationSource": {
      "type": "string",
      "enum": [
        "SOURCE_UNKNOWN",
        "SOURCE_GPS",
        "SOURCE_REGISTRY",
        "SOURCE_IP_GEOLOCATION",
        "SOURCE_WIFI_RSSI_GEOLOCATION",
        "SOURCE_BT_RSSI_GEOLOCATION",
        "SOURCE_LORA_RSSI_GEOLOCATION",
        "SOURCE_LORA_TDOA_GEOLOCATION",
        "SOURCE_COMBINED_GEOLOCATION"
      ],
      "default": "SOURCE_UNKNOWN",
      "description": " - SOURCE_UNKNOWN: The source of the location is not known or not set.\n - SOURCE_GPS: The location is determined by GPS.\n - SOURCE_REGISTRY: The location is set in and updated from a registry.\n - SOURCE_IP_GEOLOCATION: The location is estimated with IP geolocation.\n - SOURCE_WIFI_RSSI_GEOLOCATION: The location is estimated with WiFi RSSI geolocation.\n - SOURCE_BT_RSSI_GEOLOCATION: The location is estimated with BT/BLE RSSI geolocation.\n - SOURCE_LORA_RSSI_GEOLOCATION: The location is estimated with LoRa RSSI geolocation.\n - SOURCE_LORA_TDOA_GEOLOCATION: The location is estimated with LoRa TDOA geolocation.\n - SOURCE_COMBINED_GEOLOCATION: The location is estimated by a combination of geolocation sources."
    },
    "v3MACCommand": {
      "type": "object",
      "properties": {
        "cid": {
          "$ref": "#/definitions/v3MACCommandIdentifier"
        },
        "raw_payload": {
          "type": "string",
          "format": "byte"
        },
        "reset_ind": {
          "$ref": "#/definitions/MACCommandResetInd"
        },
        "reset_conf": {
          "$ref": "#/definitions/MACCommandResetConf"
        },
        "link_check_ans": {
          "$ref": "#/definitions/MACCommandLinkCheckAns"
        },
        "link_adr_req": {
          "$ref": "#/definitions/MACCommandLinkADRReq"
        },
        "link_adr_ans": {
          "$ref": "#/definitions/MACCommandLinkADRAns"
        },
        "duty_cycle_req": {
          "$ref": "#/definitions/MACCommandDutyCycleReq"
        },
        "rx_param_setup_req": {
          "$ref": "#/definitions/MACCommandRxParamSetupReq"
        },
        "rx_param_setup_ans": {
          "$ref": "#/definitions/MACCommandRxParamSetupAns"
        },
        "dev_status_ans": {
          "$ref": "#/definitions/MACCommandDevStatusAns"
        },
        "new_channel_req": {
          "$ref": "#/definitions/MACCommandNewChannelReq"
        },
        "new_channel_ans": {
          "$ref": "#/definitions/MACCommandNewChannelAns"
        },
        "dl_channel_req": {
          "$ref": "#/definitions/MACCommandDLChannelReq"
        },
        "dl_channel_ans": {
          "$ref": "#/definitions/MACCommandDLChannelAns"
        },
        "rx_timing_setup_req": {
          "$ref": "#/definitions/MACCommandRxTimingSetupReq"
        },
        "tx_param_setup_req": {
          "$ref": "#/definitions/MACCommandTxParamSetupReq"
        },
        "rekey_ind": {
          "$ref": "#/definitions/MACCommandRekeyInd"
        },
        "rekey_conf": {
          "$ref": "#/definitions/MACCommandRekeyConf"
        },
        "adr_param_setup_req": {
          "$ref": "#/definitions/MACCommandADRParamSetupReq"
        },
        "device_time_ans": {
          "$ref": "#/definitions/MACCommandDeviceTimeAns"
        },
        "force_rejoin_req": {
          "$ref": "#/definitions/MACCommandForceRejoinReq"
        },
        "rejoin_param_setup_req": {
          "$ref": "#/definitions/MACCommandRejoinParamSetupReq"
        },
        "rejoin_param_setup_ans": {
          "$ref": "#/definitions/MACCommandRejoinParamSetupAns"
        },
        "ping_slot_info_req": {
          "$ref": "#/definitions/MACCommandPingSlotInfoReq"
        },
        "ping_slot_channel_req": {
          "$ref": "#/definitions/MACCommandPingSlotChannelReq"
        },
        "ping_slot_channel_ans": {
          "$ref": "#/definitions/MACCommandPingSlotChannelAns"
        },
        "beacon_timing_ans": {
          "$ref": "#/definitions/MACCommandBeaconTimingAns"
        },
        "beacon_freq_req": {
          "$ref": "#/definitions/MACCommandBeaconFreqReq"
        },
        "beacon_freq_ans": {
          "$ref": "#/definitions/MACCommandBeaconFreqAns"
        },
        "device_mode_ind": {
          "$ref": "#/definitions/MACCommandDeviceModeInd"
        },
        "device_mode_conf": {
          "$ref": "#/definitions/MACCommandDeviceModeConf"
        }
      }
    },
    "v3MACCommandIdentifier": {
      "type": "string",
      "enum": [
        "CID_RFU_0",
        "CID_RESET",
        "CID_LINK_CHECK",
        "CID_LINK_ADR",
        "CID_DUTY_CYCLE",
        "CID_RX_PARAM_SETUP",
        "CID_DEV_STATUS",
        "CID_NEW_CHANNEL",
        "CID_RX_TIMING_SETUP",
        "CID_TX_PARAM_SETUP",
        "CID_DL_CHANNEL",
        "CID_REKEY",
        "CID_ADR_PARAM_SETUP",
        "CID_DEVICE_TIME",
        "CID_FORCE_REJOIN",
        "CID_REJOIN_PARAM_SETUP",
        "CID_PING_SLOT_INFO",
        "CID_PING_SLOT_CHANNEL",
        "CID_BEACON_TIMING",
        "CID_BEACON_FREQ",
        "CID_DEVICE_MODE"
      ],
      "default": "CID_RFU_0"
    },
    "v3MACParameters": {
      "type": "object",
      "properties": {
        "max_eirp": {
          "type": "number",
          "format": "float",
          "description": "Maximum EIRP (dBm)."
        },
        "uplink_dwell_time": {
          "type": "boolean",
          "format": "boolean",
          "description": "Uplink dwell time is set (400ms)."
        },
        "downlink_dwell_time": {
          "type": "boolean",
          "format": "boolean",
          "description": "Downlink dwell time is set (400ms)."
        },
        "adr_data_rate_index": {
          "$ref": "#/definitions/v3DataRateIndex",
          "description": "ADR: data rate index to use."
        },
        "adr_tx_power_index": {
          "type": "integer",
          "format": "int64",
          "description": "ADR: transmission power index to use."
        },
        "adr_nb_trans": {
          "type": "integer",
          "format": "int64",
          "description": "ADR: number of retransmissions."
        },
        "adr_ack_limit": {
          "type": "integer",
          "format": "int64",
          "description": "ADR: number of messages to wait before setting ADRAckReq."
        },
        "adr_ack_delay": {
          "type": "integer",
          "format": "int64",
          "description": "ADR: number of messages to wait after setting ADRAckReq and before changing TxPower or DataRate."
        },
        "rx1_delay": {
          "$ref": "#/definitions/v3RxDelay",
          "description": "Rx1 delay (Rx2 delay is Rx1 delay + 1 second)."
        },
        "rx1_data_rate_offset": {
          "type": "integer",
          "format": "int64",
          "description": "Data rate offset for Rx1."
        },
        "rx2_data_rate_index": {
          "$ref": "#/definitions/v3DataRateIndex",
          "description": "Data rate index for Rx2."
        },
        "rx2_frequency": {
          "type": "string",
          "format": "uint64",
          "description": "Frequency for Rx2 (Hz)."
        },
        "max_duty_cycle": {
          "$ref": "#/definitions/v3AggregatedDutyCycle",
          "description": "Maximum uplink duty cycle (of all channels)."
        },
        "rejoin_time_periodicity": {
          "$ref": "#/definitions/v3RejoinTimeExponent",
          "description": "Time within which a rejoin-request must be sent."
        },
        "rejoin_count_periodicity": {
          "$ref": "#/definitions/v3RejoinCountExponent",
          "description": "Message count within which a rejoin-request must be sent."
        },
        "ping_slot_frequency": {
          "type": "string",
          "format": "uint64",
          "description": "Frequency of the class B ping slot (Hz)."
        },
        "ping_slot_data_rate_index": {
          "$ref": "#/definitions/v3DataRateIndex",
          "description": "Data rate index of the class B ping slot."
        },
        "beacon_frequency": {
          "type": "string",
          "format": "uint64",
          "description": "Frequency of the class B beacon (Hz)."
        },
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3MACParametersChannel"
          },
          "description": "Configured uplink channels and optionally Rx1 frequency."
        }
      },
      "description": "MACParameters represent the parameters of the device's MAC layer (active or desired).\nThis is used internally by the Network Server and is read only."
    },
    "v3MACParametersChannel": {
      "type": "object",
      "properties": {
        "uplink_frequency": {
          "type": "string",
          "format": "uint64",
          "description": "Uplink frequency of the channel (Hz)."
        },
        "downlink_frequency": {
          "type": "string",
          "format": "uint64",
          "description": "Downlink frequency of the channel (Hz)."
        },
        "min_data_rate_index": {
          "$ref": "#/definitions/v3DataRateIndex",
          "description": "Index of the minimum data rate for uplink."
        },
        "max_data_rate_index": {
          "$ref": "#/definitions/v3DataRateIndex",
          "description": "Index of the maximum data rate for uplink."
        },
        "enable_uplink": {
          "type": "boolean",
          "format": "boolean",
          "description": "Channel can be used by device for uplink."
        }
      }
    },
    "v3MACPayload": {
      "type": "object",
      "properties": {
        "f_hdr": {
          "$ref": "#/definitions/v3FHDR"
        },
        "f_port": {
          "type": "integer",
          "format": "int64"
        },
        "frm_payload": {
          "type": "string",
          "format": "byte"
        },
        "decoded_payload": {
          "$ref": "#/definitions/protobufStruct"
        }
      }
    },
    "v3MACSettings": {
      "type": "object",
      "properties": {
        "class_b_timeout": {
          "type": "string",
          "description": "Maximum delay for the device to answer a MAC request or a confirmed downlink frame.\nIf unset, the default value from Network Server configuration will be used."
        },
        "ping_slot_periodicity": {
          "$ref": "#/definitions/MACSettingsPingSlotPeriodValue",
          "description": "Periodicity of the class B ping slot.\nIf unset, the default value from Network Server configuration will be used."
        },
        "ping_slot_data_rate_index": {
          "$ref": "#/definitions/MACSettingsDataRateIndexValue",
          "description": "Data rate index of the class B ping slot.\nIf unset, the default value from Network Server configuration will be used."
        },
        "ping_slot_frequency": {
          "type": "string",
          "format": "uint64",
          "description": "Frequency of the class B ping slot (Hz).\nIf unset, the default value from Network Server configuration will be used."
        },
        "class_c_timeout": {
          "type": "string",
          "description": "Maximum delay for the device to answer a MAC request or a confirmed downlink frame.\nIf unset, the default value from Network Server configuration will be used."
        },
        "rx1_delay": {
          "$ref": "#/definitions/MACSettingsRxDelayValue",
          "description": "Class A Rx1 delay.\nIf unset, the default value from Network Server configuration or regional parameters specification will be used."
        },
        "rx1_data_rate_offset": {
          "type": "integer",
          "format": "int64",
          "description": "Rx1 data rate offset.\nIf unset, the default value from Network Server configuration will be used."
        },
        "rx2_data_rate_index": {
          "$ref": "#/definitions/MACSettingsDataRateIndexValue",
          "description": "Data rate index for Rx2.\nIf unset, the default value from Network Server configuration or regional parameters specification will be used."
        },
        "rx2_frequency": {
          "type": "string",
          "format": "uint64",
          "description": "Frequency for Rx2 (Hz).\nIf unset, the default value from Network Server configuration or regional parameters specification will be used."
        },
        "factory_preset_frequencies": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uint64"
          },
          "description": "List of factory-preset frequencies.\nIf unset, the default value from Network Server configuration or regional parameters specification will be used."
        },
        "max_duty_cycle": {
          "$ref": "#/definitions/MACSettingsAggregatedDutyCycleValue",
          "description": "Maximum uplink duty cycle (of all channels)."
        },
        "supports_32_bit_f_cnt": {
          "type": "boolean",
          "format": "boolean",
          "description": "Whether the device supports 32-bit frame counters.\nIf unset, the default value from Network Server configuration will be used."
        },
        "use_adr": {
          "type": "boolean",
          "format": "boolean",
          "description": "Whether the Network Server should use ADR for the device.\nIf unset, the default value from Network Server configuration will be used."
        },
        "adr_margin": {
          "type": "number",
          "format": "float",
          "description": "The ADR margin tells the network server how much margin it should add in ADR requests.\nA bigger margin is less efficient, but gives a better chance of successful reception.\nIf unset, the default value from Network Server configuration will be used."
        },
        "resets_f_cnt": {
          "type": "boolean",
          "format": "boolean",
          "description": "Whether the device resets the frame counters (not LoRaWAN compliant).\nIf unset, the default value from Network Server configuration will be used."
        },
        "status_time_periodicity": {
          "type": "string",
          "description": "The interval after which a DevStatusReq MACCommand shall be sent.\nIf unset, the default value from Network Server configuration will be used."
        },
        "status_count_periodicity": {
          "type": "integer",
          "format": "int64",
          "description": "Number of uplink messages after which a DevStatusReq MACCommand shall be sent.\nIf unset, the default value from Network Server configuration will be used."
        },
        "desired_rx1_delay": {
          "$ref": "#/definitions/MACSettingsRxDelayValue",
          "description": "The Rx1 delay Network Server should configure device to use via MAC commands or Join-Accept.\nIf unset, the default value from Network Server configuration or regional parameters specification will be used."
        },
        "desired_rx1_data_rate_offset": {
          "type": "integer",
          "format": "int64",
          "description": "The Rx1 data rate offset Network Server should configure device to use via MAC commands or Join-Accept.\nIf unset, the default value from Network Server configuration will be used."
        },
        "desired_rx2_data_rate_index": {
          "$ref": "#/definitions/MACSettingsDataRateIndexValue",
          "description": "The Rx2 data rate index Network Server should configure device to use via MAC commands or Join-Accept.\nIf unset, the default value from frequency plan, Network Server configuration or regional parameters specification will be used."
        },
        "desired_rx2_frequency": {
          "type": "string",
          "format": "uint64",
          "description": "The Rx2 frequency index Network Server should configure device to use via MAC commands.\nIf unset, the default value from frequency plan, Network Server configuration or regional parameters specification will be used."
        }
      }
    },
    "v3MACState": {
      "type": "object",
      "properties": {
        "current_parameters": {
          "$ref": "#/definitions/v3MACParameters",
          "description": "Current LoRaWAN MAC parameters."
        },
        "desired_parameters": {
          "$ref": "#/definitions/v3MACParameters",
          "description": "Desired LoRaWAN MAC parameters."
        },
        "device_class": {
          "$ref": "#/definitions/v3Class",
          "title": "Currently active LoRaWAN device class\n- Device class is A by default\n- If device sets ClassB bit in uplink, this will be set to B\n- If device sent DeviceModeInd MAC message, this will be set to that value"
        },
        "lorawan_version": {
          "$ref": "#/definitions/v3MACVersion",
          "description": "LoRaWAN MAC version."
        },
        "last_confirmed_downlink_at": {
          "type": "string",
          "format": "date-time",
          "description": "Time when the last confirmed downlink message or MAC command was scheduled."
        },
        "last_dev_status_f_cnt_up": {
          "type": "integer",
          "format": "int64",
          "description": "Frame counter value of last uplink containing DevStatusAns."
        },
        "ping_slot_periodicity": {
          "$ref": "#/definitions/v3PingSlotPeriod",
          "description": "Periodicity of the class B ping slot."
        },
        "pending_application_downlink": {
          "$ref": "#/definitions/v3ApplicationDownlink",
          "description": "A confirmed application downlink, for which an acknowledgment is expected to arrive."
        },
        "queued_responses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3MACCommand"
          },
          "description": "Queued MAC responses.\nRegenerated on each uplink."
        },
        "pending_requests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3MACCommand"
          },
          "description": "Pending MAC requests(i.e. sent requests, for which no response has been received yet).\nRegenerated on each downlink."
        },
        "queued_join_accept": {
          "$ref": "#/definitions/MACStateJoinAccept",
          "description": "Queued join-accept.\nSet each time a (re-)join request accept is received from Join Server and removed each time a downlink is scheduled."
        },
        "pending_join_request": {
          "$ref": "#/definitions/v3JoinRequest",
          "description": "Pending join request.\nSet each time a join accept is scheduled and removed each time an uplink is received from the device."
        },
        "rx_windows_available": {
          "type": "boolean",
          "format": "boolean",
          "description": "Whether or not Rx windows are expected to be open.\nSet to true every time an uplink is received.\nSet to false every time a successful downlink scheduling attempt is made."
        }
      },
      "description": "MACState represents the state of MAC layer of the device.\nMACState is reset on each join for OTAA or ResetInd for ABP devices.\nThis is used internally by the Network Server and is read only."
    },
    "v3MACVersion": {
      "type": "string",
      "enum": [
        "MAC_UNKNOWN",
        "MAC_V1_0",
        "MAC_V1_0_1",
        "MAC_V1_0_2",
        "MAC_V1_1"
      ],
      "default": "MAC_UNKNOWN"
    },
    "v3MHDR": {
      "type": "object",
      "properties": {
        "m_type": {
          "$ref": "#/definitions/v3MType"
        },
        "major": {
          "$ref": "#/definitions/v3Major"
        }
      }
    },
    "v3MType": {
      "type": "string",
      "enum": [
        "JOIN_REQUEST",
        "JOIN_ACCEPT",
        "UNCONFIRMED_UP",
        "UNCONFIRMED_DOWN",
        "CONFIRMED_UP",
        "CONFIRMED_DOWN",
        "REJOIN_REQUEST",
        "PROPRIETARY"
      ],
      "default": "JOIN_REQUEST"
    },
    "v3Major": {
      "type": "string",
      "enum": [
        "LORAWAN_R1"
      ],
      "default": "LORAWAN_R1"
    },
    "v3MessagePayloadFormatters": {
      "type": "object",
      "properties": {
        "up_formatter": {
          "$ref": "#/definitions/v3PayloadFormatter",
          "description": "Payload formatter for uplink messages, must be set together with its parameter."
        },
        "up_formatter_parameter": {
          "type": "string",
          "description": "Parameter for the up_formatter, must be set together."
        },
        "down_formatter": {
          "$ref": "#/definitions/v3PayloadFormatter",
          "description": "Payload formatter for downlink messages, must be set together with its parameter."
        },
        "down_formatter_parameter": {
          "type": "string",
          "description": "Parameter for the down_formatter, must be set together."
        }
      }
    },
    "v3Minor": {
      "type": "string",
      "enum": [
        "MINOR_RFU_0",
        "MINOR_1",
        "MINOR_RFU_2",
        "MINOR_RFU_3",
        "MINOR_RFU_4",
        "MINOR_RFU_5",
        "MINOR_RFU_6",
        "MINOR_RFU_7",
        "MINOR_RFU_8",
        "MINOR_RFU_9",
        "MINOR_RFU_10",
        "MINOR_RFU_11",
        "MINOR_RFU_12",
        "MINOR_RFU_13",
        "MINOR_RFU_14",
        "MINOR_RFU_15"
      ],
      "default": "MINOR_RFU_0"
    },
    "v3NwkSKeysResponse": {
      "type": "object",
      "properties": {
        "f_nwk_s_int_key": {
          "$ref": "#/definitions/v3KeyEnvelope",
          "description": "The (encrypted) Forwarding Network Session Integrity Key (or Network Session Key in 1.0 compatibility mode)."
        },
        "s_nwk_s_int_key": {
          "$ref": "#/definitions/v3KeyEnvelope",
          "description": "The (encrypted) Serving Network Session Integrity Key."
        },
        "nwk_s_enc_key": {
          "$ref": "#/definitions/v3KeyEnvelope",
          "description": "The (encrypted) Network Session Encryption Key."
        }
      }
    },
    "v3OAuthAccessToken": {
      "type": "object",
      "properties": {
        "user_ids": {
          "$ref": "#/definitions/v3UserIdentifiers"
        },
        "client_ids": {
          "$ref": "#/definitions/v3ClientIdentifiers"
        },
        "id": {
          "type": "string"
        },
        "access_token": {
          "type": "string"
        },
        "refresh_token": {
          "type": "string"
        },
        "rights": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3Right"
          }
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "expires_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v3OAuthAccessTokens": {
      "type": "object",
      "properties": {
        "tokens": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3OAuthAccessToken"
          }
        }
      }
    },
    "v3OAuthClientAuthorization": {
      "type": "object",
      "properties": {
        "user_ids": {
          "$ref": "#/definitions/v3UserIdentifiers"
        },
        "client_ids": {
          "$ref": "#/definitions/v3ClientIdentifiers"
        },
        "rights": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3Right"
          }
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v3OAuthClientAuthorizations": {
      "type": "object",
      "properties": {
        "authorizations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3OAuthClientAuthorization"
          }
        }
      }
    },
    "v3Organization": {
      "type": "object",
      "properties": {
        "ids": {
          "$ref": "#/definitions/v3OrganizationIdentifiers"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "contact_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3ContactInfo"
          }
        }
      }
    },
    "v3OrganizationIdentifiers": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string",
          "description": "This ID shares namespace with user IDs."
        }
      }
    },
    "v3OrganizationOrUserIdentifiers": {
      "type": "object",
      "properties": {
        "organization_ids": {
          "$ref": "#/definitions/v3OrganizationIdentifiers"
        },
        "user_ids": {
          "$ref": "#/definitions/v3UserIdentifiers"
        }
      },
      "description": "OrganizationOrUserIdentifiers contains either organization or user identifiers."
    },
    "v3Organizations": {
      "type": "object",
      "properties": {
        "organizations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3Organization"
          }
        }
      }
    },
    "v3PHYVersion": {
      "type": "string",
      "enum": [
        "PHY_UNKNOWN",
        "PHY_V1_0",
        "PHY_V1_0_1",
        "PHY_V1_0_2_REV_A",
        "PHY_V1_0_2_REV_B",
        "PHY_V1_1_REV_A",
        "PHY_V1_1_REV_B"
      ],
      "default": "PHY_UNKNOWN"
    },
    "v3PayloadFormatter": {
      "type": "string",
      "enum": [
        "FORMATTER_NONE",
        "FORMATTER_REPOSITORY",
        "FORMATTER_GRPC_SERVICE",
        "FORMATTER_JAVASCRIPT",
        "FORMATTER_CAYENNELPP"
      ],
      "default": "FORMATTER_NONE",
      "description": " - FORMATTER_NONE: No payload formatter to work with raw payload only.\n - FORMATTER_REPOSITORY: Use payload formatter for the end device type from a repository.\n - FORMATTER_GRPC_SERVICE: gRPC service payload formatter. The parameter is the host:port of the service.\n - FORMATTER_JAVASCRIPT: Custom payload formatter that executes Javascript code. The parameter is a JavaScript filename.\n - FORMATTER_CAYENNELPP: CayenneLPP payload formatter."
    },
    "v3Picture": {
      "type": "object",
      "properties": {
        "embedded": {
          "$ref": "#/definitions/PictureEmbedded",
          "description": "Embedded picture, always maximum 128px in size.\nOmitted if there are external URLs available (in sizes)."
        },
        "sizes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "URLs of the picture for different sizes, if available on a CDN."
        }
      }
    },
    "v3PingSlotPeriod": {
      "type": "string",
      "enum": [
        "PING_EVERY_1S",
        "PING_EVERY_2S",
        "PING_EVERY_4S",
        "PING_EVERY_8S",
        "PING_EVERY_16S",
        "PING_EVERY_32S",
        "PING_EVERY_64S",
        "PING_EVERY_128S"
      ],
      "default": "PING_EVERY_1S"
    },
    "v3PowerState": {
      "type": "string",
      "enum": [
        "POWER_UNKNOWN",
        "POWER_BATTERY",
        "POWER_EXTERNAL"
      ],
      "default": "POWER_UNKNOWN",
      "description": "Power state of the device."
    },
    "v3ProvisionEndDevicesRequest": {
      "type": "object",
      "properties": {
        "application_ids": {
          "$ref": "#/definitions/v3ApplicationIdentifiers"
        },
        "provisioner_id": {
          "type": "string",
          "description": "ID of the provisioner service as configured in the Join Server."
        },
        "provisioning_data": {
          "type": "string",
          "format": "byte",
          "description": "Vendor-specific provisioning data."
        },
        "list": {
          "$ref": "#/definitions/ProvisionEndDevicesRequestIdentifiersList",
          "description": "List of device identifiers that will be provisioned.\nThe device identifiers must contain device_id and dev_eui.\nIf set, the application_ids must equal the provision request's application_ids.\nThe number of entries in data must match the number of given identifiers."
        },
        "range": {
          "$ref": "#/definitions/ProvisionEndDevicesRequestIdentifiersRange",
          "description": "Provision devices in a range.\nThe device_id will be generated by the provisioner from the vendor-specific data.\nThe dev_eui will be issued from the given start_dev_eui."
        },
        "from_data": {
          "$ref": "#/definitions/ProvisionEndDevicesRequestIdentifiersFromData",
          "description": "Provision devices with identifiers from the given data.\nThe device_id and dev_eui will be generated by the provisioner from the vendor-specific data."
        }
      }
    },
    "v3RejoinCountExponent": {
      "type": "string",
      "enum": [
        "REJOIN_COUNT_16",
        "REJOIN_COUNT_32",
        "REJOIN_COUNT_64",
        "REJOIN_COUNT_128",
        "REJOIN_COUNT_256",
        "REJOIN_COUNT_512",
        "REJOIN_COUNT_1024",
        "REJOIN_COUNT_2048",
        "REJOIN_COUNT_4096",
        "REJOIN_COUNT_8192",
        "REJOIN_COUNT_16384",
        "REJOIN_COUNT_32768",
        "REJOIN_COUNT_65536",
        "REJOIN_COUNT_131072",
        "REJOIN_COUNT_262144",
        "REJOIN_COUNT_524288"
      ],
      "default": "REJOIN_COUNT_16"
    },
    "v3RejoinPeriodExponent": {
      "type": "string",
      "enum": [
        "REJOIN_PERIOD_0",
        "REJOIN_PERIOD_1",
        "REJOIN_PERIOD_2",
        "REJOIN_PERIOD_3",
        "REJOIN_PERIOD_4",
        "REJOIN_PERIOD_5",
        "REJOIN_PERIOD_6",
        "REJOIN_PERIOD_7"
      ],
      "default": "REJOIN_PERIOD_0"
    },
    "v3RejoinRequestPayload": {
      "type": "object",
      "properties": {
        "rejoin_type": {
          "$ref": "#/definitions/v3RejoinType"
        },
        "net_id": {
          "type": "string",
          "format": "byte"
        },
        "join_eui": {
          "type": "string",
          "format": "byte"
        },
        "dev_eui": {
          "type": "string",
          "format": "byte"
        },
        "rejoin_cnt": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "v3RejoinTimeExponent": {
      "type": "string",
      "enum": [
        "REJOIN_TIME_0",
        "REJOIN_TIME_1",
        "REJOIN_TIME_2",
        "REJOIN_TIME_3",
        "REJOIN_TIME_4",
        "REJOIN_TIME_5",
        "REJOIN_TIME_6",
        "REJOIN_TIME_7",
        "REJOIN_TIME_8",
        "REJOIN_TIME_9",
        "REJOIN_TIME_10",
        "REJOIN_TIME_11",
        "REJOIN_TIME_12",
        "REJOIN_TIME_13",
        "REJOIN_TIME_14",
        "REJOIN_TIME_15"
      ],
      "default": "REJOIN_TIME_0"
    },
    "v3RejoinType": {
      "type": "string",
      "enum": [
        "CONTEXT",
        "SESSION",
        "KEYS"
      ],
      "default": "CONTEXT"
    },
    "v3Right": {
      "type": "string",
      "enum": [
        "right_invalid",
        "RIGHT_USER_INFO",
        "RIGHT_USER_SETTINGS_BASIC",
        "RIGHT_USER_SETTINGS_API_KEYS",
        "RIGHT_USER_DELETE",
        "RIGHT_USER_AUTHORIZED_CLIENTS",
        "RIGHT_USER_APPLICATIONS_LIST",
        "RIGHT_USER_APPLICATIONS_CREATE",
        "RIGHT_USER_GATEWAYS_LIST",
        "RIGHT_USER_GATEWAYS_CREATE",
        "RIGHT_USER_CLIENTS_LIST",
        "RIGHT_USER_CLIENTS_CREATE",
        "RIGHT_USER_ORGANIZATIONS_LIST",
        "RIGHT_USER_ORGANIZATIONS_CREATE",
        "RIGHT_USER_ALL",
        "RIGHT_APPLICATION_INFO",
        "RIGHT_APPLICATION_SETTINGS_BASIC",
        "RIGHT_APPLICATION_SETTINGS_API_KEYS",
        "RIGHT_APPLICATION_SETTINGS_COLLABORATORS",
        "RIGHT_APPLICATION_DELETE",
        "RIGHT_APPLICATION_DEVICES_READ",
        "RIGHT_APPLICATION_DEVICES_WRITE",
        "RIGHT_APPLICATION_DEVICES_READ_KEYS",
        "RIGHT_APPLICATION_DEVICES_WRITE_KEYS",
        "RIGHT_APPLICATION_TRAFFIC_READ",
        "RIGHT_APPLICATION_TRAFFIC_UP_WRITE",
        "RIGHT_APPLICATION_TRAFFIC_DOWN_WRITE",
        "RIGHT_APPLICATION_LINK",
        "RIGHT_APPLICATION_ALL",
        "RIGHT_CLIENT_ALL",
        "RIGHT_GATEWAY_INFO",
        "RIGHT_GATEWAY_SETTINGS_BASIC",
        "RIGHT_GATEWAY_SETTINGS_API_KEYS",
        "RIGHT_GATEWAY_SETTINGS_COLLABORATORS",
        "RIGHT_GATEWAY_DELETE",
        "RIGHT_GATEWAY_TRAFFIC_READ",
        "RIGHT_GATEWAY_TRAFFIC_DOWN_WRITE",
        "RIGHT_GATEWAY_LINK",
        "RIGHT_GATEWAY_STATUS_READ",
        "RIGHT_GATEWAY_LOCATION_READ",
        "RIGHT_GATEWAY_ALL",
        "RIGHT_ORGANIZATION_INFO",
        "RIGHT_ORGANIZATION_SETTINGS_BASIC",
        "RIGHT_ORGANIZATION_SETTINGS_API_KEYS",
        "RIGHT_ORGANIZATION_SETTINGS_MEMBERS",
        "RIGHT_ORGANIZATION_DELETE",
        "RIGHT_ORGANIZATION_APPLICATIONS_LIST",
        "RIGHT_ORGANIZATION_APPLICATIONS_CREATE",
        "RIGHT_ORGANIZATION_GATEWAYS_LIST",
        "RIGHT_ORGANIZATION_GATEWAYS_CREATE",
        "RIGHT_ORGANIZATION_CLIENTS_LIST",
        "RIGHT_ORGANIZATION_CLIENTS_CREATE",
        "RIGHT_ORGANIZATION_ADD_AS_COLLABORATOR",
        "RIGHT_ORGANIZATION_ALL",
        "RIGHT_SEND_INVITES",
        "RIGHT_ALL"
      ],
      "default": "right_invalid",
      "description": "Right is the enum that defines all the different rights to do something in the network.\n\n - RIGHT_USER_INFO: The right to view user information.\n - RIGHT_USER_SETTINGS_BASIC: The right to edit basic user settings.\n - RIGHT_USER_SETTINGS_API_KEYS: The right to view and edit user API keys.\n - RIGHT_USER_DELETE: The right to delete user account.\n - RIGHT_USER_AUTHORIZED_CLIENTS: The right to view and edit authorized OAuth clients of the user.\n - RIGHT_USER_APPLICATIONS_LIST: The right to list applications the user is a collaborator of.\n - RIGHT_USER_APPLICATIONS_CREATE: The right to create an application under the user account.\n - RIGHT_USER_GATEWAYS_LIST: The right to list gateways the user is a collaborator of.\n - RIGHT_USER_GATEWAYS_CREATE: The right to create a gateway under the account of the user.\n - RIGHT_USER_CLIENTS_LIST: The right to list OAuth clients the user is a collaborator of.\n - RIGHT_USER_CLIENTS_CREATE: The right to create an OAuth client under the account of the user.\n - RIGHT_USER_ORGANIZATIONS_LIST: The right to list organizations the user is a member of.\n - RIGHT_USER_ORGANIZATIONS_CREATE: The right to create an organization under the user account.\n - RIGHT_USER_ALL: The pseudo-right for all (current and future) user rights.\n - RIGHT_APPLICATION_INFO: The right to view application information.\n - RIGHT_APPLICATION_SETTINGS_BASIC: The right to edit basic application settings.\n - RIGHT_APPLICATION_SETTINGS_API_KEYS: The right to view and edit application API keys.\n - RIGHT_APPLICATION_SETTINGS_COLLABORATORS: The right to view and edit application collaborators.\n - RIGHT_APPLICATION_DELETE: The right to delete application.\n - RIGHT_APPLICATION_DEVICES_READ: The right to view devices in application.\n - RIGHT_APPLICATION_DEVICES_WRITE: The right to create devices in application.\n - RIGHT_APPLICATION_DEVICES_READ_KEYS: The right to view device keys in application.\nNote that keys may not be stored in a way that supports viewing them.\n - RIGHT_APPLICATION_DEVICES_WRITE_KEYS: The right to edit device keys in application.\n - RIGHT_APPLICATION_TRAFFIC_READ: The right to read application traffic (uplink and downlink).\n - RIGHT_APPLICATION_TRAFFIC_UP_WRITE: The right to write uplink application traffic.\n - RIGHT_APPLICATION_TRAFFIC_DOWN_WRITE: The right to write downlink application traffic.\n - RIGHT_APPLICATION_LINK: The right to link as Application to a Network Server for traffic exchange,\ni.e. read uplink and write downlink (API keys only).\nThis right is typically only given to an Application Server.\n - RIGHT_APPLICATION_ALL: The pseudo-right for all (current and future) application rights.\n - RIGHT_CLIENT_ALL: The pseudo-right for all (current and future) OAuth client rights.\n - RIGHT_GATEWAY_INFO: The right to view gateway information.\n - RIGHT_GATEWAY_SETTINGS_BASIC: The right to edit basic gateway settings.\n - RIGHT_GATEWAY_SETTINGS_API_KEYS: The right to view and edit gateway API keys.\n - RIGHT_GATEWAY_SETTINGS_COLLABORATORS: The right to view and edit gateway collaborators.\n - RIGHT_GATEWAY_DELETE: The right to delete gateway.\n - RIGHT_GATEWAY_TRAFFIC_READ: The right to read gateway traffic.\n - RIGHT_GATEWAY_TRAFFIC_DOWN_WRITE: The right to write downlink gateway traffic.\n - RIGHT_GATEWAY_LINK: The right to link as Gateway to a Gateway Server for traffic exchange,\ni.e. write uplink and read downlink (API keys only)\n - RIGHT_GATEWAY_STATUS_READ: The right to view gateway status.\n - RIGHT_GATEWAY_LOCATION_READ: The right to view view gateway location.\n - RIGHT_GATEWAY_ALL: The pseudo-right for all (current and future) gateway rights.\n - RIGHT_ORGANIZATION_INFO: The right to view organization information.\n - RIGHT_ORGANIZATION_SETTINGS_BASIC: The right to edit basic organization settings.\n - RIGHT_ORGANIZATION_SETTINGS_API_KEYS: The right to view and edit organization API keys.\n - RIGHT_ORGANIZATION_SETTINGS_MEMBERS: The right to view and edit organization members.\n - RIGHT_ORGANIZATION_DELETE: The right to delete organization.\n - RIGHT_ORGANIZATION_APPLICATIONS_LIST: The right to list the applications the organization is a collaborator of.\n - RIGHT_ORGANIZATION_APPLICATIONS_CREATE: The right to create an application under the organization.\n - RIGHT_ORGANIZATION_GATEWAYS_LIST: The right to list the gateways the organization is a collaborator of.\n - RIGHT_ORGANIZATION_GATEWAYS_CREATE: The right to create a gateway under the organization.\n - RIGHT_ORGANIZATION_CLIENTS_LIST: The right to list the OAuth clients the organization is a collaborator of.\n - RIGHT_ORGANIZATION_CLIENTS_CREATE: The right to create an OAuth client under the organization.\n - RIGHT_ORGANIZATION_ADD_AS_COLLABORATOR: The right to add the organization as a collaborator on an existing entity.\n - RIGHT_ORGANIZATION_ALL: The pseudo-right for all (current and future) organization rights.\n - RIGHT_SEND_INVITES: The right to send invites to new users.\nNote that this is not prefixed with \"USER_\"; it is not a right on the user entity.\n - RIGHT_ALL: The pseudo-right for all (current and future) possible rights."
    },
    "v3Rights": {
      "type": "object",
      "properties": {
        "rights": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3Right"
          }
        }
      }
    },
    "v3RootKeys": {
      "type": "object",
      "properties": {
        "root_key_id": {
          "type": "string",
          "description": "Join Server issued identifier for the root keys."
        },
        "app_key": {
          "$ref": "#/definitions/v3KeyEnvelope",
          "description": "The (encrypted) Application Key."
        },
        "nwk_key": {
          "$ref": "#/definitions/v3KeyEnvelope",
          "description": "The (encrypted) Network Key."
        }
      },
      "description": "Root keys for a LoRaWAN device.\nThese are stored on the Join Server."
    },
    "v3RxDelay": {
      "type": "string",
      "enum": [
        "RX_DELAY_0",
        "RX_DELAY_1",
        "RX_DELAY_2",
        "RX_DELAY_3",
        "RX_DELAY_4",
        "RX_DELAY_5",
        "RX_DELAY_6",
        "RX_DELAY_7",
        "RX_DELAY_8",
        "RX_DELAY_9",
        "RX_DELAY_10",
        "RX_DELAY_11",
        "RX_DELAY_12",
        "RX_DELAY_13",
        "RX_DELAY_14",
        "RX_DELAY_15"
      ],
      "default": "RX_DELAY_0"
    },
    "v3RxMetadata": {
      "type": "object",
      "properties": {
        "gateway_ids": {
          "$ref": "#/definitions/v3GatewayIdentifiers"
        },
        "antenna_index": {
          "type": "integer",
          "format": "int64"
        },
        "time": {
          "type": "string",
          "format": "date-time"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64",
          "description": "Gateway concentrator timestamp when the Rx finished (microseconds)."
        },
        "fine_timestamp": {
          "type": "string",
          "format": "uint64",
          "description": "Gateway's internal fine timestamp when the Rx finished (nanoseconds)."
        },
        "encrypted_fine_timestamp": {
          "type": "string",
          "format": "byte",
          "description": "Encrypted gateway's internal fine timestamp when the Rx finished (nanoseconds)."
        },
        "encrypted_fine_timestamp_key_id": {
          "type": "string"
        },
        "rssi": {
          "type": "number",
          "format": "float",
          "description": "Received signal strength (dBm)."
        },
        "channel_rssi": {
          "type": "number",
          "format": "float",
          "description": "Received channel power (dBm)."
        },
        "rssi_standard_deviation": {
          "type": "number",
          "format": "float",
          "description": "Standard deviation of the RSSI."
        },
        "snr": {
          "type": "number",
          "format": "float",
          "description": "Signal-to-noise ratio (dB)."
        },
        "frequency_offset": {
          "type": "string",
          "format": "int64",
          "description": "Frequency offset (Hz)."
        },
        "location": {
          "$ref": "#/definitions/lorawanv3Location",
          "description": "Antenna location; injected by the Gateway Server."
        },
        "downlink_path_constraint": {
          "$ref": "#/definitions/v3DownlinkPathConstraint",
          "description": "Gateway downlink path constraint; injected by the Gateway Server."
        },
        "uplink_token": {
          "type": "string",
          "format": "byte",
          "description": "Uplink token to be included in the Tx request in class A downlink; injected by gateway, Gateway Server or fNS."
        },
        "advanced": {
          "$ref": "#/definitions/protobufStruct",
          "title": "Advanced metadata fields\n- can be used for advanced information or experimental features that are not yet formally defined in the API\n- field names are written in snake_case"
        }
      },
      "description": "Contains metadata for a received message. Each antenna that receives\na message corresponds to one RxMetadata."
    },
    "v3ScheduleDownlinkResponse": {
      "type": "object",
      "properties": {
        "delay": {
          "type": "string"
        }
      }
    },
    "v3SendInvitationRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        }
      }
    },
    "v3Session": {
      "type": "object",
      "properties": {
        "dev_addr": {
          "type": "string",
          "format": "byte",
          "description": "Device Address, issued by the Network Server or chosen by device manufacturer in case of testing range (beginning with 00-03).\nKnown by Network Server, Application Server and Join Server. Owned by Network Server."
        },
        "keys": {
          "$ref": "#/definitions/v3SessionKeys"
        },
        "last_f_cnt_up": {
          "type": "integer",
          "format": "int64",
          "description": "Last uplink frame counter value used. Network Server only. Application Server assumes the Network Server checked it."
        },
        "last_n_f_cnt_down": {
          "type": "integer",
          "format": "int64",
          "description": "Last network downlink frame counter value used. Network Server only."
        },
        "last_a_f_cnt_down": {
          "type": "integer",
          "format": "int64",
          "description": "Last application downlink frame counter value used. Application Server only."
        },
        "last_conf_f_cnt_down": {
          "type": "integer",
          "format": "int64",
          "description": "Frame counter of the last confirmed downlink message sent. Network Server only."
        },
        "started_at": {
          "type": "string",
          "format": "date-time",
          "description": "Time when the session started. Network Server only."
        }
      }
    },
    "v3SessionKeys": {
      "type": "object",
      "properties": {
        "session_key_id": {
          "type": "string",
          "format": "byte",
          "description": "Join Server issued identifier for the session keys.\nThis ID can be used to request the keys from the Join Server in case the are lost."
        },
        "f_nwk_s_int_key": {
          "$ref": "#/definitions/v3KeyEnvelope",
          "description": "The (encrypted) Forwarding Network Session Integrity Key (or Network Session Key in 1.0 compatibility mode).\nThis key is stored by the (forwarding) Network Server."
        },
        "s_nwk_s_int_key": {
          "$ref": "#/definitions/v3KeyEnvelope",
          "description": "The (encrypted) Serving Network Session Integrity Key.\nThis key is stored by the (serving) Network Server."
        },
        "nwk_s_enc_key": {
          "$ref": "#/definitions/v3KeyEnvelope",
          "description": "The (encrypted) Network Session Encryption Key.\nThis key is stored by the (serving) Network Server."
        },
        "app_s_key": {
          "$ref": "#/definitions/v3KeyEnvelope",
          "description": "The (encrypted) Application Session Key.\nThis key is stored by the Application Server."
        }
      },
      "description": "Session keys for a LoRaWAN session.\nOnly the components for which the keys were meant, will have the key-encryption-key (KEK) to decrypt the individual keys."
    },
    "v3SetApplicationCollaboratorRequest": {
      "type": "object",
      "properties": {
        "application_ids": {
          "$ref": "#/definitions/v3ApplicationIdentifiers"
        },
        "collaborator": {
          "$ref": "#/definitions/v3Collaborator"
        }
      }
    },
    "v3SetApplicationLinkRequest": {
      "type": "object",
      "properties": {
        "application_ids": {
          "$ref": "#/definitions/v3ApplicationIdentifiers"
        },
        "link": {
          "$ref": "#/definitions/v3ApplicationLink"
        },
        "field_mask": {
          "$ref": "#/definitions/protobufFieldMask"
        }
      }
    },
    "v3SetApplicationWebhookRequest": {
      "type": "object",
      "properties": {
        "webhook": {
          "$ref": "#/definitions/v3ApplicationWebhook"
        },
        "field_mask": {
          "$ref": "#/definitions/protobufFieldMask"
        }
      }
    },
    "v3SetClientCollaboratorRequest": {
      "type": "object",
      "properties": {
        "client_ids": {
          "$ref": "#/definitions/v3ClientIdentifiers"
        },
        "collaborator": {
          "$ref": "#/definitions/v3Collaborator"
        }
      }
    },
    "v3SetEndDeviceRequest": {
      "type": "object",
      "properties": {
        "end_device": {
          "$ref": "#/definitions/v3EndDevice"
        },
        "field_mask": {
          "$ref": "#/definitions/protobufFieldMask"
        }
      }
    },
    "v3SetGatewayCollaboratorRequest": {
      "type": "object",
      "properties": {
        "gateway_ids": {
          "$ref": "#/definitions/v3GatewayIdentifiers"
        },
        "collaborator": {
          "$ref": "#/definitions/v3Collaborator"
        }
      }
    },
    "v3SetOrganizationCollaboratorRequest": {
      "type": "object",
      "properties": {
        "organization_ids": {
          "$ref": "#/definitions/v3OrganizationIdentifiers"
        },
        "collaborator": {
          "$ref": "#/definitions/v3Collaborator"
        }
      }
    },
    "v3State": {
      "type": "string",
      "enum": [
        "STATE_REQUESTED",
        "STATE_APPROVED",
        "STATE_REJECTED",
        "STATE_FLAGGED",
        "STATE_SUSPENDED"
      ],
      "default": "STATE_REQUESTED",
      "description": "State enum defines states that an entity can be in.\n\n - STATE_REQUESTED: Denotes that the entity has been requested and is pending review by an admin.\n - STATE_APPROVED: Denotes that the entity has been reviewed and approved by an admin.\n - STATE_REJECTED: Denotes that the entity has been reviewed and rejected by an admin.\n - STATE_FLAGGED: Denotes that the entity has been flagged and is pending review by an admin.\n - STATE_SUSPENDED: Denotes that the entity has been reviewed and suspended by an admin."
    },
    "v3StreamEventsRequest": {
      "type": "object",
      "properties": {
        "identifiers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3EntityIdentifiers"
          }
        },
        "tail": {
          "type": "integer",
          "format": "int64",
          "description": "If greater than zero, this will return historical events, up to this maximum when the stream starts.\nIf used in combination with \"after\", the limit that is reached first, is used.\nThe availability of historical events depends on server support and retention policy."
        },
        "after": {
          "type": "string",
          "format": "date-time",
          "description": "If not empty, this will return historical events after the given time when the stream starts.\nIf used in combination with \"tail\", the limit that is reached first, is used.\nThe availability of historical events depends on server support and retention policy."
        }
      }
    },
    "v3TxAcknowledgment": {
      "type": "object",
      "properties": {
        "correlation_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "result": {
          "$ref": "#/definitions/TxAcknowledgmentResult"
        }
      }
    },
    "v3TxRequest": {
      "type": "object",
      "properties": {
        "class": {
          "$ref": "#/definitions/v3Class"
        },
        "downlink_paths": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3DownlinkPath"
          },
          "description": "Downlink paths used to select a gateway for downlink.\nIn class A, the downlink paths are required to only contain uplink tokens.\nIn class B and C, the downlink paths may contain uplink tokens and fixed gateways antenna identifiers."
        },
        "rx1_delay": {
          "$ref": "#/definitions/v3RxDelay",
          "description": "Rx1 delay (Rx2 delay is Rx1 delay + 1 second)."
        },
        "rx1_data_rate_index": {
          "$ref": "#/definitions/v3DataRateIndex",
          "description": "LoRaWAN data rate index for Rx1."
        },
        "rx1_frequency": {
          "type": "string",
          "format": "uint64",
          "description": "Frequency (Hz) for Rx1."
        },
        "rx2_data_rate_index": {
          "$ref": "#/definitions/v3DataRateIndex",
          "description": "LoRaWAN data rate index for Rx2."
        },
        "rx2_frequency": {
          "type": "string",
          "format": "uint64",
          "description": "Frequency (Hz) for Rx2."
        },
        "priority": {
          "$ref": "#/definitions/v3TxSchedulePriority",
          "description": "Priority for scheduling.\nRequests with a higher priority are allocated more channel time than messages with a lower priority, in duty-cycle limited regions.\nA priority of HIGH or higher sets the HiPriorityFlag in the DLMetadata Object."
        },
        "absolute_time": {
          "type": "string",
          "format": "date-time",
          "description": "Time when the downlink message should be transmitted.\nThis value is only valid for class C downlink; class A downlink uses uplink tokens and class B downlink is scheduled on ping slots.\nThis requires the gateway to have GPS time sychronization.\nIf the absolute time is not set, the first available time will be used that does not conflict or violate regional limitations."
        },
        "advanced": {
          "$ref": "#/definitions/protobufStruct",
          "title": "Advanced metadata fields\n- can be used for advanced information or experimental features that are not yet formally defined in the API\n- field names are written in snake_case"
        }
      },
      "description": "TxRequest is a request for transmission.\nIf sent to a roaming partner, this request is used to generate the DLMetadata Object (see Backend Interfaces 1.0, Table 22).\nIf the gateway has a scheduler, this request is sent to the gateway, in the order of gateway_ids.\nOtherwise, the Gateway Server attempts to schedule the request and creates the TxSettings."
    },
    "v3TxSchedulePriority": {
      "type": "string",
      "enum": [
        "LOWEST",
        "LOW",
        "BELOW_NORMAL",
        "NORMAL",
        "ABOVE_NORMAL",
        "HIGH",
        "HIGHEST"
      ],
      "default": "LOWEST"
    },
    "v3TxSettings": {
      "type": "object",
      "properties": {
        "data_rate": {
          "$ref": "#/definitions/v3DataRate",
          "description": "Data rate."
        },
        "data_rate_index": {
          "$ref": "#/definitions/v3DataRateIndex",
          "description": "LoRaWAN data rate index."
        },
        "coding_rate": {
          "type": "string",
          "description": "LoRa coding rate."
        },
        "frequency": {
          "type": "string",
          "format": "uint64",
          "description": "Frequency (Hz)."
        },
        "enable_crc": {
          "type": "boolean",
          "format": "boolean",
          "description": "Send a CRC in the packet; only on uplink; on downlink, CRC should not be enabled."
        },
        "timestamp": {
          "type": "integer",
          "format": "int64",
          "description": "Timestamp of the gateway concentrator when the uplink message was received, or when the downlink message should be transmitted (microseconds).\nOn downlink, set timestamp to 0 and time to null to use immediate scheduling."
        },
        "time": {
          "type": "string",
          "format": "date-time",
          "description": "Time of the gateway when the uplink message was received, or when the downlink message should be transmitted.\nFor downlink, this requires the gateway to have GPS time synchronization."
        },
        "downlink": {
          "$ref": "#/definitions/TxSettingsDownlink",
          "description": "Transmission settings for downlink."
        }
      },
      "description": "TxSettings contains the settings for a transmission.\nThis message is used on both uplink and downlink.\nOn downlink, this is a scheduled transmission."
    },
    "v3UpdateApplicationAPIKeyRequest": {
      "type": "object",
      "properties": {
        "application_ids": {
          "$ref": "#/definitions/v3ApplicationIdentifiers"
        },
        "api_key": {
          "$ref": "#/definitions/v3APIKey"
        }
      }
    },
    "v3UpdateApplicationRequest": {
      "type": "object",
      "properties": {
        "application": {
          "$ref": "#/definitions/v3Application"
        },
        "field_mask": {
          "$ref": "#/definitions/protobufFieldMask"
        }
      }
    },
    "v3UpdateClientRequest": {
      "type": "object",
      "properties": {
        "client": {
          "$ref": "#/definitions/v3Client"
        },
        "field_mask": {
          "$ref": "#/definitions/protobufFieldMask"
        }
      }
    },
    "v3UpdateEndDeviceRequest": {
      "type": "object",
      "properties": {
        "end_device": {
          "$ref": "#/definitions/v3EndDevice"
        },
        "field_mask": {
          "$ref": "#/definitions/protobufFieldMask"
        }
      }
    },
    "v3UpdateGatewayAPIKeyRequest": {
      "type": "object",
      "properties": {
        "gateway_ids": {
          "$ref": "#/definitions/v3GatewayIdentifiers"
        },
        "api_key": {
          "$ref": "#/definitions/v3APIKey"
        }
      }
    },
    "v3UpdateGatewayRequest": {
      "type": "object",
      "properties": {
        "gateway": {
          "$ref": "#/definitions/v3Gateway"
        },
        "field_mask": {
          "$ref": "#/definitions/protobufFieldMask"
        }
      }
    },
    "v3UpdateOrganizationAPIKeyRequest": {
      "type": "object",
      "properties": {
        "organization_ids": {
          "$ref": "#/definitions/v3OrganizationIdentifiers"
        },
        "api_key": {
          "$ref": "#/definitions/v3APIKey"
        }
      }
    },
    "v3UpdateOrganizationRequest": {
      "type": "object",
      "properties": {
        "organization": {
          "$ref": "#/definitions/v3Organization"
        },
        "field_mask": {
          "$ref": "#/definitions/protobufFieldMask"
        }
      }
    },
    "v3UpdateUserAPIKeyRequest": {
      "type": "object",
      "properties": {
        "user_ids": {
          "$ref": "#/definitions/v3UserIdentifiers"
        },
        "api_key": {
          "$ref": "#/definitions/v3APIKey"
        }
      }
    },
    "v3UpdateUserPasswordRequest": {
      "type": "object",
      "properties": {
        "user_ids": {
          "$ref": "#/definitions/v3UserIdentifiers"
        },
        "new": {
          "type": "string"
        },
        "old": {
          "type": "string"
        }
      }
    },
    "v3UpdateUserRequest": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v3User"
        },
        "field_mask": {
          "$ref": "#/definitions/protobufFieldMask"
        }
      }
    },
    "v3UplinkMessage": {
      "type": "object",
      "properties": {
        "raw_payload": {
          "type": "string",
          "format": "byte"
        },
        "payload": {
          "$ref": "#/definitions/lorawanv3Message"
        },
        "settings": {
          "$ref": "#/definitions/v3TxSettings"
        },
        "rx_metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3RxMetadata"
          }
        },
        "received_at": {
          "type": "string",
          "format": "date-time",
          "description": "Server time when a component received the message.\nThe Gateway Server, Network Server and Application Server may set this value to their local server time of reception."
        },
        "correlation_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "gateway_channel_index": {
          "type": "integer",
          "format": "int64",
          "description": "Index of the gateway channel that received the message.\nSet by Gateway Server."
        },
        "device_channel_index": {
          "type": "integer",
          "format": "int64",
          "description": "Index of the device channel that received the message.\nSet by Network Server."
        }
      },
      "title": "Uplink message from the end device to the network"
    },
    "v3User": {
      "type": "object",
      "properties": {
        "ids": {
          "$ref": "#/definitions/v3UserIdentifiers"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "contact_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3ContactInfo"
          }
        },
        "primary_email_address": {
          "type": "string",
          "description": "Primary email address that can be used for logging in.\nThis address is not public, use contact_info for that."
        },
        "primary_email_address_validated_at": {
          "type": "string",
          "format": "date-time"
        },
        "password": {
          "type": "string",
          "description": "Only used on create; never returned on API calls."
        },
        "password_updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "require_password_update": {
          "type": "boolean",
          "format": "boolean"
        },
        "state": {
          "$ref": "#/definitions/v3State",
          "description": "The reviewing state of the user.\nThis field can only be modified by admins."
        },
        "admin": {
          "type": "boolean",
          "format": "boolean",
          "description": "This user is an admin.\nThis field can only be modified by other admins."
        },
        "temporary_password": {
          "type": "string",
          "description": "The temporary password can only be used to update a user's password; never returned on API calls."
        },
        "temporary_password_created_at": {
          "type": "string",
          "format": "date-time"
        },
        "temporary_password_expires_at": {
          "type": "string",
          "format": "date-time"
        },
        "profile_picture": {
          "$ref": "#/definitions/v3Picture"
        }
      },
      "description": "User is the message that defines an user on the network."
    },
    "v3UserIdentifiers": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "description": "This ID shares namespace with organization IDs."
        },
        "email": {
          "type": "string",
          "description": "Secondary identifier, which can only be used in specific requests."
        }
      }
    },
    "v3UserSession": {
      "type": "object",
      "properties": {
        "user_ids": {
          "$ref": "#/definitions/v3UserIdentifiers"
        },
        "session_id": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "expires_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v3UserSessions": {
      "type": "object",
      "properties": {
        "sessions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3UserSession"
          }
        }
      }
    },
    "v3Users": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3User"
          }
        }
      }
    }
  },
  "x-stream-definitions": {
    "v3ApplicationUp": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/v3ApplicationUp"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of v3ApplicationUp"
    },
    "v3EndDevice": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/v3EndDevice"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of v3EndDevice"
    },
    "v3Event": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/v3Event"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of v3Event"
    },
    "v3Gateway": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/v3Gateway"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of v3Gateway"
    },
    "v3GatewayDown": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/v3GatewayDown"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of v3GatewayDown"
    }
  }
}
