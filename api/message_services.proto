// Copyright Â© 2019 The Things Network Foundation, The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "lorawan-stack/api/end_device.proto";
import "lorawan-stack/api/identifiers.proto";
import "lorawan-stack/api/messages.proto";

package ttn.lorawan.v3;

option go_package = "go.thethings.network/lorawan-stack/pkg/ttnpb";

message ProcessUplinkMessageRequest {
  EndDeviceIdentifiers ids = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (validate.rules).message.required = true];
  EndDeviceVersionIdentifiers end_device_version_ids = 2 [(gogoproto.nullable) = false, (gogoproto.customname) = "EndDeviceVersionIDs", (validate.rules).message.required = true];
  ApplicationUplink message = 3 [(gogoproto.nullable) = false, (validate.rules).message.required = true];
  string parameter = 4;
}

message ProcessDownlinkMessageRequest {
  EndDeviceIdentifiers ids = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (validate.rules).message.required = true];
  EndDeviceVersionIdentifiers end_device_version_ids = 2 [(gogoproto.nullable) = false, (gogoproto.customname) = "EndDeviceVersionIDs", (validate.rules).message.required = true];
  ApplicationDownlink message = 3 [(gogoproto.nullable) = false, (validate.rules).message.required = true];
  string parameter = 4;
}

// The UplinkMessageProcessor service processes uplink messages.
service UplinkMessageProcessor {
  rpc Process(ProcessUplinkMessageRequest) returns (ApplicationUplink);
}

// The DownlinkMessageProcessor service processes downlink messages.
service DownlinkMessageProcessor {
  rpc Process(ProcessDownlinkMessageRequest) returns (ApplicationDownlink);
}
