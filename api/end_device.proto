// Copyright Â© 2018 The Things Network Foundation, The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "lorawan-stack/api/identifiers.proto";
import "lorawan-stack/api/keys.proto";
import "lorawan-stack/api/lorawan.proto";
import "lorawan-stack/api/messages.proto";
import "lorawan-stack/api/metadata.proto";

package ttn.lorawan.v3;

option go_package = "go.thethings.network/lorawan-stack/pkg/ttnpb";

message Session {
  reserved 1; // RFU: Session ID

  // Device Address, issued by the Network Server or chosen by device manufacturer in case of testing range (beginning with 00-03).
  // Known by Network Server, Application Server and Join Server. Owned by Network Server.
  bytes dev_addr = 2 [(gogoproto.customtype) = "go.thethings.network/lorawan-stack/pkg/types.DevAddr", (gogoproto.nullable) = false];
  SessionKeys keys = 3 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
  // Next FCntUp to be expected. Network Server only. Application Server assumes the Network Server checked it.
  uint32 next_f_cnt_up = 4;
  // Next NFCntDown to be used. Network Server only.
  uint32 next_n_f_cnt_down = 5;
  // Next AFCntDown to be used. Application Server only.
  uint32 next_a_f_cnt_down = 6;
  // FCnt of the last confirmed downlink message sent. Network Server only.
  uint32 last_conf_f_cnt_down = 7;
  // Time when the session started. Network Server only.
  google.protobuf.Timestamp started_at = 8 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
}

// MACParameters represent the parameters of the device's MAC layer (active or desired).
// This is used internally by the Network Server and is read only.
message MACParameters {
  option (gogoproto.populate) = false;

  // Maximum EIRP (dBm).
  float max_eirp = 1 [(gogoproto.customname) = "MaxEIRP"];
  // Uplink dwell time is set (400ms).
  bool uplink_dwell_time = 2;
  // Downlink dwell time is set (400ms).
  bool downlink_dwell_time = 3;
  // ADR: data rate index to use.
  DataRateIndex adr_data_rate_index = 4 [(gogoproto.customname) = "ADRDataRateIndex"];
  // ADR: transmission power index to use.
  uint32 adr_tx_power_index = 5 [(gogoproto.customname) = "ADRTxPowerIndex"];
  // ADR: number of retransmissions.
  uint32 adr_nb_trans = 6 [(gogoproto.customname) = "ADRNbTrans"];
  // ADR: number of messages to wait before setting ADRAckReq.
  uint32 adr_ack_limit = 7 [(gogoproto.customname) = "ADRAckLimit"];
  // ADR: number of messages to wait after setting ADRAckReq and before changing TxPower or DataRate.
  uint32 adr_ack_delay = 8 [(gogoproto.customname) = "ADRAckDelay"];
  // Rx1 delay (Rx2 delay is Rx1 delay + 1 second).
  RxDelay rx1_delay = 9;
  // Data rate offset for Rx1.
  uint32 rx1_data_rate_offset = 10;
  // Data rate index for Rx2.
  DataRateIndex rx2_data_rate_index = 11;
  // Frequency for Rx2 (Hz).
  uint64 rx2_frequency = 12;
  // Time within which a rejoin-request must be sent.
  RejoinTimeExponent rejoin_time_periodicity = 13;
  // Message count within which a rejoin-request must be sent.
  RejoinCountExponent rejoin_count_periodicity = 14;
  // Maximum uplink duty cycle (of all channels).
  AggregatedDutyCycle max_duty_cycle = 15;

  message Channel {
    option (gogoproto.populate) = false;

    // Uplink frequency of the channel (Hz).
    uint64 uplink_frequency = 1;
    // Downlink frequency of the channel (Hz).
    uint64 downlink_frequency = 2;
    // Index of the minimum data rate for uplink.
    DataRateIndex min_data_rate_index = 3;
    // Index of the maximum data rate for uplink.
    DataRateIndex max_data_rate_index = 4;
    // Channel can be used by device for uplink.
    bool enable_uplink = 5;
  }

  // Configured uplink channels and optionally Rx1 frequency.
  repeated Channel channels = 16;
  // Frequency of the class B ping slot (Hz).
  uint64 ping_slot_frequency = 17;
  // Data rate index of the class B ping slot.
  DataRateIndex ping_slot_data_rate_index = 18;
  // Frequency of the class B beacon (Hz).
  uint64 beacon_frequency = 19;
}

message EndDeviceBrand {
  string id = 1 [(gogoproto.customname) = "ID"];
  string name = 2;
  string url = 3 [(gogoproto.customname) = "URL"];
  // Logos contains file names of brand logos.
  repeated string logos = 4;
}

message EndDeviceModel {
  string brand_id = 1 [(gogoproto.customname) = "BrandID"];
  string id = 2 [(gogoproto.customname) = "ID"];
  string name = 3;
}

// Identifies an end device model with version information.
message EndDeviceVersionIdentifiers {
  string brand_id = 1 [(gogoproto.customname) = "BrandID"];
  string model_id = 2 [(gogoproto.customname) = "ModelID"];
  string hardware_version = 3;
  string firmware_version = 4;
}

// Template for creating end devices.
message EndDeviceVersion {
  option (gogoproto.populate) = false;

  // Version identifiers.
  EndDeviceVersionIdentifiers ids = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  // LoRaWAN MAC version.
  MACVersion lorawan_version = 2 [(gogoproto.customname) = "LoRaWANVersion"];
  // LoRaWAN PHY version.
  PHYVersion lorawan_phy_version = 3 [(gogoproto.customname) = "LoRaWANPHYVersion"];
  // ID of the frequency plan used by this device.
  string frequency_plan_id = 4 [(gogoproto.customname) = "FrequencyPlanID"];

  // Photos contains file names of device photos.
  repeated string photos = 5;

  // Whether the device supports class B.
  bool supports_class_b = 6;
  // Whether the device supports class C.
  bool supports_class_c = 7;
  // Default MAC layer parameters, to which device is reset by default (e.g. on join or ResetInd).
  MACParameters default_mac_parameters = 8 [(gogoproto.customname) = "DefaultMACParameters"];
  // Minimum frequency the device is capable of using (Hz).
  uint64 min_frequency = 9;
  // Maximum frequency the device is capable of using (Hz).
  uint64 max_frequency = 10;
  // Whether the device resets the frame counters (not LoRaWAN compliant).
  bool resets_f_cnt = 11;
  // Whether the device uses 32-bit frame counters.
  bool uses_32_bit_f_cnt = 12 [(gogoproto.customname) = "Uses32BitFCnt"];
  // The device supports join (it's OTAA).
  bool supports_join = 13;
  // Whether the device resets the join and dev nonces (not LoRaWAN 1.1 compliant).
  bool resets_join_nonces = 14;

  // Default formatters defining the payload formats for this end device.
  MessagePayloadFormatters default_formatters = 15 [(gogoproto.nullable) = false];
}

message MACSettings {
  bool use_adr = 1 [(gogoproto.customname) = "UseADR"];
  // The ADR margin tells the network server how much margin it should add in ADR requests.
  // A bigger margin is less efficient, but gives a better chance of successful reception.
  uint32 adr_margin = 2 [(gogoproto.customname) = "ADRMargin"];
  // Deadline for the device to respond to requests from the Network Server.
  google.protobuf.Duration class_b_timeout = 3 [(gogoproto.stdduration) = true, (gogoproto.nullable) = false];
  // Deadline for the device to respond to requests from the Network Server.
  google.protobuf.Duration class_c_timeout = 4 [(gogoproto.stdduration) = true, (gogoproto.nullable) = false];
  // The interval after which a DevStatusReq MACCommand shall be sent.
  google.protobuf.Duration status_time_periodicity = 5 [(gogoproto.stdduration) = true, (gogoproto.nullable) = false];
  // Number of uplink messages after which a DevStatusReq MACCommand shall be sent.
  uint64 status_count_periodicity = 6;
}

// MACState represents the state of MAC layer of the device.
// MACState is reset on each join for OTAA or ResetInd for ABP devices.
// This is used internally by the Network Server and is read only.
message MACState {
  option (gogoproto.populate) = false;

  // Current LoRaWAN MAC parameters.
  MACParameters current_parameters = 1 [(gogoproto.nullable) = false];
  // Desired LoRaWAN MAC parameters.
  MACParameters desired_parameters = 2 [(gogoproto.nullable) = false];

  // Currently active LoRaWAN device class
  // - Device class is A by default
  // - If device sets ClassB bit in uplink, this will be set to B
  // - If device sent DeviceModeInd MAC message, this will be set to that value
  Class device_class = 3;
  // LoRaWAN MAC version.
  MACVersion lorawan_version = 4 [(gogoproto.customname) = "LoRaWANVersion"];
  // Time when a new confirmed downlink message or MAC command is ready to be scheduled for class C.
  google.protobuf.Timestamp next_confirmed_downlink_at = 6 [(gogoproto.stdtime) = true];
  // Periodicity of the class B ping slot.
  PingSlotPeriod ping_slot_periodicity = 7;
  // A confirmed application downlink, for which an acknowledgment is expected to arrive.
  ApplicationDownlink pending_application_downlink = 8;
  // Queued MAC responses.
  // Regenerated on each uplink.
  repeated MACCommand queued_responses = 9;
  // Pending MAC requests(i.e. sent requests, for which no response has been received yet).
  // Regenerated on each downlink.
  repeated MACCommand pending_requests = 10;

  // TODO: Add info about failed MAC requests
}

// Power state of the device.
enum PowerState {
  POWER_UNKNOWN = 0;
  POWER_BATTERY = 1;
  POWER_EXTERNAL = 2;
}

// Defines an End Device registration and its state on the network.
// The persistence of the EndDevice is divided between the Network Server, Application Server and Join Server.
// SDKs are responsible for combining (if desired) the three.
message EndDevice {
  option (gogoproto.populate) = false;

  EndDeviceIdentifiers ids = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
  google.protobuf.Timestamp created_at = 2 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  google.protobuf.Timestamp updated_at = 3 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];

  // Friendly name of the device. Stored in Application Server.
  string name = 4;
  // Description of the device. Stored in Application Server.
  string description = 5;
  // Attributes of the device. Stored in Application Server.
  map<string,string> attributes = 6;

  // Version Identifiers. Stored in Application Server.
  EndDeviceVersionIdentifiers version_ids = 7 [(gogoproto.customname) = "VersionIDs"];

  // Default service profile. Stored in Network Server.
  string service_profile_id = 8 [(gogoproto.customname) = "ServiceProfileID"];

  // Whether the device supports class B.
  // Copied on creation from template identified by version_ids, if any or from the home Network Server device profile, if any.
  bool supports_class_b = 9;
  // Whether the device supports class C.
  // Copied on creation from template identified by version_ids, if any or from the home Network Server device profile, if any.
  bool supports_class_c = 10;
  // LoRaWAN MAC version. Stored in Network Server.
  // Copied on creation from template identified by version_ids, if any or from the home Network Server device profile, if any.
  MACVersion lorawan_version = 11 [(gogoproto.customname) = "LoRaWANVersion"];
  // LoRaWAN PHY version. Stored in Network Server.
  // Copied on creation from template identified by version_ids, if any or from the home Network Server device profile, if any.
  PHYVersion lorawan_phy_version = 12 [(gogoproto.customname) = "LoRaWANPHYVersion"];
  // ID of the frequency plan used by this device.
  // Copied on creation from template identified by version_ids, if any or from the home Network Server device profile, if any.
  string frequency_plan_id = 13 [(gogoproto.customname) = "FrequencyPlanID"];
  // Default MAC layer parameters, to which device is reset by default (e.g. on join or ResetInd). Stored in Network Server.
  // Copied on creation from template identified by version_ids, if any or from the home Network Server device profile, if any.
  MACParameters default_mac_parameters = 14 [(gogoproto.customname) = "DefaultMACParameters"];
  // Minimum frequency the device is capable of using (Hz). Stored in Network Server.
  // Copied on creation from template identified by version_ids, if any or from the home Network Server device profile, if any.
  uint64 min_frequency = 15;
  // Maximum frequency the device is capable of using (Hz). Stored in Network Server.
  // Copied on creation from template identified by version_ids, if any or from the home Network Server device profile, if any.
  uint64 max_frequency = 16;
  // Whether the device resets the frame counters (not LoRaWAN compliant). Stored in Network Server.
  // Copied on creation from template identified by version_ids, if any or from the home Network Server device profile, if any.
  bool resets_f_cnt = 17;
  // Whether the device uses 32-bit frame counters. Stored in Network Server.
  // Copied on creation from template identified by version_ids, if any or from the home Network Server device profile, if any.
  bool uses_32_bit_f_cnt = 18 [(gogoproto.customname) = "Uses32BitFCnt"];
  // The device supports join (it's OTAA).
  // Copied on creation from template identified by version_ids, if any or from the home Network Server device profile, if any.
  bool supports_join = 19;
  // Whether the device resets the join and dev nonces (not LoRaWAN 1.1 compliant). Stored in Network Server.
  // Copied on creation from template identified by version_ids, if any or from the home Network Server device profile, if any.
  bool resets_join_nonces = 20;

  // Device root keys. Stored in Join Server.
  RootKeys root_keys = 21;
  // The address (host:port) of the Network Server associated with this device. Stored in Join Server.
  string network_server_address = 22;
  // The address (host:port) of the Application Server associated with this device. Stored in Join Server.
  string application_server_address = 23;
  // Home NetID. Stored in Join Server.
  bytes net_id = 24 [(gogoproto.customtype) = "go.thethings.network/lorawan-stack/pkg/types.NetID", (gogoproto.customname) = "NetID"];
  // NOTE: Join Server address can be derived from join EUI.

  // Settings for how the Network Server handles MAC for this device. Stored in Network Server.
  MACSettings mac_settings = 25 [(gogoproto.customname) = "MACSettings"];
  // MAC state of the device. Stored in Network Server.
  MACState mac_state = 26 [(gogoproto.customname) = "MACState"];
  // Current session. Stored in Network Server.
  Session session = 27;
  // Fallback session. Stored in Network Server until RekeyInd is received.
  Session session_fallback = 28;

  // Next DevNonce to be expected (in case of LoRaWAN 1.1).
  // Stored in Join Server.
  uint32 next_dev_nonce = 29;
  // Used DevNonces (in case of LoRaWAN 1.0).
  // Stored in Join Server.
  repeated uint32 used_dev_nonces = 30;
  // Next JoinNonce/AppNonce to be used (in case of LoRaWAN 1.1).
  // Stored in Join Server.
  uint32 next_join_nonce = 31;
  // Used JoinNonces/AppNonce (in case of LoRaWAN 1.0).
  // Stored in Join Server.
  repeated uint32 used_join_nonces = 32;
  // Next Rejoin counter (type 0/2) to be expected.
  // Stored in Join Server.
  uint32 next_rj_count_0 = 33 [(gogoproto.customname) = "NextRJCount0"];
  // Next Rejoin counter (type 1) to be expected.
  // Stored in Join Server.
  uint32 next_rj_count_1 = 34 [(gogoproto.customname) = "NextRJCount1"];

  // Number of messages, after which a new DevStatus MAC command shall be scheduled.
  // Stored in Network Server.
  uint64 next_status_after = 35;
  // Time when the device status was last received via the DevStatus MAC command.
  // Stored in Network Server.
  google.protobuf.Timestamp last_status_received_at = 36 [(gogoproto.stdtime) = true];
  // The power state of the device; whether it is battery-powered or connected to an external power source.
  // Received via the DevStatus MAC command at status_received_at.
  // Stored in Network Server.
  PowerState power_state = 37;
  // Latest-known battery percentage of the device.
  // Received via the DevStatus MAC command at status_received_at or earlier.
  // Stored in Network Server.
  float battery_percentage = 38;
  // Demodulation signal-to-noise ratio (dB).
  // Received via the DevStatus MAC command at status_received_at.
  // Stored in Network Server.
  int32 downlink_margin = 39;

  // Recent uplink messages sorted by time. Stored in Network Server.
  // The number of messages stored may depend on configuration.
  repeated UplinkMessage recent_uplinks = 40;
  // Recent downlink messages sorted by time. Stored in Network Server.
  // The number of messages stored may depend on configuration.
  repeated DownlinkMessage recent_downlinks = 41;
  // Queued Application downlink messages. Stored in Application Server,
  // which sets them on the Network Server.
  repeated ApplicationDownlink queued_application_downlinks = 42;

  // The payload formatters for this end device. Stored in Application Server.
  // Copied on creation from template identified by version_ids.
  MessagePayloadFormatters formatters = 43;

  // Location of the device. Stored in Application Server.
  map<string,Location> locations = 44;
}

message EndDevices {
  repeated EndDevice end_devices = 1;
}

message CreateEndDeviceRequest {
  EndDevice end_device = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
}

message UpdateEndDeviceRequest {
  EndDevice end_device = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
  google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message GetEndDeviceRequest {
  EndDeviceIdentifiers end_device_ids = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
  google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message ListEndDevicesRequest {
  ApplicationIdentifiers application_ids = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
  google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message SetDeviceRequest {
  EndDevice device = 1 [(gogoproto.nullable) = false];
  google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}
