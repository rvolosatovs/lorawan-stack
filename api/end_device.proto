// Copyright Â© 2018 The Things Network Foundation, The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "github.com/TheThingsNetwork/ttn/api/identifiers.proto";
import "github.com/TheThingsNetwork/ttn/api/lorawan.proto";
import "github.com/TheThingsNetwork/ttn/api/metadata.proto";
import "github.com/TheThingsNetwork/ttn/api/payload_formatter.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

package ttn.v3;

option go_package = "github.com/TheThingsNetwork/ttn/pkg/ttnpb";

message KeyEnvelope {
  // The (encrypted) key.
  bytes key = 1 [(gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/pkg/types.AES128Key"];

  // The label of the RFC 3394 key-encryption-key (KEK) that was used to encrypt the key.
  string kek_label = 2 [(gogoproto.customname) = "KEKLabel"];
}

// Root keys for a LoRaWAN device.
message RootKeys {
  // Join Server issued identifier for the root keys.
  string root_key_id = 1 [(gogoproto.customname) = "RootKeyID"];

  // The (encrypted) Application Key.
  KeyEnvelope app_key = 2;

  // The (encrypted) Network Key.
  KeyEnvelope nwk_key = 3;
}

// Session keys for a LoRaWAN session.
// Only the components for which the keys were meant, will have the key-encryption-key (KEK) to decrypt the individual keys.
message SessionKeys {
  // Join Server issued identifier for the session keys.
  string session_key_id = 1 [(gogoproto.customname) = "SessionKeyID"];

  // The (encrypted) Forwarding Network Session Integrity Key (or Network Session Key in 1.0 compatibility mode).
  KeyEnvelope f_nwk_s_int_key = 2;

  // The (encrypted) Serving Network Session Integrity Key.
  KeyEnvelope s_nwk_s_int_key = 3;

  // The (encrypted) Network Session Encryption Key.
  KeyEnvelope nwk_s_enc_key = 4;

  // The (encrypted) Application Session Key.
  KeyEnvelope app_s_key = 5;
}

message Session {
  reserved 1; // RFU: Session ID
  bytes dev_addr = 2 [(gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/pkg/types.DevAddr"];
  SessionKeys keys = 3 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
  uint32 next_f_cnt_up = 4;
  uint32 next_n_f_cnt_down = 5;
  uint32 next_a_f_cnt_down = 6;
  google.protobuf.Timestamp started_at = 7 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
}

message DeviceFormatters {
  // Type of formatter used to process uplink messages.
  PayloadFormatter up_formatter = 1;

  // Parameter used by the uplink formatter.
  string up_formatter_parameter = 2;

  // Type of formatter used to format downlink messages.
  PayloadFormatter down_formatter = 3;

  // Parameter used by the downlink formatter.
  string down_formatter_parameter = 4;
}

message DeviceBrand {
  // ID of the device brand.
  string id = 1 [(gogoproto.customname) = "ID"];

  // Name of the brand.
  string name = 2;

  // URL for this brand.
  string url = 3 [(gogoproto.customname) = "URL"];

  // Logos of the brand.
  repeated string logos = 4;
}

message EndDeviceModel {
  // ID of the model.
  string model_id = 1 [(gogoproto.customname) = "ModelID"];

  // ID of the brand of this device.
  string brand_id = 2 [(gogoproto.customname) = "BrandID"];

  // Name of the device model.
  string model_name = 3;
}

message EndDeviceVersion {
  // Model of the device.
  EndDeviceModel model = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  // Hardware version of this end-device.
  string hardware_version = 2;

  // Firmware version of this end-device.
  string firmware_version = 3;

  // Photos representing the devices.
  repeated string photos = 4;

  // Default formatters defining the payload formats for this end device.
  DeviceFormatters default_formatters = 5;
}

message EndDevice {
  EndDeviceIdentifiers ids = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  // Root keys of the device.
  RootKeys root_keys = 2;

  // Next DevNonce to be expected (in case of LoRaWAN 1.1).
  uint32 next_dev_nonce = 3;

  // Used DevNonces (in case of LoRaWAN 1.0).
  repeated uint32 used_dev_nonces = 4;

  // Next JoinNonce/AppNonce to be used (in case of LoRaWAN 1.1).
  uint32 next_join_nonce = 5;

  // Used JoinNonces/AppNonce (in case of LoRaWAN 1.0).
  repeated uint32 used_join_nonces = 6;

  // Next Rejoin counter (type 0/2) to expect.
  uint32 next_rj_count_0 = 7 [(gogoproto.customname) = "NextRJCount0"];

  // Next Rejoin counter (type 1) to expect.
  uint32 next_rj_count_1 = 8 [(gogoproto.customname) = "NextRJCount1"];

  // Indicator that the device may reset the frame counters (not LoRaWAN compliant).
  bool f_cnt_resets = 9;

  // Current session.
  Session session = 10;

  // Fallback session (stored until RekeyInd received).
  Session session_fallback = 11;

  // LoRaWAN MAC version.
  MACVersion lorawan_version = 12 [(gogoproto.customname) = "LoRaWANVersion"];

  // LoRaWAN PHY version.
  PHYVersion lorawan_phy_version = 13 [(gogoproto.customname) = "LoRaWANPHYVersion"];

  // frequency_plan_id indicates the ID of the frequency plan.
  string frequency_plan_id = 14 [(gogoproto.customname) = "FrequencyPlanID"];

  // Min frequency the device is capable of using.
  uint64 min_frequency = 15;

  // Max frequency the device is capable of using.
  uint64 max_frequency = 16;

  // Max transmission power the device is capable of using.
  uint64 max_tx_power = 17;

  // LoRaWAN MAC settings for the device.
  MACSettings mac_settings = 18 [(gogoproto.customname) = "MACSettings"];

  // MAC info sent by the device.
  MACInfo mac_info = 19 [(gogoproto.customname) = "MACInfo"];

  // Current LoRaWAN MAC state.
  MACState mac_state = 20 [(gogoproto.customname) = "MACState"];

  // Desired LoRaWAN MAC state.
  MACState mac_state_desired = 21 [(gogoproto.customname) = "MACStateDesired"];

  // Location of the device.
  Location location = 22;

  // Device Attributes
  // - field names are written in snake_case
  google.protobuf.Struct attributes = 23;

  // DisableJoinNonceCheck specifies whether LoRaWAN DevNonce check procedure should be disabled.
  bool disable_join_nonce_check = 24;

  // NetworkServerAddress specifies Address(host:port) of the Network Server associated with this device.
  string network_server_address = 25 [(gogoproto.customname) = "NetworkServerAddress"];

  // ApplicationServerAddress specifies Address(host:port) of the Application Server associated with this device.
  string application_server_address = 26 [(gogoproto.customname) = "ApplicationServerAddress"];

  EndDeviceVersion version = 27 [(gogoproto.embed) = true];

  // Formatters defining the payload formats.
  DeviceFormatters formatters = 28 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  google.protobuf.Timestamp created_at = 97 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  google.protobuf.Timestamp updated_at = 98 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];

  reserved 99; // RFU: google.protobuf.Struct advanced = 99;
}

message EndDevices {
  repeated EndDevice end_devices = 1;
}

message MACSettings {
  // Use ADR
  bool adr = 1 [(gogoproto.customname) = "ADR"];
  // The ADR margin
  uint32 adr_margin = 2 [(gogoproto.customname) = "ADRMargin"];
}

// MAC State of the device (active or desired)
// This is used internally by the network server and is read only
message MACState {
  // Currently used maximum transmission power
  uint32 max_tx_power = 2;
  // Uplink dwell time is set (400ms)
  bool uplink_dwell_time = 3;
  // Downlink dwell time is set (400ms)
  bool downlink_dwell_time = 4;
  // ADR: data rate index to use
  uint32 adr_data_rate_index = 5 [(gogoproto.customname) = "ADRDataRateIndex"];
  // ADR: transmission power index to use
  uint32 adr_tx_power_index = 6 [(gogoproto.customname) = "ADRTXPowerIndex"];
  // ADR: number of retransmissions
  uint32 adr_nb_trans = 7 [(gogoproto.customname) = "ADRNbTrans"];
  // ADR: number of messages to wait before setting ADRAckReq
  uint32 adr_ack_limit = 8 [(gogoproto.customname) = "ADRAckLimit"];
  // ADR: number of messages to wait after setting ADRAckReq and before changing TxPower or DataRate
  uint32 adr_ack_delay = 9 [(gogoproto.customname) = "ADRAckDelay"];
  // Aggregated duty cycle of the device
  AggregatedDutyCycle duty_cycle = 10;
  // Rx1 delay (Rx2 delay is Rx1 delay + 1 second)
  uint32 rx_delay = 11;
  // Data rate offset for Rx1
  int32 rx1_data_rate_offset = 12;
  // Data rate index for Rx2
  uint32 rx2_data_rate_index = 13;
  // Frequency for Rx2
  uint64 rx2_frequency = 14;
  // Time after which a rejoin request will be sent
  uint32 rejoin_timer = 18;
  // Number of messages after which a rejoin request will be sent
  uint32 rejoin_counter = 19;
  // Frequency of the class B ping slot
  uint64 ping_slot_frequency = 21;
  // Data rate index of the class B ping slot
  uint32 ping_slot_data_rate_index = 22;
}

// MAC information sent by the device
// This message is read only
message MACInfo {
  // Currently active LoRaWAN device class
  // - Device class is A by default
  // - If device sets ClassB bit in uplink, this will be set to B
  // - If device sent DeviceModeInd MAC message, this will be set to that value
  Class device_class = 1;
  // When the last device status MAC message was received
  google.protobuf.Timestamp last_status_received_at = 2 [(gogoproto.stdtime) = true];
  // Battery percentage received in last device status message
  float battery_percentage = 3;
  // Downlink margin received in last device status message
  int32 downlink_margin = 4;
  // Periodicity of the class B ping slot
  PingSlotPeriod ping_slot_periodicity = 5;

  // TODO: Add info about failed MAC requests
}
