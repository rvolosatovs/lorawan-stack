// Copyright Â© 2019 The Things Network Foundation, The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "lorawan-stack/api/identifiers.proto";
import "lorawan-stack/api/rights.proto";
import "lorawan-stack/api/user.proto";

package ttn.lorawan.v3;

option go_package = "go.thethings.network/lorawan-stack/pkg/ttnpb";

service UserRegistry {
  // Register a new user. This method may be restricted by network settings.
  rpc Create(CreateUserRequest) returns (User) {
    option (google.api.http) = {
      post: "/users"
      body: "*"
    };
  };

  // Get the user with the given identifiers, selecting the fields given by the
  // field mask. The method may return more or less fields, depending on the rights
  // of the caller.
  rpc Get(GetUserRequest) returns (User) {
    option (google.api.http) = {
      get: "/users/{user_ids.user_id}"
    };
  };

  rpc Update(UpdateUserRequest) returns (User) {
    option (google.api.http) = {
      put: "/users/{user.ids.user_id}"
      body: "*"
    };
  };

  // Create a temporary password that can be used for updating a forgotten password.
  // The generated password is sent to the user's email address.
  rpc CreateTemporaryPassword(CreateTemporaryPasswordRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/users/{user_ids.user_id}/temporary_password"
    };
  }

  rpc UpdatePassword(UpdateUserPasswordRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/users/{user_ids.user_id}/password"
      body: "*"
    };
  }

  rpc Delete(UserIdentifiers) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/users/{user_id}"
    };
  };
}

service UserAccess {
  rpc ListRights(UserIdentifiers) returns (Rights) {
    option (google.api.http) = {
      get: "/users/{user_id}/rights"
    };
  };

  rpc CreateAPIKey(CreateUserAPIKeyRequest) returns (APIKey) {
    option (google.api.http) = {
      post: "/users/{user_ids.user_id}/api-keys"
      body: "*"
    };
  };

  rpc ListAPIKeys(ListUserAPIKeysRequest) returns (APIKeys) {
    option (google.api.http) = {
      get: "/users/{user_ids.user_id}/api-keys"
    };
  };

  rpc GetAPIKey(GetUserAPIKeyRequest) returns (APIKey) {
    option (google.api.http) = {
      get: "/users/{user_ids.user_id}/api-keys/{key_id}"
    };
  };

  // Update the rights of an existing user API key. To generate an API key,
  // the CreateAPIKey should be used. To delete an API key, update it
  // with zero rights. It is required for the caller to have all assigned or/and removed rights.
  rpc UpdateAPIKey(UpdateUserAPIKeyRequest) returns (APIKey) {
    option (google.api.http) = {
      put: "/users/{user_ids.user_id}/api-keys/{api_key.id}"
      body: "*"
    };
  };
}

service UserInvitationRegistry {
  rpc Send(SendInvitationRequest) returns (Invitation) {
    option (google.api.http) = {
      post: "/invitations"
      body: "*"
    };
  };

  rpc List(ListInvitationsRequest) returns (Invitations) {
    option (google.api.http) = {
      get: "/invitations"
    };
  };

  rpc Delete(DeleteInvitationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/invitations"
    };
  };
}

service UserSessionRegistry {
  rpc List(ListUserSessionsRequest) returns (UserSessions) {
    option (google.api.http) = {
      get: "/users/{user_ids.user_id}/sessions"
    };
  };
  rpc Delete(UserSessionIdentifiers) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/users/{user_ids.user_id}/sessions/{session_id}"
    };
  };
}
