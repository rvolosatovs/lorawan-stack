// Copyright Â© 2019 The Things Network Foundation, The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "lorawan-stack/api/client.proto";
import "lorawan-stack/api/identifiers.proto";
import "lorawan-stack/api/rights.proto";

package ttn.lorawan.v3;

option go_package = "go.thethings.network/lorawan-stack/pkg/ttnpb";

service ClientRegistry {
  // Create a new OAuth client. This also sets the given organization or user as
  // first collaborator with all possible rights.
  rpc Create(CreateClientRequest) returns (Client) {
    option (google.api.http) = {
      post: "/users/{collaborator.user_ids.user_id}/clients"
      body: "*"
      additional_bindings {
        post: "/organizations/{collaborator.organization_ids.organization_id}/clients"
        body: "*"
      }
    };
  };

  // Get the OAuth client with the given identifiers, selecting the fields given
  // by the field mask. The method may return more or less fields, depending on
  // the rights of the caller.
  rpc Get(GetClientRequest) returns (Client) {
    option (google.api.http) = {
      get: "/clients/{client_ids.client_id}"
    };
  };

  // List OAuth clients. See request message for details.
  rpc List(ListClientsRequest) returns (Clients) {
    option (google.api.http) = {
      get: "/clients"
      additional_bindings {
        get: "/users/{collaborator.user_ids.user_id}/clients"
      }
      additional_bindings {
        get: "/organizations/{collaborator.organization_ids.organization_id}/clients"
      }
    };
  };

  rpc Update(UpdateClientRequest) returns (Client) {
    option (google.api.http) = {
      put: "/clients/{client.ids.client_id}"
      body: "*"
    };
  };

  rpc Delete(ClientIdentifiers) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/clients/{client_id}"
    };
  };
}

service ClientAccess {
  rpc ListRights(ClientIdentifiers) returns (Rights) {
    option (google.api.http) = {
      get: "/clients/{client_id}/rights"
    };
  };

  // Get the rights of a collaborator (member) of the client.
  // Pseudo-rights in the response (such as the "_ALL" right) are not expanded.
  rpc GetCollaborator(GetClientCollaboratorRequest) returns (GetCollaboratorResponse) {
    option (google.api.http) = {
      get: "/clients/{client_ids.client_id}/collaborator"
      additional_bindings {
        get: "/clients/{client_ids.client_id}/collaborator/user/{collaborator.user_ids.user_id}"
      }
      additional_bindings {
        get: "/clients/{client_ids.client_id}/collaborator/organization/{collaborator.organization_ids.organization_id}"
      }
    };
  }

  // Set the rights of a collaborator (member) on the client. It is required for the caller to
  // have all assigned or/and removed rights.
  // Setting a collaborator without rights, removes them.
  rpc SetCollaborator(SetClientCollaboratorRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/clients/{client_ids.client_id}/collaborators"
      body: "*"
    };
  };

  rpc ListCollaborators(ListClientCollaboratorsRequest) returns (Collaborators) {
    option (google.api.http) = {
      get: "/clients/{client_ids.client_id}/collaborators"
    };
  };
}
