// Copyright Â© 2018 The Things Network Foundation, The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package test

import (
	"fmt"
	"time"

	"github.com/TheThingsNetwork/ttn/pkg/errors"
	"github.com/TheThingsNetwork/ttn/pkg/ttnpb"
	"github.com/smartystreets/assertions"
)

func settings(in interface{}) (*ttnpb.IdentityServerSettings, error) {
	if s, ok := in.(ttnpb.IdentityServerSettings); ok {
		return &s, nil
	}

	if s, ok := in.(*ttnpb.IdentityServerSettings); ok {
		return s, nil
	}

	return nil, errors.Errorf("Expected: '%v' to be of type ttnpb.IdentityServerSettings but it was not", in)
}

// ShouldBeSettings checks if two Settings resemble each other.
func ShouldBeSettings(actual interface{}, expected ...interface{}) string {
	if len(expected) != 1 {
		return fmt.Sprintf("Expected: one settings to match but got %v", len(expected))
	}

	a, err := settings(actual)
	if err != nil {
		return err.Error()
	}

	b, err := settings(expected[0])
	if err != nil {
		return err.Error()
	}

	return all(
		ShouldBeSettingsIgnoringAutoFields(a, b),
		assertions.ShouldHappenWithin(a.UpdatedAt, time.Millisecond, b.UpdatedAt),
	)
}

// ShouldBeSettingsIgnoringAutoFields checks if two Settings resemble each other
// without looking at fields that are generated by the database: UpdatedAt.
func ShouldBeSettingsIgnoringAutoFields(actual interface{}, expected ...interface{}) string {
	if len(expected) != 1 {
		return fmt.Sprintf("Expected: one settings to match but got %v", len(expected))
	}

	a, err := settings(actual)
	if err != nil {
		return err.Error()
	}

	b, err := settings(expected[0])
	if err != nil {
		return err.Error()
	}

	return all(
		assertions.ShouldResemble(a.BlacklistedIDs, b.BlacklistedIDs),
		assertions.ShouldEqual(a.SkipValidation, b.SkipValidation),
		assertions.ShouldEqual(a.InvitationOnly, b.InvitationOnly),
		assertions.ShouldEqual(a.AdminApproval, b.AdminApproval),
		assertions.ShouldEqual(a.ValidationTokenTTL, b.ValidationTokenTTL),
		assertions.ShouldResemble(a.AllowedEmails, b.AllowedEmails),
	)
}
