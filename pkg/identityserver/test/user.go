// Copyright Â© 2018 The Things Network Foundation, The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package test

import (
	"fmt"
	"time"

	"github.com/smartystreets/assertions"
	"go.thethings.network/lorawan-stack/pkg/identityserver/store"
	"go.thethings.network/lorawan-stack/pkg/ttnpb"
)

func defaultUser(in interface{}) (*ttnpb.User, error) {
	if u, ok := in.(store.User); ok {
		return u.GetUser(), nil
	}

	if u, ok := in.(ttnpb.User); ok {
		return &u, nil
	}

	if ptr, ok := in.(*ttnpb.User); ok {
		return ptr, nil
	}

	return nil, fmt.Errorf("Expected: '%v' to be of type ttnpb.User but it wasn't", in)
}

// ShouldBeUser checks if two users resemble each other.
func ShouldBeUser(actual interface{}, expected ...interface{}) string {
	if len(expected) != 1 {
		return fmt.Sprintf("Expected: one user to match but got %v", len(expected))
	}

	a, s := defaultUser(actual)
	if s != nil {
		return s.Error()
	}

	b, s := defaultUser(expected[0])
	if s != nil {
		return s.Error()
	}

	return all(
		ShouldBeUserIgnoringAutoFields(a, b),
		assertions.ShouldHappenWithin(a.CreatedAt, time.Millisecond, b.CreatedAt),
	)
}

// ShouldBeUserIgnoringAutoFields checks if two users resemble each other
// without looking at fields that are generated by the database: joined.
func ShouldBeUserIgnoringAutoFields(actual interface{}, expected ...interface{}) string {
	if len(expected) != 1 {
		return fmt.Sprintf("Expected: one user to match but got %v", len(expected))
	}

	a, s := defaultUser(actual)
	if s != nil {
		return s.Error()
	}

	b, s := defaultUser(expected[0])
	if s != nil {
		return s.Error()
	}

	return all(
		assertions.ShouldEqual(a.UserIdentifiers.UserID, b.UserIdentifiers.UserID),
		assertions.ShouldEqual(a.UserIdentifiers.Email, b.UserIdentifiers.Email),
		assertions.ShouldEqual(a.Name, b.Name),
		assertions.ShouldEqual(a.Password, b.Password),
		assertTime(a.ValidatedAt, b.ValidatedAt),
		assertTime(&a.PasswordUpdatedAt, &b.PasswordUpdatedAt),
		assertions.ShouldEqual(a.Admin, b.Admin),
		assertions.ShouldEqual(a.RequirePasswordUpdate, b.RequirePasswordUpdate),
	)
}
