// Copyright Â© 2017 The Things Network Foundation, distributed under the MIT license (see LICENSE file)

package test

import (
	"fmt"
	"time"

	"github.com/TheThingsNetwork/ttn/pkg/identityserver/types"
	"github.com/smartystreets/assertions"
)

const success = ""

func all(results ...string) string {
	for _, res := range results {
		if res != success {
			return res
		}
	}

	return success
}

func defaultUser(in interface{}) (*types.DefaultUser, error) {
	if u, ok := in.(types.User); ok {
		return u.GetUser(), nil
	}

	if d, ok := in.(types.DefaultUser); ok {
		return &d, nil
	}

	if ptr, ok := in.(*types.DefaultUser); ok {
		return ptr, nil
	}

	return nil, fmt.Errorf("Expected: '%v' to be of type types.DefaultUser but it wasn't", in)
}

// ShouldBeUser checks if two users resemble each other.
func ShouldBeUser(actual interface{}, expected ...interface{}) string {
	if len(expected) != 1 {
		return fmt.Sprintf("Expected: one user to match but got %v", len(expected))
	}

	a, s := defaultUser(actual)
	if s != nil {
		return s.Error()
	}

	b, s := defaultUser(expected[0])
	if s != nil {
		return s.Error()
	}

	return all(
		ShouldBeUserIgnoringAutoFields(a, b),
		assertions.ShouldHappenWithin(a.Joined, time.Millisecond, b.Joined),
	)
}

// ShouldBeUserIgnoringAutoFields checks if two users resemble each other
// without looking at fields that are generated by the database: joined.
func ShouldBeUserIgnoringAutoFields(actual interface{}, expected ...interface{}) string {
	if len(expected) != 1 {
		return fmt.Sprintf("Expected: one user to match but got %v", len(expected))
	}

	a, s := defaultUser(actual)
	if s != nil {
		return s.Error()
	}

	b, s := defaultUser(expected[0])
	if s != nil {
		return s.Error()
	}

	return all(
		assertions.ShouldEqual(a.Username, b.Username),
		assertions.ShouldEqual(a.Email, b.Email),
		assertions.ShouldEqual(a.Password, b.Password),
		assertions.ShouldEqual(a.Validated, b.Validated),
		assertions.ShouldEqual(a.Admin, b.Admin),
		assertions.ShouldEqual(a.God, b.God),
	)
}
