// Copyright Â© 2017 The Things Network Foundation, distributed under the MIT license (see LICENSE file)

package test

import (
	"fmt"
	"time"

	"github.com/TheThingsNetwork/ttn/pkg/identityserver/types"
	"github.com/smartystreets/assertions"
)

func defaultClient(in interface{}) (*types.DefaultClient, error) {
	if u, ok := in.(types.Client); ok {
		return u.GetClient(), nil
	}

	if d, ok := in.(types.DefaultClient); ok {
		return &d, nil
	}

	if ptr, ok := in.(*types.DefaultClient); ok {
		return ptr, nil
	}

	return nil, fmt.Errorf("Expected: '%v' to be of type types.DefaultClient but it was not", in)
}

// ShouldBeClient checks if two clients resemble each other
func ShouldBeClient(actual interface{}, expected ...interface{}) string {
	if len(expected) != 1 {
		return fmt.Sprintf("Expected: one client to match but got %v", len(expected))
	}

	a, s := defaultClient(actual)
	if s != nil {
		return s.Error()
	}

	b, s := defaultClient(expected[0])
	if s != nil {
		return s.Error()
	}

	return all(
		ShouldBeClientIgnoringAutoFields(a, b),
		assertions.ShouldHappenWithin(a.Created, time.Millisecond, b.Created),
	)
}

// ShouldBeClientIgnoringAutoFields checks if two clients resemble each other
// without looking at fields that are generated by the database: created
func ShouldBeClientIgnoringAutoFields(actual interface{}, expected ...interface{}) string {
	if len(expected) != 1 {
		return fmt.Sprintf("Expected: one client to match but got %v", len(expected))
	}

	a, s := defaultClient(actual)
	if s != nil {
		return s.Error()
	}

	b, s := defaultClient(expected[0])
	if s != nil {
		return s.Error()
	}

	return all(
		assertions.ShouldEqual(a.ID, b.ID),
		assertions.ShouldEqual(a.Description, b.Description),
		assertions.ShouldEqual(a.Secret, b.Secret),
		assertions.ShouldEqual(a.URI, b.URI),
		assertions.ShouldEqual(a.State, b.State),
		assertions.ShouldEqual(a.Official, b.Official),
		assertions.ShouldResemble(a.Grants, b.Grants),
		assertions.ShouldResemble(a.Scope, b.Scope),
		assertions.ShouldEqual(a.Archived, b.Archived),
	)
}
