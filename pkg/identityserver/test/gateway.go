// Copyright Â© 2017 The Things Network Foundation, distributed under the MIT license (see LICENSE file)

package test

import (
	"fmt"
	"time"

	"github.com/TheThingsNetwork/ttn/pkg/identityserver/types"
	"github.com/smartystreets/assertions"
)

func defaultGateway(in interface{}) (*types.DefaultGateway, error) {
	if u, ok := in.(types.Gateway); ok {
		return u.GetGateway(), nil
	}

	if d, ok := in.(types.DefaultGateway); ok {
		return &d, nil
	}

	if ptr, ok := in.(*types.DefaultGateway); ok {
		return ptr, nil
	}

	return nil, fmt.Errorf("Expected: '%v' to be of type types.DefaultGateway but it was not", in)
}

// ShouldBeGateway checks if two Gateways resemble each other
func ShouldBeGateway(actual interface{}, expected ...interface{}) string {
	if len(expected) != 1 {
		return fmt.Sprintf("Expected: one gateway to match but got %v", len(expected))
	}

	a, s := defaultGateway(actual)
	if s != nil {
		return s.Error()
	}

	b, s := defaultGateway(expected[0])
	if s != nil {
		return s.Error()
	}

	return all(
		ShouldBeGatewayIgnoringAutoFields(a, b),
		assertions.ShouldHappenWithin(a.Created, time.Millisecond, b.Created),
	)
}

// ShouldBeGatewayIgnoringAutoFields checks if two Gateways resemble each other
// without looking at fields that are generated by the database: created
func ShouldBeGatewayIgnoringAutoFields(actual interface{}, expected ...interface{}) string {
	if len(expected) != 1 {
		return fmt.Sprintf("Expected: one gateway to match but got %v", len(expected))
	}

	a, s := defaultGateway(actual)
	if s != nil {
		return s.Error()
	}

	b, s := defaultGateway(expected[0])
	if s != nil {
		return s.Error()
	}

	return all(
		assertions.ShouldEqual(a.ID, b.ID),
		assertions.ShouldEqual(a.Description, b.Description),
		assertions.ShouldEqual(a.FrequencyPlan, b.FrequencyPlan),
		assertions.ShouldEqual(a.Key, b.Key),
		assertions.ShouldEqual(a.Activated, b.Activated),
		assertions.ShouldEqual(a.StatusPublic, b.StatusPublic),
		assertions.ShouldEqual(a.LocationPublic, b.LocationPublic),
		assertions.ShouldEqual(a.OwnerPublic, b.OwnerPublic),
		assertions.ShouldEqual(a.AutoUpdate, b.AutoUpdate),
		assertions.ShouldResemble(a.Brand, b.Brand),
		assertions.ShouldResemble(a.Model, b.Model),
		assertions.ShouldResemble(a.Antennas, b.Antennas),
		assertions.ShouldResemble(a.Attributes, b.Attributes),
		assertions.ShouldResemble(a.Routers, b.Routers),
		assertions.ShouldEqual(a.Archived, b.Archived),
	)
}
