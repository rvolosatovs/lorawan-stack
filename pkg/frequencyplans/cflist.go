// Copyright Â© 2018 The Things Network Foundation, The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package frequencyplans

import (
	"go.thethings.network/lorawan-stack/pkg/band"
	"go.thethings.network/lorawan-stack/pkg/ttnpb"
)

// CFList generated by this frequency plan, for the version used by a device.
// This function returns nil if the CFList could not be computed, or if the
// device does not support CFLists.
func CFList(fp ttnpb.FrequencyPlan, version ttnpb.PHYVersion) *ttnpb.CFList {
	band, err := band.GetByID(fp.GetBandID())
	if err != nil {
		return nil
	}

	band, err = band.Version(version)
	if err != nil {
		return nil
	}

	if !band.ImplementsCFList {
		return nil
	}

	switch band.CFListType {
	case ttnpb.CFListType_CHANNEL_MASKS:
		return chMaskCFList(fp, band)
	case ttnpb.CFListType_FREQUENCIES:
		return frequenciesCFList(fp, band)
	default:
		return nil
	}
}

func chMaskCFList(fp ttnpb.FrequencyPlan, band band.Band) *ttnpb.CFList {
	cfList := &ttnpb.CFList{
		Type:    ttnpb.CFListType_CHANNEL_MASKS,
		ChMasks: []bool{},
	}

	for _, bandChannel := range band.UplinkChannels {
		var channelEnabled bool
		for _, fpChannel := range fp.Channels {
			if uint64(fpChannel.Frequency) == bandChannel.Frequency {
				channelEnabled = true
			}
		}
		cfList.ChMasks = append(cfList.ChMasks, channelEnabled)
	}

	return cfList
}

func frequenciesCFList(fp ttnpb.FrequencyPlan, band band.Band) *ttnpb.CFList {
	cfList := &ttnpb.CFList{Type: ttnpb.CFListType_FREQUENCIES}

fpChannelsList:
	for _, fpChannel := range fp.Channels {
		for _, bandChannel := range band.UplinkChannels {
			if uint64(fpChannel.Frequency) == bandChannel.Frequency {
				continue fpChannelsList
			}
		}
		cfList.Freq = append(cfList.Freq, fpChannel.Frequency/100)
	}

	return cfList
}
