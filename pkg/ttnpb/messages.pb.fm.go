// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import fmt "fmt"

var _UplinkMessageFieldPaths = [...]string{
	"correlation_ids",
	"end_device_ids",
	"end_device_ids.application_ids",
	"end_device_ids.application_ids.application_id",
	"end_device_ids.dev_addr",
	"end_device_ids.dev_eui",
	"end_device_ids.device_id",
	"end_device_ids.join_eui",
	"payload",
	"payload.join_accept_payload",
	"payload.join_accept_payload.cf_list",
	"payload.join_accept_payload.cf_list.ch_masks",
	"payload.join_accept_payload.cf_list.freq",
	"payload.join_accept_payload.cf_list.type",
	"payload.join_accept_payload.dev_addr",
	"payload.join_accept_payload.dl_settings",
	"payload.join_accept_payload.dl_settings.opt_neg",
	"payload.join_accept_payload.dl_settings.rx1_dr_offset",
	"payload.join_accept_payload.dl_settings.rx2_dr",
	"payload.join_accept_payload.encrypted",
	"payload.join_accept_payload.join_nonce",
	"payload.join_accept_payload.net_id",
	"payload.join_accept_payload.rx_delay",
	"payload.join_request_payload",
	"payload.join_request_payload.dev_eui",
	"payload.join_request_payload.dev_nonce",
	"payload.join_request_payload.join_eui",
	"payload.m_hdr",
	"payload.m_hdr.m_type",
	"payload.m_hdr.major",
	"payload.mac_payload",
	"payload.mac_payload.decoded_payload",
	"payload.mac_payload.f_hdr",
	"payload.mac_payload.f_hdr.dev_addr",
	"payload.mac_payload.f_hdr.f_cnt",
	"payload.mac_payload.f_hdr.f_ctrl",
	"payload.mac_payload.f_hdr.f_ctrl.ack",
	"payload.mac_payload.f_hdr.f_ctrl.adr",
	"payload.mac_payload.f_hdr.f_ctrl.adr_ack_req",
	"payload.mac_payload.f_hdr.f_ctrl.class_b",
	"payload.mac_payload.f_hdr.f_ctrl.f_pending",
	"payload.mac_payload.f_hdr.f_opts",
	"payload.mac_payload.f_port",
	"payload.mac_payload.frm_payload",
	"payload.mic",
	"payload.rejoin_request_payload",
	"payload.rejoin_request_payload.dev_eui",
	"payload.rejoin_request_payload.join_eui",
	"payload.rejoin_request_payload.net_id",
	"payload.rejoin_request_payload.rejoin_cnt",
	"payload.rejoin_request_payload.rejoin_type",
	"raw_payload",
	"received_at",
	"rx_metadata",
	"settings",
	"settings.bandwidth",
	"settings.bit_rate",
	"settings.channel_index",
	"settings.coding_rate",
	"settings.data_rate_index",
	"settings.enable_crc",
	"settings.frequency",
	"settings.invert_polarization",
	"settings.modulation",
	"settings.spreading_factor",
	"settings.tx_power",
}

func (*UplinkMessage) FieldMaskPaths() []string {
	ret := make([]string, len(_UplinkMessageFieldPaths))
	copy(ret, _UplinkMessageFieldPaths[:])
	return ret
}

func (dst *UplinkMessage) SetFields(src *UplinkMessage, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "correlation_ids":
			dst.CorrelationIDs = src.CorrelationIDs
		case "end_device_ids":
			dst.EndDeviceIDs = src.EndDeviceIDs
		case "end_device_ids.application_ids":
			if dst.EndDeviceIDs == nil {
				dst.EndDeviceIDs = &EndDeviceIdentifiers{}
			}
			dst.EndDeviceIDs.SetFields(src.EndDeviceIDs, _pathsWithoutPrefix("end_device_ids", paths)...)
		case "end_device_ids.application_ids.application_id":
			if dst.EndDeviceIDs == nil {
				dst.EndDeviceIDs = &EndDeviceIdentifiers{}
			}
			dst.EndDeviceIDs.SetFields(src.EndDeviceIDs, _pathsWithoutPrefix("end_device_ids", paths)...)
		case "end_device_ids.dev_addr":
			if dst.EndDeviceIDs == nil {
				dst.EndDeviceIDs = &EndDeviceIdentifiers{}
			}
			dst.EndDeviceIDs.SetFields(src.EndDeviceIDs, _pathsWithoutPrefix("end_device_ids", paths)...)
		case "end_device_ids.dev_eui":
			if dst.EndDeviceIDs == nil {
				dst.EndDeviceIDs = &EndDeviceIdentifiers{}
			}
			dst.EndDeviceIDs.SetFields(src.EndDeviceIDs, _pathsWithoutPrefix("end_device_ids", paths)...)
		case "end_device_ids.device_id":
			if dst.EndDeviceIDs == nil {
				dst.EndDeviceIDs = &EndDeviceIdentifiers{}
			}
			dst.EndDeviceIDs.SetFields(src.EndDeviceIDs, _pathsWithoutPrefix("end_device_ids", paths)...)
		case "end_device_ids.join_eui":
			if dst.EndDeviceIDs == nil {
				dst.EndDeviceIDs = &EndDeviceIdentifiers{}
			}
			dst.EndDeviceIDs.SetFields(src.EndDeviceIDs, _pathsWithoutPrefix("end_device_ids", paths)...)
		case "payload":
			dst.Payload = src.Payload
		case "payload.join_accept_payload":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_accept_payload.cf_list":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_accept_payload.cf_list.ch_masks":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_accept_payload.cf_list.freq":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_accept_payload.cf_list.type":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_accept_payload.dev_addr":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_accept_payload.dl_settings":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_accept_payload.dl_settings.opt_neg":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_accept_payload.dl_settings.rx1_dr_offset":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_accept_payload.dl_settings.rx2_dr":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_accept_payload.encrypted":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_accept_payload.join_nonce":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_accept_payload.net_id":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_accept_payload.rx_delay":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_request_payload":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_request_payload.dev_eui":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_request_payload.dev_nonce":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_request_payload.join_eui":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.m_hdr":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.m_hdr.m_type":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.m_hdr.major":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload.decoded_payload":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload.f_hdr":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload.f_hdr.dev_addr":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload.f_hdr.f_cnt":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload.f_hdr.f_ctrl":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload.f_hdr.f_ctrl.ack":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload.f_hdr.f_ctrl.adr":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload.f_hdr.f_ctrl.adr_ack_req":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload.f_hdr.f_ctrl.class_b":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload.f_hdr.f_ctrl.f_pending":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload.f_hdr.f_opts":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload.f_port":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload.frm_payload":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mic":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.rejoin_request_payload":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.rejoin_request_payload.dev_eui":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.rejoin_request_payload.join_eui":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.rejoin_request_payload.net_id":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.rejoin_request_payload.rejoin_cnt":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.rejoin_request_payload.rejoin_type":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "raw_payload":
			dst.RawPayload = src.RawPayload
		case "received_at":
			dst.ReceivedAt = src.ReceivedAt
		case "rx_metadata":
			dst.RxMetadata = src.RxMetadata
		case "settings":
			dst.Settings = src.Settings
		case "settings.bandwidth":
			dst.Settings.SetFields(&src.Settings, _pathsWithoutPrefix("settings", paths)...)
		case "settings.bit_rate":
			dst.Settings.SetFields(&src.Settings, _pathsWithoutPrefix("settings", paths)...)
		case "settings.channel_index":
			dst.Settings.SetFields(&src.Settings, _pathsWithoutPrefix("settings", paths)...)
		case "settings.coding_rate":
			dst.Settings.SetFields(&src.Settings, _pathsWithoutPrefix("settings", paths)...)
		case "settings.data_rate_index":
			dst.Settings.SetFields(&src.Settings, _pathsWithoutPrefix("settings", paths)...)
		case "settings.enable_crc":
			dst.Settings.SetFields(&src.Settings, _pathsWithoutPrefix("settings", paths)...)
		case "settings.frequency":
			dst.Settings.SetFields(&src.Settings, _pathsWithoutPrefix("settings", paths)...)
		case "settings.invert_polarization":
			dst.Settings.SetFields(&src.Settings, _pathsWithoutPrefix("settings", paths)...)
		case "settings.modulation":
			dst.Settings.SetFields(&src.Settings, _pathsWithoutPrefix("settings", paths)...)
		case "settings.spreading_factor":
			dst.Settings.SetFields(&src.Settings, _pathsWithoutPrefix("settings", paths)...)
		case "settings.tx_power":
			dst.Settings.SetFields(&src.Settings, _pathsWithoutPrefix("settings", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _DownlinkMessageFieldPaths = [...]string{
	"correlation_ids",
	"end_device_ids",
	"end_device_ids.application_ids",
	"end_device_ids.application_ids.application_id",
	"end_device_ids.dev_addr",
	"end_device_ids.dev_eui",
	"end_device_ids.device_id",
	"end_device_ids.join_eui",
	"payload",
	"payload.join_accept_payload",
	"payload.join_accept_payload.cf_list",
	"payload.join_accept_payload.cf_list.ch_masks",
	"payload.join_accept_payload.cf_list.freq",
	"payload.join_accept_payload.cf_list.type",
	"payload.join_accept_payload.dev_addr",
	"payload.join_accept_payload.dl_settings",
	"payload.join_accept_payload.dl_settings.opt_neg",
	"payload.join_accept_payload.dl_settings.rx1_dr_offset",
	"payload.join_accept_payload.dl_settings.rx2_dr",
	"payload.join_accept_payload.encrypted",
	"payload.join_accept_payload.join_nonce",
	"payload.join_accept_payload.net_id",
	"payload.join_accept_payload.rx_delay",
	"payload.join_request_payload",
	"payload.join_request_payload.dev_eui",
	"payload.join_request_payload.dev_nonce",
	"payload.join_request_payload.join_eui",
	"payload.m_hdr",
	"payload.m_hdr.m_type",
	"payload.m_hdr.major",
	"payload.mac_payload",
	"payload.mac_payload.decoded_payload",
	"payload.mac_payload.f_hdr",
	"payload.mac_payload.f_hdr.dev_addr",
	"payload.mac_payload.f_hdr.f_cnt",
	"payload.mac_payload.f_hdr.f_ctrl",
	"payload.mac_payload.f_hdr.f_ctrl.ack",
	"payload.mac_payload.f_hdr.f_ctrl.adr",
	"payload.mac_payload.f_hdr.f_ctrl.adr_ack_req",
	"payload.mac_payload.f_hdr.f_ctrl.class_b",
	"payload.mac_payload.f_hdr.f_ctrl.f_pending",
	"payload.mac_payload.f_hdr.f_opts",
	"payload.mac_payload.f_port",
	"payload.mac_payload.frm_payload",
	"payload.mic",
	"payload.rejoin_request_payload",
	"payload.rejoin_request_payload.dev_eui",
	"payload.rejoin_request_payload.join_eui",
	"payload.rejoin_request_payload.net_id",
	"payload.rejoin_request_payload.rejoin_cnt",
	"payload.rejoin_request_payload.rejoin_type",
	"raw_payload",
	"settings",
	"settings.bandwidth",
	"settings.bit_rate",
	"settings.channel_index",
	"settings.coding_rate",
	"settings.data_rate_index",
	"settings.enable_crc",
	"settings.frequency",
	"settings.invert_polarization",
	"settings.modulation",
	"settings.spreading_factor",
	"settings.tx_power",
	"tx_metadata",
	"tx_metadata.advanced",
	"tx_metadata.antenna_index",
	"tx_metadata.gateway_ids",
	"tx_metadata.gateway_ids.eui",
	"tx_metadata.gateway_ids.gateway_id",
	"tx_metadata.time",
	"tx_metadata.timestamp",
}

func (*DownlinkMessage) FieldMaskPaths() []string {
	ret := make([]string, len(_DownlinkMessageFieldPaths))
	copy(ret, _DownlinkMessageFieldPaths[:])
	return ret
}

func (dst *DownlinkMessage) SetFields(src *DownlinkMessage, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "correlation_ids":
			dst.CorrelationIDs = src.CorrelationIDs
		case "end_device_ids":
			dst.EndDeviceIDs = src.EndDeviceIDs
		case "end_device_ids.application_ids":
			if dst.EndDeviceIDs == nil {
				dst.EndDeviceIDs = &EndDeviceIdentifiers{}
			}
			dst.EndDeviceIDs.SetFields(src.EndDeviceIDs, _pathsWithoutPrefix("end_device_ids", paths)...)
		case "end_device_ids.application_ids.application_id":
			if dst.EndDeviceIDs == nil {
				dst.EndDeviceIDs = &EndDeviceIdentifiers{}
			}
			dst.EndDeviceIDs.SetFields(src.EndDeviceIDs, _pathsWithoutPrefix("end_device_ids", paths)...)
		case "end_device_ids.dev_addr":
			if dst.EndDeviceIDs == nil {
				dst.EndDeviceIDs = &EndDeviceIdentifiers{}
			}
			dst.EndDeviceIDs.SetFields(src.EndDeviceIDs, _pathsWithoutPrefix("end_device_ids", paths)...)
		case "end_device_ids.dev_eui":
			if dst.EndDeviceIDs == nil {
				dst.EndDeviceIDs = &EndDeviceIdentifiers{}
			}
			dst.EndDeviceIDs.SetFields(src.EndDeviceIDs, _pathsWithoutPrefix("end_device_ids", paths)...)
		case "end_device_ids.device_id":
			if dst.EndDeviceIDs == nil {
				dst.EndDeviceIDs = &EndDeviceIdentifiers{}
			}
			dst.EndDeviceIDs.SetFields(src.EndDeviceIDs, _pathsWithoutPrefix("end_device_ids", paths)...)
		case "end_device_ids.join_eui":
			if dst.EndDeviceIDs == nil {
				dst.EndDeviceIDs = &EndDeviceIdentifiers{}
			}
			dst.EndDeviceIDs.SetFields(src.EndDeviceIDs, _pathsWithoutPrefix("end_device_ids", paths)...)
		case "payload":
			dst.Payload = src.Payload
		case "payload.join_accept_payload":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_accept_payload.cf_list":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_accept_payload.cf_list.ch_masks":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_accept_payload.cf_list.freq":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_accept_payload.cf_list.type":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_accept_payload.dev_addr":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_accept_payload.dl_settings":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_accept_payload.dl_settings.opt_neg":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_accept_payload.dl_settings.rx1_dr_offset":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_accept_payload.dl_settings.rx2_dr":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_accept_payload.encrypted":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_accept_payload.join_nonce":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_accept_payload.net_id":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_accept_payload.rx_delay":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_request_payload":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_request_payload.dev_eui":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_request_payload.dev_nonce":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_request_payload.join_eui":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.m_hdr":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.m_hdr.m_type":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.m_hdr.major":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload.decoded_payload":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload.f_hdr":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload.f_hdr.dev_addr":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload.f_hdr.f_cnt":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload.f_hdr.f_ctrl":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload.f_hdr.f_ctrl.ack":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload.f_hdr.f_ctrl.adr":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload.f_hdr.f_ctrl.adr_ack_req":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload.f_hdr.f_ctrl.class_b":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload.f_hdr.f_ctrl.f_pending":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload.f_hdr.f_opts":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload.f_port":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload.frm_payload":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mic":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.rejoin_request_payload":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.rejoin_request_payload.dev_eui":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.rejoin_request_payload.join_eui":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.rejoin_request_payload.net_id":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.rejoin_request_payload.rejoin_cnt":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.rejoin_request_payload.rejoin_type":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "raw_payload":
			dst.RawPayload = src.RawPayload
		case "settings":
			dst.Settings = src.Settings
		case "settings.bandwidth":
			dst.Settings.SetFields(&src.Settings, _pathsWithoutPrefix("settings", paths)...)
		case "settings.bit_rate":
			dst.Settings.SetFields(&src.Settings, _pathsWithoutPrefix("settings", paths)...)
		case "settings.channel_index":
			dst.Settings.SetFields(&src.Settings, _pathsWithoutPrefix("settings", paths)...)
		case "settings.coding_rate":
			dst.Settings.SetFields(&src.Settings, _pathsWithoutPrefix("settings", paths)...)
		case "settings.data_rate_index":
			dst.Settings.SetFields(&src.Settings, _pathsWithoutPrefix("settings", paths)...)
		case "settings.enable_crc":
			dst.Settings.SetFields(&src.Settings, _pathsWithoutPrefix("settings", paths)...)
		case "settings.frequency":
			dst.Settings.SetFields(&src.Settings, _pathsWithoutPrefix("settings", paths)...)
		case "settings.invert_polarization":
			dst.Settings.SetFields(&src.Settings, _pathsWithoutPrefix("settings", paths)...)
		case "settings.modulation":
			dst.Settings.SetFields(&src.Settings, _pathsWithoutPrefix("settings", paths)...)
		case "settings.spreading_factor":
			dst.Settings.SetFields(&src.Settings, _pathsWithoutPrefix("settings", paths)...)
		case "settings.tx_power":
			dst.Settings.SetFields(&src.Settings, _pathsWithoutPrefix("settings", paths)...)
		case "tx_metadata":
			dst.TxMetadata = src.TxMetadata
		case "tx_metadata.advanced":
			dst.TxMetadata.SetFields(&src.TxMetadata, _pathsWithoutPrefix("tx_metadata", paths)...)
		case "tx_metadata.antenna_index":
			dst.TxMetadata.SetFields(&src.TxMetadata, _pathsWithoutPrefix("tx_metadata", paths)...)
		case "tx_metadata.gateway_ids":
			dst.TxMetadata.SetFields(&src.TxMetadata, _pathsWithoutPrefix("tx_metadata", paths)...)
		case "tx_metadata.gateway_ids.eui":
			dst.TxMetadata.SetFields(&src.TxMetadata, _pathsWithoutPrefix("tx_metadata", paths)...)
		case "tx_metadata.gateway_ids.gateway_id":
			dst.TxMetadata.SetFields(&src.TxMetadata, _pathsWithoutPrefix("tx_metadata", paths)...)
		case "tx_metadata.time":
			dst.TxMetadata.SetFields(&src.TxMetadata, _pathsWithoutPrefix("tx_metadata", paths)...)
		case "tx_metadata.timestamp":
			dst.TxMetadata.SetFields(&src.TxMetadata, _pathsWithoutPrefix("tx_metadata", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _TxAcknowledgmentFieldPaths = [...]string{
	"correlation_ids",
	"result",
}

func (*TxAcknowledgment) FieldMaskPaths() []string {
	ret := make([]string, len(_TxAcknowledgmentFieldPaths))
	copy(ret, _TxAcknowledgmentFieldPaths[:])
	return ret
}

func (dst *TxAcknowledgment) SetFields(src *TxAcknowledgment, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "correlation_ids":
			dst.CorrelationIDs = src.CorrelationIDs
		case "result":
			dst.Result = src.Result
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _ApplicationUplinkFieldPaths = [...]string{
	"decoded_payload",
	"f_cnt",
	"f_port",
	"frm_payload",
	"rx_metadata",
	"session_key_id",
}

func (*ApplicationUplink) FieldMaskPaths() []string {
	ret := make([]string, len(_ApplicationUplinkFieldPaths))
	copy(ret, _ApplicationUplinkFieldPaths[:])
	return ret
}

func (dst *ApplicationUplink) SetFields(src *ApplicationUplink, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "decoded_payload":
			dst.DecodedPayload = src.DecodedPayload
		case "f_cnt":
			dst.FCnt = src.FCnt
		case "f_port":
			dst.FPort = src.FPort
		case "frm_payload":
			dst.FRMPayload = src.FRMPayload
		case "rx_metadata":
			dst.RxMetadata = src.RxMetadata
		case "session_key_id":
			dst.SessionKeyID = src.SessionKeyID
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _ApplicationLocationFieldPaths = [...]string{
	"attributes",
	"location",
	"location.accuracy",
	"location.altitude",
	"location.latitude",
	"location.longitude",
	"location.source",
	"service",
}

func (*ApplicationLocation) FieldMaskPaths() []string {
	ret := make([]string, len(_ApplicationLocationFieldPaths))
	copy(ret, _ApplicationLocationFieldPaths[:])
	return ret
}

func (dst *ApplicationLocation) SetFields(src *ApplicationLocation, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "attributes":
			dst.Attributes = src.Attributes
		case "location":
			dst.Location = src.Location
		case "location.accuracy":
			dst.Location.SetFields(&src.Location, _pathsWithoutPrefix("location", paths)...)
		case "location.altitude":
			dst.Location.SetFields(&src.Location, _pathsWithoutPrefix("location", paths)...)
		case "location.latitude":
			dst.Location.SetFields(&src.Location, _pathsWithoutPrefix("location", paths)...)
		case "location.longitude":
			dst.Location.SetFields(&src.Location, _pathsWithoutPrefix("location", paths)...)
		case "location.source":
			dst.Location.SetFields(&src.Location, _pathsWithoutPrefix("location", paths)...)
		case "service":
			dst.Service = src.Service
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _ApplicationJoinAcceptFieldPaths = [...]string{
	"app_s_key",
	"app_s_key.kek_label",
	"app_s_key.key",
	"invalidated_downlinks",
	"pending_session",
	"session_key_id",
}

func (*ApplicationJoinAccept) FieldMaskPaths() []string {
	ret := make([]string, len(_ApplicationJoinAcceptFieldPaths))
	copy(ret, _ApplicationJoinAcceptFieldPaths[:])
	return ret
}

func (dst *ApplicationJoinAccept) SetFields(src *ApplicationJoinAccept, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "app_s_key":
			dst.AppSKey = src.AppSKey
		case "app_s_key.kek_label":
			if dst.AppSKey == nil {
				dst.AppSKey = &KeyEnvelope{}
			}
			dst.AppSKey.SetFields(src.AppSKey, _pathsWithoutPrefix("app_s_key", paths)...)
		case "app_s_key.key":
			if dst.AppSKey == nil {
				dst.AppSKey = &KeyEnvelope{}
			}
			dst.AppSKey.SetFields(src.AppSKey, _pathsWithoutPrefix("app_s_key", paths)...)
		case "invalidated_downlinks":
			dst.InvalidatedDownlinks = src.InvalidatedDownlinks
		case "pending_session":
			dst.PendingSession = src.PendingSession
		case "session_key_id":
			dst.SessionKeyID = src.SessionKeyID
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _ApplicationDownlinkFieldPaths = [...]string{
	"class_b_c",
	"class_b_c.gateways",
	"class_b_c.time",
	"confirmed",
	"correlation_ids",
	"decoded_payload",
	"f_cnt",
	"f_port",
	"frm_payload",
	"session_key_id",
}

func (*ApplicationDownlink) FieldMaskPaths() []string {
	ret := make([]string, len(_ApplicationDownlinkFieldPaths))
	copy(ret, _ApplicationDownlinkFieldPaths[:])
	return ret
}

func (dst *ApplicationDownlink) SetFields(src *ApplicationDownlink, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "class_b_c":
			dst.ClassBC = src.ClassBC
		case "class_b_c.gateways":
			if dst.ClassBC == nil {
				dst.ClassBC = &ApplicationDownlink_ClassBC{}
			}
			dst.ClassBC.SetFields(src.ClassBC, _pathsWithoutPrefix("class_b_c", paths)...)
		case "class_b_c.time":
			if dst.ClassBC == nil {
				dst.ClassBC = &ApplicationDownlink_ClassBC{}
			}
			dst.ClassBC.SetFields(src.ClassBC, _pathsWithoutPrefix("class_b_c", paths)...)
		case "confirmed":
			dst.Confirmed = src.Confirmed
		case "correlation_ids":
			dst.CorrelationIDs = src.CorrelationIDs
		case "decoded_payload":
			dst.DecodedPayload = src.DecodedPayload
		case "f_cnt":
			dst.FCnt = src.FCnt
		case "f_port":
			dst.FPort = src.FPort
		case "frm_payload":
			dst.FRMPayload = src.FRMPayload
		case "session_key_id":
			dst.SessionKeyID = src.SessionKeyID
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _ApplicationDownlink_ClassBCFieldPaths = [...]string{
	"gateways",
	"time",
}

func (*ApplicationDownlink_ClassBC) FieldMaskPaths() []string {
	ret := make([]string, len(_ApplicationDownlink_ClassBCFieldPaths))
	copy(ret, _ApplicationDownlink_ClassBCFieldPaths[:])
	return ret
}

func (dst *ApplicationDownlink_ClassBC) SetFields(src *ApplicationDownlink_ClassBC, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "gateways":
			dst.Gateways = src.Gateways
		case "time":
			dst.Time = src.Time
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _ApplicationDownlink_ClassBC_GatewayAntennaIdentifiersFieldPaths = [...]string{
	"antenna_index",
	"gateway_ids",
	"gateway_ids.eui",
	"gateway_ids.gateway_id",
}

func (*ApplicationDownlink_ClassBC_GatewayAntennaIdentifiers) FieldMaskPaths() []string {
	ret := make([]string, len(_ApplicationDownlink_ClassBC_GatewayAntennaIdentifiersFieldPaths))
	copy(ret, _ApplicationDownlink_ClassBC_GatewayAntennaIdentifiersFieldPaths[:])
	return ret
}

func (dst *ApplicationDownlink_ClassBC_GatewayAntennaIdentifiers) SetFields(src *ApplicationDownlink_ClassBC_GatewayAntennaIdentifiers, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "antenna_index":
			dst.AntennaIndex = src.AntennaIndex
		case "gateway_ids":
			dst.GatewayIdentifiers = src.GatewayIdentifiers
		case "gateway_ids.eui":
			dst.GatewayIdentifiers.SetFields(&src.GatewayIdentifiers, _pathsWithoutPrefix("gateway_ids", paths)...)
		case "gateway_ids.gateway_id":
			dst.GatewayIdentifiers.SetFields(&src.GatewayIdentifiers, _pathsWithoutPrefix("gateway_ids", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _ApplicationDownlinksFieldPaths = [...]string{
	"downlinks",
}

func (*ApplicationDownlinks) FieldMaskPaths() []string {
	ret := make([]string, len(_ApplicationDownlinksFieldPaths))
	copy(ret, _ApplicationDownlinksFieldPaths[:])
	return ret
}

func (dst *ApplicationDownlinks) SetFields(src *ApplicationDownlinks, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "downlinks":
			dst.Downlinks = src.Downlinks
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _ApplicationInvalidatedDownlinksFieldPaths = [...]string{
	"downlinks",
	"last_f_cnt_down",
}

func (*ApplicationInvalidatedDownlinks) FieldMaskPaths() []string {
	ret := make([]string, len(_ApplicationInvalidatedDownlinksFieldPaths))
	copy(ret, _ApplicationInvalidatedDownlinksFieldPaths[:])
	return ret
}

func (dst *ApplicationInvalidatedDownlinks) SetFields(src *ApplicationInvalidatedDownlinks, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "downlinks":
			dst.Downlinks = src.Downlinks
		case "last_f_cnt_down":
			dst.LastFCntDown = src.LastFCntDown
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _MessagePayloadFormattersFieldPaths = [...]string{
	"down_formatter",
	"down_formatter_parameter",
	"up_formatter",
	"up_formatter_parameter",
}

func (*MessagePayloadFormatters) FieldMaskPaths() []string {
	ret := make([]string, len(_MessagePayloadFormattersFieldPaths))
	copy(ret, _MessagePayloadFormattersFieldPaths[:])
	return ret
}

func (dst *MessagePayloadFormatters) SetFields(src *MessagePayloadFormatters, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "down_formatter":
			dst.DownFormatter = src.DownFormatter
		case "down_formatter_parameter":
			dst.DownFormatterParameter = src.DownFormatterParameter
		case "up_formatter":
			dst.UpFormatter = src.UpFormatter
		case "up_formatter_parameter":
			dst.UpFormatterParameter = src.UpFormatterParameter
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _DownlinkQueueRequestFieldPaths = [...]string{
	"downlinks",
	"end_device",
	"end_device.application_ids",
	"end_device.application_ids.application_id",
	"end_device.dev_addr",
	"end_device.dev_eui",
	"end_device.device_id",
	"end_device.join_eui",
}

func (*DownlinkQueueRequest) FieldMaskPaths() []string {
	ret := make([]string, len(_DownlinkQueueRequestFieldPaths))
	copy(ret, _DownlinkQueueRequestFieldPaths[:])
	return ret
}

func (dst *DownlinkQueueRequest) SetFields(src *DownlinkQueueRequest, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "downlinks":
			dst.Downlinks = src.Downlinks
		case "end_device":
			dst.EndDeviceIdentifiers = src.EndDeviceIdentifiers
		case "end_device.application_ids":
			dst.EndDeviceIdentifiers.SetFields(&src.EndDeviceIdentifiers, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.application_ids.application_id":
			dst.EndDeviceIdentifiers.SetFields(&src.EndDeviceIdentifiers, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.dev_addr":
			dst.EndDeviceIdentifiers.SetFields(&src.EndDeviceIdentifiers, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.dev_eui":
			dst.EndDeviceIdentifiers.SetFields(&src.EndDeviceIdentifiers, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.device_id":
			dst.EndDeviceIdentifiers.SetFields(&src.EndDeviceIdentifiers, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.join_eui":
			dst.EndDeviceIdentifiers.SetFields(&src.EndDeviceIdentifiers, _pathsWithoutPrefix("end_device", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}
