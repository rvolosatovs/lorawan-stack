// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/TheThingsNetwork/ttn/api/join.proto

package ttnpb

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import google_protobuf5 "github.com/gogo/protobuf/types"

import github_com_TheThingsNetwork_ttn_pkg_types "github.com/TheThingsNetwork/ttn/pkg/types"

import bytes "bytes"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Join Request
type JoinRequest struct {
	// Raw uplink bytes (PHYPayload)
	RawPayload []byte `protobuf:"bytes,1,opt,name=raw_payload,json=rawPayload,proto3" json:"raw_payload,omitempty"`
	// LoRaWAN Payload
	Payload Message `protobuf:"bytes,2,opt,name=payload" json:"payload"`
	// End device identifiers
	// - this includes the DevAddr assigned by the network server
	EndDeviceIdentifiers `protobuf:"bytes,3,opt,name=end_device,json=endDevice,embedded=end_device" json:"end_device"`
	// MAC version selected by the network server
	SelectedMacVersion MACVersion `protobuf:"varint,4,opt,name=selected_mac_version,json=selectedMacVersion,proto3,enum=ttn.v3.MACVersion" json:"selected_mac_version,omitempty"`
	// NetID of the accepting network server
	NetID github_com_TheThingsNetwork_ttn_pkg_types.NetID `protobuf:"bytes,5,opt,name=net_id,json=netId,proto3,customtype=github.com/TheThingsNetwork/ttn/pkg/types.NetID" json:"net_id"`
	// Downlink Settings
	DownlinkSettings DLSettings `protobuf:"bytes,6,opt,name=downlink_settings,json=downlinkSettings" json:"downlink_settings"`
	// Rx Delay in seconds
	RxDelay uint32 `protobuf:"varint,7,opt,name=rx_delay,json=rxDelay,proto3" json:"rx_delay,omitempty"`
	// Optional CFList
	CFList *CFList `protobuf:"bytes,8,opt,name=cf_list,json=cfList" json:"cf_list,omitempty"`
}

func (m *JoinRequest) Reset()                    { *m = JoinRequest{} }
func (m *JoinRequest) String() string            { return proto.CompactTextString(m) }
func (*JoinRequest) ProtoMessage()               {}
func (*JoinRequest) Descriptor() ([]byte, []int) { return fileDescriptorJoin, []int{0} }

func (m *JoinRequest) GetRawPayload() []byte {
	if m != nil {
		return m.RawPayload
	}
	return nil
}

func (m *JoinRequest) GetPayload() Message {
	if m != nil {
		return m.Payload
	}
	return Message{}
}

func (m *JoinRequest) GetSelectedMacVersion() MACVersion {
	if m != nil {
		return m.SelectedMacVersion
	}
	return MAC_UNKNOWN
}

func (m *JoinRequest) GetDownlinkSettings() DLSettings {
	if m != nil {
		return m.DownlinkSettings
	}
	return DLSettings{}
}

func (m *JoinRequest) GetRxDelay() uint32 {
	if m != nil {
		return m.RxDelay
	}
	return 0
}

func (m *JoinRequest) GetCFList() *CFList {
	if m != nil {
		return m.CFList
	}
	return nil
}

// Answer to the Join Request
type JoinResponse struct {
	// Raw uplink bytes (PHYPayload)
	RawPayload []byte `protobuf:"bytes,1,opt,name=raw_payload,json=rawPayload,proto3" json:"raw_payload,omitempty"`
	// The session keys
	SessionKeys `protobuf:"bytes,2,opt,name=session_keys,json=sessionKeys,embedded=session_keys" json:"session_keys"`
	// Lifetime of the session
	Lifetime *google_protobuf5.Duration `protobuf:"bytes,3,opt,name=lifetime" json:"lifetime,omitempty"`
}

func (m *JoinResponse) Reset()                    { *m = JoinResponse{} }
func (m *JoinResponse) String() string            { return proto.CompactTextString(m) }
func (*JoinResponse) ProtoMessage()               {}
func (*JoinResponse) Descriptor() ([]byte, []int) { return fileDescriptorJoin, []int{1} }

func (m *JoinResponse) GetRawPayload() []byte {
	if m != nil {
		return m.RawPayload
	}
	return nil
}

func (m *JoinResponse) GetLifetime() *google_protobuf5.Duration {
	if m != nil {
		return m.Lifetime
	}
	return nil
}

func init() {
	proto.RegisterType((*JoinRequest)(nil), "ttn.v3.JoinRequest")
	golang_proto.RegisterType((*JoinRequest)(nil), "ttn.v3.JoinRequest")
	proto.RegisterType((*JoinResponse)(nil), "ttn.v3.JoinResponse")
	golang_proto.RegisterType((*JoinResponse)(nil), "ttn.v3.JoinResponse")
}
func (this *JoinRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*JoinRequest)
	if !ok {
		that2, ok := that.(JoinRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *JoinRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *JoinRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *JoinRequest but is not nil && this == nil")
	}
	if !bytes.Equal(this.RawPayload, that1.RawPayload) {
		return fmt.Errorf("RawPayload this(%v) Not Equal that(%v)", this.RawPayload, that1.RawPayload)
	}
	if !this.Payload.Equal(&that1.Payload) {
		return fmt.Errorf("Payload this(%v) Not Equal that(%v)", this.Payload, that1.Payload)
	}
	if !this.EndDeviceIdentifiers.Equal(&that1.EndDeviceIdentifiers) {
		return fmt.Errorf("EndDeviceIdentifiers this(%v) Not Equal that(%v)", this.EndDeviceIdentifiers, that1.EndDeviceIdentifiers)
	}
	if this.SelectedMacVersion != that1.SelectedMacVersion {
		return fmt.Errorf("SelectedMacVersion this(%v) Not Equal that(%v)", this.SelectedMacVersion, that1.SelectedMacVersion)
	}
	if !this.NetID.Equal(that1.NetID) {
		return fmt.Errorf("NetID this(%v) Not Equal that(%v)", this.NetID, that1.NetID)
	}
	if !this.DownlinkSettings.Equal(&that1.DownlinkSettings) {
		return fmt.Errorf("DownlinkSettings this(%v) Not Equal that(%v)", this.DownlinkSettings, that1.DownlinkSettings)
	}
	if this.RxDelay != that1.RxDelay {
		return fmt.Errorf("RxDelay this(%v) Not Equal that(%v)", this.RxDelay, that1.RxDelay)
	}
	if !this.CFList.Equal(that1.CFList) {
		return fmt.Errorf("CFList this(%v) Not Equal that(%v)", this.CFList, that1.CFList)
	}
	return nil
}
func (this *JoinRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*JoinRequest)
	if !ok {
		that2, ok := that.(JoinRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.RawPayload, that1.RawPayload) {
		return false
	}
	if !this.Payload.Equal(&that1.Payload) {
		return false
	}
	if !this.EndDeviceIdentifiers.Equal(&that1.EndDeviceIdentifiers) {
		return false
	}
	if this.SelectedMacVersion != that1.SelectedMacVersion {
		return false
	}
	if !this.NetID.Equal(that1.NetID) {
		return false
	}
	if !this.DownlinkSettings.Equal(&that1.DownlinkSettings) {
		return false
	}
	if this.RxDelay != that1.RxDelay {
		return false
	}
	if !this.CFList.Equal(that1.CFList) {
		return false
	}
	return true
}
func (this *JoinResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*JoinResponse)
	if !ok {
		that2, ok := that.(JoinResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *JoinResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *JoinResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *JoinResponse but is not nil && this == nil")
	}
	if !bytes.Equal(this.RawPayload, that1.RawPayload) {
		return fmt.Errorf("RawPayload this(%v) Not Equal that(%v)", this.RawPayload, that1.RawPayload)
	}
	if !this.SessionKeys.Equal(&that1.SessionKeys) {
		return fmt.Errorf("SessionKeys this(%v) Not Equal that(%v)", this.SessionKeys, that1.SessionKeys)
	}
	if !this.Lifetime.Equal(that1.Lifetime) {
		return fmt.Errorf("Lifetime this(%v) Not Equal that(%v)", this.Lifetime, that1.Lifetime)
	}
	return nil
}
func (this *JoinResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*JoinResponse)
	if !ok {
		that2, ok := that.(JoinResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.RawPayload, that1.RawPayload) {
		return false
	}
	if !this.SessionKeys.Equal(&that1.SessionKeys) {
		return false
	}
	if !this.Lifetime.Equal(that1.Lifetime) {
		return false
	}
	return true
}
func (m *JoinRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RawPayload) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintJoin(dAtA, i, uint64(len(m.RawPayload)))
		i += copy(dAtA[i:], m.RawPayload)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintJoin(dAtA, i, uint64(m.Payload.Size()))
	n1, err := m.Payload.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x1a
	i++
	i = encodeVarintJoin(dAtA, i, uint64(m.EndDeviceIdentifiers.Size()))
	n2, err := m.EndDeviceIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if m.SelectedMacVersion != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintJoin(dAtA, i, uint64(m.SelectedMacVersion))
	}
	dAtA[i] = 0x2a
	i++
	i = encodeVarintJoin(dAtA, i, uint64(m.NetID.Size()))
	n3, err := m.NetID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x32
	i++
	i = encodeVarintJoin(dAtA, i, uint64(m.DownlinkSettings.Size()))
	n4, err := m.DownlinkSettings.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if m.RxDelay != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintJoin(dAtA, i, uint64(m.RxDelay))
	}
	if m.CFList != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintJoin(dAtA, i, uint64(m.CFList.Size()))
		n5, err := m.CFList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *JoinResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RawPayload) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintJoin(dAtA, i, uint64(len(m.RawPayload)))
		i += copy(dAtA[i:], m.RawPayload)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintJoin(dAtA, i, uint64(m.SessionKeys.Size()))
	n6, err := m.SessionKeys.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if m.Lifetime != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintJoin(dAtA, i, uint64(m.Lifetime.Size()))
		n7, err := m.Lifetime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func encodeVarintJoin(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedJoinResponse(r randyJoin, easy bool) *JoinResponse {
	this := &JoinResponse{}
	v1 := r.Intn(100)
	this.RawPayload = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.RawPayload[i] = byte(r.Intn(256))
	}
	v2 := NewPopulatedSessionKeys(r, easy)
	this.SessionKeys = *v2
	if r.Intn(10) != 0 {
		this.Lifetime = google_protobuf5.NewPopulatedDuration(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyJoin interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneJoin(r randyJoin) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringJoin(r randyJoin) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneJoin(r)
	}
	return string(tmps)
}
func randUnrecognizedJoin(r randyJoin, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldJoin(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldJoin(dAtA []byte, r randyJoin, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateJoin(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulateJoin(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulateJoin(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateJoin(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateJoin(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateJoin(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateJoin(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *JoinRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.RawPayload)
	if l > 0 {
		n += 1 + l + sovJoin(uint64(l))
	}
	l = m.Payload.Size()
	n += 1 + l + sovJoin(uint64(l))
	l = m.EndDeviceIdentifiers.Size()
	n += 1 + l + sovJoin(uint64(l))
	if m.SelectedMacVersion != 0 {
		n += 1 + sovJoin(uint64(m.SelectedMacVersion))
	}
	l = m.NetID.Size()
	n += 1 + l + sovJoin(uint64(l))
	l = m.DownlinkSettings.Size()
	n += 1 + l + sovJoin(uint64(l))
	if m.RxDelay != 0 {
		n += 1 + sovJoin(uint64(m.RxDelay))
	}
	if m.CFList != nil {
		l = m.CFList.Size()
		n += 1 + l + sovJoin(uint64(l))
	}
	return n
}

func (m *JoinResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.RawPayload)
	if l > 0 {
		n += 1 + l + sovJoin(uint64(l))
	}
	l = m.SessionKeys.Size()
	n += 1 + l + sovJoin(uint64(l))
	if m.Lifetime != nil {
		l = m.Lifetime.Size()
		n += 1 + l + sovJoin(uint64(l))
	}
	return n
}

func sovJoin(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozJoin(x uint64) (n int) {
	return sovJoin((x << 1) ^ uint64((int64(x) >> 63)))
}
func (m *JoinRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthJoin
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawPayload = append(m.RawPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.RawPayload == nil {
				m.RawPayload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Payload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDeviceIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EndDeviceIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectedMacVersion", wireType)
			}
			m.SelectedMacVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelectedMacVersion |= (MACVersion(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthJoin
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NetID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DownlinkSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxDelay", wireType)
			}
			m.RxDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxDelay |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CFList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CFList == nil {
				m.CFList = &CFList{}
			}
			if err := m.CFList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthJoin
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawPayload = append(m.RawPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.RawPayload == nil {
				m.RawPayload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SessionKeys.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lifetime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lifetime == nil {
				m.Lifetime = &google_protobuf5.Duration{}
			}
			if err := m.Lifetime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipJoin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowJoin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJoin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJoin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthJoin
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowJoin
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipJoin(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthJoin = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowJoin   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/join.proto", fileDescriptorJoin) }
func init() {
	golang_proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/join.proto", fileDescriptorJoin)
}

var fileDescriptorJoin = []byte{
	// 649 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x3d, 0x4c, 0x1b, 0x4b,
	0x10, 0xbe, 0x7d, 0x18, 0xdb, 0xac, 0x79, 0x3c, 0xde, 0xbd, 0x57, 0x18, 0xf4, 0x34, 0xb6, 0xa8,
	0xfc, 0x8a, 0xdc, 0x29, 0x10, 0x9a, 0x54, 0xc4, 0x98, 0x48, 0x10, 0x40, 0xd1, 0x81, 0x12, 0x29,
	0xcd, 0xe9, 0xec, 0x5b, 0x1f, 0x1b, 0x1f, 0xbb, 0xce, 0xed, 0x1a, 0xe3, 0x8e, 0x92, 0x32, 0x65,
	0xba, 0x50, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0xa2, 0x14, 0x16, 0xde, 0x6b, 0x28, 0x29, 0x29,
	0xa3, 0xfb, 0xc3, 0x74, 0xb8, 0xda, 0x99, 0xf9, 0xe6, 0x9b, 0x9d, 0x99, 0x6f, 0xb0, 0xe1, 0x51,
	0x79, 0xd0, 0x6b, 0x1a, 0x2d, 0x7e, 0x68, 0xee, 0x1f, 0x90, 0xfd, 0x03, 0xca, 0x3c, 0xb1, 0x4b,
	0x64, 0x9f, 0x07, 0x1d, 0x53, 0x4a, 0x66, 0x3a, 0x5d, 0x6a, 0x7e, 0xe5, 0x94, 0x19, 0xdd, 0x80,
	0x4b, 0xae, 0xe7, 0xa5, 0x64, 0xc6, 0xd1, 0xca, 0xe2, 0x9b, 0x49, 0x78, 0x84, 0xb9, 0xb6, 0x4b,
	0x8e, 0x68, 0x8b, 0x24, 0xec, 0xc5, 0xd5, 0x49, 0x58, 0xd4, 0x25, 0x4c, 0xd2, 0x36, 0x25, 0x81,
	0x48, 0x69, 0xaf, 0x27, 0xa1, 0xf9, 0x3c, 0x70, 0xfa, 0x4e, 0xda, 0xe7, 0xe2, 0xab, 0x67, 0x14,
	0x8f, 0x7b, 0xdc, 0x8c, 0xc3, 0xcd, 0x5e, 0x3b, 0xf6, 0x62, 0x27, 0xb6, 0xd2, 0x74, 0xf0, 0x38,
	0xf7, 0x7c, 0x32, 0xce, 0x72, 0x7b, 0x81, 0x23, 0x29, 0x4f, 0xcb, 0x2d, 0xdd, 0x4f, 0xe1, 0xd2,
	0x16, 0xa7, 0xcc, 0x22, 0xdf, 0x7a, 0x44, 0x48, 0xbd, 0x82, 0x4b, 0x81, 0xd3, 0xb7, 0xbb, 0xce,
	0xc0, 0xe7, 0x8e, 0x5b, 0x46, 0x55, 0x54, 0x9b, 0xb5, 0x70, 0xe0, 0xf4, 0x3f, 0x26, 0x11, 0xdd,
	0xc4, 0x85, 0x0c, 0xfc, 0xa3, 0x8a, 0x6a, 0xa5, 0xe5, 0xbf, 0x8c, 0x64, 0x73, 0xc6, 0x0e, 0x11,
	0xc2, 0xf1, 0x48, 0x3d, 0x77, 0x3d, 0xac, 0x68, 0x56, 0x96, 0xa5, 0x6f, 0x60, 0x3c, 0x5e, 0x57,
	0x79, 0x2a, 0xe6, 0xfc, 0x97, 0x71, 0x36, 0x98, 0xdb, 0x88, 0x81, 0xcd, 0xf1, 0x6e, 0xea, 0xc5,
	0xa8, 0xc0, 0xcd, 0xb0, 0x82, 0xac, 0x19, 0x92, 0xe1, 0x7a, 0x03, 0xff, 0x2b, 0x88, 0x4f, 0x5a,
	0x92, 0xb8, 0xf6, 0xa1, 0xd3, 0xb2, 0x8f, 0x48, 0x20, 0x28, 0x67, 0xe5, 0x5c, 0x15, 0xd5, 0xe6,
	0x96, 0xf5, 0xa7, 0x26, 0xde, 0xad, 0x7f, 0x4a, 0x10, 0x4b, 0xcf, 0xf2, 0x77, 0x9c, 0x56, 0x1a,
	0xd3, 0x3f, 0xe3, 0x3c, 0x23, 0xd2, 0xa6, 0x6e, 0x79, 0x3a, 0x9a, 0xac, 0xbe, 0x16, 0x7d, 0xf5,
	0x6b, 0x58, 0x31, 0x5f, 0x12, 0xa2, 0xdb, 0xf1, 0x4c, 0x39, 0xe8, 0x12, 0x61, 0xec, 0x12, 0xb9,
	0xd9, 0x50, 0xc3, 0xca, 0x74, 0x6c, 0x58, 0xd3, 0x8c, 0xc8, 0xcd, 0x68, 0xca, 0xbf, 0x5d, 0xde,
	0x67, 0x3e, 0x65, 0x1d, 0x5b, 0x10, 0x29, 0x23, 0x7e, 0x39, 0x1f, 0x0f, 0xfb, 0xd4, 0x5b, 0x63,
	0x7b, 0x2f, 0x45, 0xd2, 0x1d, 0xcd, 0x67, 0x94, 0x2c, 0xae, 0x2f, 0xe0, 0x62, 0x70, 0x6c, 0xbb,
	0xc4, 0x77, 0x06, 0xe5, 0x42, 0x15, 0xd5, 0xfe, 0xb4, 0x0a, 0xc1, 0x71, 0x23, 0x72, 0xf5, 0x15,
	0x5c, 0x68, 0xb5, 0x6d, 0x9f, 0x0a, 0x59, 0x2e, 0xc6, 0x75, 0xe7, 0xb2, 0xba, 0xeb, 0xef, 0xb7,
	0xa9, 0x90, 0x75, 0xac, 0x86, 0x95, 0x7c, 0x62, 0x5b, 0xf9, 0x56, 0x3b, 0x7a, 0xdf, 0xe6, 0x2e,
	0xcf, 0x2a, 0xda, 0x56, 0xae, 0x38, 0x33, 0x8f, 0x97, 0xce, 0x11, 0x9e, 0x4d, 0xa4, 0x16, 0x5d,
	0xce, 0x04, 0x79, 0x59, 0xeb, 0x35, 0x3c, 0x2b, 0x88, 0x88, 0x16, 0x67, 0x77, 0xc8, 0x40, 0xa4,
	0x82, 0xff, 0x93, 0xfd, 0xbb, 0x97, 0x60, 0x1f, 0xc8, 0xe0, 0xb9, 0x66, 0x25, 0x31, 0x0e, 0xeb,
	0xab, 0xb8, 0xe8, 0xd3, 0x36, 0x91, 0xf4, 0x30, 0x93, 0x7e, 0xc1, 0x48, 0x2e, 0xd2, 0xc8, 0x2e,
	0xd2, 0x68, 0xa4, 0x17, 0x69, 0x3d, 0xa5, 0xd6, 0x7f, 0xa2, 0xeb, 0x11, 0xa0, 0x9b, 0x11, 0xa0,
	0xdb, 0x11, 0xa0, 0xbb, 0x11, 0xa0, 0xfb, 0x11, 0x68, 0x0f, 0x23, 0xd0, 0x1e, 0x47, 0x80, 0x4e,
	0x14, 0x68, 0xa7, 0x0a, 0xb4, 0x73, 0x05, 0xe8, 0x42, 0x81, 0x76, 0xa9, 0x00, 0x5d, 0x29, 0x40,
	0xd7, 0x0a, 0xd0, 0x8d, 0x02, 0x74, 0xab, 0x40, 0xbb, 0x53, 0x80, 0xee, 0x15, 0x68, 0x0f, 0x0a,
	0xd0, 0xa3, 0x02, 0xed, 0x24, 0x04, 0xed, 0x34, 0x04, 0xf4, 0x3d, 0x04, 0xed, 0x47, 0x08, 0xe8,
	0x2c, 0x04, 0xed, 0x3c, 0x04, 0xed, 0x22, 0x04, 0x74, 0x19, 0x02, 0xba, 0x0a, 0x01, 0x7d, 0xf9,
	0x7f, 0xa2, 0x2b, 0x90, 0xac, 0xdb, 0x6c, 0xe6, 0xe3, 0xf6, 0x57, 0x7e, 0x07, 0x00, 0x00, 0xff,
	0xff, 0x25, 0x6c, 0x9e, 0x89, 0x67, 0x04, 0x00, 0x00,
}
