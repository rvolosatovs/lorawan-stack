// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/picture.proto

package ttnpb

import (
	bytes "bytes"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	golang_proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Picture struct {
	// Embedded picture.
	// Omitted if there are external URLs available (in sizes).
	Embedded *Picture_Embedded `protobuf:"bytes,1,opt,name=embedded,proto3" json:"embedded,omitempty"`
	// URLs of the picture for different sizes, if available on a CDN.
	Sizes                map[uint32]string `protobuf:"bytes,2,rep,name=sizes,proto3" json:"sizes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Picture) Reset()      { *m = Picture{} }
func (*Picture) ProtoMessage() {}
func (*Picture) Descriptor() ([]byte, []int) {
	return fileDescriptor_e379f581972557c1, []int{0}
}
func (m *Picture) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Picture) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Picture.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Picture) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Picture.Merge(m, src)
}
func (m *Picture) XXX_Size() int {
	return m.Size()
}
func (m *Picture) XXX_DiscardUnknown() {
	xxx_messageInfo_Picture.DiscardUnknown(m)
}

var xxx_messageInfo_Picture proto.InternalMessageInfo

func (m *Picture) GetEmbedded() *Picture_Embedded {
	if m != nil {
		return m.Embedded
	}
	return nil
}

func (m *Picture) GetSizes() map[uint32]string {
	if m != nil {
		return m.Sizes
	}
	return nil
}

type Picture_Embedded struct {
	// MIME type of the picture.
	MimeType string `protobuf:"bytes,1,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	// Picture data. A data URI can be constructed as follows:
	// `data:<mime_type>;base64,<data>`.
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Picture_Embedded) Reset()      { *m = Picture_Embedded{} }
func (*Picture_Embedded) ProtoMessage() {}
func (*Picture_Embedded) Descriptor() ([]byte, []int) {
	return fileDescriptor_e379f581972557c1, []int{0, 0}
}
func (m *Picture_Embedded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Picture_Embedded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Picture_Embedded.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Picture_Embedded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Picture_Embedded.Merge(m, src)
}
func (m *Picture_Embedded) XXX_Size() int {
	return m.Size()
}
func (m *Picture_Embedded) XXX_DiscardUnknown() {
	xxx_messageInfo_Picture_Embedded.DiscardUnknown(m)
}

var xxx_messageInfo_Picture_Embedded proto.InternalMessageInfo

func (m *Picture_Embedded) GetMimeType() string {
	if m != nil {
		return m.MimeType
	}
	return ""
}

func (m *Picture_Embedded) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Picture)(nil), "ttn.lorawan.v3.Picture")
	golang_proto.RegisterType((*Picture)(nil), "ttn.lorawan.v3.Picture")
	proto.RegisterMapType((map[uint32]string)(nil), "ttn.lorawan.v3.Picture.SizesEntry")
	golang_proto.RegisterMapType((map[uint32]string)(nil), "ttn.lorawan.v3.Picture.SizesEntry")
	proto.RegisterType((*Picture_Embedded)(nil), "ttn.lorawan.v3.Picture.Embedded")
	golang_proto.RegisterType((*Picture_Embedded)(nil), "ttn.lorawan.v3.Picture.Embedded")
}

func init() { proto.RegisterFile("lorawan-stack/api/picture.proto", fileDescriptor_e379f581972557c1) }
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/picture.proto", fileDescriptor_e379f581972557c1)
}

var fileDescriptor_e379f581972557c1 = []byte{
	// 429 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x31, 0x6c, 0x13, 0x31,
	0x14, 0x86, 0xfd, 0x12, 0x42, 0x13, 0x97, 0x22, 0x74, 0x62, 0x88, 0x82, 0xf4, 0x88, 0x3a, 0x45,
	0x48, 0xb1, 0xa5, 0x66, 0xa9, 0x80, 0x85, 0x48, 0x15, 0x2b, 0x3a, 0x98, 0x58, 0x90, 0x93, 0xb3,
	0x2e, 0xa7, 0x24, 0xb6, 0x75, 0x71, 0xae, 0x1c, 0x53, 0x37, 0x3a, 0x76, 0x44, 0x4c, 0x2c, 0x48,
	0x1d, 0x3b, 0x76, 0xec, 0xd8, 0xb1, 0x63, 0xc7, 0x9e, 0xbd, 0x74, 0xec, 0x58, 0x31, 0xa1, 0xdc,
	0x05, 0x50, 0x85, 0xba, 0xfd, 0xb6, 0xbe, 0xef, 0xfd, 0x96, 0xfc, 0xe8, 0xf3, 0x99, 0x4e, 0xc5,
	0xbe, 0x50, 0xfd, 0x85, 0x15, 0xe3, 0x29, 0x17, 0x26, 0xe1, 0x26, 0x19, 0xdb, 0x65, 0x2a, 0x99,
	0x49, 0xb5, 0xd5, 0xc1, 0x63, 0x6b, 0x15, 0x5b, 0x43, 0x2c, 0x1b, 0x74, 0xde, 0xc4, 0x89, 0x9d,
	0x2c, 0x47, 0x6c, 0xac, 0xe7, 0x5c, 0xaa, 0x4c, 0xe7, 0x26, 0xd5, 0x9f, 0x73, 0x5e, 0xc2, 0xe3,
	0x7e, 0x2c, 0x55, 0x3f, 0x13, 0xb3, 0x24, 0x12, 0x56, 0xf2, 0xff, 0x42, 0x35, 0x72, 0xfb, 0x6b,
	0x8d, 0x6e, 0xbc, 0xab, 0x4a, 0x82, 0xd7, 0xb4, 0x29, 0xe7, 0x23, 0x19, 0x45, 0x32, 0x6a, 0x43,
	0x17, 0x7a, 0x9b, 0x3b, 0x5d, 0x76, 0xb7, 0x91, 0xad, 0x51, 0xb6, 0xb7, 0xe6, 0xc2, 0xbf, 0x46,
	0xf0, 0x96, 0x36, 0x16, 0xc9, 0x17, 0xb9, 0x68, 0xd7, 0xba, 0xf5, 0xde, 0xe6, 0xce, 0xf6, 0x7d,
	0xea, 0xfb, 0x15, 0xb4, 0xa7, 0x6c, 0x9a, 0x0f, 0xb7, 0x7e, 0x0d, 0xe9, 0x77, 0xd8, 0x78, 0xd1,
	0x48, 0xeb, 0x47, 0x00, 0x61, 0xe5, 0x77, 0x5e, 0xd1, 0xe6, 0x9f, 0xf1, 0xc1, 0x33, 0xda, 0x9a,
	0x27, 0x73, 0xf9, 0xc9, 0xe6, 0x46, 0x96, 0x6f, 0x6a, 0x85, 0xcd, 0xd5, 0xc5, 0x87, 0xdc, 0xc8,
	0x20, 0xa0, 0x0f, 0x22, 0x61, 0x45, 0xbb, 0xd6, 0x85, 0xde, 0xa3, 0xb0, 0xcc, 0x9d, 0x5d, 0x4a,
	0xff, 0x15, 0x04, 0x4f, 0x68, 0x7d, 0x2a, 0xf3, 0x52, 0xdc, 0x0a, 0x57, 0x31, 0x78, 0x4a, 0x1b,
	0x99, 0x98, 0x2d, 0x65, 0x29, 0xb5, 0xc2, 0xea, 0xf0, 0xb2, 0xb6, 0x0b, 0xc3, 0x9f, 0x70, 0x5e,
	0x20, 0x5c, 0x14, 0x08, 0x97, 0x05, 0x92, 0xab, 0x02, 0xc9, 0x75, 0x81, 0xe4, 0xa6, 0x40, 0x72,
	0x5b, 0x20, 0x1c, 0x38, 0x84, 0x43, 0x87, 0xe4, 0xd8, 0x21, 0x9c, 0x38, 0x24, 0xa7, 0x0e, 0xc9,
	0x99, 0x43, 0x72, 0xee, 0x10, 0x2e, 0x1c, 0xc2, 0xa5, 0x43, 0x72, 0xe5, 0x10, 0xae, 0x1d, 0x92,
	0x1b, 0x87, 0x70, 0xeb, 0x90, 0x1c, 0x78, 0x24, 0x87, 0x1e, 0xe1, 0xc8, 0x23, 0xf9, 0xe6, 0x11,
	0x7e, 0x78, 0x24, 0xc7, 0x1e, 0xc9, 0x89, 0x47, 0x38, 0xf5, 0x08, 0x67, 0x1e, 0xe1, 0x23, 0x8f,
	0x35, 0xb3, 0x13, 0x69, 0x27, 0x89, 0x8a, 0x17, 0x4c, 0x49, 0xbb, 0xaf, 0xd3, 0x29, 0xbf, 0xbb,
	0x09, 0xd9, 0x80, 0x9b, 0x69, 0xcc, 0xad, 0x55, 0x66, 0x34, 0x7a, 0x58, 0x7e, 0xdc, 0xe0, 0x77,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x61, 0x55, 0x04, 0x0e, 0x2e, 0x02, 0x00, 0x00,
}

func (this *Picture) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Picture)
	if !ok {
		that2, ok := that.(Picture)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Embedded.Equal(that1.Embedded) {
		return false
	}
	if len(this.Sizes) != len(that1.Sizes) {
		return false
	}
	for i := range this.Sizes {
		if this.Sizes[i] != that1.Sizes[i] {
			return false
		}
	}
	return true
}
func (this *Picture_Embedded) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Picture_Embedded)
	if !ok {
		that2, ok := that.(Picture_Embedded)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MimeType != that1.MimeType {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (m *Picture) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Picture) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Picture) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sizes) > 0 {
		for k := range m.Sizes {
			v := m.Sizes[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintPicture(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i = encodeVarintPicture(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintPicture(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Embedded != nil {
		{
			size, err := m.Embedded.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPicture(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Picture_Embedded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Picture_Embedded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Picture_Embedded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintPicture(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MimeType) > 0 {
		i -= len(m.MimeType)
		copy(dAtA[i:], m.MimeType)
		i = encodeVarintPicture(dAtA, i, uint64(len(m.MimeType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPicture(dAtA []byte, offset int, v uint64) int {
	offset -= sovPicture(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedPicture(r randyPicture, easy bool) *Picture {
	this := &Picture{}
	if r.Intn(5) != 0 {
		this.Embedded = NewPopulatedPicture_Embedded(r, easy)
	}
	if r.Intn(5) != 0 {
		v1 := r.Intn(10)
		this.Sizes = make(map[uint32]string)
		for i := 0; i < v1; i++ {
			this.Sizes[r.Uint32()] = randStringPicture(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPicture_Embedded(r randyPicture, easy bool) *Picture_Embedded {
	this := &Picture_Embedded{}
	this.MimeType = randStringPicture(r)
	v2 := r.Intn(100)
	this.Data = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.Data[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyPicture interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RunePicture(r randyPicture) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringPicture(r randyPicture) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RunePicture(r)
	}
	return string(tmps)
}
func randUnrecognizedPicture(r randyPicture, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldPicture(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldPicture(dAtA []byte, r randyPicture, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulatePicture(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulatePicture(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulatePicture(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulatePicture(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulatePicture(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulatePicture(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulatePicture(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Picture) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Embedded != nil {
		l = m.Embedded.Size()
		n += 1 + l + sovPicture(uint64(l))
	}
	if len(m.Sizes) > 0 {
		for k, v := range m.Sizes {
			_ = k
			_ = v
			mapEntrySize := 1 + sovPicture(uint64(k)) + 1 + len(v) + sovPicture(uint64(len(v)))
			n += mapEntrySize + 1 + sovPicture(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Picture_Embedded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MimeType)
	if l > 0 {
		n += 1 + l + sovPicture(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPicture(uint64(l))
	}
	return n
}

func sovPicture(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPicture(x uint64) (n int) {
	return sovPicture((x << 1) ^ uint64((int64(x) >> 63)))
}
func (this *Picture) String() string {
	if this == nil {
		return "nil"
	}
	keysForSizes := make([]uint32, 0, len(this.Sizes))
	for k := range this.Sizes {
		keysForSizes = append(keysForSizes, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForSizes)
	mapStringForSizes := "map[uint32]string{"
	for _, k := range keysForSizes {
		mapStringForSizes += fmt.Sprintf("%v: %v,", k, this.Sizes[k])
	}
	mapStringForSizes += "}"
	s := strings.Join([]string{`&Picture{`,
		`Embedded:` + strings.Replace(fmt.Sprintf("%v", this.Embedded), "Picture_Embedded", "Picture_Embedded", 1) + `,`,
		`Sizes:` + mapStringForSizes + `,`,
		`}`,
	}, "")
	return s
}
func (this *Picture_Embedded) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Picture_Embedded{`,
		`MimeType:` + fmt.Sprintf("%v", this.MimeType) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPicture(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Picture) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPicture
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Picture: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Picture: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Embedded", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPicture
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPicture
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPicture
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Embedded == nil {
				m.Embedded = &Picture_Embedded{}
			}
			if err := m.Embedded.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sizes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPicture
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPicture
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPicture
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sizes == nil {
				m.Sizes = make(map[uint32]string)
			}
			var mapkey uint32
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPicture
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPicture
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPicture
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPicture
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthPicture
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPicture(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPicture
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Sizes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPicture(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPicture
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPicture
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Picture_Embedded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPicture
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Embedded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Embedded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MimeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPicture
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPicture
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPicture
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MimeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPicture
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPicture
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPicture
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPicture(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPicture
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPicture
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPicture(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPicture
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPicture
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPicture
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPicture
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPicture
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPicture
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPicture        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPicture          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPicture = fmt.Errorf("proto: unexpected end of group")
)
