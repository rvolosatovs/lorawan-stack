// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import (
	fmt "fmt"
	time "time"
)

func (dst *GatewayUp) SetFields(src *GatewayUp, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "uplink_messages":
			if len(subs) > 0 {
				return fmt.Errorf("'uplink_messages' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.UplinkMessages = src.UplinkMessages
			} else {
				dst.UplinkMessages = nil
			}
		case "gateway_status":
			if len(subs) > 0 {
				newDst := dst.GatewayStatus
				if newDst == nil {
					newDst = &GatewayStatus{}
					dst.GatewayStatus = newDst
				}
				var newSrc *GatewayStatus
				if src != nil {
					newSrc = src.GatewayStatus
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.GatewayStatus = src.GatewayStatus
				} else {
					dst.GatewayStatus = nil
				}
			}
		case "tx_acknowledgment":
			if len(subs) > 0 {
				newDst := dst.TxAcknowledgment
				if newDst == nil {
					newDst = &TxAcknowledgment{}
					dst.TxAcknowledgment = newDst
				}
				var newSrc *TxAcknowledgment
				if src != nil {
					newSrc = src.TxAcknowledgment
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.TxAcknowledgment = src.TxAcknowledgment
				} else {
					dst.TxAcknowledgment = nil
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *GatewayDown) SetFields(src *GatewayDown, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "downlink_message":
			if len(subs) > 0 {
				newDst := dst.DownlinkMessage
				if newDst == nil {
					newDst = &DownlinkMessage{}
					dst.DownlinkMessage = newDst
				}
				var newSrc *DownlinkMessage
				if src != nil {
					newSrc = src.DownlinkMessage
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.DownlinkMessage = src.DownlinkMessage
				} else {
					dst.DownlinkMessage = nil
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ScheduleDownlinkResponse) SetFields(src *ScheduleDownlinkResponse, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "delay":
			if len(subs) > 0 {
				return fmt.Errorf("'delay' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Delay = src.Delay
			} else {
				var zero time.Duration
				dst.Delay = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ScheduleDownlinkErrorDetails) SetFields(src *ScheduleDownlinkErrorDetails, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "path_errors":
			if len(subs) > 0 {
				return fmt.Errorf("'path_errors' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.PathErrors = src.PathErrors
			} else {
				dst.PathErrors = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}
