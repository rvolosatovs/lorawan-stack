// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import fmt "fmt"

var _OAuthClientAuthorizationIdentifiersFieldPaths = [...]string{
	"client_ids",
	"client_ids.client_id",
	"user_ids",
	"user_ids.email",
	"user_ids.user_id",
}

func (*OAuthClientAuthorizationIdentifiers) FieldMaskPaths() []string {
	ret := make([]string, len(_OAuthClientAuthorizationIdentifiersFieldPaths))
	copy(ret, _OAuthClientAuthorizationIdentifiersFieldPaths[:])
	return ret
}

func (dst *OAuthClientAuthorizationIdentifiers) SetFields(src *OAuthClientAuthorizationIdentifiers, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "client_ids":
			dst.ClientIDs = src.ClientIDs
		case "client_ids.client_id":
			dst.ClientIDs.SetFields(&src.ClientIDs, _pathsWithoutPrefix("client_ids", paths)...)
		case "user_ids":
			dst.UserIDs = src.UserIDs
		case "user_ids.email":
			dst.UserIDs.SetFields(&src.UserIDs, _pathsWithoutPrefix("user_ids", paths)...)
		case "user_ids.user_id":
			dst.UserIDs.SetFields(&src.UserIDs, _pathsWithoutPrefix("user_ids", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _OAuthClientAuthorizationFieldPaths = [...]string{
	"client_ids",
	"client_ids.client_id",
	"created_at",
	"rights",
	"updated_at",
	"user_ids",
	"user_ids.email",
	"user_ids.user_id",
}

func (*OAuthClientAuthorization) FieldMaskPaths() []string {
	ret := make([]string, len(_OAuthClientAuthorizationFieldPaths))
	copy(ret, _OAuthClientAuthorizationFieldPaths[:])
	return ret
}

func (dst *OAuthClientAuthorization) SetFields(src *OAuthClientAuthorization, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "client_ids":
			dst.ClientIDs = src.ClientIDs
		case "client_ids.client_id":
			dst.ClientIDs.SetFields(&src.ClientIDs, _pathsWithoutPrefix("client_ids", paths)...)
		case "created_at":
			dst.CreatedAt = src.CreatedAt
		case "rights":
			dst.Rights = src.Rights
		case "updated_at":
			dst.UpdatedAt = src.UpdatedAt
		case "user_ids":
			dst.UserIDs = src.UserIDs
		case "user_ids.email":
			dst.UserIDs.SetFields(&src.UserIDs, _pathsWithoutPrefix("user_ids", paths)...)
		case "user_ids.user_id":
			dst.UserIDs.SetFields(&src.UserIDs, _pathsWithoutPrefix("user_ids", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _OAuthClientAuthorizationsFieldPaths = [...]string{
	"authorizations",
}

func (*OAuthClientAuthorizations) FieldMaskPaths() []string {
	ret := make([]string, len(_OAuthClientAuthorizationsFieldPaths))
	copy(ret, _OAuthClientAuthorizationsFieldPaths[:])
	return ret
}

func (dst *OAuthClientAuthorizations) SetFields(src *OAuthClientAuthorizations, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "authorizations":
			dst.Authorizations = src.Authorizations
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _ListOAuthClientAuthorizationsRequestFieldPaths = [...]string{
	"limit",
	"order",
	"page",
	"user_ids",
	"user_ids.email",
	"user_ids.user_id",
}

func (*ListOAuthClientAuthorizationsRequest) FieldMaskPaths() []string {
	ret := make([]string, len(_ListOAuthClientAuthorizationsRequestFieldPaths))
	copy(ret, _ListOAuthClientAuthorizationsRequestFieldPaths[:])
	return ret
}

func (dst *ListOAuthClientAuthorizationsRequest) SetFields(src *ListOAuthClientAuthorizationsRequest, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "limit":
			dst.Limit = src.Limit
		case "order":
			dst.Order = src.Order
		case "page":
			dst.Page = src.Page
		case "user_ids":
			dst.UserIdentifiers = src.UserIdentifiers
		case "user_ids.email":
			dst.UserIdentifiers.SetFields(&src.UserIdentifiers, _pathsWithoutPrefix("user_ids", paths)...)
		case "user_ids.user_id":
			dst.UserIdentifiers.SetFields(&src.UserIdentifiers, _pathsWithoutPrefix("user_ids", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _OAuthAuthorizationCodeFieldPaths = [...]string{
	"client_ids",
	"client_ids.client_id",
	"code",
	"created_at",
	"expires_at",
	"redirect_uri",
	"rights",
	"state",
	"user_ids",
	"user_ids.email",
	"user_ids.user_id",
}

func (*OAuthAuthorizationCode) FieldMaskPaths() []string {
	ret := make([]string, len(_OAuthAuthorizationCodeFieldPaths))
	copy(ret, _OAuthAuthorizationCodeFieldPaths[:])
	return ret
}

func (dst *OAuthAuthorizationCode) SetFields(src *OAuthAuthorizationCode, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "client_ids":
			dst.ClientIDs = src.ClientIDs
		case "client_ids.client_id":
			dst.ClientIDs.SetFields(&src.ClientIDs, _pathsWithoutPrefix("client_ids", paths)...)
		case "code":
			dst.Code = src.Code
		case "created_at":
			dst.CreatedAt = src.CreatedAt
		case "expires_at":
			dst.ExpiresAt = src.ExpiresAt
		case "redirect_uri":
			dst.RedirectURI = src.RedirectURI
		case "rights":
			dst.Rights = src.Rights
		case "state":
			dst.State = src.State
		case "user_ids":
			dst.UserIDs = src.UserIDs
		case "user_ids.email":
			dst.UserIDs.SetFields(&src.UserIDs, _pathsWithoutPrefix("user_ids", paths)...)
		case "user_ids.user_id":
			dst.UserIDs.SetFields(&src.UserIDs, _pathsWithoutPrefix("user_ids", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _OAuthAccessTokenIdentifiersFieldPaths = [...]string{
	"client_ids",
	"client_ids.client_id",
	"id",
	"user_ids",
	"user_ids.email",
	"user_ids.user_id",
}

func (*OAuthAccessTokenIdentifiers) FieldMaskPaths() []string {
	ret := make([]string, len(_OAuthAccessTokenIdentifiersFieldPaths))
	copy(ret, _OAuthAccessTokenIdentifiersFieldPaths[:])
	return ret
}

func (dst *OAuthAccessTokenIdentifiers) SetFields(src *OAuthAccessTokenIdentifiers, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "client_ids":
			dst.ClientIDs = src.ClientIDs
		case "client_ids.client_id":
			dst.ClientIDs.SetFields(&src.ClientIDs, _pathsWithoutPrefix("client_ids", paths)...)
		case "id":
			dst.ID = src.ID
		case "user_ids":
			dst.UserIDs = src.UserIDs
		case "user_ids.email":
			dst.UserIDs.SetFields(&src.UserIDs, _pathsWithoutPrefix("user_ids", paths)...)
		case "user_ids.user_id":
			dst.UserIDs.SetFields(&src.UserIDs, _pathsWithoutPrefix("user_ids", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _OAuthAccessTokenFieldPaths = [...]string{
	"access_token",
	"client_ids",
	"client_ids.client_id",
	"created_at",
	"expires_at",
	"id",
	"refresh_token",
	"rights",
	"user_ids",
	"user_ids.email",
	"user_ids.user_id",
}

func (*OAuthAccessToken) FieldMaskPaths() []string {
	ret := make([]string, len(_OAuthAccessTokenFieldPaths))
	copy(ret, _OAuthAccessTokenFieldPaths[:])
	return ret
}

func (dst *OAuthAccessToken) SetFields(src *OAuthAccessToken, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "access_token":
			dst.AccessToken = src.AccessToken
		case "client_ids":
			dst.ClientIDs = src.ClientIDs
		case "client_ids.client_id":
			dst.ClientIDs.SetFields(&src.ClientIDs, _pathsWithoutPrefix("client_ids", paths)...)
		case "created_at":
			dst.CreatedAt = src.CreatedAt
		case "expires_at":
			dst.ExpiresAt = src.ExpiresAt
		case "id":
			dst.ID = src.ID
		case "refresh_token":
			dst.RefreshToken = src.RefreshToken
		case "rights":
			dst.Rights = src.Rights
		case "user_ids":
			dst.UserIDs = src.UserIDs
		case "user_ids.email":
			dst.UserIDs.SetFields(&src.UserIDs, _pathsWithoutPrefix("user_ids", paths)...)
		case "user_ids.user_id":
			dst.UserIDs.SetFields(&src.UserIDs, _pathsWithoutPrefix("user_ids", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _OAuthAccessTokensFieldPaths = [...]string{
	"tokens",
}

func (*OAuthAccessTokens) FieldMaskPaths() []string {
	ret := make([]string, len(_OAuthAccessTokensFieldPaths))
	copy(ret, _OAuthAccessTokensFieldPaths[:])
	return ret
}

func (dst *OAuthAccessTokens) SetFields(src *OAuthAccessTokens, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "tokens":
			dst.Tokens = src.Tokens
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _ListOAuthAccessTokensRequestFieldPaths = [...]string{
	"client_ids",
	"client_ids.client_id",
	"limit",
	"order",
	"page",
	"user_ids",
	"user_ids.email",
	"user_ids.user_id",
}

func (*ListOAuthAccessTokensRequest) FieldMaskPaths() []string {
	ret := make([]string, len(_ListOAuthAccessTokensRequestFieldPaths))
	copy(ret, _ListOAuthAccessTokensRequestFieldPaths[:])
	return ret
}

func (dst *ListOAuthAccessTokensRequest) SetFields(src *ListOAuthAccessTokensRequest, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "client_ids":
			dst.ClientIDs = src.ClientIDs
		case "client_ids.client_id":
			dst.ClientIDs.SetFields(&src.ClientIDs, _pathsWithoutPrefix("client_ids", paths)...)
		case "limit":
			dst.Limit = src.Limit
		case "order":
			dst.Order = src.Order
		case "page":
			dst.Page = src.Page
		case "user_ids":
			dst.UserIDs = src.UserIDs
		case "user_ids.email":
			dst.UserIDs.SetFields(&src.UserIDs, _pathsWithoutPrefix("user_ids", paths)...)
		case "user_ids.user_id":
			dst.UserIDs.SetFields(&src.UserIDs, _pathsWithoutPrefix("user_ids", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}
