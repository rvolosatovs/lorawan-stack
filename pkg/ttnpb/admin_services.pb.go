// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/admin_services.proto

package ttnpb // import "go.thethings.network/lorawan-stack/pkg/ttnpb"

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import types "github.com/gogo/protobuf/types"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import time "time"

import context "context"
import grpc "google.golang.org/grpc"

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type UserRegistrationSettings struct {
	// Require email address to be validated before the user can perform any actions.
	RequireEmailValidation bool `protobuf:"varint,1,opt,name=require_email_validation,json=requireEmailValidation,proto3" json:"require_email_validation,omitempty"`
	// Require (one-time) invitation token on user registration.
	RequireInvitation bool `protobuf:"varint,2,opt,name=require_invitation,json=requireInvitation,proto3" json:"require_invitation,omitempty"`
	// Require admin approval before the user can perform any actions.
	RequireAdminApproval bool `protobuf:"varint,3,opt,name=require_admin_approval,json=requireAdminApproval,proto3" json:"require_admin_approval,omitempty"`
	// Glob-style patterns of email addresses to allow. Matching addresses do not
	// require an invitation. Invitations can still be sent to other email addresses.
	AllowEmailPatterns   []string `protobuf:"bytes,4,rep,name=allow_email_patterns,json=allowEmailPatterns" json:"allow_email_patterns,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserRegistrationSettings) Reset()      { *m = UserRegistrationSettings{} }
func (*UserRegistrationSettings) ProtoMessage() {}
func (*UserRegistrationSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_admin_services_aae4026b8858278d, []int{0}
}
func (m *UserRegistrationSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserRegistrationSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserRegistrationSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserRegistrationSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRegistrationSettings.Merge(dst, src)
}
func (m *UserRegistrationSettings) XXX_Size() int {
	return m.Size()
}
func (m *UserRegistrationSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRegistrationSettings.DiscardUnknown(m)
}

var xxx_messageInfo_UserRegistrationSettings proto.InternalMessageInfo

func (m *UserRegistrationSettings) GetRequireEmailValidation() bool {
	if m != nil {
		return m.RequireEmailValidation
	}
	return false
}

func (m *UserRegistrationSettings) GetRequireInvitation() bool {
	if m != nil {
		return m.RequireInvitation
	}
	return false
}

func (m *UserRegistrationSettings) GetRequireAdminApproval() bool {
	if m != nil {
		return m.RequireAdminApproval
	}
	return false
}

func (m *UserRegistrationSettings) GetAllowEmailPatterns() []string {
	if m != nil {
		return m.AllowEmailPatterns
	}
	return nil
}

type IdentityServerSettings struct {
	UpdatedAt time.Time `protobuf:"bytes,1,opt,name=updated_at,json=updatedAt,stdtime" json:"updated_at"`
	// A list of blacklisted IDs that can't be used as Application, Client, Gateway, Organization or User ID.
	BlacklistedIDs           []string `protobuf:"bytes,2,rep,name=blacklisted_ids,json=blacklistedIds" json:"blacklisted_ids,omitempty"`
	UserRegistrationSettings `protobuf:"bytes,3,opt,name=user_registration,json=userRegistration,embedded=user_registration" json:"user_registration"`
	// The TTL (expiration) of email validation tokens.
	EmailValidationTokenTTL time.Duration `protobuf:"bytes,4,opt,name=email_validation_token_ttl,json=emailValidationTokenTtl,stdduration" json:"email_validation_token_ttl"`
	// The TTL (expiration) of invitation tokens.
	InvitationTokenTTL   time.Duration `protobuf:"bytes,5,opt,name=invitation_token_ttl,json=invitationTokenTtl,stdduration" json:"invitation_token_ttl"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *IdentityServerSettings) Reset()      { *m = IdentityServerSettings{} }
func (*IdentityServerSettings) ProtoMessage() {}
func (*IdentityServerSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_admin_services_aae4026b8858278d, []int{1}
}
func (m *IdentityServerSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IdentityServerSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IdentityServerSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *IdentityServerSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdentityServerSettings.Merge(dst, src)
}
func (m *IdentityServerSettings) XXX_Size() int {
	return m.Size()
}
func (m *IdentityServerSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_IdentityServerSettings.DiscardUnknown(m)
}

var xxx_messageInfo_IdentityServerSettings proto.InternalMessageInfo

func (m *IdentityServerSettings) GetUpdatedAt() time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return time.Time{}
}

func (m *IdentityServerSettings) GetBlacklistedIDs() []string {
	if m != nil {
		return m.BlacklistedIDs
	}
	return nil
}

func (m *IdentityServerSettings) GetEmailValidationTokenTTL() time.Duration {
	if m != nil {
		return m.EmailValidationTokenTTL
	}
	return 0
}

func (m *IdentityServerSettings) GetInvitationTokenTTL() time.Duration {
	if m != nil {
		return m.InvitationTokenTTL
	}
	return 0
}

type UpdateSettingsRequest struct {
	Settings             IdentityServerSettings `protobuf:"bytes,1,opt,name=settings" json:"settings"`
	FieldMask            types.FieldMask        `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask" json:"field_mask"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *UpdateSettingsRequest) Reset()      { *m = UpdateSettingsRequest{} }
func (*UpdateSettingsRequest) ProtoMessage() {}
func (*UpdateSettingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_admin_services_aae4026b8858278d, []int{2}
}
func (m *UpdateSettingsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSettingsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSettingsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateSettingsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSettingsRequest.Merge(dst, src)
}
func (m *UpdateSettingsRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateSettingsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSettingsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSettingsRequest proto.InternalMessageInfo

func (m *UpdateSettingsRequest) GetSettings() IdentityServerSettings {
	if m != nil {
		return m.Settings
	}
	return IdentityServerSettings{}
}

func (m *UpdateSettingsRequest) GetFieldMask() types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return types.FieldMask{}
}

func init() {
	proto.RegisterType((*UserRegistrationSettings)(nil), "ttn.lorawan.v3.UserRegistrationSettings")
	golang_proto.RegisterType((*UserRegistrationSettings)(nil), "ttn.lorawan.v3.UserRegistrationSettings")
	proto.RegisterType((*IdentityServerSettings)(nil), "ttn.lorawan.v3.IdentityServerSettings")
	golang_proto.RegisterType((*IdentityServerSettings)(nil), "ttn.lorawan.v3.IdentityServerSettings")
	proto.RegisterType((*UpdateSettingsRequest)(nil), "ttn.lorawan.v3.UpdateSettingsRequest")
	golang_proto.RegisterType((*UpdateSettingsRequest)(nil), "ttn.lorawan.v3.UpdateSettingsRequest")
}
func (this *UserRegistrationSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserRegistrationSettings)
	if !ok {
		that2, ok := that.(UserRegistrationSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RequireEmailValidation != that1.RequireEmailValidation {
		return false
	}
	if this.RequireInvitation != that1.RequireInvitation {
		return false
	}
	if this.RequireAdminApproval != that1.RequireAdminApproval {
		return false
	}
	if len(this.AllowEmailPatterns) != len(that1.AllowEmailPatterns) {
		return false
	}
	for i := range this.AllowEmailPatterns {
		if this.AllowEmailPatterns[i] != that1.AllowEmailPatterns[i] {
			return false
		}
	}
	return true
}
func (this *IdentityServerSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IdentityServerSettings)
	if !ok {
		that2, ok := that.(IdentityServerSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if len(this.BlacklistedIDs) != len(that1.BlacklistedIDs) {
		return false
	}
	for i := range this.BlacklistedIDs {
		if this.BlacklistedIDs[i] != that1.BlacklistedIDs[i] {
			return false
		}
	}
	if !this.UserRegistrationSettings.Equal(&that1.UserRegistrationSettings) {
		return false
	}
	if this.EmailValidationTokenTTL != that1.EmailValidationTokenTTL {
		return false
	}
	if this.InvitationTokenTTL != that1.InvitationTokenTTL {
		return false
	}
	return true
}
func (this *UpdateSettingsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSettingsRequest)
	if !ok {
		that2, ok := that.(UpdateSettingsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Settings.Equal(&that1.Settings) {
		return false
	}
	if !this.FieldMask.Equal(&that1.FieldMask) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for IsSettings service

type IsSettingsClient interface {
	GetSettings(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*IdentityServerSettings, error)
	UpdateSettings(ctx context.Context, in *UpdateSettingsRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type isSettingsClient struct {
	cc *grpc.ClientConn
}

func NewIsSettingsClient(cc *grpc.ClientConn) IsSettingsClient {
	return &isSettingsClient{cc}
}

func (c *isSettingsClient) GetSettings(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*IdentityServerSettings, error) {
	out := new(IdentityServerSettings)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.IsSettings/GetSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isSettingsClient) UpdateSettings(ctx context.Context, in *UpdateSettingsRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.IsSettings/UpdateSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IsSettings service

type IsSettingsServer interface {
	GetSettings(context.Context, *types.Empty) (*IdentityServerSettings, error)
	UpdateSettings(context.Context, *UpdateSettingsRequest) (*types.Empty, error)
}

func RegisterIsSettingsServer(s *grpc.Server, srv IsSettingsServer) {
	s.RegisterService(&_IsSettings_serviceDesc, srv)
}

func _IsSettings_GetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsSettingsServer).GetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsSettings/GetSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsSettingsServer).GetSettings(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsSettings_UpdateSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsSettingsServer).UpdateSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsSettings/UpdateSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsSettingsServer).UpdateSettings(ctx, req.(*UpdateSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IsSettings_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.IsSettings",
	HandlerType: (*IsSettingsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSettings",
			Handler:    _IsSettings_GetSettings_Handler,
		},
		{
			MethodName: "UpdateSettings",
			Handler:    _IsSettings_UpdateSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/admin_services.proto",
}

func (m *UserRegistrationSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserRegistrationSettings) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RequireEmailValidation {
		dAtA[i] = 0x8
		i++
		if m.RequireEmailValidation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RequireInvitation {
		dAtA[i] = 0x10
		i++
		if m.RequireInvitation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RequireAdminApproval {
		dAtA[i] = 0x18
		i++
		if m.RequireAdminApproval {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.AllowEmailPatterns) > 0 {
		for _, s := range m.AllowEmailPatterns {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *IdentityServerSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IdentityServerSettings) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintAdminServices(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)))
	n1, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.BlacklistedIDs) > 0 {
		for _, s := range m.BlacklistedIDs {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintAdminServices(dAtA, i, uint64(m.UserRegistrationSettings.Size()))
	n2, err := m.UserRegistrationSettings.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x22
	i++
	i = encodeVarintAdminServices(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdDuration(m.EmailValidationTokenTTL)))
	n3, err := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.EmailValidationTokenTTL, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x2a
	i++
	i = encodeVarintAdminServices(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdDuration(m.InvitationTokenTTL)))
	n4, err := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.InvitationTokenTTL, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *UpdateSettingsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSettingsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintAdminServices(dAtA, i, uint64(m.Settings.Size()))
	n5, err := m.Settings.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x12
	i++
	i = encodeVarintAdminServices(dAtA, i, uint64(m.FieldMask.Size()))
	n6, err := m.FieldMask.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	return i, nil
}

func encodeVarintAdminServices(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedUserRegistrationSettings(r randyAdminServices, easy bool) *UserRegistrationSettings {
	this := &UserRegistrationSettings{}
	this.RequireEmailValidation = bool(r.Intn(2) == 0)
	this.RequireInvitation = bool(r.Intn(2) == 0)
	this.RequireAdminApproval = bool(r.Intn(2) == 0)
	v1 := r.Intn(10)
	this.AllowEmailPatterns = make([]string, v1)
	for i := 0; i < v1; i++ {
		this.AllowEmailPatterns[i] = randStringAdminServices(r)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedIdentityServerSettings(r randyAdminServices, easy bool) *IdentityServerSettings {
	this := &IdentityServerSettings{}
	v2 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.UpdatedAt = *v2
	v3 := r.Intn(10)
	this.BlacklistedIDs = make([]string, v3)
	for i := 0; i < v3; i++ {
		this.BlacklistedIDs[i] = randStringAdminServices(r)
	}
	v4 := NewPopulatedUserRegistrationSettings(r, easy)
	this.UserRegistrationSettings = *v4
	v5 := github_com_gogo_protobuf_types.NewPopulatedStdDuration(r, easy)
	this.EmailValidationTokenTTL = *v5
	v6 := github_com_gogo_protobuf_types.NewPopulatedStdDuration(r, easy)
	this.InvitationTokenTTL = *v6
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateSettingsRequest(r randyAdminServices, easy bool) *UpdateSettingsRequest {
	this := &UpdateSettingsRequest{}
	v7 := NewPopulatedIdentityServerSettings(r, easy)
	this.Settings = *v7
	v8 := types.NewPopulatedFieldMask(r, easy)
	this.FieldMask = *v8
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyAdminServices interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneAdminServices(r randyAdminServices) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringAdminServices(r randyAdminServices) string {
	v9 := r.Intn(100)
	tmps := make([]rune, v9)
	for i := 0; i < v9; i++ {
		tmps[i] = randUTF8RuneAdminServices(r)
	}
	return string(tmps)
}
func randUnrecognizedAdminServices(r randyAdminServices, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldAdminServices(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldAdminServices(dAtA []byte, r randyAdminServices, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateAdminServices(dAtA, uint64(key))
		v10 := r.Int63()
		if r.Intn(2) == 0 {
			v10 *= -1
		}
		dAtA = encodeVarintPopulateAdminServices(dAtA, uint64(v10))
	case 1:
		dAtA = encodeVarintPopulateAdminServices(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateAdminServices(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateAdminServices(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateAdminServices(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateAdminServices(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *UserRegistrationSettings) Size() (n int) {
	var l int
	_ = l
	if m.RequireEmailValidation {
		n += 2
	}
	if m.RequireInvitation {
		n += 2
	}
	if m.RequireAdminApproval {
		n += 2
	}
	if len(m.AllowEmailPatterns) > 0 {
		for _, s := range m.AllowEmailPatterns {
			l = len(s)
			n += 1 + l + sovAdminServices(uint64(l))
		}
	}
	return n
}

func (m *IdentityServerSettings) Size() (n int) {
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)
	n += 1 + l + sovAdminServices(uint64(l))
	if len(m.BlacklistedIDs) > 0 {
		for _, s := range m.BlacklistedIDs {
			l = len(s)
			n += 1 + l + sovAdminServices(uint64(l))
		}
	}
	l = m.UserRegistrationSettings.Size()
	n += 1 + l + sovAdminServices(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.EmailValidationTokenTTL)
	n += 1 + l + sovAdminServices(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.InvitationTokenTTL)
	n += 1 + l + sovAdminServices(uint64(l))
	return n
}

func (m *UpdateSettingsRequest) Size() (n int) {
	var l int
	_ = l
	l = m.Settings.Size()
	n += 1 + l + sovAdminServices(uint64(l))
	l = m.FieldMask.Size()
	n += 1 + l + sovAdminServices(uint64(l))
	return n
}

func sovAdminServices(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAdminServices(x uint64) (n int) {
	return sovAdminServices((x << 1) ^ uint64((int64(x) >> 63)))
}
func (this *UserRegistrationSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserRegistrationSettings{`,
		`RequireEmailValidation:` + fmt.Sprintf("%v", this.RequireEmailValidation) + `,`,
		`RequireInvitation:` + fmt.Sprintf("%v", this.RequireInvitation) + `,`,
		`RequireAdminApproval:` + fmt.Sprintf("%v", this.RequireAdminApproval) + `,`,
		`AllowEmailPatterns:` + fmt.Sprintf("%v", this.AllowEmailPatterns) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IdentityServerSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IdentityServerSettings{`,
		`UpdatedAt:` + strings.Replace(strings.Replace(this.UpdatedAt.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`BlacklistedIDs:` + fmt.Sprintf("%v", this.BlacklistedIDs) + `,`,
		`UserRegistrationSettings:` + strings.Replace(strings.Replace(this.UserRegistrationSettings.String(), "UserRegistrationSettings", "UserRegistrationSettings", 1), `&`, ``, 1) + `,`,
		`EmailValidationTokenTTL:` + strings.Replace(strings.Replace(this.EmailValidationTokenTTL.String(), "Duration", "types.Duration", 1), `&`, ``, 1) + `,`,
		`InvitationTokenTTL:` + strings.Replace(strings.Replace(this.InvitationTokenTTL.String(), "Duration", "types.Duration", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSettingsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSettingsRequest{`,
		`Settings:` + strings.Replace(strings.Replace(this.Settings.String(), "IdentityServerSettings", "IdentityServerSettings", 1), `&`, ``, 1) + `,`,
		`FieldMask:` + strings.Replace(strings.Replace(this.FieldMask.String(), "FieldMask", "types.FieldMask", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAdminServices(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *UserRegistrationSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserRegistrationSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserRegistrationSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequireEmailValidation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RequireEmailValidation = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequireInvitation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RequireInvitation = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequireAdminApproval", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RequireAdminApproval = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowEmailPatterns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdminServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowEmailPatterns = append(m.AllowEmailPatterns, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdminServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IdentityServerSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IdentityServerSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IdentityServerSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminServices
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlacklistedIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdminServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlacklistedIDs = append(m.BlacklistedIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserRegistrationSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminServices
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserRegistrationSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailValidationTokenTTL", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminServices
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.EmailValidationTokenTTL, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvitationTokenTTL", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminServices
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.InvitationTokenTTL, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdminServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSettingsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSettingsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSettingsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminServices
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminServices
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdminServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAdminServices(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAdminServices
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdminServices
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdminServices
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAdminServices
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAdminServices
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAdminServices(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAdminServices = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAdminServices   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("lorawan-stack/api/admin_services.proto", fileDescriptor_admin_services_aae4026b8858278d)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/admin_services.proto", fileDescriptor_admin_services_aae4026b8858278d)
}

var fileDescriptor_admin_services_aae4026b8858278d = []byte{
	// 796 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x41, 0x6c, 0xdc, 0x44,
	0x14, 0x9d, 0x49, 0x02, 0x4a, 0x26, 0x52, 0xa0, 0xa3, 0x90, 0x2c, 0x06, 0x66, 0xa3, 0x45, 0x54,
	0x11, 0x22, 0x36, 0x4a, 0x39, 0x20, 0x38, 0xa0, 0x2c, 0x2d, 0xb0, 0x12, 0x48, 0xc8, 0x4d, 0x39,
	0x70, 0xb1, 0x66, 0xe3, 0x89, 0x33, 0xb2, 0xd7, 0x76, 0x3d, 0xdf, 0x1b, 0x55, 0x5c, 0x2a, 0x4e,
	0x3d, 0x56, 0xe2, 0xd2, 0x23, 0xea, 0xa9, 0xc7, 0x1e, 0x7b, 0xec, 0x31, 0xc7, 0x48, 0x5c, 0x7a,
	0x0a, 0x5d, 0x1b, 0x44, 0x25, 0x2e, 0x3d, 0xf6, 0x88, 0x3c, 0x9e, 0x75, 0x12, 0x67, 0x23, 0x7a,
	0xf3, 0xcc, 0x7b, 0xff, 0xff, 0xf7, 0xff, 0x7f, 0x1e, 0x72, 0x35, 0x4a, 0x32, 0x7e, 0xc8, 0xe3,
	0x2d, 0x05, 0x7c, 0x2f, 0x74, 0x78, 0x2a, 0x1d, 0xee, 0x8f, 0x64, 0xec, 0x29, 0x91, 0x8d, 0xe5,
	0x9e, 0x50, 0x76, 0x9a, 0x25, 0x90, 0xd0, 0x15, 0x80, 0xd8, 0x36, 0x5c, 0x7b, 0x7c, 0xcd, 0xda,
	0x0a, 0x24, 0x1c, 0xe4, 0x43, 0x7b, 0x2f, 0x19, 0x39, 0x41, 0x12, 0x24, 0x8e, 0xa6, 0x0d, 0xf3,
	0x7d, 0x7d, 0xd2, 0x07, 0xfd, 0x55, 0x87, 0x5b, 0xef, 0x07, 0x49, 0x12, 0x44, 0xa2, 0xce, 0x1f,
	0xc7, 0x09, 0x70, 0x90, 0x49, 0x6c, 0x92, 0x5b, 0xcc, 0xa0, 0x4d, 0x0e, 0x3f, 0xcf, 0x34, 0xc1,
	0xe0, 0xef, 0xb5, 0x71, 0x31, 0x4a, 0xe1, 0x8e, 0x01, 0x37, 0xda, 0xe0, 0xbe, 0x14, 0x91, 0xef,
	0x8d, 0xb8, 0x0a, 0x0d, 0xa3, 0xdb, 0x66, 0x80, 0x1c, 0x09, 0x05, 0x7c, 0x94, 0xd6, 0x84, 0xde,
	0xbf, 0x98, 0x74, 0x6e, 0x29, 0x91, 0xb9, 0x22, 0x90, 0x0a, 0xea, 0xd2, 0x37, 0x05, 0x80, 0x8c,
	0x03, 0x45, 0x3f, 0x27, 0x9d, 0x4c, 0xdc, 0xce, 0x65, 0x26, 0x3c, 0x31, 0xe2, 0x32, 0xf2, 0xc6,
	0x3c, 0x92, 0xbe, 0xe6, 0x74, 0xf0, 0x06, 0xde, 0x5c, 0x74, 0xd7, 0x0c, 0x7e, 0xa3, 0x82, 0x7f,
	0x6a, 0x50, 0xba, 0x45, 0xe8, 0x34, 0x52, 0xc6, 0x63, 0x59, 0xf7, 0xdc, 0x99, 0xd3, 0x31, 0x57,
	0x0c, 0x32, 0x68, 0x00, 0xfa, 0x19, 0x99, 0x26, 0xf2, 0xea, 0x15, 0xf0, 0x34, 0xcd, 0x92, 0x31,
	0x8f, 0x3a, 0xf3, 0x3a, 0x64, 0xd5, 0xa0, 0x3b, 0x15, 0xb8, 0x63, 0x30, 0xfa, 0x29, 0x59, 0xe5,
	0x51, 0x94, 0x1c, 0x1a, 0x71, 0x29, 0x07, 0x10, 0x59, 0xac, 0x3a, 0x0b, 0x1b, 0xf3, 0x9b, 0x4b,
	0x2e, 0xd5, 0x98, 0x16, 0xf6, 0xa3, 0x41, 0x7a, 0x7f, 0xcf, 0x93, 0xb5, 0x81, 0x2f, 0x62, 0x90,
	0x70, 0xe7, 0xa6, 0xc8, 0xc6, 0x22, 0x6b, 0x7a, 0xfd, 0x9a, 0x90, 0x3c, 0xf5, 0x39, 0x08, 0xdf,
	0xe3, 0xa0, 0xbb, 0x5b, 0xde, 0xb6, 0xec, 0x7a, 0x7c, 0xf6, 0x74, 0x7c, 0xf6, 0xee, 0x74, 0x7c,
	0xfd, 0xc5, 0xa3, 0x93, 0x2e, 0xba, 0xff, 0x67, 0x17, 0xbb, 0x4b, 0x26, 0x6e, 0x07, 0xe8, 0x97,
	0xe4, 0xad, 0x61, 0xc4, 0xf7, 0xc2, 0x48, 0xaa, 0x2a, 0x91, 0xf4, 0x55, 0x67, 0xae, 0x12, 0xd3,
	0xa7, 0xc5, 0x49, 0x77, 0xa5, 0x7f, 0x0a, 0x0d, 0xae, 0x2b, 0x77, 0xe5, 0x0c, 0x75, 0xe0, 0x2b,
	0xea, 0x91, 0x2b, 0xb9, 0x12, 0x99, 0x97, 0x9d, 0x59, 0x85, 0xee, 0x7f, 0x79, 0x7b, 0xd3, 0x3e,
	0xef, 0x41, 0xfb, 0xb2, 0x95, 0xd5, 0xb2, 0x8e, 0x4f, 0xba, 0xd8, 0x7d, 0x3b, 0x6f, 0x71, 0xe8,
	0x2f, 0xc4, 0x6a, 0xaf, 0xd1, 0x83, 0x24, 0x14, 0xb1, 0x07, 0x10, 0x75, 0x16, 0x74, 0xa5, 0x77,
	0x2f, 0xb4, 0x7c, 0xdd, 0x18, 0xb2, 0xff, 0x61, 0x95, 0xba, 0x38, 0xe9, 0xae, 0xb7, 0x96, 0xbd,
	0x5b, 0xa5, 0xd8, 0xdd, 0xfd, 0xfe, 0x41, 0x35, 0x8c, 0x75, 0x31, 0x0b, 0x84, 0x88, 0x86, 0x64,
	0xf5, 0xd4, 0x09, 0x67, 0xca, 0xbe, 0xf1, 0x7f, 0x65, 0x99, 0x29, 0x4b, 0x4f, 0xfd, 0x72, 0xae,
	0x22, 0x95, 0xad, 0x7b, 0x88, 0x7a, 0x0f, 0x31, 0x79, 0xe7, 0x96, 0xde, 0xca, 0x74, 0x30, 0xae,
	0xb8, 0x9d, 0x0b, 0x05, 0xf4, 0x3b, 0xb2, 0xa8, 0xcc, 0x95, 0x59, 0xf2, 0xd5, 0xf6, 0x6c, 0x67,
	0x1b, 0xa4, 0xbf, 0x50, 0xe9, 0x70, 0x9b, 0x68, 0xfa, 0x15, 0x21, 0xa7, 0xbf, 0x9b, 0xb6, 0xf6,
	0x2c, 0xc3, 0x7c, 0x53, 0x51, 0x7e, 0xe0, 0x2a, 0x34, 0xf1, 0x4b, 0xfb, 0xd3, 0x8b, 0xed, 0x7f,
	0x30, 0x21, 0x03, 0xd5, 0x18, 0x50, 0x92, 0xe5, 0x6f, 0x05, 0x34, 0xc7, 0xb5, 0x0b, 0xa9, 0x6e,
	0x54, 0x7f, 0xbe, 0xf5, 0x9a, 0x72, 0x7b, 0xd6, 0xaf, 0x7f, 0xfc, 0xf5, 0xdb, 0xdc, 0x2a, 0xa5,
	0x8e, 0x54, 0xf5, 0xbb, 0xe6, 0x34, 0xd2, 0x63, 0xb2, 0x72, 0x7e, 0x3a, 0xf4, 0xa3, 0x0b, 0x06,
	0x9b, 0x35, 0x3d, 0xeb, 0x12, 0x51, 0xbd, 0x0f, 0x74, 0xb1, 0x75, 0x6b, 0x46, 0xb1, 0x2f, 0xf0,
	0xc7, 0xfd, 0x87, 0xf8, 0x68, 0xc2, 0xf0, 0xf1, 0x84, 0xe1, 0x67, 0x13, 0x86, 0x9e, 0x4f, 0x18,
	0x7a, 0x31, 0x61, 0xe8, 0xe5, 0x84, 0xa1, 0x57, 0x13, 0x86, 0xef, 0x16, 0x0c, 0xdf, 0x2b, 0x18,
	0x7a, 0x54, 0x30, 0xfc, 0xb8, 0x60, 0xe8, 0x49, 0xc1, 0xd0, 0xd3, 0x82, 0xa1, 0xa3, 0x82, 0xe1,
	0xe3, 0x82, 0xe1, 0x67, 0x05, 0x43, 0xcf, 0x0b, 0x86, 0x5f, 0x14, 0x0c, 0xbd, 0x2c, 0x18, 0x7e,
	0x55, 0x30, 0x74, 0xb7, 0x64, 0xe8, 0x5e, 0xc9, 0xf0, 0xfd, 0x92, 0xa1, 0x07, 0x25, 0xc3, 0xbf,
	0x97, 0x0c, 0x3d, 0x2a, 0x19, 0x7a, 0x5c, 0x32, 0xfc, 0xa4, 0x64, 0xf8, 0x69, 0xc9, 0xf0, 0xcf,
	0x9f, 0x04, 0x89, 0x0d, 0x07, 0x02, 0x0e, 0x2a, 0x1d, 0x76, 0x2c, 0xe0, 0x30, 0xc9, 0x42, 0xe7,
	0xfc, 0xab, 0x9f, 0x86, 0x81, 0x03, 0x10, 0xa7, 0xc3, 0xe1, 0x9b, 0xba, 0xa7, 0x6b, 0xff, 0x05,
	0x00, 0x00, 0xff, 0xff, 0x7a, 0xa2, 0x32, 0x19, 0x17, 0x06, 0x00, 0x00,
}
