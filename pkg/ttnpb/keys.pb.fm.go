// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import fmt "fmt"

var _KeyEnvelopeFieldPaths = [...]string{
	"kek_label",
	"key",
}

func (*KeyEnvelope) FieldMaskPaths() []string {
	ret := make([]string, len(_KeyEnvelopeFieldPaths))
	copy(ret, _KeyEnvelopeFieldPaths[:])
	return ret
}

func (dst *KeyEnvelope) SetFields(src *KeyEnvelope, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "kek_label":
			dst.KEKLabel = src.KEKLabel
		case "key":
			dst.Key = src.Key
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _RootKeysFieldPaths = [...]string{
	"app_key",
	"app_key.kek_label",
	"app_key.key",
	"nwk_key",
	"nwk_key.kek_label",
	"nwk_key.key",
	"root_key_id",
}

func (*RootKeys) FieldMaskPaths() []string {
	ret := make([]string, len(_RootKeysFieldPaths))
	copy(ret, _RootKeysFieldPaths[:])
	return ret
}

func (dst *RootKeys) SetFields(src *RootKeys, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "app_key":
			dst.AppKey = src.AppKey
		case "app_key.kek_label":
			if dst.AppKey == nil {
				dst.AppKey = &KeyEnvelope{}
			}
			dst.AppKey.SetFields(src.AppKey, _pathsWithoutPrefix("app_key", paths)...)
		case "app_key.key":
			if dst.AppKey == nil {
				dst.AppKey = &KeyEnvelope{}
			}
			dst.AppKey.SetFields(src.AppKey, _pathsWithoutPrefix("app_key", paths)...)
		case "nwk_key":
			dst.NwkKey = src.NwkKey
		case "nwk_key.kek_label":
			if dst.NwkKey == nil {
				dst.NwkKey = &KeyEnvelope{}
			}
			dst.NwkKey.SetFields(src.NwkKey, _pathsWithoutPrefix("nwk_key", paths)...)
		case "nwk_key.key":
			if dst.NwkKey == nil {
				dst.NwkKey = &KeyEnvelope{}
			}
			dst.NwkKey.SetFields(src.NwkKey, _pathsWithoutPrefix("nwk_key", paths)...)
		case "root_key_id":
			dst.RootKeyID = src.RootKeyID
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _SessionKeysFieldPaths = [...]string{
	"app_s_key",
	"app_s_key.kek_label",
	"app_s_key.key",
	"f_nwk_s_int_key",
	"f_nwk_s_int_key.kek_label",
	"f_nwk_s_int_key.key",
	"nwk_s_enc_key",
	"nwk_s_enc_key.kek_label",
	"nwk_s_enc_key.key",
	"s_nwk_s_int_key",
	"s_nwk_s_int_key.kek_label",
	"s_nwk_s_int_key.key",
	"session_key_id",
}

func (*SessionKeys) FieldMaskPaths() []string {
	ret := make([]string, len(_SessionKeysFieldPaths))
	copy(ret, _SessionKeysFieldPaths[:])
	return ret
}

func (dst *SessionKeys) SetFields(src *SessionKeys, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "app_s_key":
			dst.AppSKey = src.AppSKey
		case "app_s_key.kek_label":
			if dst.AppSKey == nil {
				dst.AppSKey = &KeyEnvelope{}
			}
			dst.AppSKey.SetFields(src.AppSKey, _pathsWithoutPrefix("app_s_key", paths)...)
		case "app_s_key.key":
			if dst.AppSKey == nil {
				dst.AppSKey = &KeyEnvelope{}
			}
			dst.AppSKey.SetFields(src.AppSKey, _pathsWithoutPrefix("app_s_key", paths)...)
		case "f_nwk_s_int_key":
			dst.FNwkSIntKey = src.FNwkSIntKey
		case "f_nwk_s_int_key.kek_label":
			if dst.FNwkSIntKey == nil {
				dst.FNwkSIntKey = &KeyEnvelope{}
			}
			dst.FNwkSIntKey.SetFields(src.FNwkSIntKey, _pathsWithoutPrefix("f_nwk_s_int_key", paths)...)
		case "f_nwk_s_int_key.key":
			if dst.FNwkSIntKey == nil {
				dst.FNwkSIntKey = &KeyEnvelope{}
			}
			dst.FNwkSIntKey.SetFields(src.FNwkSIntKey, _pathsWithoutPrefix("f_nwk_s_int_key", paths)...)
		case "nwk_s_enc_key":
			dst.NwkSEncKey = src.NwkSEncKey
		case "nwk_s_enc_key.kek_label":
			if dst.NwkSEncKey == nil {
				dst.NwkSEncKey = &KeyEnvelope{}
			}
			dst.NwkSEncKey.SetFields(src.NwkSEncKey, _pathsWithoutPrefix("nwk_s_enc_key", paths)...)
		case "nwk_s_enc_key.key":
			if dst.NwkSEncKey == nil {
				dst.NwkSEncKey = &KeyEnvelope{}
			}
			dst.NwkSEncKey.SetFields(src.NwkSEncKey, _pathsWithoutPrefix("nwk_s_enc_key", paths)...)
		case "s_nwk_s_int_key":
			dst.SNwkSIntKey = src.SNwkSIntKey
		case "s_nwk_s_int_key.kek_label":
			if dst.SNwkSIntKey == nil {
				dst.SNwkSIntKey = &KeyEnvelope{}
			}
			dst.SNwkSIntKey.SetFields(src.SNwkSIntKey, _pathsWithoutPrefix("s_nwk_s_int_key", paths)...)
		case "s_nwk_s_int_key.key":
			if dst.SNwkSIntKey == nil {
				dst.SNwkSIntKey = &KeyEnvelope{}
			}
			dst.SNwkSIntKey.SetFields(src.SNwkSIntKey, _pathsWithoutPrefix("s_nwk_s_int_key", paths)...)
		case "session_key_id":
			dst.SessionKeyID = src.SessionKeyID
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}
