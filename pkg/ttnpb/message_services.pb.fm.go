// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import fmt "fmt"

var ProcessUplinkMessageRequestFieldPathsNested = []string{
	"end_device_version_ids",
	"end_device_version_ids.brand_id",
	"end_device_version_ids.firmware_version",
	"end_device_version_ids.hardware_version",
	"end_device_version_ids.model_id",
	"ids",
	"ids.application_ids",
	"ids.application_ids.application_id",
	"ids.dev_addr",
	"ids.dev_eui",
	"ids.device_id",
	"ids.join_eui",
	"message",
	"message.decoded_payload",
	"message.f_cnt",
	"message.f_port",
	"message.frm_payload",
	"message.rx_metadata",
	"message.session_key_id",
	"message.settings",
	"message.settings.coding_rate",
	"message.settings.data_rate",
	"message.settings.data_rate.modulation",
	"message.settings.data_rate.modulation.fsk",
	"message.settings.data_rate.modulation.fsk.bit_rate",
	"message.settings.data_rate.modulation.lora",
	"message.settings.data_rate.modulation.lora.bandwidth",
	"message.settings.data_rate.modulation.lora.spreading_factor",
	"message.settings.data_rate_index",
	"message.settings.device_channel_index",
	"message.settings.enable_crc",
	"message.settings.frequency",
	"message.settings.gateway_channel_index",
	"message.settings.invert_polarization",
	"message.settings.time",
	"message.settings.timestamp",
	"message.settings.tx_power",
	"parameter",
}

var ProcessUplinkMessageRequestFieldPathsTopLevel = []string{
	"end_device_version_ids",
	"ids",
	"message",
	"parameter",
}

func (dst *ProcessUplinkMessageRequest) SetFields(src *ProcessUplinkMessageRequest, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "ids":
			if len(subs) > 0 {
				newDst := &dst.EndDeviceIdentifiers
				var newSrc *EndDeviceIdentifiers
				if src != nil {
					newSrc = &src.EndDeviceIdentifiers
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.EndDeviceIdentifiers = src.EndDeviceIdentifiers
				} else {
					var zero EndDeviceIdentifiers
					dst.EndDeviceIdentifiers = zero
				}
			}
		case "end_device_version_ids":
			if len(subs) > 0 {
				newDst := &dst.EndDeviceVersionIDs
				var newSrc *EndDeviceVersionIdentifiers
				if src != nil {
					newSrc = &src.EndDeviceVersionIDs
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.EndDeviceVersionIDs = src.EndDeviceVersionIDs
				} else {
					var zero EndDeviceVersionIdentifiers
					dst.EndDeviceVersionIDs = zero
				}
			}
		case "message":
			if len(subs) > 0 {
				newDst := &dst.Message
				var newSrc *ApplicationUplink
				if src != nil {
					newSrc = &src.Message
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Message = src.Message
				} else {
					var zero ApplicationUplink
					dst.Message = zero
				}
			}
		case "parameter":
			if len(subs) > 0 {
				return fmt.Errorf("'parameter' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Parameter = src.Parameter
			} else {
				var zero string
				dst.Parameter = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var ProcessDownlinkMessageRequestFieldPathsNested = []string{
	"end_device_version_ids",
	"end_device_version_ids.brand_id",
	"end_device_version_ids.firmware_version",
	"end_device_version_ids.hardware_version",
	"end_device_version_ids.model_id",
	"ids",
	"ids.application_ids",
	"ids.application_ids.application_id",
	"ids.dev_addr",
	"ids.dev_eui",
	"ids.device_id",
	"ids.join_eui",
	"message",
	"message.class_b_c",
	"message.class_b_c.absolute_time",
	"message.class_b_c.gateways",
	"message.confirmed",
	"message.correlation_ids",
	"message.decoded_payload",
	"message.f_cnt",
	"message.f_port",
	"message.frm_payload",
	"message.priority",
	"message.session_key_id",
	"parameter",
}

var ProcessDownlinkMessageRequestFieldPathsTopLevel = []string{
	"end_device_version_ids",
	"ids",
	"message",
	"parameter",
}

func (dst *ProcessDownlinkMessageRequest) SetFields(src *ProcessDownlinkMessageRequest, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "ids":
			if len(subs) > 0 {
				newDst := &dst.EndDeviceIdentifiers
				var newSrc *EndDeviceIdentifiers
				if src != nil {
					newSrc = &src.EndDeviceIdentifiers
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.EndDeviceIdentifiers = src.EndDeviceIdentifiers
				} else {
					var zero EndDeviceIdentifiers
					dst.EndDeviceIdentifiers = zero
				}
			}
		case "end_device_version_ids":
			if len(subs) > 0 {
				newDst := &dst.EndDeviceVersionIDs
				var newSrc *EndDeviceVersionIdentifiers
				if src != nil {
					newSrc = &src.EndDeviceVersionIDs
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.EndDeviceVersionIDs = src.EndDeviceVersionIDs
				} else {
					var zero EndDeviceVersionIdentifiers
					dst.EndDeviceVersionIDs = zero
				}
			}
		case "message":
			if len(subs) > 0 {
				newDst := &dst.Message
				var newSrc *ApplicationDownlink
				if src != nil {
					newSrc = &src.Message
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Message = src.Message
				} else {
					var zero ApplicationDownlink
					dst.Message = zero
				}
			}
		case "parameter":
			if len(subs) > 0 {
				return fmt.Errorf("'parameter' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Parameter = src.Parameter
			} else {
				var zero string
				dst.Parameter = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}
