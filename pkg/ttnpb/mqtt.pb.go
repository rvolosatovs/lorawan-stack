// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/mqtt.proto

package ttnpb

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// The connection information of an MQTT frontend.
type MQTTConnectionInfo struct {
	// The public listen address of the frontend.
	PublicAddress string `protobuf:"bytes,1,opt,name=public_address,json=publicAddress,proto3" json:"public_address,omitempty"`
	// The public listen address of the TLS frontend.
	PublicTLSAddress string `protobuf:"bytes,2,opt,name=public_tls_address,json=publicTlsAddress,proto3" json:"public_tls_address,omitempty"`
	// The username to be used for authentication.
	Username             string   `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MQTTConnectionInfo) Reset()      { *m = MQTTConnectionInfo{} }
func (*MQTTConnectionInfo) ProtoMessage() {}
func (*MQTTConnectionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbbf9b6b10797b61, []int{0}
}
func (m *MQTTConnectionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MQTTConnectionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MQTTConnectionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MQTTConnectionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MQTTConnectionInfo.Merge(m, src)
}
func (m *MQTTConnectionInfo) XXX_Size() int {
	return m.Size()
}
func (m *MQTTConnectionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MQTTConnectionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MQTTConnectionInfo proto.InternalMessageInfo

func (m *MQTTConnectionInfo) GetPublicAddress() string {
	if m != nil {
		return m.PublicAddress
	}
	return ""
}

func (m *MQTTConnectionInfo) GetPublicTLSAddress() string {
	if m != nil {
		return m.PublicTLSAddress
	}
	return ""
}

func (m *MQTTConnectionInfo) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func init() {
	proto.RegisterType((*MQTTConnectionInfo)(nil), "ttn.lorawan.v3.MQTTConnectionInfo")
	golang_proto.RegisterType((*MQTTConnectionInfo)(nil), "ttn.lorawan.v3.MQTTConnectionInfo")
}

func init() { proto.RegisterFile("lorawan-stack/api/mqtt.proto", fileDescriptor_dbbf9b6b10797b61) }
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/mqtt.proto", fileDescriptor_dbbf9b6b10797b61)
}

var fileDescriptor_dbbf9b6b10797b61 = []byte{
	// 508 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x92, 0xbf, 0x6b, 0x14, 0x41,
	0x14, 0xc7, 0xe7, 0x19, 0x10, 0x3d, 0x30, 0x84, 0xad, 0xc2, 0x11, 0x9e, 0xa2, 0x29, 0xee, 0x42,
	0x66, 0x57, 0x0d, 0x16, 0x5e, 0x73, 0xdc, 0x59, 0x09, 0x0a, 0x7a, 0x5e, 0x75, 0xf9, 0x21, 0xb3,
	0x7b, 0x73, 0x7b, 0xcb, 0xed, 0xcd, 0xac, 0xbb, 0x73, 0x17, 0x13, 0x23, 0xa4, 0x10, 0x0c, 0x16,
	0x62, 0x69, 0x29, 0xa9, 0x52, 0xa6, 0x92, 0x34, 0x42, 0xca, 0x94, 0xb1, 0x4b, 0x25, 0xd9, 0xd9,
	0x26, 0x65, 0xca, 0x60, 0x25, 0xb7, 0xbb, 0xe6, 0x4e, 0xf2, 0x0f, 0xd8, 0x7d, 0x1e, 0xef, 0xfb,
	0x1d, 0x3e, 0x0f, 0xa6, 0x30, 0xe7, 0xcb, 0x90, 0xad, 0x33, 0x41, 0x23, 0xc5, 0x9c, 0x9e, 0xc5,
	0x02, 0xcf, 0xea, 0xbf, 0x51, 0xca, 0x0c, 0x42, 0xa9, 0xa4, 0x31, 0xad, 0x94, 0x30, 0xf3, 0x84,
	0x39, 0x5c, 0x2a, 0xd6, 0x5c, 0x4f, 0x75, 0x07, 0xb6, 0xe9, 0xc8, 0xbe, 0xc5, 0xc5, 0x50, 0x6e,
	0x04, 0xa1, 0x7c, 0xbb, 0x61, 0xa5, 0x61, 0x87, 0xba, 0x5c, 0xd0, 0x21, 0xf3, 0xbd, 0x36, 0x53,
	0xdc, 0xba, 0x02, 0xd9, 0x93, 0x45, 0x3a, 0xf1, 0x84, 0x2b, 0x5d, 0x99, 0x95, 0xed, 0x41, 0x27,
	0x9d, 0xd2, 0x21, 0xa5, 0x3c, 0x3e, 0xe7, 0x4a, 0xe9, 0xfa, 0x3c, 0x15, 0x63, 0x42, 0x48, 0xc5,
	0x94, 0x27, 0x45, 0x94, 0x6f, 0xef, 0x5d, 0xb5, 0xf7, 0xda, 0x5c, 0x28, 0xaf, 0xe3, 0xf1, 0x30,
	0x0f, 0xdd, 0xfd, 0x31, 0x55, 0x30, 0x9e, 0xbf, 0x6c, 0x36, 0x9f, 0x48, 0x21, 0xb8, 0x33, 0xaa,
	0x3f, 0x15, 0x1d, 0x69, 0x7c, 0x87, 0xc2, 0x74, 0x30, 0xb0, 0x7d, 0xcf, 0x79, 0xcd, 0xda, 0xed,
	0x90, 0x47, 0xd1, 0x2c, 0xdc, 0x81, 0xd2, 0xcd, 0xfa, 0x67, 0xf8, 0x5d, 0xff, 0x04, 0xe1, 0x47,
	0x78, 0xf8, 0x01, 0xd6, 0x4a, 0xd5, 0x4a, 0xa9, 0x5a, 0x59, 0x66, 0x74, 0xb3, 0x46, 0x5b, 0xf7,
	0xe9, 0xe3, 0xd5, 0xad, 0x09, 0x1e, 0xe3, 0x0a, 0x5d, 0x5d, 0x98, 0x58, 0x94, 0x57, 0xcc, 0xf2,
	0xc2, 0xa8, 0x57, 0xa3, 0x2d, 0x46, 0x37, 0xb3, 0xde, 0x98, 0xc7, 0x98, 0xf6, 0xc6, 0x8b, 0x72,
	0xa9, 0x5a, 0xa9, 0x2c, 0x8f, 0xe8, 0xdd, 0x83, 0xc5, 0x47, 0xef, 0xcb, 0xd5, 0xf9, 0xad, 0xb5,
	0xf9, 0xc6, 0xad, 0x4c, 0xb3, 0x96, 0x59, 0x1a, 0x3f, 0xa1, 0x60, 0xe4, 0xe2, 0xca, 0x8f, 0x2e,
	0xe5, 0xaf, 0xa5, 0xf2, 0xbb, 0xff, 0x99, 0xbc, 0xfe, 0x75, 0x7b, 0xe6, 0x45, 0x2a, 0xdb, 0x7c,
	0xf6, 0x2a, 0xbf, 0xa0, 0x31, 0x93, 0xe9, 0x37, 0xfd, 0xe8, 0xef, 0x4d, 0xc5, 0xc2, 0x8d, 0x41,
	0xc4, 0x43, 0xc1, 0xfa, 0x7c, 0x76, 0x6a, 0x74, 0x48, 0xe3, 0x72, 0xae, 0xef, 0xc2, 0x51, 0x8c,
	0x70, 0x1c, 0x23, 0x9c, 0xc4, 0x48, 0x4e, 0x63, 0x24, 0x67, 0x31, 0x92, 0xf3, 0x18, 0xc9, 0x45,
	0x8c, 0xb0, 0xad, 0x11, 0x76, 0x34, 0x92, 0x3d, 0x8d, 0xb0, 0xaf, 0x91, 0x1c, 0x68, 0x24, 0x87,
	0x1a, 0xc9, 0x91, 0x46, 0x38, 0xd6, 0x08, 0x27, 0x1a, 0xc9, 0xa9, 0x46, 0x38, 0xd3, 0x48, 0xce,
	0x35, 0xc2, 0x85, 0x46, 0xb2, 0x9d, 0x20, 0xd9, 0x49, 0x10, 0xbe, 0x24, 0x48, 0xbe, 0x26, 0x08,
	0xdf, 0x12, 0x24, 0x7b, 0x09, 0x92, 0xfd, 0x04, 0xe1, 0x20, 0x41, 0x38, 0x4c, 0x10, 0x5a, 0x8b,
	0xae, 0x34, 0x55, 0x97, 0xab, 0xae, 0x27, 0xdc, 0xc8, 0x14, 0x5c, 0xad, 0xcb, 0xb0, 0x67, 0xfd,
	0xfb, 0xe1, 0x82, 0x9e, 0x6b, 0x29, 0x25, 0x02, 0xdb, 0xbe, 0x9e, 0xfe, 0xb5, 0xa5, 0x3f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x5c, 0x43, 0x54, 0x82, 0x50, 0x03, 0x00, 0x00,
}

func (this *MQTTConnectionInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MQTTConnectionInfo)
	if !ok {
		that2, ok := that.(MQTTConnectionInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PublicAddress != that1.PublicAddress {
		return false
	}
	if this.PublicTLSAddress != that1.PublicTLSAddress {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	return true
}
func (m *MQTTConnectionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MQTTConnectionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MQTTConnectionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintMqtt(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PublicTLSAddress) > 0 {
		i -= len(m.PublicTLSAddress)
		copy(dAtA[i:], m.PublicTLSAddress)
		i = encodeVarintMqtt(dAtA, i, uint64(len(m.PublicTLSAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PublicAddress) > 0 {
		i -= len(m.PublicAddress)
		copy(dAtA[i:], m.PublicAddress)
		i = encodeVarintMqtt(dAtA, i, uint64(len(m.PublicAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMqtt(dAtA []byte, offset int, v uint64) int {
	offset -= sovMqtt(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedMQTTConnectionInfo(r randyMqtt, easy bool) *MQTTConnectionInfo {
	this := &MQTTConnectionInfo{}
	this.PublicAddress = randStringMqtt(r)
	this.PublicTLSAddress = randStringMqtt(r)
	this.Username = randStringMqtt(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyMqtt interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneMqtt(r randyMqtt) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringMqtt(r randyMqtt) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneMqtt(r)
	}
	return string(tmps)
}
func randUnrecognizedMqtt(r randyMqtt, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldMqtt(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldMqtt(dAtA []byte, r randyMqtt, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateMqtt(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateMqtt(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateMqtt(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateMqtt(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateMqtt(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateMqtt(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateMqtt(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *MQTTConnectionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicAddress)
	if l > 0 {
		n += 1 + l + sovMqtt(uint64(l))
	}
	l = len(m.PublicTLSAddress)
	if l > 0 {
		n += 1 + l + sovMqtt(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovMqtt(uint64(l))
	}
	return n
}

func sovMqtt(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMqtt(x uint64) (n int) {
	return sovMqtt((x << 1) ^ uint64((int64(x) >> 63)))
}
func (this *MQTTConnectionInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MQTTConnectionInfo{`,
		`PublicAddress:` + fmt.Sprintf("%v", this.PublicAddress) + `,`,
		`PublicTLSAddress:` + fmt.Sprintf("%v", this.PublicTLSAddress) + `,`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMqtt(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MQTTConnectionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMqtt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MQTTConnectionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MQTTConnectionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMqtt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMqtt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMqtt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicTLSAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMqtt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMqtt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMqtt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicTLSAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMqtt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMqtt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMqtt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMqtt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMqtt
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMqtt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMqtt(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMqtt
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMqtt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMqtt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMqtt
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMqtt
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMqtt
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMqtt        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMqtt          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMqtt = fmt.Errorf("proto: unexpected end of group")
)
