// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import fmt "fmt"

var _EventFieldPaths = [...]string{
	"context",
	"correlation_ids",
	"data",
	"identifiers",
	"identifiers.entity_identifiers",
	"name",
	"origin",
	"time",
}

func (*Event) FieldMaskPaths() []string {
	ret := make([]string, len(_EventFieldPaths))
	copy(ret, _EventFieldPaths[:])
	return ret
}

func (dst *Event) SetFields(src *Event, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "context":
			dst.Context = src.Context
		case "correlation_ids":
			dst.CorrelationIDs = src.CorrelationIDs
		case "data":
			dst.Data = src.Data
		case "identifiers":
			dst.Identifiers = src.Identifiers
		case "identifiers.entity_identifiers":
			if dst.Identifiers == nil {
				dst.Identifiers = &CombinedIdentifiers{}
			}
			dst.Identifiers.SetFields(src.Identifiers, _pathsWithoutPrefix("identifiers", paths)...)
		case "name":
			dst.Name = src.Name
		case "origin":
			dst.Origin = src.Origin
		case "time":
			dst.Time = src.Time
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _StreamEventsRequestFieldPaths = [...]string{
	"after",
	"identifiers",
	"identifiers.entity_identifiers",
	"tail",
}

func (*StreamEventsRequest) FieldMaskPaths() []string {
	ret := make([]string, len(_StreamEventsRequestFieldPaths))
	copy(ret, _StreamEventsRequestFieldPaths[:])
	return ret
}

func (dst *StreamEventsRequest) SetFields(src *StreamEventsRequest, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "after":
			dst.After = src.After
		case "identifiers":
			dst.Identifiers = src.Identifiers
		case "identifiers.entity_identifiers":
			dst.Identifiers.SetFields(&src.Identifiers, _pathsWithoutPrefix("identifiers", paths)...)
		case "tail":
			dst.Tail = src.Tail
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}
