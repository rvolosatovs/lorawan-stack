// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/TheThingsNetwork/ttn/api/gateway.proto

package ttnpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"
import google_protobuf1 "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/types"

import time "time"

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

type GatewayStatus struct {
	// Current time of the gateway
	Time *time.Time `protobuf:"bytes,1,opt,name=time,stdtime" json:"time,omitempty"`
	// Boot time of the gateway
	// - can be left out to save bandwidth; old value will be kept
	BootTime *time.Time `protobuf:"bytes,2,opt,name=boot_time,json=bootTime,stdtime" json:"boot_time,omitempty"`
	// Gateway Platform
	// - can be left out to save bandwidth; old value will be kept
	// - for example: "Kerlink iBTS", "MultiTech Conduit AEP", "The Things Gateway", "..."
	Platform string `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	// Versions of gateway subsystems
	// - each field can be left out to save bandwidth; old value will be kept
	// - map keys are written in snake_case
	// - for example:
	//     firmware: "2.0.4"
	//     forwarder: "v2-3.3.1"
	//     fpga: "48"
	//     dsp: "27"
	//     hal: "v2-3.5.0"
	Versions map[string]string `protobuf:"bytes,4,rep,name=versions" json:"versions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Location of the gateway
	// - if left out, server uses registry-set location as fallback
	Location *Location `protobuf:"bytes,5,opt,name=location" json:"location,omitempty"`
	// IP addresses of this gateway
	IP []string `protobuf:"bytes,6,rep,name=ip" json:"ip,omitempty"`
	// Round-trip time to the server
	RTT *time.Duration `protobuf:"bytes,7,opt,name=rtt,stdduration" json:"rtt,omitempty"`
	// Metrics
	// - can be used for forwarding gateway metrics such as temperatures or performance metrics
	// - map keys are written in snake_case
	Metrics map[string]float32 `protobuf:"bytes,8,rep,name=metrics" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	// Advanced metadata fields
	// - can be used for advanced information or experimental features that are not yet formally defined in the API
	// - field names are written in snake_case
	Advanced *google_protobuf1.Struct `protobuf:"bytes,99,opt,name=advanced" json:"advanced,omitempty"`
}

func (m *GatewayStatus) Reset()                    { *m = GatewayStatus{} }
func (*GatewayStatus) ProtoMessage()               {}
func (*GatewayStatus) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{0} }

func (m *GatewayStatus) GetTime() *time.Time {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *GatewayStatus) GetBootTime() *time.Time {
	if m != nil {
		return m.BootTime
	}
	return nil
}

func (m *GatewayStatus) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *GatewayStatus) GetVersions() map[string]string {
	if m != nil {
		return m.Versions
	}
	return nil
}

func (m *GatewayStatus) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *GatewayStatus) GetIP() []string {
	if m != nil {
		return m.IP
	}
	return nil
}

func (m *GatewayStatus) GetRTT() *time.Duration {
	if m != nil {
		return m.RTT
	}
	return nil
}

func (m *GatewayStatus) GetMetrics() map[string]float32 {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *GatewayStatus) GetAdvanced() *google_protobuf1.Struct {
	if m != nil {
		return m.Advanced
	}
	return nil
}

// GatewayObservations as observed by the gateway server
type GatewayObservations struct {
	// Time when the last uplink message was received
	LastUplinkReceived *time.Time `protobuf:"bytes,1,opt,name=last_uplink_received,json=lastUplinkReceived,stdtime" json:"last_uplink_received,omitempty"`
	// Uplink message counter. This counter may be reset to 0 when the gateway disconnects.
	UplinkCount uint64 `protobuf:"varint,2,opt,name=uplink_count,json=uplinkCount,proto3" json:"uplink_count,omitempty"`
	// Time when the last downlink message was received
	LastDownlinkReceived *time.Time `protobuf:"bytes,3,opt,name=last_downlink_received,json=lastDownlinkReceived,stdtime" json:"last_downlink_received,omitempty"`
	// Downlink message counter. This counter may be reset to 0 when the gateway disconnects.
	DownlinkCount uint64 `protobuf:"varint,4,opt,name=downlink_count,json=downlinkCount,proto3" json:"downlink_count,omitempty"`
	// Time when the last status message was received
	LastStatusReceived *time.Time `protobuf:"bytes,5,opt,name=last_status_received,json=lastStatusReceived,stdtime" json:"last_status_received,omitempty"`
	// Status message counter. This counter may be reset to 0 when the gateway disconnects.
	StatusCount uint64 `protobuf:"varint,6,opt,name=status_count,json=statusCount,proto3" json:"status_count,omitempty"`
	// Contents of the last status message
	LastStatus *GatewayStatus `protobuf:"bytes,7,opt,name=last_status,json=lastStatus" json:"last_status,omitempty"`
}

func (m *GatewayObservations) Reset()                    { *m = GatewayObservations{} }
func (*GatewayObservations) ProtoMessage()               {}
func (*GatewayObservations) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{1} }

func (m *GatewayObservations) GetLastUplinkReceived() *time.Time {
	if m != nil {
		return m.LastUplinkReceived
	}
	return nil
}

func (m *GatewayObservations) GetUplinkCount() uint64 {
	if m != nil {
		return m.UplinkCount
	}
	return 0
}

func (m *GatewayObservations) GetLastDownlinkReceived() *time.Time {
	if m != nil {
		return m.LastDownlinkReceived
	}
	return nil
}

func (m *GatewayObservations) GetDownlinkCount() uint64 {
	if m != nil {
		return m.DownlinkCount
	}
	return 0
}

func (m *GatewayObservations) GetLastStatusReceived() *time.Time {
	if m != nil {
		return m.LastStatusReceived
	}
	return nil
}

func (m *GatewayObservations) GetStatusCount() uint64 {
	if m != nil {
		return m.StatusCount
	}
	return 0
}

func (m *GatewayObservations) GetLastStatus() *GatewayStatus {
	if m != nil {
		return m.LastStatus
	}
	return nil
}

func init() {
	proto.RegisterType((*GatewayStatus)(nil), "ttn.v3.GatewayStatus")
	proto.RegisterType((*GatewayObservations)(nil), "ttn.v3.GatewayObservations")
}
func (m *GatewayStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.Time)))
		n1, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.Time, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.BootTime != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.BootTime)))
		n2, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.BootTime, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if len(m.Versions) > 0 {
		for k, _ := range m.Versions {
			dAtA[i] = 0x22
			i++
			v := m.Versions[k]
			mapSize := 1 + len(k) + sovGateway(uint64(len(k))) + 1 + len(v) + sovGateway(uint64(len(v)))
			i = encodeVarintGateway(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGateway(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintGateway(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.Location != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.Location.Size()))
		n3, err := m.Location.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.IP) > 0 {
		for _, s := range m.IP {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.RTT != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdDuration(*m.RTT)))
		n4, err := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.RTT, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Metrics) > 0 {
		for k, _ := range m.Metrics {
			dAtA[i] = 0x42
			i++
			v := m.Metrics[k]
			mapSize := 1 + len(k) + sovGateway(uint64(len(k))) + 1 + 4
			i = encodeVarintGateway(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGateway(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x15
			i++
			i = encodeFixed32Gateway(dAtA, i, uint32(math.Float32bits(float32(v))))
		}
	}
	if m.Advanced != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.Advanced.Size()))
		n5, err := m.Advanced.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *GatewayObservations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayObservations) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LastUplinkReceived != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastUplinkReceived)))
		n6, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastUplinkReceived, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.UplinkCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.UplinkCount))
	}
	if m.LastDownlinkReceived != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastDownlinkReceived)))
		n7, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastDownlinkReceived, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.DownlinkCount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.DownlinkCount))
	}
	if m.LastStatusReceived != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastStatusReceived)))
		n8, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastStatusReceived, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.StatusCount != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.StatusCount))
	}
	if m.LastStatus != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.LastStatus.Size()))
		n9, err := m.LastStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func encodeFixed64Gateway(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Gateway(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGateway(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GatewayStatus) Size() (n int) {
	var l int
	_ = l
	if m.Time != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.Time)
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.BootTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.BootTime)
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.Versions) > 0 {
		for k, v := range m.Versions {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGateway(uint64(len(k))) + 1 + len(v) + sovGateway(uint64(len(v)))
			n += mapEntrySize + 1 + sovGateway(uint64(mapEntrySize))
		}
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.IP) > 0 {
		for _, s := range m.IP {
			l = len(s)
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if m.RTT != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.RTT)
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.Metrics) > 0 {
		for k, v := range m.Metrics {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGateway(uint64(len(k))) + 1 + 4
			n += mapEntrySize + 1 + sovGateway(uint64(mapEntrySize))
		}
	}
	if m.Advanced != nil {
		l = m.Advanced.Size()
		n += 2 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GatewayObservations) Size() (n int) {
	var l int
	_ = l
	if m.LastUplinkReceived != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastUplinkReceived)
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.UplinkCount != 0 {
		n += 1 + sovGateway(uint64(m.UplinkCount))
	}
	if m.LastDownlinkReceived != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastDownlinkReceived)
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.DownlinkCount != 0 {
		n += 1 + sovGateway(uint64(m.DownlinkCount))
	}
	if m.LastStatusReceived != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastStatusReceived)
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.StatusCount != 0 {
		n += 1 + sovGateway(uint64(m.StatusCount))
	}
	if m.LastStatus != nil {
		l = m.LastStatus.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func sovGateway(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGateway(x uint64) (n int) {
	return sovGateway(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GatewayStatus) String() string {
	if this == nil {
		return "nil"
	}
	keysForVersions := make([]string, 0, len(this.Versions))
	for k, _ := range this.Versions {
		keysForVersions = append(keysForVersions, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForVersions)
	mapStringForVersions := "map[string]string{"
	for _, k := range keysForVersions {
		mapStringForVersions += fmt.Sprintf("%v: %v,", k, this.Versions[k])
	}
	mapStringForVersions += "}"
	keysForMetrics := make([]string, 0, len(this.Metrics))
	for k, _ := range this.Metrics {
		keysForMetrics = append(keysForMetrics, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetrics)
	mapStringForMetrics := "map[string]float32{"
	for _, k := range keysForMetrics {
		mapStringForMetrics += fmt.Sprintf("%v: %v,", k, this.Metrics[k])
	}
	mapStringForMetrics += "}"
	s := strings.Join([]string{`&GatewayStatus{`,
		`Time:` + strings.Replace(fmt.Sprintf("%v", this.Time), "Timestamp", "google_protobuf2.Timestamp", 1) + `,`,
		`BootTime:` + strings.Replace(fmt.Sprintf("%v", this.BootTime), "Timestamp", "google_protobuf2.Timestamp", 1) + `,`,
		`Platform:` + fmt.Sprintf("%v", this.Platform) + `,`,
		`Versions:` + mapStringForVersions + `,`,
		`Location:` + strings.Replace(fmt.Sprintf("%v", this.Location), "Location", "Location", 1) + `,`,
		`IP:` + fmt.Sprintf("%v", this.IP) + `,`,
		`RTT:` + strings.Replace(fmt.Sprintf("%v", this.RTT), "Duration", "google_protobuf4.Duration", 1) + `,`,
		`Metrics:` + mapStringForMetrics + `,`,
		`Advanced:` + strings.Replace(fmt.Sprintf("%v", this.Advanced), "Struct", "google_protobuf1.Struct", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayObservations) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayObservations{`,
		`LastUplinkReceived:` + strings.Replace(fmt.Sprintf("%v", this.LastUplinkReceived), "Timestamp", "google_protobuf2.Timestamp", 1) + `,`,
		`UplinkCount:` + fmt.Sprintf("%v", this.UplinkCount) + `,`,
		`LastDownlinkReceived:` + strings.Replace(fmt.Sprintf("%v", this.LastDownlinkReceived), "Timestamp", "google_protobuf2.Timestamp", 1) + `,`,
		`DownlinkCount:` + fmt.Sprintf("%v", this.DownlinkCount) + `,`,
		`LastStatusReceived:` + strings.Replace(fmt.Sprintf("%v", this.LastStatusReceived), "Timestamp", "google_protobuf2.Timestamp", 1) + `,`,
		`StatusCount:` + fmt.Sprintf("%v", this.StatusCount) + `,`,
		`LastStatus:` + strings.Replace(fmt.Sprintf("%v", this.LastStatus), "GatewayStatus", "GatewayStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGateway(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GatewayStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Time == nil {
				m.Time = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BootTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BootTime == nil {
				m.BootTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.BootTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Versions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthGateway
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Versions == nil {
				m.Versions = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthGateway
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Versions[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Versions[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &Location{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = append(m.IP, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RTT", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RTT == nil {
				m.RTT = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.RTT, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthGateway
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Metrics == nil {
				m.Metrics = make(map[string]float32)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvaluetemp uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 4
				mapvaluetemp = uint32(dAtA[iNdEx-4])
				mapvaluetemp |= uint32(dAtA[iNdEx-3]) << 8
				mapvaluetemp |= uint32(dAtA[iNdEx-2]) << 16
				mapvaluetemp |= uint32(dAtA[iNdEx-1]) << 24
				mapvalue := math.Float32frombits(mapvaluetemp)
				m.Metrics[mapkey] = mapvalue
			} else {
				var mapvalue float32
				m.Metrics[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Advanced", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Advanced == nil {
				m.Advanced = &google_protobuf1.Struct{}
			}
			if err := m.Advanced.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayObservations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayObservations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayObservations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUplinkReceived", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastUplinkReceived == nil {
				m.LastUplinkReceived = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastUplinkReceived, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplinkCount", wireType)
			}
			m.UplinkCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UplinkCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastDownlinkReceived", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastDownlinkReceived == nil {
				m.LastDownlinkReceived = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastDownlinkReceived, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkCount", wireType)
			}
			m.DownlinkCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DownlinkCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastStatusReceived", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastStatusReceived == nil {
				m.LastStatusReceived = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastStatusReceived, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusCount", wireType)
			}
			m.StatusCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatusCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastStatus == nil {
				m.LastStatus = &GatewayStatus{}
			}
			if err := m.LastStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGateway(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGateway
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGateway(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGateway = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGateway   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/gateway.proto", fileDescriptorGateway)
}

var fileDescriptorGateway = []byte{
	// 634 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4f, 0x6f, 0xd3, 0x30,
	0x14, 0x5f, 0x9a, 0xae, 0x6b, 0xdd, 0x0d, 0x4d, 0x66, 0x8c, 0x50, 0xa1, 0xb4, 0x0c, 0x21, 0x15,
	0x09, 0x52, 0xb1, 0x21, 0x34, 0x0d, 0x10, 0x52, 0x19, 0x9a, 0x90, 0xf8, 0x27, 0xaf, 0xec, 0xc0,
	0x65, 0x72, 0x53, 0x2f, 0x8b, 0x9a, 0xc4, 0x51, 0xf2, 0x92, 0x69, 0x37, 0x3e, 0x02, 0x47, 0x3e,
	0x0b, 0x9f, 0x80, 0x0b, 0x12, 0x47, 0x4e, 0x03, 0x72, 0xe2, 0xc8, 0x47, 0x40, 0xb1, 0x9d, 0xac,
	0xdd, 0x26, 0xad, 0x9c, 0x1a, 0xbf, 0xf7, 0x7e, 0xff, 0xfc, 0xac, 0xa2, 0x07, 0x8e, 0x0b, 0x87,
	0xc9, 0xd0, 0xb2, 0xb9, 0xdf, 0x1b, 0x1c, 0xb2, 0xc1, 0xa1, 0x1b, 0x38, 0xf1, 0x1b, 0x06, 0x47,
	0x3c, 0x1a, 0xf7, 0x00, 0x82, 0x1e, 0x0d, 0xdd, 0x9e, 0x43, 0x81, 0x1d, 0xd1, 0x63, 0x2b, 0x8c,
	0x38, 0x70, 0x5c, 0x03, 0x08, 0xac, 0x74, 0xa3, 0x75, 0x7f, 0x02, 0xea, 0x70, 0x87, 0xf7, 0x44,
	0x7b, 0x98, 0x1c, 0x88, 0x93, 0x38, 0x88, 0x2f, 0x09, 0x6b, 0xad, 0xcf, 0xa2, 0xe4, 0x33, 0xa0,
	0x23, 0x0a, 0x54, 0x61, 0x4c, 0x87, 0x73, 0xc7, 0x63, 0xa7, 0xcc, 0xa3, 0x24, 0xa2, 0xe0, 0xf2,
	0x40, 0xf5, 0x6f, 0x9e, 0xed, 0xc7, 0x10, 0x25, 0x36, 0xa8, 0x6e, 0xfb, 0x6c, 0x17, 0x5c, 0x9f,
	0xc5, 0x40, 0xfd, 0x50, 0x0e, 0xac, 0x7d, 0xab, 0xa2, 0xa5, 0x1d, 0x99, 0x6d, 0x17, 0x28, 0x24,
	0x31, 0x7e, 0x88, 0xaa, 0xf9, 0x90, 0xa1, 0x75, 0xb4, 0x6e, 0x73, 0xbd, 0x65, 0x49, 0x06, 0xab,
	0x60, 0xb0, 0x06, 0x05, 0x43, 0xbf, 0xfa, 0xe9, 0x67, 0x5b, 0x23, 0x62, 0x1a, 0x3f, 0x45, 0x8d,
	0x21, 0xe7, 0xb0, 0x2f, 0xa0, 0x95, 0x19, 0xa1, 0xf5, 0x1c, 0x92, 0x17, 0x71, 0x0b, 0xd5, 0x43,
	0x8f, 0xc2, 0x01, 0x8f, 0x7c, 0x43, 0xef, 0x68, 0xdd, 0x06, 0x29, 0xcf, 0xf8, 0x19, 0xaa, 0xa7,
	0x2c, 0x8a, 0x5d, 0x1e, 0xc4, 0x46, 0xb5, 0xa3, 0x77, 0x9b, 0xeb, 0xb7, 0x2d, 0x79, 0xff, 0xd6,
	0x94, 0x73, 0x6b, 0x4f, 0x4d, 0xbd, 0x08, 0x20, 0x3a, 0x26, 0x25, 0x08, 0xdf, 0x43, 0x75, 0x8f,
	0xdb, 0xe2, 0xd2, 0x8c, 0x79, 0x61, 0x6d, 0xb9, 0x20, 0x78, 0xa5, 0xea, 0xa4, 0x9c, 0xc0, 0xab,
	0xa8, 0xe2, 0x86, 0x46, 0xad, 0xa3, 0x77, 0x1b, 0xfd, 0x5a, 0x76, 0xd2, 0xae, 0xbc, 0x7c, 0x47,
	0x2a, 0x6e, 0x88, 0x37, 0x91, 0x1e, 0x01, 0x18, 0x0b, 0x82, 0xe0, 0xc6, 0xb9, 0x6c, 0xdb, 0x6a,
	0x2d, 0xfd, 0x66, 0x76, 0xd2, 0xd6, 0xc9, 0x60, 0xf0, 0x39, 0x4f, 0x98, 0x43, 0xf0, 0x13, 0xb4,
	0xe0, 0x33, 0x88, 0x5c, 0x3b, 0x36, 0xea, 0xc2, 0xff, 0xda, 0xc5, 0xfe, 0x5f, 0xcb, 0x21, 0x69,
	0xbf, 0x80, 0xe0, 0x0d, 0x54, 0xa7, 0xa3, 0x94, 0x06, 0x36, 0x1b, 0x19, 0xb6, 0x10, 0xbf, 0x7e,
	0x4e, 0x7c, 0x57, 0xec, 0x9c, 0x94, 0x83, 0xad, 0xc7, 0x68, 0x69, 0xea, 0x36, 0xf0, 0x32, 0xd2,
	0xc7, 0xec, 0x58, 0x2c, 0xb5, 0x41, 0xf2, 0x4f, 0xbc, 0x82, 0xe6, 0x53, 0xea, 0x25, 0x72, 0x5b,
	0x0d, 0x22, 0x0f, 0x5b, 0x95, 0x4d, 0xad, 0xb5, 0x85, 0x16, 0x27, 0xad, 0x5c, 0x86, 0xad, 0x4c,
	0x60, 0xd7, 0xbe, 0xe8, 0xe8, 0xaa, 0x4a, 0xf5, 0x76, 0x18, 0xb3, 0x28, 0x15, 0x97, 0x12, 0x63,
	0x82, 0x56, 0x3c, 0x1a, 0xc3, 0x7e, 0x12, 0x7a, 0x6e, 0x30, 0xde, 0x8f, 0x98, 0xcd, 0xdc, 0x94,
	0x8d, 0x66, 0x7e, 0x65, 0x38, 0x47, 0xbf, 0x17, 0x60, 0xa2, 0xb0, 0xf8, 0x16, 0x5a, 0x54, 0x74,
	0x36, 0x4f, 0x02, 0x10, 0x66, 0xaa, 0xa4, 0x29, 0x6b, 0xcf, 0xf3, 0x12, 0xde, 0x43, 0xab, 0x42,
	0x76, 0xc4, 0x8f, 0x82, 0x69, 0x61, 0x7d, 0x46, 0x61, 0x61, 0x7b, 0x5b, 0xc1, 0x4b, 0xe9, 0x3b,
	0xe8, 0x4a, 0x49, 0x29, 0xc5, 0xab, 0x42, 0x7c, 0xa9, 0xa8, 0x4a, 0xf9, 0x22, 0x75, 0x2c, 0x16,
	0x7c, 0x2a, 0x3e, 0xff, 0x3f, 0xa9, 0xe5, 0xeb, 0x98, 0x4c, 0xad, 0xe8, 0xa4, 0x70, 0x4d, 0xa6,
	0x96, 0x35, 0x29, 0xfb, 0x08, 0x35, 0x27, 0x64, 0xd5, 0x93, 0xbd, 0x76, 0xe1, 0xa3, 0x23, 0xe8,
	0x54, 0xa2, 0xbf, 0xf3, 0xe3, 0xb7, 0x39, 0xf7, 0x31, 0x33, 0xb5, 0xaf, 0x99, 0xa9, 0x7d, 0xcf,
	0x4c, 0xed, 0x57, 0x66, 0x6a, 0x7f, 0x32, 0x73, 0xee, 0x6f, 0x66, 0x6a, 0x1f, 0xee, 0x5e, 0xf6,
	0xef, 0x15, 0x8e, 0x9d, 0xfc, 0x37, 0x1c, 0x0e, 0x6b, 0x22, 0xd1, 0xc6, 0xbf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xac, 0x59, 0xa2, 0xe2, 0x5b, 0x05, 0x00, 0x00,
}
