// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: go.thethings.network/lorawan-stack/api/gateway.proto

package ttnpb // import "go.thethings.network/lorawan-stack/pkg/ttnpb"

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import types "github.com/gogo/protobuf/types"

import time "time"

import strconv "strconv"

import encoding_binary "encoding/binary"
import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// GatewayAntennaPlacement enum defines whether if the gateway antenna is placed
// indoors or outdoors.
type GatewayAntennaPlacement int32

const (
	// The antenna is placed indoors.
	PLACEMENT_INDOOR GatewayAntennaPlacement = 0
	// The antenna is placed outdoors.
	PLACEMENT_OUTDOOR GatewayAntennaPlacement = 1
)

var GatewayAntennaPlacement_name = map[int32]string{
	0: "PLACEMENT_INDOOR",
	1: "PLACEMENT_OUTDOOR",
}
var GatewayAntennaPlacement_value = map[string]int32{
	"PLACEMENT_INDOOR":  0,
	"PLACEMENT_OUTDOOR": 1,
}

func (GatewayAntennaPlacement) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_gateway_0a0dd94e16ec9006, []int{0}
}

// Gateway is the message that defines a gateway on the network.
type Gateway struct {
	// Gateway identifiers.
	GatewayIdentifiers `protobuf:"bytes,1,opt,name=ids,embedded=ids" json:"ids"`
	// description is the description of the gateway.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// frequency_plan_id indicates the ID of the frequency plan.
	FrequencyPlanID string `protobuf:"bytes,3,opt,name=frequency_plan_id,json=frequencyPlanId,proto3" json:"frequency_plan_id,omitempty"`
	// cluster_address indicates the URI of the Gateway Server cluster to connect to,
	// in a "<ip>:<port>" format.
	ClusterAddress string `protobuf:"bytes,4,opt,name=cluster_address,json=clusterAddress,proto3" json:"cluster_address,omitempty"`
	// antennas contains the information for every antenna of the gateway.
	Antennas []GatewayAntenna `protobuf:"bytes,5,rep,name=antennas" json:"antennas"`
	// radios are the gateway concentrator's radios.
	Radios []GatewayRadio `protobuf:"bytes,6,rep,name=radios" json:"radios"`
	// activated_at denotes when the gateway was activated.
	// This a read-only field.
	ActivatedAt *time.Time `protobuf:"bytes,7,opt,name=activated_at,json=activatedAt,stdtime" json:"activated_at,omitempty"`
	// privacy_settings defines the different privacy settings for this gateway.
	PrivacySettings GatewayPrivacySettings `protobuf:"bytes,8,opt,name=privacy_settings,json=privacySettings" json:"privacy_settings"`
	// auto_update indicates whether or not the gateway should be able to
	// automatically fetch and execute firmware updates.
	// It is true by default.
	AutoUpdate bool `protobuf:"varint,9,opt,name=auto_update,json=autoUpdate,proto3" json:"auto_update,omitempty"`
	// platform is the gateway platform, e.g. "The Things Gateway" or "Kerklink iBTS".
	Platform string `protobuf:"bytes,10,opt,name=platform,proto3" json:"platform,omitempty"`
	// attributes is a free form map of attributes.
	Attributes map[string]string `protobuf:"bytes,11,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// contact_account is either an Organization ID or User ID that will be
	// displayed (according the privacy settings) as contact persona for this gateway.
	ContactAccountIDs *OrganizationOrUserIdentifiers `protobuf:"bytes,12,opt,name=contact_account_ids,json=contactAccountIds" json:"contact_account_ids,omitempty"`
	// created_at is the time when the gateway was created.
	// This a read-only field.
	CreatedAt time.Time `protobuf:"bytes,13,opt,name=created_at,json=createdAt,stdtime" json:"created_at"`
	// updated_at is the last time the gateway was updated.
	// This a read-only field.
	UpdatedAt time.Time `protobuf:"bytes,14,opt,name=updated_at,json=updatedAt,stdtime" json:"updated_at"`
	// Enable server-side buffering of downlink messages. This is recommended for gateways using the Semtech UDP Packet
	// Forwarder v2.x or older, as it does not feature a just-in-time queue. If enabled, the Gateway Server schedules the
	// downlink message late to the gateway so that it does not overwrite previously scheduled downlink messages that have
	// not been transmitted yet.
	ScheduleDownlinkLate bool     `protobuf:"varint,15,opt,name=schedule_downlink_late,json=scheduleDownlinkLate,proto3" json:"schedule_downlink_late,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Gateway) Reset()      { *m = Gateway{} }
func (*Gateway) ProtoMessage() {}
func (*Gateway) Descriptor() ([]byte, []int) {
	return fileDescriptor_gateway_0a0dd94e16ec9006, []int{0}
}
func (m *Gateway) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Gateway) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Gateway.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Gateway) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gateway.Merge(dst, src)
}
func (m *Gateway) XXX_Size() int {
	return m.Size()
}
func (m *Gateway) XXX_DiscardUnknown() {
	xxx_messageInfo_Gateway.DiscardUnknown(m)
}

var xxx_messageInfo_Gateway proto.InternalMessageInfo

func (m *Gateway) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Gateway) GetFrequencyPlanID() string {
	if m != nil {
		return m.FrequencyPlanID
	}
	return ""
}

func (m *Gateway) GetClusterAddress() string {
	if m != nil {
		return m.ClusterAddress
	}
	return ""
}

func (m *Gateway) GetAntennas() []GatewayAntenna {
	if m != nil {
		return m.Antennas
	}
	return nil
}

func (m *Gateway) GetRadios() []GatewayRadio {
	if m != nil {
		return m.Radios
	}
	return nil
}

func (m *Gateway) GetActivatedAt() *time.Time {
	if m != nil {
		return m.ActivatedAt
	}
	return nil
}

func (m *Gateway) GetPrivacySettings() GatewayPrivacySettings {
	if m != nil {
		return m.PrivacySettings
	}
	return GatewayPrivacySettings{}
}

func (m *Gateway) GetAutoUpdate() bool {
	if m != nil {
		return m.AutoUpdate
	}
	return false
}

func (m *Gateway) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *Gateway) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Gateway) GetContactAccountIDs() *OrganizationOrUserIdentifiers {
	if m != nil {
		return m.ContactAccountIDs
	}
	return nil
}

func (m *Gateway) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *Gateway) GetUpdatedAt() time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return time.Time{}
}

func (m *Gateway) GetScheduleDownlinkLate() bool {
	if m != nil {
		return m.ScheduleDownlinkLate
	}
	return false
}

// GatewayPrivacySettings is the message that defines the different privacy settings
// of the gateway such as if the owner information or gateway location are public.
type GatewayPrivacySettings struct {
	// status_public denotes whether or not the gateway's status is public or not.
	StatusPublic bool `protobuf:"varint,1,opt,name=status_public,json=statusPublic,proto3" json:"status_public,omitempty"`
	// location_public denotes whether or not the gateway's location is public and
	// should be attached to messages.
	LocationPublic bool `protobuf:"varint,2,opt,name=location_public,json=locationPublic,proto3" json:"location_public,omitempty"`
	// contactable denotes whether the user ID thas has been set as contact person
	// is private or public.
	Contactable          bool     `protobuf:"varint,3,opt,name=contactable,proto3" json:"contactable,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GatewayPrivacySettings) Reset()      { *m = GatewayPrivacySettings{} }
func (*GatewayPrivacySettings) ProtoMessage() {}
func (*GatewayPrivacySettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_gateway_0a0dd94e16ec9006, []int{1}
}
func (m *GatewayPrivacySettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayPrivacySettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayPrivacySettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GatewayPrivacySettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayPrivacySettings.Merge(dst, src)
}
func (m *GatewayPrivacySettings) XXX_Size() int {
	return m.Size()
}
func (m *GatewayPrivacySettings) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayPrivacySettings.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayPrivacySettings proto.InternalMessageInfo

func (m *GatewayPrivacySettings) GetStatusPublic() bool {
	if m != nil {
		return m.StatusPublic
	}
	return false
}

func (m *GatewayPrivacySettings) GetLocationPublic() bool {
	if m != nil {
		return m.LocationPublic
	}
	return false
}

func (m *GatewayPrivacySettings) GetContactable() bool {
	if m != nil {
		return m.Contactable
	}
	return false
}

// GatewayAntenna is the message that defines a gateway antenna.
type GatewayAntenna struct {
	// gain is the antenna gain relative to this gateway, in dBi.
	Gain float32 `protobuf:"fixed32,1,opt,name=gain,proto3" json:"gain,omitempty"`
	// location is the antenna's location.
	Location Location `protobuf:"bytes,2,opt,name=location" json:"location"`
	// type denotes the antenna's type.
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// model denotes the antenna's model.
	Model string `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	// placement denotes whether if the antenna is placed indoors or outdoors.
	Placement            GatewayAntennaPlacement `protobuf:"varint,5,opt,name=placement,proto3,enum=ttn.lorawan.v3.GatewayAntennaPlacement" json:"placement,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GatewayAntenna) Reset()      { *m = GatewayAntenna{} }
func (*GatewayAntenna) ProtoMessage() {}
func (*GatewayAntenna) Descriptor() ([]byte, []int) {
	return fileDescriptor_gateway_0a0dd94e16ec9006, []int{2}
}
func (m *GatewayAntenna) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayAntenna) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayAntenna.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GatewayAntenna) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayAntenna.Merge(dst, src)
}
func (m *GatewayAntenna) XXX_Size() int {
	return m.Size()
}
func (m *GatewayAntenna) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayAntenna.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayAntenna proto.InternalMessageInfo

func (m *GatewayAntenna) GetGain() float32 {
	if m != nil {
		return m.Gain
	}
	return 0
}

func (m *GatewayAntenna) GetLocation() Location {
	if m != nil {
		return m.Location
	}
	return Location{}
}

func (m *GatewayAntenna) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *GatewayAntenna) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *GatewayAntenna) GetPlacement() GatewayAntennaPlacement {
	if m != nil {
		return m.Placement
	}
	return PLACEMENT_INDOOR
}

// Radio defines the configuration of a SX1301 radio.
type GatewayRadio struct {
	// frequency is the base frequency of the radio in Hz.
	Frequency uint64 `protobuf:"varint,1,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// tx_configuration is the configuration for emitting Tx packets in case
	// that Tx messages are enabled for this radio.
	TxConfiguration      *GatewayRadio_TxConfiguration `protobuf:"bytes,2,opt,name=tx_configuration,json=txConfiguration" json:"tx_configuration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *GatewayRadio) Reset()      { *m = GatewayRadio{} }
func (*GatewayRadio) ProtoMessage() {}
func (*GatewayRadio) Descriptor() ([]byte, []int) {
	return fileDescriptor_gateway_0a0dd94e16ec9006, []int{3}
}
func (m *GatewayRadio) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayRadio) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayRadio.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GatewayRadio) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayRadio.Merge(dst, src)
}
func (m *GatewayRadio) XXX_Size() int {
	return m.Size()
}
func (m *GatewayRadio) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayRadio.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayRadio proto.InternalMessageInfo

func (m *GatewayRadio) GetFrequency() uint64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *GatewayRadio) GetTxConfiguration() *GatewayRadio_TxConfiguration {
	if m != nil {
		return m.TxConfiguration
	}
	return nil
}

type GatewayRadio_TxConfiguration struct {
	// min_frequency is the minimun frequency for Tx messages.
	MinFrequency uint64 `protobuf:"varint,1,opt,name=min_frequency,json=minFrequency,proto3" json:"min_frequency,omitempty"`
	// max_frequency is the maximum frequency for Tx messages.
	MaxFrequency uint64 `protobuf:"varint,2,opt,name=max_frequency,json=maxFrequency,proto3" json:"max_frequency,omitempty"`
	// notch_frequency is the notch frequency for Tx messages.
	NotchFrequency       uint64   `protobuf:"varint,3,opt,name=notch_frequency,json=notchFrequency,proto3" json:"notch_frequency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GatewayRadio_TxConfiguration) Reset()      { *m = GatewayRadio_TxConfiguration{} }
func (*GatewayRadio_TxConfiguration) ProtoMessage() {}
func (*GatewayRadio_TxConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_gateway_0a0dd94e16ec9006, []int{3, 0}
}
func (m *GatewayRadio_TxConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayRadio_TxConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayRadio_TxConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GatewayRadio_TxConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayRadio_TxConfiguration.Merge(dst, src)
}
func (m *GatewayRadio_TxConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *GatewayRadio_TxConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayRadio_TxConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayRadio_TxConfiguration proto.InternalMessageInfo

func (m *GatewayRadio_TxConfiguration) GetMinFrequency() uint64 {
	if m != nil {
		return m.MinFrequency
	}
	return 0
}

func (m *GatewayRadio_TxConfiguration) GetMaxFrequency() uint64 {
	if m != nil {
		return m.MaxFrequency
	}
	return 0
}

func (m *GatewayRadio_TxConfiguration) GetNotchFrequency() uint64 {
	if m != nil {
		return m.NotchFrequency
	}
	return 0
}

type GatewayStatus struct {
	// Current time of the gateway
	Time time.Time `protobuf:"bytes,1,opt,name=time,stdtime" json:"time"`
	// Boot time of the gateway
	// - can be left out to save bandwidth; old value will be kept
	BootTime time.Time `protobuf:"bytes,2,opt,name=boot_time,json=bootTime,stdtime" json:"boot_time"`
	// Gateway Platform
	// - can be left out to save bandwidth; old value will be kept
	// - for example: "Kerlink iBTS", "MultiTech Conduit AEP", "The Things Gateway", "..."
	Platform string `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	// Versions of gateway subsystems
	// - each field can be left out to save bandwidth; old value will be kept
	// - map keys are written in snake_case
	// - for example:
	//     firmware: "2.0.4"
	//     forwarder: "v2-3.3.1"
	//     fpga: "48"
	//     dsp: "27"
	//     hal: "v2-3.5.0"
	Versions map[string]string `protobuf:"bytes,4,rep,name=versions" json:"versions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Location of each gateway's antenna
	// - if left out, server uses registry-set location as fallback
	AntennasLocation []*Location `protobuf:"bytes,5,rep,name=antennas_location,json=antennasLocation" json:"antennas_location,omitempty"`
	// IP addresses of this gateway
	IP []string `protobuf:"bytes,6,rep,name=ip" json:"ip,omitempty"`
	// Round-trip time to the server
	RTT *time.Duration `protobuf:"bytes,7,opt,name=rtt,stdduration" json:"rtt,omitempty"`
	// Metrics
	// - can be used for forwarding gateway metrics such as temperatures or performance metrics
	// - map keys are written in snake_case
	Metrics map[string]float32 `protobuf:"bytes,8,rep,name=metrics" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	// Advanced metadata fields
	// - can be used for advanced information or experimental features that are not yet formally defined in the API
	// - field names are written in snake_case
	Advanced             *types.Struct `protobuf:"bytes,99,opt,name=advanced" json:"advanced,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GatewayStatus) Reset()      { *m = GatewayStatus{} }
func (*GatewayStatus) ProtoMessage() {}
func (*GatewayStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_gateway_0a0dd94e16ec9006, []int{4}
}
func (m *GatewayStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GatewayStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayStatus.Merge(dst, src)
}
func (m *GatewayStatus) XXX_Size() int {
	return m.Size()
}
func (m *GatewayStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayStatus.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayStatus proto.InternalMessageInfo

func (m *GatewayStatus) GetTime() time.Time {
	if m != nil {
		return m.Time
	}
	return time.Time{}
}

func (m *GatewayStatus) GetBootTime() time.Time {
	if m != nil {
		return m.BootTime
	}
	return time.Time{}
}

func (m *GatewayStatus) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *GatewayStatus) GetVersions() map[string]string {
	if m != nil {
		return m.Versions
	}
	return nil
}

func (m *GatewayStatus) GetAntennasLocation() []*Location {
	if m != nil {
		return m.AntennasLocation
	}
	return nil
}

func (m *GatewayStatus) GetIP() []string {
	if m != nil {
		return m.IP
	}
	return nil
}

func (m *GatewayStatus) GetRTT() *time.Duration {
	if m != nil {
		return m.RTT
	}
	return nil
}

func (m *GatewayStatus) GetMetrics() map[string]float32 {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *GatewayStatus) GetAdvanced() *types.Struct {
	if m != nil {
		return m.Advanced
	}
	return nil
}

// Connection stats as monitored by the Gateway Server.
type GatewayConnectionStats struct {
	ConnectedAt            *time.Time     `protobuf:"bytes,1,opt,name=connected_at,json=connectedAt,stdtime" json:"connected_at,omitempty"`
	Protocol               string         `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	LastStatusReceivedAt   *time.Time     `protobuf:"bytes,3,opt,name=last_status_received_at,json=lastStatusReceivedAt,stdtime" json:"last_status_received_at,omitempty"`
	LastStatus             *GatewayStatus `protobuf:"bytes,4,opt,name=last_status,json=lastStatus" json:"last_status,omitempty"`
	LastUplinkReceivedAt   *time.Time     `protobuf:"bytes,5,opt,name=last_uplink_received_at,json=lastUplinkReceivedAt,stdtime" json:"last_uplink_received_at,omitempty"`
	UplinkCount            uint64         `protobuf:"varint,6,opt,name=uplink_count,json=uplinkCount,proto3" json:"uplink_count,omitempty"`
	LastDownlinkReceivedAt *time.Time     `protobuf:"bytes,7,opt,name=last_downlink_received_at,json=lastDownlinkReceivedAt,stdtime" json:"last_downlink_received_at,omitempty"`
	DownlinkCount          uint64         `protobuf:"varint,8,opt,name=downlink_count,json=downlinkCount,proto3" json:"downlink_count,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}       `json:"-"`
	XXX_sizecache          int32          `json:"-"`
}

func (m *GatewayConnectionStats) Reset()      { *m = GatewayConnectionStats{} }
func (*GatewayConnectionStats) ProtoMessage() {}
func (*GatewayConnectionStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_gateway_0a0dd94e16ec9006, []int{5}
}
func (m *GatewayConnectionStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayConnectionStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayConnectionStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GatewayConnectionStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayConnectionStats.Merge(dst, src)
}
func (m *GatewayConnectionStats) XXX_Size() int {
	return m.Size()
}
func (m *GatewayConnectionStats) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayConnectionStats.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayConnectionStats proto.InternalMessageInfo

func (m *GatewayConnectionStats) GetConnectedAt() *time.Time {
	if m != nil {
		return m.ConnectedAt
	}
	return nil
}

func (m *GatewayConnectionStats) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *GatewayConnectionStats) GetLastStatusReceivedAt() *time.Time {
	if m != nil {
		return m.LastStatusReceivedAt
	}
	return nil
}

func (m *GatewayConnectionStats) GetLastStatus() *GatewayStatus {
	if m != nil {
		return m.LastStatus
	}
	return nil
}

func (m *GatewayConnectionStats) GetLastUplinkReceivedAt() *time.Time {
	if m != nil {
		return m.LastUplinkReceivedAt
	}
	return nil
}

func (m *GatewayConnectionStats) GetUplinkCount() uint64 {
	if m != nil {
		return m.UplinkCount
	}
	return 0
}

func (m *GatewayConnectionStats) GetLastDownlinkReceivedAt() *time.Time {
	if m != nil {
		return m.LastDownlinkReceivedAt
	}
	return nil
}

func (m *GatewayConnectionStats) GetDownlinkCount() uint64 {
	if m != nil {
		return m.DownlinkCount
	}
	return 0
}

func init() {
	proto.RegisterType((*Gateway)(nil), "ttn.lorawan.v3.Gateway")
	golang_proto.RegisterType((*Gateway)(nil), "ttn.lorawan.v3.Gateway")
	proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.Gateway.AttributesEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.Gateway.AttributesEntry")
	proto.RegisterType((*GatewayPrivacySettings)(nil), "ttn.lorawan.v3.GatewayPrivacySettings")
	golang_proto.RegisterType((*GatewayPrivacySettings)(nil), "ttn.lorawan.v3.GatewayPrivacySettings")
	proto.RegisterType((*GatewayAntenna)(nil), "ttn.lorawan.v3.GatewayAntenna")
	golang_proto.RegisterType((*GatewayAntenna)(nil), "ttn.lorawan.v3.GatewayAntenna")
	proto.RegisterType((*GatewayRadio)(nil), "ttn.lorawan.v3.GatewayRadio")
	golang_proto.RegisterType((*GatewayRadio)(nil), "ttn.lorawan.v3.GatewayRadio")
	proto.RegisterType((*GatewayRadio_TxConfiguration)(nil), "ttn.lorawan.v3.GatewayRadio.TxConfiguration")
	golang_proto.RegisterType((*GatewayRadio_TxConfiguration)(nil), "ttn.lorawan.v3.GatewayRadio.TxConfiguration")
	proto.RegisterType((*GatewayStatus)(nil), "ttn.lorawan.v3.GatewayStatus")
	golang_proto.RegisterType((*GatewayStatus)(nil), "ttn.lorawan.v3.GatewayStatus")
	proto.RegisterMapType((map[string]float32)(nil), "ttn.lorawan.v3.GatewayStatus.MetricsEntry")
	golang_proto.RegisterMapType((map[string]float32)(nil), "ttn.lorawan.v3.GatewayStatus.MetricsEntry")
	proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.GatewayStatus.VersionsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.GatewayStatus.VersionsEntry")
	proto.RegisterType((*GatewayConnectionStats)(nil), "ttn.lorawan.v3.GatewayConnectionStats")
	golang_proto.RegisterType((*GatewayConnectionStats)(nil), "ttn.lorawan.v3.GatewayConnectionStats")
	proto.RegisterEnum("ttn.lorawan.v3.GatewayAntennaPlacement", GatewayAntennaPlacement_name, GatewayAntennaPlacement_value)
	golang_proto.RegisterEnum("ttn.lorawan.v3.GatewayAntennaPlacement", GatewayAntennaPlacement_name, GatewayAntennaPlacement_value)
}
func (x GatewayAntennaPlacement) String() string {
	s, ok := GatewayAntennaPlacement_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Gateway) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Gateway)
	if !ok {
		that2, ok := that.(Gateway)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Gateway")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Gateway but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Gateway but is not nil && this == nil")
	}
	if !this.GatewayIdentifiers.Equal(&that1.GatewayIdentifiers) {
		return fmt.Errorf("GatewayIdentifiers this(%v) Not Equal that(%v)", this.GatewayIdentifiers, that1.GatewayIdentifiers)
	}
	if this.Description != that1.Description {
		return fmt.Errorf("Description this(%v) Not Equal that(%v)", this.Description, that1.Description)
	}
	if this.FrequencyPlanID != that1.FrequencyPlanID {
		return fmt.Errorf("FrequencyPlanID this(%v) Not Equal that(%v)", this.FrequencyPlanID, that1.FrequencyPlanID)
	}
	if this.ClusterAddress != that1.ClusterAddress {
		return fmt.Errorf("ClusterAddress this(%v) Not Equal that(%v)", this.ClusterAddress, that1.ClusterAddress)
	}
	if len(this.Antennas) != len(that1.Antennas) {
		return fmt.Errorf("Antennas this(%v) Not Equal that(%v)", len(this.Antennas), len(that1.Antennas))
	}
	for i := range this.Antennas {
		if !this.Antennas[i].Equal(&that1.Antennas[i]) {
			return fmt.Errorf("Antennas this[%v](%v) Not Equal that[%v](%v)", i, this.Antennas[i], i, that1.Antennas[i])
		}
	}
	if len(this.Radios) != len(that1.Radios) {
		return fmt.Errorf("Radios this(%v) Not Equal that(%v)", len(this.Radios), len(that1.Radios))
	}
	for i := range this.Radios {
		if !this.Radios[i].Equal(&that1.Radios[i]) {
			return fmt.Errorf("Radios this[%v](%v) Not Equal that[%v](%v)", i, this.Radios[i], i, that1.Radios[i])
		}
	}
	if that1.ActivatedAt == nil {
		if this.ActivatedAt != nil {
			return fmt.Errorf("this.ActivatedAt != nil && that1.ActivatedAt == nil")
		}
	} else if !this.ActivatedAt.Equal(*that1.ActivatedAt) {
		return fmt.Errorf("ActivatedAt this(%v) Not Equal that(%v)", this.ActivatedAt, that1.ActivatedAt)
	}
	if !this.PrivacySettings.Equal(&that1.PrivacySettings) {
		return fmt.Errorf("PrivacySettings this(%v) Not Equal that(%v)", this.PrivacySettings, that1.PrivacySettings)
	}
	if this.AutoUpdate != that1.AutoUpdate {
		return fmt.Errorf("AutoUpdate this(%v) Not Equal that(%v)", this.AutoUpdate, that1.AutoUpdate)
	}
	if this.Platform != that1.Platform {
		return fmt.Errorf("Platform this(%v) Not Equal that(%v)", this.Platform, that1.Platform)
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return fmt.Errorf("Attributes this(%v) Not Equal that(%v)", len(this.Attributes), len(that1.Attributes))
	}
	for i := range this.Attributes {
		if this.Attributes[i] != that1.Attributes[i] {
			return fmt.Errorf("Attributes this[%v](%v) Not Equal that[%v](%v)", i, this.Attributes[i], i, that1.Attributes[i])
		}
	}
	if !this.ContactAccountIDs.Equal(that1.ContactAccountIDs) {
		return fmt.Errorf("ContactAccountIDs this(%v) Not Equal that(%v)", this.ContactAccountIDs, that1.ContactAccountIDs)
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return fmt.Errorf("CreatedAt this(%v) Not Equal that(%v)", this.CreatedAt, that1.CreatedAt)
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return fmt.Errorf("UpdatedAt this(%v) Not Equal that(%v)", this.UpdatedAt, that1.UpdatedAt)
	}
	if this.ScheduleDownlinkLate != that1.ScheduleDownlinkLate {
		return fmt.Errorf("ScheduleDownlinkLate this(%v) Not Equal that(%v)", this.ScheduleDownlinkLate, that1.ScheduleDownlinkLate)
	}
	return nil
}
func (this *Gateway) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Gateway)
	if !ok {
		that2, ok := that.(Gateway)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GatewayIdentifiers.Equal(&that1.GatewayIdentifiers) {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.FrequencyPlanID != that1.FrequencyPlanID {
		return false
	}
	if this.ClusterAddress != that1.ClusterAddress {
		return false
	}
	if len(this.Antennas) != len(that1.Antennas) {
		return false
	}
	for i := range this.Antennas {
		if !this.Antennas[i].Equal(&that1.Antennas[i]) {
			return false
		}
	}
	if len(this.Radios) != len(that1.Radios) {
		return false
	}
	for i := range this.Radios {
		if !this.Radios[i].Equal(&that1.Radios[i]) {
			return false
		}
	}
	if that1.ActivatedAt == nil {
		if this.ActivatedAt != nil {
			return false
		}
	} else if !this.ActivatedAt.Equal(*that1.ActivatedAt) {
		return false
	}
	if !this.PrivacySettings.Equal(&that1.PrivacySettings) {
		return false
	}
	if this.AutoUpdate != that1.AutoUpdate {
		return false
	}
	if this.Platform != that1.Platform {
		return false
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return false
	}
	for i := range this.Attributes {
		if this.Attributes[i] != that1.Attributes[i] {
			return false
		}
	}
	if !this.ContactAccountIDs.Equal(that1.ContactAccountIDs) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if this.ScheduleDownlinkLate != that1.ScheduleDownlinkLate {
		return false
	}
	return true
}
func (this *GatewayPrivacySettings) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GatewayPrivacySettings)
	if !ok {
		that2, ok := that.(GatewayPrivacySettings)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GatewayPrivacySettings")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GatewayPrivacySettings but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GatewayPrivacySettings but is not nil && this == nil")
	}
	if this.StatusPublic != that1.StatusPublic {
		return fmt.Errorf("StatusPublic this(%v) Not Equal that(%v)", this.StatusPublic, that1.StatusPublic)
	}
	if this.LocationPublic != that1.LocationPublic {
		return fmt.Errorf("LocationPublic this(%v) Not Equal that(%v)", this.LocationPublic, that1.LocationPublic)
	}
	if this.Contactable != that1.Contactable {
		return fmt.Errorf("Contactable this(%v) Not Equal that(%v)", this.Contactable, that1.Contactable)
	}
	return nil
}
func (this *GatewayPrivacySettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayPrivacySettings)
	if !ok {
		that2, ok := that.(GatewayPrivacySettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StatusPublic != that1.StatusPublic {
		return false
	}
	if this.LocationPublic != that1.LocationPublic {
		return false
	}
	if this.Contactable != that1.Contactable {
		return false
	}
	return true
}
func (this *GatewayAntenna) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GatewayAntenna)
	if !ok {
		that2, ok := that.(GatewayAntenna)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GatewayAntenna")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GatewayAntenna but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GatewayAntenna but is not nil && this == nil")
	}
	if this.Gain != that1.Gain {
		return fmt.Errorf("Gain this(%v) Not Equal that(%v)", this.Gain, that1.Gain)
	}
	if !this.Location.Equal(&that1.Location) {
		return fmt.Errorf("Location this(%v) Not Equal that(%v)", this.Location, that1.Location)
	}
	if this.Type != that1.Type {
		return fmt.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	if this.Model != that1.Model {
		return fmt.Errorf("Model this(%v) Not Equal that(%v)", this.Model, that1.Model)
	}
	if this.Placement != that1.Placement {
		return fmt.Errorf("Placement this(%v) Not Equal that(%v)", this.Placement, that1.Placement)
	}
	return nil
}
func (this *GatewayAntenna) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayAntenna)
	if !ok {
		that2, ok := that.(GatewayAntenna)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Gain != that1.Gain {
		return false
	}
	if !this.Location.Equal(&that1.Location) {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Model != that1.Model {
		return false
	}
	if this.Placement != that1.Placement {
		return false
	}
	return true
}
func (this *GatewayRadio) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GatewayRadio)
	if !ok {
		that2, ok := that.(GatewayRadio)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GatewayRadio")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GatewayRadio but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GatewayRadio but is not nil && this == nil")
	}
	if this.Frequency != that1.Frequency {
		return fmt.Errorf("Frequency this(%v) Not Equal that(%v)", this.Frequency, that1.Frequency)
	}
	if !this.TxConfiguration.Equal(that1.TxConfiguration) {
		return fmt.Errorf("TxConfiguration this(%v) Not Equal that(%v)", this.TxConfiguration, that1.TxConfiguration)
	}
	return nil
}
func (this *GatewayRadio) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayRadio)
	if !ok {
		that2, ok := that.(GatewayRadio)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Frequency != that1.Frequency {
		return false
	}
	if !this.TxConfiguration.Equal(that1.TxConfiguration) {
		return false
	}
	return true
}
func (this *GatewayRadio_TxConfiguration) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GatewayRadio_TxConfiguration)
	if !ok {
		that2, ok := that.(GatewayRadio_TxConfiguration)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GatewayRadio_TxConfiguration")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GatewayRadio_TxConfiguration but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GatewayRadio_TxConfiguration but is not nil && this == nil")
	}
	if this.MinFrequency != that1.MinFrequency {
		return fmt.Errorf("MinFrequency this(%v) Not Equal that(%v)", this.MinFrequency, that1.MinFrequency)
	}
	if this.MaxFrequency != that1.MaxFrequency {
		return fmt.Errorf("MaxFrequency this(%v) Not Equal that(%v)", this.MaxFrequency, that1.MaxFrequency)
	}
	if this.NotchFrequency != that1.NotchFrequency {
		return fmt.Errorf("NotchFrequency this(%v) Not Equal that(%v)", this.NotchFrequency, that1.NotchFrequency)
	}
	return nil
}
func (this *GatewayRadio_TxConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayRadio_TxConfiguration)
	if !ok {
		that2, ok := that.(GatewayRadio_TxConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MinFrequency != that1.MinFrequency {
		return false
	}
	if this.MaxFrequency != that1.MaxFrequency {
		return false
	}
	if this.NotchFrequency != that1.NotchFrequency {
		return false
	}
	return true
}
func (this *GatewayStatus) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GatewayStatus)
	if !ok {
		that2, ok := that.(GatewayStatus)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GatewayStatus")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GatewayStatus but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GatewayStatus but is not nil && this == nil")
	}
	if !this.Time.Equal(that1.Time) {
		return fmt.Errorf("Time this(%v) Not Equal that(%v)", this.Time, that1.Time)
	}
	if !this.BootTime.Equal(that1.BootTime) {
		return fmt.Errorf("BootTime this(%v) Not Equal that(%v)", this.BootTime, that1.BootTime)
	}
	if this.Platform != that1.Platform {
		return fmt.Errorf("Platform this(%v) Not Equal that(%v)", this.Platform, that1.Platform)
	}
	if len(this.Versions) != len(that1.Versions) {
		return fmt.Errorf("Versions this(%v) Not Equal that(%v)", len(this.Versions), len(that1.Versions))
	}
	for i := range this.Versions {
		if this.Versions[i] != that1.Versions[i] {
			return fmt.Errorf("Versions this[%v](%v) Not Equal that[%v](%v)", i, this.Versions[i], i, that1.Versions[i])
		}
	}
	if len(this.AntennasLocation) != len(that1.AntennasLocation) {
		return fmt.Errorf("AntennasLocation this(%v) Not Equal that(%v)", len(this.AntennasLocation), len(that1.AntennasLocation))
	}
	for i := range this.AntennasLocation {
		if !this.AntennasLocation[i].Equal(that1.AntennasLocation[i]) {
			return fmt.Errorf("AntennasLocation this[%v](%v) Not Equal that[%v](%v)", i, this.AntennasLocation[i], i, that1.AntennasLocation[i])
		}
	}
	if len(this.IP) != len(that1.IP) {
		return fmt.Errorf("IP this(%v) Not Equal that(%v)", len(this.IP), len(that1.IP))
	}
	for i := range this.IP {
		if this.IP[i] != that1.IP[i] {
			return fmt.Errorf("IP this[%v](%v) Not Equal that[%v](%v)", i, this.IP[i], i, that1.IP[i])
		}
	}
	if this.RTT != nil && that1.RTT != nil {
		if *this.RTT != *that1.RTT {
			return fmt.Errorf("RTT this(%v) Not Equal that(%v)", *this.RTT, *that1.RTT)
		}
	} else if this.RTT != nil {
		return fmt.Errorf("this.RTT == nil && that.RTT != nil")
	} else if that1.RTT != nil {
		return fmt.Errorf("RTT this(%v) Not Equal that(%v)", this.RTT, that1.RTT)
	}
	if len(this.Metrics) != len(that1.Metrics) {
		return fmt.Errorf("Metrics this(%v) Not Equal that(%v)", len(this.Metrics), len(that1.Metrics))
	}
	for i := range this.Metrics {
		if this.Metrics[i] != that1.Metrics[i] {
			return fmt.Errorf("Metrics this[%v](%v) Not Equal that[%v](%v)", i, this.Metrics[i], i, that1.Metrics[i])
		}
	}
	if !this.Advanced.Equal(that1.Advanced) {
		return fmt.Errorf("Advanced this(%v) Not Equal that(%v)", this.Advanced, that1.Advanced)
	}
	return nil
}
func (this *GatewayStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayStatus)
	if !ok {
		that2, ok := that.(GatewayStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Time.Equal(that1.Time) {
		return false
	}
	if !this.BootTime.Equal(that1.BootTime) {
		return false
	}
	if this.Platform != that1.Platform {
		return false
	}
	if len(this.Versions) != len(that1.Versions) {
		return false
	}
	for i := range this.Versions {
		if this.Versions[i] != that1.Versions[i] {
			return false
		}
	}
	if len(this.AntennasLocation) != len(that1.AntennasLocation) {
		return false
	}
	for i := range this.AntennasLocation {
		if !this.AntennasLocation[i].Equal(that1.AntennasLocation[i]) {
			return false
		}
	}
	if len(this.IP) != len(that1.IP) {
		return false
	}
	for i := range this.IP {
		if this.IP[i] != that1.IP[i] {
			return false
		}
	}
	if this.RTT != nil && that1.RTT != nil {
		if *this.RTT != *that1.RTT {
			return false
		}
	} else if this.RTT != nil {
		return false
	} else if that1.RTT != nil {
		return false
	}
	if len(this.Metrics) != len(that1.Metrics) {
		return false
	}
	for i := range this.Metrics {
		if this.Metrics[i] != that1.Metrics[i] {
			return false
		}
	}
	if !this.Advanced.Equal(that1.Advanced) {
		return false
	}
	return true
}
func (this *GatewayConnectionStats) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GatewayConnectionStats)
	if !ok {
		that2, ok := that.(GatewayConnectionStats)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GatewayConnectionStats")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GatewayConnectionStats but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GatewayConnectionStats but is not nil && this == nil")
	}
	if that1.ConnectedAt == nil {
		if this.ConnectedAt != nil {
			return fmt.Errorf("this.ConnectedAt != nil && that1.ConnectedAt == nil")
		}
	} else if !this.ConnectedAt.Equal(*that1.ConnectedAt) {
		return fmt.Errorf("ConnectedAt this(%v) Not Equal that(%v)", this.ConnectedAt, that1.ConnectedAt)
	}
	if this.Protocol != that1.Protocol {
		return fmt.Errorf("Protocol this(%v) Not Equal that(%v)", this.Protocol, that1.Protocol)
	}
	if that1.LastStatusReceivedAt == nil {
		if this.LastStatusReceivedAt != nil {
			return fmt.Errorf("this.LastStatusReceivedAt != nil && that1.LastStatusReceivedAt == nil")
		}
	} else if !this.LastStatusReceivedAt.Equal(*that1.LastStatusReceivedAt) {
		return fmt.Errorf("LastStatusReceivedAt this(%v) Not Equal that(%v)", this.LastStatusReceivedAt, that1.LastStatusReceivedAt)
	}
	if !this.LastStatus.Equal(that1.LastStatus) {
		return fmt.Errorf("LastStatus this(%v) Not Equal that(%v)", this.LastStatus, that1.LastStatus)
	}
	if that1.LastUplinkReceivedAt == nil {
		if this.LastUplinkReceivedAt != nil {
			return fmt.Errorf("this.LastUplinkReceivedAt != nil && that1.LastUplinkReceivedAt == nil")
		}
	} else if !this.LastUplinkReceivedAt.Equal(*that1.LastUplinkReceivedAt) {
		return fmt.Errorf("LastUplinkReceivedAt this(%v) Not Equal that(%v)", this.LastUplinkReceivedAt, that1.LastUplinkReceivedAt)
	}
	if this.UplinkCount != that1.UplinkCount {
		return fmt.Errorf("UplinkCount this(%v) Not Equal that(%v)", this.UplinkCount, that1.UplinkCount)
	}
	if that1.LastDownlinkReceivedAt == nil {
		if this.LastDownlinkReceivedAt != nil {
			return fmt.Errorf("this.LastDownlinkReceivedAt != nil && that1.LastDownlinkReceivedAt == nil")
		}
	} else if !this.LastDownlinkReceivedAt.Equal(*that1.LastDownlinkReceivedAt) {
		return fmt.Errorf("LastDownlinkReceivedAt this(%v) Not Equal that(%v)", this.LastDownlinkReceivedAt, that1.LastDownlinkReceivedAt)
	}
	if this.DownlinkCount != that1.DownlinkCount {
		return fmt.Errorf("DownlinkCount this(%v) Not Equal that(%v)", this.DownlinkCount, that1.DownlinkCount)
	}
	return nil
}
func (this *GatewayConnectionStats) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayConnectionStats)
	if !ok {
		that2, ok := that.(GatewayConnectionStats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ConnectedAt == nil {
		if this.ConnectedAt != nil {
			return false
		}
	} else if !this.ConnectedAt.Equal(*that1.ConnectedAt) {
		return false
	}
	if this.Protocol != that1.Protocol {
		return false
	}
	if that1.LastStatusReceivedAt == nil {
		if this.LastStatusReceivedAt != nil {
			return false
		}
	} else if !this.LastStatusReceivedAt.Equal(*that1.LastStatusReceivedAt) {
		return false
	}
	if !this.LastStatus.Equal(that1.LastStatus) {
		return false
	}
	if that1.LastUplinkReceivedAt == nil {
		if this.LastUplinkReceivedAt != nil {
			return false
		}
	} else if !this.LastUplinkReceivedAt.Equal(*that1.LastUplinkReceivedAt) {
		return false
	}
	if this.UplinkCount != that1.UplinkCount {
		return false
	}
	if that1.LastDownlinkReceivedAt == nil {
		if this.LastDownlinkReceivedAt != nil {
			return false
		}
	} else if !this.LastDownlinkReceivedAt.Equal(*that1.LastDownlinkReceivedAt) {
		return false
	}
	if this.DownlinkCount != that1.DownlinkCount {
		return false
	}
	return true
}
func (m *Gateway) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Gateway) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.GatewayIdentifiers.Size()))
	n1, err := m.GatewayIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Description) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.FrequencyPlanID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.FrequencyPlanID)))
		i += copy(dAtA[i:], m.FrequencyPlanID)
	}
	if len(m.ClusterAddress) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.ClusterAddress)))
		i += copy(dAtA[i:], m.ClusterAddress)
	}
	if len(m.Antennas) > 0 {
		for _, msg := range m.Antennas {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintGateway(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Radios) > 0 {
		for _, msg := range m.Radios {
			dAtA[i] = 0x32
			i++
			i = encodeVarintGateway(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ActivatedAt != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.ActivatedAt)))
		n2, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ActivatedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	dAtA[i] = 0x42
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.PrivacySettings.Size()))
	n3, err := m.PrivacySettings.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if m.AutoUpdate {
		dAtA[i] = 0x48
		i++
		if m.AutoUpdate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if len(m.Attributes) > 0 {
		for k := range m.Attributes {
			dAtA[i] = 0x5a
			i++
			v := m.Attributes[k]
			mapSize := 1 + len(k) + sovGateway(uint64(len(k))) + 1 + len(v) + sovGateway(uint64(len(v)))
			i = encodeVarintGateway(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGateway(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintGateway(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.ContactAccountIDs != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.ContactAccountIDs.Size()))
		n4, err := m.ContactAccountIDs.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)))
	n5, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x72
	i++
	i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)))
	n6, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if m.ScheduleDownlinkLate {
		dAtA[i] = 0x78
		i++
		if m.ScheduleDownlinkLate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GatewayPrivacySettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayPrivacySettings) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StatusPublic {
		dAtA[i] = 0x8
		i++
		if m.StatusPublic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.LocationPublic {
		dAtA[i] = 0x10
		i++
		if m.LocationPublic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Contactable {
		dAtA[i] = 0x18
		i++
		if m.Contactable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GatewayAntenna) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayAntenna) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Gain != 0 {
		dAtA[i] = 0xd
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], math.Float32bits(m.Gain))
		i += 4
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.Location.Size()))
	n7, err := m.Location.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	if len(m.Type) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Model) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Model)))
		i += copy(dAtA[i:], m.Model)
	}
	if m.Placement != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.Placement))
	}
	return i, nil
}

func (m *GatewayRadio) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayRadio) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Frequency != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGateway(dAtA, i, m.Frequency)
	}
	if m.TxConfiguration != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.TxConfiguration.Size()))
		n8, err := m.TxConfiguration.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *GatewayRadio_TxConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayRadio_TxConfiguration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MinFrequency != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGateway(dAtA, i, m.MinFrequency)
	}
	if m.MaxFrequency != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGateway(dAtA, i, m.MaxFrequency)
	}
	if m.NotchFrequency != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGateway(dAtA, i, m.NotchFrequency)
	}
	return i, nil
}

func (m *GatewayStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Time)))
	n9, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Time, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	dAtA[i] = 0x12
	i++
	i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.BootTime)))
	n10, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.BootTime, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	if len(m.Platform) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if len(m.Versions) > 0 {
		for k := range m.Versions {
			dAtA[i] = 0x22
			i++
			v := m.Versions[k]
			mapSize := 1 + len(k) + sovGateway(uint64(len(k))) + 1 + len(v) + sovGateway(uint64(len(v)))
			i = encodeVarintGateway(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGateway(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintGateway(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.AntennasLocation) > 0 {
		for _, msg := range m.AntennasLocation {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintGateway(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.IP) > 0 {
		for _, s := range m.IP {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.RTT != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdDuration(*m.RTT)))
		n11, err := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.RTT, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if len(m.Metrics) > 0 {
		for k := range m.Metrics {
			dAtA[i] = 0x42
			i++
			v := m.Metrics[k]
			mapSize := 1 + len(k) + sovGateway(uint64(len(k))) + 1 + 4
			i = encodeVarintGateway(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGateway(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x15
			i++
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], math.Float32bits(v))
			i += 4
		}
	}
	if m.Advanced != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.Advanced.Size()))
		n12, err := m.Advanced.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *GatewayConnectionStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayConnectionStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ConnectedAt != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.ConnectedAt)))
		n13, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ConnectedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if len(m.Protocol) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Protocol)))
		i += copy(dAtA[i:], m.Protocol)
	}
	if m.LastStatusReceivedAt != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastStatusReceivedAt)))
		n14, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastStatusReceivedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.LastStatus != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.LastStatus.Size()))
		n15, err := m.LastStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.LastUplinkReceivedAt != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastUplinkReceivedAt)))
		n16, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastUplinkReceivedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.UplinkCount != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGateway(dAtA, i, m.UplinkCount)
	}
	if m.LastDownlinkReceivedAt != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastDownlinkReceivedAt)))
		n17, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastDownlinkReceivedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.DownlinkCount != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintGateway(dAtA, i, m.DownlinkCount)
	}
	return i, nil
}

func encodeVarintGateway(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedGatewayPrivacySettings(r randyGateway, easy bool) *GatewayPrivacySettings {
	this := &GatewayPrivacySettings{}
	this.StatusPublic = bool(r.Intn(2) == 0)
	this.LocationPublic = bool(r.Intn(2) == 0)
	this.Contactable = bool(r.Intn(2) == 0)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGatewayAntenna(r randyGateway, easy bool) *GatewayAntenna {
	this := &GatewayAntenna{}
	this.Gain = r.Float32()
	if r.Intn(2) == 0 {
		this.Gain *= -1
	}
	v1 := NewPopulatedLocation(r, easy)
	this.Location = *v1
	this.Type = randStringGateway(r)
	this.Model = randStringGateway(r)
	this.Placement = GatewayAntennaPlacement([]int32{0, 1}[r.Intn(2)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGatewayRadio(r randyGateway, easy bool) *GatewayRadio {
	this := &GatewayRadio{}
	this.Frequency = uint64(r.Uint32())
	if r.Intn(10) != 0 {
		this.TxConfiguration = NewPopulatedGatewayRadio_TxConfiguration(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGatewayRadio_TxConfiguration(r randyGateway, easy bool) *GatewayRadio_TxConfiguration {
	this := &GatewayRadio_TxConfiguration{}
	this.MinFrequency = uint64(r.Uint32())
	this.MaxFrequency = uint64(r.Uint32())
	this.NotchFrequency = uint64(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGatewayStatus(r randyGateway, easy bool) *GatewayStatus {
	this := &GatewayStatus{}
	v2 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.Time = *v2
	v3 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.BootTime = *v3
	this.Platform = randStringGateway(r)
	if r.Intn(10) != 0 {
		v4 := r.Intn(10)
		this.Versions = make(map[string]string)
		for i := 0; i < v4; i++ {
			this.Versions[randStringGateway(r)] = randStringGateway(r)
		}
	}
	if r.Intn(10) != 0 {
		v5 := r.Intn(5)
		this.AntennasLocation = make([]*Location, v5)
		for i := 0; i < v5; i++ {
			this.AntennasLocation[i] = NewPopulatedLocation(r, easy)
		}
	}
	v6 := r.Intn(10)
	this.IP = make([]string, v6)
	for i := 0; i < v6; i++ {
		this.IP[i] = randStringGateway(r)
	}
	if r.Intn(10) != 0 {
		this.RTT = github_com_gogo_protobuf_types.NewPopulatedStdDuration(r, easy)
	}
	if r.Intn(10) != 0 {
		v7 := r.Intn(10)
		this.Metrics = make(map[string]float32)
		for i := 0; i < v7; i++ {
			v8 := randStringGateway(r)
			this.Metrics[v8] = r.Float32()
			if r.Intn(2) == 0 {
				this.Metrics[v8] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		this.Advanced = types.NewPopulatedStruct(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGatewayConnectionStats(r randyGateway, easy bool) *GatewayConnectionStats {
	this := &GatewayConnectionStats{}
	if r.Intn(10) != 0 {
		this.ConnectedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	this.Protocol = randStringGateway(r)
	if r.Intn(10) != 0 {
		this.LastStatusReceivedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if r.Intn(10) != 0 {
		this.LastStatus = NewPopulatedGatewayStatus(r, easy)
	}
	if r.Intn(10) != 0 {
		this.LastUplinkReceivedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	this.UplinkCount = uint64(r.Uint32())
	if r.Intn(10) != 0 {
		this.LastDownlinkReceivedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	this.DownlinkCount = uint64(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyGateway interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneGateway(r randyGateway) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringGateway(r randyGateway) string {
	v9 := r.Intn(100)
	tmps := make([]rune, v9)
	for i := 0; i < v9; i++ {
		tmps[i] = randUTF8RuneGateway(r)
	}
	return string(tmps)
}
func randUnrecognizedGateway(r randyGateway, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldGateway(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldGateway(dAtA []byte, r randyGateway, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateGateway(dAtA, uint64(key))
		v10 := r.Int63()
		if r.Intn(2) == 0 {
			v10 *= -1
		}
		dAtA = encodeVarintPopulateGateway(dAtA, uint64(v10))
	case 1:
		dAtA = encodeVarintPopulateGateway(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateGateway(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateGateway(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateGateway(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateGateway(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Gateway) Size() (n int) {
	var l int
	_ = l
	l = m.GatewayIdentifiers.Size()
	n += 1 + l + sovGateway(uint64(l))
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.FrequencyPlanID)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.ClusterAddress)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.Antennas) > 0 {
		for _, e := range m.Antennas {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if len(m.Radios) > 0 {
		for _, e := range m.Radios {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if m.ActivatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ActivatedAt)
		n += 1 + l + sovGateway(uint64(l))
	}
	l = m.PrivacySettings.Size()
	n += 1 + l + sovGateway(uint64(l))
	if m.AutoUpdate {
		n += 2
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.Attributes) > 0 {
		for k, v := range m.Attributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGateway(uint64(len(k))) + 1 + len(v) + sovGateway(uint64(len(v)))
			n += mapEntrySize + 1 + sovGateway(uint64(mapEntrySize))
		}
	}
	if m.ContactAccountIDs != nil {
		l = m.ContactAccountIDs.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovGateway(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)
	n += 1 + l + sovGateway(uint64(l))
	if m.ScheduleDownlinkLate {
		n += 2
	}
	return n
}

func (m *GatewayPrivacySettings) Size() (n int) {
	var l int
	_ = l
	if m.StatusPublic {
		n += 2
	}
	if m.LocationPublic {
		n += 2
	}
	if m.Contactable {
		n += 2
	}
	return n
}

func (m *GatewayAntenna) Size() (n int) {
	var l int
	_ = l
	if m.Gain != 0 {
		n += 5
	}
	l = m.Location.Size()
	n += 1 + l + sovGateway(uint64(l))
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.Model)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.Placement != 0 {
		n += 1 + sovGateway(uint64(m.Placement))
	}
	return n
}

func (m *GatewayRadio) Size() (n int) {
	var l int
	_ = l
	if m.Frequency != 0 {
		n += 1 + sovGateway(m.Frequency)
	}
	if m.TxConfiguration != nil {
		l = m.TxConfiguration.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GatewayRadio_TxConfiguration) Size() (n int) {
	var l int
	_ = l
	if m.MinFrequency != 0 {
		n += 1 + sovGateway(m.MinFrequency)
	}
	if m.MaxFrequency != 0 {
		n += 1 + sovGateway(m.MaxFrequency)
	}
	if m.NotchFrequency != 0 {
		n += 1 + sovGateway(m.NotchFrequency)
	}
	return n
}

func (m *GatewayStatus) Size() (n int) {
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Time)
	n += 1 + l + sovGateway(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.BootTime)
	n += 1 + l + sovGateway(uint64(l))
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.Versions) > 0 {
		for k, v := range m.Versions {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGateway(uint64(len(k))) + 1 + len(v) + sovGateway(uint64(len(v)))
			n += mapEntrySize + 1 + sovGateway(uint64(mapEntrySize))
		}
	}
	if len(m.AntennasLocation) > 0 {
		for _, e := range m.AntennasLocation {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if len(m.IP) > 0 {
		for _, s := range m.IP {
			l = len(s)
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if m.RTT != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.RTT)
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.Metrics) > 0 {
		for k, v := range m.Metrics {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGateway(uint64(len(k))) + 1 + 4
			n += mapEntrySize + 1 + sovGateway(uint64(mapEntrySize))
		}
	}
	if m.Advanced != nil {
		l = m.Advanced.Size()
		n += 2 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GatewayConnectionStats) Size() (n int) {
	var l int
	_ = l
	if m.ConnectedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ConnectedAt)
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.LastStatusReceivedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastStatusReceivedAt)
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.LastStatus != nil {
		l = m.LastStatus.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.LastUplinkReceivedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastUplinkReceivedAt)
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.UplinkCount != 0 {
		n += 1 + sovGateway(m.UplinkCount)
	}
	if m.LastDownlinkReceivedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastDownlinkReceivedAt)
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.DownlinkCount != 0 {
		n += 1 + sovGateway(m.DownlinkCount)
	}
	return n
}

func sovGateway(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGateway(x uint64) (n int) {
	return sovGateway((x << 1) ^ uint64((int64(x) >> 63)))
}
func (this *Gateway) String() string {
	if this == nil {
		return "nil"
	}
	keysForAttributes := make([]string, 0, len(this.Attributes))
	for k := range this.Attributes {
		keysForAttributes = append(keysForAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributes)
	mapStringForAttributes := "map[string]string{"
	for _, k := range keysForAttributes {
		mapStringForAttributes += fmt.Sprintf("%v: %v,", k, this.Attributes[k])
	}
	mapStringForAttributes += "}"
	s := strings.Join([]string{`&Gateway{`,
		`GatewayIdentifiers:` + strings.Replace(strings.Replace(this.GatewayIdentifiers.String(), "GatewayIdentifiers", "GatewayIdentifiers", 1), `&`, ``, 1) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`FrequencyPlanID:` + fmt.Sprintf("%v", this.FrequencyPlanID) + `,`,
		`ClusterAddress:` + fmt.Sprintf("%v", this.ClusterAddress) + `,`,
		`Antennas:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Antennas), "GatewayAntenna", "GatewayAntenna", 1), `&`, ``, 1) + `,`,
		`Radios:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Radios), "GatewayRadio", "GatewayRadio", 1), `&`, ``, 1) + `,`,
		`ActivatedAt:` + strings.Replace(fmt.Sprintf("%v", this.ActivatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`PrivacySettings:` + strings.Replace(strings.Replace(this.PrivacySettings.String(), "GatewayPrivacySettings", "GatewayPrivacySettings", 1), `&`, ``, 1) + `,`,
		`AutoUpdate:` + fmt.Sprintf("%v", this.AutoUpdate) + `,`,
		`Platform:` + fmt.Sprintf("%v", this.Platform) + `,`,
		`Attributes:` + mapStringForAttributes + `,`,
		`ContactAccountIDs:` + strings.Replace(fmt.Sprintf("%v", this.ContactAccountIDs), "OrganizationOrUserIdentifiers", "OrganizationOrUserIdentifiers", 1) + `,`,
		`CreatedAt:` + strings.Replace(strings.Replace(this.CreatedAt.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`UpdatedAt:` + strings.Replace(strings.Replace(this.UpdatedAt.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`ScheduleDownlinkLate:` + fmt.Sprintf("%v", this.ScheduleDownlinkLate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayPrivacySettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayPrivacySettings{`,
		`StatusPublic:` + fmt.Sprintf("%v", this.StatusPublic) + `,`,
		`LocationPublic:` + fmt.Sprintf("%v", this.LocationPublic) + `,`,
		`Contactable:` + fmt.Sprintf("%v", this.Contactable) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayAntenna) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayAntenna{`,
		`Gain:` + fmt.Sprintf("%v", this.Gain) + `,`,
		`Location:` + strings.Replace(strings.Replace(this.Location.String(), "Location", "Location", 1), `&`, ``, 1) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Model:` + fmt.Sprintf("%v", this.Model) + `,`,
		`Placement:` + fmt.Sprintf("%v", this.Placement) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayRadio) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayRadio{`,
		`Frequency:` + fmt.Sprintf("%v", this.Frequency) + `,`,
		`TxConfiguration:` + strings.Replace(fmt.Sprintf("%v", this.TxConfiguration), "GatewayRadio_TxConfiguration", "GatewayRadio_TxConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayRadio_TxConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayRadio_TxConfiguration{`,
		`MinFrequency:` + fmt.Sprintf("%v", this.MinFrequency) + `,`,
		`MaxFrequency:` + fmt.Sprintf("%v", this.MaxFrequency) + `,`,
		`NotchFrequency:` + fmt.Sprintf("%v", this.NotchFrequency) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayStatus) String() string {
	if this == nil {
		return "nil"
	}
	keysForVersions := make([]string, 0, len(this.Versions))
	for k := range this.Versions {
		keysForVersions = append(keysForVersions, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForVersions)
	mapStringForVersions := "map[string]string{"
	for _, k := range keysForVersions {
		mapStringForVersions += fmt.Sprintf("%v: %v,", k, this.Versions[k])
	}
	mapStringForVersions += "}"
	keysForMetrics := make([]string, 0, len(this.Metrics))
	for k := range this.Metrics {
		keysForMetrics = append(keysForMetrics, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetrics)
	mapStringForMetrics := "map[string]float32{"
	for _, k := range keysForMetrics {
		mapStringForMetrics += fmt.Sprintf("%v: %v,", k, this.Metrics[k])
	}
	mapStringForMetrics += "}"
	s := strings.Join([]string{`&GatewayStatus{`,
		`Time:` + strings.Replace(strings.Replace(this.Time.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`BootTime:` + strings.Replace(strings.Replace(this.BootTime.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`Platform:` + fmt.Sprintf("%v", this.Platform) + `,`,
		`Versions:` + mapStringForVersions + `,`,
		`AntennasLocation:` + strings.Replace(fmt.Sprintf("%v", this.AntennasLocation), "Location", "Location", 1) + `,`,
		`IP:` + fmt.Sprintf("%v", this.IP) + `,`,
		`RTT:` + strings.Replace(fmt.Sprintf("%v", this.RTT), "Duration", "types.Duration", 1) + `,`,
		`Metrics:` + mapStringForMetrics + `,`,
		`Advanced:` + strings.Replace(fmt.Sprintf("%v", this.Advanced), "Struct", "types.Struct", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayConnectionStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayConnectionStats{`,
		`ConnectedAt:` + strings.Replace(fmt.Sprintf("%v", this.ConnectedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`LastStatusReceivedAt:` + strings.Replace(fmt.Sprintf("%v", this.LastStatusReceivedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`LastStatus:` + strings.Replace(fmt.Sprintf("%v", this.LastStatus), "GatewayStatus", "GatewayStatus", 1) + `,`,
		`LastUplinkReceivedAt:` + strings.Replace(fmt.Sprintf("%v", this.LastUplinkReceivedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`UplinkCount:` + fmt.Sprintf("%v", this.UplinkCount) + `,`,
		`LastDownlinkReceivedAt:` + strings.Replace(fmt.Sprintf("%v", this.LastDownlinkReceivedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`DownlinkCount:` + fmt.Sprintf("%v", this.DownlinkCount) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGateway(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Gateway) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Gateway: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Gateway: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GatewayIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyPlanID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrequencyPlanID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Antennas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Antennas = append(m.Antennas, GatewayAntenna{})
			if err := m.Antennas[len(m.Antennas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Radios", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Radios = append(m.Radios, GatewayRadio{})
			if err := m.Radios[len(m.Radios)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActivatedAt == nil {
				m.ActivatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ActivatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivacySettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PrivacySettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoUpdate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoUpdate = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGateway
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGateway
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGateway(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGateway
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attributes[mapkey] = mapvalue
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactAccountIDs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContactAccountIDs == nil {
				m.ContactAccountIDs = &OrganizationOrUserIdentifiers{}
			}
			if err := m.ContactAccountIDs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleDownlinkLate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ScheduleDownlinkLate = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayPrivacySettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayPrivacySettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayPrivacySettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusPublic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StatusPublic = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationPublic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LocationPublic = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contactable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Contactable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayAntenna) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayAntenna: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayAntenna: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gain", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:])
			iNdEx += 4
			m.Gain = math.Float32frombits(v)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Placement", wireType)
			}
			m.Placement = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Placement |= (GatewayAntennaPlacement(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayRadio) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayRadio: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayRadio: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			m.Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxConfiguration == nil {
				m.TxConfiguration = &GatewayRadio_TxConfiguration{}
			}
			if err := m.TxConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayRadio_TxConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinFrequency", wireType)
			}
			m.MinFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinFrequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFrequency", wireType)
			}
			m.MaxFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxFrequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotchFrequency", wireType)
			}
			m.NotchFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotchFrequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BootTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.BootTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Versions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Versions == nil {
				m.Versions = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGateway
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGateway
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGateway(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGateway
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Versions[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AntennasLocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AntennasLocation = append(m.AntennasLocation, &Location{})
			if err := m.AntennasLocation[len(m.AntennasLocation)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = append(m.IP, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RTT", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RTT == nil {
				m.RTT = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.RTT, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metrics == nil {
				m.Metrics = make(map[string]float32)
			}
			var mapkey string
			var mapvalue float32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGateway
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					mapvaluetemp = encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:])
					iNdEx += 4
					mapvalue = math.Float32frombits(mapvaluetemp)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGateway(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGateway
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metrics[mapkey] = mapvalue
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Advanced", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Advanced == nil {
				m.Advanced = &types.Struct{}
			}
			if err := m.Advanced.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayConnectionStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayConnectionStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayConnectionStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConnectedAt == nil {
				m.ConnectedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ConnectedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastStatusReceivedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastStatusReceivedAt == nil {
				m.LastStatusReceivedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastStatusReceivedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastStatus == nil {
				m.LastStatus = &GatewayStatus{}
			}
			if err := m.LastStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUplinkReceivedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastUplinkReceivedAt == nil {
				m.LastUplinkReceivedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastUplinkReceivedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplinkCount", wireType)
			}
			m.UplinkCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UplinkCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastDownlinkReceivedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastDownlinkReceivedAt == nil {
				m.LastDownlinkReceivedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastDownlinkReceivedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkCount", wireType)
			}
			m.DownlinkCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DownlinkCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGateway(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGateway
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGateway(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGateway = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGateway   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("go.thethings.network/lorawan-stack/api/gateway.proto", fileDescriptor_gateway_0a0dd94e16ec9006)
}
func init() {
	golang_proto.RegisterFile("go.thethings.network/lorawan-stack/api/gateway.proto", fileDescriptor_gateway_0a0dd94e16ec9006)
}

var fileDescriptor_gateway_0a0dd94e16ec9006 = []byte{
	// 1379 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0x41, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0xda, 0x4e, 0x62, 0x8f, 0x1d, 0x3b, 0x99, 0xa6, 0xe9, 0xd6, 0x2a, 0x6b, 0x63, 0x04,
	0x8d, 0x4a, 0xbb, 0x91, 0xd2, 0x22, 0x45, 0x41, 0x14, 0xec, 0x24, 0x54, 0x91, 0xd2, 0x26, 0xda,
	0x26, 0x54, 0x02, 0x89, 0xd5, 0x78, 0x77, 0xe2, 0x8c, 0xb2, 0x9e, 0x5d, 0x76, 0x67, 0x9d, 0x84,
	0x13, 0x07, 0x0e, 0x3d, 0x70, 0xa8, 0x38, 0x71, 0x44, 0xe2, 0xc2, 0x4f, 0xe0, 0xc8, 0xb1, 0xc7,
	0x72, 0xe3, 0x14, 0x5a, 0xf7, 0xc2, 0x11, 0x71, 0xe2, 0x84, 0xd0, 0xcc, 0xce, 0xae, 0xd7, 0x2e,
	0x6e, 0x9d, 0xdb, 0xce, 0x37, 0xdf, 0xf7, 0xe6, 0xcd, 0x7b, 0x6f, 0xde, 0xb3, 0xc1, 0x9d, 0x8e,
	0xab, 0xb3, 0x23, 0xcc, 0x8e, 0x08, 0xed, 0x04, 0x3a, 0xc5, 0xec, 0xc4, 0xf5, 0x8f, 0x57, 0x1c,
	0xd7, 0x47, 0x27, 0x88, 0xde, 0x0a, 0x18, 0xb2, 0x8e, 0x57, 0x90, 0x47, 0x56, 0x3a, 0x88, 0xe1,
	0x13, 0x74, 0xa6, 0x7b, 0xbe, 0xcb, 0x5c, 0x58, 0x66, 0x8c, 0xea, 0x92, 0xa4, 0xf7, 0x6e, 0x57,
	0xd7, 0x26, 0xb4, 0x42, 0x6c, 0x4c, 0x19, 0x39, 0x24, 0xd8, 0x0f, 0x22, 0x4b, 0xd5, 0x0f, 0x26,
	0x54, 0x76, 0x31, 0x43, 0x36, 0x62, 0x48, 0xca, 0x6e, 0x75, 0x08, 0x3b, 0x0a, 0xdb, 0xba, 0xe5,
	0x76, 0x57, 0x3a, 0x6e, 0xc7, 0x5d, 0x11, 0x70, 0x3b, 0x3c, 0x14, 0x2b, 0xb1, 0x10, 0x5f, 0x92,
	0xae, 0x75, 0x5c, 0xb7, 0xe3, 0xe0, 0x01, 0xcb, 0x0e, 0x7d, 0xc4, 0x88, 0x4b, 0xe5, 0xfe, 0xb5,
	0xd1, 0xfd, 0x80, 0xf9, 0xa1, 0xc5, 0xe4, 0x6e, 0x6d, 0x74, 0x97, 0x91, 0x2e, 0x0e, 0x18, 0xea,
	0x7a, 0x11, 0xa1, 0xf1, 0xf7, 0x2c, 0x98, 0xbd, 0x17, 0x05, 0x08, 0xde, 0x05, 0x59, 0x62, 0x07,
	0xaa, 0x52, 0x57, 0x96, 0x8b, 0xab, 0x0d, 0x7d, 0x38, 0x50, 0xba, 0x64, 0x6d, 0x0f, 0xe2, 0xd0,
	0xca, 0x3f, 0x3d, 0xaf, 0x4d, 0x3d, 0x3b, 0xaf, 0x29, 0x06, 0x17, 0xc2, 0x3a, 0x28, 0xda, 0x38,
	0xb0, 0x7c, 0xe2, 0x71, 0xff, 0xd4, 0x4c, 0x5d, 0x59, 0x2e, 0x18, 0x69, 0x08, 0x7e, 0x0c, 0x16,
	0x0e, 0x7d, 0xfc, 0x55, 0x88, 0xa9, 0x75, 0x66, 0x7a, 0x0e, 0xa2, 0x26, 0xb1, 0xd5, 0x2c, 0xe7,
	0xb5, 0x2e, 0xf5, 0xcf, 0x6b, 0x95, 0x4f, 0xe3, 0xcd, 0x3d, 0x07, 0xd1, 0xed, 0x4d, 0xa3, 0x72,
	0x38, 0x04, 0xd8, 0xf0, 0x3a, 0xa8, 0x58, 0x4e, 0x18, 0x30, 0xec, 0x9b, 0xc8, 0xb6, 0x7d, 0x1c,
	0x04, 0x6a, 0x4e, 0x1c, 0x53, 0x96, 0x70, 0x33, 0x42, 0xe1, 0x27, 0x20, 0x8f, 0x28, 0xc3, 0x94,
	0xa2, 0x40, 0x9d, 0xae, 0x67, 0x97, 0x8b, 0xab, 0xda, 0x98, 0x0b, 0x35, 0x23, 0x5a, 0x2b, 0xc7,
	0x2f, 0x63, 0x24, 0x2a, 0xb8, 0x0e, 0x66, 0x7c, 0x64, 0x13, 0x37, 0x50, 0x67, 0x84, 0xfe, 0xda,
	0x18, 0xbd, 0xc1, 0x49, 0x52, 0x2d, 0x15, 0x70, 0x03, 0x94, 0x90, 0xc5, 0x48, 0x0f, 0x31, 0x6c,
	0x9b, 0x88, 0xa9, 0xb3, 0x22, 0xa4, 0x55, 0x3d, 0xca, 0x86, 0x1e, 0x67, 0x43, 0xdf, 0x8f, 0xb3,
	0xd1, 0xca, 0x3d, 0xf9, 0xa3, 0xa6, 0x18, 0xc5, 0x44, 0xd5, 0x64, 0xf0, 0x11, 0x98, 0xf7, 0x7c,
	0xd2, 0x43, 0xd6, 0x99, 0x19, 0x60, 0xc6, 0x78, 0x95, 0xa9, 0x79, 0x61, 0xe8, 0xbd, 0x31, 0xae,
	0xec, 0x45, 0xf4, 0x87, 0x92, 0x2d, 0x9d, 0xaa, 0x78, 0xc3, 0x30, 0xac, 0x81, 0x22, 0x0a, 0x99,
	0x6b, 0x86, 0x9e, 0x8d, 0x18, 0x56, 0x0b, 0x75, 0x65, 0x39, 0x6f, 0x00, 0x0e, 0x1d, 0x08, 0x04,
	0x56, 0x41, 0xde, 0x73, 0x10, 0x3b, 0x74, 0xfd, 0xae, 0x0a, 0x44, 0x78, 0x93, 0x35, 0xbc, 0x07,
	0x00, 0x62, 0xcc, 0x27, 0xed, 0x90, 0xe1, 0x40, 0x2d, 0x8a, 0xd0, 0x5c, 0x1f, 0xe3, 0x8f, 0xde,
	0x4c, 0x98, 0x5b, 0x94, 0xf9, 0x67, 0x46, 0x4a, 0x0a, 0x19, 0xb8, 0x64, 0xb9, 0x94, 0x21, 0x8b,
	0x99, 0xc8, 0xb2, 0xdc, 0x90, 0x32, 0x93, 0x57, 0x5f, 0x49, 0xdc, 0xf0, 0xd6, 0xa8, 0xc5, 0x5d,
	0xbf, 0x83, 0x28, 0xf9, 0x5a, 0x54, 0xfe, 0xae, 0x7f, 0x10, 0x60, 0x3f, 0x5d, 0x88, 0x97, 0xfb,
	0xe7, 0xb5, 0x85, 0x8d, 0xc8, 0x5a, 0x33, 0x32, 0xb6, 0xbd, 0x19, 0x18, 0x0b, 0xd6, 0x30, 0x64,
	0xf3, 0xcc, 0x00, 0xcb, 0xc7, 0x71, 0x5e, 0xe6, 0xde, 0x98, 0x17, 0x51, 0xe2, 0x22, 0x37, 0x05,
	0xa9, 0x6b, 0x32, 0x6e, 0x24, 0x8a, 0x9d, 0x30, 0x52, 0xbe, 0x88, 0x11, 0xa9, 0x6b, 0x32, 0x78,
	0x07, 0x2c, 0x05, 0xd6, 0x11, 0xb6, 0x43, 0x07, 0x9b, 0xb6, 0x7b, 0x42, 0x1d, 0x42, 0x8f, 0x4d,
	0x87, 0x27, 0xa4, 0x22, 0x12, 0xb2, 0x18, 0xef, 0x6e, 0xca, 0xcd, 0x1d, 0xc4, 0x70, 0xf5, 0x23,
	0x50, 0x19, 0x09, 0x2a, 0x9c, 0x07, 0xd9, 0x63, 0x7c, 0x26, 0x9e, 0x6d, 0xc1, 0xe0, 0x9f, 0x70,
	0x11, 0x4c, 0xf7, 0x90, 0x13, 0x62, 0xf9, 0x04, 0xa3, 0xc5, 0x7a, 0x66, 0x4d, 0x59, 0xcf, 0xfd,
	0xf2, 0x63, 0x6d, 0xaa, 0xf1, 0x58, 0x01, 0x4b, 0xff, 0x5f, 0x32, 0xf0, 0x1d, 0x30, 0x17, 0x30,
	0xc4, 0xc2, 0xc0, 0xf4, 0xc2, 0xb6, 0x43, 0x2c, 0x61, 0x36, 0x6f, 0x94, 0x22, 0x70, 0x4f, 0x60,
	0xfc, 0x15, 0x3a, 0xae, 0x25, 0x72, 0x11, 0xd3, 0x32, 0x82, 0x56, 0x8e, 0x61, 0x49, 0xac, 0x83,
	0xa2, 0x4c, 0x01, 0x6a, 0x3b, 0x58, 0xbc, 0xf4, 0xbc, 0x91, 0x86, 0x1a, 0xbf, 0x29, 0xa0, 0x3c,
	0xfc, 0x10, 0x21, 0x04, 0xb9, 0x0e, 0x22, 0x54, 0x9c, 0x9c, 0x31, 0xc4, 0x37, 0x5c, 0x07, 0xf9,
	0xd8, 0xb4, 0x38, 0xaa, 0xb8, 0xaa, 0x8e, 0x56, 0xc8, 0x8e, 0xdc, 0x8f, 0x1f, 0x72, 0xcc, 0xe7,
	0xf6, 0xd8, 0x99, 0x17, 0x9d, 0x5e, 0x30, 0xc4, 0x37, 0x8f, 0x50, 0xd7, 0xb5, 0xb1, 0x23, 0xbb,
	0x47, 0xb4, 0x80, 0x5b, 0xa0, 0xe0, 0x39, 0xc8, 0xc2, 0x5d, 0x4c, 0x99, 0x3a, 0x5d, 0x57, 0x96,
	0xcb, 0x63, 0x4b, 0x5b, 0x3a, 0xbb, 0x17, 0xd3, 0x8d, 0x81, 0xb2, 0xf1, 0x5d, 0x06, 0x94, 0xd2,
	0xcd, 0x01, 0x5e, 0x03, 0x85, 0xa4, 0x91, 0x89, 0x6b, 0xe5, 0x8c, 0x01, 0xc0, 0xdf, 0x39, 0x3b,
	0x35, 0x2d, 0x97, 0x1e, 0x92, 0x8e, 0xec, 0xed, 0xf2, 0x8e, 0x37, 0x5f, 0xd7, 0x72, 0xf4, 0xfd,
	0xd3, 0x8d, 0xb4, 0xc6, 0xa8, 0xb0, 0x61, 0xa0, 0xfa, 0xad, 0x02, 0x2a, 0x23, 0x24, 0x9e, 0xdf,
	0x2e, 0xa1, 0xe6, 0xa8, 0x3b, 0xa5, 0x2e, 0xa1, 0x49, 0xf3, 0x15, 0x24, 0x74, 0x9a, 0x22, 0x65,
	0x24, 0x09, 0x9d, 0x0e, 0x48, 0xd7, 0x41, 0x85, 0xba, 0xcc, 0x3a, 0x4a, 0xd1, 0xb2, 0x82, 0x56,
	0x16, 0x70, 0x42, 0x6c, 0xfc, 0x9b, 0x03, 0x73, 0xd2, 0xf1, 0x87, 0xa2, 0x8a, 0xe0, 0x1a, 0xc8,
	0xf1, 0x39, 0x24, 0x27, 0xcd, 0x64, 0x2f, 0x47, 0x28, 0x60, 0x13, 0x14, 0xda, 0xae, 0xcb, 0x4c,
	0x21, 0xcf, 0x5c, 0x40, 0x9e, 0xe7, 0x32, 0xbe, 0x31, 0xd4, 0xdc, 0xb2, 0xaf, 0x34, 0xb7, 0x7c,
	0x0f, 0xfb, 0x01, 0x71, 0x29, 0x9f, 0x2b, 0xbc, 0xb5, 0xbd, 0x3f, 0x26, 0x05, 0xd1, 0x4d, 0xf4,
	0xcf, 0x24, 0x3b, 0x6a, 0x6f, 0x89, 0x18, 0x6e, 0x81, 0x85, 0x78, 0x90, 0x98, 0x49, 0xe1, 0x46,
	0x73, 0x68, 0x6c, 0xe1, 0x1a, 0xf3, 0xb1, 0x24, 0x46, 0xe0, 0x12, 0xc8, 0x10, 0x4f, 0xcc, 0x9f,
	0x42, 0x6b, 0xa6, 0x7f, 0x5e, 0xcb, 0x6c, 0xef, 0x19, 0x19, 0xe2, 0xc1, 0x35, 0x90, 0xf5, 0x59,
	0x3c, 0x56, 0xae, 0xbe, 0x12, 0x80, 0x4d, 0x99, 0xed, 0x56, 0xb1, 0x7f, 0x5e, 0xcb, 0x1a, 0xfb,
	0xfb, 0x3f, 0xf0, 0x10, 0x70, 0x09, 0xdc, 0x04, 0xb3, 0x5d, 0xcc, 0x7c, 0x62, 0xf1, 0x59, 0xc2,
	0xdd, 0xb9, 0xf1, 0xfa, 0x0b, 0xde, 0x8f, 0xc8, 0xd1, 0xfd, 0x62, 0x29, 0xbc, 0x0d, 0xf2, 0xc8,
	0xee, 0x21, 0x6a, 0x61, 0x5b, 0xb5, 0x84, 0x13, 0x57, 0x5e, 0x71, 0xe2, 0xa1, 0xf8, 0x1d, 0x62,
	0x24, 0xc4, 0xea, 0x87, 0x60, 0x6e, 0x28, 0x5c, 0x17, 0x69, 0x5c, 0xd5, 0x75, 0x50, 0x4a, 0xbb,
	0xf2, 0x26, 0x6d, 0x26, 0xa5, 0x6d, 0x7c, 0x9f, 0x4b, 0xda, 0xdd, 0x86, 0x4b, 0x29, 0xb6, 0x78,
	0x6c, 0xf8, 0xfd, 0xc4, 0xa0, 0xb6, 0x22, 0x28, 0xea, 0xe5, 0xca, 0xa4, 0x83, 0x3a, 0x51, 0x35,
	0x99, 0xa8, 0x28, 0x4e, 0xb4, 0x5c, 0x47, 0x3a, 0x9e, 0xac, 0xe1, 0x23, 0x70, 0xc5, 0x41, 0x01,
	0x33, 0x65, 0x53, 0xf5, 0xb1, 0x85, 0x49, 0x2f, 0x3a, 0x2b, 0x3b, 0xe1, 0x59, 0x8b, 0xdc, 0x40,
	0x94, 0x0e, 0x43, 0xca, 0x9b, 0x0c, 0xde, 0x05, 0xc5, 0x94, 0x61, 0xd1, 0xc7, 0x8a, 0xab, 0x6f,
	0xbd, 0x36, 0x99, 0x06, 0x18, 0x58, 0x4a, 0x1c, 0x0b, 0x3d, 0x31, 0x78, 0xd2, 0x8e, 0x4d, 0x5f,
	0xc4, 0xb1, 0x03, 0xa1, 0x4f, 0x39, 0xf6, 0x36, 0x28, 0x49, 0x9b, 0x62, 0xe8, 0xaa, 0x33, 0xa2,
	0x29, 0x14, 0x23, 0x6c, 0x83, 0x43, 0xf0, 0x0b, 0x70, 0x55, 0x9c, 0x9d, 0x8c, 0xbd, 0xf4, 0xe9,
	0x93, 0xfe, 0x56, 0x5a, 0xe2, 0x26, 0xe2, 0xd9, 0x98, 0x3a, 0xff, 0x5d, 0x50, 0x4e, 0xec, 0x46,
	0x1e, 0xe4, 0x85, 0x07, 0x73, 0x31, 0x2a, 0x7c, 0xb8, 0xb1, 0x03, 0xae, 0x8c, 0x69, 0xe5, 0x70,
	0x11, 0xcc, 0xef, 0xed, 0x34, 0x37, 0xb6, 0xee, 0x6f, 0x3d, 0xd8, 0x37, 0xb7, 0x1f, 0x6c, 0xee,
	0xee, 0x1a, 0xf3, 0x53, 0xf0, 0x32, 0x58, 0x18, 0xa0, 0xbb, 0x07, 0xfb, 0x02, 0x56, 0xaa, 0xb9,
	0xc7, 0x3f, 0x69, 0x53, 0xad, 0x2f, 0x7f, 0x7f, 0xa1, 0x4d, 0x3d, 0x7f, 0xa1, 0x29, 0xff, 0xbc,
	0xd0, 0x94, 0x6f, 0xfa, 0x9a, 0xf2, 0x73, 0x5f, 0x53, 0x9e, 0xf6, 0x35, 0xe5, 0x59, 0x5f, 0x53,
	0x9e, 0xf7, 0x35, 0xe5, 0xcf, 0xbe, 0x36, 0xf5, 0x57, 0x5f, 0x53, 0x9e, 0xbc, 0xd4, 0xa6, 0x7e,
	0x7d, 0xa9, 0x29, 0x9f, 0xdf, 0x9c, 0xe0, 0xdf, 0x83, 0x77, 0xdc, 0x59, 0x61, 0x8c, 0x7a, 0xed,
	0xf6, 0x8c, 0x08, 0xc3, 0xed, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xa8, 0x0e, 0xd5, 0x8c, 0xf4,
	0x0c, 0x00, 0x00,
}
