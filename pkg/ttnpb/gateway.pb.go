// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/gateway.proto

package ttnpb // import "go.thethings.network/lorawan-stack/pkg/ttnpb"

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import types "github.com/gogo/protobuf/types"
import _ "github.com/mwitkow/go-proto-validators"

import time "time"
import go_thethings_network_lorawan_stack_pkg_types "go.thethings.network/lorawan-stack/pkg/types"

import encoding_binary "encoding/binary"
import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GatewayBrand struct {
	ID   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	URL  string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	// Logos contains file names of brand logos.
	Logos                []string `protobuf:"bytes,4,rep,name=logos,proto3" json:"logos,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GatewayBrand) Reset()      { *m = GatewayBrand{} }
func (*GatewayBrand) ProtoMessage() {}
func (*GatewayBrand) Descriptor() ([]byte, []int) {
	return fileDescriptor_gateway_31a6f1d9453c83a3, []int{0}
}
func (m *GatewayBrand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayBrand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayBrand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GatewayBrand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayBrand.Merge(dst, src)
}
func (m *GatewayBrand) XXX_Size() int {
	return m.Size()
}
func (m *GatewayBrand) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayBrand.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayBrand proto.InternalMessageInfo

func (m *GatewayBrand) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *GatewayBrand) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GatewayBrand) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *GatewayBrand) GetLogos() []string {
	if m != nil {
		return m.Logos
	}
	return nil
}

type GatewayModel struct {
	BrandID              string   `protobuf:"bytes,1,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`
	ID                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GatewayModel) Reset()      { *m = GatewayModel{} }
func (*GatewayModel) ProtoMessage() {}
func (*GatewayModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_gateway_31a6f1d9453c83a3, []int{1}
}
func (m *GatewayModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GatewayModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayModel.Merge(dst, src)
}
func (m *GatewayModel) XXX_Size() int {
	return m.Size()
}
func (m *GatewayModel) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayModel.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayModel proto.InternalMessageInfo

func (m *GatewayModel) GetBrandID() string {
	if m != nil {
		return m.BrandID
	}
	return ""
}

func (m *GatewayModel) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *GatewayModel) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Identifies an end device model with version information.
type GatewayVersionIdentifiers struct {
	BrandID              string   `protobuf:"bytes,1,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`
	ModelID              string   `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	HardwareVersion      string   `protobuf:"bytes,3,opt,name=hardware_version,json=hardwareVersion,proto3" json:"hardware_version,omitempty"`
	FirmwareVersion      string   `protobuf:"bytes,4,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GatewayVersionIdentifiers) Reset()      { *m = GatewayVersionIdentifiers{} }
func (*GatewayVersionIdentifiers) ProtoMessage() {}
func (*GatewayVersionIdentifiers) Descriptor() ([]byte, []int) {
	return fileDescriptor_gateway_31a6f1d9453c83a3, []int{2}
}
func (m *GatewayVersionIdentifiers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayVersionIdentifiers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayVersionIdentifiers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GatewayVersionIdentifiers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayVersionIdentifiers.Merge(dst, src)
}
func (m *GatewayVersionIdentifiers) XXX_Size() int {
	return m.Size()
}
func (m *GatewayVersionIdentifiers) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayVersionIdentifiers.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayVersionIdentifiers proto.InternalMessageInfo

func (m *GatewayVersionIdentifiers) GetBrandID() string {
	if m != nil {
		return m.BrandID
	}
	return ""
}

func (m *GatewayVersionIdentifiers) GetModelID() string {
	if m != nil {
		return m.ModelID
	}
	return ""
}

func (m *GatewayVersionIdentifiers) GetHardwareVersion() string {
	if m != nil {
		return m.HardwareVersion
	}
	return ""
}

func (m *GatewayVersionIdentifiers) GetFirmwareVersion() string {
	if m != nil {
		return m.FirmwareVersion
	}
	return ""
}

type GatewayRadio struct {
	Enable               bool                          `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	ChipType             string                        `protobuf:"bytes,2,opt,name=chip_type,json=chipType,proto3" json:"chip_type,omitempty"`
	Frequency            uint64                        `protobuf:"varint,3,opt,name=frequency,proto3" json:"frequency,omitempty"`
	RSSIOffset           float32                       `protobuf:"fixed32,4,opt,name=rssi_offset,json=rssiOffset,proto3" json:"rssi_offset,omitempty"`
	TxConfiguration      *GatewayRadio_TxConfiguration `protobuf:"bytes,5,opt,name=tx_configuration,json=txConfiguration,proto3" json:"tx_configuration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *GatewayRadio) Reset()      { *m = GatewayRadio{} }
func (*GatewayRadio) ProtoMessage() {}
func (*GatewayRadio) Descriptor() ([]byte, []int) {
	return fileDescriptor_gateway_31a6f1d9453c83a3, []int{3}
}
func (m *GatewayRadio) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayRadio) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayRadio.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GatewayRadio) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayRadio.Merge(dst, src)
}
func (m *GatewayRadio) XXX_Size() int {
	return m.Size()
}
func (m *GatewayRadio) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayRadio.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayRadio proto.InternalMessageInfo

func (m *GatewayRadio) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *GatewayRadio) GetChipType() string {
	if m != nil {
		return m.ChipType
	}
	return ""
}

func (m *GatewayRadio) GetFrequency() uint64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *GatewayRadio) GetRSSIOffset() float32 {
	if m != nil {
		return m.RSSIOffset
	}
	return 0
}

func (m *GatewayRadio) GetTxConfiguration() *GatewayRadio_TxConfiguration {
	if m != nil {
		return m.TxConfiguration
	}
	return nil
}

type GatewayRadio_TxConfiguration struct {
	MinFrequency         uint64   `protobuf:"varint,1,opt,name=min_frequency,json=minFrequency,proto3" json:"min_frequency,omitempty"`
	MaxFrequency         uint64   `protobuf:"varint,2,opt,name=max_frequency,json=maxFrequency,proto3" json:"max_frequency,omitempty"`
	NotchFrequency       uint64   `protobuf:"varint,3,opt,name=notch_frequency,json=notchFrequency,proto3" json:"notch_frequency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GatewayRadio_TxConfiguration) Reset()      { *m = GatewayRadio_TxConfiguration{} }
func (*GatewayRadio_TxConfiguration) ProtoMessage() {}
func (*GatewayRadio_TxConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_gateway_31a6f1d9453c83a3, []int{3, 0}
}
func (m *GatewayRadio_TxConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayRadio_TxConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayRadio_TxConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GatewayRadio_TxConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayRadio_TxConfiguration.Merge(dst, src)
}
func (m *GatewayRadio_TxConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *GatewayRadio_TxConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayRadio_TxConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayRadio_TxConfiguration proto.InternalMessageInfo

func (m *GatewayRadio_TxConfiguration) GetMinFrequency() uint64 {
	if m != nil {
		return m.MinFrequency
	}
	return 0
}

func (m *GatewayRadio_TxConfiguration) GetMaxFrequency() uint64 {
	if m != nil {
		return m.MaxFrequency
	}
	return 0
}

func (m *GatewayRadio_TxConfiguration) GetNotchFrequency() uint64 {
	if m != nil {
		return m.NotchFrequency
	}
	return 0
}

// Template for creating gateways.
type GatewayVersion struct {
	// Version identifiers.
	GatewayVersionIdentifiers `protobuf:"bytes,1,opt,name=ids,proto3,embedded=ids" json:"ids"`
	// Photos contains file names of gateway photos.
	Photos               []string        `protobuf:"bytes,2,rep,name=photos,proto3" json:"photos,omitempty"`
	Radios               []*GatewayRadio `protobuf:"bytes,3,rep,name=radios,proto3" json:"radios,omitempty"`
	ClockSource          uint32          `protobuf:"varint,7,opt,name=clock_source,json=clockSource,proto3" json:"clock_source,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GatewayVersion) Reset()      { *m = GatewayVersion{} }
func (*GatewayVersion) ProtoMessage() {}
func (*GatewayVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_gateway_31a6f1d9453c83a3, []int{4}
}
func (m *GatewayVersion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayVersion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GatewayVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayVersion.Merge(dst, src)
}
func (m *GatewayVersion) XXX_Size() int {
	return m.Size()
}
func (m *GatewayVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayVersion.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayVersion proto.InternalMessageInfo

func (m *GatewayVersion) GetPhotos() []string {
	if m != nil {
		return m.Photos
	}
	return nil
}

func (m *GatewayVersion) GetRadios() []*GatewayRadio {
	if m != nil {
		return m.Radios
	}
	return nil
}

func (m *GatewayVersion) GetClockSource() uint32 {
	if m != nil {
		return m.ClockSource
	}
	return 0
}

// Gateway is the message that defines a gateway on the network.
type Gateway struct {
	GatewayIdentifiers        `protobuf:"bytes,1,opt,name=ids,proto3,embedded=ids" json:"ids"`
	CreatedAt                 time.Time         `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
	UpdatedAt                 time.Time         `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at"`
	Name                      string            `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description               string            `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Attributes                map[string]string `protobuf:"bytes,6,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ContactInfo               []*ContactInfo    `protobuf:"bytes,7,rep,name=contact_info,json=contactInfo,proto3" json:"contact_info,omitempty"`
	GatewayVersionIdentifiers `protobuf:"bytes,8,opt,name=version_ids,json=versionIds,proto3,embedded=version_ids" json:"version_ids"`
	// The address of the Gateway Server to connect to.
	// The typical format of the address is "host:port". If the port is omitted,
	// the normal port inference (with DNS lookup, otherwise defaults) is used.
	// The connection shall be established with transport layer security (TLS).
	// Custom certificate authorities may be configured out-of-band.
	GatewayServerAddress string           `protobuf:"bytes,9,opt,name=gateway_server_address,json=gatewayServerAddress,proto3" json:"gateway_server_address,omitempty"`
	AutoUpdate           bool             `protobuf:"varint,10,opt,name=auto_update,json=autoUpdate,proto3" json:"auto_update,omitempty"`
	UpdateChannel        string           `protobuf:"bytes,11,opt,name=update_channel,json=updateChannel,proto3" json:"update_channel,omitempty"`
	FrequencyPlanID      string           `protobuf:"bytes,12,opt,name=frequency_plan_id,json=frequencyPlanId,proto3" json:"frequency_plan_id,omitempty"`
	Antennas             []GatewayAntenna `protobuf:"bytes,13,rep,name=antennas,proto3" json:"antennas"`
	// The status of this gateway may be publicly displayed.
	StatusPublic bool `protobuf:"varint,14,opt,name=status_public,json=statusPublic,proto3" json:"status_public,omitempty"`
	// The location of this gateway may be publicly displayed.
	LocationPublic bool `protobuf:"varint,15,opt,name=location_public,json=locationPublic,proto3" json:"location_public,omitempty"`
	// Enable server-side buffering of downlink messages. This is recommended for gateways using the Semtech UDP Packet
	// Forwarder v2.x or older, as it does not feature a just-in-time queue. If enabled, the Gateway Server schedules the
	// downlink message late to the gateway so that it does not overwrite previously scheduled downlink messages that have
	// not been transmitted yet.
	ScheduleDownlinkLate bool `protobuf:"varint,16,opt,name=schedule_downlink_late,json=scheduleDownlinkLate,proto3" json:"schedule_downlink_late,omitempty"`
	// Enforcing gateway duty cycle is recommended for all gateways to respect spectrum regulations. Disable enforcing the
	// duty cycle only in controlled research and development environments.
	EnforceDutyCycle       bool                   `protobuf:"varint,17,opt,name=enforce_duty_cycle,json=enforceDutyCycle,proto3" json:"enforce_duty_cycle,omitempty"`
	DownlinkPathConstraint DownlinkPathConstraint `protobuf:"varint,18,opt,name=downlink_path_constraint,json=downlinkPathConstraint,proto3,enum=ttn.lorawan.v3.DownlinkPathConstraint" json:"downlink_path_constraint,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}               `json:"-"`
	XXX_sizecache          int32                  `json:"-"`
}

func (m *Gateway) Reset()      { *m = Gateway{} }
func (*Gateway) ProtoMessage() {}
func (*Gateway) Descriptor() ([]byte, []int) {
	return fileDescriptor_gateway_31a6f1d9453c83a3, []int{5}
}
func (m *Gateway) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Gateway) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Gateway.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Gateway) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gateway.Merge(dst, src)
}
func (m *Gateway) XXX_Size() int {
	return m.Size()
}
func (m *Gateway) XXX_DiscardUnknown() {
	xxx_messageInfo_Gateway.DiscardUnknown(m)
}

var xxx_messageInfo_Gateway proto.InternalMessageInfo

func (m *Gateway) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *Gateway) GetUpdatedAt() time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return time.Time{}
}

func (m *Gateway) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Gateway) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Gateway) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Gateway) GetContactInfo() []*ContactInfo {
	if m != nil {
		return m.ContactInfo
	}
	return nil
}

func (m *Gateway) GetGatewayServerAddress() string {
	if m != nil {
		return m.GatewayServerAddress
	}
	return ""
}

func (m *Gateway) GetAutoUpdate() bool {
	if m != nil {
		return m.AutoUpdate
	}
	return false
}

func (m *Gateway) GetUpdateChannel() string {
	if m != nil {
		return m.UpdateChannel
	}
	return ""
}

func (m *Gateway) GetFrequencyPlanID() string {
	if m != nil {
		return m.FrequencyPlanID
	}
	return ""
}

func (m *Gateway) GetAntennas() []GatewayAntenna {
	if m != nil {
		return m.Antennas
	}
	return nil
}

func (m *Gateway) GetStatusPublic() bool {
	if m != nil {
		return m.StatusPublic
	}
	return false
}

func (m *Gateway) GetLocationPublic() bool {
	if m != nil {
		return m.LocationPublic
	}
	return false
}

func (m *Gateway) GetScheduleDownlinkLate() bool {
	if m != nil {
		return m.ScheduleDownlinkLate
	}
	return false
}

func (m *Gateway) GetEnforceDutyCycle() bool {
	if m != nil {
		return m.EnforceDutyCycle
	}
	return false
}

func (m *Gateway) GetDownlinkPathConstraint() DownlinkPathConstraint {
	if m != nil {
		return m.DownlinkPathConstraint
	}
	return DOWNLINK_PATH_CONSTRAINT_NONE
}

type Gateways struct {
	Gateways             []*Gateway `protobuf:"bytes,1,rep,name=gateways,proto3" json:"gateways,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Gateways) Reset()      { *m = Gateways{} }
func (*Gateways) ProtoMessage() {}
func (*Gateways) Descriptor() ([]byte, []int) {
	return fileDescriptor_gateway_31a6f1d9453c83a3, []int{6}
}
func (m *Gateways) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Gateways) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Gateways.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Gateways) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gateways.Merge(dst, src)
}
func (m *Gateways) XXX_Size() int {
	return m.Size()
}
func (m *Gateways) XXX_DiscardUnknown() {
	xxx_messageInfo_Gateways.DiscardUnknown(m)
}

var xxx_messageInfo_Gateways proto.InternalMessageInfo

func (m *Gateways) GetGateways() []*Gateway {
	if m != nil {
		return m.Gateways
	}
	return nil
}

type GetGatewayRequest struct {
	GatewayIdentifiers   `protobuf:"bytes,1,opt,name=gateway_ids,json=gatewayIds,proto3,embedded=gateway_ids" json:"gateway_ids"`
	FieldMask            types.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetGatewayRequest) Reset()      { *m = GetGatewayRequest{} }
func (*GetGatewayRequest) ProtoMessage() {}
func (*GetGatewayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_gateway_31a6f1d9453c83a3, []int{7}
}
func (m *GetGatewayRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetGatewayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetGatewayRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetGatewayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGatewayRequest.Merge(dst, src)
}
func (m *GetGatewayRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetGatewayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGatewayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetGatewayRequest proto.InternalMessageInfo

func (m *GetGatewayRequest) GetFieldMask() types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return types.FieldMask{}
}

type GetGatewayIdentifiersForEUIRequest struct {
	EUI                  go_thethings_network_lorawan_stack_pkg_types.EUI64 `protobuf:"bytes,1,opt,name=eui,proto3,customtype=go.thethings.network/lorawan-stack/pkg/types.EUI64" json:"eui"`
	XXX_NoUnkeyedLiteral struct{}                                           `json:"-"`
	XXX_sizecache        int32                                              `json:"-"`
}

func (m *GetGatewayIdentifiersForEUIRequest) Reset()      { *m = GetGatewayIdentifiersForEUIRequest{} }
func (*GetGatewayIdentifiersForEUIRequest) ProtoMessage() {}
func (*GetGatewayIdentifiersForEUIRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_gateway_31a6f1d9453c83a3, []int{8}
}
func (m *GetGatewayIdentifiersForEUIRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetGatewayIdentifiersForEUIRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetGatewayIdentifiersForEUIRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetGatewayIdentifiersForEUIRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGatewayIdentifiersForEUIRequest.Merge(dst, src)
}
func (m *GetGatewayIdentifiersForEUIRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetGatewayIdentifiersForEUIRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGatewayIdentifiersForEUIRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetGatewayIdentifiersForEUIRequest proto.InternalMessageInfo

type ListGatewaysRequest struct {
	Collaborator *OrganizationOrUserIdentifiers `protobuf:"bytes,1,opt,name=collaborator,proto3" json:"collaborator,omitempty"`
	FieldMask    types.FieldMask                `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask"`
	// Order the results by this field path (must be present in the field mask).
	// Default ordering is by ID. Prepend with a minus (-) to reverse the order.
	Order string `protobuf:"bytes,3,opt,name=order,proto3" json:"order,omitempty"`
	// Limit the number of results per page.
	Limit uint32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	// Page number for pagination. 0 is interpreted as 1.
	Page                 uint32   `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListGatewaysRequest) Reset()      { *m = ListGatewaysRequest{} }
func (*ListGatewaysRequest) ProtoMessage() {}
func (*ListGatewaysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_gateway_31a6f1d9453c83a3, []int{9}
}
func (m *ListGatewaysRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListGatewaysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListGatewaysRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListGatewaysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListGatewaysRequest.Merge(dst, src)
}
func (m *ListGatewaysRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListGatewaysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListGatewaysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListGatewaysRequest proto.InternalMessageInfo

func (m *ListGatewaysRequest) GetCollaborator() *OrganizationOrUserIdentifiers {
	if m != nil {
		return m.Collaborator
	}
	return nil
}

func (m *ListGatewaysRequest) GetFieldMask() types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return types.FieldMask{}
}

func (m *ListGatewaysRequest) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *ListGatewaysRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListGatewaysRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type CreateGatewayRequest struct {
	Gateway `protobuf:"bytes,1,opt,name=gateway,proto3,embedded=gateway" json:"gateway"`
	// Collaborator to grant all rights on the newly created gateway.
	Collaborator         OrganizationOrUserIdentifiers `protobuf:"bytes,2,opt,name=collaborator,proto3" json:"collaborator"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *CreateGatewayRequest) Reset()      { *m = CreateGatewayRequest{} }
func (*CreateGatewayRequest) ProtoMessage() {}
func (*CreateGatewayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_gateway_31a6f1d9453c83a3, []int{10}
}
func (m *CreateGatewayRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateGatewayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateGatewayRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateGatewayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateGatewayRequest.Merge(dst, src)
}
func (m *CreateGatewayRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateGatewayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateGatewayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateGatewayRequest proto.InternalMessageInfo

func (m *CreateGatewayRequest) GetCollaborator() OrganizationOrUserIdentifiers {
	if m != nil {
		return m.Collaborator
	}
	return OrganizationOrUserIdentifiers{}
}

type UpdateGatewayRequest struct {
	Gateway              `protobuf:"bytes,1,opt,name=gateway,proto3,embedded=gateway" json:"gateway"`
	FieldMask            types.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *UpdateGatewayRequest) Reset()      { *m = UpdateGatewayRequest{} }
func (*UpdateGatewayRequest) ProtoMessage() {}
func (*UpdateGatewayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_gateway_31a6f1d9453c83a3, []int{11}
}
func (m *UpdateGatewayRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateGatewayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateGatewayRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateGatewayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateGatewayRequest.Merge(dst, src)
}
func (m *UpdateGatewayRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateGatewayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateGatewayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateGatewayRequest proto.InternalMessageInfo

func (m *UpdateGatewayRequest) GetFieldMask() types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return types.FieldMask{}
}

type CreateGatewayAPIKeyRequest struct {
	GatewayIdentifiers   `protobuf:"bytes,1,opt,name=gateway_ids,json=gatewayIds,proto3,embedded=gateway_ids" json:"gateway_ids"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Rights               []Right  `protobuf:"varint,3,rep,packed,name=rights,proto3,enum=ttn.lorawan.v3.Right" json:"rights,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateGatewayAPIKeyRequest) Reset()      { *m = CreateGatewayAPIKeyRequest{} }
func (*CreateGatewayAPIKeyRequest) ProtoMessage() {}
func (*CreateGatewayAPIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_gateway_31a6f1d9453c83a3, []int{12}
}
func (m *CreateGatewayAPIKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateGatewayAPIKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateGatewayAPIKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateGatewayAPIKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateGatewayAPIKeyRequest.Merge(dst, src)
}
func (m *CreateGatewayAPIKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateGatewayAPIKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateGatewayAPIKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateGatewayAPIKeyRequest proto.InternalMessageInfo

func (m *CreateGatewayAPIKeyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateGatewayAPIKeyRequest) GetRights() []Right {
	if m != nil {
		return m.Rights
	}
	return nil
}

type UpdateGatewayAPIKeyRequest struct {
	GatewayIdentifiers   `protobuf:"bytes,1,opt,name=gateway_ids,json=gatewayIds,proto3,embedded=gateway_ids" json:"gateway_ids"`
	APIKey               `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3,embedded=api_key" json:"api_key"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateGatewayAPIKeyRequest) Reset()      { *m = UpdateGatewayAPIKeyRequest{} }
func (*UpdateGatewayAPIKeyRequest) ProtoMessage() {}
func (*UpdateGatewayAPIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_gateway_31a6f1d9453c83a3, []int{13}
}
func (m *UpdateGatewayAPIKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateGatewayAPIKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateGatewayAPIKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateGatewayAPIKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateGatewayAPIKeyRequest.Merge(dst, src)
}
func (m *UpdateGatewayAPIKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateGatewayAPIKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateGatewayAPIKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateGatewayAPIKeyRequest proto.InternalMessageInfo

type SetGatewayCollaboratorRequest struct {
	GatewayIdentifiers   `protobuf:"bytes,1,opt,name=gateway_ids,json=gatewayIds,proto3,embedded=gateway_ids" json:"gateway_ids"`
	Collaborator         Collaborator `protobuf:"bytes,2,opt,name=collaborator,proto3" json:"collaborator"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SetGatewayCollaboratorRequest) Reset()      { *m = SetGatewayCollaboratorRequest{} }
func (*SetGatewayCollaboratorRequest) ProtoMessage() {}
func (*SetGatewayCollaboratorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_gateway_31a6f1d9453c83a3, []int{14}
}
func (m *SetGatewayCollaboratorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetGatewayCollaboratorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetGatewayCollaboratorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SetGatewayCollaboratorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetGatewayCollaboratorRequest.Merge(dst, src)
}
func (m *SetGatewayCollaboratorRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetGatewayCollaboratorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetGatewayCollaboratorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetGatewayCollaboratorRequest proto.InternalMessageInfo

func (m *SetGatewayCollaboratorRequest) GetCollaborator() Collaborator {
	if m != nil {
		return m.Collaborator
	}
	return Collaborator{}
}

// GatewayAntenna is the message that defines a gateway antenna.
type GatewayAntenna struct {
	// gain is the antenna gain relative to this gateway, in dBi.
	Gain float32 `protobuf:"fixed32,1,opt,name=gain,proto3" json:"gain,omitempty"`
	// location is the antenna's location.
	Location             Location          `protobuf:"bytes,2,opt,name=location,proto3" json:"location"`
	Attributes           map[string]string `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GatewayAntenna) Reset()      { *m = GatewayAntenna{} }
func (*GatewayAntenna) ProtoMessage() {}
func (*GatewayAntenna) Descriptor() ([]byte, []int) {
	return fileDescriptor_gateway_31a6f1d9453c83a3, []int{15}
}
func (m *GatewayAntenna) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayAntenna) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayAntenna.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GatewayAntenna) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayAntenna.Merge(dst, src)
}
func (m *GatewayAntenna) XXX_Size() int {
	return m.Size()
}
func (m *GatewayAntenna) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayAntenna.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayAntenna proto.InternalMessageInfo

func (m *GatewayAntenna) GetGain() float32 {
	if m != nil {
		return m.Gain
	}
	return 0
}

func (m *GatewayAntenna) GetLocation() Location {
	if m != nil {
		return m.Location
	}
	return Location{}
}

func (m *GatewayAntenna) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type GatewayStatus struct {
	// Current time of the gateway
	Time time.Time `protobuf:"bytes,1,opt,name=time,proto3,stdtime" json:"time"`
	// Boot time of the gateway
	// - can be left out to save bandwidth; old value will be kept
	BootTime time.Time `protobuf:"bytes,2,opt,name=boot_time,json=bootTime,proto3,stdtime" json:"boot_time"`
	// Versions of gateway subsystems
	// - each field can be left out to save bandwidth; old value will be kept
	// - map keys are written in snake_case
	// - for example:
	//     firmware: "2.0.4"
	//     forwarder: "v2-3.3.1"
	//     fpga: "48"
	//     dsp: "27"
	//     hal: "v2-3.5.0"
	Versions map[string]string `protobuf:"bytes,3,rep,name=versions,proto3" json:"versions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Location of each gateway's antenna
	// - if left out, server uses registry-set location as fallback
	AntennaLocations []*Location `protobuf:"bytes,4,rep,name=antenna_locations,json=antennaLocations,proto3" json:"antenna_locations,omitempty"`
	// IP addresses of this gateway.
	// Repeated addresses can be used to communicate addresses of multiple interfaces (LAN, Public IP, ...).
	IP []string `protobuf:"bytes,5,rep,name=ip,proto3" json:"ip,omitempty"`
	// Metrics
	// - can be used for forwarding gateway metrics such as temperatures or performance metrics
	// - map keys are written in snake_case
	Metrics map[string]float32 `protobuf:"bytes,6,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	// Advanced metadata fields
	// - can be used for advanced information or experimental features that are not yet formally defined in the API
	// - field names are written in snake_case
	Advanced             *types.Struct `protobuf:"bytes,99,opt,name=advanced,proto3" json:"advanced,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GatewayStatus) Reset()      { *m = GatewayStatus{} }
func (*GatewayStatus) ProtoMessage() {}
func (*GatewayStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_gateway_31a6f1d9453c83a3, []int{16}
}
func (m *GatewayStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GatewayStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayStatus.Merge(dst, src)
}
func (m *GatewayStatus) XXX_Size() int {
	return m.Size()
}
func (m *GatewayStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayStatus.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayStatus proto.InternalMessageInfo

func (m *GatewayStatus) GetTime() time.Time {
	if m != nil {
		return m.Time
	}
	return time.Time{}
}

func (m *GatewayStatus) GetBootTime() time.Time {
	if m != nil {
		return m.BootTime
	}
	return time.Time{}
}

func (m *GatewayStatus) GetVersions() map[string]string {
	if m != nil {
		return m.Versions
	}
	return nil
}

func (m *GatewayStatus) GetAntennaLocations() []*Location {
	if m != nil {
		return m.AntennaLocations
	}
	return nil
}

func (m *GatewayStatus) GetIP() []string {
	if m != nil {
		return m.IP
	}
	return nil
}

func (m *GatewayStatus) GetMetrics() map[string]float32 {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *GatewayStatus) GetAdvanced() *types.Struct {
	if m != nil {
		return m.Advanced
	}
	return nil
}

// Connection stats as monitored by the Gateway Server.
type GatewayConnectionStats struct {
	ConnectedAt            *time.Time     `protobuf:"bytes,1,opt,name=connected_at,json=connectedAt,proto3,stdtime" json:"connected_at,omitempty"`
	Protocol               string         `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	LastStatusReceivedAt   *time.Time     `protobuf:"bytes,3,opt,name=last_status_received_at,json=lastStatusReceivedAt,proto3,stdtime" json:"last_status_received_at,omitempty"`
	LastStatus             *GatewayStatus `protobuf:"bytes,4,opt,name=last_status,json=lastStatus,proto3" json:"last_status,omitempty"`
	LastUplinkReceivedAt   *time.Time     `protobuf:"bytes,5,opt,name=last_uplink_received_at,json=lastUplinkReceivedAt,proto3,stdtime" json:"last_uplink_received_at,omitempty"`
	UplinkCount            uint64         `protobuf:"varint,6,opt,name=uplink_count,json=uplinkCount,proto3" json:"uplink_count,omitempty"`
	LastDownlinkReceivedAt *time.Time     `protobuf:"bytes,7,opt,name=last_downlink_received_at,json=lastDownlinkReceivedAt,proto3,stdtime" json:"last_downlink_received_at,omitempty"`
	DownlinkCount          uint64         `protobuf:"varint,8,opt,name=downlink_count,json=downlinkCount,proto3" json:"downlink_count,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}       `json:"-"`
	XXX_sizecache          int32          `json:"-"`
}

func (m *GatewayConnectionStats) Reset()      { *m = GatewayConnectionStats{} }
func (*GatewayConnectionStats) ProtoMessage() {}
func (*GatewayConnectionStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_gateway_31a6f1d9453c83a3, []int{17}
}
func (m *GatewayConnectionStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayConnectionStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayConnectionStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GatewayConnectionStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayConnectionStats.Merge(dst, src)
}
func (m *GatewayConnectionStats) XXX_Size() int {
	return m.Size()
}
func (m *GatewayConnectionStats) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayConnectionStats.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayConnectionStats proto.InternalMessageInfo

func (m *GatewayConnectionStats) GetConnectedAt() *time.Time {
	if m != nil {
		return m.ConnectedAt
	}
	return nil
}

func (m *GatewayConnectionStats) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *GatewayConnectionStats) GetLastStatusReceivedAt() *time.Time {
	if m != nil {
		return m.LastStatusReceivedAt
	}
	return nil
}

func (m *GatewayConnectionStats) GetLastStatus() *GatewayStatus {
	if m != nil {
		return m.LastStatus
	}
	return nil
}

func (m *GatewayConnectionStats) GetLastUplinkReceivedAt() *time.Time {
	if m != nil {
		return m.LastUplinkReceivedAt
	}
	return nil
}

func (m *GatewayConnectionStats) GetUplinkCount() uint64 {
	if m != nil {
		return m.UplinkCount
	}
	return 0
}

func (m *GatewayConnectionStats) GetLastDownlinkReceivedAt() *time.Time {
	if m != nil {
		return m.LastDownlinkReceivedAt
	}
	return nil
}

func (m *GatewayConnectionStats) GetDownlinkCount() uint64 {
	if m != nil {
		return m.DownlinkCount
	}
	return 0
}

func init() {
	proto.RegisterType((*GatewayBrand)(nil), "ttn.lorawan.v3.GatewayBrand")
	golang_proto.RegisterType((*GatewayBrand)(nil), "ttn.lorawan.v3.GatewayBrand")
	proto.RegisterType((*GatewayModel)(nil), "ttn.lorawan.v3.GatewayModel")
	golang_proto.RegisterType((*GatewayModel)(nil), "ttn.lorawan.v3.GatewayModel")
	proto.RegisterType((*GatewayVersionIdentifiers)(nil), "ttn.lorawan.v3.GatewayVersionIdentifiers")
	golang_proto.RegisterType((*GatewayVersionIdentifiers)(nil), "ttn.lorawan.v3.GatewayVersionIdentifiers")
	proto.RegisterType((*GatewayRadio)(nil), "ttn.lorawan.v3.GatewayRadio")
	golang_proto.RegisterType((*GatewayRadio)(nil), "ttn.lorawan.v3.GatewayRadio")
	proto.RegisterType((*GatewayRadio_TxConfiguration)(nil), "ttn.lorawan.v3.GatewayRadio.TxConfiguration")
	golang_proto.RegisterType((*GatewayRadio_TxConfiguration)(nil), "ttn.lorawan.v3.GatewayRadio.TxConfiguration")
	proto.RegisterType((*GatewayVersion)(nil), "ttn.lorawan.v3.GatewayVersion")
	golang_proto.RegisterType((*GatewayVersion)(nil), "ttn.lorawan.v3.GatewayVersion")
	proto.RegisterType((*Gateway)(nil), "ttn.lorawan.v3.Gateway")
	golang_proto.RegisterType((*Gateway)(nil), "ttn.lorawan.v3.Gateway")
	proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.Gateway.AttributesEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.Gateway.AttributesEntry")
	proto.RegisterType((*Gateways)(nil), "ttn.lorawan.v3.Gateways")
	golang_proto.RegisterType((*Gateways)(nil), "ttn.lorawan.v3.Gateways")
	proto.RegisterType((*GetGatewayRequest)(nil), "ttn.lorawan.v3.GetGatewayRequest")
	golang_proto.RegisterType((*GetGatewayRequest)(nil), "ttn.lorawan.v3.GetGatewayRequest")
	proto.RegisterType((*GetGatewayIdentifiersForEUIRequest)(nil), "ttn.lorawan.v3.GetGatewayIdentifiersForEUIRequest")
	golang_proto.RegisterType((*GetGatewayIdentifiersForEUIRequest)(nil), "ttn.lorawan.v3.GetGatewayIdentifiersForEUIRequest")
	proto.RegisterType((*ListGatewaysRequest)(nil), "ttn.lorawan.v3.ListGatewaysRequest")
	golang_proto.RegisterType((*ListGatewaysRequest)(nil), "ttn.lorawan.v3.ListGatewaysRequest")
	proto.RegisterType((*CreateGatewayRequest)(nil), "ttn.lorawan.v3.CreateGatewayRequest")
	golang_proto.RegisterType((*CreateGatewayRequest)(nil), "ttn.lorawan.v3.CreateGatewayRequest")
	proto.RegisterType((*UpdateGatewayRequest)(nil), "ttn.lorawan.v3.UpdateGatewayRequest")
	golang_proto.RegisterType((*UpdateGatewayRequest)(nil), "ttn.lorawan.v3.UpdateGatewayRequest")
	proto.RegisterType((*CreateGatewayAPIKeyRequest)(nil), "ttn.lorawan.v3.CreateGatewayAPIKeyRequest")
	golang_proto.RegisterType((*CreateGatewayAPIKeyRequest)(nil), "ttn.lorawan.v3.CreateGatewayAPIKeyRequest")
	proto.RegisterType((*UpdateGatewayAPIKeyRequest)(nil), "ttn.lorawan.v3.UpdateGatewayAPIKeyRequest")
	golang_proto.RegisterType((*UpdateGatewayAPIKeyRequest)(nil), "ttn.lorawan.v3.UpdateGatewayAPIKeyRequest")
	proto.RegisterType((*SetGatewayCollaboratorRequest)(nil), "ttn.lorawan.v3.SetGatewayCollaboratorRequest")
	golang_proto.RegisterType((*SetGatewayCollaboratorRequest)(nil), "ttn.lorawan.v3.SetGatewayCollaboratorRequest")
	proto.RegisterType((*GatewayAntenna)(nil), "ttn.lorawan.v3.GatewayAntenna")
	golang_proto.RegisterType((*GatewayAntenna)(nil), "ttn.lorawan.v3.GatewayAntenna")
	proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.GatewayAntenna.AttributesEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.GatewayAntenna.AttributesEntry")
	proto.RegisterType((*GatewayStatus)(nil), "ttn.lorawan.v3.GatewayStatus")
	golang_proto.RegisterType((*GatewayStatus)(nil), "ttn.lorawan.v3.GatewayStatus")
	proto.RegisterMapType((map[string]float32)(nil), "ttn.lorawan.v3.GatewayStatus.MetricsEntry")
	golang_proto.RegisterMapType((map[string]float32)(nil), "ttn.lorawan.v3.GatewayStatus.MetricsEntry")
	proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.GatewayStatus.VersionsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.GatewayStatus.VersionsEntry")
	proto.RegisterType((*GatewayConnectionStats)(nil), "ttn.lorawan.v3.GatewayConnectionStats")
	golang_proto.RegisterType((*GatewayConnectionStats)(nil), "ttn.lorawan.v3.GatewayConnectionStats")
}
func (this *GatewayBrand) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayBrand)
	if !ok {
		that2, ok := that.(GatewayBrand)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.URL != that1.URL {
		return false
	}
	if len(this.Logos) != len(that1.Logos) {
		return false
	}
	for i := range this.Logos {
		if this.Logos[i] != that1.Logos[i] {
			return false
		}
	}
	return true
}
func (this *GatewayModel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayModel)
	if !ok {
		that2, ok := that.(GatewayModel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BrandID != that1.BrandID {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *GatewayVersionIdentifiers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayVersionIdentifiers)
	if !ok {
		that2, ok := that.(GatewayVersionIdentifiers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BrandID != that1.BrandID {
		return false
	}
	if this.ModelID != that1.ModelID {
		return false
	}
	if this.HardwareVersion != that1.HardwareVersion {
		return false
	}
	if this.FirmwareVersion != that1.FirmwareVersion {
		return false
	}
	return true
}
func (this *GatewayRadio) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayRadio)
	if !ok {
		that2, ok := that.(GatewayRadio)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Enable != that1.Enable {
		return false
	}
	if this.ChipType != that1.ChipType {
		return false
	}
	if this.Frequency != that1.Frequency {
		return false
	}
	if this.RSSIOffset != that1.RSSIOffset {
		return false
	}
	if !this.TxConfiguration.Equal(that1.TxConfiguration) {
		return false
	}
	return true
}
func (this *GatewayRadio_TxConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayRadio_TxConfiguration)
	if !ok {
		that2, ok := that.(GatewayRadio_TxConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MinFrequency != that1.MinFrequency {
		return false
	}
	if this.MaxFrequency != that1.MaxFrequency {
		return false
	}
	if this.NotchFrequency != that1.NotchFrequency {
		return false
	}
	return true
}
func (this *GatewayVersion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayVersion)
	if !ok {
		that2, ok := that.(GatewayVersion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GatewayVersionIdentifiers.Equal(&that1.GatewayVersionIdentifiers) {
		return false
	}
	if len(this.Photos) != len(that1.Photos) {
		return false
	}
	for i := range this.Photos {
		if this.Photos[i] != that1.Photos[i] {
			return false
		}
	}
	if len(this.Radios) != len(that1.Radios) {
		return false
	}
	for i := range this.Radios {
		if !this.Radios[i].Equal(that1.Radios[i]) {
			return false
		}
	}
	if this.ClockSource != that1.ClockSource {
		return false
	}
	return true
}
func (this *Gateway) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Gateway)
	if !ok {
		that2, ok := that.(Gateway)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GatewayIdentifiers.Equal(&that1.GatewayIdentifiers) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return false
	}
	for i := range this.Attributes {
		if this.Attributes[i] != that1.Attributes[i] {
			return false
		}
	}
	if len(this.ContactInfo) != len(that1.ContactInfo) {
		return false
	}
	for i := range this.ContactInfo {
		if !this.ContactInfo[i].Equal(that1.ContactInfo[i]) {
			return false
		}
	}
	if !this.GatewayVersionIdentifiers.Equal(&that1.GatewayVersionIdentifiers) {
		return false
	}
	if this.GatewayServerAddress != that1.GatewayServerAddress {
		return false
	}
	if this.AutoUpdate != that1.AutoUpdate {
		return false
	}
	if this.UpdateChannel != that1.UpdateChannel {
		return false
	}
	if this.FrequencyPlanID != that1.FrequencyPlanID {
		return false
	}
	if len(this.Antennas) != len(that1.Antennas) {
		return false
	}
	for i := range this.Antennas {
		if !this.Antennas[i].Equal(&that1.Antennas[i]) {
			return false
		}
	}
	if this.StatusPublic != that1.StatusPublic {
		return false
	}
	if this.LocationPublic != that1.LocationPublic {
		return false
	}
	if this.ScheduleDownlinkLate != that1.ScheduleDownlinkLate {
		return false
	}
	if this.EnforceDutyCycle != that1.EnforceDutyCycle {
		return false
	}
	if this.DownlinkPathConstraint != that1.DownlinkPathConstraint {
		return false
	}
	return true
}
func (this *Gateways) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Gateways)
	if !ok {
		that2, ok := that.(Gateways)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Gateways) != len(that1.Gateways) {
		return false
	}
	for i := range this.Gateways {
		if !this.Gateways[i].Equal(that1.Gateways[i]) {
			return false
		}
	}
	return true
}
func (this *GetGatewayRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetGatewayRequest)
	if !ok {
		that2, ok := that.(GetGatewayRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GatewayIdentifiers.Equal(&that1.GatewayIdentifiers) {
		return false
	}
	if !this.FieldMask.Equal(&that1.FieldMask) {
		return false
	}
	return true
}
func (this *GetGatewayIdentifiersForEUIRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetGatewayIdentifiersForEUIRequest)
	if !ok {
		that2, ok := that.(GetGatewayIdentifiersForEUIRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EUI.Equal(that1.EUI) {
		return false
	}
	return true
}
func (this *ListGatewaysRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListGatewaysRequest)
	if !ok {
		that2, ok := that.(ListGatewaysRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Collaborator.Equal(that1.Collaborator) {
		return false
	}
	if !this.FieldMask.Equal(&that1.FieldMask) {
		return false
	}
	if this.Order != that1.Order {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	return true
}
func (this *CreateGatewayRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateGatewayRequest)
	if !ok {
		that2, ok := that.(CreateGatewayRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Gateway.Equal(&that1.Gateway) {
		return false
	}
	if !this.Collaborator.Equal(&that1.Collaborator) {
		return false
	}
	return true
}
func (this *UpdateGatewayRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateGatewayRequest)
	if !ok {
		that2, ok := that.(UpdateGatewayRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Gateway.Equal(&that1.Gateway) {
		return false
	}
	if !this.FieldMask.Equal(&that1.FieldMask) {
		return false
	}
	return true
}
func (this *CreateGatewayAPIKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateGatewayAPIKeyRequest)
	if !ok {
		that2, ok := that.(CreateGatewayAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GatewayIdentifiers.Equal(&that1.GatewayIdentifiers) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Rights) != len(that1.Rights) {
		return false
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return false
		}
	}
	return true
}
func (this *UpdateGatewayAPIKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateGatewayAPIKeyRequest)
	if !ok {
		that2, ok := that.(UpdateGatewayAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GatewayIdentifiers.Equal(&that1.GatewayIdentifiers) {
		return false
	}
	if !this.APIKey.Equal(&that1.APIKey) {
		return false
	}
	return true
}
func (this *SetGatewayCollaboratorRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetGatewayCollaboratorRequest)
	if !ok {
		that2, ok := that.(SetGatewayCollaboratorRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GatewayIdentifiers.Equal(&that1.GatewayIdentifiers) {
		return false
	}
	if !this.Collaborator.Equal(&that1.Collaborator) {
		return false
	}
	return true
}
func (this *GatewayAntenna) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayAntenna)
	if !ok {
		that2, ok := that.(GatewayAntenna)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Gain != that1.Gain {
		return false
	}
	if !this.Location.Equal(&that1.Location) {
		return false
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return false
	}
	for i := range this.Attributes {
		if this.Attributes[i] != that1.Attributes[i] {
			return false
		}
	}
	return true
}
func (this *GatewayStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayStatus)
	if !ok {
		that2, ok := that.(GatewayStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Time.Equal(that1.Time) {
		return false
	}
	if !this.BootTime.Equal(that1.BootTime) {
		return false
	}
	if len(this.Versions) != len(that1.Versions) {
		return false
	}
	for i := range this.Versions {
		if this.Versions[i] != that1.Versions[i] {
			return false
		}
	}
	if len(this.AntennaLocations) != len(that1.AntennaLocations) {
		return false
	}
	for i := range this.AntennaLocations {
		if !this.AntennaLocations[i].Equal(that1.AntennaLocations[i]) {
			return false
		}
	}
	if len(this.IP) != len(that1.IP) {
		return false
	}
	for i := range this.IP {
		if this.IP[i] != that1.IP[i] {
			return false
		}
	}
	if len(this.Metrics) != len(that1.Metrics) {
		return false
	}
	for i := range this.Metrics {
		if this.Metrics[i] != that1.Metrics[i] {
			return false
		}
	}
	if !this.Advanced.Equal(that1.Advanced) {
		return false
	}
	return true
}
func (this *GatewayConnectionStats) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayConnectionStats)
	if !ok {
		that2, ok := that.(GatewayConnectionStats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ConnectedAt == nil {
		if this.ConnectedAt != nil {
			return false
		}
	} else if !this.ConnectedAt.Equal(*that1.ConnectedAt) {
		return false
	}
	if this.Protocol != that1.Protocol {
		return false
	}
	if that1.LastStatusReceivedAt == nil {
		if this.LastStatusReceivedAt != nil {
			return false
		}
	} else if !this.LastStatusReceivedAt.Equal(*that1.LastStatusReceivedAt) {
		return false
	}
	if !this.LastStatus.Equal(that1.LastStatus) {
		return false
	}
	if that1.LastUplinkReceivedAt == nil {
		if this.LastUplinkReceivedAt != nil {
			return false
		}
	} else if !this.LastUplinkReceivedAt.Equal(*that1.LastUplinkReceivedAt) {
		return false
	}
	if this.UplinkCount != that1.UplinkCount {
		return false
	}
	if that1.LastDownlinkReceivedAt == nil {
		if this.LastDownlinkReceivedAt != nil {
			return false
		}
	} else if !this.LastDownlinkReceivedAt.Equal(*that1.LastDownlinkReceivedAt) {
		return false
	}
	if this.DownlinkCount != that1.DownlinkCount {
		return false
	}
	return true
}
func (m *GatewayBrand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayBrand) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.URL) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.URL)))
		i += copy(dAtA[i:], m.URL)
	}
	if len(m.Logos) > 0 {
		for _, s := range m.Logos {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *GatewayModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayModel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BrandID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.BrandID)))
		i += copy(dAtA[i:], m.BrandID)
	}
	if len(m.ID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *GatewayVersionIdentifiers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayVersionIdentifiers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BrandID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.BrandID)))
		i += copy(dAtA[i:], m.BrandID)
	}
	if len(m.ModelID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.ModelID)))
		i += copy(dAtA[i:], m.ModelID)
	}
	if len(m.HardwareVersion) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.HardwareVersion)))
		i += copy(dAtA[i:], m.HardwareVersion)
	}
	if len(m.FirmwareVersion) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.FirmwareVersion)))
		i += copy(dAtA[i:], m.FirmwareVersion)
	}
	return i, nil
}

func (m *GatewayRadio) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayRadio) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Enable {
		dAtA[i] = 0x8
		i++
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ChipType) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.ChipType)))
		i += copy(dAtA[i:], m.ChipType)
	}
	if m.Frequency != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGateway(dAtA, i, m.Frequency)
	}
	if m.RSSIOffset != 0 {
		dAtA[i] = 0x25
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], math.Float32bits(float32(m.RSSIOffset)))
		i += 4
	}
	if m.TxConfiguration != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.TxConfiguration.Size()))
		n1, err := m.TxConfiguration.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *GatewayRadio_TxConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayRadio_TxConfiguration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MinFrequency != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGateway(dAtA, i, m.MinFrequency)
	}
	if m.MaxFrequency != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGateway(dAtA, i, m.MaxFrequency)
	}
	if m.NotchFrequency != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGateway(dAtA, i, m.NotchFrequency)
	}
	return i, nil
}

func (m *GatewayVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayVersion) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.GatewayVersionIdentifiers.Size()))
	n2, err := m.GatewayVersionIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.Photos) > 0 {
		for _, s := range m.Photos {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Radios) > 0 {
		for _, msg := range m.Radios {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGateway(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ClockSource != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.ClockSource))
	}
	return i, nil
}

func (m *Gateway) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Gateway) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.GatewayIdentifiers.Size()))
	n3, err := m.GatewayIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x12
	i++
	i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)))
	n4, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)))
	n5, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.Attributes) > 0 {
		for k := range m.Attributes {
			dAtA[i] = 0x32
			i++
			v := m.Attributes[k]
			mapSize := 1 + len(k) + sovGateway(uint64(len(k))) + 1 + len(v) + sovGateway(uint64(len(v)))
			i = encodeVarintGateway(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGateway(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintGateway(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.ContactInfo) > 0 {
		for _, msg := range m.ContactInfo {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintGateway(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x42
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.GatewayVersionIdentifiers.Size()))
	n6, err := m.GatewayVersionIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if len(m.GatewayServerAddress) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.GatewayServerAddress)))
		i += copy(dAtA[i:], m.GatewayServerAddress)
	}
	if m.AutoUpdate {
		dAtA[i] = 0x50
		i++
		if m.AutoUpdate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.UpdateChannel) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.UpdateChannel)))
		i += copy(dAtA[i:], m.UpdateChannel)
	}
	if len(m.FrequencyPlanID) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.FrequencyPlanID)))
		i += copy(dAtA[i:], m.FrequencyPlanID)
	}
	if len(m.Antennas) > 0 {
		for _, msg := range m.Antennas {
			dAtA[i] = 0x6a
			i++
			i = encodeVarintGateway(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.StatusPublic {
		dAtA[i] = 0x70
		i++
		if m.StatusPublic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.LocationPublic {
		dAtA[i] = 0x78
		i++
		if m.LocationPublic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ScheduleDownlinkLate {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		if m.ScheduleDownlinkLate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.EnforceDutyCycle {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		if m.EnforceDutyCycle {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DownlinkPathConstraint != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.DownlinkPathConstraint))
	}
	return i, nil
}

func (m *Gateways) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Gateways) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Gateways) > 0 {
		for _, msg := range m.Gateways {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGateway(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetGatewayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGatewayRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.GatewayIdentifiers.Size()))
	n7, err := m.GatewayIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x12
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.FieldMask.Size()))
	n8, err := m.FieldMask.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	return i, nil
}

func (m *GetGatewayIdentifiersForEUIRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGatewayIdentifiersForEUIRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.EUI.Size()))
	n9, err := m.EUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	return i, nil
}

func (m *ListGatewaysRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListGatewaysRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Collaborator != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.Collaborator.Size()))
		n10, err := m.Collaborator.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.FieldMask.Size()))
	n11, err := m.FieldMask.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	if len(m.Order) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Order)))
		i += copy(dAtA[i:], m.Order)
	}
	if m.Limit != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.Limit))
	}
	if m.Page != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.Page))
	}
	return i, nil
}

func (m *CreateGatewayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateGatewayRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.Gateway.Size()))
	n12, err := m.Gateway.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	dAtA[i] = 0x12
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.Collaborator.Size()))
	n13, err := m.Collaborator.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	return i, nil
}

func (m *UpdateGatewayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGatewayRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.Gateway.Size()))
	n14, err := m.Gateway.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	dAtA[i] = 0x12
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.FieldMask.Size()))
	n15, err := m.FieldMask.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	return i, nil
}

func (m *CreateGatewayAPIKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateGatewayAPIKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.GatewayIdentifiers.Size()))
	n16, err := m.GatewayIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Rights) > 0 {
		dAtA18 := make([]byte, len(m.Rights)*10)
		var j17 int
		for _, num := range m.Rights {
			for num >= 1<<7 {
				dAtA18[j17] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j17++
			}
			dAtA18[j17] = uint8(num)
			j17++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(j17))
		i += copy(dAtA[i:], dAtA18[:j17])
	}
	return i, nil
}

func (m *UpdateGatewayAPIKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGatewayAPIKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.GatewayIdentifiers.Size()))
	n19, err := m.GatewayIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n19
	dAtA[i] = 0x12
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.APIKey.Size()))
	n20, err := m.APIKey.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n20
	return i, nil
}

func (m *SetGatewayCollaboratorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetGatewayCollaboratorRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.GatewayIdentifiers.Size()))
	n21, err := m.GatewayIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n21
	dAtA[i] = 0x12
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.Collaborator.Size()))
	n22, err := m.Collaborator.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n22
	return i, nil
}

func (m *GatewayAntenna) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayAntenna) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Gain != 0 {
		dAtA[i] = 0xd
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], math.Float32bits(float32(m.Gain)))
		i += 4
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.Location.Size()))
	n23, err := m.Location.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n23
	if len(m.Attributes) > 0 {
		for k := range m.Attributes {
			dAtA[i] = 0x1a
			i++
			v := m.Attributes[k]
			mapSize := 1 + len(k) + sovGateway(uint64(len(k))) + 1 + len(v) + sovGateway(uint64(len(v)))
			i = encodeVarintGateway(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGateway(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintGateway(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *GatewayStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Time)))
	n24, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Time, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n24
	dAtA[i] = 0x12
	i++
	i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.BootTime)))
	n25, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.BootTime, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n25
	if len(m.Versions) > 0 {
		for k := range m.Versions {
			dAtA[i] = 0x1a
			i++
			v := m.Versions[k]
			mapSize := 1 + len(k) + sovGateway(uint64(len(k))) + 1 + len(v) + sovGateway(uint64(len(v)))
			i = encodeVarintGateway(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGateway(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintGateway(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.AntennaLocations) > 0 {
		for _, msg := range m.AntennaLocations {
			dAtA[i] = 0x22
			i++
			i = encodeVarintGateway(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.IP) > 0 {
		for _, s := range m.IP {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Metrics) > 0 {
		for k := range m.Metrics {
			dAtA[i] = 0x32
			i++
			v := m.Metrics[k]
			mapSize := 1 + len(k) + sovGateway(uint64(len(k))) + 1 + 4
			i = encodeVarintGateway(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGateway(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x15
			i++
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], math.Float32bits(float32(v)))
			i += 4
		}
	}
	if m.Advanced != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.Advanced.Size()))
		n26, err := m.Advanced.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}

func (m *GatewayConnectionStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayConnectionStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ConnectedAt != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.ConnectedAt)))
		n27, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ConnectedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	if len(m.Protocol) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Protocol)))
		i += copy(dAtA[i:], m.Protocol)
	}
	if m.LastStatusReceivedAt != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastStatusReceivedAt)))
		n28, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastStatusReceivedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	if m.LastStatus != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.LastStatus.Size()))
		n29, err := m.LastStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	if m.LastUplinkReceivedAt != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastUplinkReceivedAt)))
		n30, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastUplinkReceivedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if m.UplinkCount != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGateway(dAtA, i, m.UplinkCount)
	}
	if m.LastDownlinkReceivedAt != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastDownlinkReceivedAt)))
		n31, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastDownlinkReceivedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	if m.DownlinkCount != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintGateway(dAtA, i, m.DownlinkCount)
	}
	return i, nil
}

func encodeVarintGateway(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedGatewayBrand(r randyGateway, easy bool) *GatewayBrand {
	this := &GatewayBrand{}
	this.ID = randStringGateway(r)
	this.Name = randStringGateway(r)
	this.URL = randStringGateway(r)
	v1 := r.Intn(10)
	this.Logos = make([]string, v1)
	for i := 0; i < v1; i++ {
		this.Logos[i] = randStringGateway(r)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGatewayModel(r randyGateway, easy bool) *GatewayModel {
	this := &GatewayModel{}
	this.BrandID = randStringGateway(r)
	this.ID = randStringGateway(r)
	this.Name = randStringGateway(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGatewayVersionIdentifiers(r randyGateway, easy bool) *GatewayVersionIdentifiers {
	this := &GatewayVersionIdentifiers{}
	this.BrandID = randStringGateway(r)
	this.ModelID = randStringGateway(r)
	this.HardwareVersion = randStringGateway(r)
	this.FirmwareVersion = randStringGateway(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGatewayRadio(r randyGateway, easy bool) *GatewayRadio {
	this := &GatewayRadio{}
	this.Enable = bool(r.Intn(2) == 0)
	this.ChipType = randStringGateway(r)
	this.Frequency = uint64(r.Uint32())
	this.RSSIOffset = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.RSSIOffset *= -1
	}
	if r.Intn(10) != 0 {
		this.TxConfiguration = NewPopulatedGatewayRadio_TxConfiguration(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGatewayRadio_TxConfiguration(r randyGateway, easy bool) *GatewayRadio_TxConfiguration {
	this := &GatewayRadio_TxConfiguration{}
	this.MinFrequency = uint64(r.Uint32())
	this.MaxFrequency = uint64(r.Uint32())
	this.NotchFrequency = uint64(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGateway(r randyGateway, easy bool) *Gateway {
	this := &Gateway{}
	v2 := NewPopulatedGatewayIdentifiers(r, easy)
	this.GatewayIdentifiers = *v2
	v3 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.CreatedAt = *v3
	v4 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.UpdatedAt = *v4
	this.Name = randStringGateway(r)
	this.Description = randStringGateway(r)
	if r.Intn(10) != 0 {
		v5 := r.Intn(10)
		this.Attributes = make(map[string]string)
		for i := 0; i < v5; i++ {
			this.Attributes[randStringGateway(r)] = randStringGateway(r)
		}
	}
	if r.Intn(10) != 0 {
		v6 := r.Intn(5)
		this.ContactInfo = make([]*ContactInfo, v6)
		for i := 0; i < v6; i++ {
			this.ContactInfo[i] = NewPopulatedContactInfo(r, easy)
		}
	}
	v7 := NewPopulatedGatewayVersionIdentifiers(r, easy)
	this.GatewayVersionIdentifiers = *v7
	this.GatewayServerAddress = randStringGateway(r)
	this.AutoUpdate = bool(r.Intn(2) == 0)
	this.UpdateChannel = randStringGateway(r)
	this.FrequencyPlanID = randStringGateway(r)
	if r.Intn(10) != 0 {
		v8 := r.Intn(5)
		this.Antennas = make([]GatewayAntenna, v8)
		for i := 0; i < v8; i++ {
			v9 := NewPopulatedGatewayAntenna(r, easy)
			this.Antennas[i] = *v9
		}
	}
	this.StatusPublic = bool(r.Intn(2) == 0)
	this.LocationPublic = bool(r.Intn(2) == 0)
	this.ScheduleDownlinkLate = bool(r.Intn(2) == 0)
	this.EnforceDutyCycle = bool(r.Intn(2) == 0)
	this.DownlinkPathConstraint = DownlinkPathConstraint([]int32{0, 1, 2}[r.Intn(3)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGateways(r randyGateway, easy bool) *Gateways {
	this := &Gateways{}
	if r.Intn(10) != 0 {
		v10 := r.Intn(5)
		this.Gateways = make([]*Gateway, v10)
		for i := 0; i < v10; i++ {
			this.Gateways[i] = NewPopulatedGateway(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetGatewayRequest(r randyGateway, easy bool) *GetGatewayRequest {
	this := &GetGatewayRequest{}
	v11 := NewPopulatedGatewayIdentifiers(r, easy)
	this.GatewayIdentifiers = *v11
	v12 := types.NewPopulatedFieldMask(r, easy)
	this.FieldMask = *v12
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetGatewayIdentifiersForEUIRequest(r randyGateway, easy bool) *GetGatewayIdentifiersForEUIRequest {
	this := &GetGatewayIdentifiersForEUIRequest{}
	v13 := go_thethings_network_lorawan_stack_pkg_types.NewPopulatedEUI64(r)
	this.EUI = *v13
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListGatewaysRequest(r randyGateway, easy bool) *ListGatewaysRequest {
	this := &ListGatewaysRequest{}
	if r.Intn(10) != 0 {
		this.Collaborator = NewPopulatedOrganizationOrUserIdentifiers(r, easy)
	}
	v14 := types.NewPopulatedFieldMask(r, easy)
	this.FieldMask = *v14
	this.Order = randStringGateway(r)
	this.Limit = r.Uint32()
	this.Page = r.Uint32()
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateGatewayRequest(r randyGateway, easy bool) *CreateGatewayRequest {
	this := &CreateGatewayRequest{}
	v15 := NewPopulatedGateway(r, easy)
	this.Gateway = *v15
	v16 := NewPopulatedOrganizationOrUserIdentifiers(r, easy)
	this.Collaborator = *v16
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateGatewayRequest(r randyGateway, easy bool) *UpdateGatewayRequest {
	this := &UpdateGatewayRequest{}
	v17 := NewPopulatedGateway(r, easy)
	this.Gateway = *v17
	v18 := types.NewPopulatedFieldMask(r, easy)
	this.FieldMask = *v18
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateGatewayAPIKeyRequest(r randyGateway, easy bool) *CreateGatewayAPIKeyRequest {
	this := &CreateGatewayAPIKeyRequest{}
	v19 := NewPopulatedGatewayIdentifiers(r, easy)
	this.GatewayIdentifiers = *v19
	this.Name = randStringGateway(r)
	v20 := r.Intn(10)
	this.Rights = make([]Right, v20)
	for i := 0; i < v20; i++ {
		this.Rights[i] = Right([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55}[r.Intn(56)])
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateGatewayAPIKeyRequest(r randyGateway, easy bool) *UpdateGatewayAPIKeyRequest {
	this := &UpdateGatewayAPIKeyRequest{}
	v21 := NewPopulatedGatewayIdentifiers(r, easy)
	this.GatewayIdentifiers = *v21
	v22 := NewPopulatedAPIKey(r, easy)
	this.APIKey = *v22
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSetGatewayCollaboratorRequest(r randyGateway, easy bool) *SetGatewayCollaboratorRequest {
	this := &SetGatewayCollaboratorRequest{}
	v23 := NewPopulatedGatewayIdentifiers(r, easy)
	this.GatewayIdentifiers = *v23
	v24 := NewPopulatedCollaborator(r, easy)
	this.Collaborator = *v24
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGatewayAntenna(r randyGateway, easy bool) *GatewayAntenna {
	this := &GatewayAntenna{}
	this.Gain = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Gain *= -1
	}
	v25 := NewPopulatedLocation(r, easy)
	this.Location = *v25
	if r.Intn(10) != 0 {
		v26 := r.Intn(10)
		this.Attributes = make(map[string]string)
		for i := 0; i < v26; i++ {
			this.Attributes[randStringGateway(r)] = randStringGateway(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGatewayStatus(r randyGateway, easy bool) *GatewayStatus {
	this := &GatewayStatus{}
	v27 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.Time = *v27
	v28 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.BootTime = *v28
	if r.Intn(10) != 0 {
		v29 := r.Intn(10)
		this.Versions = make(map[string]string)
		for i := 0; i < v29; i++ {
			this.Versions[randStringGateway(r)] = randStringGateway(r)
		}
	}
	if r.Intn(10) != 0 {
		v30 := r.Intn(5)
		this.AntennaLocations = make([]*Location, v30)
		for i := 0; i < v30; i++ {
			this.AntennaLocations[i] = NewPopulatedLocation(r, easy)
		}
	}
	v31 := r.Intn(10)
	this.IP = make([]string, v31)
	for i := 0; i < v31; i++ {
		this.IP[i] = randStringGateway(r)
	}
	if r.Intn(10) != 0 {
		v32 := r.Intn(10)
		this.Metrics = make(map[string]float32)
		for i := 0; i < v32; i++ {
			v33 := randStringGateway(r)
			this.Metrics[v33] = float32(r.Float32())
			if r.Intn(2) == 0 {
				this.Metrics[v33] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		this.Advanced = types.NewPopulatedStruct(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGatewayConnectionStats(r randyGateway, easy bool) *GatewayConnectionStats {
	this := &GatewayConnectionStats{}
	if r.Intn(10) != 0 {
		this.ConnectedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	this.Protocol = randStringGateway(r)
	if r.Intn(10) != 0 {
		this.LastStatusReceivedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if r.Intn(10) != 0 {
		this.LastStatus = NewPopulatedGatewayStatus(r, easy)
	}
	if r.Intn(10) != 0 {
		this.LastUplinkReceivedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	this.UplinkCount = uint64(r.Uint32())
	if r.Intn(10) != 0 {
		this.LastDownlinkReceivedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	this.DownlinkCount = uint64(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyGateway interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneGateway(r randyGateway) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringGateway(r randyGateway) string {
	v34 := r.Intn(100)
	tmps := make([]rune, v34)
	for i := 0; i < v34; i++ {
		tmps[i] = randUTF8RuneGateway(r)
	}
	return string(tmps)
}
func randUnrecognizedGateway(r randyGateway, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldGateway(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldGateway(dAtA []byte, r randyGateway, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateGateway(dAtA, uint64(key))
		v35 := r.Int63()
		if r.Intn(2) == 0 {
			v35 *= -1
		}
		dAtA = encodeVarintPopulateGateway(dAtA, uint64(v35))
	case 1:
		dAtA = encodeVarintPopulateGateway(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateGateway(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateGateway(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateGateway(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateGateway(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *GatewayBrand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.Logos) > 0 {
		for _, s := range m.Logos {
			l = len(s)
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	return n
}

func (m *GatewayModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BrandID)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GatewayVersionIdentifiers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BrandID)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.ModelID)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.HardwareVersion)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.FirmwareVersion)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GatewayRadio) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enable {
		n += 2
	}
	l = len(m.ChipType)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.Frequency != 0 {
		n += 1 + sovGateway(m.Frequency)
	}
	if m.RSSIOffset != 0 {
		n += 5
	}
	if m.TxConfiguration != nil {
		l = m.TxConfiguration.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GatewayRadio_TxConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinFrequency != 0 {
		n += 1 + sovGateway(m.MinFrequency)
	}
	if m.MaxFrequency != 0 {
		n += 1 + sovGateway(m.MaxFrequency)
	}
	if m.NotchFrequency != 0 {
		n += 1 + sovGateway(m.NotchFrequency)
	}
	return n
}

func (m *GatewayVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GatewayVersionIdentifiers.Size()
	n += 1 + l + sovGateway(uint64(l))
	if len(m.Photos) > 0 {
		for _, s := range m.Photos {
			l = len(s)
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if len(m.Radios) > 0 {
		for _, e := range m.Radios {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if m.ClockSource != 0 {
		n += 1 + sovGateway(uint64(m.ClockSource))
	}
	return n
}

func (m *Gateway) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GatewayIdentifiers.Size()
	n += 1 + l + sovGateway(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovGateway(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)
	n += 1 + l + sovGateway(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.Attributes) > 0 {
		for k, v := range m.Attributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGateway(uint64(len(k))) + 1 + len(v) + sovGateway(uint64(len(v)))
			n += mapEntrySize + 1 + sovGateway(uint64(mapEntrySize))
		}
	}
	if len(m.ContactInfo) > 0 {
		for _, e := range m.ContactInfo {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	l = m.GatewayVersionIdentifiers.Size()
	n += 1 + l + sovGateway(uint64(l))
	l = len(m.GatewayServerAddress)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.AutoUpdate {
		n += 2
	}
	l = len(m.UpdateChannel)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.FrequencyPlanID)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.Antennas) > 0 {
		for _, e := range m.Antennas {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if m.StatusPublic {
		n += 2
	}
	if m.LocationPublic {
		n += 2
	}
	if m.ScheduleDownlinkLate {
		n += 3
	}
	if m.EnforceDutyCycle {
		n += 3
	}
	if m.DownlinkPathConstraint != 0 {
		n += 2 + sovGateway(uint64(m.DownlinkPathConstraint))
	}
	return n
}

func (m *Gateways) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Gateways) > 0 {
		for _, e := range m.Gateways {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	return n
}

func (m *GetGatewayRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GatewayIdentifiers.Size()
	n += 1 + l + sovGateway(uint64(l))
	l = m.FieldMask.Size()
	n += 1 + l + sovGateway(uint64(l))
	return n
}

func (m *GetGatewayIdentifiersForEUIRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EUI.Size()
	n += 1 + l + sovGateway(uint64(l))
	return n
}

func (m *ListGatewaysRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Collaborator != nil {
		l = m.Collaborator.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	l = m.FieldMask.Size()
	n += 1 + l + sovGateway(uint64(l))
	l = len(m.Order)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovGateway(uint64(m.Limit))
	}
	if m.Page != 0 {
		n += 1 + sovGateway(uint64(m.Page))
	}
	return n
}

func (m *CreateGatewayRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Gateway.Size()
	n += 1 + l + sovGateway(uint64(l))
	l = m.Collaborator.Size()
	n += 1 + l + sovGateway(uint64(l))
	return n
}

func (m *UpdateGatewayRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Gateway.Size()
	n += 1 + l + sovGateway(uint64(l))
	l = m.FieldMask.Size()
	n += 1 + l + sovGateway(uint64(l))
	return n
}

func (m *CreateGatewayAPIKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GatewayIdentifiers.Size()
	n += 1 + l + sovGateway(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.Rights) > 0 {
		l = 0
		for _, e := range m.Rights {
			l += sovGateway(uint64(e))
		}
		n += 1 + sovGateway(uint64(l)) + l
	}
	return n
}

func (m *UpdateGatewayAPIKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GatewayIdentifiers.Size()
	n += 1 + l + sovGateway(uint64(l))
	l = m.APIKey.Size()
	n += 1 + l + sovGateway(uint64(l))
	return n
}

func (m *SetGatewayCollaboratorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GatewayIdentifiers.Size()
	n += 1 + l + sovGateway(uint64(l))
	l = m.Collaborator.Size()
	n += 1 + l + sovGateway(uint64(l))
	return n
}

func (m *GatewayAntenna) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Gain != 0 {
		n += 5
	}
	l = m.Location.Size()
	n += 1 + l + sovGateway(uint64(l))
	if len(m.Attributes) > 0 {
		for k, v := range m.Attributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGateway(uint64(len(k))) + 1 + len(v) + sovGateway(uint64(len(v)))
			n += mapEntrySize + 1 + sovGateway(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *GatewayStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Time)
	n += 1 + l + sovGateway(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.BootTime)
	n += 1 + l + sovGateway(uint64(l))
	if len(m.Versions) > 0 {
		for k, v := range m.Versions {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGateway(uint64(len(k))) + 1 + len(v) + sovGateway(uint64(len(v)))
			n += mapEntrySize + 1 + sovGateway(uint64(mapEntrySize))
		}
	}
	if len(m.AntennaLocations) > 0 {
		for _, e := range m.AntennaLocations {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if len(m.IP) > 0 {
		for _, s := range m.IP {
			l = len(s)
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if len(m.Metrics) > 0 {
		for k, v := range m.Metrics {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGateway(uint64(len(k))) + 1 + 4
			n += mapEntrySize + 1 + sovGateway(uint64(mapEntrySize))
		}
	}
	if m.Advanced != nil {
		l = m.Advanced.Size()
		n += 2 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GatewayConnectionStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConnectedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ConnectedAt)
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.LastStatusReceivedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastStatusReceivedAt)
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.LastStatus != nil {
		l = m.LastStatus.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.LastUplinkReceivedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastUplinkReceivedAt)
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.UplinkCount != 0 {
		n += 1 + sovGateway(m.UplinkCount)
	}
	if m.LastDownlinkReceivedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastDownlinkReceivedAt)
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.DownlinkCount != 0 {
		n += 1 + sovGateway(m.DownlinkCount)
	}
	return n
}

func sovGateway(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGateway(x uint64) (n int) {
	return sovGateway((x << 1) ^ uint64((int64(x) >> 63)))
}
func (this *GatewayBrand) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayBrand{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`URL:` + fmt.Sprintf("%v", this.URL) + `,`,
		`Logos:` + fmt.Sprintf("%v", this.Logos) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayModel) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayModel{`,
		`BrandID:` + fmt.Sprintf("%v", this.BrandID) + `,`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayVersionIdentifiers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayVersionIdentifiers{`,
		`BrandID:` + fmt.Sprintf("%v", this.BrandID) + `,`,
		`ModelID:` + fmt.Sprintf("%v", this.ModelID) + `,`,
		`HardwareVersion:` + fmt.Sprintf("%v", this.HardwareVersion) + `,`,
		`FirmwareVersion:` + fmt.Sprintf("%v", this.FirmwareVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayRadio) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayRadio{`,
		`Enable:` + fmt.Sprintf("%v", this.Enable) + `,`,
		`ChipType:` + fmt.Sprintf("%v", this.ChipType) + `,`,
		`Frequency:` + fmt.Sprintf("%v", this.Frequency) + `,`,
		`RSSIOffset:` + fmt.Sprintf("%v", this.RSSIOffset) + `,`,
		`TxConfiguration:` + strings.Replace(fmt.Sprintf("%v", this.TxConfiguration), "GatewayRadio_TxConfiguration", "GatewayRadio_TxConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayRadio_TxConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayRadio_TxConfiguration{`,
		`MinFrequency:` + fmt.Sprintf("%v", this.MinFrequency) + `,`,
		`MaxFrequency:` + fmt.Sprintf("%v", this.MaxFrequency) + `,`,
		`NotchFrequency:` + fmt.Sprintf("%v", this.NotchFrequency) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayVersion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayVersion{`,
		`GatewayVersionIdentifiers:` + strings.Replace(strings.Replace(this.GatewayVersionIdentifiers.String(), "GatewayVersionIdentifiers", "GatewayVersionIdentifiers", 1), `&`, ``, 1) + `,`,
		`Photos:` + fmt.Sprintf("%v", this.Photos) + `,`,
		`Radios:` + strings.Replace(fmt.Sprintf("%v", this.Radios), "GatewayRadio", "GatewayRadio", 1) + `,`,
		`ClockSource:` + fmt.Sprintf("%v", this.ClockSource) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Gateway) String() string {
	if this == nil {
		return "nil"
	}
	keysForAttributes := make([]string, 0, len(this.Attributes))
	for k := range this.Attributes {
		keysForAttributes = append(keysForAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributes)
	mapStringForAttributes := "map[string]string{"
	for _, k := range keysForAttributes {
		mapStringForAttributes += fmt.Sprintf("%v: %v,", k, this.Attributes[k])
	}
	mapStringForAttributes += "}"
	s := strings.Join([]string{`&Gateway{`,
		`GatewayIdentifiers:` + strings.Replace(strings.Replace(this.GatewayIdentifiers.String(), "GatewayIdentifiers", "GatewayIdentifiers", 1), `&`, ``, 1) + `,`,
		`CreatedAt:` + strings.Replace(strings.Replace(this.CreatedAt.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`UpdatedAt:` + strings.Replace(strings.Replace(this.UpdatedAt.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Attributes:` + mapStringForAttributes + `,`,
		`ContactInfo:` + strings.Replace(fmt.Sprintf("%v", this.ContactInfo), "ContactInfo", "ContactInfo", 1) + `,`,
		`GatewayVersionIdentifiers:` + strings.Replace(strings.Replace(this.GatewayVersionIdentifiers.String(), "GatewayVersionIdentifiers", "GatewayVersionIdentifiers", 1), `&`, ``, 1) + `,`,
		`GatewayServerAddress:` + fmt.Sprintf("%v", this.GatewayServerAddress) + `,`,
		`AutoUpdate:` + fmt.Sprintf("%v", this.AutoUpdate) + `,`,
		`UpdateChannel:` + fmt.Sprintf("%v", this.UpdateChannel) + `,`,
		`FrequencyPlanID:` + fmt.Sprintf("%v", this.FrequencyPlanID) + `,`,
		`Antennas:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Antennas), "GatewayAntenna", "GatewayAntenna", 1), `&`, ``, 1) + `,`,
		`StatusPublic:` + fmt.Sprintf("%v", this.StatusPublic) + `,`,
		`LocationPublic:` + fmt.Sprintf("%v", this.LocationPublic) + `,`,
		`ScheduleDownlinkLate:` + fmt.Sprintf("%v", this.ScheduleDownlinkLate) + `,`,
		`EnforceDutyCycle:` + fmt.Sprintf("%v", this.EnforceDutyCycle) + `,`,
		`DownlinkPathConstraint:` + fmt.Sprintf("%v", this.DownlinkPathConstraint) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Gateways) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Gateways{`,
		`Gateways:` + strings.Replace(fmt.Sprintf("%v", this.Gateways), "Gateway", "Gateway", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetGatewayRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetGatewayRequest{`,
		`GatewayIdentifiers:` + strings.Replace(strings.Replace(this.GatewayIdentifiers.String(), "GatewayIdentifiers", "GatewayIdentifiers", 1), `&`, ``, 1) + `,`,
		`FieldMask:` + strings.Replace(strings.Replace(this.FieldMask.String(), "FieldMask", "types.FieldMask", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetGatewayIdentifiersForEUIRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetGatewayIdentifiersForEUIRequest{`,
		`EUI:` + fmt.Sprintf("%v", this.EUI) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListGatewaysRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListGatewaysRequest{`,
		`Collaborator:` + strings.Replace(fmt.Sprintf("%v", this.Collaborator), "OrganizationOrUserIdentifiers", "OrganizationOrUserIdentifiers", 1) + `,`,
		`FieldMask:` + strings.Replace(strings.Replace(this.FieldMask.String(), "FieldMask", "types.FieldMask", 1), `&`, ``, 1) + `,`,
		`Order:` + fmt.Sprintf("%v", this.Order) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateGatewayRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateGatewayRequest{`,
		`Gateway:` + strings.Replace(strings.Replace(this.Gateway.String(), "Gateway", "Gateway", 1), `&`, ``, 1) + `,`,
		`Collaborator:` + strings.Replace(strings.Replace(this.Collaborator.String(), "OrganizationOrUserIdentifiers", "OrganizationOrUserIdentifiers", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateGatewayRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateGatewayRequest{`,
		`Gateway:` + strings.Replace(strings.Replace(this.Gateway.String(), "Gateway", "Gateway", 1), `&`, ``, 1) + `,`,
		`FieldMask:` + strings.Replace(strings.Replace(this.FieldMask.String(), "FieldMask", "types.FieldMask", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateGatewayAPIKeyRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateGatewayAPIKeyRequest{`,
		`GatewayIdentifiers:` + strings.Replace(strings.Replace(this.GatewayIdentifiers.String(), "GatewayIdentifiers", "GatewayIdentifiers", 1), `&`, ``, 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Rights:` + fmt.Sprintf("%v", this.Rights) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateGatewayAPIKeyRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateGatewayAPIKeyRequest{`,
		`GatewayIdentifiers:` + strings.Replace(strings.Replace(this.GatewayIdentifiers.String(), "GatewayIdentifiers", "GatewayIdentifiers", 1), `&`, ``, 1) + `,`,
		`APIKey:` + strings.Replace(strings.Replace(this.APIKey.String(), "APIKey", "APIKey", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetGatewayCollaboratorRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetGatewayCollaboratorRequest{`,
		`GatewayIdentifiers:` + strings.Replace(strings.Replace(this.GatewayIdentifiers.String(), "GatewayIdentifiers", "GatewayIdentifiers", 1), `&`, ``, 1) + `,`,
		`Collaborator:` + strings.Replace(strings.Replace(this.Collaborator.String(), "Collaborator", "Collaborator", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayAntenna) String() string {
	if this == nil {
		return "nil"
	}
	keysForAttributes := make([]string, 0, len(this.Attributes))
	for k := range this.Attributes {
		keysForAttributes = append(keysForAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributes)
	mapStringForAttributes := "map[string]string{"
	for _, k := range keysForAttributes {
		mapStringForAttributes += fmt.Sprintf("%v: %v,", k, this.Attributes[k])
	}
	mapStringForAttributes += "}"
	s := strings.Join([]string{`&GatewayAntenna{`,
		`Gain:` + fmt.Sprintf("%v", this.Gain) + `,`,
		`Location:` + strings.Replace(strings.Replace(this.Location.String(), "Location", "Location", 1), `&`, ``, 1) + `,`,
		`Attributes:` + mapStringForAttributes + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayStatus) String() string {
	if this == nil {
		return "nil"
	}
	keysForVersions := make([]string, 0, len(this.Versions))
	for k := range this.Versions {
		keysForVersions = append(keysForVersions, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForVersions)
	mapStringForVersions := "map[string]string{"
	for _, k := range keysForVersions {
		mapStringForVersions += fmt.Sprintf("%v: %v,", k, this.Versions[k])
	}
	mapStringForVersions += "}"
	keysForMetrics := make([]string, 0, len(this.Metrics))
	for k := range this.Metrics {
		keysForMetrics = append(keysForMetrics, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetrics)
	mapStringForMetrics := "map[string]float32{"
	for _, k := range keysForMetrics {
		mapStringForMetrics += fmt.Sprintf("%v: %v,", k, this.Metrics[k])
	}
	mapStringForMetrics += "}"
	s := strings.Join([]string{`&GatewayStatus{`,
		`Time:` + strings.Replace(strings.Replace(this.Time.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`BootTime:` + strings.Replace(strings.Replace(this.BootTime.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`Versions:` + mapStringForVersions + `,`,
		`AntennaLocations:` + strings.Replace(fmt.Sprintf("%v", this.AntennaLocations), "Location", "Location", 1) + `,`,
		`IP:` + fmt.Sprintf("%v", this.IP) + `,`,
		`Metrics:` + mapStringForMetrics + `,`,
		`Advanced:` + strings.Replace(fmt.Sprintf("%v", this.Advanced), "Struct", "types.Struct", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayConnectionStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayConnectionStats{`,
		`ConnectedAt:` + strings.Replace(fmt.Sprintf("%v", this.ConnectedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`LastStatusReceivedAt:` + strings.Replace(fmt.Sprintf("%v", this.LastStatusReceivedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`LastStatus:` + strings.Replace(fmt.Sprintf("%v", this.LastStatus), "GatewayStatus", "GatewayStatus", 1) + `,`,
		`LastUplinkReceivedAt:` + strings.Replace(fmt.Sprintf("%v", this.LastUplinkReceivedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`UplinkCount:` + fmt.Sprintf("%v", this.UplinkCount) + `,`,
		`LastDownlinkReceivedAt:` + strings.Replace(fmt.Sprintf("%v", this.LastDownlinkReceivedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`DownlinkCount:` + fmt.Sprintf("%v", this.DownlinkCount) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGateway(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GatewayBrand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayBrand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayBrand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logos", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logos = append(m.Logos, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BrandID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayVersionIdentifiers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayVersionIdentifiers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayVersionIdentifiers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BrandID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HardwareVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirmwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirmwareVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayRadio) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayRadio: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayRadio: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChipType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChipType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			m.Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RSSIOffset", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:])
			iNdEx += 4
			m.RSSIOffset = float32(math.Float32frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxConfiguration == nil {
				m.TxConfiguration = &GatewayRadio_TxConfiguration{}
			}
			if err := m.TxConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayRadio_TxConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinFrequency", wireType)
			}
			m.MinFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinFrequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFrequency", wireType)
			}
			m.MaxFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxFrequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotchFrequency", wireType)
			}
			m.NotchFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotchFrequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayVersionIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GatewayVersionIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photos", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photos = append(m.Photos, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Radios", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Radios = append(m.Radios, &GatewayRadio{})
			if err := m.Radios[len(m.Radios)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClockSource", wireType)
			}
			m.ClockSource = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClockSource |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Gateway) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Gateway: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Gateway: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GatewayIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGateway
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGateway
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGateway(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGateway
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attributes[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactInfo = append(m.ContactInfo, &ContactInfo{})
			if err := m.ContactInfo[len(m.ContactInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayVersionIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GatewayVersionIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayServerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayServerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoUpdate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoUpdate = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyPlanID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrequencyPlanID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Antennas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Antennas = append(m.Antennas, GatewayAntenna{})
			if err := m.Antennas[len(m.Antennas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusPublic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StatusPublic = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationPublic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LocationPublic = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleDownlinkLate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ScheduleDownlinkLate = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnforceDutyCycle", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnforceDutyCycle = bool(v != 0)
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkPathConstraint", wireType)
			}
			m.DownlinkPathConstraint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DownlinkPathConstraint |= (DownlinkPathConstraint(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Gateways) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Gateways: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Gateways: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateways", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateways = append(m.Gateways, &Gateway{})
			if err := m.Gateways[len(m.Gateways)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGatewayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGatewayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGatewayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GatewayIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGatewayIdentifiersForEUIRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGatewayIdentifiersForEUIRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGatewayIdentifiersForEUIRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListGatewaysRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListGatewaysRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListGatewaysRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collaborator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Collaborator == nil {
				m.Collaborator = &OrganizationOrUserIdentifiers{}
			}
			if err := m.Collaborator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Order = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateGatewayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateGatewayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateGatewayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Gateway.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collaborator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Collaborator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGatewayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGatewayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGatewayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Gateway.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateGatewayAPIKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateGatewayAPIKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateGatewayAPIKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GatewayIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v Right
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Right(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rights = append(m.Rights, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGateway
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Rights) == 0 {
					m.Rights = make([]Right, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Right
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Right(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rights = append(m.Rights, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rights", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGatewayAPIKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGatewayAPIKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGatewayAPIKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GatewayIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field APIKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.APIKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetGatewayCollaboratorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetGatewayCollaboratorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetGatewayCollaboratorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GatewayIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collaborator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Collaborator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayAntenna) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayAntenna: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayAntenna: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gain", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:])
			iNdEx += 4
			m.Gain = float32(math.Float32frombits(v))
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGateway
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGateway
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGateway(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGateway
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attributes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BootTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.BootTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Versions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Versions == nil {
				m.Versions = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGateway
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGateway
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGateway(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGateway
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Versions[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AntennaLocations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AntennaLocations = append(m.AntennaLocations, &Location{})
			if err := m.AntennaLocations[len(m.AntennaLocations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = append(m.IP, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metrics == nil {
				m.Metrics = make(map[string]float32)
			}
			var mapkey string
			var mapvalue float32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGateway
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					mapvaluetemp = encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:])
					iNdEx += 4
					mapvalue = math.Float32frombits(mapvaluetemp)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGateway(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGateway
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metrics[mapkey] = mapvalue
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Advanced", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Advanced == nil {
				m.Advanced = &types.Struct{}
			}
			if err := m.Advanced.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayConnectionStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayConnectionStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayConnectionStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConnectedAt == nil {
				m.ConnectedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ConnectedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastStatusReceivedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastStatusReceivedAt == nil {
				m.LastStatusReceivedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastStatusReceivedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastStatus == nil {
				m.LastStatus = &GatewayStatus{}
			}
			if err := m.LastStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUplinkReceivedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastUplinkReceivedAt == nil {
				m.LastUplinkReceivedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastUplinkReceivedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplinkCount", wireType)
			}
			m.UplinkCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UplinkCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastDownlinkReceivedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastDownlinkReceivedAt == nil {
				m.LastDownlinkReceivedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastDownlinkReceivedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkCount", wireType)
			}
			m.DownlinkCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DownlinkCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGateway(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGateway
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGateway(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGateway = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGateway   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("lorawan-stack/api/gateway.proto", fileDescriptor_gateway_31a6f1d9453c83a3)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/gateway.proto", fileDescriptor_gateway_31a6f1d9453c83a3)
}

var fileDescriptor_gateway_31a6f1d9453c83a3 = []byte{
	// 2111 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0x4d, 0x6c, 0x1b, 0xc7,
	0x15, 0xe6, 0x92, 0xb4, 0x44, 0x3e, 0xea, 0xcf, 0x13, 0x55, 0x59, 0x2b, 0xf6, 0x52, 0x61, 0x1c,
	0x47, 0x72, 0x4d, 0xaa, 0x95, 0xdd, 0x20, 0x51, 0x50, 0xab, 0x94, 0x64, 0x1b, 0x44, 0xec, 0xda,
	0x5d, 0x59, 0x35, 0x60, 0x27, 0xd9, 0x0e, 0x77, 0x87, 0xe4, 0x40, 0xcb, 0x5d, 0x76, 0x77, 0x56,
	0xb2, 0xdc, 0x14, 0xc8, 0x21, 0x40, 0x73, 0xe8, 0x21, 0x28, 0x7a, 0xe8, 0x31, 0x68, 0x81, 0xc2,
	0x87, 0xa2, 0xc8, 0xa9, 0xf0, 0x31, 0x45, 0x2f, 0x3e, 0x14, 0x85, 0x8f, 0x41, 0x0f, 0x4a, 0x44,
	0x5d, 0xd2, 0x53, 0x83, 0x9e, 0x72, 0x2c, 0x66, 0x76, 0x76, 0xb9, 0xa4, 0x2c, 0x45, 0xb6, 0xe3,
	0xdb, 0xec, 0x7b, 0xdf, 0x7b, 0xef, 0x9b, 0x37, 0x33, 0x6f, 0xde, 0x2c, 0x14, 0x6d, 0xd7, 0xc3,
	0x5b, 0xd8, 0x29, 0xfb, 0x0c, 0x9b, 0x1b, 0xf3, 0xb8, 0x43, 0xe7, 0x9b, 0x98, 0x91, 0x2d, 0xbc,
	0x5d, 0xe9, 0x78, 0x2e, 0x73, 0xd1, 0x18, 0x63, 0x4e, 0x45, 0x82, 0x2a, 0x9b, 0xe7, 0xa7, 0xcb,
	0x4d, 0xca, 0x5a, 0x41, 0xbd, 0x62, 0xba, 0xed, 0xf9, 0xa6, 0xdb, 0x74, 0xe7, 0x05, 0xac, 0x1e,
	0x34, 0xc4, 0x97, 0xf8, 0x10, 0xa3, 0xd0, 0x7c, 0xfa, 0xf5, 0x04, 0xbc, 0xbd, 0x45, 0xd9, 0x86,
	0xbb, 0x35, 0xdf, 0x74, 0xcb, 0x42, 0x59, 0xde, 0xc4, 0x36, 0xb5, 0x30, 0x73, 0x3d, 0x7f, 0x3e,
	0x1e, 0x4a, 0xbb, 0x99, 0xa6, 0xeb, 0x36, 0x6d, 0xd2, 0xf3, 0xde, 0xa0, 0xc4, 0xb6, 0x8c, 0x36,
	0xf6, 0x37, 0x24, 0xe2, 0xe4, 0x20, 0xc2, 0x67, 0x5e, 0x60, 0x32, 0xa9, 0x2d, 0x0e, 0x6a, 0x19,
	0x6d, 0x13, 0x9f, 0xe1, 0x76, 0x47, 0x02, 0x4e, 0xef, 0x9f, 0xb8, 0xe9, 0x3a, 0x0c, 0x9b, 0xcc,
	0xa0, 0x4e, 0x23, 0xa2, 0x7f, 0x6a, 0x3f, 0x8a, 0x38, 0x41, 0xdb, 0x97, 0xea, 0x57, 0xf6, 0xab,
	0xa9, 0x45, 0x1c, 0x46, 0x1b, 0x94, 0x78, 0x11, 0x68, 0x66, 0x3f, 0xa8, 0x4d, 0x18, 0xb6, 0x30,
	0xc3, 0x12, 0xa1, 0xed, 0x47, 0x78, 0xb4, 0xd9, 0x62, 0xd2, 0x43, 0x69, 0x03, 0x46, 0xae, 0x84,
	0x8b, 0xb2, 0xec, 0x61, 0xc7, 0x42, 0x53, 0x90, 0xa6, 0x96, 0xaa, 0xcc, 0x28, 0xb3, 0xf9, 0xe5,
	0xa1, 0xee, 0x4e, 0x31, 0x5d, 0x5b, 0xd5, 0xd3, 0xd4, 0x42, 0x08, 0xb2, 0x0e, 0x6e, 0x13, 0x35,
	0xcd, 0x35, 0xba, 0x18, 0xa3, 0x13, 0x90, 0x09, 0x3c, 0x5b, 0xcd, 0x08, 0xf0, 0x70, 0x77, 0xa7,
	0x98, 0x59, 0xd7, 0xaf, 0xea, 0x5c, 0x86, 0x26, 0xe1, 0x98, 0xed, 0x36, 0x5d, 0x5f, 0xcd, 0xce,
	0x64, 0x66, 0xf3, 0x7a, 0xf8, 0x51, 0xaa, 0xc7, 0xc1, 0xae, 0xb9, 0x16, 0xb1, 0xd1, 0x19, 0xc8,
	0xd5, 0x79, 0x54, 0x23, 0x0e, 0x59, 0xe8, 0xee, 0x14, 0x87, 0x05, 0x93, 0xda, 0xaa, 0x3e, 0x2c,
	0x94, 0xb5, 0x88, 0x54, 0xfa, 0x40, 0x52, 0x99, 0x1e, 0xa9, 0xd2, 0xdf, 0x15, 0x38, 0x21, 0x83,
	0xfc, 0x9c, 0x78, 0x3e, 0x75, 0x9d, 0x5a, 0x2f, 0x6d, 0x47, 0x8e, 0x78, 0x06, 0x72, 0x6d, 0x4e,
	0xd1, 0x88, 0xe3, 0x0a, 0x9c, 0xa0, 0xcd, 0x71, 0x42, 0x59, 0xb3, 0xd0, 0x1c, 0x4c, 0xb4, 0xb0,
	0x67, 0x6d, 0x61, 0x8f, 0x18, 0x9b, 0x61, 0x38, 0xc9, 0x66, 0x3c, 0x92, 0x4b, 0x16, 0x1c, 0xda,
	0xa0, 0x5e, 0xbb, 0x0f, 0x9a, 0x0d, 0xa1, 0x91, 0x5c, 0x42, 0x4b, 0xff, 0x4b, 0xc7, 0x89, 0xd2,
	0xb1, 0x45, 0x5d, 0x34, 0x05, 0x43, 0xc4, 0xc1, 0x75, 0x9b, 0x08, 0xd2, 0x39, 0x5d, 0x7e, 0xa1,
	0x97, 0x20, 0x6f, 0xb6, 0x68, 0xc7, 0x60, 0xdb, 0x9d, 0x68, 0x69, 0x72, 0x5c, 0x70, 0x73, 0xbb,
	0x43, 0xd0, 0x49, 0xc8, 0x37, 0x3c, 0xf2, 0xcb, 0x80, 0x38, 0xe6, 0xb6, 0x20, 0x95, 0xd5, 0x7b,
	0x02, 0x34, 0x0f, 0x05, 0xcf, 0xf7, 0xa9, 0xe1, 0x36, 0x1a, 0x3e, 0x61, 0x82, 0x49, 0x7a, 0x79,
	0xac, 0xbb, 0x53, 0x04, 0x7d, 0x6d, 0xad, 0x76, 0x5d, 0x48, 0x75, 0xe0, 0x90, 0x70, 0x8c, 0x6e,
	0xc1, 0x04, 0xbb, 0x6b, 0x98, 0xae, 0xd3, 0xa0, 0xcd, 0xc0, 0xc3, 0x8c, 0xf3, 0x3f, 0x36, 0xa3,
	0xcc, 0x16, 0x16, 0xce, 0x55, 0xfa, 0x0f, 0x72, 0x25, 0xc9, 0xbd, 0x72, 0xf3, 0xee, 0x4a, 0xd2,
	0x46, 0x1f, 0x67, 0xfd, 0x82, 0xe9, 0x0f, 0x15, 0x18, 0x1f, 0x00, 0xa1, 0x57, 0x60, 0xb4, 0x4d,
	0x1d, 0xa3, 0xc7, 0x5f, 0x11, 0xfc, 0x47, 0xda, 0xd4, 0xb9, 0x1c, 0x4f, 0x81, 0x83, 0xf0, 0xdd,
	0x04, 0x28, 0x2d, 0x41, 0xf8, 0x6e, 0x0f, 0xf4, 0x1a, 0x8c, 0x3b, 0x2e, 0x33, 0x5b, 0xc6, 0x60,
	0x2e, 0xc6, 0x84, 0x38, 0x06, 0x96, 0xfe, 0xa5, 0xc0, 0x58, 0xff, 0xc6, 0x41, 0x97, 0x20, 0x43,
	0x2d, 0x5f, 0xc4, 0x2e, 0x2c, 0xcc, 0x1d, 0x30, 0xcb, 0xfd, 0xbb, 0x6c, 0x39, 0xf7, 0x70, 0xa7,
	0x98, 0x7a, 0xb4, 0x53, 0x54, 0x74, 0x6e, 0xcf, 0x57, 0xaf, 0xd3, 0x72, 0x99, 0xeb, 0xab, 0x69,
	0x71, 0x1a, 0xe4, 0x17, 0xba, 0x00, 0x43, 0x1e, 0x4f, 0x91, 0xaf, 0x66, 0x66, 0x32, 0xb3, 0x85,
	0x85, 0x93, 0x87, 0xe5, 0x51, 0x97, 0x58, 0xf4, 0x32, 0x8c, 0x98, 0xb6, 0x6b, 0x6e, 0x18, 0xbe,
	0x1b, 0x78, 0x26, 0x51, 0x87, 0x67, 0x94, 0xd9, 0x51, 0xbd, 0x20, 0x64, 0x6b, 0x42, 0xb4, 0x98,
	0x7d, 0xf0, 0x49, 0x31, 0x55, 0xfa, 0x67, 0x1e, 0x86, 0xa5, 0x07, 0x74, 0x31, 0x39, 0x93, 0xd2,
	0x01, 0x71, 0x0e, 0x99, 0xc2, 0x0a, 0x80, 0xe9, 0x11, 0xcc, 0x88, 0x65, 0x60, 0x26, 0xf2, 0x5c,
	0x58, 0x98, 0xae, 0x84, 0x85, 0xb0, 0x12, 0x15, 0xc2, 0xca, 0xcd, 0xa8, 0x10, 0x86, 0xe6, 0x1f,
	0x7f, 0x51, 0x54, 0xf4, 0xbc, 0xb4, 0xab, 0x32, 0xee, 0x24, 0xe8, 0x58, 0x91, 0x93, 0xcc, 0x93,
	0x38, 0x91, 0x76, 0x55, 0x16, 0x9f, 0xf9, 0x6c, 0xa2, 0x10, 0xcd, 0x40, 0xc1, 0x22, 0xbe, 0xe9,
	0xd1, 0x4e, 0xbc, 0x2b, 0xf3, 0x7a, 0x52, 0x84, 0xae, 0x00, 0x60, 0xc6, 0x3c, 0x5a, 0x0f, 0x18,
	0xf1, 0xd5, 0x21, 0x91, 0xee, 0xd7, 0x0e, 0x48, 0x43, 0xa5, 0x1a, 0x23, 0x2f, 0x39, 0xcc, 0xdb,
	0xd6, 0x13, 0xa6, 0xe8, 0x22, 0x8c, 0x24, 0x6b, 0xb9, 0x3a, 0x2c, 0x5c, 0xbd, 0x34, 0xe8, 0x6a,
	0x25, 0xc4, 0xd4, 0x9c, 0x86, 0xab, 0x17, 0xcc, 0xde, 0x07, 0xba, 0x09, 0x05, 0x79, 0xf8, 0x0d,
	0xbe, 0x20, 0xb9, 0xa7, 0xdf, 0x5a, 0xb0, 0x19, 0x69, 0x7d, 0xf4, 0x0f, 0x05, 0xa6, 0xe4, 0xdd,
	0x6a, 0xf8, 0xc4, 0xdb, 0x24, 0x9e, 0x81, 0x2d, 0xcb, 0x23, 0xbe, 0xaf, 0xe6, 0x45, 0xf5, 0xfa,
	0xad, 0xd2, 0xfd, 0xa2, 0xf8, 0x1b, 0x05, 0x3e, 0x54, 0xde, 0x9b, 0x5d, 0x5a, 0x9c, 0x5d, 0x5a,
	0xbc, 0x83, 0xcb, 0xf7, 0xaa, 0xe5, 0xdb, 0x3f, 0x28, 0xbf, 0xf9, 0xee, 0xfb, 0x89, 0x71, 0x6f,
	0xf8, 0x4e, 0xf9, 0xdd, 0xb3, 0x09, 0xc5, 0xdc, 0x3b, 0x95, 0xb9, 0xb3, 0xdc, 0xae, 0x5a, 0xbe,
	0x8d, 0xcb, 0xf7, 0x42, 0xbb, 0xde, 0xb8, 0x37, 0x14, 0x76, 0x3d, 0xc5, 0xdc, 0xec, 0xd2, 0xe2,
	0xe2, 0x1d, 0x3e, 0xfa, 0xd5, 0x0f, 0xcf, 0xfd, 0xe8, 0xd7, 0x73, 0x4b, 0xa7, 0xdf, 0x7f, 0xef,
	0xb4, 0x3e, 0x29, 0xc9, 0xae, 0x09, 0xae, 0xd5, 0x90, 0x2a, 0x2a, 0x42, 0x01, 0x07, 0xcc, 0x35,
	0xc2, 0xc5, 0x56, 0x41, 0x94, 0x3a, 0xe0, 0xa2, 0x75, 0x21, 0x41, 0xaf, 0xc2, 0x58, 0xa8, 0x33,
	0xcc, 0x16, 0x76, 0x1c, 0x62, 0xab, 0x05, 0xb1, 0xd4, 0xa3, 0xa1, 0x74, 0x25, 0x14, 0xa2, 0x25,
	0x38, 0x1e, 0x1f, 0x76, 0xa3, 0x63, 0x63, 0x9e, 0x6a, 0x75, 0x44, 0xe4, 0xe1, 0x85, 0xee, 0x4e,
	0x71, 0x3c, 0x3e, 0xf3, 0x37, 0x6c, 0xec, 0xd4, 0x56, 0xf5, 0xf1, 0x46, 0x9f, 0xc0, 0x42, 0x3f,
	0x81, 0x1c, 0x76, 0x18, 0x71, 0x1c, 0xec, 0xab, 0xa3, 0x62, 0x81, 0xb5, 0x03, 0x56, 0xa8, 0x1a,
	0xc2, 0x96, 0xb3, 0x7c, 0x59, 0xf4, 0xd8, 0x8a, 0x97, 0x26, 0x9f, 0x61, 0x16, 0xf8, 0x46, 0x27,
	0xa8, 0xdb, 0xd4, 0x54, 0xc7, 0xc4, 0x64, 0x46, 0x42, 0xe1, 0x0d, 0x21, 0xe3, 0xa5, 0xc9, 0x76,
	0x4d, 0x51, 0xf0, 0x22, 0xd8, 0xb8, 0x80, 0x8d, 0x45, 0x62, 0x09, 0xbc, 0x00, 0x53, 0xbe, 0xd9,
	0x22, 0x56, 0x60, 0x13, 0xc3, 0x72, 0xb7, 0x1c, 0x9b, 0x3a, 0x1b, 0x86, 0xcd, 0x73, 0x34, 0x21,
	0xf0, 0x93, 0x91, 0x76, 0x55, 0x2a, 0xaf, 0xf2, 0x6c, 0x9d, 0x03, 0x44, 0x9c, 0x86, 0xeb, 0x99,
	0xc4, 0xb0, 0x02, 0xb6, 0x6d, 0x98, 0xdb, 0xa6, 0x4d, 0xd4, 0xe3, 0xc2, 0x62, 0x42, 0x6a, 0x56,
	0x03, 0xb6, 0xbd, 0xc2, 0xe5, 0xe8, 0x17, 0xa0, 0xc6, 0xae, 0x3b, 0x98, 0xb5, 0x78, 0xa5, 0xf7,
	0x99, 0x87, 0xa9, 0xc3, 0x54, 0x34, 0xa3, 0xcc, 0x8e, 0x2d, 0x9c, 0x19, 0xcc, 0x41, 0x14, 0xed,
	0x06, 0x66, 0xad, 0x95, 0x18, 0xad, 0x4f, 0x59, 0x8f, 0x95, 0x4f, 0xff, 0x18, 0xc6, 0x07, 0x4e,
	0x16, 0x9a, 0x80, 0xcc, 0x06, 0x09, 0x8b, 0x7b, 0x5e, 0xe7, 0x43, 0xde, 0x38, 0x6c, 0x62, 0x3b,
	0x88, 0x6e, 0xb3, 0xf0, 0x63, 0x31, 0xfd, 0x86, 0x52, 0x5a, 0x82, 0x9c, 0x4c, 0xba, 0x8f, 0xce,
	0x43, 0x4e, 0xee, 0x20, 0x5e, 0xd3, 0xf8, 0x02, 0xbd, 0x78, 0x50, 0xed, 0x8c, 0x81, 0xa5, 0x3f,
	0x29, 0x70, 0xfc, 0x0a, 0x61, 0x91, 0x82, 0x2f, 0xb9, 0xcf, 0xd0, 0x35, 0x28, 0x44, 0x27, 0xe7,
	0x69, 0x2b, 0x24, 0x34, 0x23, 0xad, 0x8f, 0x96, 0x00, 0x7a, 0xed, 0xe4, 0x81, 0x85, 0xf2, 0x32,
	0x87, 0x5c, 0xc3, 0xfe, 0x86, 0xdc, 0x38, 0xf9, 0x46, 0x24, 0x28, 0x6d, 0x43, 0xa9, 0x47, 0x32,
	0x11, 0xef, 0xb2, 0xeb, 0x5d, 0x5a, 0xaf, 0x45, 0xac, 0xd7, 0x20, 0x43, 0x02, 0x2a, 0xd8, 0x8e,
	0x2c, 0x57, 0xb9, 0x8f, 0x7f, 0xef, 0x14, 0x17, 0x9a, 0x6e, 0x85, 0xb5, 0x08, 0x6b, 0x51, 0xa7,
	0xe9, 0x57, 0x1c, 0xc2, 0xb6, 0x5c, 0x6f, 0x63, 0xbe, 0xbf, 0x01, 0xec, 0x6c, 0x34, 0xe7, 0x79,
	0xb7, 0xe0, 0x57, 0x2e, 0xad, 0xd7, 0x5e, 0xbf, 0xc0, 0x9b, 0x36, 0xee, 0x96, 0x7b, 0x2b, 0xfd,
	0x47, 0x81, 0x17, 0xae, 0x52, 0x3f, 0x0a, 0xee, 0x47, 0xc1, 0x7e, 0xc6, 0x6b, 0x9e, 0x6d, 0xe3,
	0xba, 0xeb, 0xf1, 0x36, 0x5a, 0xe6, 0xa8, 0x3c, 0x98, 0xa3, 0xeb, 0x5e, 0x13, 0x3b, 0xf4, 0x9e,
	0xd8, 0xb8, 0xd7, 0xbd, 0x75, 0x9f, 0x78, 0x09, 0xfa, 0x7a, 0x9f, 0x8b, 0x67, 0x4e, 0x13, 0xdf,
	0x27, 0xae, 0x67, 0x11, 0x4f, 0x76, 0x5b, 0xe1, 0x87, 0x68, 0x3b, 0x69, 0x9b, 0x86, 0xed, 0xcc,
	0xa8, 0x1e, 0x7e, 0xf0, 0x2b, 0xa3, 0x83, 0x9b, 0x44, 0xdc, 0x0b, 0xa3, 0xba, 0x18, 0x97, 0xfe,
	0xa2, 0xc0, 0xe4, 0x8a, 0xb8, 0x99, 0x06, 0xf6, 0xc3, 0x5b, 0x30, 0x2c, 0x97, 0x53, 0xce, 0xf3,
	0xa0, 0x9d, 0x95, 0xd8, 0x00, 0x91, 0x05, 0xba, 0x35, 0x90, 0xa9, 0xf4, 0x53, 0x64, 0x4a, 0xce,
	0xb5, 0xcf, 0x51, 0xe9, 0xf7, 0x0a, 0x4c, 0x86, 0x45, 0xf0, 0xbb, 0xa4, 0xfb, 0xcc, 0x9b, 0xf5,
	0xaf, 0x0a, 0x4c, 0xf7, 0x65, 0xb1, 0x7a, 0xa3, 0xf6, 0x36, 0x79, 0x5e, 0x67, 0xeb, 0x71, 0x6f,
	0x90, 0x32, 0x0c, 0x85, 0xef, 0x19, 0xd1, 0x43, 0x8d, 0x2d, 0x7c, 0x6f, 0xd0, 0xbb, 0xce, 0xb5,
	0xba, 0x04, 0x95, 0xfe, 0xac, 0xc0, 0x74, 0x5f, 0x1e, 0x9f, 0x2b, 0xe1, 0x37, 0x61, 0x18, 0x77,
	0xa8, 0xc1, 0x4b, 0x5c, 0x98, 0xdc, 0xa9, 0x41, 0x57, 0x61, 0xf8, 0x84, 0xf9, 0x10, 0xee, 0xd0,
	0xb7, 0xc9, 0x76, 0xe9, 0x6f, 0x0a, 0x9c, 0x5a, 0x8b, 0xeb, 0xc0, 0x4a, 0x62, 0x2f, 0x3c, 0x27,
	0xae, 0x97, 0x1f, 0xbb, 0x75, 0x4f, 0xee, 0x6f, 0x6c, 0x7a, 0x98, 0xc7, 0xee, 0xd4, 0xff, 0xf6,
	0xda, 0x68, 0x79, 0x39, 0xf2, 0x75, 0x6b, 0x62, 0xea, 0x08, 0x8a, 0x69, 0x5d, 0x8c, 0xd1, 0x22,
	0xe4, 0xa2, 0x4b, 0x4e, 0x86, 0x52, 0x07, 0x43, 0x5d, 0x95, 0xfa, 0xe8, 0x72, 0x8d, 0xf0, 0xe8,
	0xa7, 0x7d, 0xcd, 0x5c, 0xd8, 0x3b, 0x57, 0x0e, 0xbf, 0xa0, 0x0f, 0xeb, 0xe9, 0x9e, 0xf5, 0x62,
	0xba, 0x9f, 0x85, 0x51, 0x19, 0x6d, 0x4d, 0x5c, 0xef, 0xe8, 0x0d, 0xc8, 0x32, 0xda, 0x26, 0x72,
	0x4d, 0x8e, 0xd6, 0xe2, 0x0a, 0x0b, 0x54, 0x85, 0x7c, 0xdd, 0x75, 0x99, 0x21, 0xcc, 0x9f, 0xa4,
	0xcd, 0xce, 0x71, 0x33, 0xae, 0x40, 0x57, 0x20, 0x27, 0x3b, 0xc3, 0x28, 0x37, 0xdf, 0x3f, 0x20,
	0x37, 0x21, 0xdb, 0x8a, 0xec, 0x32, 0x65, 0x62, 0x62, 0x63, 0x74, 0x09, 0x8e, 0xcb, 0x7e, 0xc6,
	0x88, 0x52, 0x1f, 0xbe, 0xe7, 0x0f, 0x59, 0x2b, 0x7d, 0x42, 0x9a, 0x44, 0x02, 0x5f, 0x3c, 0xde,
	0x3b, 0xea, 0x31, 0xfe, 0xf2, 0x91, 0x8f, 0xf7, 0x1b, 0x7a, 0x9a, 0x76, 0xd0, 0x2a, 0x0c, 0xb7,
	0x09, 0xf3, 0xa8, 0x19, 0xf5, 0xe3, 0x67, 0x0f, 0xa7, 0x79, 0x2d, 0x04, 0x87, 0x2c, 0x23, 0x53,
	0xde, 0x09, 0x60, 0x6b, 0x13, 0x3b, 0x26, 0xb1, 0x54, 0x53, 0x16, 0xc0, 0xc1, 0x7c, 0xad, 0x89,
	0xbf, 0x37, 0x7a, 0x0c, 0x9c, 0x7e, 0x0b, 0x46, 0xfb, 0x26, 0xfd, 0x24, 0xcb, 0x3d, 0xbd, 0x08,
	0x23, 0x49, 0x2a, 0xdf, 0x66, 0x9b, 0x4e, 0x6e, 0x95, 0xdf, 0x65, 0x61, 0x2a, 0x3e, 0xd2, 0x8e,
	0x43, 0x4c, 0x9e, 0x22, 0x3e, 0x3f, 0xfe, 0xc2, 0xe2, 0x0f, 0x0b, 0x2e, 0x0a, 0x9f, 0x47, 0xdf,
	0xbe, 0x77, 0xb2, 0x62, 0xe1, 0x0b, 0xb1, 0x55, 0x95, 0xa1, 0x69, 0xc8, 0x09, 0xa0, 0xe9, 0xda,
	0xd1, 0xef, 0x80, 0xe8, 0x1b, 0xdd, 0x82, 0x17, 0x6d, 0xec, 0x33, 0x43, 0xf6, 0xa5, 0x1e, 0x31,
	0x09, 0xdd, 0x3c, 0xea, 0x53, 0x2c, 0x8c, 0x35, 0xc9, 0x1d, 0x84, 0xcb, 0xa1, 0x4b, 0xf3, 0x2a,
	0x43, 0x17, 0xa1, 0x90, 0x70, 0x2c, 0xae, 0xde, 0xc2, 0xc2, 0xa9, 0x43, 0x17, 0x53, 0x87, 0x9e,
	0xa7, 0x98, 0x58, 0xd0, 0x11, 0xcd, 0x67, 0x92, 0xd8, 0xb1, 0x27, 0x21, 0xb6, 0x2e, 0xec, 0x13,
	0xc4, 0x5e, 0x86, 0x11, 0xe9, 0xd3, 0x74, 0x03, 0x87, 0xa9, 0x43, 0xe2, 0xdd, 0x5f, 0x08, 0x65,
	0x2b, 0x5c, 0x84, 0xee, 0xc0, 0x09, 0x11, 0x3b, 0x6e, 0x7d, 0x93, 0xd1, 0x87, 0x8f, 0x18, 0x7d,
	0x8a, 0xbb, 0x88, 0x9a, 0xe1, 0x44, 0xfc, 0x57, 0x61, 0x2c, 0xf6, 0x1b, 0x32, 0xc8, 0x09, 0x06,
	0xa3, 0x91, 0x54, 0x70, 0x58, 0xfe, 0xa3, 0xf2, 0x70, 0x57, 0x53, 0x1e, 0xed, 0x6a, 0xca, 0xe7,
	0xbb, 0x5a, 0xea, 0xcb, 0x5d, 0x2d, 0xf5, 0xd5, 0xae, 0x96, 0xfa, 0x7a, 0x57, 0x4b, 0x7d, 0xb3,
	0xab, 0x29, 0x1f, 0x74, 0x35, 0xe5, 0xa3, 0xae, 0x96, 0xba, 0xdf, 0xd5, 0x94, 0x4f, 0xbb, 0x5a,
	0xea, 0x41, 0x57, 0x4b, 0x7d, 0xd6, 0xd5, 0x52, 0x0f, 0xbb, 0x9a, 0xf2, 0xa8, 0xab, 0x29, 0x9f,
	0x77, 0xb5, 0xd4, 0x97, 0x5d, 0x4d, 0xf9, 0xaa, 0xab, 0xa5, 0xbe, 0xee, 0x6a, 0xca, 0x37, 0x5d,
	0x2d, 0xf5, 0xc1, 0x9e, 0x96, 0xfa, 0x68, 0x4f, 0x53, 0x3e, 0xde, 0xd3, 0x52, 0x7f, 0xd8, 0xd3,
	0x94, 0x4f, 0xf6, 0xb4, 0xd4, 0xfd, 0x3d, 0x2d, 0xf5, 0xe9, 0x9e, 0xa6, 0x3c, 0xd8, 0xd3, 0x94,
	0xcf, 0xf6, 0x34, 0xe5, 0xf6, 0xb9, 0xa3, 0x76, 0x8b, 0xcc, 0xe9, 0xd4, 0xeb, 0x43, 0x62, 0xf6,
	0xe7, 0xff, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xff, 0xdf, 0x6a, 0xa8, 0xd5, 0x15, 0x00, 0x00,
}
