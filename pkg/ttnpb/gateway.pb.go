// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/TheThingsNetwork/ttn/api/gateway.proto

package ttnpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"
import google_protobuf3 "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/types"

import time "time"

import strconv "strconv"

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// GatewayAntennaPlacement enum defines whether if the gateway antenna is placed
// indoors or outdoors.
type GatewayAntennaPlacement int32

const (
	// The antenna is placed indoors.
	PLACEMENT_INDOOR GatewayAntennaPlacement = 0
	// The antenna is placed outdoors.
	PLACEMENT_OUTDOOR GatewayAntennaPlacement = 1
)

var GatewayAntennaPlacement_name = map[int32]string{
	0: "PLACEMENT_INDOOR",
	1: "PLACEMENT_OUTDOOR",
}
var GatewayAntennaPlacement_value = map[string]int32{
	"PLACEMENT_INDOOR":  0,
	"PLACEMENT_OUTDOOR": 1,
}

func (GatewayAntennaPlacement) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorGateway, []int{0}
}

// Gateway is the message that defines a gateway on the network.
type Gateway struct {
	// id is the Gateway's ID.
	ID string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// description is the description of the gateway.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// token is a valid token that can identify the gateway with other components
	// that have the IS's decryption keys.
	Token string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	// frequency_plan_id indicates the ID of the frequency plan.
	FrequencyPlanID string `protobuf:"bytes,4,opt,name=frequency_plan_id,json=frequencyPlanId,proto3" json:"frequency_plan_id,omitempty" db:"frequency_plan"`
	// activated_at denotes when the gateway was activated.
	ActivatedAt *time.Time `protobuf:"bytes,5,opt,name=activated_at,json=activatedAt,stdtime" json:"activated_at,omitempty"`
	// privacy_settings defines the different privacy settings for this gateway.
	PrivacySettings GatewayPrivacySettings `protobuf:"bytes,6,opt,name=privacy_settings,json=privacySettings" json:"privacy_settings"`
	// auto_update indicates whether or not the gateway should be able to
	// automatically fetch and execute firmware updates.
	AutoUpdate bool `protobuf:"varint,7,opt,name=auto_update,json=autoUpdate,proto3" json:"auto_update,omitempty" db:"auto_update"`
	// platform is the gateway platform, e.g. "The Things Gateway" or "Kerklink iBTS"
	Platform string `protobuf:"bytes,8,opt,name=platform,proto3" json:"platform,omitempty"`
	// antennas is all the antennas that the gateway has.
	Antennas []GatewayAntenna `protobuf:"bytes,9,rep,name=antennas" json:"antennas"`
	// attributes is a free form map of attributes.
	Attributes map[string]string `protobuf:"bytes,10,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// cluster_address indicates the URI of the gateway server cluster to connect to,
	// in a "<ip>:<port>" format.
	ClusterAddress string `protobuf:"bytes,11,opt,name=cluster_address,json=clusterAddress,proto3" json:"cluster_address,omitempty" db:"cluster_address"`
	// created_at is the time when the gateway was created.
	CreatedAt time.Time `protobuf:"bytes,12,opt,name=created_at,json=createdAt,stdtime" json:"created_at"`
	// deleted_at is the time when the gateway was deleted.
	DeletedAt time.Time `protobuf:"bytes,13,opt,name=deleted_at,json=deletedAt,stdtime" json:"deleted_at"`
}

func (m *Gateway) Reset()                    { *m = Gateway{} }
func (*Gateway) ProtoMessage()               {}
func (*Gateway) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{0} }

func (m *Gateway) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Gateway) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Gateway) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Gateway) GetFrequencyPlanID() string {
	if m != nil {
		return m.FrequencyPlanID
	}
	return ""
}

func (m *Gateway) GetActivatedAt() *time.Time {
	if m != nil {
		return m.ActivatedAt
	}
	return nil
}

func (m *Gateway) GetPrivacySettings() GatewayPrivacySettings {
	if m != nil {
		return m.PrivacySettings
	}
	return GatewayPrivacySettings{}
}

func (m *Gateway) GetAutoUpdate() bool {
	if m != nil {
		return m.AutoUpdate
	}
	return false
}

func (m *Gateway) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *Gateway) GetAntennas() []GatewayAntenna {
	if m != nil {
		return m.Antennas
	}
	return nil
}

func (m *Gateway) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Gateway) GetClusterAddress() string {
	if m != nil {
		return m.ClusterAddress
	}
	return ""
}

func (m *Gateway) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *Gateway) GetDeletedAt() time.Time {
	if m != nil {
		return m.DeletedAt
	}
	return time.Time{}
}

// GatewayPrivacySettings is the message that defines the different privacy settings
// of the gateway such as if the owner information or gateway location are public.
type GatewayPrivacySettings struct {
	// status_public denotes whether or not the gateway's status is public or not.
	StatusPublic bool `protobuf:"varint,1,opt,name=status_public,json=statusPublic,proto3" json:"status_public,omitempty"`
	// location_public denotes whether or not the gateway's location is public.
	LocationPublic bool `protobuf:"varint,2,opt,name=location_public,json=locationPublic,proto3" json:"location_public,omitempty"`
	// owner_public denotes whether or not the gateway owner is public.
	OwnerPublic bool `protobuf:"varint,3,opt,name=owner_public,json=ownerPublic,proto3" json:"owner_public,omitempty"`
}

func (m *GatewayPrivacySettings) Reset()                    { *m = GatewayPrivacySettings{} }
func (*GatewayPrivacySettings) ProtoMessage()               {}
func (*GatewayPrivacySettings) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{1} }

func (m *GatewayPrivacySettings) GetStatusPublic() bool {
	if m != nil {
		return m.StatusPublic
	}
	return false
}

func (m *GatewayPrivacySettings) GetLocationPublic() bool {
	if m != nil {
		return m.LocationPublic
	}
	return false
}

func (m *GatewayPrivacySettings) GetOwnerPublic() bool {
	if m != nil {
		return m.OwnerPublic
	}
	return false
}

// GatewayAntenna is the message that defines a gateway antenna.
type GatewayAntenna struct {
	// id is the gateway antenna's autogenerated ID.
	ID string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// gain is the antenna gain relative to this gateway, in dBi.
	Gain float32 `protobuf:"fixed32,2,opt,name=gain,proto3" json:"gain,omitempty"`
	// location is the antenna's location.
	Location Location `protobuf:"bytes,3,opt,name=location" json:"location"`
	// type denotes the antenna's type.
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// model denotes the antenna's model.
	Model string `protobuf:"bytes,5,opt,name=model,proto3" json:"model,omitempty"`
	// placement denotes whether if the antenna is placed indoors or outdoors.
	Placement GatewayAntennaPlacement `protobuf:"varint,6,opt,name=placement,proto3,enum=ttn.v3.GatewayAntennaPlacement" json:"placement,omitempty"`
}

func (m *GatewayAntenna) Reset()                    { *m = GatewayAntenna{} }
func (*GatewayAntenna) ProtoMessage()               {}
func (*GatewayAntenna) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{2} }

func (m *GatewayAntenna) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *GatewayAntenna) GetGain() float32 {
	if m != nil {
		return m.Gain
	}
	return 0
}

func (m *GatewayAntenna) GetLocation() Location {
	if m != nil {
		return m.Location
	}
	return Location{}
}

func (m *GatewayAntenna) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *GatewayAntenna) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *GatewayAntenna) GetPlacement() GatewayAntennaPlacement {
	if m != nil {
		return m.Placement
	}
	return PLACEMENT_INDOOR
}

// GatewayConfiguration contains all the latest values relative to this gateway.
type GatewayConfiguration struct {
	// token is a valid token that can identify the gateway with other components
	// that have the IS's decryption keys.
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// frequency_plan_id indicates the ID of the frequency plan.
	FrequencyPlanID string `protobuf:"bytes,2,opt,name=frequency_plan_id,json=frequencyPlanId,proto3" json:"frequency_plan_id,omitempty"`
	// cluster_address indicates the URI of the gateway server cluster to connect to,
	// in a "<ip>:<port>" format.
	ClusterAddress string                                             `protobuf:"bytes,3,opt,name=cluster_address,json=clusterAddress,proto3" json:"cluster_address,omitempty"`
	Antennas       []GatewayConfiguration_GatewayAntennaConfiguration `protobuf:"bytes,4,rep,name=antennas" json:"antennas"`
	Radios         []GatewayConfiguration_Radio                       `protobuf:"bytes,6,rep,name=radios" json:"radios"`
}

func (m *GatewayConfiguration) Reset()                    { *m = GatewayConfiguration{} }
func (*GatewayConfiguration) ProtoMessage()               {}
func (*GatewayConfiguration) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{3} }

func (m *GatewayConfiguration) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *GatewayConfiguration) GetFrequencyPlanID() string {
	if m != nil {
		return m.FrequencyPlanID
	}
	return ""
}

func (m *GatewayConfiguration) GetClusterAddress() string {
	if m != nil {
		return m.ClusterAddress
	}
	return ""
}

func (m *GatewayConfiguration) GetAntennas() []GatewayConfiguration_GatewayAntennaConfiguration {
	if m != nil {
		return m.Antennas
	}
	return nil
}

func (m *GatewayConfiguration) GetRadios() []GatewayConfiguration_Radio {
	if m != nil {
		return m.Radios
	}
	return nil
}

type GatewayConfiguration_GatewayAntennaConfiguration struct {
	// antenna_gain is the antenna gain relative to this gateway, in dBi
	AntennaGain float32 `protobuf:"fixed32,1,opt,name=antenna_gain,json=antennaGain,proto3" json:"antenna_gain,omitempty"`
	// location is the antenna's location
	Location Location `protobuf:"bytes,2,opt,name=location" json:"location"`
}

func (m *GatewayConfiguration_GatewayAntennaConfiguration) Reset() {
	*m = GatewayConfiguration_GatewayAntennaConfiguration{}
}
func (*GatewayConfiguration_GatewayAntennaConfiguration) ProtoMessage() {}
func (*GatewayConfiguration_GatewayAntennaConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptorGateway, []int{3, 0}
}

func (m *GatewayConfiguration_GatewayAntennaConfiguration) GetAntennaGain() float32 {
	if m != nil {
		return m.AntennaGain
	}
	return 0
}

func (m *GatewayConfiguration_GatewayAntennaConfiguration) GetLocation() Location {
	if m != nil {
		return m.Location
	}
	return Location{}
}

type GatewayConfiguration_Radio struct {
	Frequency uint32                                      `protobuf:"varint,1,opt,name=frequency,proto3" json:"frequency,omitempty"`
	TXConfig  *GatewayConfiguration_Radio_TxConfiguration `protobuf:"bytes,2,opt,name=radio_tx_config,json=radioTxConfig" json:"radio_tx_config,omitempty"`
}

func (m *GatewayConfiguration_Radio) Reset()      { *m = GatewayConfiguration_Radio{} }
func (*GatewayConfiguration_Radio) ProtoMessage() {}
func (*GatewayConfiguration_Radio) Descriptor() ([]byte, []int) {
	return fileDescriptorGateway, []int{3, 1}
}

func (m *GatewayConfiguration_Radio) GetFrequency() uint32 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *GatewayConfiguration_Radio) GetTXConfig() *GatewayConfiguration_Radio_TxConfiguration {
	if m != nil {
		return m.TXConfig
	}
	return nil
}

type GatewayConfiguration_Radio_TxConfiguration struct {
	MinFrequency   uint32 `protobuf:"varint,1,opt,name=min_frequency,json=minFrequency,proto3" json:"min_frequency,omitempty"`
	MaxFrequency   uint32 `protobuf:"varint,2,opt,name=max_frequency,json=maxFrequency,proto3" json:"max_frequency,omitempty"`
	NotchFrequency uint32 `protobuf:"varint,3,opt,name=notch_frequency,json=notchFrequency,proto3" json:"notch_frequency,omitempty"`
}

func (m *GatewayConfiguration_Radio_TxConfiguration) Reset() {
	*m = GatewayConfiguration_Radio_TxConfiguration{}
}
func (*GatewayConfiguration_Radio_TxConfiguration) ProtoMessage() {}
func (*GatewayConfiguration_Radio_TxConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptorGateway, []int{3, 1, 0}
}

func (m *GatewayConfiguration_Radio_TxConfiguration) GetMinFrequency() uint32 {
	if m != nil {
		return m.MinFrequency
	}
	return 0
}

func (m *GatewayConfiguration_Radio_TxConfiguration) GetMaxFrequency() uint32 {
	if m != nil {
		return m.MaxFrequency
	}
	return 0
}

func (m *GatewayConfiguration_Radio_TxConfiguration) GetNotchFrequency() uint32 {
	if m != nil {
		return m.NotchFrequency
	}
	return 0
}

type GatewayStatus struct {
	// Current time of the gateway
	Time *time.Time `protobuf:"bytes,1,opt,name=time,stdtime" json:"time,omitempty"`
	// Boot time of the gateway
	// - can be left out to save bandwidth; old value will be kept
	BootTime *time.Time `protobuf:"bytes,2,opt,name=boot_time,json=bootTime,stdtime" json:"boot_time,omitempty"`
	// Gateway Platform
	// - can be left out to save bandwidth; old value will be kept
	// - for example: "Kerlink iBTS", "MultiTech Conduit AEP", "The Things Gateway", "..."
	Platform string `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	// Versions of gateway subsystems
	// - each field can be left out to save bandwidth; old value will be kept
	// - map keys are written in snake_case
	// - for example:
	//     firmware: "2.0.4"
	//     forwarder: "v2-3.3.1"
	//     fpga: "48"
	//     dsp: "27"
	//     hal: "v2-3.5.0"
	Versions map[string]string `protobuf:"bytes,4,rep,name=versions" json:"versions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Location of the gateway
	// - if left out, server uses registry-set location as fallback
	Location *Location `protobuf:"bytes,5,opt,name=location" json:"location,omitempty"`
	// IP addresses of this gateway
	IP []string `protobuf:"bytes,6,rep,name=ip" json:"ip,omitempty"`
	// Round-trip time to the server
	RTT *time.Duration `protobuf:"bytes,7,opt,name=rtt,stdduration" json:"rtt,omitempty"`
	// Metrics
	// - can be used for forwarding gateway metrics such as temperatures or performance metrics
	// - map keys are written in snake_case
	Metrics map[string]float32 `protobuf:"bytes,8,rep,name=metrics" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	// Advanced metadata fields
	// - can be used for advanced information or experimental features that are not yet formally defined in the API
	// - field names are written in snake_case
	Advanced *google_protobuf3.Struct `protobuf:"bytes,99,opt,name=advanced" json:"advanced,omitempty"`
}

func (m *GatewayStatus) Reset()                    { *m = GatewayStatus{} }
func (*GatewayStatus) ProtoMessage()               {}
func (*GatewayStatus) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{4} }

func (m *GatewayStatus) GetTime() *time.Time {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *GatewayStatus) GetBootTime() *time.Time {
	if m != nil {
		return m.BootTime
	}
	return nil
}

func (m *GatewayStatus) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *GatewayStatus) GetVersions() map[string]string {
	if m != nil {
		return m.Versions
	}
	return nil
}

func (m *GatewayStatus) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *GatewayStatus) GetIP() []string {
	if m != nil {
		return m.IP
	}
	return nil
}

func (m *GatewayStatus) GetRTT() *time.Duration {
	if m != nil {
		return m.RTT
	}
	return nil
}

func (m *GatewayStatus) GetMetrics() map[string]float32 {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *GatewayStatus) GetAdvanced() *google_protobuf3.Struct {
	if m != nil {
		return m.Advanced
	}
	return nil
}

// GatewayObservations as observed by the gateway server
type GatewayObservations struct {
	// Time when the last uplink message was received
	LastUplinkReceived *time.Time `protobuf:"bytes,1,opt,name=last_uplink_received,json=lastUplinkReceived,stdtime" json:"last_uplink_received,omitempty"`
	// Uplink message counter. This counter may be reset to 0 when the gateway disconnects.
	UplinkCount uint64 `protobuf:"varint,2,opt,name=uplink_count,json=uplinkCount,proto3" json:"uplink_count,omitempty"`
	// Time when the last downlink message was received
	LastDownlinkReceived *time.Time `protobuf:"bytes,3,opt,name=last_downlink_received,json=lastDownlinkReceived,stdtime" json:"last_downlink_received,omitempty"`
	// Downlink message counter. This counter may be reset to 0 when the gateway disconnects.
	DownlinkCount uint64 `protobuf:"varint,4,opt,name=downlink_count,json=downlinkCount,proto3" json:"downlink_count,omitempty"`
	// Time when the last status message was received
	LastStatusReceived *time.Time `protobuf:"bytes,5,opt,name=last_status_received,json=lastStatusReceived,stdtime" json:"last_status_received,omitempty"`
	// Status message counter. This counter may be reset to 0 when the gateway disconnects.
	StatusCount uint64 `protobuf:"varint,6,opt,name=status_count,json=statusCount,proto3" json:"status_count,omitempty"`
	// Contents of the last status message
	LastStatus *GatewayStatus `protobuf:"bytes,7,opt,name=last_status,json=lastStatus" json:"last_status,omitempty"`
}

func (m *GatewayObservations) Reset()                    { *m = GatewayObservations{} }
func (*GatewayObservations) ProtoMessage()               {}
func (*GatewayObservations) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{5} }

func (m *GatewayObservations) GetLastUplinkReceived() *time.Time {
	if m != nil {
		return m.LastUplinkReceived
	}
	return nil
}

func (m *GatewayObservations) GetUplinkCount() uint64 {
	if m != nil {
		return m.UplinkCount
	}
	return 0
}

func (m *GatewayObservations) GetLastDownlinkReceived() *time.Time {
	if m != nil {
		return m.LastDownlinkReceived
	}
	return nil
}

func (m *GatewayObservations) GetDownlinkCount() uint64 {
	if m != nil {
		return m.DownlinkCount
	}
	return 0
}

func (m *GatewayObservations) GetLastStatusReceived() *time.Time {
	if m != nil {
		return m.LastStatusReceived
	}
	return nil
}

func (m *GatewayObservations) GetStatusCount() uint64 {
	if m != nil {
		return m.StatusCount
	}
	return 0
}

func (m *GatewayObservations) GetLastStatus() *GatewayStatus {
	if m != nil {
		return m.LastStatus
	}
	return nil
}

func init() {
	proto.RegisterType((*Gateway)(nil), "ttn.v3.Gateway")
	proto.RegisterType((*GatewayPrivacySettings)(nil), "ttn.v3.GatewayPrivacySettings")
	proto.RegisterType((*GatewayAntenna)(nil), "ttn.v3.GatewayAntenna")
	proto.RegisterType((*GatewayConfiguration)(nil), "ttn.v3.GatewayConfiguration")
	proto.RegisterType((*GatewayConfiguration_GatewayAntennaConfiguration)(nil), "ttn.v3.GatewayConfiguration.GatewayAntennaConfiguration")
	proto.RegisterType((*GatewayConfiguration_Radio)(nil), "ttn.v3.GatewayConfiguration.Radio")
	proto.RegisterType((*GatewayConfiguration_Radio_TxConfiguration)(nil), "ttn.v3.GatewayConfiguration.Radio.TxConfiguration")
	proto.RegisterType((*GatewayStatus)(nil), "ttn.v3.GatewayStatus")
	proto.RegisterType((*GatewayObservations)(nil), "ttn.v3.GatewayObservations")
	proto.RegisterEnum("ttn.v3.GatewayAntennaPlacement", GatewayAntennaPlacement_name, GatewayAntennaPlacement_value)
}
func (x GatewayAntennaPlacement) String() string {
	s, ok := GatewayAntennaPlacement_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (m *Gateway) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Gateway) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.FrequencyPlanID) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.FrequencyPlanID)))
		i += copy(dAtA[i:], m.FrequencyPlanID)
	}
	if m.ActivatedAt != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.ActivatedAt)))
		n1, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ActivatedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	dAtA[i] = 0x32
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.PrivacySettings.Size()))
	n2, err := m.PrivacySettings.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if m.AutoUpdate {
		dAtA[i] = 0x38
		i++
		if m.AutoUpdate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if len(m.Antennas) > 0 {
		for _, msg := range m.Antennas {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintGateway(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Attributes) > 0 {
		for k, _ := range m.Attributes {
			dAtA[i] = 0x52
			i++
			v := m.Attributes[k]
			mapSize := 1 + len(k) + sovGateway(uint64(len(k))) + 1 + len(v) + sovGateway(uint64(len(v)))
			i = encodeVarintGateway(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGateway(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintGateway(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.ClusterAddress) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.ClusterAddress)))
		i += copy(dAtA[i:], m.ClusterAddress)
	}
	dAtA[i] = 0x62
	i++
	i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)))
	n3, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.DeletedAt)))
	n4, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.DeletedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *GatewayPrivacySettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayPrivacySettings) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StatusPublic {
		dAtA[i] = 0x8
		i++
		if m.StatusPublic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.LocationPublic {
		dAtA[i] = 0x10
		i++
		if m.LocationPublic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.OwnerPublic {
		dAtA[i] = 0x18
		i++
		if m.OwnerPublic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GatewayAntenna) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayAntenna) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if m.Gain != 0 {
		dAtA[i] = 0x15
		i++
		i = encodeFixed32Gateway(dAtA, i, uint32(math.Float32bits(float32(m.Gain))))
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.Location.Size()))
	n5, err := m.Location.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if len(m.Type) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Model) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Model)))
		i += copy(dAtA[i:], m.Model)
	}
	if m.Placement != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.Placement))
	}
	return i, nil
}

func (m *GatewayConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayConfiguration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.FrequencyPlanID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.FrequencyPlanID)))
		i += copy(dAtA[i:], m.FrequencyPlanID)
	}
	if len(m.ClusterAddress) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.ClusterAddress)))
		i += copy(dAtA[i:], m.ClusterAddress)
	}
	if len(m.Antennas) > 0 {
		for _, msg := range m.Antennas {
			dAtA[i] = 0x22
			i++
			i = encodeVarintGateway(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Radios) > 0 {
		for _, msg := range m.Radios {
			dAtA[i] = 0x32
			i++
			i = encodeVarintGateway(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GatewayConfiguration_GatewayAntennaConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayConfiguration_GatewayAntennaConfiguration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AntennaGain != 0 {
		dAtA[i] = 0xd
		i++
		i = encodeFixed32Gateway(dAtA, i, uint32(math.Float32bits(float32(m.AntennaGain))))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.Location.Size()))
	n6, err := m.Location.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	return i, nil
}

func (m *GatewayConfiguration_Radio) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayConfiguration_Radio) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Frequency != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.Frequency))
	}
	if m.TXConfig != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.TXConfig.Size()))
		n7, err := m.TXConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *GatewayConfiguration_Radio_TxConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayConfiguration_Radio_TxConfiguration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MinFrequency != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.MinFrequency))
	}
	if m.MaxFrequency != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.MaxFrequency))
	}
	if m.NotchFrequency != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.NotchFrequency))
	}
	return i, nil
}

func (m *GatewayStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.Time)))
		n8, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.Time, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.BootTime != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.BootTime)))
		n9, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.BootTime, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if len(m.Versions) > 0 {
		for k, _ := range m.Versions {
			dAtA[i] = 0x22
			i++
			v := m.Versions[k]
			mapSize := 1 + len(k) + sovGateway(uint64(len(k))) + 1 + len(v) + sovGateway(uint64(len(v)))
			i = encodeVarintGateway(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGateway(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintGateway(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.Location != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.Location.Size()))
		n10, err := m.Location.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if len(m.IP) > 0 {
		for _, s := range m.IP {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.RTT != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdDuration(*m.RTT)))
		n11, err := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.RTT, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if len(m.Metrics) > 0 {
		for k, _ := range m.Metrics {
			dAtA[i] = 0x42
			i++
			v := m.Metrics[k]
			mapSize := 1 + len(k) + sovGateway(uint64(len(k))) + 1 + 4
			i = encodeVarintGateway(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGateway(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x15
			i++
			i = encodeFixed32Gateway(dAtA, i, uint32(math.Float32bits(float32(v))))
		}
	}
	if m.Advanced != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.Advanced.Size()))
		n12, err := m.Advanced.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *GatewayObservations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayObservations) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LastUplinkReceived != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastUplinkReceived)))
		n13, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastUplinkReceived, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.UplinkCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.UplinkCount))
	}
	if m.LastDownlinkReceived != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastDownlinkReceived)))
		n14, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastDownlinkReceived, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.DownlinkCount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.DownlinkCount))
	}
	if m.LastStatusReceived != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastStatusReceived)))
		n15, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastStatusReceived, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.StatusCount != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.StatusCount))
	}
	if m.LastStatus != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.LastStatus.Size()))
		n16, err := m.LastStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func encodeFixed64Gateway(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Gateway(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGateway(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Gateway) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.FrequencyPlanID)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.ActivatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ActivatedAt)
		n += 1 + l + sovGateway(uint64(l))
	}
	l = m.PrivacySettings.Size()
	n += 1 + l + sovGateway(uint64(l))
	if m.AutoUpdate {
		n += 2
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.Antennas) > 0 {
		for _, e := range m.Antennas {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if len(m.Attributes) > 0 {
		for k, v := range m.Attributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGateway(uint64(len(k))) + 1 + len(v) + sovGateway(uint64(len(v)))
			n += mapEntrySize + 1 + sovGateway(uint64(mapEntrySize))
		}
	}
	l = len(m.ClusterAddress)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovGateway(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.DeletedAt)
	n += 1 + l + sovGateway(uint64(l))
	return n
}

func (m *GatewayPrivacySettings) Size() (n int) {
	var l int
	_ = l
	if m.StatusPublic {
		n += 2
	}
	if m.LocationPublic {
		n += 2
	}
	if m.OwnerPublic {
		n += 2
	}
	return n
}

func (m *GatewayAntenna) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.Gain != 0 {
		n += 5
	}
	l = m.Location.Size()
	n += 1 + l + sovGateway(uint64(l))
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.Model)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.Placement != 0 {
		n += 1 + sovGateway(uint64(m.Placement))
	}
	return n
}

func (m *GatewayConfiguration) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.FrequencyPlanID)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.ClusterAddress)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.Antennas) > 0 {
		for _, e := range m.Antennas {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if len(m.Radios) > 0 {
		for _, e := range m.Radios {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	return n
}

func (m *GatewayConfiguration_GatewayAntennaConfiguration) Size() (n int) {
	var l int
	_ = l
	if m.AntennaGain != 0 {
		n += 5
	}
	l = m.Location.Size()
	n += 1 + l + sovGateway(uint64(l))
	return n
}

func (m *GatewayConfiguration_Radio) Size() (n int) {
	var l int
	_ = l
	if m.Frequency != 0 {
		n += 1 + sovGateway(uint64(m.Frequency))
	}
	if m.TXConfig != nil {
		l = m.TXConfig.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GatewayConfiguration_Radio_TxConfiguration) Size() (n int) {
	var l int
	_ = l
	if m.MinFrequency != 0 {
		n += 1 + sovGateway(uint64(m.MinFrequency))
	}
	if m.MaxFrequency != 0 {
		n += 1 + sovGateway(uint64(m.MaxFrequency))
	}
	if m.NotchFrequency != 0 {
		n += 1 + sovGateway(uint64(m.NotchFrequency))
	}
	return n
}

func (m *GatewayStatus) Size() (n int) {
	var l int
	_ = l
	if m.Time != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.Time)
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.BootTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.BootTime)
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.Versions) > 0 {
		for k, v := range m.Versions {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGateway(uint64(len(k))) + 1 + len(v) + sovGateway(uint64(len(v)))
			n += mapEntrySize + 1 + sovGateway(uint64(mapEntrySize))
		}
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.IP) > 0 {
		for _, s := range m.IP {
			l = len(s)
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if m.RTT != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.RTT)
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.Metrics) > 0 {
		for k, v := range m.Metrics {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGateway(uint64(len(k))) + 1 + 4
			n += mapEntrySize + 1 + sovGateway(uint64(mapEntrySize))
		}
	}
	if m.Advanced != nil {
		l = m.Advanced.Size()
		n += 2 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GatewayObservations) Size() (n int) {
	var l int
	_ = l
	if m.LastUplinkReceived != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastUplinkReceived)
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.UplinkCount != 0 {
		n += 1 + sovGateway(uint64(m.UplinkCount))
	}
	if m.LastDownlinkReceived != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastDownlinkReceived)
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.DownlinkCount != 0 {
		n += 1 + sovGateway(uint64(m.DownlinkCount))
	}
	if m.LastStatusReceived != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastStatusReceived)
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.StatusCount != 0 {
		n += 1 + sovGateway(uint64(m.StatusCount))
	}
	if m.LastStatus != nil {
		l = m.LastStatus.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func sovGateway(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGateway(x uint64) (n int) {
	return sovGateway(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Gateway) String() string {
	if this == nil {
		return "nil"
	}
	keysForAttributes := make([]string, 0, len(this.Attributes))
	for k, _ := range this.Attributes {
		keysForAttributes = append(keysForAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributes)
	mapStringForAttributes := "map[string]string{"
	for _, k := range keysForAttributes {
		mapStringForAttributes += fmt.Sprintf("%v: %v,", k, this.Attributes[k])
	}
	mapStringForAttributes += "}"
	s := strings.Join([]string{`&Gateway{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`FrequencyPlanID:` + fmt.Sprintf("%v", this.FrequencyPlanID) + `,`,
		`ActivatedAt:` + strings.Replace(fmt.Sprintf("%v", this.ActivatedAt), "Timestamp", "google_protobuf1.Timestamp", 1) + `,`,
		`PrivacySettings:` + strings.Replace(strings.Replace(this.PrivacySettings.String(), "GatewayPrivacySettings", "GatewayPrivacySettings", 1), `&`, ``, 1) + `,`,
		`AutoUpdate:` + fmt.Sprintf("%v", this.AutoUpdate) + `,`,
		`Platform:` + fmt.Sprintf("%v", this.Platform) + `,`,
		`Antennas:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Antennas), "GatewayAntenna", "GatewayAntenna", 1), `&`, ``, 1) + `,`,
		`Attributes:` + mapStringForAttributes + `,`,
		`ClusterAddress:` + fmt.Sprintf("%v", this.ClusterAddress) + `,`,
		`CreatedAt:` + strings.Replace(strings.Replace(this.CreatedAt.String(), "Timestamp", "google_protobuf1.Timestamp", 1), `&`, ``, 1) + `,`,
		`DeletedAt:` + strings.Replace(strings.Replace(this.DeletedAt.String(), "Timestamp", "google_protobuf1.Timestamp", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayPrivacySettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayPrivacySettings{`,
		`StatusPublic:` + fmt.Sprintf("%v", this.StatusPublic) + `,`,
		`LocationPublic:` + fmt.Sprintf("%v", this.LocationPublic) + `,`,
		`OwnerPublic:` + fmt.Sprintf("%v", this.OwnerPublic) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayAntenna) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayAntenna{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Gain:` + fmt.Sprintf("%v", this.Gain) + `,`,
		`Location:` + strings.Replace(strings.Replace(this.Location.String(), "Location", "Location", 1), `&`, ``, 1) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Model:` + fmt.Sprintf("%v", this.Model) + `,`,
		`Placement:` + fmt.Sprintf("%v", this.Placement) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayConfiguration{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`FrequencyPlanID:` + fmt.Sprintf("%v", this.FrequencyPlanID) + `,`,
		`ClusterAddress:` + fmt.Sprintf("%v", this.ClusterAddress) + `,`,
		`Antennas:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Antennas), "GatewayConfiguration_GatewayAntennaConfiguration", "GatewayConfiguration_GatewayAntennaConfiguration", 1), `&`, ``, 1) + `,`,
		`Radios:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Radios), "GatewayConfiguration_Radio", "GatewayConfiguration_Radio", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayConfiguration_GatewayAntennaConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayConfiguration_GatewayAntennaConfiguration{`,
		`AntennaGain:` + fmt.Sprintf("%v", this.AntennaGain) + `,`,
		`Location:` + strings.Replace(strings.Replace(this.Location.String(), "Location", "Location", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayConfiguration_Radio) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayConfiguration_Radio{`,
		`Frequency:` + fmt.Sprintf("%v", this.Frequency) + `,`,
		`TXConfig:` + strings.Replace(fmt.Sprintf("%v", this.TXConfig), "GatewayConfiguration_Radio_TxConfiguration", "GatewayConfiguration_Radio_TxConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayConfiguration_Radio_TxConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayConfiguration_Radio_TxConfiguration{`,
		`MinFrequency:` + fmt.Sprintf("%v", this.MinFrequency) + `,`,
		`MaxFrequency:` + fmt.Sprintf("%v", this.MaxFrequency) + `,`,
		`NotchFrequency:` + fmt.Sprintf("%v", this.NotchFrequency) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayStatus) String() string {
	if this == nil {
		return "nil"
	}
	keysForVersions := make([]string, 0, len(this.Versions))
	for k, _ := range this.Versions {
		keysForVersions = append(keysForVersions, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForVersions)
	mapStringForVersions := "map[string]string{"
	for _, k := range keysForVersions {
		mapStringForVersions += fmt.Sprintf("%v: %v,", k, this.Versions[k])
	}
	mapStringForVersions += "}"
	keysForMetrics := make([]string, 0, len(this.Metrics))
	for k, _ := range this.Metrics {
		keysForMetrics = append(keysForMetrics, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetrics)
	mapStringForMetrics := "map[string]float32{"
	for _, k := range keysForMetrics {
		mapStringForMetrics += fmt.Sprintf("%v: %v,", k, this.Metrics[k])
	}
	mapStringForMetrics += "}"
	s := strings.Join([]string{`&GatewayStatus{`,
		`Time:` + strings.Replace(fmt.Sprintf("%v", this.Time), "Timestamp", "google_protobuf1.Timestamp", 1) + `,`,
		`BootTime:` + strings.Replace(fmt.Sprintf("%v", this.BootTime), "Timestamp", "google_protobuf1.Timestamp", 1) + `,`,
		`Platform:` + fmt.Sprintf("%v", this.Platform) + `,`,
		`Versions:` + mapStringForVersions + `,`,
		`Location:` + strings.Replace(fmt.Sprintf("%v", this.Location), "Location", "Location", 1) + `,`,
		`IP:` + fmt.Sprintf("%v", this.IP) + `,`,
		`RTT:` + strings.Replace(fmt.Sprintf("%v", this.RTT), "Duration", "google_protobuf4.Duration", 1) + `,`,
		`Metrics:` + mapStringForMetrics + `,`,
		`Advanced:` + strings.Replace(fmt.Sprintf("%v", this.Advanced), "Struct", "google_protobuf3.Struct", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayObservations) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayObservations{`,
		`LastUplinkReceived:` + strings.Replace(fmt.Sprintf("%v", this.LastUplinkReceived), "Timestamp", "google_protobuf1.Timestamp", 1) + `,`,
		`UplinkCount:` + fmt.Sprintf("%v", this.UplinkCount) + `,`,
		`LastDownlinkReceived:` + strings.Replace(fmt.Sprintf("%v", this.LastDownlinkReceived), "Timestamp", "google_protobuf1.Timestamp", 1) + `,`,
		`DownlinkCount:` + fmt.Sprintf("%v", this.DownlinkCount) + `,`,
		`LastStatusReceived:` + strings.Replace(fmt.Sprintf("%v", this.LastStatusReceived), "Timestamp", "google_protobuf1.Timestamp", 1) + `,`,
		`StatusCount:` + fmt.Sprintf("%v", this.StatusCount) + `,`,
		`LastStatus:` + strings.Replace(fmt.Sprintf("%v", this.LastStatus), "GatewayStatus", "GatewayStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGateway(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Gateway) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Gateway: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Gateway: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyPlanID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrequencyPlanID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActivatedAt == nil {
				m.ActivatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ActivatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivacySettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PrivacySettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoUpdate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoUpdate = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Antennas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Antennas = append(m.Antennas, GatewayAntenna{})
			if err := m.Antennas[len(m.Antennas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGateway
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGateway
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGateway(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGateway
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attributes[mapkey] = mapvalue
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.DeletedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayPrivacySettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayPrivacySettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayPrivacySettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusPublic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StatusPublic = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationPublic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LocationPublic = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerPublic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OwnerPublic = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayAntenna) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayAntenna: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayAntenna: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gain", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Gain = float32(math.Float32frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Placement", wireType)
			}
			m.Placement = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Placement |= (GatewayAntennaPlacement(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyPlanID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrequencyPlanID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Antennas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Antennas = append(m.Antennas, GatewayConfiguration_GatewayAntennaConfiguration{})
			if err := m.Antennas[len(m.Antennas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Radios", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Radios = append(m.Radios, GatewayConfiguration_Radio{})
			if err := m.Radios[len(m.Radios)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayConfiguration_GatewayAntennaConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayAntennaConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayAntennaConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field AntennaGain", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.AntennaGain = float32(math.Float32frombits(v))
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayConfiguration_Radio) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Radio: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Radio: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			m.Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frequency |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TXConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TXConfig == nil {
				m.TXConfig = &GatewayConfiguration_Radio_TxConfiguration{}
			}
			if err := m.TXConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayConfiguration_Radio_TxConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinFrequency", wireType)
			}
			m.MinFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinFrequency |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFrequency", wireType)
			}
			m.MaxFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxFrequency |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotchFrequency", wireType)
			}
			m.NotchFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotchFrequency |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Time == nil {
				m.Time = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BootTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BootTime == nil {
				m.BootTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.BootTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Versions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Versions == nil {
				m.Versions = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGateway
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGateway
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGateway(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGateway
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Versions[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &Location{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = append(m.IP, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RTT", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RTT == nil {
				m.RTT = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.RTT, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metrics == nil {
				m.Metrics = make(map[string]float32)
			}
			var mapkey string
			var mapvalue float32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGateway
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					iNdEx += 4
					mapvaluetemp = uint32(dAtA[iNdEx-4])
					mapvaluetemp |= uint32(dAtA[iNdEx-3]) << 8
					mapvaluetemp |= uint32(dAtA[iNdEx-2]) << 16
					mapvaluetemp |= uint32(dAtA[iNdEx-1]) << 24
					mapvalue = math.Float32frombits(mapvaluetemp)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGateway(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGateway
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metrics[mapkey] = mapvalue
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Advanced", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Advanced == nil {
				m.Advanced = &google_protobuf3.Struct{}
			}
			if err := m.Advanced.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayObservations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayObservations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayObservations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUplinkReceived", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastUplinkReceived == nil {
				m.LastUplinkReceived = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastUplinkReceived, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplinkCount", wireType)
			}
			m.UplinkCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UplinkCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastDownlinkReceived", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastDownlinkReceived == nil {
				m.LastDownlinkReceived = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastDownlinkReceived, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkCount", wireType)
			}
			m.DownlinkCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DownlinkCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastStatusReceived", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastStatusReceived == nil {
				m.LastStatusReceived = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastStatusReceived, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusCount", wireType)
			}
			m.StatusCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatusCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastStatus == nil {
				m.LastStatus = &GatewayStatus{}
			}
			if err := m.LastStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGateway(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGateway
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGateway(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGateway = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGateway   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/gateway.proto", fileDescriptorGateway)
}

var fileDescriptorGateway = []byte{
	// 1329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0xda, 0x8e, 0xeb, 0x3c, 0xdb, 0x71, 0x3a, 0x4d, 0xd3, 0xc5, 0x54, 0x76, 0x70, 0x85,
	0x1a, 0x2a, 0x70, 0x84, 0x0b, 0x28, 0x2a, 0x54, 0xc5, 0x49, 0x4a, 0x55, 0xa9, 0x6d, 0xa2, 0xad,
	0x5b, 0xa1, 0x5e, 0x56, 0xe3, 0xdd, 0x89, 0xb3, 0x8a, 0xbd, 0xbb, 0xec, 0xce, 0x3a, 0xc9, 0x8d,
	0x03, 0x07, 0xb8, 0x71, 0x42, 0x5c, 0x11, 0xff, 0x05, 0x57, 0x2e, 0xbd, 0x20, 0x71, 0x84, 0x8b,
	0x01, 0x9f, 0x38, 0xa2, 0xfe, 0x05, 0x68, 0xde, 0xcc, 0xda, 0xeb, 0x4d, 0xda, 0x24, 0xa7, 0xec,
	0xbc, 0xf9, 0xbe, 0xf7, 0x63, 0xe6, 0x7b, 0x6f, 0x62, 0xf8, 0xb0, 0xe7, 0xf0, 0xfd, 0xa8, 0xdb,
	0xb4, 0xbc, 0xc1, 0x7a, 0x67, 0x9f, 0x75, 0xf6, 0x1d, 0xb7, 0x17, 0x3e, 0x61, 0xfc, 0xd0, 0x0b,
	0x0e, 0xd6, 0x39, 0x77, 0xd7, 0xa9, 0xef, 0xac, 0xf7, 0x28, 0x67, 0x87, 0xf4, 0xb8, 0xe9, 0x07,
	0x1e, 0xf7, 0x48, 0x9e, 0x73, 0xb7, 0x39, 0xbc, 0x5d, 0xfd, 0x20, 0x41, 0xed, 0x79, 0x3d, 0x6f,
	0x1d, 0xb7, 0xbb, 0xd1, 0x1e, 0xae, 0x70, 0x81, 0x5f, 0x92, 0x56, 0x6d, 0x9d, 0x27, 0xd2, 0x80,
	0x71, 0x6a, 0x53, 0x4e, 0x15, 0xa7, 0xd6, 0xf3, 0xbc, 0x5e, 0x9f, 0x4d, 0x3d, 0xdb, 0x51, 0x40,
	0xb9, 0xe3, 0xb9, 0x6a, 0xff, 0x7a, 0x7a, 0x3f, 0xe4, 0x41, 0x64, 0x71, 0xb5, 0x5b, 0x4f, 0xef,
	0x72, 0x67, 0xc0, 0x42, 0x4e, 0x07, 0xbe, 0x04, 0x34, 0x7e, 0xca, 0xc3, 0xa5, 0x07, 0xb2, 0x36,
	0xb2, 0x02, 0x19, 0xc7, 0xd6, 0xb5, 0x55, 0x6d, 0x6d, 0x61, 0x33, 0x3f, 0x1e, 0xd5, 0x33, 0x0f,
	0xb7, 0x8d, 0x8c, 0x63, 0x93, 0x55, 0x28, 0xda, 0x2c, 0xb4, 0x02, 0xc7, 0x17, 0x71, 0xf5, 0x8c,
	0x00, 0x18, 0x49, 0x13, 0x59, 0x86, 0x79, 0xee, 0x1d, 0x30, 0x57, 0xcf, 0xe2, 0x9e, 0x5c, 0x90,
	0xe7, 0x70, 0x79, 0x2f, 0x60, 0x5f, 0x45, 0xcc, 0xb5, 0x8e, 0x4d, 0xbf, 0x4f, 0x5d, 0xd3, 0xb1,
	0xf5, 0x1c, 0xba, 0xbf, 0x35, 0x1e, 0xd5, 0x2b, 0x5f, 0xc4, 0x9b, 0xbb, 0x7d, 0xea, 0x3e, 0xdc,
	0x7e, 0x35, 0xaa, 0x5f, 0xb1, 0xbb, 0x77, 0x1a, 0xb3, 0x9c, 0x86, 0x51, 0xd9, 0x9b, 0xc1, 0xd9,
	0x64, 0x0b, 0x4a, 0xd4, 0xe2, 0xce, 0x90, 0x72, 0x66, 0x9b, 0x94, 0xeb, 0xf3, 0xab, 0xda, 0x5a,
	0xb1, 0x55, 0x6d, 0xca, 0x5a, 0x9b, 0x71, 0xad, 0xcd, 0x4e, 0x5c, 0xeb, 0x66, 0xee, 0xfb, 0xbf,
	0xea, 0x9a, 0x51, 0x9c, 0xb0, 0xda, 0x9c, 0xec, 0xc0, 0x92, 0x1f, 0x38, 0x43, 0x6a, 0x1d, 0x9b,
	0x21, 0xe3, 0x5c, 0xdc, 0x84, 0x9e, 0x47, 0x47, 0xb5, 0xa6, 0xbc, 0xdd, 0xa6, 0x3a, 0x97, 0x5d,
	0x09, 0x7b, 0xaa, 0x50, 0x9b, 0xb9, 0x97, 0xa3, 0xfa, 0x9c, 0x51, 0xf1, 0x67, 0xcd, 0xe4, 0x63,
	0x28, 0xd2, 0x88, 0x7b, 0x66, 0xe4, 0xdb, 0x94, 0x33, 0xfd, 0xd2, 0xaa, 0xb6, 0x56, 0xd8, 0x5c,
	0x7e, 0x35, 0xaa, 0x2f, 0x89, 0xa2, 0x12, 0x5b, 0x0d, 0x03, 0xc4, 0xea, 0x19, 0x2e, 0x48, 0x15,
	0x0a, 0x7e, 0x9f, 0xf2, 0x3d, 0x2f, 0x18, 0xe8, 0x05, 0x3c, 0xbd, 0xc9, 0x9a, 0x6c, 0x40, 0x81,
	0xba, 0x9c, 0xb9, 0x2e, 0x0d, 0xf5, 0x85, 0xd5, 0xec, 0x5a, 0xb1, 0xb5, 0x92, 0xca, 0xad, 0x2d,
	0xb7, 0x55, 0x4e, 0x13, 0x34, 0xb9, 0x07, 0x40, 0x39, 0x0f, 0x9c, 0x6e, 0xc4, 0x59, 0xa8, 0x03,
	0x72, 0xeb, 0x29, 0x6e, 0xb3, 0x3d, 0x41, 0xdc, 0x77, 0x79, 0x70, 0x6c, 0x24, 0x28, 0xa4, 0x0d,
	0x15, 0xab, 0x1f, 0x85, 0x9c, 0x05, 0x26, 0xb5, 0xed, 0x80, 0x85, 0xa1, 0x5e, 0xc4, 0x9b, 0xd3,
	0x5f, 0x8d, 0xea, 0xcb, 0xa2, 0xa2, 0xd4, 0x76, 0xc3, 0x58, 0x54, 0x96, 0xb6, 0x34, 0x90, 0x2d,
	0x00, 0x2b, 0x60, 0xf1, 0x25, 0x95, 0xce, 0xbc, 0xa4, 0x82, 0xa8, 0x01, 0x2f, 0x6a, 0x41, 0xf1,
	0xda, 0x5c, 0x38, 0xb1, 0x59, 0x9f, 0x29, 0x27, 0xe5, 0x8b, 0x38, 0x51, 0xbc, 0x36, 0xaf, 0xde,
	0x85, 0x4a, 0xaa, 0x56, 0xb2, 0x04, 0xd9, 0x03, 0x76, 0x2c, 0xc5, 0x6e, 0x88, 0x4f, 0xa1, 0xe1,
	0x21, 0xed, 0x47, 0x4c, 0xe9, 0x5b, 0x2e, 0xee, 0x64, 0x36, 0xb4, 0xc6, 0x77, 0x1a, 0xac, 0x9c,
	0xae, 0x05, 0x72, 0x03, 0xca, 0x21, 0xa7, 0x3c, 0x0a, 0x4d, 0x3f, 0xea, 0xf6, 0x1d, 0x0b, 0x1d,
	0x16, 0x8c, 0x92, 0x34, 0xee, 0xa2, 0x8d, 0xdc, 0x84, 0x4a, 0xdf, 0xb3, 0xb0, 0x69, 0x63, 0x58,
	0x06, 0x61, 0x8b, 0xb1, 0x59, 0x01, 0xdf, 0x81, 0x92, 0x77, 0xe8, 0xb2, 0x20, 0x46, 0x65, 0x11,
	0x55, 0x44, 0x9b, 0x84, 0x34, 0xfe, 0xd4, 0x60, 0x71, 0xf6, 0xee, 0x5f, 0xdb, 0xb6, 0x04, 0x72,
	0x3d, 0xea, 0xc8, 0x7e, 0xcd, 0x18, 0xf8, 0x4d, 0x5a, 0x50, 0x88, 0x63, 0xa2, 0xf7, 0x62, 0x6b,
	0x29, 0x56, 0xc5, 0x23, 0x65, 0x8f, 0xb5, 0x14, 0xe3, 0x84, 0x1f, 0x7e, 0xec, 0x33, 0xd9, 0xb9,
	0x06, 0x7e, 0x8b, 0xc3, 0x1a, 0x78, 0x36, 0xeb, 0x63, 0xef, 0x2d, 0x18, 0x72, 0x41, 0xee, 0xc2,
	0x82, 0xdf, 0xa7, 0x16, 0x1b, 0x30, 0x97, 0x63, 0x33, 0x2d, 0x9e, 0x10, 0x9d, 0x4a, 0x7a, 0x37,
	0x86, 0x19, 0x53, 0x46, 0xe3, 0xd7, 0x79, 0x58, 0x56, 0xb0, 0x2d, 0xcf, 0xdd, 0x73, 0x7a, 0x6a,
	0xd2, 0x4d, 0xc7, 0x8b, 0x96, 0x1c, 0x2f, 0xf7, 0x4e, 0x1b, 0x2f, 0x78, 0x79, 0x9b, 0x57, 0x4e,
	0x19, 0x2f, 0x27, 0xe7, 0xc8, 0xcd, 0x93, 0x1a, 0x97, 0xf3, 0x2b, 0xad, 0xe4, 0x17, 0x89, 0x3e,
	0xcc, 0x61, 0x2f, 0x6d, 0xa4, 0xca, 0x9a, 0xc9, 0x37, 0x55, 0xeb, 0xcc, 0xde, 0x89, 0x4e, 0xfd,
	0x1c, 0xf2, 0x01, 0xb5, 0x1d, 0x4f, 0x4c, 0x1f, 0xe1, 0xb9, 0xf1, 0x46, 0xcf, 0x86, 0x80, 0x2a,
	0x1f, 0x8a, 0x57, 0xe5, 0xf0, 0xf6, 0x1b, 0x02, 0x0a, 0x51, 0xa9, 0x60, 0x26, 0xca, 0x41, 0x43,
	0x39, 0x14, 0x95, 0xed, 0x41, 0x5a, 0x15, 0x99, 0xf3, 0xa9, 0xa2, 0xfa, 0x43, 0x06, 0xe6, 0x31,
	0x1b, 0x72, 0x1d, 0x16, 0x26, 0x27, 0x8b, 0xde, 0xcb, 0xc6, 0xd4, 0x40, 0xf6, 0xa1, 0x82, 0x79,
	0x9a, 0xfc, 0xc8, 0xb4, 0x30, 0x31, 0x15, 0xa2, 0x75, 0x76, 0xa1, 0xcd, 0xce, 0xd1, 0xec, 0xe1,
	0x95, 0xc6, 0xa3, 0x7a, 0xa1, 0xf3, 0xa5, 0x34, 0x1a, 0x65, 0x74, 0x1c, 0x63, 0xaa, 0xdf, 0x68,
	0x50, 0x49, 0x11, 0x44, 0x7f, 0x0e, 0x1c, 0xd7, 0x4c, 0xe7, 0x57, 0x1a, 0x38, 0xee, 0x44, 0x1e,
	0x08, 0xa2, 0x47, 0x09, 0x50, 0x46, 0x81, 0xe8, 0xd1, 0x14, 0x74, 0x13, 0x2a, 0xae, 0xc7, 0xad,
	0xfd, 0x04, 0x2c, 0x8b, 0xb0, 0x45, 0x34, 0x4f, 0x80, 0x8d, 0xdf, 0x72, 0x50, 0x56, 0x25, 0x3d,
	0xc5, 0x29, 0x40, 0x3e, 0x82, 0x9c, 0x78, 0x76, 0x31, 0xf6, 0x79, 0xde, 0x29, 0x44, 0x8b, 0x66,
	0xea, 0x7a, 0x1e, 0x37, 0x91, 0x9a, 0x39, 0x27, 0xb5, 0x20, 0x28, 0xc2, 0x38, 0xf3, 0xae, 0x64,
	0x53, 0xef, 0xca, 0x3d, 0x28, 0x0c, 0x59, 0x10, 0x3a, 0x9e, 0x1b, 0xeb, 0xf9, 0x46, 0xea, 0x32,
	0x64, 0xe6, 0xcd, 0xe7, 0x0a, 0x25, 0xdf, 0x87, 0x09, 0x89, 0xbc, 0x9f, 0x10, 0xcc, 0xfc, 0xe9,
	0x82, 0x49, 0x0c, 0x10, 0x31, 0xa0, 0x7c, 0x94, 0x77, 0x3c, 0xa0, 0x76, 0x8d, 0x8c, 0xe3, 0x93,
	0x0d, 0xc8, 0x06, 0x9c, 0xe3, 0x4b, 0x59, 0x6c, 0xbd, 0x75, 0xa2, 0xb6, 0xed, 0xf8, 0xd6, 0x8b,
	0xe3, 0x51, 0x3d, 0x6b, 0x74, 0x3a, 0x3f, 0x8a, 0x0a, 0x05, 0x85, 0x7c, 0x06, 0x97, 0x06, 0x8c,
	0x07, 0x8e, 0x15, 0xea, 0x85, 0x53, 0xbb, 0x46, 0xe5, 0xff, 0x58, 0x82, 0x64, 0xfa, 0x31, 0x85,
	0xdc, 0x86, 0x02, 0xb5, 0x87, 0xd4, 0xb5, 0x98, 0xad, 0x5b, 0x18, 0xfc, 0xda, 0x89, 0xe0, 0x4f,
	0xf1, 0xbf, 0x28, 0x63, 0x02, 0xac, 0x7e, 0x0a, 0xe5, 0x99, 0xd3, 0xb8, 0xc8, 0x0b, 0x52, 0xbd,
	0x03, 0xa5, 0x64, 0x2a, 0x67, 0x71, 0x33, 0xc9, 0xd7, 0xe7, 0x97, 0x2c, 0x5c, 0x51, 0x55, 0xed,
	0x74, 0x43, 0x16, 0x0c, 0xf1, 0x50, 0x42, 0x62, 0xc0, 0x72, 0x9f, 0x86, 0xdc, 0x8c, 0xfc, 0xbe,
	0xe3, 0x1e, 0x98, 0x01, 0xb3, 0x98, 0x33, 0x64, 0xf6, 0xb9, 0x55, 0x46, 0x04, 0xfb, 0x19, 0x92,
	0x0d, 0xc5, 0x15, 0xb3, 0x42, 0xb9, 0xb3, 0xbc, 0xc8, 0xe5, 0x98, 0x4c, 0xce, 0x28, 0x4a, 0xdb,
	0x96, 0x30, 0x91, 0xe7, 0xb0, 0x82, 0x61, 0x6d, 0xef, 0xd0, 0x9d, 0x0d, 0x9c, 0x3d, 0x67, 0x60,
	0x4c, 0x7b, 0x5b, 0xd1, 0x27, 0xa1, 0xdf, 0x85, 0xc5, 0x89, 0x4b, 0x19, 0x3c, 0x87, 0xc1, 0xcb,
	0xb1, 0x55, 0x86, 0x8f, 0xab, 0x56, 0xaf, 0xee, 0x24, 0xf8, 0xfc, 0x45, 0xaa, 0x96, 0xea, 0x48,
	0x56, 0xad, 0xdc, 0xc9, 0xc0, 0x79, 0x59, 0xb5, 0xb4, 0xc9, 0xb0, 0x9f, 0x40, 0x31, 0x11, 0x56,
	0x49, 0xf6, 0xea, 0xa9, 0xa2, 0x33, 0x60, 0x1a, 0xe2, 0xd6, 0x23, 0xb8, 0xf6, 0x9a, 0x87, 0x8f,
	0x2c, 0xc3, 0xd2, 0xee, 0xa3, 0xf6, 0xd6, 0xfd, 0xc7, 0xf7, 0x9f, 0x74, 0xcc, 0x87, 0x4f, 0xb6,
	0x77, 0x76, 0x8c, 0xa5, 0x39, 0x72, 0x15, 0x2e, 0x4f, 0xad, 0x3b, 0xcf, 0x3a, 0x68, 0xd6, 0xaa,
	0xb9, 0x6f, 0x7f, 0xae, 0xcd, 0x6d, 0x3e, 0xf8, 0xe3, 0x9f, 0xda, 0xdc, 0xd7, 0xe3, 0x9a, 0xf6,
	0x72, 0x5c, 0xd3, 0x7e, 0x1f, 0xd7, 0xb4, 0xbf, 0xc7, 0x35, 0xed, 0xdf, 0x71, 0x6d, 0xee, 0xbf,
	0x71, 0x4d, 0x7b, 0xf1, 0xde, 0x59, 0xbf, 0x2e, 0xfc, 0x83, 0x9e, 0xf8, 0xeb, 0x77, 0xbb, 0x79,
	0x3c, 0x9f, 0xdb, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x34, 0xc8, 0xf5, 0x06, 0xfb, 0x0c, 0x00,
	0x00,
}
