// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/TheThingsNetwork/ttn/api/gateway.proto

package ttnpb

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"
import google_protobuf3 "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/types"

import time "time"

import strconv "strconv"

import encoding_binary "encoding/binary"
import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// GatewayAntennaPlacement enum defines whether if the gateway antenna is placed
// indoors or outdoors.
type GatewayAntennaPlacement int32

const (
	// The antenna is placed indoors.
	PLACEMENT_INDOOR GatewayAntennaPlacement = 0
	// The antenna is placed outdoors.
	PLACEMENT_OUTDOOR GatewayAntennaPlacement = 1
)

var GatewayAntennaPlacement_name = map[int32]string{
	0: "PLACEMENT_INDOOR",
	1: "PLACEMENT_OUTDOOR",
}
var GatewayAntennaPlacement_value = map[string]int32{
	"PLACEMENT_INDOOR":  0,
	"PLACEMENT_OUTDOOR": 1,
}

func (GatewayAntennaPlacement) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorGateway, []int{0}
}

// Gateway is the message that defines a gateway on the network.
type Gateway struct {
	// id is the Gateway's unique and immutable ID.
	GatewayIdentifier `protobuf:"bytes,1,opt,name=id,embedded=id" json:"id"`
	// description is the description of the gateway.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// api_keys are the API keys of the gateway.
	// This is an only read field. API keys can be added, modified and removed
	// through the specific application API key methods of the IsGateway service.
	APIKeys []APIKey `protobuf:"bytes,3,rep,name=api_keys,json=apiKeys" json:"api_keys"`
	// frequency_plan_id indicates the ID of the frequency plan.
	FrequencyPlanID string `protobuf:"bytes,4,opt,name=frequency_plan_id,json=frequencyPlanId,proto3" json:"frequency_plan_id,omitempty"`
	// activated_at denotes when the gateway was activated.
	// This a read-only field.
	ActivatedAt time.Time `protobuf:"bytes,5,opt,name=activated_at,json=activatedAt,stdtime" json:"activated_at"`
	// privacy_settings defines the different privacy settings for this gateway.
	PrivacySettings GatewayPrivacySettings `protobuf:"bytes,6,opt,name=privacy_settings,json=privacySettings" json:"privacy_settings"`
	// auto_update indicates whether or not the gateway should be able to
	// automatically fetch and execute firmware updates.
	AutoUpdate bool `protobuf:"varint,7,opt,name=auto_update,json=autoUpdate,proto3" json:"auto_update,omitempty"`
	// platform is the gateway platform, e.g. "The Things Gateway" or "Kerklink iBTS".
	Platform string `protobuf:"bytes,8,opt,name=platform,proto3" json:"platform,omitempty"`
	// antennas is all the antennas that the gateway has.
	Antennas []GatewayAntenna `protobuf:"bytes,9,rep,name=antennas" json:"antennas"`
	// attributes is a free form map of attributes.
	Attributes map[string]string `protobuf:"bytes,10,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// cluster_address indicates the URI of the gateway server cluster to connect
	// to, in a "<ip>:<port>" format.
	ClusterAddress string `protobuf:"bytes,11,opt,name=cluster_address,json=clusterAddress,proto3" json:"cluster_address,omitempty"`
	// contact_account is the user ID that will be displayed (given the set privacy
	// settings) as contact person for this gateway.
	// TODO(gomezjdaniel): allow to use an organization ID as contact account when
	// they are added.
	ContactAccount UserIdentifier `protobuf:"bytes,12,opt,name=contact_account,json=contactAccount" json:"contact_account"`
	// created_at is the time when the gateway was created.
	// This a read-only field.
	CreatedAt time.Time `protobuf:"bytes,13,opt,name=created_at,json=createdAt,stdtime" json:"created_at"`
	// updated_at is the last time the gateway was updated.
	// This a read-only field.
	UpdatedAt time.Time `protobuf:"bytes,14,opt,name=updated_at,json=updatedAt,stdtime" json:"updated_at"`
	// archived_at is the time when the gateway was archived and therefore
	// permantly disabled.
	// This a read-only field.
	ArchivedAt time.Time `protobuf:"bytes,15,opt,name=archived_at,json=archivedAt,stdtime" json:"archived_at"`
}

func (m *Gateway) Reset()                    { *m = Gateway{} }
func (m *Gateway) String() string            { return proto.CompactTextString(m) }
func (*Gateway) ProtoMessage()               {}
func (*Gateway) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{0} }

func (m *Gateway) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Gateway) GetAPIKeys() []APIKey {
	if m != nil {
		return m.APIKeys
	}
	return nil
}

func (m *Gateway) GetFrequencyPlanID() string {
	if m != nil {
		return m.FrequencyPlanID
	}
	return ""
}

func (m *Gateway) GetActivatedAt() time.Time {
	if m != nil {
		return m.ActivatedAt
	}
	return time.Time{}
}

func (m *Gateway) GetPrivacySettings() GatewayPrivacySettings {
	if m != nil {
		return m.PrivacySettings
	}
	return GatewayPrivacySettings{}
}

func (m *Gateway) GetAutoUpdate() bool {
	if m != nil {
		return m.AutoUpdate
	}
	return false
}

func (m *Gateway) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *Gateway) GetAntennas() []GatewayAntenna {
	if m != nil {
		return m.Antennas
	}
	return nil
}

func (m *Gateway) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Gateway) GetClusterAddress() string {
	if m != nil {
		return m.ClusterAddress
	}
	return ""
}

func (m *Gateway) GetContactAccount() UserIdentifier {
	if m != nil {
		return m.ContactAccount
	}
	return UserIdentifier{}
}

func (m *Gateway) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *Gateway) GetUpdatedAt() time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return time.Time{}
}

func (m *Gateway) GetArchivedAt() time.Time {
	if m != nil {
		return m.ArchivedAt
	}
	return time.Time{}
}

type GatewayMask struct {
	Description     bool                            `protobuf:"varint,1,opt,name=description,proto3" json:"description,omitempty"`
	FrequencyPlanID bool                            `protobuf:"varint,2,opt,name=frequency_plan_id,json=frequencyPlanId,proto3" json:"frequency_plan_id,omitempty"`
	PrivacySettings GatewayMask_PrivacySettingsMask `protobuf:"bytes,3,opt,name=privacy_settings,json=privacySettings" json:"privacy_settings"`
	AutoUpdate      bool                            `protobuf:"varint,4,opt,name=auto_update,json=autoUpdate,proto3" json:"auto_update,omitempty"`
	Platform        bool                            `protobuf:"varint,5,opt,name=platform,proto3" json:"platform,omitempty"`
	Antennas        bool                            `protobuf:"varint,6,opt,name=antennas,proto3" json:"antennas,omitempty"`
	Attributes      bool                            `protobuf:"varint,7,opt,name=attributes,proto3" json:"attributes,omitempty"`
	ClusterAddress  bool                            `protobuf:"varint,8,opt,name=cluster_address,json=clusterAddress,proto3" json:"cluster_address,omitempty"`
	ContactAccount  bool                            `protobuf:"varint,9,opt,name=contact_account,json=contactAccount,proto3" json:"contact_account,omitempty"`
}

func (m *GatewayMask) Reset()                    { *m = GatewayMask{} }
func (m *GatewayMask) String() string            { return proto.CompactTextString(m) }
func (*GatewayMask) ProtoMessage()               {}
func (*GatewayMask) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{1} }

func (m *GatewayMask) GetDescription() bool {
	if m != nil {
		return m.Description
	}
	return false
}

func (m *GatewayMask) GetFrequencyPlanID() bool {
	if m != nil {
		return m.FrequencyPlanID
	}
	return false
}

func (m *GatewayMask) GetPrivacySettings() GatewayMask_PrivacySettingsMask {
	if m != nil {
		return m.PrivacySettings
	}
	return GatewayMask_PrivacySettingsMask{}
}

func (m *GatewayMask) GetAutoUpdate() bool {
	if m != nil {
		return m.AutoUpdate
	}
	return false
}

func (m *GatewayMask) GetPlatform() bool {
	if m != nil {
		return m.Platform
	}
	return false
}

func (m *GatewayMask) GetAntennas() bool {
	if m != nil {
		return m.Antennas
	}
	return false
}

func (m *GatewayMask) GetAttributes() bool {
	if m != nil {
		return m.Attributes
	}
	return false
}

func (m *GatewayMask) GetClusterAddress() bool {
	if m != nil {
		return m.ClusterAddress
	}
	return false
}

func (m *GatewayMask) GetContactAccount() bool {
	if m != nil {
		return m.ContactAccount
	}
	return false
}

type GatewayMask_PrivacySettingsMask struct {
	StatusPublic   bool `protobuf:"varint,1,opt,name=status_public,json=statusPublic,proto3" json:"status_public,omitempty"`
	LocationPublic bool `protobuf:"varint,2,opt,name=location_public,json=locationPublic,proto3" json:"location_public,omitempty"`
	Contactable    bool `protobuf:"varint,3,opt,name=contactable,proto3" json:"contactable,omitempty"`
}

func (m *GatewayMask_PrivacySettingsMask) Reset()         { *m = GatewayMask_PrivacySettingsMask{} }
func (m *GatewayMask_PrivacySettingsMask) String() string { return proto.CompactTextString(m) }
func (*GatewayMask_PrivacySettingsMask) ProtoMessage()    {}
func (*GatewayMask_PrivacySettingsMask) Descriptor() ([]byte, []int) {
	return fileDescriptorGateway, []int{1, 0}
}

func (m *GatewayMask_PrivacySettingsMask) GetStatusPublic() bool {
	if m != nil {
		return m.StatusPublic
	}
	return false
}

func (m *GatewayMask_PrivacySettingsMask) GetLocationPublic() bool {
	if m != nil {
		return m.LocationPublic
	}
	return false
}

func (m *GatewayMask_PrivacySettingsMask) GetContactable() bool {
	if m != nil {
		return m.Contactable
	}
	return false
}

// GatewayPrivacySettings is the message that defines the different privacy settings
// of the gateway such as if the owner information or gateway location are public.
type GatewayPrivacySettings struct {
	// status_public denotes whether or not the gateway's status is public or not.
	StatusPublic bool `protobuf:"varint,1,opt,name=status_public,json=statusPublic,proto3" json:"status_public,omitempty"`
	// location_public denotes whether or not the gateway's location is public.
	LocationPublic bool `protobuf:"varint,2,opt,name=location_public,json=locationPublic,proto3" json:"location_public,omitempty"`
	// contactable denotes whether the user ID thas has been set as contact person
	// is private or public.
	Contactable bool `protobuf:"varint,3,opt,name=contactable,proto3" json:"contactable,omitempty"`
}

func (m *GatewayPrivacySettings) Reset()                    { *m = GatewayPrivacySettings{} }
func (m *GatewayPrivacySettings) String() string            { return proto.CompactTextString(m) }
func (*GatewayPrivacySettings) ProtoMessage()               {}
func (*GatewayPrivacySettings) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{2} }

func (m *GatewayPrivacySettings) GetStatusPublic() bool {
	if m != nil {
		return m.StatusPublic
	}
	return false
}

func (m *GatewayPrivacySettings) GetLocationPublic() bool {
	if m != nil {
		return m.LocationPublic
	}
	return false
}

func (m *GatewayPrivacySettings) GetContactable() bool {
	if m != nil {
		return m.Contactable
	}
	return false
}

// GatewayAntenna is the message that defines a gateway antenna.
type GatewayAntenna struct {
	// gain is the antenna gain relative to this gateway, in dBi.
	Gain float32 `protobuf:"fixed32,1,opt,name=gain,proto3" json:"gain,omitempty"`
	// location is the antenna's location.
	Location Location `protobuf:"bytes,2,opt,name=location" json:"location"`
	// type denotes the antenna's type.
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// model denotes the antenna's model.
	Model string `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	// placement denotes whether if the antenna is placed indoors or outdoors.
	Placement GatewayAntennaPlacement `protobuf:"varint,5,opt,name=placement,proto3,enum=ttn.v3.GatewayAntennaPlacement" json:"placement,omitempty"`
}

func (m *GatewayAntenna) Reset()                    { *m = GatewayAntenna{} }
func (m *GatewayAntenna) String() string            { return proto.CompactTextString(m) }
func (*GatewayAntenna) ProtoMessage()               {}
func (*GatewayAntenna) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{3} }

func (m *GatewayAntenna) GetGain() float32 {
	if m != nil {
		return m.Gain
	}
	return 0
}

func (m *GatewayAntenna) GetLocation() Location {
	if m != nil {
		return m.Location
	}
	return Location{}
}

func (m *GatewayAntenna) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *GatewayAntenna) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *GatewayAntenna) GetPlacement() GatewayAntennaPlacement {
	if m != nil {
		return m.Placement
	}
	return PLACEMENT_INDOOR
}

// GatewayConfiguration contains all the latest values relative to this gateway.
type GatewayConfiguration struct {
	// api_key is the API key that is used to identify the gateway against other
	// components in the network.
	APIKey string `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// frequency_plan_id indicates the ID of the frequency plan.
	FrequencyPlanID string `protobuf:"bytes,2,opt,name=frequency_plan_id,json=frequencyPlanId,proto3" json:"frequency_plan_id,omitempty"`
	// cluster_address indicates the URI of the gateway server cluster to connect to,
	// in a "<ip>:<port>" format.
	ClusterAddress string                                             `protobuf:"bytes,3,opt,name=cluster_address,json=clusterAddress,proto3" json:"cluster_address,omitempty"`
	Antennas       []GatewayConfiguration_GatewayAntennaConfiguration `protobuf:"bytes,4,rep,name=antennas" json:"antennas"`
	Radios         []GatewayConfiguration_Radio                       `protobuf:"bytes,6,rep,name=radios" json:"radios"`
}

func (m *GatewayConfiguration) Reset()                    { *m = GatewayConfiguration{} }
func (m *GatewayConfiguration) String() string            { return proto.CompactTextString(m) }
func (*GatewayConfiguration) ProtoMessage()               {}
func (*GatewayConfiguration) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{4} }

func (m *GatewayConfiguration) GetAPIKey() string {
	if m != nil {
		return m.APIKey
	}
	return ""
}

func (m *GatewayConfiguration) GetFrequencyPlanID() string {
	if m != nil {
		return m.FrequencyPlanID
	}
	return ""
}

func (m *GatewayConfiguration) GetClusterAddress() string {
	if m != nil {
		return m.ClusterAddress
	}
	return ""
}

func (m *GatewayConfiguration) GetAntennas() []GatewayConfiguration_GatewayAntennaConfiguration {
	if m != nil {
		return m.Antennas
	}
	return nil
}

func (m *GatewayConfiguration) GetRadios() []GatewayConfiguration_Radio {
	if m != nil {
		return m.Radios
	}
	return nil
}

type GatewayConfiguration_GatewayAntennaConfiguration struct {
	// gain is the antenna gain relative to this gateway, in dBi.
	Gain float32 `protobuf:"fixed32,1,opt,name=gain,proto3" json:"gain,omitempty"`
	// location is the antenna's location.
	Location Location `protobuf:"bytes,2,opt,name=location" json:"location"`
}

func (m *GatewayConfiguration_GatewayAntennaConfiguration) Reset() {
	*m = GatewayConfiguration_GatewayAntennaConfiguration{}
}
func (m *GatewayConfiguration_GatewayAntennaConfiguration) String() string {
	return proto.CompactTextString(m)
}
func (*GatewayConfiguration_GatewayAntennaConfiguration) ProtoMessage() {}
func (*GatewayConfiguration_GatewayAntennaConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptorGateway, []int{4, 0}
}

func (m *GatewayConfiguration_GatewayAntennaConfiguration) GetGain() float32 {
	if m != nil {
		return m.Gain
	}
	return 0
}

func (m *GatewayConfiguration_GatewayAntennaConfiguration) GetLocation() Location {
	if m != nil {
		return m.Location
	}
	return Location{}
}

type GatewayConfiguration_Radio struct {
	Frequency uint32                                      `protobuf:"varint,1,opt,name=frequency,proto3" json:"frequency,omitempty"`
	TXConfig  *GatewayConfiguration_Radio_TxConfiguration `protobuf:"bytes,2,opt,name=radio_tx_config,json=radioTxConfig" json:"radio_tx_config,omitempty"`
}

func (m *GatewayConfiguration_Radio) Reset()         { *m = GatewayConfiguration_Radio{} }
func (m *GatewayConfiguration_Radio) String() string { return proto.CompactTextString(m) }
func (*GatewayConfiguration_Radio) ProtoMessage()    {}
func (*GatewayConfiguration_Radio) Descriptor() ([]byte, []int) {
	return fileDescriptorGateway, []int{4, 1}
}

func (m *GatewayConfiguration_Radio) GetFrequency() uint32 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *GatewayConfiguration_Radio) GetTXConfig() *GatewayConfiguration_Radio_TxConfiguration {
	if m != nil {
		return m.TXConfig
	}
	return nil
}

type GatewayConfiguration_Radio_TxConfiguration struct {
	MinFrequency   uint32 `protobuf:"varint,1,opt,name=min_frequency,json=minFrequency,proto3" json:"min_frequency,omitempty"`
	MaxFrequency   uint32 `protobuf:"varint,2,opt,name=max_frequency,json=maxFrequency,proto3" json:"max_frequency,omitempty"`
	NotchFrequency uint32 `protobuf:"varint,3,opt,name=notch_frequency,json=notchFrequency,proto3" json:"notch_frequency,omitempty"`
}

func (m *GatewayConfiguration_Radio_TxConfiguration) Reset() {
	*m = GatewayConfiguration_Radio_TxConfiguration{}
}
func (m *GatewayConfiguration_Radio_TxConfiguration) String() string {
	return proto.CompactTextString(m)
}
func (*GatewayConfiguration_Radio_TxConfiguration) ProtoMessage() {}
func (*GatewayConfiguration_Radio_TxConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptorGateway, []int{4, 1, 0}
}

func (m *GatewayConfiguration_Radio_TxConfiguration) GetMinFrequency() uint32 {
	if m != nil {
		return m.MinFrequency
	}
	return 0
}

func (m *GatewayConfiguration_Radio_TxConfiguration) GetMaxFrequency() uint32 {
	if m != nil {
		return m.MaxFrequency
	}
	return 0
}

func (m *GatewayConfiguration_Radio_TxConfiguration) GetNotchFrequency() uint32 {
	if m != nil {
		return m.NotchFrequency
	}
	return 0
}

type GatewayStatus struct {
	// Current time of the gateway
	Time *time.Time `protobuf:"bytes,1,opt,name=time,stdtime" json:"time,omitempty"`
	// Boot time of the gateway
	// - can be left out to save bandwidth; old value will be kept
	BootTime *time.Time `protobuf:"bytes,2,opt,name=boot_time,json=bootTime,stdtime" json:"boot_time,omitempty"`
	// Gateway Platform
	// - can be left out to save bandwidth; old value will be kept
	// - for example: "Kerlink iBTS", "MultiTech Conduit AEP", "The Things Gateway", "..."
	Platform string `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	// Versions of gateway subsystems
	// - each field can be left out to save bandwidth; old value will be kept
	// - map keys are written in snake_case
	// - for example:
	//     firmware: "2.0.4"
	//     forwarder: "v2-3.3.1"
	//     fpga: "48"
	//     dsp: "27"
	//     hal: "v2-3.5.0"
	Versions map[string]string `protobuf:"bytes,4,rep,name=versions" json:"versions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Location of each gateway's antenna
	// - if left out, server uses registry-set location as fallback
	AntennasLocation []*Location `protobuf:"bytes,5,rep,name=antennas_location,json=antennasLocation" json:"antennas_location,omitempty"`
	// IP addresses of this gateway
	IP []string `protobuf:"bytes,6,rep,name=ip" json:"ip,omitempty"`
	// Round-trip time to the server
	RTT *time.Duration `protobuf:"bytes,7,opt,name=rtt,stdduration" json:"rtt,omitempty"`
	// Metrics
	// - can be used for forwarding gateway metrics such as temperatures or performance metrics
	// - map keys are written in snake_case
	Metrics map[string]float32 `protobuf:"bytes,8,rep,name=metrics" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	// Advanced metadata fields
	// - can be used for advanced information or experimental features that are not yet formally defined in the API
	// - field names are written in snake_case
	Advanced *google_protobuf3.Struct `protobuf:"bytes,99,opt,name=advanced" json:"advanced,omitempty"`
}

func (m *GatewayStatus) Reset()                    { *m = GatewayStatus{} }
func (m *GatewayStatus) String() string            { return proto.CompactTextString(m) }
func (*GatewayStatus) ProtoMessage()               {}
func (*GatewayStatus) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{5} }

func (m *GatewayStatus) GetTime() *time.Time {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *GatewayStatus) GetBootTime() *time.Time {
	if m != nil {
		return m.BootTime
	}
	return nil
}

func (m *GatewayStatus) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *GatewayStatus) GetVersions() map[string]string {
	if m != nil {
		return m.Versions
	}
	return nil
}

func (m *GatewayStatus) GetAntennasLocation() []*Location {
	if m != nil {
		return m.AntennasLocation
	}
	return nil
}

func (m *GatewayStatus) GetIP() []string {
	if m != nil {
		return m.IP
	}
	return nil
}

func (m *GatewayStatus) GetRTT() *time.Duration {
	if m != nil {
		return m.RTT
	}
	return nil
}

func (m *GatewayStatus) GetMetrics() map[string]float32 {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *GatewayStatus) GetAdvanced() *google_protobuf3.Struct {
	if m != nil {
		return m.Advanced
	}
	return nil
}

// GatewayObservations as observed by the gateway server
type GatewayObservations struct {
	// Time when the last uplink message was received
	LastUplinkReceived *time.Time `protobuf:"bytes,1,opt,name=last_uplink_received,json=lastUplinkReceived,stdtime" json:"last_uplink_received,omitempty"`
	// Uplink message counter. This counter may be reset to 0 when the gateway disconnects.
	UplinkCount uint64 `protobuf:"varint,2,opt,name=uplink_count,json=uplinkCount,proto3" json:"uplink_count,omitempty"`
	// Time when the last downlink message was received
	LastDownlinkReceived *time.Time `protobuf:"bytes,3,opt,name=last_downlink_received,json=lastDownlinkReceived,stdtime" json:"last_downlink_received,omitempty"`
	// Downlink message counter. This counter may be reset to 0 when the gateway disconnects.
	DownlinkCount uint64 `protobuf:"varint,4,opt,name=downlink_count,json=downlinkCount,proto3" json:"downlink_count,omitempty"`
	// Time when the last status message was received
	LastStatusReceived *time.Time `protobuf:"bytes,5,opt,name=last_status_received,json=lastStatusReceived,stdtime" json:"last_status_received,omitempty"`
	// Status message counter. This counter may be reset to 0 when the gateway disconnects.
	StatusCount uint64 `protobuf:"varint,6,opt,name=status_count,json=statusCount,proto3" json:"status_count,omitempty"`
	// Contents of the last status message
	LastStatus *GatewayStatus `protobuf:"bytes,7,opt,name=last_status,json=lastStatus" json:"last_status,omitempty"`
}

func (m *GatewayObservations) Reset()                    { *m = GatewayObservations{} }
func (m *GatewayObservations) String() string            { return proto.CompactTextString(m) }
func (*GatewayObservations) ProtoMessage()               {}
func (*GatewayObservations) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{6} }

func (m *GatewayObservations) GetLastUplinkReceived() *time.Time {
	if m != nil {
		return m.LastUplinkReceived
	}
	return nil
}

func (m *GatewayObservations) GetUplinkCount() uint64 {
	if m != nil {
		return m.UplinkCount
	}
	return 0
}

func (m *GatewayObservations) GetLastDownlinkReceived() *time.Time {
	if m != nil {
		return m.LastDownlinkReceived
	}
	return nil
}

func (m *GatewayObservations) GetDownlinkCount() uint64 {
	if m != nil {
		return m.DownlinkCount
	}
	return 0
}

func (m *GatewayObservations) GetLastStatusReceived() *time.Time {
	if m != nil {
		return m.LastStatusReceived
	}
	return nil
}

func (m *GatewayObservations) GetStatusCount() uint64 {
	if m != nil {
		return m.StatusCount
	}
	return 0
}

func (m *GatewayObservations) GetLastStatus() *GatewayStatus {
	if m != nil {
		return m.LastStatus
	}
	return nil
}

func init() {
	proto.RegisterType((*Gateway)(nil), "ttn.v3.Gateway")
	golang_proto.RegisterType((*Gateway)(nil), "ttn.v3.Gateway")
	proto.RegisterType((*GatewayMask)(nil), "ttn.v3.GatewayMask")
	golang_proto.RegisterType((*GatewayMask)(nil), "ttn.v3.GatewayMask")
	proto.RegisterType((*GatewayMask_PrivacySettingsMask)(nil), "ttn.v3.GatewayMask.PrivacySettingsMask")
	golang_proto.RegisterType((*GatewayMask_PrivacySettingsMask)(nil), "ttn.v3.GatewayMask.PrivacySettingsMask")
	proto.RegisterType((*GatewayPrivacySettings)(nil), "ttn.v3.GatewayPrivacySettings")
	golang_proto.RegisterType((*GatewayPrivacySettings)(nil), "ttn.v3.GatewayPrivacySettings")
	proto.RegisterType((*GatewayAntenna)(nil), "ttn.v3.GatewayAntenna")
	golang_proto.RegisterType((*GatewayAntenna)(nil), "ttn.v3.GatewayAntenna")
	proto.RegisterType((*GatewayConfiguration)(nil), "ttn.v3.GatewayConfiguration")
	golang_proto.RegisterType((*GatewayConfiguration)(nil), "ttn.v3.GatewayConfiguration")
	proto.RegisterType((*GatewayConfiguration_GatewayAntennaConfiguration)(nil), "ttn.v3.GatewayConfiguration.GatewayAntennaConfiguration")
	golang_proto.RegisterType((*GatewayConfiguration_GatewayAntennaConfiguration)(nil), "ttn.v3.GatewayConfiguration.GatewayAntennaConfiguration")
	proto.RegisterType((*GatewayConfiguration_Radio)(nil), "ttn.v3.GatewayConfiguration.Radio")
	golang_proto.RegisterType((*GatewayConfiguration_Radio)(nil), "ttn.v3.GatewayConfiguration.Radio")
	proto.RegisterType((*GatewayConfiguration_Radio_TxConfiguration)(nil), "ttn.v3.GatewayConfiguration.Radio.TxConfiguration")
	golang_proto.RegisterType((*GatewayConfiguration_Radio_TxConfiguration)(nil), "ttn.v3.GatewayConfiguration.Radio.TxConfiguration")
	proto.RegisterType((*GatewayStatus)(nil), "ttn.v3.GatewayStatus")
	golang_proto.RegisterType((*GatewayStatus)(nil), "ttn.v3.GatewayStatus")
	proto.RegisterType((*GatewayObservations)(nil), "ttn.v3.GatewayObservations")
	golang_proto.RegisterType((*GatewayObservations)(nil), "ttn.v3.GatewayObservations")
	proto.RegisterEnum("ttn.v3.GatewayAntennaPlacement", GatewayAntennaPlacement_name, GatewayAntennaPlacement_value)
	golang_proto.RegisterEnum("ttn.v3.GatewayAntennaPlacement", GatewayAntennaPlacement_name, GatewayAntennaPlacement_value)
}
func (x GatewayAntennaPlacement) String() string {
	s, ok := GatewayAntennaPlacement_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Gateway) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Gateway)
	if !ok {
		that2, ok := that.(Gateway)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Gateway")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Gateway but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Gateway but is not nil && this == nil")
	}
	if !this.GatewayIdentifier.Equal(&that1.GatewayIdentifier) {
		return fmt.Errorf("GatewayIdentifier this(%v) Not Equal that(%v)", this.GatewayIdentifier, that1.GatewayIdentifier)
	}
	if this.Description != that1.Description {
		return fmt.Errorf("Description this(%v) Not Equal that(%v)", this.Description, that1.Description)
	}
	if len(this.APIKeys) != len(that1.APIKeys) {
		return fmt.Errorf("APIKeys this(%v) Not Equal that(%v)", len(this.APIKeys), len(that1.APIKeys))
	}
	for i := range this.APIKeys {
		if !this.APIKeys[i].Equal(&that1.APIKeys[i]) {
			return fmt.Errorf("APIKeys this[%v](%v) Not Equal that[%v](%v)", i, this.APIKeys[i], i, that1.APIKeys[i])
		}
	}
	if this.FrequencyPlanID != that1.FrequencyPlanID {
		return fmt.Errorf("FrequencyPlanID this(%v) Not Equal that(%v)", this.FrequencyPlanID, that1.FrequencyPlanID)
	}
	if !this.ActivatedAt.Equal(that1.ActivatedAt) {
		return fmt.Errorf("ActivatedAt this(%v) Not Equal that(%v)", this.ActivatedAt, that1.ActivatedAt)
	}
	if !this.PrivacySettings.Equal(&that1.PrivacySettings) {
		return fmt.Errorf("PrivacySettings this(%v) Not Equal that(%v)", this.PrivacySettings, that1.PrivacySettings)
	}
	if this.AutoUpdate != that1.AutoUpdate {
		return fmt.Errorf("AutoUpdate this(%v) Not Equal that(%v)", this.AutoUpdate, that1.AutoUpdate)
	}
	if this.Platform != that1.Platform {
		return fmt.Errorf("Platform this(%v) Not Equal that(%v)", this.Platform, that1.Platform)
	}
	if len(this.Antennas) != len(that1.Antennas) {
		return fmt.Errorf("Antennas this(%v) Not Equal that(%v)", len(this.Antennas), len(that1.Antennas))
	}
	for i := range this.Antennas {
		if !this.Antennas[i].Equal(&that1.Antennas[i]) {
			return fmt.Errorf("Antennas this[%v](%v) Not Equal that[%v](%v)", i, this.Antennas[i], i, that1.Antennas[i])
		}
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return fmt.Errorf("Attributes this(%v) Not Equal that(%v)", len(this.Attributes), len(that1.Attributes))
	}
	for i := range this.Attributes {
		if this.Attributes[i] != that1.Attributes[i] {
			return fmt.Errorf("Attributes this[%v](%v) Not Equal that[%v](%v)", i, this.Attributes[i], i, that1.Attributes[i])
		}
	}
	if this.ClusterAddress != that1.ClusterAddress {
		return fmt.Errorf("ClusterAddress this(%v) Not Equal that(%v)", this.ClusterAddress, that1.ClusterAddress)
	}
	if !this.ContactAccount.Equal(&that1.ContactAccount) {
		return fmt.Errorf("ContactAccount this(%v) Not Equal that(%v)", this.ContactAccount, that1.ContactAccount)
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return fmt.Errorf("CreatedAt this(%v) Not Equal that(%v)", this.CreatedAt, that1.CreatedAt)
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return fmt.Errorf("UpdatedAt this(%v) Not Equal that(%v)", this.UpdatedAt, that1.UpdatedAt)
	}
	if !this.ArchivedAt.Equal(that1.ArchivedAt) {
		return fmt.Errorf("ArchivedAt this(%v) Not Equal that(%v)", this.ArchivedAt, that1.ArchivedAt)
	}
	return nil
}
func (this *Gateway) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Gateway)
	if !ok {
		that2, ok := that.(Gateway)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.GatewayIdentifier.Equal(&that1.GatewayIdentifier) {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.APIKeys) != len(that1.APIKeys) {
		return false
	}
	for i := range this.APIKeys {
		if !this.APIKeys[i].Equal(&that1.APIKeys[i]) {
			return false
		}
	}
	if this.FrequencyPlanID != that1.FrequencyPlanID {
		return false
	}
	if !this.ActivatedAt.Equal(that1.ActivatedAt) {
		return false
	}
	if !this.PrivacySettings.Equal(&that1.PrivacySettings) {
		return false
	}
	if this.AutoUpdate != that1.AutoUpdate {
		return false
	}
	if this.Platform != that1.Platform {
		return false
	}
	if len(this.Antennas) != len(that1.Antennas) {
		return false
	}
	for i := range this.Antennas {
		if !this.Antennas[i].Equal(&that1.Antennas[i]) {
			return false
		}
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return false
	}
	for i := range this.Attributes {
		if this.Attributes[i] != that1.Attributes[i] {
			return false
		}
	}
	if this.ClusterAddress != that1.ClusterAddress {
		return false
	}
	if !this.ContactAccount.Equal(&that1.ContactAccount) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if !this.ArchivedAt.Equal(that1.ArchivedAt) {
		return false
	}
	return true
}
func (this *GatewayMask) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GatewayMask)
	if !ok {
		that2, ok := that.(GatewayMask)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GatewayMask")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GatewayMask but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GatewayMask but is not nil && this == nil")
	}
	if this.Description != that1.Description {
		return fmt.Errorf("Description this(%v) Not Equal that(%v)", this.Description, that1.Description)
	}
	if this.FrequencyPlanID != that1.FrequencyPlanID {
		return fmt.Errorf("FrequencyPlanID this(%v) Not Equal that(%v)", this.FrequencyPlanID, that1.FrequencyPlanID)
	}
	if !this.PrivacySettings.Equal(&that1.PrivacySettings) {
		return fmt.Errorf("PrivacySettings this(%v) Not Equal that(%v)", this.PrivacySettings, that1.PrivacySettings)
	}
	if this.AutoUpdate != that1.AutoUpdate {
		return fmt.Errorf("AutoUpdate this(%v) Not Equal that(%v)", this.AutoUpdate, that1.AutoUpdate)
	}
	if this.Platform != that1.Platform {
		return fmt.Errorf("Platform this(%v) Not Equal that(%v)", this.Platform, that1.Platform)
	}
	if this.Antennas != that1.Antennas {
		return fmt.Errorf("Antennas this(%v) Not Equal that(%v)", this.Antennas, that1.Antennas)
	}
	if this.Attributes != that1.Attributes {
		return fmt.Errorf("Attributes this(%v) Not Equal that(%v)", this.Attributes, that1.Attributes)
	}
	if this.ClusterAddress != that1.ClusterAddress {
		return fmt.Errorf("ClusterAddress this(%v) Not Equal that(%v)", this.ClusterAddress, that1.ClusterAddress)
	}
	if this.ContactAccount != that1.ContactAccount {
		return fmt.Errorf("ContactAccount this(%v) Not Equal that(%v)", this.ContactAccount, that1.ContactAccount)
	}
	return nil
}
func (this *GatewayMask) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GatewayMask)
	if !ok {
		that2, ok := that.(GatewayMask)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.FrequencyPlanID != that1.FrequencyPlanID {
		return false
	}
	if !this.PrivacySettings.Equal(&that1.PrivacySettings) {
		return false
	}
	if this.AutoUpdate != that1.AutoUpdate {
		return false
	}
	if this.Platform != that1.Platform {
		return false
	}
	if this.Antennas != that1.Antennas {
		return false
	}
	if this.Attributes != that1.Attributes {
		return false
	}
	if this.ClusterAddress != that1.ClusterAddress {
		return false
	}
	if this.ContactAccount != that1.ContactAccount {
		return false
	}
	return true
}
func (this *GatewayMask_PrivacySettingsMask) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GatewayMask_PrivacySettingsMask)
	if !ok {
		that2, ok := that.(GatewayMask_PrivacySettingsMask)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GatewayMask_PrivacySettingsMask")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GatewayMask_PrivacySettingsMask but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GatewayMask_PrivacySettingsMask but is not nil && this == nil")
	}
	if this.StatusPublic != that1.StatusPublic {
		return fmt.Errorf("StatusPublic this(%v) Not Equal that(%v)", this.StatusPublic, that1.StatusPublic)
	}
	if this.LocationPublic != that1.LocationPublic {
		return fmt.Errorf("LocationPublic this(%v) Not Equal that(%v)", this.LocationPublic, that1.LocationPublic)
	}
	if this.Contactable != that1.Contactable {
		return fmt.Errorf("Contactable this(%v) Not Equal that(%v)", this.Contactable, that1.Contactable)
	}
	return nil
}
func (this *GatewayMask_PrivacySettingsMask) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GatewayMask_PrivacySettingsMask)
	if !ok {
		that2, ok := that.(GatewayMask_PrivacySettingsMask)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.StatusPublic != that1.StatusPublic {
		return false
	}
	if this.LocationPublic != that1.LocationPublic {
		return false
	}
	if this.Contactable != that1.Contactable {
		return false
	}
	return true
}
func (this *GatewayPrivacySettings) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GatewayPrivacySettings)
	if !ok {
		that2, ok := that.(GatewayPrivacySettings)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GatewayPrivacySettings")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GatewayPrivacySettings but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GatewayPrivacySettings but is not nil && this == nil")
	}
	if this.StatusPublic != that1.StatusPublic {
		return fmt.Errorf("StatusPublic this(%v) Not Equal that(%v)", this.StatusPublic, that1.StatusPublic)
	}
	if this.LocationPublic != that1.LocationPublic {
		return fmt.Errorf("LocationPublic this(%v) Not Equal that(%v)", this.LocationPublic, that1.LocationPublic)
	}
	if this.Contactable != that1.Contactable {
		return fmt.Errorf("Contactable this(%v) Not Equal that(%v)", this.Contactable, that1.Contactable)
	}
	return nil
}
func (this *GatewayPrivacySettings) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GatewayPrivacySettings)
	if !ok {
		that2, ok := that.(GatewayPrivacySettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.StatusPublic != that1.StatusPublic {
		return false
	}
	if this.LocationPublic != that1.LocationPublic {
		return false
	}
	if this.Contactable != that1.Contactable {
		return false
	}
	return true
}
func (this *GatewayAntenna) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GatewayAntenna)
	if !ok {
		that2, ok := that.(GatewayAntenna)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GatewayAntenna")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GatewayAntenna but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GatewayAntenna but is not nil && this == nil")
	}
	if this.Gain != that1.Gain {
		return fmt.Errorf("Gain this(%v) Not Equal that(%v)", this.Gain, that1.Gain)
	}
	if !this.Location.Equal(&that1.Location) {
		return fmt.Errorf("Location this(%v) Not Equal that(%v)", this.Location, that1.Location)
	}
	if this.Type != that1.Type {
		return fmt.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	if this.Model != that1.Model {
		return fmt.Errorf("Model this(%v) Not Equal that(%v)", this.Model, that1.Model)
	}
	if this.Placement != that1.Placement {
		return fmt.Errorf("Placement this(%v) Not Equal that(%v)", this.Placement, that1.Placement)
	}
	return nil
}
func (this *GatewayAntenna) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GatewayAntenna)
	if !ok {
		that2, ok := that.(GatewayAntenna)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Gain != that1.Gain {
		return false
	}
	if !this.Location.Equal(&that1.Location) {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Model != that1.Model {
		return false
	}
	if this.Placement != that1.Placement {
		return false
	}
	return true
}
func (this *GatewayConfiguration) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GatewayConfiguration)
	if !ok {
		that2, ok := that.(GatewayConfiguration)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GatewayConfiguration")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GatewayConfiguration but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GatewayConfiguration but is not nil && this == nil")
	}
	if this.APIKey != that1.APIKey {
		return fmt.Errorf("APIKey this(%v) Not Equal that(%v)", this.APIKey, that1.APIKey)
	}
	if this.FrequencyPlanID != that1.FrequencyPlanID {
		return fmt.Errorf("FrequencyPlanID this(%v) Not Equal that(%v)", this.FrequencyPlanID, that1.FrequencyPlanID)
	}
	if this.ClusterAddress != that1.ClusterAddress {
		return fmt.Errorf("ClusterAddress this(%v) Not Equal that(%v)", this.ClusterAddress, that1.ClusterAddress)
	}
	if len(this.Antennas) != len(that1.Antennas) {
		return fmt.Errorf("Antennas this(%v) Not Equal that(%v)", len(this.Antennas), len(that1.Antennas))
	}
	for i := range this.Antennas {
		if !this.Antennas[i].Equal(&that1.Antennas[i]) {
			return fmt.Errorf("Antennas this[%v](%v) Not Equal that[%v](%v)", i, this.Antennas[i], i, that1.Antennas[i])
		}
	}
	if len(this.Radios) != len(that1.Radios) {
		return fmt.Errorf("Radios this(%v) Not Equal that(%v)", len(this.Radios), len(that1.Radios))
	}
	for i := range this.Radios {
		if !this.Radios[i].Equal(&that1.Radios[i]) {
			return fmt.Errorf("Radios this[%v](%v) Not Equal that[%v](%v)", i, this.Radios[i], i, that1.Radios[i])
		}
	}
	return nil
}
func (this *GatewayConfiguration) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GatewayConfiguration)
	if !ok {
		that2, ok := that.(GatewayConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.APIKey != that1.APIKey {
		return false
	}
	if this.FrequencyPlanID != that1.FrequencyPlanID {
		return false
	}
	if this.ClusterAddress != that1.ClusterAddress {
		return false
	}
	if len(this.Antennas) != len(that1.Antennas) {
		return false
	}
	for i := range this.Antennas {
		if !this.Antennas[i].Equal(&that1.Antennas[i]) {
			return false
		}
	}
	if len(this.Radios) != len(that1.Radios) {
		return false
	}
	for i := range this.Radios {
		if !this.Radios[i].Equal(&that1.Radios[i]) {
			return false
		}
	}
	return true
}
func (this *GatewayConfiguration_GatewayAntennaConfiguration) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GatewayConfiguration_GatewayAntennaConfiguration)
	if !ok {
		that2, ok := that.(GatewayConfiguration_GatewayAntennaConfiguration)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GatewayConfiguration_GatewayAntennaConfiguration")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GatewayConfiguration_GatewayAntennaConfiguration but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GatewayConfiguration_GatewayAntennaConfiguration but is not nil && this == nil")
	}
	if this.Gain != that1.Gain {
		return fmt.Errorf("Gain this(%v) Not Equal that(%v)", this.Gain, that1.Gain)
	}
	if !this.Location.Equal(&that1.Location) {
		return fmt.Errorf("Location this(%v) Not Equal that(%v)", this.Location, that1.Location)
	}
	return nil
}
func (this *GatewayConfiguration_GatewayAntennaConfiguration) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GatewayConfiguration_GatewayAntennaConfiguration)
	if !ok {
		that2, ok := that.(GatewayConfiguration_GatewayAntennaConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Gain != that1.Gain {
		return false
	}
	if !this.Location.Equal(&that1.Location) {
		return false
	}
	return true
}
func (this *GatewayConfiguration_Radio) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GatewayConfiguration_Radio)
	if !ok {
		that2, ok := that.(GatewayConfiguration_Radio)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GatewayConfiguration_Radio")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GatewayConfiguration_Radio but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GatewayConfiguration_Radio but is not nil && this == nil")
	}
	if this.Frequency != that1.Frequency {
		return fmt.Errorf("Frequency this(%v) Not Equal that(%v)", this.Frequency, that1.Frequency)
	}
	if !this.TXConfig.Equal(that1.TXConfig) {
		return fmt.Errorf("TXConfig this(%v) Not Equal that(%v)", this.TXConfig, that1.TXConfig)
	}
	return nil
}
func (this *GatewayConfiguration_Radio) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GatewayConfiguration_Radio)
	if !ok {
		that2, ok := that.(GatewayConfiguration_Radio)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Frequency != that1.Frequency {
		return false
	}
	if !this.TXConfig.Equal(that1.TXConfig) {
		return false
	}
	return true
}
func (this *GatewayConfiguration_Radio_TxConfiguration) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GatewayConfiguration_Radio_TxConfiguration)
	if !ok {
		that2, ok := that.(GatewayConfiguration_Radio_TxConfiguration)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GatewayConfiguration_Radio_TxConfiguration")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GatewayConfiguration_Radio_TxConfiguration but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GatewayConfiguration_Radio_TxConfiguration but is not nil && this == nil")
	}
	if this.MinFrequency != that1.MinFrequency {
		return fmt.Errorf("MinFrequency this(%v) Not Equal that(%v)", this.MinFrequency, that1.MinFrequency)
	}
	if this.MaxFrequency != that1.MaxFrequency {
		return fmt.Errorf("MaxFrequency this(%v) Not Equal that(%v)", this.MaxFrequency, that1.MaxFrequency)
	}
	if this.NotchFrequency != that1.NotchFrequency {
		return fmt.Errorf("NotchFrequency this(%v) Not Equal that(%v)", this.NotchFrequency, that1.NotchFrequency)
	}
	return nil
}
func (this *GatewayConfiguration_Radio_TxConfiguration) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GatewayConfiguration_Radio_TxConfiguration)
	if !ok {
		that2, ok := that.(GatewayConfiguration_Radio_TxConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.MinFrequency != that1.MinFrequency {
		return false
	}
	if this.MaxFrequency != that1.MaxFrequency {
		return false
	}
	if this.NotchFrequency != that1.NotchFrequency {
		return false
	}
	return true
}
func (this *GatewayStatus) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GatewayStatus)
	if !ok {
		that2, ok := that.(GatewayStatus)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GatewayStatus")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GatewayStatus but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GatewayStatus but is not nil && this == nil")
	}
	if that1.Time == nil {
		if this.Time != nil {
			return fmt.Errorf("this.Time != nil && that1.Time == nil")
		}
	} else if !this.Time.Equal(*that1.Time) {
		return fmt.Errorf("Time this(%v) Not Equal that(%v)", this.Time, that1.Time)
	}
	if that1.BootTime == nil {
		if this.BootTime != nil {
			return fmt.Errorf("this.BootTime != nil && that1.BootTime == nil")
		}
	} else if !this.BootTime.Equal(*that1.BootTime) {
		return fmt.Errorf("BootTime this(%v) Not Equal that(%v)", this.BootTime, that1.BootTime)
	}
	if this.Platform != that1.Platform {
		return fmt.Errorf("Platform this(%v) Not Equal that(%v)", this.Platform, that1.Platform)
	}
	if len(this.Versions) != len(that1.Versions) {
		return fmt.Errorf("Versions this(%v) Not Equal that(%v)", len(this.Versions), len(that1.Versions))
	}
	for i := range this.Versions {
		if this.Versions[i] != that1.Versions[i] {
			return fmt.Errorf("Versions this[%v](%v) Not Equal that[%v](%v)", i, this.Versions[i], i, that1.Versions[i])
		}
	}
	if len(this.AntennasLocation) != len(that1.AntennasLocation) {
		return fmt.Errorf("AntennasLocation this(%v) Not Equal that(%v)", len(this.AntennasLocation), len(that1.AntennasLocation))
	}
	for i := range this.AntennasLocation {
		if !this.AntennasLocation[i].Equal(that1.AntennasLocation[i]) {
			return fmt.Errorf("AntennasLocation this[%v](%v) Not Equal that[%v](%v)", i, this.AntennasLocation[i], i, that1.AntennasLocation[i])
		}
	}
	if len(this.IP) != len(that1.IP) {
		return fmt.Errorf("IP this(%v) Not Equal that(%v)", len(this.IP), len(that1.IP))
	}
	for i := range this.IP {
		if this.IP[i] != that1.IP[i] {
			return fmt.Errorf("IP this[%v](%v) Not Equal that[%v](%v)", i, this.IP[i], i, that1.IP[i])
		}
	}
	if this.RTT != nil && that1.RTT != nil {
		if *this.RTT != *that1.RTT {
			return fmt.Errorf("RTT this(%v) Not Equal that(%v)", *this.RTT, *that1.RTT)
		}
	} else if this.RTT != nil {
		return fmt.Errorf("this.RTT == nil && that.RTT != nil")
	} else if that1.RTT != nil {
		return fmt.Errorf("RTT this(%v) Not Equal that(%v)", this.RTT, that1.RTT)
	}
	if len(this.Metrics) != len(that1.Metrics) {
		return fmt.Errorf("Metrics this(%v) Not Equal that(%v)", len(this.Metrics), len(that1.Metrics))
	}
	for i := range this.Metrics {
		if this.Metrics[i] != that1.Metrics[i] {
			return fmt.Errorf("Metrics this[%v](%v) Not Equal that[%v](%v)", i, this.Metrics[i], i, that1.Metrics[i])
		}
	}
	if !this.Advanced.Equal(that1.Advanced) {
		return fmt.Errorf("Advanced this(%v) Not Equal that(%v)", this.Advanced, that1.Advanced)
	}
	return nil
}
func (this *GatewayStatus) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GatewayStatus)
	if !ok {
		that2, ok := that.(GatewayStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if that1.Time == nil {
		if this.Time != nil {
			return false
		}
	} else if !this.Time.Equal(*that1.Time) {
		return false
	}
	if that1.BootTime == nil {
		if this.BootTime != nil {
			return false
		}
	} else if !this.BootTime.Equal(*that1.BootTime) {
		return false
	}
	if this.Platform != that1.Platform {
		return false
	}
	if len(this.Versions) != len(that1.Versions) {
		return false
	}
	for i := range this.Versions {
		if this.Versions[i] != that1.Versions[i] {
			return false
		}
	}
	if len(this.AntennasLocation) != len(that1.AntennasLocation) {
		return false
	}
	for i := range this.AntennasLocation {
		if !this.AntennasLocation[i].Equal(that1.AntennasLocation[i]) {
			return false
		}
	}
	if len(this.IP) != len(that1.IP) {
		return false
	}
	for i := range this.IP {
		if this.IP[i] != that1.IP[i] {
			return false
		}
	}
	if this.RTT != nil && that1.RTT != nil {
		if *this.RTT != *that1.RTT {
			return false
		}
	} else if this.RTT != nil {
		return false
	} else if that1.RTT != nil {
		return false
	}
	if len(this.Metrics) != len(that1.Metrics) {
		return false
	}
	for i := range this.Metrics {
		if this.Metrics[i] != that1.Metrics[i] {
			return false
		}
	}
	if !this.Advanced.Equal(that1.Advanced) {
		return false
	}
	return true
}
func (this *GatewayObservations) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GatewayObservations)
	if !ok {
		that2, ok := that.(GatewayObservations)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GatewayObservations")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GatewayObservations but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GatewayObservations but is not nil && this == nil")
	}
	if that1.LastUplinkReceived == nil {
		if this.LastUplinkReceived != nil {
			return fmt.Errorf("this.LastUplinkReceived != nil && that1.LastUplinkReceived == nil")
		}
	} else if !this.LastUplinkReceived.Equal(*that1.LastUplinkReceived) {
		return fmt.Errorf("LastUplinkReceived this(%v) Not Equal that(%v)", this.LastUplinkReceived, that1.LastUplinkReceived)
	}
	if this.UplinkCount != that1.UplinkCount {
		return fmt.Errorf("UplinkCount this(%v) Not Equal that(%v)", this.UplinkCount, that1.UplinkCount)
	}
	if that1.LastDownlinkReceived == nil {
		if this.LastDownlinkReceived != nil {
			return fmt.Errorf("this.LastDownlinkReceived != nil && that1.LastDownlinkReceived == nil")
		}
	} else if !this.LastDownlinkReceived.Equal(*that1.LastDownlinkReceived) {
		return fmt.Errorf("LastDownlinkReceived this(%v) Not Equal that(%v)", this.LastDownlinkReceived, that1.LastDownlinkReceived)
	}
	if this.DownlinkCount != that1.DownlinkCount {
		return fmt.Errorf("DownlinkCount this(%v) Not Equal that(%v)", this.DownlinkCount, that1.DownlinkCount)
	}
	if that1.LastStatusReceived == nil {
		if this.LastStatusReceived != nil {
			return fmt.Errorf("this.LastStatusReceived != nil && that1.LastStatusReceived == nil")
		}
	} else if !this.LastStatusReceived.Equal(*that1.LastStatusReceived) {
		return fmt.Errorf("LastStatusReceived this(%v) Not Equal that(%v)", this.LastStatusReceived, that1.LastStatusReceived)
	}
	if this.StatusCount != that1.StatusCount {
		return fmt.Errorf("StatusCount this(%v) Not Equal that(%v)", this.StatusCount, that1.StatusCount)
	}
	if !this.LastStatus.Equal(that1.LastStatus) {
		return fmt.Errorf("LastStatus this(%v) Not Equal that(%v)", this.LastStatus, that1.LastStatus)
	}
	return nil
}
func (this *GatewayObservations) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GatewayObservations)
	if !ok {
		that2, ok := that.(GatewayObservations)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if that1.LastUplinkReceived == nil {
		if this.LastUplinkReceived != nil {
			return false
		}
	} else if !this.LastUplinkReceived.Equal(*that1.LastUplinkReceived) {
		return false
	}
	if this.UplinkCount != that1.UplinkCount {
		return false
	}
	if that1.LastDownlinkReceived == nil {
		if this.LastDownlinkReceived != nil {
			return false
		}
	} else if !this.LastDownlinkReceived.Equal(*that1.LastDownlinkReceived) {
		return false
	}
	if this.DownlinkCount != that1.DownlinkCount {
		return false
	}
	if that1.LastStatusReceived == nil {
		if this.LastStatusReceived != nil {
			return false
		}
	} else if !this.LastStatusReceived.Equal(*that1.LastStatusReceived) {
		return false
	}
	if this.StatusCount != that1.StatusCount {
		return false
	}
	if !this.LastStatus.Equal(that1.LastStatus) {
		return false
	}
	return true
}
func (m *Gateway) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Gateway) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.GatewayIdentifier.Size()))
	n1, err := m.GatewayIdentifier.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Description) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.APIKeys) > 0 {
		for _, msg := range m.APIKeys {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGateway(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.FrequencyPlanID) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.FrequencyPlanID)))
		i += copy(dAtA[i:], m.FrequencyPlanID)
	}
	dAtA[i] = 0x2a
	i++
	i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.ActivatedAt)))
	n2, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ActivatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x32
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.PrivacySettings.Size()))
	n3, err := m.PrivacySettings.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if m.AutoUpdate {
		dAtA[i] = 0x38
		i++
		if m.AutoUpdate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if len(m.Antennas) > 0 {
		for _, msg := range m.Antennas {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintGateway(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Attributes) > 0 {
		for k := range m.Attributes {
			dAtA[i] = 0x52
			i++
			v := m.Attributes[k]
			mapSize := 1 + len(k) + sovGateway(uint64(len(k))) + 1 + len(v) + sovGateway(uint64(len(v)))
			i = encodeVarintGateway(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGateway(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintGateway(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.ClusterAddress) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.ClusterAddress)))
		i += copy(dAtA[i:], m.ClusterAddress)
	}
	dAtA[i] = 0x62
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.ContactAccount.Size()))
	n4, err := m.ContactAccount.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)))
	n5, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x72
	i++
	i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)))
	n6, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x7a
	i++
	i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.ArchivedAt)))
	n7, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ArchivedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	return i, nil
}

func (m *GatewayMask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayMask) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Description {
		dAtA[i] = 0x8
		i++
		if m.Description {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.FrequencyPlanID {
		dAtA[i] = 0x10
		i++
		if m.FrequencyPlanID {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.PrivacySettings.Size()))
	n8, err := m.PrivacySettings.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	if m.AutoUpdate {
		dAtA[i] = 0x20
		i++
		if m.AutoUpdate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Platform {
		dAtA[i] = 0x28
		i++
		if m.Platform {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Antennas {
		dAtA[i] = 0x30
		i++
		if m.Antennas {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Attributes {
		dAtA[i] = 0x38
		i++
		if m.Attributes {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ClusterAddress {
		dAtA[i] = 0x40
		i++
		if m.ClusterAddress {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ContactAccount {
		dAtA[i] = 0x48
		i++
		if m.ContactAccount {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GatewayMask_PrivacySettingsMask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayMask_PrivacySettingsMask) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StatusPublic {
		dAtA[i] = 0x8
		i++
		if m.StatusPublic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.LocationPublic {
		dAtA[i] = 0x10
		i++
		if m.LocationPublic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Contactable {
		dAtA[i] = 0x18
		i++
		if m.Contactable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GatewayPrivacySettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayPrivacySettings) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StatusPublic {
		dAtA[i] = 0x8
		i++
		if m.StatusPublic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.LocationPublic {
		dAtA[i] = 0x10
		i++
		if m.LocationPublic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Contactable {
		dAtA[i] = 0x18
		i++
		if m.Contactable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GatewayAntenna) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayAntenna) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Gain != 0 {
		dAtA[i] = 0xd
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], math.Float32bits(m.Gain))
		i += 4
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.Location.Size()))
	n9, err := m.Location.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	if len(m.Type) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Model) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Model)))
		i += copy(dAtA[i:], m.Model)
	}
	if m.Placement != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.Placement))
	}
	return i, nil
}

func (m *GatewayConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayConfiguration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.APIKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.APIKey)))
		i += copy(dAtA[i:], m.APIKey)
	}
	if len(m.FrequencyPlanID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.FrequencyPlanID)))
		i += copy(dAtA[i:], m.FrequencyPlanID)
	}
	if len(m.ClusterAddress) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.ClusterAddress)))
		i += copy(dAtA[i:], m.ClusterAddress)
	}
	if len(m.Antennas) > 0 {
		for _, msg := range m.Antennas {
			dAtA[i] = 0x22
			i++
			i = encodeVarintGateway(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Radios) > 0 {
		for _, msg := range m.Radios {
			dAtA[i] = 0x32
			i++
			i = encodeVarintGateway(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GatewayConfiguration_GatewayAntennaConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayConfiguration_GatewayAntennaConfiguration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Gain != 0 {
		dAtA[i] = 0xd
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], math.Float32bits(m.Gain))
		i += 4
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.Location.Size()))
	n10, err := m.Location.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	return i, nil
}

func (m *GatewayConfiguration_Radio) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayConfiguration_Radio) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Frequency != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.Frequency))
	}
	if m.TXConfig != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.TXConfig.Size()))
		n11, err := m.TXConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *GatewayConfiguration_Radio_TxConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayConfiguration_Radio_TxConfiguration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MinFrequency != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.MinFrequency))
	}
	if m.MaxFrequency != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.MaxFrequency))
	}
	if m.NotchFrequency != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.NotchFrequency))
	}
	return i, nil
}

func (m *GatewayStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.Time)))
		n12, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.Time, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.BootTime != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.BootTime)))
		n13, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.BootTime, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if len(m.Versions) > 0 {
		for k := range m.Versions {
			dAtA[i] = 0x22
			i++
			v := m.Versions[k]
			mapSize := 1 + len(k) + sovGateway(uint64(len(k))) + 1 + len(v) + sovGateway(uint64(len(v)))
			i = encodeVarintGateway(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGateway(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintGateway(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.AntennasLocation) > 0 {
		for _, msg := range m.AntennasLocation {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintGateway(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.IP) > 0 {
		for _, s := range m.IP {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.RTT != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdDuration(*m.RTT)))
		n14, err := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.RTT, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if len(m.Metrics) > 0 {
		for k := range m.Metrics {
			dAtA[i] = 0x42
			i++
			v := m.Metrics[k]
			mapSize := 1 + len(k) + sovGateway(uint64(len(k))) + 1 + 4
			i = encodeVarintGateway(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGateway(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x15
			i++
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], math.Float32bits(v))
			i += 4
		}
	}
	if m.Advanced != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.Advanced.Size()))
		n15, err := m.Advanced.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}

func (m *GatewayObservations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayObservations) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LastUplinkReceived != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastUplinkReceived)))
		n16, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastUplinkReceived, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.UplinkCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGateway(dAtA, i, m.UplinkCount)
	}
	if m.LastDownlinkReceived != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastDownlinkReceived)))
		n17, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastDownlinkReceived, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.DownlinkCount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGateway(dAtA, i, m.DownlinkCount)
	}
	if m.LastStatusReceived != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastStatusReceived)))
		n18, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastStatusReceived, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.StatusCount != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGateway(dAtA, i, m.StatusCount)
	}
	if m.LastStatus != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.LastStatus.Size()))
		n19, err := m.LastStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}

func encodeVarintGateway(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedGateway(r randyGateway, easy bool) *Gateway {
	this := &Gateway{}
	v1 := NewPopulatedGatewayIdentifier(r, easy)
	this.GatewayIdentifier = *v1
	this.Description = randStringGateway(r)
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.APIKeys = make([]APIKey, v2)
		for i := 0; i < v2; i++ {
			v3 := NewPopulatedAPIKey(r, easy)
			this.APIKeys[i] = *v3
		}
	}
	this.FrequencyPlanID = randStringGateway(r)
	v4 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.ActivatedAt = *v4
	v5 := NewPopulatedGatewayPrivacySettings(r, easy)
	this.PrivacySettings = *v5
	this.AutoUpdate = bool(r.Intn(2) == 0)
	this.Platform = randStringGateway(r)
	if r.Intn(10) != 0 {
		v6 := r.Intn(5)
		this.Antennas = make([]GatewayAntenna, v6)
		for i := 0; i < v6; i++ {
			v7 := NewPopulatedGatewayAntenna(r, easy)
			this.Antennas[i] = *v7
		}
	}
	if r.Intn(10) != 0 {
		v8 := r.Intn(10)
		this.Attributes = make(map[string]string)
		for i := 0; i < v8; i++ {
			this.Attributes[randStringGateway(r)] = randStringGateway(r)
		}
	}
	this.ClusterAddress = randStringGateway(r)
	v9 := NewPopulatedUserIdentifier(r, easy)
	this.ContactAccount = *v9
	v10 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.CreatedAt = *v10
	v11 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.UpdatedAt = *v11
	v12 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.ArchivedAt = *v12
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGatewayMask(r randyGateway, easy bool) *GatewayMask {
	this := &GatewayMask{}
	this.Description = bool(r.Intn(2) == 0)
	this.FrequencyPlanID = bool(r.Intn(2) == 0)
	v13 := NewPopulatedGatewayMask_PrivacySettingsMask(r, easy)
	this.PrivacySettings = *v13
	this.AutoUpdate = bool(r.Intn(2) == 0)
	this.Platform = bool(r.Intn(2) == 0)
	this.Antennas = bool(r.Intn(2) == 0)
	this.Attributes = bool(r.Intn(2) == 0)
	this.ClusterAddress = bool(r.Intn(2) == 0)
	this.ContactAccount = bool(r.Intn(2) == 0)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGatewayMask_PrivacySettingsMask(r randyGateway, easy bool) *GatewayMask_PrivacySettingsMask {
	this := &GatewayMask_PrivacySettingsMask{}
	this.StatusPublic = bool(r.Intn(2) == 0)
	this.LocationPublic = bool(r.Intn(2) == 0)
	this.Contactable = bool(r.Intn(2) == 0)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGatewayPrivacySettings(r randyGateway, easy bool) *GatewayPrivacySettings {
	this := &GatewayPrivacySettings{}
	this.StatusPublic = bool(r.Intn(2) == 0)
	this.LocationPublic = bool(r.Intn(2) == 0)
	this.Contactable = bool(r.Intn(2) == 0)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGatewayAntenna(r randyGateway, easy bool) *GatewayAntenna {
	this := &GatewayAntenna{}
	this.Gain = r.Float32()
	if r.Intn(2) == 0 {
		this.Gain *= -1
	}
	v14 := NewPopulatedLocation(r, easy)
	this.Location = *v14
	this.Type = randStringGateway(r)
	this.Model = randStringGateway(r)
	this.Placement = GatewayAntennaPlacement([]int32{0, 1}[r.Intn(2)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGatewayConfiguration(r randyGateway, easy bool) *GatewayConfiguration {
	this := &GatewayConfiguration{}
	this.APIKey = randStringGateway(r)
	this.FrequencyPlanID = randStringGateway(r)
	this.ClusterAddress = randStringGateway(r)
	if r.Intn(10) != 0 {
		v15 := r.Intn(5)
		this.Antennas = make([]GatewayConfiguration_GatewayAntennaConfiguration, v15)
		for i := 0; i < v15; i++ {
			v16 := NewPopulatedGatewayConfiguration_GatewayAntennaConfiguration(r, easy)
			this.Antennas[i] = *v16
		}
	}
	if r.Intn(10) != 0 {
		v17 := r.Intn(5)
		this.Radios = make([]GatewayConfiguration_Radio, v17)
		for i := 0; i < v17; i++ {
			v18 := NewPopulatedGatewayConfiguration_Radio(r, easy)
			this.Radios[i] = *v18
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGatewayConfiguration_GatewayAntennaConfiguration(r randyGateway, easy bool) *GatewayConfiguration_GatewayAntennaConfiguration {
	this := &GatewayConfiguration_GatewayAntennaConfiguration{}
	this.Gain = r.Float32()
	if r.Intn(2) == 0 {
		this.Gain *= -1
	}
	v19 := NewPopulatedLocation(r, easy)
	this.Location = *v19
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGatewayConfiguration_Radio(r randyGateway, easy bool) *GatewayConfiguration_Radio {
	this := &GatewayConfiguration_Radio{}
	this.Frequency = r.Uint32()
	if r.Intn(10) != 0 {
		this.TXConfig = NewPopulatedGatewayConfiguration_Radio_TxConfiguration(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGatewayConfiguration_Radio_TxConfiguration(r randyGateway, easy bool) *GatewayConfiguration_Radio_TxConfiguration {
	this := &GatewayConfiguration_Radio_TxConfiguration{}
	this.MinFrequency = r.Uint32()
	this.MaxFrequency = r.Uint32()
	this.NotchFrequency = r.Uint32()
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGatewayStatus(r randyGateway, easy bool) *GatewayStatus {
	this := &GatewayStatus{}
	if r.Intn(10) != 0 {
		this.Time = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if r.Intn(10) != 0 {
		this.BootTime = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	this.Platform = randStringGateway(r)
	if r.Intn(10) != 0 {
		v20 := r.Intn(10)
		this.Versions = make(map[string]string)
		for i := 0; i < v20; i++ {
			this.Versions[randStringGateway(r)] = randStringGateway(r)
		}
	}
	if r.Intn(10) != 0 {
		v21 := r.Intn(5)
		this.AntennasLocation = make([]*Location, v21)
		for i := 0; i < v21; i++ {
			this.AntennasLocation[i] = NewPopulatedLocation(r, easy)
		}
	}
	v22 := r.Intn(10)
	this.IP = make([]string, v22)
	for i := 0; i < v22; i++ {
		this.IP[i] = randStringGateway(r)
	}
	if r.Intn(10) != 0 {
		this.RTT = github_com_gogo_protobuf_types.NewPopulatedStdDuration(r, easy)
	}
	if r.Intn(10) != 0 {
		v23 := r.Intn(10)
		this.Metrics = make(map[string]float32)
		for i := 0; i < v23; i++ {
			v24 := randStringGateway(r)
			this.Metrics[v24] = r.Float32()
			if r.Intn(2) == 0 {
				this.Metrics[v24] *= -1
			}
		}
	}
	if r.Intn(10) == 0 {
		this.Advanced = google_protobuf3.NewPopulatedStruct(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGatewayObservations(r randyGateway, easy bool) *GatewayObservations {
	this := &GatewayObservations{}
	if r.Intn(10) != 0 {
		this.LastUplinkReceived = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	this.UplinkCount = uint64(r.Uint32())
	if r.Intn(10) != 0 {
		this.LastDownlinkReceived = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	this.DownlinkCount = uint64(r.Uint32())
	if r.Intn(10) != 0 {
		this.LastStatusReceived = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	this.StatusCount = uint64(r.Uint32())
	if r.Intn(10) != 0 {
		this.LastStatus = NewPopulatedGatewayStatus(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyGateway interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneGateway(r randyGateway) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringGateway(r randyGateway) string {
	v25 := r.Intn(100)
	tmps := make([]rune, v25)
	for i := 0; i < v25; i++ {
		tmps[i] = randUTF8RuneGateway(r)
	}
	return string(tmps)
}
func randUnrecognizedGateway(r randyGateway, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldGateway(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldGateway(dAtA []byte, r randyGateway, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateGateway(dAtA, uint64(key))
		v26 := r.Int63()
		if r.Intn(2) == 0 {
			v26 *= -1
		}
		dAtA = encodeVarintPopulateGateway(dAtA, uint64(v26))
	case 1:
		dAtA = encodeVarintPopulateGateway(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateGateway(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateGateway(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateGateway(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateGateway(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Gateway) Size() (n int) {
	var l int
	_ = l
	l = m.GatewayIdentifier.Size()
	n += 1 + l + sovGateway(uint64(l))
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.APIKeys) > 0 {
		for _, e := range m.APIKeys {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	l = len(m.FrequencyPlanID)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ActivatedAt)
	n += 1 + l + sovGateway(uint64(l))
	l = m.PrivacySettings.Size()
	n += 1 + l + sovGateway(uint64(l))
	if m.AutoUpdate {
		n += 2
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.Antennas) > 0 {
		for _, e := range m.Antennas {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if len(m.Attributes) > 0 {
		for k, v := range m.Attributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGateway(uint64(len(k))) + 1 + len(v) + sovGateway(uint64(len(v)))
			n += mapEntrySize + 1 + sovGateway(uint64(mapEntrySize))
		}
	}
	l = len(m.ClusterAddress)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = m.ContactAccount.Size()
	n += 1 + l + sovGateway(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovGateway(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)
	n += 1 + l + sovGateway(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ArchivedAt)
	n += 1 + l + sovGateway(uint64(l))
	return n
}

func (m *GatewayMask) Size() (n int) {
	var l int
	_ = l
	if m.Description {
		n += 2
	}
	if m.FrequencyPlanID {
		n += 2
	}
	l = m.PrivacySettings.Size()
	n += 1 + l + sovGateway(uint64(l))
	if m.AutoUpdate {
		n += 2
	}
	if m.Platform {
		n += 2
	}
	if m.Antennas {
		n += 2
	}
	if m.Attributes {
		n += 2
	}
	if m.ClusterAddress {
		n += 2
	}
	if m.ContactAccount {
		n += 2
	}
	return n
}

func (m *GatewayMask_PrivacySettingsMask) Size() (n int) {
	var l int
	_ = l
	if m.StatusPublic {
		n += 2
	}
	if m.LocationPublic {
		n += 2
	}
	if m.Contactable {
		n += 2
	}
	return n
}

func (m *GatewayPrivacySettings) Size() (n int) {
	var l int
	_ = l
	if m.StatusPublic {
		n += 2
	}
	if m.LocationPublic {
		n += 2
	}
	if m.Contactable {
		n += 2
	}
	return n
}

func (m *GatewayAntenna) Size() (n int) {
	var l int
	_ = l
	if m.Gain != 0 {
		n += 5
	}
	l = m.Location.Size()
	n += 1 + l + sovGateway(uint64(l))
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.Model)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.Placement != 0 {
		n += 1 + sovGateway(uint64(m.Placement))
	}
	return n
}

func (m *GatewayConfiguration) Size() (n int) {
	var l int
	_ = l
	l = len(m.APIKey)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.FrequencyPlanID)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.ClusterAddress)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.Antennas) > 0 {
		for _, e := range m.Antennas {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if len(m.Radios) > 0 {
		for _, e := range m.Radios {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	return n
}

func (m *GatewayConfiguration_GatewayAntennaConfiguration) Size() (n int) {
	var l int
	_ = l
	if m.Gain != 0 {
		n += 5
	}
	l = m.Location.Size()
	n += 1 + l + sovGateway(uint64(l))
	return n
}

func (m *GatewayConfiguration_Radio) Size() (n int) {
	var l int
	_ = l
	if m.Frequency != 0 {
		n += 1 + sovGateway(uint64(m.Frequency))
	}
	if m.TXConfig != nil {
		l = m.TXConfig.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GatewayConfiguration_Radio_TxConfiguration) Size() (n int) {
	var l int
	_ = l
	if m.MinFrequency != 0 {
		n += 1 + sovGateway(uint64(m.MinFrequency))
	}
	if m.MaxFrequency != 0 {
		n += 1 + sovGateway(uint64(m.MaxFrequency))
	}
	if m.NotchFrequency != 0 {
		n += 1 + sovGateway(uint64(m.NotchFrequency))
	}
	return n
}

func (m *GatewayStatus) Size() (n int) {
	var l int
	_ = l
	if m.Time != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.Time)
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.BootTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.BootTime)
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.Versions) > 0 {
		for k, v := range m.Versions {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGateway(uint64(len(k))) + 1 + len(v) + sovGateway(uint64(len(v)))
			n += mapEntrySize + 1 + sovGateway(uint64(mapEntrySize))
		}
	}
	if len(m.AntennasLocation) > 0 {
		for _, e := range m.AntennasLocation {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if len(m.IP) > 0 {
		for _, s := range m.IP {
			l = len(s)
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if m.RTT != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.RTT)
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.Metrics) > 0 {
		for k, v := range m.Metrics {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGateway(uint64(len(k))) + 1 + 4
			n += mapEntrySize + 1 + sovGateway(uint64(mapEntrySize))
		}
	}
	if m.Advanced != nil {
		l = m.Advanced.Size()
		n += 2 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GatewayObservations) Size() (n int) {
	var l int
	_ = l
	if m.LastUplinkReceived != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastUplinkReceived)
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.UplinkCount != 0 {
		n += 1 + sovGateway(m.UplinkCount)
	}
	if m.LastDownlinkReceived != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastDownlinkReceived)
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.DownlinkCount != 0 {
		n += 1 + sovGateway(m.DownlinkCount)
	}
	if m.LastStatusReceived != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastStatusReceived)
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.StatusCount != 0 {
		n += 1 + sovGateway(m.StatusCount)
	}
	if m.LastStatus != nil {
		l = m.LastStatus.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func sovGateway(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGateway(x uint64) (n int) {
	return sovGateway((x << 1) ^ uint64((int64(x) >> 63)))
}
func (m *Gateway) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Gateway: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Gateway: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GatewayIdentifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field APIKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.APIKeys = append(m.APIKeys, APIKey{})
			if err := m.APIKeys[len(m.APIKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyPlanID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrequencyPlanID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ActivatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivacySettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PrivacySettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoUpdate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoUpdate = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Antennas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Antennas = append(m.Antennas, GatewayAntenna{})
			if err := m.Antennas[len(m.Antennas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGateway
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGateway
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGateway(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGateway
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attributes[mapkey] = mapvalue
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ContactAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArchivedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ArchivedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayMask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayMask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayMask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Description = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyPlanID", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FrequencyPlanID = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivacySettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PrivacySettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoUpdate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoUpdate = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Platform = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Antennas", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Antennas = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Attributes = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterAddress", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClusterAddress = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactAccount", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ContactAccount = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayMask_PrivacySettingsMask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivacySettingsMask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivacySettingsMask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusPublic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StatusPublic = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationPublic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LocationPublic = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contactable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Contactable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayPrivacySettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayPrivacySettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayPrivacySettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusPublic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StatusPublic = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationPublic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LocationPublic = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contactable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Contactable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayAntenna) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayAntenna: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayAntenna: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gain", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:])
			iNdEx += 4
			m.Gain = math.Float32frombits(v)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Placement", wireType)
			}
			m.Placement = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Placement |= (GatewayAntennaPlacement(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field APIKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.APIKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyPlanID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrequencyPlanID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Antennas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Antennas = append(m.Antennas, GatewayConfiguration_GatewayAntennaConfiguration{})
			if err := m.Antennas[len(m.Antennas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Radios", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Radios = append(m.Radios, GatewayConfiguration_Radio{})
			if err := m.Radios[len(m.Radios)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayConfiguration_GatewayAntennaConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayAntennaConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayAntennaConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gain", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:])
			iNdEx += 4
			m.Gain = math.Float32frombits(v)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayConfiguration_Radio) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Radio: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Radio: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			m.Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frequency |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TXConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TXConfig == nil {
				m.TXConfig = &GatewayConfiguration_Radio_TxConfiguration{}
			}
			if err := m.TXConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayConfiguration_Radio_TxConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinFrequency", wireType)
			}
			m.MinFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinFrequency |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFrequency", wireType)
			}
			m.MaxFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxFrequency |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotchFrequency", wireType)
			}
			m.NotchFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotchFrequency |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Time == nil {
				m.Time = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BootTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BootTime == nil {
				m.BootTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.BootTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Versions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Versions == nil {
				m.Versions = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGateway
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGateway
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGateway(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGateway
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Versions[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AntennasLocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AntennasLocation = append(m.AntennasLocation, &Location{})
			if err := m.AntennasLocation[len(m.AntennasLocation)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = append(m.IP, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RTT", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RTT == nil {
				m.RTT = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.RTT, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metrics == nil {
				m.Metrics = make(map[string]float32)
			}
			var mapkey string
			var mapvalue float32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGateway
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					mapvaluetemp = encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:])
					iNdEx += 4
					mapvalue = math.Float32frombits(mapvaluetemp)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGateway(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGateway
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metrics[mapkey] = mapvalue
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Advanced", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Advanced == nil {
				m.Advanced = &google_protobuf3.Struct{}
			}
			if err := m.Advanced.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayObservations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayObservations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayObservations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUplinkReceived", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastUplinkReceived == nil {
				m.LastUplinkReceived = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastUplinkReceived, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplinkCount", wireType)
			}
			m.UplinkCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UplinkCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastDownlinkReceived", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastDownlinkReceived == nil {
				m.LastDownlinkReceived = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastDownlinkReceived, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkCount", wireType)
			}
			m.DownlinkCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DownlinkCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastStatusReceived", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastStatusReceived == nil {
				m.LastStatusReceived = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastStatusReceived, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusCount", wireType)
			}
			m.StatusCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatusCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastStatus == nil {
				m.LastStatus = &GatewayStatus{}
			}
			if err := m.LastStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGateway(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGateway
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGateway(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGateway = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGateway   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/gateway.proto", fileDescriptorGateway)
}
func init() {
	golang_proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/gateway.proto", fileDescriptorGateway)
}

var fileDescriptorGateway = []byte{
	// 1580 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0x3d, 0x6c, 0xdb, 0xce,
	0x15, 0x17, 0x25, 0x59, 0x96, 0x9e, 0x6c, 0xc9, 0xb9, 0xf8, 0xef, 0xa8, 0x6a, 0x70, 0x72, 0x1d,
	0x14, 0x76, 0x0b, 0x54, 0x6e, 0xed, 0xb6, 0x30, 0xd2, 0x06, 0xa9, 0xfc, 0xd1, 0xc0, 0x68, 0x12,
	0x1b, 0x8c, 0x1c, 0x04, 0x59, 0x88, 0x13, 0x79, 0x96, 0x09, 0x4b, 0x24, 0x4b, 0x9e, 0x14, 0x6b,
	0xcb, 0xd0, 0x02, 0x1e, 0x33, 0x15, 0x59, 0x8a, 0x16, 0xe8, 0x92, 0xad, 0x19, 0x83, 0x4e, 0x29,
	0xba, 0x64, 0xcc, 0x98, 0x49, 0x8d, 0xa9, 0x25, 0x63, 0xc6, 0x8c, 0x05, 0xef, 0x8e, 0xb4, 0x44,
	0x2b, 0x8e, 0x0c, 0x14, 0xff, 0x49, 0xbc, 0x77, 0xbf, 0xdf, 0xfb, 0xba, 0xf7, 0xee, 0x9d, 0xe0,
	0x17, 0x4d, 0x93, 0x1d, 0x75, 0x1a, 0x55, 0xdd, 0x6e, 0xaf, 0xd6, 0x8f, 0x68, 0xfd, 0xc8, 0xb4,
	0x9a, 0xde, 0x43, 0xca, 0x9e, 0xd9, 0xee, 0xf1, 0x2a, 0x63, 0xd6, 0x2a, 0x71, 0xcc, 0xd5, 0x26,
	0x61, 0xf4, 0x19, 0xe9, 0x55, 0x1d, 0xd7, 0x66, 0x36, 0xca, 0x30, 0x66, 0x55, 0xbb, 0xeb, 0xe5,
	0x9f, 0x0d, 0x51, 0x9b, 0x76, 0xd3, 0x5e, 0xe5, 0xdb, 0x8d, 0xce, 0x21, 0x5f, 0xf1, 0x05, 0xff,
	0x12, 0xb4, 0xf2, 0xda, 0x24, 0x96, 0xda, 0x94, 0x11, 0x83, 0x30, 0x22, 0x39, 0xbf, 0x9a, 0x84,
	0x63, 0x1a, 0xd4, 0x62, 0xe6, 0xa1, 0x49, 0x5d, 0x4f, 0xd2, 0x7e, 0x3e, 0x09, 0xcd, 0x35, 0x9b,
	0x47, 0x2c, 0x64, 0xe0, 0xa6, 0x6d, 0x37, 0x5b, 0xf4, 0x3c, 0x04, 0xa3, 0xe3, 0x12, 0x66, 0xda,
	0x96, 0xdc, 0xbf, 0x19, 0xdf, 0xf7, 0x98, 0xdb, 0xd1, 0x99, 0xdc, 0xad, 0xc4, 0x77, 0x99, 0xd9,
	0xa6, 0x1e, 0x23, 0x6d, 0x47, 0x00, 0x96, 0xfe, 0x39, 0x0d, 0xd3, 0xf7, 0x44, 0x12, 0xd1, 0x3a,
	0x24, 0x4d, 0xa3, 0xa4, 0x2c, 0x2a, 0x2b, 0xf9, 0xb5, 0x1f, 0x54, 0x45, 0x2e, 0xab, 0x72, 0x73,
	0x37, 0x0a, 0x65, 0x33, 0xfb, 0xae, 0x5f, 0x49, 0xbc, 0xef, 0x57, 0x14, 0x35, 0x69, 0x1a, 0x68,
	0x11, 0xf2, 0x06, 0xf5, 0x74, 0xd7, 0x74, 0x02, 0xa7, 0x4a, 0xc9, 0x45, 0x65, 0x25, 0xa7, 0x0e,
	0x8b, 0xd0, 0x6d, 0xc8, 0x12, 0xc7, 0xd4, 0x8e, 0x69, 0xcf, 0x2b, 0xa5, 0x16, 0x53, 0x2b, 0xf9,
	0xb5, 0x42, 0xa8, 0xbc, 0xb6, 0xbf, 0xfb, 0x07, 0xda, 0xdb, 0x2c, 0x06, 0x1a, 0xfd, 0x7e, 0x65,
	0x5a, 0xac, 0x3d, 0x75, 0x9a, 0x38, 0x66, 0xf0, 0x81, 0xee, 0xc2, 0xb5, 0x43, 0x97, 0xfe, 0xb1,
	0x43, 0x2d, 0xbd, 0xa7, 0x39, 0x2d, 0x62, 0x69, 0xa6, 0x51, 0x4a, 0x07, 0x36, 0x36, 0xaf, 0xfb,
	0xfd, 0x4a, 0xf1, 0xf7, 0xe1, 0xe6, 0x7e, 0x8b, 0x58, 0xbb, 0xdb, 0x6a, 0xf1, 0x70, 0x44, 0x60,
	0xa0, 0x7b, 0x30, 0x43, 0x74, 0x66, 0x76, 0x09, 0xa3, 0x86, 0x46, 0x58, 0x69, 0x8a, 0x47, 0x57,
	0xae, 0x8a, 0xbc, 0x54, 0xc3, 0xbc, 0x54, 0xeb, 0x61, 0x5e, 0x44, 0x78, 0x2f, 0xfe, 0x5b, 0x51,
	0xd4, 0x7c, 0xc4, 0xac, 0x31, 0xb4, 0x07, 0x73, 0x8e, 0x6b, 0x76, 0x89, 0xde, 0xd3, 0x3c, 0xca,
	0x58, 0x70, 0x6e, 0xa5, 0x0c, 0x57, 0x86, 0x63, 0xa9, 0xda, 0x17, 0xb0, 0x47, 0x12, 0xb5, 0x99,
	0x0e, 0x14, 0xaa, 0x45, 0x67, 0x54, 0x8c, 0x2a, 0x90, 0x27, 0x1d, 0x66, 0x6b, 0x1d, 0xc7, 0x20,
	0x8c, 0x96, 0xa6, 0x17, 0x95, 0x95, 0xac, 0x0a, 0x81, 0xe8, 0x80, 0x4b, 0x50, 0x19, 0xb2, 0x4e,
	0x8b, 0xb0, 0x43, 0xdb, 0x6d, 0x97, 0xb2, 0x3c, 0xad, 0xd1, 0x1a, 0x6d, 0x40, 0x96, 0x58, 0x8c,
	0x5a, 0x16, 0xf1, 0x4a, 0x39, 0x9e, 0xd3, 0x85, 0x98, 0x17, 0x35, 0xb1, 0x2d, 0xad, 0x47, 0x68,
	0x74, 0x17, 0x80, 0x30, 0xe6, 0x9a, 0x8d, 0x0e, 0xa3, 0x5e, 0x09, 0x38, 0xb7, 0x12, 0xe3, 0x56,
	0x6b, 0x11, 0x62, 0xc7, 0x62, 0x6e, 0x4f, 0x1d, 0xa2, 0xa0, 0x65, 0x28, 0xea, 0xad, 0x8e, 0xc7,
	0xa8, 0xab, 0x11, 0xc3, 0x70, 0xa9, 0xe7, 0x95, 0xf2, 0xdc, 0xbb, 0x82, 0x14, 0xd7, 0x84, 0x14,
	0xed, 0x40, 0x51, 0xb7, 0x2d, 0x46, 0x74, 0xa6, 0x11, 0x5d, 0xb7, 0x3b, 0x16, 0x2b, 0xcd, 0xf0,
	0x84, 0x45, 0xae, 0x1e, 0x78, 0xd4, 0x1d, 0x2a, 0x2c, 0xe1, 0x6a, 0x41, 0x92, 0x6a, 0x82, 0x83,
	0xb6, 0x00, 0x74, 0x97, 0x86, 0xe7, 0x37, 0x7b, 0x85, 0xf3, 0xcb, 0x49, 0x5e, 0x8d, 0x2b, 0x11,
	0x79, 0xe6, 0x4a, 0x0a, 0x57, 0x51, 0x22, 0x79, 0x35, 0x86, 0x76, 0x20, 0x4f, 0x5c, 0xfd, 0xc8,
	0xec, 0x0a, 0x2d, 0xc5, 0x2b, 0x68, 0x81, 0x90, 0x58, 0x63, 0xe5, 0x3b, 0x50, 0x8c, 0xe5, 0x17,
	0xcd, 0x41, 0xea, 0x98, 0xf6, 0x78, 0xeb, 0xe5, 0xd4, 0xe0, 0x13, 0xcd, 0xc3, 0x54, 0x97, 0xb4,
	0x3a, 0x54, 0x36, 0x94, 0x58, 0xdc, 0x4e, 0x6e, 0x28, 0x4b, 0x7f, 0x4d, 0x43, 0x5e, 0x9e, 0xd3,
	0x03, 0xe2, 0x1d, 0xc7, 0x1b, 0x50, 0xe1, 0x75, 0x34, 0xd2, 0x80, 0x63, 0x9b, 0x28, 0xd0, 0x9b,
	0x9d, 0xb0, 0x89, 0x9e, 0x8c, 0xa9, 0xfd, 0x14, 0x8f, 0x7e, 0x39, 0x56, 0x39, 0x81, 0x47, 0xd5,
	0x58, 0x03, 0x04, 0xb2, 0x09, 0x9b, 0x20, 0x7d, 0x69, 0x13, 0x4c, 0xf1, 0xdd, 0xf3, 0x26, 0x28,
	0x0f, 0x35, 0x41, 0x46, 0xec, 0x45, 0x65, 0x8e, 0x47, 0xca, 0x3c, 0x6c, 0xae, 0x4b, 0xab, 0x38,
	0xcb, 0x41, 0xf1, 0x2a, 0x5e, 0xbe, 0x58, 0xc5, 0x39, 0x09, 0x1c, 0xa9, 0xd3, 0xf2, 0x9f, 0x15,
	0xb8, 0x3e, 0x26, 0x72, 0x74, 0x0b, 0x66, 0x3d, 0x46, 0x58, 0xc7, 0xd3, 0x9c, 0x4e, 0xa3, 0x65,
	0xea, 0xf2, 0x84, 0x66, 0x84, 0x70, 0x9f, 0xcb, 0x02, 0x2b, 0x2d, 0x5b, 0xe7, 0xf7, 0x7a, 0x08,
	0x4b, 0x0a, 0x2b, 0xa1, 0x58, 0x02, 0x17, 0x21, 0x2f, 0xed, 0x92, 0x46, 0x8b, 0xf2, 0x53, 0xc8,
	0xaa, 0xc3, 0xa2, 0xa5, 0x53, 0x05, 0x16, 0xc6, 0xdf, 0x44, 0xdf, 0xbb, 0x2b, 0xff, 0x56, 0xa0,
	0x30, 0x7a, 0x1d, 0x21, 0x04, 0xe9, 0x26, 0x31, 0x45, 0x99, 0x26, 0x55, 0xfe, 0x8d, 0xd6, 0x20,
	0x1b, 0xaa, 0xe6, 0xa6, 0xf2, 0x6b, 0x73, 0x61, 0x59, 0xdd, 0x97, 0xf2, 0xf0, 0x1a, 0x0b, 0x71,
	0x81, 0x1e, 0xd6, 0x73, 0x84, 0xd5, 0x9c, 0xca, 0xbf, 0x83, 0x9e, 0x69, 0xdb, 0x06, 0x6d, 0x89,
	0x01, 0xa1, 0x8a, 0x05, 0xba, 0x03, 0x39, 0xa7, 0x45, 0x74, 0xda, 0xa6, 0x96, 0xb8, 0xfe, 0x0b,
	0x17, 0xee, 0x3b, 0xe9, 0xdc, 0x7e, 0x08, 0x53, 0xcf, 0x19, 0x4b, 0xff, 0x99, 0x82, 0x79, 0x09,
	0xdb, 0xb2, 0xad, 0x43, 0xb3, 0x29, 0xc7, 0x2f, 0xba, 0x05, 0xd3, 0x72, 0xac, 0x89, 0xbe, 0xdd,
	0x04, 0xbf, 0x5f, 0xc9, 0x88, 0x09, 0xa6, 0x66, 0xc4, 0x00, 0xfb, 0x7a, 0xeb, 0x4d, 0x3a, 0xbf,
	0xc6, 0xd4, 0x69, 0x6a, 0xec, 0x6d, 0xfb, 0x74, 0xa8, 0x19, 0xd2, 0xfc, 0x56, 0xdf, 0x88, 0x45,
	0x39, 0xe2, 0x7e, 0x2c, 0xf4, 0x91, 0xbd, 0x0b, 0x33, 0xe3, 0x77, 0x90, 0x71, 0x89, 0x61, 0xda,
	0x41, 0x9b, 0x05, 0x9a, 0x97, 0x2e, 0xd5, 0xac, 0x06, 0x50, 0xa9, 0x43, 0xf2, 0xca, 0x14, 0x7e,
	0x78, 0x89, 0xc1, 0xff, 0x57, 0x55, 0x94, 0xff, 0x92, 0x84, 0x29, 0x6e, 0x1e, 0xdd, 0x84, 0x5c,
	0x94, 0x4a, 0xae, 0x76, 0x56, 0x3d, 0x17, 0xa0, 0x23, 0x28, 0x72, 0xc7, 0x34, 0x76, 0xa2, 0xe9,
	0xdc, 0x13, 0x69, 0x62, 0xed, 0xdb, 0x91, 0x55, 0xeb, 0x27, 0xa3, 0xd9, 0x9a, 0xf1, 0xfb, 0x95,
	0x6c, 0xfd, 0x89, 0x10, 0xaa, 0xb3, 0x5c, 0x71, 0x88, 0x29, 0xff, 0x49, 0x81, 0x62, 0x8c, 0x10,
	0xb4, 0x61, 0xdb, 0xb4, 0xb4, 0xb8, 0x7f, 0x33, 0x6d, 0xd3, 0x8a, 0xea, 0x81, 0x83, 0xc8, 0xc9,
	0x10, 0x28, 0x29, 0x41, 0xe4, 0xe4, 0x1c, 0xb4, 0x0c, 0x45, 0xcb, 0x66, 0xfa, 0xd1, 0x10, 0x2c,
	0xc5, 0x61, 0x05, 0x2e, 0x8e, 0x80, 0x4b, 0xfd, 0x34, 0xcc, 0xca, 0x90, 0x1e, 0xf1, 0x66, 0x47,
	0xbf, 0x84, 0x74, 0xf0, 0x16, 0x94, 0xcf, 0xbd, 0xcb, 0xa6, 0x58, 0x9a, 0x4f, 0x30, 0x8e, 0x0e,
	0x9a, 0xa9, 0x61, 0xdb, 0x4c, 0xe3, 0xd4, 0xe4, 0x84, 0xd4, 0x6c, 0x40, 0x09, 0x84, 0x23, 0xb7,
	0x79, 0x2a, 0xf6, 0xa4, 0xb9, 0x0b, 0xd9, 0x2e, 0x75, 0x3d, 0xd3, 0xb6, 0xc2, 0x02, 0xbe, 0x15,
	0x3b, 0x0c, 0xe1, 0x79, 0xf5, 0xb1, 0x44, 0x89, 0xa7, 0x49, 0x44, 0x42, 0x77, 0xe0, 0x5a, 0x58,
	0xb1, 0x5a, 0x54, 0x39, 0x53, 0x5c, 0xd3, 0x85, 0xca, 0x51, 0xe7, 0x42, 0x68, 0x28, 0x41, 0x0b,
	0x90, 0x34, 0x1d, 0x5e, 0xe0, 0xb9, 0xcd, 0x8c, 0xdf, 0xaf, 0x24, 0x77, 0xf7, 0xd5, 0xa4, 0xe9,
	0xa0, 0x0d, 0x48, 0xb9, 0x8c, 0xf1, 0x11, 0x12, 0x3c, 0x8b, 0xe3, 0xc1, 0x6e, 0x87, 0x65, 0x90,
	0xf7, 0xfb, 0x95, 0x94, 0x5a, 0xaf, 0xbf, 0x0c, 0x42, 0x0e, 0x28, 0xe8, 0xb7, 0x30, 0xdd, 0xa6,
	0xcc, 0x35, 0xf5, 0x60, 0xb6, 0x8c, 0xeb, 0x1b, 0x19, 0xd0, 0x03, 0x01, 0x12, 0xf1, 0x84, 0x14,
	0xb4, 0x0e, 0x59, 0x62, 0x74, 0x89, 0xa5, 0x53, 0xa3, 0xa4, 0x73, 0xe3, 0x37, 0x2e, 0x18, 0x7f,
	0xc4, 0xdf, 0xfa, 0x6a, 0x04, 0x2c, 0xff, 0x06, 0x66, 0x47, 0xd2, 0x73, 0x95, 0x97, 0x45, 0xf9,
	0x36, 0xcc, 0x0c, 0xbb, 0xf2, 0x2d, 0x6e, 0x72, 0xf8, 0x55, 0xf2, 0xaf, 0x14, 0x5c, 0x97, 0x51,
	0xed, 0x35, 0x3c, 0xea, 0x76, 0x79, 0x52, 0x3c, 0xa4, 0xc2, 0x7c, 0x8b, 0x78, 0x4c, 0xeb, 0x38,
	0x2d, 0xd3, 0x3a, 0xd6, 0x5c, 0xaa, 0xd3, 0xe0, 0x19, 0x34, 0x71, 0xd9, 0xa1, 0x80, 0x7d, 0xc0,
	0xc9, 0xaa, 0xe4, 0xa2, 0x1f, 0xc1, 0x8c, 0x54, 0x27, 0xe6, 0x71, 0xe0, 0x4c, 0x5a, 0xcd, 0x0b,
	0xd9, 0x16, 0x7f, 0x34, 0x3e, 0x86, 0x05, 0x6e, 0xd6, 0xb0, 0x9f, 0x59, 0xa3, 0x86, 0x53, 0x13,
	0x1a, 0xe6, 0x6e, 0x6f, 0x4b, 0x7a, 0x64, 0xfa, 0xc7, 0x50, 0x88, 0x54, 0x0a, 0xe3, 0x69, 0x6e,
	0x7c, 0x36, 0x94, 0x0a, 0xf3, 0x61, 0xd4, 0x72, 0xda, 0x46, 0xc6, 0xa7, 0xae, 0x12, 0xb5, 0xa8,
	0x8e, 0xe1, 0xa8, 0xa5, 0x3a, 0x61, 0x38, 0x23, 0xa2, 0x16, 0x32, 0x61, 0xf6, 0xd7, 0x90, 0x1f,
	0x32, 0x2b, 0x4b, 0xf6, 0xbb, 0xb1, 0x45, 0xa7, 0xc2, 0xb9, 0x89, 0x9f, 0xde, 0x87, 0x1b, 0x5f,
	0x99, 0x84, 0x68, 0x1e, 0xe6, 0xf6, 0xef, 0xd7, 0xb6, 0x76, 0x1e, 0xec, 0x3c, 0xac, 0x6b, 0xbb,
	0x0f, 0xb7, 0xf7, 0xf6, 0xd4, 0xb9, 0x04, 0xfa, 0x0e, 0xae, 0x9d, 0x4b, 0xf7, 0x0e, 0xea, 0x5c,
	0xac, 0x94, 0xd3, 0xa7, 0xff, 0xc0, 0x89, 0xcd, 0xbf, 0x29, 0xef, 0xce, 0xb0, 0xf2, 0xfe, 0x0c,
	0x2b, 0x1f, 0xce, 0xb0, 0xf2, 0xf1, 0x0c, 0x2b, 0x9f, 0xce, 0x70, 0xe2, 0xf3, 0x19, 0x4e, 0x7c,
	0x39, 0xc3, 0xca, 0x73, 0x1f, 0x27, 0x4e, 0x7d, 0x9c, 0x78, 0xe5, 0x63, 0xe5, 0xb5, 0x8f, 0x13,
	0x6f, 0x7c, 0xac, 0xbc, 0xf5, 0xb1, 0xf2, 0xce, 0xc7, 0xca, 0x7b, 0x1f, 0x2b, 0x1f, 0x7c, 0x9c,
	0xf8, 0xe8, 0x63, 0xe5, 0x93, 0x8f, 0x13, 0x9f, 0x7d, 0xac, 0x7c, 0xf1, 0x71, 0xe2, 0xf9, 0x00,
	0x27, 0x4e, 0x07, 0x58, 0x79, 0x31, 0xc0, 0x89, 0x97, 0x03, 0xac, 0xfc, 0x7d, 0x80, 0x13, 0xaf,
	0x06, 0x38, 0xf1, 0x7a, 0x80, 0x95, 0x37, 0x03, 0xac, 0xbc, 0x1d, 0x60, 0xe5, 0xe9, 0x4f, 0xbe,
	0xf5, 0xd7, 0xda, 0x39, 0x6e, 0x06, 0xbf, 0x4e, 0xa3, 0x91, 0xe1, 0x89, 0x5f, 0xff, 0x5f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xab, 0x02, 0xd6, 0x80, 0x63, 0x10, 0x00, 0x00,
}
