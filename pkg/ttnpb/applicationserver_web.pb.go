// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/applicationserver_web.proto

package ttnpb

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
	time "time"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ApplicationWebhookIdentifiers struct {
	ApplicationIdentifiers `protobuf:"bytes,1,opt,name=application_ids,json=applicationIds,proto3,embedded=application_ids" json:"application_ids"`
	WebhookID              string   `protobuf:"bytes,2,opt,name=webhook_id,json=webhookId,proto3" json:"webhook_id,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *ApplicationWebhookIdentifiers) Reset()      { *m = ApplicationWebhookIdentifiers{} }
func (*ApplicationWebhookIdentifiers) ProtoMessage() {}
func (*ApplicationWebhookIdentifiers) Descriptor() ([]byte, []int) {
	return fileDescriptor_2652f2d8eaceda0e, []int{0}
}
func (m *ApplicationWebhookIdentifiers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationWebhookIdentifiers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationWebhookIdentifiers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationWebhookIdentifiers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationWebhookIdentifiers.Merge(m, src)
}
func (m *ApplicationWebhookIdentifiers) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationWebhookIdentifiers) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationWebhookIdentifiers.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationWebhookIdentifiers proto.InternalMessageInfo

func (m *ApplicationWebhookIdentifiers) GetWebhookID() string {
	if m != nil {
		return m.WebhookID
	}
	return ""
}

type ApplicationWebhook struct {
	ApplicationWebhookIdentifiers `protobuf:"bytes,1,opt,name=ids,proto3,embedded=ids" json:"ids"`
	CreatedAt                     time.Time `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
	UpdatedAt                     time.Time `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at"`
	// Base URL to which the message's path is appended.
	BaseURL string `protobuf:"bytes,4,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty"`
	// HTTP headers to use.
	Headers map[string]string `protobuf:"bytes,5,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The format to use for the body.
	// Supported values depend on the Application Server configuration.
	Format               string                      `protobuf:"bytes,6,opt,name=format,proto3" json:"format,omitempty"`
	UplinkMessage        *ApplicationWebhook_Message `protobuf:"bytes,7,opt,name=uplink_message,json=uplinkMessage,proto3" json:"uplink_message,omitempty"`
	JoinAccept           *ApplicationWebhook_Message `protobuf:"bytes,8,opt,name=join_accept,json=joinAccept,proto3" json:"join_accept,omitempty"`
	DownlinkAck          *ApplicationWebhook_Message `protobuf:"bytes,9,opt,name=downlink_ack,json=downlinkAck,proto3" json:"downlink_ack,omitempty"`
	DownlinkNack         *ApplicationWebhook_Message `protobuf:"bytes,10,opt,name=downlink_nack,json=downlinkNack,proto3" json:"downlink_nack,omitempty"`
	DownlinkSent         *ApplicationWebhook_Message `protobuf:"bytes,11,opt,name=downlink_sent,json=downlinkSent,proto3" json:"downlink_sent,omitempty"`
	DownlinkFailed       *ApplicationWebhook_Message `protobuf:"bytes,12,opt,name=downlink_failed,json=downlinkFailed,proto3" json:"downlink_failed,omitempty"`
	DownlinkQueued       *ApplicationWebhook_Message `protobuf:"bytes,13,opt,name=downlink_queued,json=downlinkQueued,proto3" json:"downlink_queued,omitempty"`
	LocationSolved       *ApplicationWebhook_Message `protobuf:"bytes,14,opt,name=location_solved,json=locationSolved,proto3" json:"location_solved,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ApplicationWebhook) Reset()      { *m = ApplicationWebhook{} }
func (*ApplicationWebhook) ProtoMessage() {}
func (*ApplicationWebhook) Descriptor() ([]byte, []int) {
	return fileDescriptor_2652f2d8eaceda0e, []int{1}
}
func (m *ApplicationWebhook) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationWebhook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationWebhook.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationWebhook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationWebhook.Merge(m, src)
}
func (m *ApplicationWebhook) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationWebhook) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationWebhook.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationWebhook proto.InternalMessageInfo

func (m *ApplicationWebhook) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *ApplicationWebhook) GetUpdatedAt() time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return time.Time{}
}

func (m *ApplicationWebhook) GetBaseURL() string {
	if m != nil {
		return m.BaseURL
	}
	return ""
}

func (m *ApplicationWebhook) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *ApplicationWebhook) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *ApplicationWebhook) GetUplinkMessage() *ApplicationWebhook_Message {
	if m != nil {
		return m.UplinkMessage
	}
	return nil
}

func (m *ApplicationWebhook) GetJoinAccept() *ApplicationWebhook_Message {
	if m != nil {
		return m.JoinAccept
	}
	return nil
}

func (m *ApplicationWebhook) GetDownlinkAck() *ApplicationWebhook_Message {
	if m != nil {
		return m.DownlinkAck
	}
	return nil
}

func (m *ApplicationWebhook) GetDownlinkNack() *ApplicationWebhook_Message {
	if m != nil {
		return m.DownlinkNack
	}
	return nil
}

func (m *ApplicationWebhook) GetDownlinkSent() *ApplicationWebhook_Message {
	if m != nil {
		return m.DownlinkSent
	}
	return nil
}

func (m *ApplicationWebhook) GetDownlinkFailed() *ApplicationWebhook_Message {
	if m != nil {
		return m.DownlinkFailed
	}
	return nil
}

func (m *ApplicationWebhook) GetDownlinkQueued() *ApplicationWebhook_Message {
	if m != nil {
		return m.DownlinkQueued
	}
	return nil
}

func (m *ApplicationWebhook) GetLocationSolved() *ApplicationWebhook_Message {
	if m != nil {
		return m.LocationSolved
	}
	return nil
}

type ApplicationWebhook_Message struct {
	// Path to append to the base URL.
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplicationWebhook_Message) Reset()      { *m = ApplicationWebhook_Message{} }
func (*ApplicationWebhook_Message) ProtoMessage() {}
func (*ApplicationWebhook_Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_2652f2d8eaceda0e, []int{1, 1}
}
func (m *ApplicationWebhook_Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationWebhook_Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationWebhook_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationWebhook_Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationWebhook_Message.Merge(m, src)
}
func (m *ApplicationWebhook_Message) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationWebhook_Message) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationWebhook_Message.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationWebhook_Message proto.InternalMessageInfo

func (m *ApplicationWebhook_Message) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type ApplicationWebhooks struct {
	Webhooks             []*ApplicationWebhook `protobuf:"bytes,1,rep,name=webhooks,proto3" json:"webhooks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ApplicationWebhooks) Reset()      { *m = ApplicationWebhooks{} }
func (*ApplicationWebhooks) ProtoMessage() {}
func (*ApplicationWebhooks) Descriptor() ([]byte, []int) {
	return fileDescriptor_2652f2d8eaceda0e, []int{2}
}
func (m *ApplicationWebhooks) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationWebhooks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationWebhooks.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationWebhooks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationWebhooks.Merge(m, src)
}
func (m *ApplicationWebhooks) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationWebhooks) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationWebhooks.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationWebhooks proto.InternalMessageInfo

func (m *ApplicationWebhooks) GetWebhooks() []*ApplicationWebhook {
	if m != nil {
		return m.Webhooks
	}
	return nil
}

type ApplicationWebhookFormats struct {
	// Format and description.
	Formats              map[string]string `protobuf:"bytes,1,rep,name=formats,proto3" json:"formats,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ApplicationWebhookFormats) Reset()      { *m = ApplicationWebhookFormats{} }
func (*ApplicationWebhookFormats) ProtoMessage() {}
func (*ApplicationWebhookFormats) Descriptor() ([]byte, []int) {
	return fileDescriptor_2652f2d8eaceda0e, []int{3}
}
func (m *ApplicationWebhookFormats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationWebhookFormats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationWebhookFormats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationWebhookFormats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationWebhookFormats.Merge(m, src)
}
func (m *ApplicationWebhookFormats) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationWebhookFormats) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationWebhookFormats.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationWebhookFormats proto.InternalMessageInfo

func (m *ApplicationWebhookFormats) GetFormats() map[string]string {
	if m != nil {
		return m.Formats
	}
	return nil
}

type GetApplicationWebhookRequest struct {
	ApplicationWebhookIdentifiers `protobuf:"bytes,1,opt,name=ids,proto3,embedded=ids" json:"ids"`
	FieldMask                     types.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask"`
	XXX_NoUnkeyedLiteral          struct{}        `json:"-"`
	XXX_sizecache                 int32           `json:"-"`
}

func (m *GetApplicationWebhookRequest) Reset()      { *m = GetApplicationWebhookRequest{} }
func (*GetApplicationWebhookRequest) ProtoMessage() {}
func (*GetApplicationWebhookRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2652f2d8eaceda0e, []int{4}
}
func (m *GetApplicationWebhookRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetApplicationWebhookRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetApplicationWebhookRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetApplicationWebhookRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetApplicationWebhookRequest.Merge(m, src)
}
func (m *GetApplicationWebhookRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetApplicationWebhookRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetApplicationWebhookRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetApplicationWebhookRequest proto.InternalMessageInfo

func (m *GetApplicationWebhookRequest) GetFieldMask() types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return types.FieldMask{}
}

type ListApplicationWebhooksRequest struct {
	ApplicationIdentifiers `protobuf:"bytes,1,opt,name=application_ids,json=applicationIds,proto3,embedded=application_ids" json:"application_ids"`
	FieldMask              types.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask"`
	XXX_NoUnkeyedLiteral   struct{}        `json:"-"`
	XXX_sizecache          int32           `json:"-"`
}

func (m *ListApplicationWebhooksRequest) Reset()      { *m = ListApplicationWebhooksRequest{} }
func (*ListApplicationWebhooksRequest) ProtoMessage() {}
func (*ListApplicationWebhooksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2652f2d8eaceda0e, []int{5}
}
func (m *ListApplicationWebhooksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListApplicationWebhooksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListApplicationWebhooksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListApplicationWebhooksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListApplicationWebhooksRequest.Merge(m, src)
}
func (m *ListApplicationWebhooksRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListApplicationWebhooksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListApplicationWebhooksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListApplicationWebhooksRequest proto.InternalMessageInfo

func (m *ListApplicationWebhooksRequest) GetFieldMask() types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return types.FieldMask{}
}

type SetApplicationWebhookRequest struct {
	ApplicationWebhook   `protobuf:"bytes,1,opt,name=webhook,proto3,embedded=webhook" json:"webhook"`
	FieldMask            types.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SetApplicationWebhookRequest) Reset()      { *m = SetApplicationWebhookRequest{} }
func (*SetApplicationWebhookRequest) ProtoMessage() {}
func (*SetApplicationWebhookRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2652f2d8eaceda0e, []int{6}
}
func (m *SetApplicationWebhookRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetApplicationWebhookRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetApplicationWebhookRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetApplicationWebhookRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetApplicationWebhookRequest.Merge(m, src)
}
func (m *SetApplicationWebhookRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetApplicationWebhookRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetApplicationWebhookRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetApplicationWebhookRequest proto.InternalMessageInfo

func (m *SetApplicationWebhookRequest) GetFieldMask() types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return types.FieldMask{}
}

func init() {
	proto.RegisterType((*ApplicationWebhookIdentifiers)(nil), "ttn.lorawan.v3.ApplicationWebhookIdentifiers")
	golang_proto.RegisterType((*ApplicationWebhookIdentifiers)(nil), "ttn.lorawan.v3.ApplicationWebhookIdentifiers")
	proto.RegisterType((*ApplicationWebhook)(nil), "ttn.lorawan.v3.ApplicationWebhook")
	golang_proto.RegisterType((*ApplicationWebhook)(nil), "ttn.lorawan.v3.ApplicationWebhook")
	proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.ApplicationWebhook.HeadersEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.ApplicationWebhook.HeadersEntry")
	proto.RegisterType((*ApplicationWebhook_Message)(nil), "ttn.lorawan.v3.ApplicationWebhook.Message")
	golang_proto.RegisterType((*ApplicationWebhook_Message)(nil), "ttn.lorawan.v3.ApplicationWebhook.Message")
	proto.RegisterType((*ApplicationWebhooks)(nil), "ttn.lorawan.v3.ApplicationWebhooks")
	golang_proto.RegisterType((*ApplicationWebhooks)(nil), "ttn.lorawan.v3.ApplicationWebhooks")
	proto.RegisterType((*ApplicationWebhookFormats)(nil), "ttn.lorawan.v3.ApplicationWebhookFormats")
	golang_proto.RegisterType((*ApplicationWebhookFormats)(nil), "ttn.lorawan.v3.ApplicationWebhookFormats")
	proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.ApplicationWebhookFormats.FormatsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.ApplicationWebhookFormats.FormatsEntry")
	proto.RegisterType((*GetApplicationWebhookRequest)(nil), "ttn.lorawan.v3.GetApplicationWebhookRequest")
	golang_proto.RegisterType((*GetApplicationWebhookRequest)(nil), "ttn.lorawan.v3.GetApplicationWebhookRequest")
	proto.RegisterType((*ListApplicationWebhooksRequest)(nil), "ttn.lorawan.v3.ListApplicationWebhooksRequest")
	golang_proto.RegisterType((*ListApplicationWebhooksRequest)(nil), "ttn.lorawan.v3.ListApplicationWebhooksRequest")
	proto.RegisterType((*SetApplicationWebhookRequest)(nil), "ttn.lorawan.v3.SetApplicationWebhookRequest")
	golang_proto.RegisterType((*SetApplicationWebhookRequest)(nil), "ttn.lorawan.v3.SetApplicationWebhookRequest")
}

func init() {
	proto.RegisterFile("lorawan-stack/api/applicationserver_web.proto", fileDescriptor_2652f2d8eaceda0e)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/applicationserver_web.proto", fileDescriptor_2652f2d8eaceda0e)
}

var fileDescriptor_2652f2d8eaceda0e = []byte{
	// 1213 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x97, 0x4d, 0x6c, 0x13, 0x47,
	0x14, 0xc7, 0x77, 0xe2, 0x10, 0xc7, 0x13, 0x08, 0x68, 0x28, 0x68, 0x6b, 0x60, 0x12, 0x2d, 0xa8,
	0x0a, 0x11, 0xde, 0x45, 0x41, 0x45, 0x25, 0xaa, 0x40, 0x76, 0xf9, 0x28, 0x2d, 0xb4, 0xb0, 0x6e,
	0x54, 0x09, 0x44, 0xad, 0xb1, 0x77, 0x6c, 0x6f, 0xbd, 0xde, 0x5d, 0x76, 0xc6, 0x76, 0x53, 0x84,
	0x84, 0x7a, 0x42, 0x3d, 0xa1, 0x72, 0x68, 0x4f, 0x55, 0xd5, 0x5e, 0xe8, 0x8d, 0x4a, 0x3d, 0xa0,
	0x9e, 0x38, 0x55, 0x1c, 0x91, 0x2a, 0x55, 0x48, 0x95, 0x52, 0xbc, 0xee, 0x81, 0xde, 0x90, 0x7a,
	0xe1, 0x58, 0xed, 0xee, 0xac, 0xe3, 0xd8, 0x26, 0x89, 0x89, 0xda, 0x53, 0xe6, 0x65, 0xde, 0xfb,
	0xcd, 0xff, 0xbd, 0x79, 0xf3, 0x6c, 0xc3, 0x8c, 0xe5, 0x78, 0xa4, 0x45, 0xec, 0x0c, 0xe3, 0xa4,
	0x54, 0xd3, 0x88, 0x6b, 0x6a, 0xc4, 0x75, 0x2d, 0xb3, 0x44, 0xb8, 0xe9, 0xd8, 0x8c, 0x7a, 0x4d,
	0xea, 0x15, 0x5a, 0xb4, 0xa8, 0xba, 0x9e, 0xc3, 0x1d, 0x34, 0xcd, 0xb9, 0xad, 0x8a, 0x10, 0xb5,
	0x79, 0x2c, 0x9d, 0xad, 0x98, 0xbc, 0xda, 0x28, 0xaa, 0x25, 0xa7, 0xae, 0x51, 0xbb, 0xe9, 0x2c,
	0xbb, 0x9e, 0xf3, 0xd9, 0xb2, 0x16, 0x3a, 0x97, 0x32, 0x15, 0x6a, 0x67, 0x9a, 0xc4, 0x32, 0x0d,
	0xc2, 0xa9, 0x36, 0xb0, 0x88, 0x90, 0xe9, 0x4c, 0x0f, 0xa2, 0xe2, 0x54, 0x9c, 0x28, 0xb8, 0xd8,
	0x28, 0x87, 0x56, 0x68, 0x84, 0x2b, 0xe1, 0xbe, 0xbf, 0xe2, 0x38, 0x15, 0x8b, 0x46, 0x4a, 0x6d,
	0xdb, 0xe1, 0x91, 0x50, 0xb1, 0xbb, 0x4f, 0xec, 0x76, 0x19, 0xb4, 0xee, 0xf2, 0x65, 0xb1, 0x39,
	0xdb, 0xbf, 0x59, 0x36, 0xa9, 0x65, 0x14, 0xea, 0x84, 0xd5, 0x84, 0xc7, 0x4c, 0xbf, 0x07, 0x37,
	0xeb, 0x94, 0x71, 0x52, 0x77, 0x85, 0xc3, 0xc1, 0xc1, 0x72, 0x99, 0x06, 0xb5, 0xb9, 0x59, 0x36,
	0xa9, 0x27, 0x44, 0x28, 0x7f, 0x00, 0x78, 0x20, 0xbb, 0x5a, 0xc4, 0x8f, 0x69, 0xb1, 0xea, 0x38,
	0xb5, 0xf3, 0xab, 0x7e, 0xa8, 0x04, 0x77, 0xf6, 0x54, 0xb9, 0x60, 0x1a, 0x4c, 0x06, 0xb3, 0x60,
	0x6e, 0x6a, 0xe1, 0x0d, 0x75, 0x6d, 0x81, 0xd5, 0x1e, 0x4e, 0x0f, 0x20, 0x87, 0x1e, 0xad, 0xcc,
	0x48, 0x8f, 0x57, 0x66, 0xc0, 0x2f, 0x7f, 0x3f, 0x4c, 0x6c, 0xfb, 0x12, 0x8c, 0xed, 0x02, 0xfa,
	0x34, 0xe9, 0xf5, 0x65, 0x68, 0x09, 0xc2, 0x56, 0x74, 0x74, 0xc1, 0x34, 0xe4, 0xb1, 0x59, 0x30,
	0x97, 0xca, 0x1d, 0xf7, 0x57, 0x66, 0x52, 0xb1, 0xa0, 0xd3, 0x41, 0xf0, 0x21, 0x4f, 0x91, 0x0f,
	0x2d, 0xe0, 0x4f, 0xae, 0x92, 0xcc, 0xe7, 0x47, 0x33, 0x27, 0xae, 0xcd, 0x9d, 0x5a, 0xbc, 0x9a,
	0xb9, 0x76, 0x2a, 0x36, 0x0f, 0xdf, 0x58, 0x38, 0x72, 0xf3, 0x90, 0x9e, 0x6a, 0xc5, 0x49, 0x28,
	0xff, 0x4c, 0x42, 0x34, 0x98, 0x1d, 0xca, 0xc3, 0xc4, 0x6a, 0x1a, 0x99, 0x75, 0xd2, 0x18, 0x2c,
	0xc7, 0xd0, 0x6c, 0x02, 0x1a, 0x7a, 0x07, 0xc2, 0x92, 0x47, 0x09, 0xa7, 0x46, 0x81, 0xf0, 0x30,
	0x85, 0xa9, 0x85, 0xb4, 0x1a, 0x5d, 0x92, 0x1a, 0x5f, 0x92, 0xfa, 0x51, 0x7c, 0x49, 0xb9, 0xc9,
	0x00, 0x74, 0xe7, 0xcf, 0x19, 0xa0, 0xa7, 0x44, 0x5c, 0x96, 0x07, 0x90, 0x86, 0x6b, 0xc4, 0x90,
	0xc4, 0x28, 0x10, 0x11, 0x97, 0xe5, 0xe8, 0x28, 0x9c, 0x2c, 0x12, 0x46, 0x0b, 0x0d, 0xcf, 0x92,
	0xc7, 0xc3, 0x52, 0xee, 0xf1, 0x57, 0x66, 0x92, 0x39, 0xc2, 0xe8, 0x92, 0x7e, 0x21, 0xd4, 0xed,
	0x25, 0x6e, 0x03, 0xa0, 0x27, 0x03, 0xb7, 0x25, 0xcf, 0x42, 0xe7, 0x61, 0xb2, 0x4a, 0x89, 0x41,
	0x3d, 0x26, 0x6f, 0x9b, 0x4d, 0xcc, 0x4d, 0x2d, 0x68, 0x1b, 0x17, 0x45, 0x7d, 0x37, 0x8a, 0x38,
	0x63, 0x73, 0x6f, 0x59, 0x8f, 0xe3, 0xd1, 0x5e, 0x38, 0x51, 0x76, 0xbc, 0x3a, 0xe1, 0xf2, 0x44,
	0x70, 0xb4, 0x2e, 0x2c, 0x74, 0x19, 0x4e, 0x37, 0x5c, 0xcb, 0xb4, 0x6b, 0x85, 0x3a, 0x65, 0x8c,
	0x54, 0xa8, 0x9c, 0x0c, 0xb3, 0x9b, 0xdf, 0xc4, 0x49, 0x17, 0xa3, 0x08, 0x7d, 0x47, 0x44, 0x10,
	0x26, 0x7a, 0x1f, 0x4e, 0x7d, 0xea, 0x98, 0x76, 0x81, 0x94, 0x4a, 0xd4, 0xe5, 0xf2, 0xe4, 0xc8,
	0x3c, 0x18, 0x84, 0x67, 0xc3, 0x68, 0x74, 0x11, 0x6e, 0x37, 0x9c, 0x96, 0x1d, 0x2a, 0x24, 0xa5,
	0x9a, 0x9c, 0x1a, 0x99, 0x36, 0x15, 0xc7, 0x67, 0x4b, 0x35, 0xf4, 0x21, 0xdc, 0xd1, 0xc5, 0xd9,
	0x01, 0x0f, 0x8e, 0xcc, 0xeb, 0xea, 0xf9, 0x80, 0xf4, 0x01, 0x19, 0xb5, 0xb9, 0x3c, 0xf5, 0xea,
	0xc0, 0x3c, 0xb5, 0x39, 0xca, 0xc3, 0x9d, 0x5d, 0x60, 0x99, 0x98, 0x16, 0x35, 0xe4, 0xed, 0x23,
	0x23, 0xa7, 0x63, 0xc4, 0xd9, 0x90, 0xb0, 0x06, 0x7a, 0xbd, 0x41, 0x1b, 0xd4, 0x90, 0x77, 0xbc,
	0x3a, 0xf4, 0x72, 0x48, 0x08, 0xa0, 0x96, 0x23, 0xc6, 0x0f, 0x73, 0xac, 0x26, 0x35, 0xe4, 0xe9,
	0xd1, 0xa1, 0x31, 0x22, 0x1f, 0x12, 0xd2, 0x8b, 0x70, 0x7b, 0x6f, 0x03, 0xa3, 0x5d, 0x30, 0x51,
	0xa3, 0xcb, 0xe1, 0x4c, 0x48, 0xe9, 0xc1, 0x12, 0xbd, 0x06, 0xb7, 0x35, 0x89, 0xd5, 0xa0, 0xd1,
	0x38, 0xd2, 0x23, 0x63, 0x71, 0xec, 0x2d, 0x90, 0x3e, 0x00, 0x93, 0x71, 0x0f, 0x22, 0x38, 0xee,
	0x12, 0x5e, 0x15, 0x71, 0xe1, 0x5a, 0x59, 0x82, 0xbb, 0x07, 0x85, 0x30, 0x74, 0x12, 0x4e, 0x8a,
	0xc9, 0x14, 0x8c, 0x9e, 0xe0, 0x95, 0x29, 0x1b, 0xeb, 0xd7, 0xbb, 0x31, 0xca, 0x8f, 0x00, 0xbe,
	0x3e, 0xe8, 0x70, 0x36, 0x7c, 0x5e, 0x0c, 0x5d, 0x82, 0xc9, 0xe8, 0xa5, 0xc5, 0xf0, 0xe3, 0x1b,
	0xc3, 0x45, 0xac, 0x2a, 0xfe, 0x8a, 0x97, 0x2c, 0x30, 0x41, 0x85, 0x7a, 0x37, 0x46, 0xa9, 0x90,
	0xf2, 0x33, 0x80, 0xfb, 0xcf, 0x51, 0x3e, 0x24, 0x1f, 0x7a, 0xbd, 0x41, 0x19, 0xff, 0x6f, 0x46,
	0xf0, 0x29, 0x08, 0x57, 0x3f, 0x26, 0x5f, 0x3a, 0x82, 0xcf, 0x06, 0x2e, 0x17, 0x09, 0xab, 0xe5,
	0xc6, 0x03, 0x90, 0x9e, 0x2a, 0xc7, 0xff, 0x50, 0x7e, 0x05, 0x10, 0x5f, 0x30, 0xd9, 0x10, 0xdd,
	0x2c, 0x16, 0xfe, 0xbf, 0x7c, 0x1c, 0x6e, 0x39, 0x91, 0x9f, 0x00, 0xdc, 0x9f, 0x5f, 0xaf, 0xfe,
	0x97, 0x60, 0x52, 0x34, 0x96, 0x90, 0xbf, 0x89, 0x5e, 0x1c, 0x2a, 0x3d, 0xc6, 0x6c, 0x59, 0xf3,
	0xc2, 0xef, 0x13, 0x30, 0x3d, 0x4c, 0x70, 0xc5, 0x64, 0x41, 0xfb, 0x59, 0x10, 0x9e, 0xa3, 0x3c,
	0x6e, 0xf7, 0xbd, 0x03, 0xe4, 0x33, 0xc1, 0xb7, 0xa7, 0xf4, 0xe1, 0x4d, 0x77, 0xbd, 0xb2, 0xef,
	0x8b, 0xdf, 0xfe, 0xba, 0x3b, 0xb6, 0x07, 0xed, 0xd6, 0x08, 0xd3, 0x44, 0x16, 0x19, 0xd1, 0xfc,
	0xe8, 0x07, 0x00, 0x13, 0xe7, 0x28, 0x47, 0x47, 0xfa, 0x79, 0xeb, 0x75, 0x75, 0x7a, 0x13, 0x45,
	0x54, 0xde, 0x0b, 0x8f, 0x3d, 0x8d, 0x72, 0x3d, 0xc7, 0x32, 0xed, 0x86, 0x69, 0x30, 0xb5, 0xaf,
	0xb1, 0xfa, 0xec, 0x9b, 0x91, 0xd3, 0xea, 0xf7, 0xa4, 0x9b, 0xe8, 0x2b, 0x00, 0xc7, 0x83, 0x7e,
	0x45, 0x6a, 0xff, 0xc1, 0xeb, 0x77, 0x71, 0xfa, 0xe0, 0xc6, 0x42, 0x99, 0xf2, 0x66, 0xa8, 0x54,
	0x43, 0x99, 0xb5, 0x4a, 0x37, 0x50, 0x89, 0x5e, 0x00, 0x98, 0xc8, 0x0f, 0x2b, 0x5d, 0x7e, 0xab,
	0xa5, 0xfb, 0x16, 0x84, 0x8a, 0xbe, 0x06, 0x69, 0x7d, 0xad, 0x24, 0xb1, 0x52, 0x37, 0x55, 0xc4,
	0x5e, 0xe7, 0x9e, 0x62, 0x2e, 0x82, 0xf9, 0x2b, 0x27, 0x95, 0x13, 0xaf, 0x0c, 0x5e, 0x04, 0xf3,
	0xe8, 0x2e, 0x80, 0x13, 0xa7, 0xa9, 0x45, 0x39, 0x45, 0xa3, 0xcd, 0xb4, 0xf4, 0x4b, 0xfa, 0x59,
	0xc9, 0x85, 0x19, 0xbf, 0x3d, 0xbf, 0x38, 0xd2, 0x1d, 0x74, 0x85, 0x07, 0x46, 0xee, 0x7b, 0xf0,
	0xa8, 0x8d, 0xc1, 0xe3, 0x36, 0x06, 0x4f, 0xda, 0x58, 0x7a, 0xda, 0xc6, 0xd2, 0xb3, 0x36, 0x96,
	0x9e, 0xb7, 0xb1, 0xf4, 0xa2, 0x8d, 0xc1, 0x2d, 0x1f, 0x83, 0xdb, 0x3e, 0x96, 0xee, 0xf9, 0x18,
	0xdc, 0xf7, 0xb1, 0xf4, 0xc0, 0xc7, 0xd2, 0x43, 0x1f, 0x4b, 0x8f, 0x7c, 0x0c, 0x1e, 0xfb, 0x18,
	0x3c, 0xf1, 0xb1, 0xf4, 0xd4, 0xc7, 0xe0, 0x99, 0x8f, 0xa5, 0xe7, 0x3e, 0x06, 0x2f, 0x7c, 0x2c,
	0xdd, 0xea, 0x60, 0xe9, 0x76, 0x07, 0x83, 0x3b, 0x1d, 0x2c, 0x7d, 0xd3, 0xc1, 0xe0, 0xbb, 0x0e,
	0x96, 0xee, 0x75, 0xb0, 0x74, 0xbf, 0x83, 0xc1, 0x83, 0x0e, 0x06, 0x0f, 0x3b, 0x18, 0x5c, 0x39,
	0x52, 0x71, 0x54, 0x5e, 0xa5, 0xbc, 0x6a, 0xda, 0x15, 0xa6, 0xda, 0x94, 0xb7, 0x1c, 0xaf, 0xa6,
	0xad, 0xfd, 0x51, 0xe2, 0xd6, 0x2a, 0x1a, 0xe7, 0xb6, 0x5b, 0x2c, 0x4e, 0x84, 0x89, 0x1f, 0xfb,
	0x37, 0x00, 0x00, 0xff, 0xff, 0xc6, 0x7b, 0x0d, 0x72, 0xe5, 0x0d, 0x00, 0x00,
}

func (this *ApplicationWebhookIdentifiers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationWebhookIdentifiers)
	if !ok {
		that2, ok := that.(ApplicationWebhookIdentifiers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationIdentifiers.Equal(&that1.ApplicationIdentifiers) {
		return false
	}
	if this.WebhookID != that1.WebhookID {
		return false
	}
	return true
}
func (this *ApplicationWebhook) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationWebhook)
	if !ok {
		that2, ok := that.(ApplicationWebhook)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationWebhookIdentifiers.Equal(&that1.ApplicationWebhookIdentifiers) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if this.BaseURL != that1.BaseURL {
		return false
	}
	if len(this.Headers) != len(that1.Headers) {
		return false
	}
	for i := range this.Headers {
		if this.Headers[i] != that1.Headers[i] {
			return false
		}
	}
	if this.Format != that1.Format {
		return false
	}
	if !this.UplinkMessage.Equal(that1.UplinkMessage) {
		return false
	}
	if !this.JoinAccept.Equal(that1.JoinAccept) {
		return false
	}
	if !this.DownlinkAck.Equal(that1.DownlinkAck) {
		return false
	}
	if !this.DownlinkNack.Equal(that1.DownlinkNack) {
		return false
	}
	if !this.DownlinkSent.Equal(that1.DownlinkSent) {
		return false
	}
	if !this.DownlinkFailed.Equal(that1.DownlinkFailed) {
		return false
	}
	if !this.DownlinkQueued.Equal(that1.DownlinkQueued) {
		return false
	}
	if !this.LocationSolved.Equal(that1.LocationSolved) {
		return false
	}
	return true
}
func (this *ApplicationWebhook_Message) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationWebhook_Message)
	if !ok {
		that2, ok := that.(ApplicationWebhook_Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	return true
}
func (this *ApplicationWebhooks) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationWebhooks)
	if !ok {
		that2, ok := that.(ApplicationWebhooks)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Webhooks) != len(that1.Webhooks) {
		return false
	}
	for i := range this.Webhooks {
		if !this.Webhooks[i].Equal(that1.Webhooks[i]) {
			return false
		}
	}
	return true
}
func (this *ApplicationWebhookFormats) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationWebhookFormats)
	if !ok {
		that2, ok := that.(ApplicationWebhookFormats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Formats) != len(that1.Formats) {
		return false
	}
	for i := range this.Formats {
		if this.Formats[i] != that1.Formats[i] {
			return false
		}
	}
	return true
}
func (this *GetApplicationWebhookRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetApplicationWebhookRequest)
	if !ok {
		that2, ok := that.(GetApplicationWebhookRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationWebhookIdentifiers.Equal(&that1.ApplicationWebhookIdentifiers) {
		return false
	}
	if !this.FieldMask.Equal(&that1.FieldMask) {
		return false
	}
	return true
}
func (this *ListApplicationWebhooksRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListApplicationWebhooksRequest)
	if !ok {
		that2, ok := that.(ListApplicationWebhooksRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationIdentifiers.Equal(&that1.ApplicationIdentifiers) {
		return false
	}
	if !this.FieldMask.Equal(&that1.FieldMask) {
		return false
	}
	return true
}
func (this *SetApplicationWebhookRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetApplicationWebhookRequest)
	if !ok {
		that2, ok := that.(SetApplicationWebhookRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationWebhook.Equal(&that1.ApplicationWebhook) {
		return false
	}
	if !this.FieldMask.Equal(&that1.FieldMask) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ApplicationWebhookRegistryClient is the client API for ApplicationWebhookRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApplicationWebhookRegistryClient interface {
	GetFormats(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*ApplicationWebhookFormats, error)
	Get(ctx context.Context, in *GetApplicationWebhookRequest, opts ...grpc.CallOption) (*ApplicationWebhook, error)
	List(ctx context.Context, in *ListApplicationWebhooksRequest, opts ...grpc.CallOption) (*ApplicationWebhooks, error)
	Set(ctx context.Context, in *SetApplicationWebhookRequest, opts ...grpc.CallOption) (*ApplicationWebhook, error)
	Delete(ctx context.Context, in *ApplicationWebhookIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
}

type applicationWebhookRegistryClient struct {
	cc *grpc.ClientConn
}

func NewApplicationWebhookRegistryClient(cc *grpc.ClientConn) ApplicationWebhookRegistryClient {
	return &applicationWebhookRegistryClient{cc}
}

func (c *applicationWebhookRegistryClient) GetFormats(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*ApplicationWebhookFormats, error) {
	out := new(ApplicationWebhookFormats)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationWebhookRegistry/GetFormats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationWebhookRegistryClient) Get(ctx context.Context, in *GetApplicationWebhookRequest, opts ...grpc.CallOption) (*ApplicationWebhook, error) {
	out := new(ApplicationWebhook)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationWebhookRegistry/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationWebhookRegistryClient) List(ctx context.Context, in *ListApplicationWebhooksRequest, opts ...grpc.CallOption) (*ApplicationWebhooks, error) {
	out := new(ApplicationWebhooks)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationWebhookRegistry/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationWebhookRegistryClient) Set(ctx context.Context, in *SetApplicationWebhookRequest, opts ...grpc.CallOption) (*ApplicationWebhook, error) {
	out := new(ApplicationWebhook)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationWebhookRegistry/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationWebhookRegistryClient) Delete(ctx context.Context, in *ApplicationWebhookIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationWebhookRegistry/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationWebhookRegistryServer is the server API for ApplicationWebhookRegistry service.
type ApplicationWebhookRegistryServer interface {
	GetFormats(context.Context, *types.Empty) (*ApplicationWebhookFormats, error)
	Get(context.Context, *GetApplicationWebhookRequest) (*ApplicationWebhook, error)
	List(context.Context, *ListApplicationWebhooksRequest) (*ApplicationWebhooks, error)
	Set(context.Context, *SetApplicationWebhookRequest) (*ApplicationWebhook, error)
	Delete(context.Context, *ApplicationWebhookIdentifiers) (*types.Empty, error)
}

func RegisterApplicationWebhookRegistryServer(s *grpc.Server, srv ApplicationWebhookRegistryServer) {
	s.RegisterService(&_ApplicationWebhookRegistry_serviceDesc, srv)
}

func _ApplicationWebhookRegistry_GetFormats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationWebhookRegistryServer).GetFormats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationWebhookRegistry/GetFormats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationWebhookRegistryServer).GetFormats(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationWebhookRegistry_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationWebhookRegistryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationWebhookRegistry/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationWebhookRegistryServer).Get(ctx, req.(*GetApplicationWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationWebhookRegistry_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicationWebhooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationWebhookRegistryServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationWebhookRegistry/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationWebhookRegistryServer).List(ctx, req.(*ListApplicationWebhooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationWebhookRegistry_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetApplicationWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationWebhookRegistryServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationWebhookRegistry/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationWebhookRegistryServer).Set(ctx, req.(*SetApplicationWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationWebhookRegistry_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationWebhookIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationWebhookRegistryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationWebhookRegistry/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationWebhookRegistryServer).Delete(ctx, req.(*ApplicationWebhookIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApplicationWebhookRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.ApplicationWebhookRegistry",
	HandlerType: (*ApplicationWebhookRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFormats",
			Handler:    _ApplicationWebhookRegistry_GetFormats_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ApplicationWebhookRegistry_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ApplicationWebhookRegistry_List_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _ApplicationWebhookRegistry_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ApplicationWebhookRegistry_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/applicationserver_web.proto",
}

func (m *ApplicationWebhookIdentifiers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationWebhookIdentifiers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApplicationserverWeb(dAtA, i, uint64(m.ApplicationIdentifiers.Size()))
	n1, err := m.ApplicationIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.WebhookID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApplicationserverWeb(dAtA, i, uint64(len(m.WebhookID)))
		i += copy(dAtA[i:], m.WebhookID)
	}
	return i, nil
}

func (m *ApplicationWebhook) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationWebhook) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApplicationserverWeb(dAtA, i, uint64(m.ApplicationWebhookIdentifiers.Size()))
	n2, err := m.ApplicationWebhookIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x12
	i++
	i = encodeVarintApplicationserverWeb(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)))
	n3, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x1a
	i++
	i = encodeVarintApplicationserverWeb(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)))
	n4, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if len(m.BaseURL) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApplicationserverWeb(dAtA, i, uint64(len(m.BaseURL)))
		i += copy(dAtA[i:], m.BaseURL)
	}
	if len(m.Headers) > 0 {
		for k := range m.Headers {
			dAtA[i] = 0x2a
			i++
			v := m.Headers[k]
			mapSize := 1 + len(k) + sovApplicationserverWeb(uint64(len(k))) + 1 + len(v) + sovApplicationserverWeb(uint64(len(v)))
			i = encodeVarintApplicationserverWeb(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintApplicationserverWeb(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintApplicationserverWeb(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Format) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApplicationserverWeb(dAtA, i, uint64(len(m.Format)))
		i += copy(dAtA[i:], m.Format)
	}
	if m.UplinkMessage != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApplicationserverWeb(dAtA, i, uint64(m.UplinkMessage.Size()))
		n5, err := m.UplinkMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.JoinAccept != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApplicationserverWeb(dAtA, i, uint64(m.JoinAccept.Size()))
		n6, err := m.JoinAccept.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.DownlinkAck != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintApplicationserverWeb(dAtA, i, uint64(m.DownlinkAck.Size()))
		n7, err := m.DownlinkAck.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.DownlinkNack != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintApplicationserverWeb(dAtA, i, uint64(m.DownlinkNack.Size()))
		n8, err := m.DownlinkNack.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.DownlinkSent != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintApplicationserverWeb(dAtA, i, uint64(m.DownlinkSent.Size()))
		n9, err := m.DownlinkSent.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.DownlinkFailed != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintApplicationserverWeb(dAtA, i, uint64(m.DownlinkFailed.Size()))
		n10, err := m.DownlinkFailed.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.DownlinkQueued != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintApplicationserverWeb(dAtA, i, uint64(m.DownlinkQueued.Size()))
		n11, err := m.DownlinkQueued.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.LocationSolved != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintApplicationserverWeb(dAtA, i, uint64(m.LocationSolved.Size()))
		n12, err := m.LocationSolved.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *ApplicationWebhook_Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationWebhook_Message) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApplicationserverWeb(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	return i, nil
}

func (m *ApplicationWebhooks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationWebhooks) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Webhooks) > 0 {
		for _, msg := range m.Webhooks {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApplicationserverWeb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ApplicationWebhookFormats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationWebhookFormats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Formats) > 0 {
		for k := range m.Formats {
			dAtA[i] = 0xa
			i++
			v := m.Formats[k]
			mapSize := 1 + len(k) + sovApplicationserverWeb(uint64(len(k))) + 1 + len(v) + sovApplicationserverWeb(uint64(len(v)))
			i = encodeVarintApplicationserverWeb(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintApplicationserverWeb(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintApplicationserverWeb(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *GetApplicationWebhookRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetApplicationWebhookRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApplicationserverWeb(dAtA, i, uint64(m.ApplicationWebhookIdentifiers.Size()))
	n13, err := m.ApplicationWebhookIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	dAtA[i] = 0x12
	i++
	i = encodeVarintApplicationserverWeb(dAtA, i, uint64(m.FieldMask.Size()))
	n14, err := m.FieldMask.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	return i, nil
}

func (m *ListApplicationWebhooksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListApplicationWebhooksRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApplicationserverWeb(dAtA, i, uint64(m.ApplicationIdentifiers.Size()))
	n15, err := m.ApplicationIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	dAtA[i] = 0x12
	i++
	i = encodeVarintApplicationserverWeb(dAtA, i, uint64(m.FieldMask.Size()))
	n16, err := m.FieldMask.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	return i, nil
}

func (m *SetApplicationWebhookRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetApplicationWebhookRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApplicationserverWeb(dAtA, i, uint64(m.ApplicationWebhook.Size()))
	n17, err := m.ApplicationWebhook.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n17
	dAtA[i] = 0x12
	i++
	i = encodeVarintApplicationserverWeb(dAtA, i, uint64(m.FieldMask.Size()))
	n18, err := m.FieldMask.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n18
	return i, nil
}

func encodeVarintApplicationserverWeb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedApplicationWebhookIdentifiers(r randyApplicationserverWeb, easy bool) *ApplicationWebhookIdentifiers {
	this := &ApplicationWebhookIdentifiers{}
	v1 := NewPopulatedApplicationIdentifiers(r, easy)
	this.ApplicationIdentifiers = *v1
	this.WebhookID = randStringApplicationserverWeb(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedApplicationWebhook(r randyApplicationserverWeb, easy bool) *ApplicationWebhook {
	this := &ApplicationWebhook{}
	v2 := NewPopulatedApplicationWebhookIdentifiers(r, easy)
	this.ApplicationWebhookIdentifiers = *v2
	v3 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.CreatedAt = *v3
	v4 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.UpdatedAt = *v4
	this.BaseURL = randStringApplicationserverWeb(r)
	if r.Intn(10) != 0 {
		v5 := r.Intn(10)
		this.Headers = make(map[string]string)
		for i := 0; i < v5; i++ {
			this.Headers[randStringApplicationserverWeb(r)] = randStringApplicationserverWeb(r)
		}
	}
	this.Format = randStringApplicationserverWeb(r)
	if r.Intn(10) != 0 {
		this.UplinkMessage = NewPopulatedApplicationWebhook_Message(r, easy)
	}
	if r.Intn(10) != 0 {
		this.JoinAccept = NewPopulatedApplicationWebhook_Message(r, easy)
	}
	if r.Intn(10) != 0 {
		this.DownlinkAck = NewPopulatedApplicationWebhook_Message(r, easy)
	}
	if r.Intn(10) != 0 {
		this.DownlinkNack = NewPopulatedApplicationWebhook_Message(r, easy)
	}
	if r.Intn(10) != 0 {
		this.DownlinkSent = NewPopulatedApplicationWebhook_Message(r, easy)
	}
	if r.Intn(10) != 0 {
		this.DownlinkFailed = NewPopulatedApplicationWebhook_Message(r, easy)
	}
	if r.Intn(10) != 0 {
		this.DownlinkQueued = NewPopulatedApplicationWebhook_Message(r, easy)
	}
	if r.Intn(10) != 0 {
		this.LocationSolved = NewPopulatedApplicationWebhook_Message(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedApplicationWebhook_Message(r randyApplicationserverWeb, easy bool) *ApplicationWebhook_Message {
	this := &ApplicationWebhook_Message{}
	this.Path = randStringApplicationserverWeb(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedApplicationWebhooks(r randyApplicationserverWeb, easy bool) *ApplicationWebhooks {
	this := &ApplicationWebhooks{}
	if r.Intn(10) != 0 {
		v6 := r.Intn(5)
		this.Webhooks = make([]*ApplicationWebhook, v6)
		for i := 0; i < v6; i++ {
			this.Webhooks[i] = NewPopulatedApplicationWebhook(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedApplicationWebhookFormats(r randyApplicationserverWeb, easy bool) *ApplicationWebhookFormats {
	this := &ApplicationWebhookFormats{}
	if r.Intn(10) != 0 {
		v7 := r.Intn(10)
		this.Formats = make(map[string]string)
		for i := 0; i < v7; i++ {
			this.Formats[randStringApplicationserverWeb(r)] = randStringApplicationserverWeb(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetApplicationWebhookRequest(r randyApplicationserverWeb, easy bool) *GetApplicationWebhookRequest {
	this := &GetApplicationWebhookRequest{}
	v8 := NewPopulatedApplicationWebhookIdentifiers(r, easy)
	this.ApplicationWebhookIdentifiers = *v8
	v9 := types.NewPopulatedFieldMask(r, easy)
	this.FieldMask = *v9
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListApplicationWebhooksRequest(r randyApplicationserverWeb, easy bool) *ListApplicationWebhooksRequest {
	this := &ListApplicationWebhooksRequest{}
	v10 := NewPopulatedApplicationIdentifiers(r, easy)
	this.ApplicationIdentifiers = *v10
	v11 := types.NewPopulatedFieldMask(r, easy)
	this.FieldMask = *v11
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSetApplicationWebhookRequest(r randyApplicationserverWeb, easy bool) *SetApplicationWebhookRequest {
	this := &SetApplicationWebhookRequest{}
	v12 := NewPopulatedApplicationWebhook(r, easy)
	this.ApplicationWebhook = *v12
	v13 := types.NewPopulatedFieldMask(r, easy)
	this.FieldMask = *v13
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyApplicationserverWeb interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneApplicationserverWeb(r randyApplicationserverWeb) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringApplicationserverWeb(r randyApplicationserverWeb) string {
	v14 := r.Intn(100)
	tmps := make([]rune, v14)
	for i := 0; i < v14; i++ {
		tmps[i] = randUTF8RuneApplicationserverWeb(r)
	}
	return string(tmps)
}
func randUnrecognizedApplicationserverWeb(r randyApplicationserverWeb, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldApplicationserverWeb(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldApplicationserverWeb(dAtA []byte, r randyApplicationserverWeb, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateApplicationserverWeb(dAtA, uint64(key))
		v15 := r.Int63()
		if r.Intn(2) == 0 {
			v15 *= -1
		}
		dAtA = encodeVarintPopulateApplicationserverWeb(dAtA, uint64(v15))
	case 1:
		dAtA = encodeVarintPopulateApplicationserverWeb(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateApplicationserverWeb(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateApplicationserverWeb(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateApplicationserverWeb(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateApplicationserverWeb(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *ApplicationWebhookIdentifiers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ApplicationIdentifiers.Size()
	n += 1 + l + sovApplicationserverWeb(uint64(l))
	l = len(m.WebhookID)
	if l > 0 {
		n += 1 + l + sovApplicationserverWeb(uint64(l))
	}
	return n
}

func (m *ApplicationWebhook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ApplicationWebhookIdentifiers.Size()
	n += 1 + l + sovApplicationserverWeb(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovApplicationserverWeb(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)
	n += 1 + l + sovApplicationserverWeb(uint64(l))
	l = len(m.BaseURL)
	if l > 0 {
		n += 1 + l + sovApplicationserverWeb(uint64(l))
	}
	if len(m.Headers) > 0 {
		for k, v := range m.Headers {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApplicationserverWeb(uint64(len(k))) + 1 + len(v) + sovApplicationserverWeb(uint64(len(v)))
			n += mapEntrySize + 1 + sovApplicationserverWeb(uint64(mapEntrySize))
		}
	}
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovApplicationserverWeb(uint64(l))
	}
	if m.UplinkMessage != nil {
		l = m.UplinkMessage.Size()
		n += 1 + l + sovApplicationserverWeb(uint64(l))
	}
	if m.JoinAccept != nil {
		l = m.JoinAccept.Size()
		n += 1 + l + sovApplicationserverWeb(uint64(l))
	}
	if m.DownlinkAck != nil {
		l = m.DownlinkAck.Size()
		n += 1 + l + sovApplicationserverWeb(uint64(l))
	}
	if m.DownlinkNack != nil {
		l = m.DownlinkNack.Size()
		n += 1 + l + sovApplicationserverWeb(uint64(l))
	}
	if m.DownlinkSent != nil {
		l = m.DownlinkSent.Size()
		n += 1 + l + sovApplicationserverWeb(uint64(l))
	}
	if m.DownlinkFailed != nil {
		l = m.DownlinkFailed.Size()
		n += 1 + l + sovApplicationserverWeb(uint64(l))
	}
	if m.DownlinkQueued != nil {
		l = m.DownlinkQueued.Size()
		n += 1 + l + sovApplicationserverWeb(uint64(l))
	}
	if m.LocationSolved != nil {
		l = m.LocationSolved.Size()
		n += 1 + l + sovApplicationserverWeb(uint64(l))
	}
	return n
}

func (m *ApplicationWebhook_Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovApplicationserverWeb(uint64(l))
	}
	return n
}

func (m *ApplicationWebhooks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Webhooks) > 0 {
		for _, e := range m.Webhooks {
			l = e.Size()
			n += 1 + l + sovApplicationserverWeb(uint64(l))
		}
	}
	return n
}

func (m *ApplicationWebhookFormats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Formats) > 0 {
		for k, v := range m.Formats {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApplicationserverWeb(uint64(len(k))) + 1 + len(v) + sovApplicationserverWeb(uint64(len(v)))
			n += mapEntrySize + 1 + sovApplicationserverWeb(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *GetApplicationWebhookRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ApplicationWebhookIdentifiers.Size()
	n += 1 + l + sovApplicationserverWeb(uint64(l))
	l = m.FieldMask.Size()
	n += 1 + l + sovApplicationserverWeb(uint64(l))
	return n
}

func (m *ListApplicationWebhooksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ApplicationIdentifiers.Size()
	n += 1 + l + sovApplicationserverWeb(uint64(l))
	l = m.FieldMask.Size()
	n += 1 + l + sovApplicationserverWeb(uint64(l))
	return n
}

func (m *SetApplicationWebhookRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ApplicationWebhook.Size()
	n += 1 + l + sovApplicationserverWeb(uint64(l))
	l = m.FieldMask.Size()
	n += 1 + l + sovApplicationserverWeb(uint64(l))
	return n
}

func sovApplicationserverWeb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApplicationserverWeb(x uint64) (n int) {
	return sovApplicationserverWeb((x << 1) ^ uint64((int64(x) >> 63)))
}
func (this *ApplicationWebhookIdentifiers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationWebhookIdentifiers{`,
		`ApplicationIdentifiers:` + strings.Replace(strings.Replace(this.ApplicationIdentifiers.String(), "ApplicationIdentifiers", "ApplicationIdentifiers", 1), `&`, ``, 1) + `,`,
		`WebhookID:` + fmt.Sprintf("%v", this.WebhookID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationWebhook) String() string {
	if this == nil {
		return "nil"
	}
	keysForHeaders := make([]string, 0, len(this.Headers))
	for k := range this.Headers {
		keysForHeaders = append(keysForHeaders, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForHeaders)
	mapStringForHeaders := "map[string]string{"
	for _, k := range keysForHeaders {
		mapStringForHeaders += fmt.Sprintf("%v: %v,", k, this.Headers[k])
	}
	mapStringForHeaders += "}"
	s := strings.Join([]string{`&ApplicationWebhook{`,
		`ApplicationWebhookIdentifiers:` + strings.Replace(strings.Replace(this.ApplicationWebhookIdentifiers.String(), "ApplicationWebhookIdentifiers", "ApplicationWebhookIdentifiers", 1), `&`, ``, 1) + `,`,
		`CreatedAt:` + strings.Replace(strings.Replace(this.CreatedAt.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`UpdatedAt:` + strings.Replace(strings.Replace(this.UpdatedAt.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`BaseURL:` + fmt.Sprintf("%v", this.BaseURL) + `,`,
		`Headers:` + mapStringForHeaders + `,`,
		`Format:` + fmt.Sprintf("%v", this.Format) + `,`,
		`UplinkMessage:` + strings.Replace(fmt.Sprintf("%v", this.UplinkMessage), "ApplicationWebhook_Message", "ApplicationWebhook_Message", 1) + `,`,
		`JoinAccept:` + strings.Replace(fmt.Sprintf("%v", this.JoinAccept), "ApplicationWebhook_Message", "ApplicationWebhook_Message", 1) + `,`,
		`DownlinkAck:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkAck), "ApplicationWebhook_Message", "ApplicationWebhook_Message", 1) + `,`,
		`DownlinkNack:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkNack), "ApplicationWebhook_Message", "ApplicationWebhook_Message", 1) + `,`,
		`DownlinkSent:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkSent), "ApplicationWebhook_Message", "ApplicationWebhook_Message", 1) + `,`,
		`DownlinkFailed:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkFailed), "ApplicationWebhook_Message", "ApplicationWebhook_Message", 1) + `,`,
		`DownlinkQueued:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkQueued), "ApplicationWebhook_Message", "ApplicationWebhook_Message", 1) + `,`,
		`LocationSolved:` + strings.Replace(fmt.Sprintf("%v", this.LocationSolved), "ApplicationWebhook_Message", "ApplicationWebhook_Message", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationWebhook_Message) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationWebhook_Message{`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationWebhooks) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationWebhooks{`,
		`Webhooks:` + strings.Replace(fmt.Sprintf("%v", this.Webhooks), "ApplicationWebhook", "ApplicationWebhook", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationWebhookFormats) String() string {
	if this == nil {
		return "nil"
	}
	keysForFormats := make([]string, 0, len(this.Formats))
	for k := range this.Formats {
		keysForFormats = append(keysForFormats, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForFormats)
	mapStringForFormats := "map[string]string{"
	for _, k := range keysForFormats {
		mapStringForFormats += fmt.Sprintf("%v: %v,", k, this.Formats[k])
	}
	mapStringForFormats += "}"
	s := strings.Join([]string{`&ApplicationWebhookFormats{`,
		`Formats:` + mapStringForFormats + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetApplicationWebhookRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetApplicationWebhookRequest{`,
		`ApplicationWebhookIdentifiers:` + strings.Replace(strings.Replace(this.ApplicationWebhookIdentifiers.String(), "ApplicationWebhookIdentifiers", "ApplicationWebhookIdentifiers", 1), `&`, ``, 1) + `,`,
		`FieldMask:` + strings.Replace(strings.Replace(this.FieldMask.String(), "FieldMask", "types.FieldMask", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListApplicationWebhooksRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListApplicationWebhooksRequest{`,
		`ApplicationIdentifiers:` + strings.Replace(strings.Replace(this.ApplicationIdentifiers.String(), "ApplicationIdentifiers", "ApplicationIdentifiers", 1), `&`, ``, 1) + `,`,
		`FieldMask:` + strings.Replace(strings.Replace(this.FieldMask.String(), "FieldMask", "types.FieldMask", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetApplicationWebhookRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetApplicationWebhookRequest{`,
		`ApplicationWebhook:` + strings.Replace(strings.Replace(this.ApplicationWebhook.String(), "ApplicationWebhook", "ApplicationWebhook", 1), `&`, ``, 1) + `,`,
		`FieldMask:` + strings.Replace(strings.Replace(this.FieldMask.String(), "FieldMask", "types.FieldMask", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringApplicationserverWeb(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ApplicationWebhookIdentifiers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationserverWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationWebhookIdentifiers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationWebhookIdentifiers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebhookID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebhookID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationserverWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationWebhook) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationserverWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationWebhook: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationWebhook: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationWebhookIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationWebhookIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Headers == nil {
				m.Headers = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApplicationserverWeb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApplicationserverWeb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApplicationserverWeb
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApplicationserverWeb
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApplicationserverWeb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApplicationserverWeb
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApplicationserverWeb
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApplicationserverWeb(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApplicationserverWeb
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Headers[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplinkMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UplinkMessage == nil {
				m.UplinkMessage = &ApplicationWebhook_Message{}
			}
			if err := m.UplinkMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinAccept", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JoinAccept == nil {
				m.JoinAccept = &ApplicationWebhook_Message{}
			}
			if err := m.JoinAccept.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkAck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DownlinkAck == nil {
				m.DownlinkAck = &ApplicationWebhook_Message{}
			}
			if err := m.DownlinkAck.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkNack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DownlinkNack == nil {
				m.DownlinkNack = &ApplicationWebhook_Message{}
			}
			if err := m.DownlinkNack.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkSent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DownlinkSent == nil {
				m.DownlinkSent = &ApplicationWebhook_Message{}
			}
			if err := m.DownlinkSent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkFailed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DownlinkFailed == nil {
				m.DownlinkFailed = &ApplicationWebhook_Message{}
			}
			if err := m.DownlinkFailed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkQueued", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DownlinkQueued == nil {
				m.DownlinkQueued = &ApplicationWebhook_Message{}
			}
			if err := m.DownlinkQueued.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationSolved", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LocationSolved == nil {
				m.LocationSolved = &ApplicationWebhook_Message{}
			}
			if err := m.LocationSolved.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationserverWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationWebhook_Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationserverWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationserverWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationWebhooks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationserverWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationWebhooks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationWebhooks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Webhooks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Webhooks = append(m.Webhooks, &ApplicationWebhook{})
			if err := m.Webhooks[len(m.Webhooks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationserverWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationWebhookFormats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationserverWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationWebhookFormats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationWebhookFormats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Formats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Formats == nil {
				m.Formats = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApplicationserverWeb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApplicationserverWeb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApplicationserverWeb
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApplicationserverWeb
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApplicationserverWeb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApplicationserverWeb
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApplicationserverWeb
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApplicationserverWeb(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApplicationserverWeb
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Formats[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationserverWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetApplicationWebhookRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationserverWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetApplicationWebhookRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetApplicationWebhookRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationWebhookIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationWebhookIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationserverWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListApplicationWebhooksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationserverWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListApplicationWebhooksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListApplicationWebhooksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationserverWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetApplicationWebhookRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationserverWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetApplicationWebhookRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetApplicationWebhookRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationWebhook", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationWebhook.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationserverWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApplicationserverWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApplicationserverWeb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApplicationserverWeb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApplicationserverWeb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApplicationserverWeb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApplicationserverWeb
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthApplicationserverWeb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApplicationserverWeb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApplicationserverWeb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthApplicationserverWeb
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApplicationserverWeb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApplicationserverWeb   = fmt.Errorf("proto: integer overflow")
)
