// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/user_services.proto

package ttnpb // import "go.thethings.network/lorawan-stack/pkg/ttnpb"

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import types "github.com/gogo/protobuf/types"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import context "context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserRegistry service

type UserRegistryClient interface {
	// Register a new user. This method may be restricted by network settings.
	Create(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error)
	// Get the user with the given identifiers, selecting the fields given by the
	// field mask. The method may return more or less fields, depending on the rights
	// of the caller.
	Get(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error)
	Update(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*User, error)
	// Create a temporary password that can be used for updating a forgotten password.
	// The generated password is sent to the user's email address.
	CreateTemporaryPassword(ctx context.Context, in *CreateTemporaryPasswordRequest, opts ...grpc.CallOption) (*types.Empty, error)
	UpdatePassword(ctx context.Context, in *UpdateUserPasswordRequest, opts ...grpc.CallOption) (*types.Empty, error)
	Delete(ctx context.Context, in *UserIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
}

type userRegistryClient struct {
	cc *grpc.ClientConn
}

func NewUserRegistryClient(cc *grpc.ClientConn) UserRegistryClient {
	return &userRegistryClient{cc}
}

func (c *userRegistryClient) Create(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserRegistry/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRegistryClient) Get(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserRegistry/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRegistryClient) Update(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserRegistry/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRegistryClient) CreateTemporaryPassword(ctx context.Context, in *CreateTemporaryPasswordRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserRegistry/CreateTemporaryPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRegistryClient) UpdatePassword(ctx context.Context, in *UpdateUserPasswordRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserRegistry/UpdatePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRegistryClient) Delete(ctx context.Context, in *UserIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserRegistry/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserRegistry service

type UserRegistryServer interface {
	// Register a new user. This method may be restricted by network settings.
	Create(context.Context, *CreateUserRequest) (*User, error)
	// Get the user with the given identifiers, selecting the fields given by the
	// field mask. The method may return more or less fields, depending on the rights
	// of the caller.
	Get(context.Context, *GetUserRequest) (*User, error)
	Update(context.Context, *UpdateUserRequest) (*User, error)
	// Create a temporary password that can be used for updating a forgotten password.
	// The generated password is sent to the user's email address.
	CreateTemporaryPassword(context.Context, *CreateTemporaryPasswordRequest) (*types.Empty, error)
	UpdatePassword(context.Context, *UpdateUserPasswordRequest) (*types.Empty, error)
	Delete(context.Context, *UserIdentifiers) (*types.Empty, error)
}

func RegisterUserRegistryServer(s *grpc.Server, srv UserRegistryServer) {
	s.RegisterService(&_UserRegistry_serviceDesc, srv)
}

func _UserRegistry_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegistryServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserRegistry/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegistryServer).Create(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRegistry_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegistryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserRegistry/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegistryServer).Get(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRegistry_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegistryServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserRegistry/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegistryServer).Update(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRegistry_CreateTemporaryPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTemporaryPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegistryServer).CreateTemporaryPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserRegistry/CreateTemporaryPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegistryServer).CreateTemporaryPassword(ctx, req.(*CreateTemporaryPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRegistry_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegistryServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserRegistry/UpdatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegistryServer).UpdatePassword(ctx, req.(*UpdateUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRegistry_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegistryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserRegistry/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegistryServer).Delete(ctx, req.(*UserIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.UserRegistry",
	HandlerType: (*UserRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _UserRegistry_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _UserRegistry_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserRegistry_Update_Handler,
		},
		{
			MethodName: "CreateTemporaryPassword",
			Handler:    _UserRegistry_CreateTemporaryPassword_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _UserRegistry_UpdatePassword_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserRegistry_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/user_services.proto",
}

// Client API for UserAccess service

type UserAccessClient interface {
	ListRights(ctx context.Context, in *UserIdentifiers, opts ...grpc.CallOption) (*Rights, error)
	CreateAPIKey(ctx context.Context, in *CreateUserAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error)
	ListAPIKeys(ctx context.Context, in *UserIdentifiers, opts ...grpc.CallOption) (*APIKeys, error)
	// Update the rights of an existing user API key. To generate an API key,
	// the CreateAPIKey should be used. To delete an API key, update it
	// with zero rights.
	UpdateAPIKey(ctx context.Context, in *UpdateUserAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error)
}

type userAccessClient struct {
	cc *grpc.ClientConn
}

func NewUserAccessClient(cc *grpc.ClientConn) UserAccessClient {
	return &userAccessClient{cc}
}

func (c *userAccessClient) ListRights(ctx context.Context, in *UserIdentifiers, opts ...grpc.CallOption) (*Rights, error) {
	out := new(Rights)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserAccess/ListRights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccessClient) CreateAPIKey(ctx context.Context, in *CreateUserAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error) {
	out := new(APIKey)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserAccess/CreateAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccessClient) ListAPIKeys(ctx context.Context, in *UserIdentifiers, opts ...grpc.CallOption) (*APIKeys, error) {
	out := new(APIKeys)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserAccess/ListAPIKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccessClient) UpdateAPIKey(ctx context.Context, in *UpdateUserAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error) {
	out := new(APIKey)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserAccess/UpdateAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserAccess service

type UserAccessServer interface {
	ListRights(context.Context, *UserIdentifiers) (*Rights, error)
	CreateAPIKey(context.Context, *CreateUserAPIKeyRequest) (*APIKey, error)
	ListAPIKeys(context.Context, *UserIdentifiers) (*APIKeys, error)
	// Update the rights of an existing user API key. To generate an API key,
	// the CreateAPIKey should be used. To delete an API key, update it
	// with zero rights.
	UpdateAPIKey(context.Context, *UpdateUserAPIKeyRequest) (*APIKey, error)
}

func RegisterUserAccessServer(s *grpc.Server, srv UserAccessServer) {
	s.RegisterService(&_UserAccess_serviceDesc, srv)
}

func _UserAccess_ListRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccessServer).ListRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserAccess/ListRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccessServer).ListRights(ctx, req.(*UserIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccess_CreateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccessServer).CreateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserAccess/CreateAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccessServer).CreateAPIKey(ctx, req.(*CreateUserAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccess_ListAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccessServer).ListAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserAccess/ListAPIKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccessServer).ListAPIKeys(ctx, req.(*UserIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccess_UpdateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccessServer).UpdateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserAccess/UpdateAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccessServer).UpdateAPIKey(ctx, req.(*UpdateUserAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserAccess_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.UserAccess",
	HandlerType: (*UserAccessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRights",
			Handler:    _UserAccess_ListRights_Handler,
		},
		{
			MethodName: "CreateAPIKey",
			Handler:    _UserAccess_CreateAPIKey_Handler,
		},
		{
			MethodName: "ListAPIKeys",
			Handler:    _UserAccess_ListAPIKeys_Handler,
		},
		{
			MethodName: "UpdateAPIKey",
			Handler:    _UserAccess_UpdateAPIKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/user_services.proto",
}

// Client API for UserInvitationRegistry service

type UserInvitationRegistryClient interface {
	Send(ctx context.Context, in *SendInvitationRequest, opts ...grpc.CallOption) (*Invitation, error)
	List(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*Invitations, error)
	Delete(ctx context.Context, in *DeleteInvitationRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type userInvitationRegistryClient struct {
	cc *grpc.ClientConn
}

func NewUserInvitationRegistryClient(cc *grpc.ClientConn) UserInvitationRegistryClient {
	return &userInvitationRegistryClient{cc}
}

func (c *userInvitationRegistryClient) Send(ctx context.Context, in *SendInvitationRequest, opts ...grpc.CallOption) (*Invitation, error) {
	out := new(Invitation)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserInvitationRegistry/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInvitationRegistryClient) List(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*Invitations, error) {
	out := new(Invitations)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserInvitationRegistry/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInvitationRegistryClient) Delete(ctx context.Context, in *DeleteInvitationRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserInvitationRegistry/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserInvitationRegistry service

type UserInvitationRegistryServer interface {
	Send(context.Context, *SendInvitationRequest) (*Invitation, error)
	List(context.Context, *types.Empty) (*Invitations, error)
	Delete(context.Context, *DeleteInvitationRequest) (*types.Empty, error)
}

func RegisterUserInvitationRegistryServer(s *grpc.Server, srv UserInvitationRegistryServer) {
	s.RegisterService(&_UserInvitationRegistry_serviceDesc, srv)
}

func _UserInvitationRegistry_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInvitationRegistryServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserInvitationRegistry/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInvitationRegistryServer).Send(ctx, req.(*SendInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInvitationRegistry_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInvitationRegistryServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserInvitationRegistry/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInvitationRegistryServer).List(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInvitationRegistry_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInvitationRegistryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserInvitationRegistry/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInvitationRegistryServer).Delete(ctx, req.(*DeleteInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserInvitationRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.UserInvitationRegistry",
	HandlerType: (*UserInvitationRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _UserInvitationRegistry_Send_Handler,
		},
		{
			MethodName: "List",
			Handler:    _UserInvitationRegistry_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserInvitationRegistry_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/user_services.proto",
}

// Client API for UserSessionRegistry service

type UserSessionRegistryClient interface {
	List(ctx context.Context, in *ListUserSessionsRequest, opts ...grpc.CallOption) (*UserSessions, error)
	Delete(ctx context.Context, in *UserSessionIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
}

type userSessionRegistryClient struct {
	cc *grpc.ClientConn
}

func NewUserSessionRegistryClient(cc *grpc.ClientConn) UserSessionRegistryClient {
	return &userSessionRegistryClient{cc}
}

func (c *userSessionRegistryClient) List(ctx context.Context, in *ListUserSessionsRequest, opts ...grpc.CallOption) (*UserSessions, error) {
	out := new(UserSessions)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserSessionRegistry/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSessionRegistryClient) Delete(ctx context.Context, in *UserSessionIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserSessionRegistry/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserSessionRegistry service

type UserSessionRegistryServer interface {
	List(context.Context, *ListUserSessionsRequest) (*UserSessions, error)
	Delete(context.Context, *UserSessionIdentifiers) (*types.Empty, error)
}

func RegisterUserSessionRegistryServer(s *grpc.Server, srv UserSessionRegistryServer) {
	s.RegisterService(&_UserSessionRegistry_serviceDesc, srv)
}

func _UserSessionRegistry_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSessionRegistryServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserSessionRegistry/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSessionRegistryServer).List(ctx, req.(*ListUserSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSessionRegistry_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSessionIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSessionRegistryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserSessionRegistry/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSessionRegistryServer).Delete(ctx, req.(*UserSessionIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserSessionRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.UserSessionRegistry",
	HandlerType: (*UserSessionRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _UserSessionRegistry_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserSessionRegistry_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/user_services.proto",
}

func init() {
	proto.RegisterFile("lorawan-stack/api/user_services.proto", fileDescriptor_user_services_16814650846143b0)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/user_services.proto", fileDescriptor_user_services_16814650846143b0)
}

var fileDescriptor_user_services_16814650846143b0 = []byte{
	// 832 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x3d, 0x6c, 0xdb, 0x46,
	0x14, 0xe6, 0x39, 0xa9, 0x86, 0x8b, 0x60, 0x34, 0xd7, 0x20, 0x6a, 0x68, 0xe3, 0x05, 0x61, 0x93,
	0x06, 0x15, 0xa2, 0x23, 0xaa, 0x04, 0x28, 0x90, 0x2d, 0xfd, 0x41, 0x10, 0xb4, 0x43, 0x9a, 0x9f,
	0xa5, 0x05, 0x2a, 0x50, 0xd2, 0x99, 0xba, 0xca, 0x26, 0x59, 0xde, 0xc9, 0x86, 0x60, 0xa4, 0x48,
	0x3d, 0x19, 0xe8, 0x52, 0xa0, 0x05, 0xda, 0xb1, 0xe8, 0xe4, 0x6e, 0x1e, 0x3d, 0x7a, 0xf4, 0x68,
	0xa0, 0x8b, 0x47, 0x8b, 0xec, 0xe0, 0xa9, 0xf0, 0xe8, 0xb1, 0xe0, 0x1d, 0xa9, 0x1f, 0x4a, 0xb4,
	0xb4, 0x51, 0xef, 0x3e, 0x7e, 0xdf, 0xfb, 0xbe, 0x7b, 0x8f, 0xc2, 0xf7, 0xd6, 0xfd, 0xd0, 0xd9,
	0x72, 0xbc, 0x9a, 0x90, 0x4e, 0xab, 0x6b, 0x3b, 0x01, 0xb7, 0x7b, 0x82, 0x85, 0x0d, 0xc1, 0xc2,
	0x4d, 0xde, 0x62, 0x82, 0x06, 0xa1, 0x2f, 0x7d, 0xb2, 0x2c, 0xa5, 0x47, 0x53, 0x28, 0xdd, 0x7c,
	0x68, 0xd6, 0x5c, 0x2e, 0x3b, 0xbd, 0x26, 0x6d, 0xf9, 0x1b, 0xb6, 0xeb, 0xbb, 0xbe, 0xad, 0x60,
	0xcd, 0xde, 0x9a, 0xfa, 0xa5, 0x7e, 0xa8, 0x27, 0xfd, 0xba, 0xb9, 0xea, 0xfa, 0xbe, 0xbb, 0xce,
	0x14, 0xbd, 0xe3, 0x79, 0xbe, 0x74, 0x24, 0xf7, 0xbd, 0x94, 0xdc, 0x5c, 0x49, 0x4f, 0x87, 0x1c,
	0x6c, 0x23, 0x90, 0xfd, 0xf4, 0xf0, 0x83, 0xe9, 0x06, 0x79, 0x9b, 0x79, 0x92, 0xaf, 0x71, 0x16,
	0x66, 0x0c, 0x30, 0x0d, 0x0a, 0xb9, 0xdb, 0x91, 0xd9, 0xf9, 0xea, 0x6c, 0x97, 0xfa, 0xb4, 0xfe,
	0xf7, 0x3b, 0xb8, 0xfc, 0x5a, 0xb0, 0xf0, 0x05, 0x73, 0xb9, 0x90, 0x61, 0x9f, 0xbc, 0xc2, 0xa5,
	0xcf, 0x42, 0xe6, 0x48, 0x46, 0xee, 0xd0, 0x49, 0xe3, 0x54, 0xd7, 0x35, 0xfa, 0x87, 0x1e, 0x13,
	0xd2, 0xbc, 0x91, 0x87, 0x24, 0x87, 0xd6, 0xf5, 0x9d, 0x7f, 0xfe, 0xfd, 0x75, 0xe9, 0x9a, 0x55,
	0x52, 0x42, 0xe2, 0x31, 0xaa, 0x92, 0xef, 0xf0, 0x95, 0xa7, 0x4c, 0x12, 0xc8, 0xe3, 0x9f, 0x32,
	0x39, 0x9f, 0xef, 0x8e, 0xe2, 0x5b, 0x21, 0xb7, 0x34, 0x9f, 0xbd, 0xad, 0x6e, 0x89, 0xb7, 0x05,
	0x4d, 0x1f, 0xde, 0x10, 0x17, 0x97, 0x5e, 0x07, 0xed, 0x99, 0x5d, 0xeb, 0xfa, 0x7c, 0x95, 0xbb,
	0x4a, 0x05, 0xcc, 0x09, 0x15, 0x3a, 0xae, 0x92, 0x18, 0xf9, 0x1d, 0xe1, 0x8a, 0xce, 0xe1, 0x15,
	0xdb, 0x08, 0xfc, 0xd0, 0x09, 0xfb, 0xcf, 0x1d, 0x21, 0xb6, 0xfc, 0xb0, 0x4d, 0xe8, 0xec, 0xc0,
	0xa6, 0x80, 0x59, 0x1f, 0x37, 0xa9, 0xbe, 0x7c, 0x9a, 0x5d, 0x3e, 0xfd, 0x22, 0xb9, 0x7c, 0xeb,
	0x91, 0xea, 0x84, 0x5a, 0x0f, 0x0a, 0xfd, 0xda, 0x32, 0xe3, 0x6c, 0x04, 0x99, 0xfa, 0x0e, 0xc2,
	0xcb, 0xda, 0xeb, 0xb0, 0xa1, 0x8f, 0x8a, 0xb3, 0x58, 0xb4, 0x97, 0x9a, 0xea, 0xe5, 0xbe, 0x69,
	0x15, 0xf7, 0x92, 0x75, 0x90, 0xc4, 0xf3, 0x2d, 0x2e, 0x7d, 0xce, 0xd6, 0x99, 0x64, 0xe4, 0xf6,
	0xac, 0x90, 0x9f, 0x8d, 0xa6, 0xb7, 0x50, 0xf1, 0x7d, 0xa5, 0x48, 0xaa, 0xef, 0xe6, 0x14, 0xdf,
	0xd4, 0xff, 0xbb, 0x82, 0x71, 0xc2, 0xf2, 0xa4, 0xd5, 0x62, 0x42, 0x90, 0x35, 0x8c, 0xbf, 0xe2,
	0x42, 0xbe, 0x50, 0xc3, 0xbe, 0x88, 0x5e, 0x0e, 0xa0, 0x5f, 0xb4, 0x6e, 0x2b, 0xbd, 0x5b, 0xa4,
	0x92, 0xd7, 0x4b, 0xd7, 0x88, 0xfc, 0x88, 0xcb, 0xfa, 0x22, 0x9f, 0x3c, 0x7f, 0xf6, 0x25, 0xeb,
	0x93, 0xfb, 0xc5, 0x7b, 0xa1, 0x11, 0xa3, 0x4c, 0x73, 0x40, 0x7d, 0x9c, 0x65, 0x6a, 0x5d, 0x92,
	0xa9, 0x13, 0xf0, 0x5a, 0x97, 0xf5, 0xd5, 0xee, 0x7c, 0x8f, 0xaf, 0x25, 0x3e, 0xf5, 0xcb, 0x0b,
	0x18, 0xad, 0xcc, 0x96, 0x15, 0x85, 0x7b, 0x34, 0x92, 0x23, 0x3f, 0x23, 0x5c, 0xd6, 0x43, 0x52,
	0x64, 0x76, 0x34, 0x42, 0x8b, 0x99, 0x7d, 0xac, 0x44, 0x1f, 0x99, 0xf6, 0x7c, 0xb3, 0xf6, 0xb6,
	0x13, 0xf0, 0x46, 0x97, 0xf5, 0xa9, 0x5e, 0xb6, 0xfa, 0xfe, 0x12, 0xbe, 0xa9, 0xdc, 0x79, 0x9b,
	0x5c, 0x7f, 0x36, 0x87, 0x9f, 0xa9, 0x26, 0xbe, 0xfa, 0x92, 0x79, 0x6d, 0x72, 0x2f, 0x2f, 0x9b,
	0x54, 0xc7, 0xf1, 0xba, 0x3b, 0x33, 0x0f, 0x1b, 0x41, 0xac, 0x8a, 0xea, 0xf0, 0xba, 0x55, 0xb6,
	0xf9, 0xb0, 0xa8, 0x82, 0xff, 0x1a, 0x5f, 0x4d, 0x82, 0x27, 0x05, 0x93, 0x6a, 0xae, 0x14, 0x93,
	0x0a, 0xeb, 0x86, 0x62, 0x5d, 0x26, 0x13, 0xac, 0xa4, 0x31, 0xdc, 0x8f, 0xa9, 0x60, 0x75, 0x7d,
	0xba, 0xf5, 0xa2, 0x3d, 0x49, 0x05, 0xaa, 0x13, 0x02, 0xf5, 0xdf, 0x96, 0xf0, 0x7b, 0x49, 0x64,
	0x2f, 0x99, 0x10, 0xe3, 0x79, 0xf5, 0x53, 0x2f, 0x53, 0xb2, 0x49, 0x75, 0xec, 0x05, 0x91, 0xc9,
	0xae, 0xce, 0x1a, 0xb3, 0x0c, 0x64, 0x55, 0x95, 0xf8, 0x5d, 0x72, 0xc9, 0x08, 0x8b, 0x14, 0x4b,
	0x7e, 0x42, 0x43, 0xd3, 0x1f, 0x5e, 0x42, 0xba, 0xc8, 0xb7, 0xe1, 0x13, 0x25, 0xfb, 0x71, 0xd5,
	0x9e, 0x2f, 0x6b, 0x6f, 0xa7, 0x4f, 0x49, 0xf5, 0xd3, 0xbf, 0xd0, 0xd1, 0x00, 0xd0, 0xf1, 0x00,
	0xd0, 0xc9, 0x00, 0x8c, 0xd3, 0x01, 0x18, 0x67, 0x03, 0x30, 0xce, 0x07, 0x60, 0x5c, 0x0c, 0x00,
	0xbd, 0x8d, 0x00, 0xed, 0x46, 0x60, 0xec, 0x45, 0x80, 0xf6, 0x23, 0x30, 0x0e, 0x22, 0x30, 0x0e,
	0x23, 0x30, 0x8e, 0x22, 0x40, 0xc7, 0x11, 0xa0, 0x93, 0x08, 0x8c, 0xd3, 0x08, 0xd0, 0x59, 0x04,
	0xc6, 0x79, 0x04, 0xe8, 0x22, 0x02, 0xe3, 0x6d, 0x0c, 0xc6, 0x6e, 0x0c, 0xe8, 0x97, 0x18, 0x8c,
	0x3f, 0x62, 0x40, 0x7f, 0xc6, 0x60, 0xec, 0xc5, 0x60, 0xec, 0xc7, 0x80, 0x0e, 0x62, 0x40, 0x87,
	0x31, 0xa0, 0x6f, 0x1e, 0xb8, 0x3e, 0x95, 0x1d, 0x26, 0x3b, 0xdc, 0x73, 0x05, 0xf5, 0x98, 0xdc,
	0xf2, 0xc3, 0xae, 0x3d, 0xf9, 0x87, 0x1c, 0x74, 0x5d, 0x5b, 0x4a, 0x2f, 0x68, 0x36, 0x4b, 0xca,
	0xed, 0xc3, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0xcc, 0x64, 0x49, 0xc1, 0x98, 0x08, 0x00, 0x00,
}
