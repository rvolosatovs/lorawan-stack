// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/user_services.proto

package ttnpb // import "go.thethings.network/lorawan-stack/pkg/ttnpb"

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import types "github.com/gogo/protobuf/types"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import context "context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserRegistry service

type UserRegistryClient interface {
	// Register a new user. This method may be restricted by network settings.
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error)
	// Get the user with the given identifiers, selecting the fields given by the
	// field mask. The method may return more or less fields, depending on the rights
	// of the caller.
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*User, error)
	UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordRequest, opts ...grpc.CallOption) (*types.Empty, error)
	DeleteUser(ctx context.Context, in *UserIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
}

type userRegistryClient struct {
	cc *grpc.ClientConn
}

func NewUserRegistryClient(cc *grpc.ClientConn) UserRegistryClient {
	return &userRegistryClient{cc}
}

func (c *userRegistryClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserRegistry/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRegistryClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserRegistry/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRegistryClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserRegistry/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRegistryClient) UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserRegistry/UpdateUserPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRegistryClient) DeleteUser(ctx context.Context, in *UserIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserRegistry/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserRegistry service

type UserRegistryServer interface {
	// Register a new user. This method may be restricted by network settings.
	CreateUser(context.Context, *CreateUserRequest) (*User, error)
	// Get the user with the given identifiers, selecting the fields given by the
	// field mask. The method may return more or less fields, depending on the rights
	// of the caller.
	GetUser(context.Context, *GetUserRequest) (*User, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*User, error)
	UpdateUserPassword(context.Context, *UpdateUserPasswordRequest) (*types.Empty, error)
	DeleteUser(context.Context, *UserIdentifiers) (*types.Empty, error)
}

func RegisterUserRegistryServer(s *grpc.Server, srv UserRegistryServer) {
	s.RegisterService(&_UserRegistry_serviceDesc, srv)
}

func _UserRegistry_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegistryServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserRegistry/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegistryServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRegistry_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegistryServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserRegistry/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegistryServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRegistry_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegistryServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserRegistry/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegistryServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRegistry_UpdateUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegistryServer).UpdateUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserRegistry/UpdateUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegistryServer).UpdateUserPassword(ctx, req.(*UpdateUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRegistry_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegistryServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserRegistry/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegistryServer).DeleteUser(ctx, req.(*UserIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.UserRegistry",
	HandlerType: (*UserRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserRegistry_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserRegistry_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserRegistry_UpdateUser_Handler,
		},
		{
			MethodName: "UpdateUserPassword",
			Handler:    _UserRegistry_UpdateUserPassword_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserRegistry_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/user_services.proto",
}

// Client API for UserAccess service

type UserAccessClient interface {
	ListUserRights(ctx context.Context, in *UserIdentifiers, opts ...grpc.CallOption) (*Rights, error)
	GenerateUserAPIKey(ctx context.Context, in *SetUserAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error)
	ListUserAPIKeys(ctx context.Context, in *UserIdentifiers, opts ...grpc.CallOption) (*APIKeys, error)
	// Set the rights of an existing user API key. To generate an API key,
	// the GenerateUserAPIKey should be used. To delete an API key, set it
	// without any rights.
	SetUserAPIKey(ctx context.Context, in *SetUserAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error)
}

type userAccessClient struct {
	cc *grpc.ClientConn
}

func NewUserAccessClient(cc *grpc.ClientConn) UserAccessClient {
	return &userAccessClient{cc}
}

func (c *userAccessClient) ListUserRights(ctx context.Context, in *UserIdentifiers, opts ...grpc.CallOption) (*Rights, error) {
	out := new(Rights)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserAccess/ListUserRights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccessClient) GenerateUserAPIKey(ctx context.Context, in *SetUserAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error) {
	out := new(APIKey)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserAccess/GenerateUserAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccessClient) ListUserAPIKeys(ctx context.Context, in *UserIdentifiers, opts ...grpc.CallOption) (*APIKeys, error) {
	out := new(APIKeys)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserAccess/ListUserAPIKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccessClient) SetUserAPIKey(ctx context.Context, in *SetUserAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error) {
	out := new(APIKey)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserAccess/SetUserAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserAccess service

type UserAccessServer interface {
	ListUserRights(context.Context, *UserIdentifiers) (*Rights, error)
	GenerateUserAPIKey(context.Context, *SetUserAPIKeyRequest) (*APIKey, error)
	ListUserAPIKeys(context.Context, *UserIdentifiers) (*APIKeys, error)
	// Set the rights of an existing user API key. To generate an API key,
	// the GenerateUserAPIKey should be used. To delete an API key, set it
	// without any rights.
	SetUserAPIKey(context.Context, *SetUserAPIKeyRequest) (*APIKey, error)
}

func RegisterUserAccessServer(s *grpc.Server, srv UserAccessServer) {
	s.RegisterService(&_UserAccess_serviceDesc, srv)
}

func _UserAccess_ListUserRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccessServer).ListUserRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserAccess/ListUserRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccessServer).ListUserRights(ctx, req.(*UserIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccess_GenerateUserAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccessServer).GenerateUserAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserAccess/GenerateUserAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccessServer).GenerateUserAPIKey(ctx, req.(*SetUserAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccess_ListUserAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccessServer).ListUserAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserAccess/ListUserAPIKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccessServer).ListUserAPIKeys(ctx, req.(*UserIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccess_SetUserAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccessServer).SetUserAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserAccess/SetUserAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccessServer).SetUserAPIKey(ctx, req.(*SetUserAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserAccess_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.UserAccess",
	HandlerType: (*UserAccessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUserRights",
			Handler:    _UserAccess_ListUserRights_Handler,
		},
		{
			MethodName: "GenerateUserAPIKey",
			Handler:    _UserAccess_GenerateUserAPIKey_Handler,
		},
		{
			MethodName: "ListUserAPIKeys",
			Handler:    _UserAccess_ListUserAPIKeys_Handler,
		},
		{
			MethodName: "SetUserAPIKey",
			Handler:    _UserAccess_SetUserAPIKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/user_services.proto",
}

// Client API for UserInvitationRegistry service

type UserInvitationRegistryClient interface {
	SendInvitation(ctx context.Context, in *SendInvitationRequest, opts ...grpc.CallOption) (*types.Empty, error)
	ListInvitations(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*Invitations, error)
	DeleteInvitation(ctx context.Context, in *DeleteInvitationRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type userInvitationRegistryClient struct {
	cc *grpc.ClientConn
}

func NewUserInvitationRegistryClient(cc *grpc.ClientConn) UserInvitationRegistryClient {
	return &userInvitationRegistryClient{cc}
}

func (c *userInvitationRegistryClient) SendInvitation(ctx context.Context, in *SendInvitationRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserInvitationRegistry/SendInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInvitationRegistryClient) ListInvitations(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*Invitations, error) {
	out := new(Invitations)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserInvitationRegistry/ListInvitations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInvitationRegistryClient) DeleteInvitation(ctx context.Context, in *DeleteInvitationRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserInvitationRegistry/DeleteInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserInvitationRegistry service

type UserInvitationRegistryServer interface {
	SendInvitation(context.Context, *SendInvitationRequest) (*types.Empty, error)
	ListInvitations(context.Context, *types.Empty) (*Invitations, error)
	DeleteInvitation(context.Context, *DeleteInvitationRequest) (*types.Empty, error)
}

func RegisterUserInvitationRegistryServer(s *grpc.Server, srv UserInvitationRegistryServer) {
	s.RegisterService(&_UserInvitationRegistry_serviceDesc, srv)
}

func _UserInvitationRegistry_SendInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInvitationRegistryServer).SendInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserInvitationRegistry/SendInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInvitationRegistryServer).SendInvitation(ctx, req.(*SendInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInvitationRegistry_ListInvitations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInvitationRegistryServer).ListInvitations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserInvitationRegistry/ListInvitations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInvitationRegistryServer).ListInvitations(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInvitationRegistry_DeleteInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInvitationRegistryServer).DeleteInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserInvitationRegistry/DeleteInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInvitationRegistryServer).DeleteInvitation(ctx, req.(*DeleteInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserInvitationRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.UserInvitationRegistry",
	HandlerType: (*UserInvitationRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendInvitation",
			Handler:    _UserInvitationRegistry_SendInvitation_Handler,
		},
		{
			MethodName: "ListInvitations",
			Handler:    _UserInvitationRegistry_ListInvitations_Handler,
		},
		{
			MethodName: "DeleteInvitation",
			Handler:    _UserInvitationRegistry_DeleteInvitation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/user_services.proto",
}

func init() {
	proto.RegisterFile("lorawan-stack/api/user_services.proto", fileDescriptor_user_services_49c0fc48e3363427)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/user_services.proto", fileDescriptor_user_services_49c0fc48e3363427)
}

var fileDescriptor_user_services_49c0fc48e3363427 = []byte{
	// 721 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x95, 0x3f, 0x48, 0x1c, 0x4f,
	0x14, 0xc7, 0x67, 0xfc, 0xfd, 0x30, 0x30, 0x31, 0x17, 0x1d, 0x44, 0xe3, 0x2a, 0x4f, 0xdc, 0x28,
	0x12, 0xf1, 0x76, 0xe1, 0xec, 0xd2, 0x99, 0x3f, 0x88, 0x24, 0x85, 0x28, 0x42, 0x08, 0x01, 0xd9,
	0xbb, 0x1b, 0xf7, 0x26, 0xa7, 0xbb, 0x9b, 0x9d, 0x39, 0xe5, 0x10, 0xc1, 0xa4, 0x08, 0x96, 0x81,
	0x34, 0x29, 0x43, 0xd2, 0x58, 0x5a, 0x5a, 0x5a, 0x0a, 0x69, 0x84, 0x34, 0x96, 0xde, 0x6e, 0x0a,
	0x4b, 0x4b, 0xcb, 0x70, 0xb3, 0xbb, 0xee, 0xdd, 0xea, 0xa9, 0x90, 0x6e, 0xd7, 0xef, 0x9b, 0xef,
	0xe7, 0x7d, 0xdf, 0x3c, 0xf7, 0xc8, 0xc4, 0x9a, 0xeb, 0x5b, 0x9b, 0x96, 0x93, 0x17, 0xd2, 0x2a,
	0x55, 0x4d, 0xcb, 0xe3, 0x66, 0x4d, 0x30, 0x7f, 0x45, 0x30, 0x7f, 0x83, 0x97, 0x98, 0x30, 0x3c,
	0xdf, 0x95, 0x2e, 0xcd, 0x49, 0xe9, 0x18, 0x71, 0xa9, 0xb1, 0x31, 0xa3, 0xe5, 0x6d, 0x2e, 0x2b,
	0xb5, 0xa2, 0x51, 0x72, 0xd7, 0x4d, 0xdb, 0xb5, 0x5d, 0x53, 0x95, 0x15, 0x6b, 0xab, 0xea, 0x4d,
	0xbd, 0xa8, 0xa7, 0xe8, 0xb8, 0x36, 0x62, 0xbb, 0xae, 0xbd, 0xc6, 0x94, 0xbd, 0xe5, 0x38, 0xae,
	0xb4, 0x24, 0x77, 0x9d, 0xd8, 0x5c, 0x1b, 0x8e, 0xd5, 0x4b, 0x0f, 0xb6, 0xee, 0xc9, 0x7a, 0x2c,
	0x3e, 0xbe, 0xda, 0x20, 0x2f, 0x33, 0x47, 0xf2, 0x55, 0xce, 0xfc, 0xc4, 0x01, 0xae, 0x16, 0xf9,
	0xdc, 0xae, 0xc8, 0x44, 0x1f, 0xb9, 0x3e, 0x65, 0xa4, 0x16, 0x7e, 0xfe, 0x4f, 0x7a, 0x96, 0x05,
	0xf3, 0x17, 0x99, 0xcd, 0x85, 0xf4, 0xeb, 0xf4, 0x0d, 0x21, 0xcf, 0x7d, 0x66, 0x49, 0xd6, 0xfc,
	0x2b, 0x1d, 0x33, 0xda, 0xc3, 0x1b, 0xa9, 0xb6, 0xc8, 0x3e, 0xd4, 0x98, 0x90, 0x5a, 0x7f, 0xb6,
	0xa4, 0x29, 0xea, 0x7d, 0x9f, 0x7e, 0xff, 0xf9, 0xda, 0x75, 0x5f, 0xef, 0x56, 0x30, 0xf1, 0x14,
	0x4f, 0xd1, 0x22, 0xb9, 0x37, 0xc7, 0xa4, 0xb2, 0x85, 0xec, 0x99, 0x58, 0xb8, 0xd9, 0x73, 0x4c,
	0x79, 0x0e, 0xd3, 0xa1, 0xc8, 0xd3, 0xdc, 0x52, 0xb7, 0xc5, 0xcb, 0xc2, 0x88, 0x1f, 0xb6, 0x69,
	0x95, 0x90, 0x65, 0xaf, 0xdc, 0xb1, 0xfb, 0x54, 0xbb, 0x99, 0x34, 0xae, 0x48, 0xa0, 0xb5, 0x91,
	0x8c, 0x56, 0x52, 0x33, 0xd0, 0x67, 0x4c, 0x68, 0xea, 0xb8, 0x60, 0x09, 0xb1, 0xe9, 0xfa, 0x65,
	0xfa, 0xa4, 0x33, 0x35, 0xa9, 0x49, 0xe8, 0x03, 0x46, 0x74, 0xfd, 0x46, 0x72, 0xfd, 0xc6, 0xcb,
	0xe6, 0xf5, 0xeb, 0x79, 0xc5, 0x9f, 0xd4, 0xf4, 0x8e, 0x49, 0x4d, 0x2f, 0xb6, 0x6a, 0x36, 0xb2,
	0x42, 0xc8, 0x0b, 0xb6, 0xc6, 0xe2, 0xd4, 0xa3, 0xd7, 0x45, 0x9a, 0x4f, 0xf7, 0xa6, 0x23, 0xf5,
	0x91, 0xa2, 0xd2, 0xa9, 0xde, 0x0c, 0x75, 0xbb, 0x70, 0xfe, 0x1f, 0x21, 0x4d, 0x97, 0xd9, 0x52,
	0x89, 0x09, 0x41, 0xdf, 0x93, 0xdc, 0x6b, 0x2e, 0xa2, 0x1b, 0x53, 0xab, 0x76, 0x17, 0x66, 0xa6,
	0x20, 0x3a, 0xa8, 0x8f, 0x2a, 0xe6, 0x10, 0x1d, 0xcc, 0x32, 0xe3, 0x25, 0xa6, 0x1f, 0x31, 0xa1,
	0x73, 0xcc, 0x61, 0x7e, 0x3c, 0xc2, 0xd9, 0x85, 0xf9, 0x57, 0xac, 0x4e, 0xc7, 0xb3, 0x7e, 0x4b,
	0xd1, 0x06, 0x45, 0x72, 0x3a, 0xdf, 0x4c, 0x55, 0x24, 0x27, 0xf3, 0xd5, 0x6f, 0x98, 0xaf, 0xe5,
	0xf1, 0x7c, 0x95, 0xd5, 0xd5, 0xe6, 0x3a, 0xe4, 0x61, 0x92, 0x37, 0x32, 0xb8, 0x43, 0xe0, 0xc1,
	0xeb, 0xd1, 0xa2, 0xe3, 0x16, 0xa7, 0xc8, 0x66, 0xe6, 0x07, 0x6d, 0x79, 0xfe, 0x31, 0x6e, 0x41,
	0x21, 0xa7, 0xb5, 0xc9, 0xdb, 0xe3, 0x9a, 0x5b, 0xd1, 0x72, 0x17, 0x7e, 0x75, 0x91, 0x01, 0x95,
	0xc9, 0xd9, 0xe0, 0xd1, 0x27, 0xeb, 0xf2, 0x13, 0x51, 0x21, 0xb9, 0x25, 0xe6, 0x94, 0x53, 0x85,
	0x4e, 0x5c, 0x6d, 0xaf, 0x55, 0xbf, 0x6d, 0xdd, 0x07, 0x55, 0x7f, 0x7d, 0x7a, 0x8f, 0xc9, 0x2f,
	0xcf, 0xa8, 0xc1, 0xbf, 0x8b, 0x06, 0x9f, 0x3a, 0x09, 0xda, 0xc1, 0x43, 0x1b, 0xce, 0xb6, 0xd0,
	0x72, 0x48, 0xef, 0x57, 0x80, 0x1c, 0x6d, 0x03, 0x50, 0x4e, 0x7a, 0xa3, 0x7f, 0x9b, 0x96, 0x24,
	0x93, 0x59, 0x9b, 0x6c, 0xc5, 0x6d, 0x59, 0x62, 0xd4, 0x54, 0x1b, 0xea, 0xd9, 0x0f, 0x7c, 0xd4,
	0x00, 0x7c, 0xdc, 0x00, 0x7c, 0xd2, 0x00, 0x74, 0xda, 0x00, 0x74, 0xd6, 0x00, 0x74, 0xde, 0x00,
	0x74, 0xd1, 0x00, 0xbc, 0x13, 0x00, 0xde, 0x0d, 0x00, 0xed, 0x05, 0x80, 0xf7, 0x03, 0x40, 0x07,
	0x01, 0xa0, 0xc3, 0x00, 0xd0, 0x51, 0x00, 0xf8, 0x38, 0x00, 0x7c, 0x12, 0x00, 0x3a, 0x0d, 0x00,
	0x9f, 0x05, 0x80, 0xce, 0x03, 0xc0, 0x17, 0x01, 0xa0, 0x9d, 0x10, 0xd0, 0x6e, 0x08, 0xf8, 0x4b,
	0x08, 0xe8, 0x5b, 0x08, 0xf8, 0x7b, 0x08, 0x68, 0x2f, 0x04, 0xb4, 0x1f, 0x02, 0x3e, 0x08, 0x01,
	0x1f, 0x86, 0x80, 0xdf, 0x4e, 0xdb, 0xae, 0x21, 0x2b, 0x4c, 0x56, 0xb8, 0x63, 0x0b, 0xc3, 0x61,
	0x72, 0xd3, 0xf5, 0xab, 0x66, 0xfb, 0x0f, 0x82, 0x57, 0xb5, 0x4d, 0x29, 0x1d, 0xaf, 0x58, 0xec,
	0x56, 0x51, 0x66, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0x0a, 0x80, 0xc7, 0x46, 0x18, 0x07, 0x00,
	0x00,
}
