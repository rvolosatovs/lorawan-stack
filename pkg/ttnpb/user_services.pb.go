// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/user_services.proto

package ttnpb

import (
	context "context"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("lorawan-stack/api/user_services.proto", fileDescriptor_82df9ba9356987c4)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/user_services.proto", fileDescriptor_82df9ba9356987c4)
}

var fileDescriptor_82df9ba9356987c4 = []byte{
	// 867 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x96, 0x3d, 0x6c, 0xdb, 0x46,
	0x14, 0xc7, 0x79, 0xae, 0x2b, 0xa0, 0x17, 0xc3, 0x68, 0xae, 0x41, 0xdc, 0xd0, 0xc6, 0x0b, 0xc2,
	0x3a, 0x31, 0xaa, 0x46, 0x47, 0x54, 0x0e, 0x50, 0x20, 0x5b, 0xfa, 0x01, 0x23, 0x68, 0x87, 0x20,
	0x1f, 0x4b, 0x0b, 0x54, 0xa0, 0xa4, 0x33, 0x75, 0x90, 0x4d, 0xb2, 0xbc, 0x93, 0x0d, 0xd6, 0x48,
	0x90, 0x66, 0x0a, 0xd0, 0xa5, 0x40, 0x0b, 0xb4, 0x63, 0xd1, 0x29, 0xdd, 0x32, 0x66, 0xf4, 0x98,
	0x31, 0x40, 0x97, 0x8c, 0x11, 0xd9, 0x21, 0x63, 0xc6, 0x4c, 0x45, 0xc1, 0x3b, 0x92, 0xb2, 0x28,
	0xd1, 0xe2, 0x46, 0xdd, 0xfb, 0xf3, 0xfd, 0xfe, 0xef, 0xdd, 0x7b, 0x84, 0xf0, 0xe5, 0x3d, 0x3f,
	0x74, 0x0e, 0x1d, 0xaf, 0x25, 0xa4, 0xd3, 0x1b, 0xda, 0x4e, 0xc0, 0xed, 0x91, 0x60, 0x61, 0x47,
	0xb0, 0xf0, 0x80, 0xf7, 0x98, 0xa0, 0x41, 0xe8, 0x4b, 0x9f, 0xac, 0x4a, 0xe9, 0xd1, 0x4c, 0x4a,
	0x0f, 0xb6, 0xcd, 0x96, 0xcb, 0xe5, 0x60, 0xd4, 0xa5, 0x3d, 0x7f, 0xdf, 0x76, 0x7d, 0xd7, 0xb7,
	0x95, 0xac, 0x3b, 0xda, 0x55, 0xbf, 0xd4, 0x0f, 0xf5, 0xa4, 0x5f, 0x37, 0x37, 0x5c, 0xdf, 0x77,
	0xf7, 0x98, 0x4a, 0xef, 0x78, 0x9e, 0x2f, 0x1d, 0xc9, 0x7d, 0x2f, 0x4b, 0x6e, 0xae, 0x67, 0xd1,
	0x22, 0x07, 0xdb, 0x0f, 0x64, 0x94, 0x05, 0x3f, 0x9a, 0x35, 0xc8, 0xfb, 0xcc, 0x93, 0x7c, 0x97,
	0xb3, 0x30, 0xcf, 0x00, 0xb3, 0xa2, 0x90, 0xbb, 0x03, 0x99, 0xc7, 0x37, 0xe6, 0x57, 0xa9, 0xa3,
	0xed, 0xbf, 0xdf, 0xc5, 0x2b, 0xf7, 0x04, 0x0b, 0x6f, 0x33, 0x97, 0x0b, 0x19, 0x46, 0xe4, 0x2e,
	0x6e, 0x7c, 0x11, 0x32, 0x47, 0x32, 0x72, 0x89, 0x4e, 0x17, 0x4e, 0xf5, 0xb9, 0x56, 0xff, 0x30,
	0x62, 0x42, 0x9a, 0xe7, 0xca, 0x92, 0x34, 0x68, 0x9d, 0x7d, 0xf4, 0xcf, 0xbf, 0xbf, 0x2e, 0x9d,
	0xb1, 0x1a, 0x0a, 0x24, 0xae, 0xa3, 0x26, 0xf9, 0x1e, 0xbf, 0xb3, 0xc3, 0x24, 0x81, 0xb2, 0x7e,
	0x87, 0xc9, 0xc5, 0xf9, 0x2e, 0xa9, 0x7c, 0xeb, 0xe4, 0x82, 0xce, 0x67, 0x1f, 0xa9, 0x5b, 0xe2,
	0x7d, 0x41, 0xb3, 0x87, 0xfb, 0xc4, 0xc5, 0x8d, 0x7b, 0x41, 0x7f, 0xae, 0x6b, 0x7d, 0xbe, 0x98,
	0xb2, 0xa9, 0x28, 0x60, 0x4e, 0x51, 0xe8, 0x49, 0x4a, 0x5a, 0xc8, 0xef, 0x08, 0xaf, 0xe9, 0x3e,
	0xdc, 0x65, 0xfb, 0x81, 0x1f, 0x3a, 0x61, 0x74, 0xcb, 0x11, 0xe2, 0xd0, 0x0f, 0xfb, 0x84, 0xce,
	0x6f, 0xd8, 0x8c, 0x30, 0xf7, 0x71, 0x9e, 0xea, 0xcb, 0xa7, 0xf9, 0xe5, 0xd3, 0xaf, 0xd2, 0xcb,
	0xb7, 0xae, 0x29, 0x27, 0xd4, 0xba, 0x5a, 0x59, 0xaf, 0x2d, 0xf3, 0x9c, 0x9d, 0x20, 0xa7, 0x3f,
	0x42, 0x78, 0x55, 0xd7, 0x5a, 0x18, 0xfa, 0xb8, 0xba, 0x17, 0x75, 0xbd, 0xb4, 0x94, 0x97, 0x2d,
	0xd3, 0xaa, 0xf6, 0x92, 0x3b, 0x48, 0xdb, 0xf3, 0x1d, 0x6e, 0x7c, 0xc9, 0xf6, 0x98, 0x64, 0xe4,
	0xe2, 0xbc, 0x26, 0xdf, 0x9c, 0x4c, 0x6f, 0x25, 0xf1, 0x43, 0x45, 0x24, 0xcd, 0xf7, 0x4b, 0xc4,
	0xfb, 0xed, 0xff, 0x96, 0x31, 0x4e, 0xb3, 0xdc, 0xe8, 0xf5, 0x98, 0x10, 0x64, 0x17, 0xe3, 0x6f,
	0xb8, 0x90, 0xb7, 0xd5, 0xb0, 0xd7, 0xe1, 0x95, 0x04, 0xfa, 0x45, 0xeb, 0xa2, 0xe2, 0x5d, 0x20,
	0x6b, 0x65, 0x5e, 0xb6, 0x46, 0xe4, 0x01, 0x5e, 0xd1, 0x17, 0x79, 0xe3, 0xd6, 0xcd, 0xaf, 0x59,
	0x44, 0xb6, 0xaa, 0xf7, 0x42, 0x2b, 0x26, 0x3d, 0x2d, 0x09, 0x75, 0x38, 0xef, 0xa9, 0x75, 0x4a,
	0x4f, 0x9d, 0x80, 0xb7, 0x86, 0x2c, 0x52, 0xbb, 0xf3, 0x23, 0x3e, 0x93, 0xd6, 0xa9, 0x5f, 0x16,
	0xe4, 0x4a, 0x39, 0x6b, 0x1a, 0x9c, 0xc0, 0x45, 0x4e, 0x5f, 0x9b, 0x4f, 0x17, 0x56, 0x53, 0xe1,
	0x37, 0x49, 0x0d, 0x3c, 0x79, 0x80, 0xdf, 0xdb, 0x61, 0x19, 0x9a, 0x6c, 0x56, 0x6c, 0x6f, 0xbd,
	0xaa, 0xb7, 0x15, 0xb6, 0x45, 0x3e, 0x59, 0x8c, 0xb5, 0x8f, 0x86, 0x2c, 0x52, 0x7b, 0xfd, 0x33,
	0xc2, 0x2b, 0x7a, 0x68, 0xab, 0x9a, 0x3f, 0x19, 0xe9, 0x7a, 0x36, 0xae, 0x2b, 0x1b, 0xd7, 0x4c,
	0xbb, 0x8e, 0x0d, 0x27, 0xe0, 0x9d, 0x21, 0x8b, 0xa8, 0x5e, 0xfe, 0xf6, 0xf1, 0x12, 0x3e, 0xaf,
	0xc6, 0xca, 0x3b, 0xe0, 0xfa, 0x33, 0x5e, 0x7c, 0x36, 0xbb, 0x78, 0xf9, 0x0e, 0xf3, 0xfa, 0xe4,
	0x72, 0x19, 0x9b, 0x9e, 0x9e, 0xd4, 0x6b, 0x77, 0x66, 0x59, 0x36, 0x91, 0x58, 0x6b, 0xca, 0xe1,
	0x59, 0x6b, 0xc5, 0xe6, 0xc5, 0xa1, 0x1a, 0x04, 0x07, 0x2f, 0xa7, 0x77, 0x3d, 0x7f, 0x02, 0x26,
	0x09, 0x8a, 0x09, 0x58, 0xaf, 0x86, 0x08, 0xeb, 0x9c, 0xa2, 0xac, 0x92, 0x29, 0x0a, 0xe9, 0x14,
	0xfb, 0x3b, 0xd3, 0x68, 0x7d, 0x3e, 0x5b, 0x4a, 0xd5, 0x1e, 0x67, 0x80, 0xe6, 0x14, 0xa0, 0xfd,
	0xdb, 0x12, 0xfe, 0x20, 0x6d, 0xe1, 0x1d, 0x26, 0xc4, 0xc9, 0xfe, 0x45, 0x59, 0x6d, 0x5b, 0x55,
	0xd3, 0x9d, 0xbd, 0x50, 0x14, 0xb7, 0x31, 0x6f, 0xdf, 0x73, 0x51, 0x9d, 0x19, 0x17, 0x99, 0x96,
	0xfc, 0x84, 0x8a, 0xa2, 0xaf, 0x9c, 0x92, 0xb4, 0xce, 0xb7, 0xeb, 0x33, 0x85, 0xfd, 0xb4, 0x69,
	0x2f, 0xc6, 0xda, 0x47, 0xd9, 0x53, 0x7a, 0xfa, 0xf9, 0x5f, 0xe8, 0xf9, 0x18, 0xd0, 0x8b, 0x31,
	0xa0, 0x97, 0x63, 0x30, 0x5e, 0x8d, 0xc1, 0x78, 0x3d, 0x06, 0xe3, 0xcd, 0x18, 0x8c, 0xb7, 0x63,
	0x40, 0x0f, 0x63, 0x40, 0x8f, 0x63, 0x30, 0x9e, 0xc4, 0x80, 0x9e, 0xc6, 0x60, 0x3c, 0x8b, 0xc1,
	0x38, 0x8e, 0xc1, 0x78, 0x1e, 0x03, 0x7a, 0x11, 0x03, 0x7a, 0x19, 0x83, 0xf1, 0x2a, 0x06, 0xf4,
	0x3a, 0x06, 0xe3, 0x4d, 0x0c, 0xe8, 0x6d, 0x0c, 0xc6, 0xc3, 0x04, 0x8c, 0xc7, 0x09, 0xa0, 0x5f,
	0x12, 0x30, 0xfe, 0x48, 0x00, 0xfd, 0x99, 0x80, 0xf1, 0x24, 0x01, 0xe3, 0x69, 0x02, 0xe8, 0x59,
	0x02, 0xe8, 0x38, 0x01, 0xf4, 0xed, 0x55, 0xd7, 0xa7, 0x72, 0xc0, 0xe4, 0x80, 0x7b, 0xae, 0xa0,
	0x1e, 0x93, 0x87, 0x7e, 0x38, 0xb4, 0xa7, 0xff, 0x30, 0x04, 0x43, 0xd7, 0x96, 0xd2, 0x0b, 0xba,
	0xdd, 0x86, 0xaa, 0x76, 0xfb, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x7f, 0xf1, 0x68, 0x38,
	0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserRegistryClient is the client API for UserRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserRegistryClient interface {
	// Register a new user. This method may be restricted by network settings.
	Create(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error)
	// Get the user with the given identifiers, selecting the fields given by the
	// field mask. The method may return more or less fields, depending on the rights
	// of the caller.
	Get(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error)
	Update(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*User, error)
	// Create a temporary password that can be used for updating a forgotten password.
	// The generated password is sent to the user's email address.
	CreateTemporaryPassword(ctx context.Context, in *CreateTemporaryPasswordRequest, opts ...grpc.CallOption) (*types.Empty, error)
	UpdatePassword(ctx context.Context, in *UpdateUserPasswordRequest, opts ...grpc.CallOption) (*types.Empty, error)
	Delete(ctx context.Context, in *UserIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
}

type userRegistryClient struct {
	cc *grpc.ClientConn
}

func NewUserRegistryClient(cc *grpc.ClientConn) UserRegistryClient {
	return &userRegistryClient{cc}
}

func (c *userRegistryClient) Create(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserRegistry/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRegistryClient) Get(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserRegistry/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRegistryClient) Update(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserRegistry/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRegistryClient) CreateTemporaryPassword(ctx context.Context, in *CreateTemporaryPasswordRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserRegistry/CreateTemporaryPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRegistryClient) UpdatePassword(ctx context.Context, in *UpdateUserPasswordRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserRegistry/UpdatePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRegistryClient) Delete(ctx context.Context, in *UserIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserRegistry/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserRegistryServer is the server API for UserRegistry service.
type UserRegistryServer interface {
	// Register a new user. This method may be restricted by network settings.
	Create(context.Context, *CreateUserRequest) (*User, error)
	// Get the user with the given identifiers, selecting the fields given by the
	// field mask. The method may return more or less fields, depending on the rights
	// of the caller.
	Get(context.Context, *GetUserRequest) (*User, error)
	Update(context.Context, *UpdateUserRequest) (*User, error)
	// Create a temporary password that can be used for updating a forgotten password.
	// The generated password is sent to the user's email address.
	CreateTemporaryPassword(context.Context, *CreateTemporaryPasswordRequest) (*types.Empty, error)
	UpdatePassword(context.Context, *UpdateUserPasswordRequest) (*types.Empty, error)
	Delete(context.Context, *UserIdentifiers) (*types.Empty, error)
}

// UnimplementedUserRegistryServer can be embedded to have forward compatible implementations.
type UnimplementedUserRegistryServer struct {
}

func (*UnimplementedUserRegistryServer) Create(ctx context.Context, req *CreateUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedUserRegistryServer) Get(ctx context.Context, req *GetUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedUserRegistryServer) Update(ctx context.Context, req *UpdateUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedUserRegistryServer) CreateTemporaryPassword(ctx context.Context, req *CreateTemporaryPasswordRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemporaryPassword not implemented")
}
func (*UnimplementedUserRegistryServer) UpdatePassword(ctx context.Context, req *UpdateUserPasswordRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (*UnimplementedUserRegistryServer) Delete(ctx context.Context, req *UserIdentifiers) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterUserRegistryServer(s *grpc.Server, srv UserRegistryServer) {
	s.RegisterService(&_UserRegistry_serviceDesc, srv)
}

func _UserRegistry_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegistryServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserRegistry/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegistryServer).Create(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRegistry_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegistryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserRegistry/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegistryServer).Get(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRegistry_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegistryServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserRegistry/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegistryServer).Update(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRegistry_CreateTemporaryPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTemporaryPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegistryServer).CreateTemporaryPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserRegistry/CreateTemporaryPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegistryServer).CreateTemporaryPassword(ctx, req.(*CreateTemporaryPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRegistry_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegistryServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserRegistry/UpdatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegistryServer).UpdatePassword(ctx, req.(*UpdateUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRegistry_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegistryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserRegistry/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegistryServer).Delete(ctx, req.(*UserIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.UserRegistry",
	HandlerType: (*UserRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _UserRegistry_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _UserRegistry_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserRegistry_Update_Handler,
		},
		{
			MethodName: "CreateTemporaryPassword",
			Handler:    _UserRegistry_CreateTemporaryPassword_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _UserRegistry_UpdatePassword_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserRegistry_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/user_services.proto",
}

// UserAccessClient is the client API for UserAccess service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserAccessClient interface {
	ListRights(ctx context.Context, in *UserIdentifiers, opts ...grpc.CallOption) (*Rights, error)
	CreateAPIKey(ctx context.Context, in *CreateUserAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error)
	ListAPIKeys(ctx context.Context, in *ListUserAPIKeysRequest, opts ...grpc.CallOption) (*APIKeys, error)
	GetAPIKey(ctx context.Context, in *GetUserAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error)
	// Update the rights of an existing user API key. To generate an API key,
	// the CreateAPIKey should be used. To delete an API key, update it
	// with zero rights. It is required for the caller to have all assigned or/and removed rights.
	UpdateAPIKey(ctx context.Context, in *UpdateUserAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error)
}

type userAccessClient struct {
	cc *grpc.ClientConn
}

func NewUserAccessClient(cc *grpc.ClientConn) UserAccessClient {
	return &userAccessClient{cc}
}

func (c *userAccessClient) ListRights(ctx context.Context, in *UserIdentifiers, opts ...grpc.CallOption) (*Rights, error) {
	out := new(Rights)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserAccess/ListRights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccessClient) CreateAPIKey(ctx context.Context, in *CreateUserAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error) {
	out := new(APIKey)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserAccess/CreateAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccessClient) ListAPIKeys(ctx context.Context, in *ListUserAPIKeysRequest, opts ...grpc.CallOption) (*APIKeys, error) {
	out := new(APIKeys)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserAccess/ListAPIKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccessClient) GetAPIKey(ctx context.Context, in *GetUserAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error) {
	out := new(APIKey)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserAccess/GetAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccessClient) UpdateAPIKey(ctx context.Context, in *UpdateUserAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error) {
	out := new(APIKey)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserAccess/UpdateAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAccessServer is the server API for UserAccess service.
type UserAccessServer interface {
	ListRights(context.Context, *UserIdentifiers) (*Rights, error)
	CreateAPIKey(context.Context, *CreateUserAPIKeyRequest) (*APIKey, error)
	ListAPIKeys(context.Context, *ListUserAPIKeysRequest) (*APIKeys, error)
	GetAPIKey(context.Context, *GetUserAPIKeyRequest) (*APIKey, error)
	// Update the rights of an existing user API key. To generate an API key,
	// the CreateAPIKey should be used. To delete an API key, update it
	// with zero rights. It is required for the caller to have all assigned or/and removed rights.
	UpdateAPIKey(context.Context, *UpdateUserAPIKeyRequest) (*APIKey, error)
}

// UnimplementedUserAccessServer can be embedded to have forward compatible implementations.
type UnimplementedUserAccessServer struct {
}

func (*UnimplementedUserAccessServer) ListRights(ctx context.Context, req *UserIdentifiers) (*Rights, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRights not implemented")
}
func (*UnimplementedUserAccessServer) CreateAPIKey(ctx context.Context, req *CreateUserAPIKeyRequest) (*APIKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAPIKey not implemented")
}
func (*UnimplementedUserAccessServer) ListAPIKeys(ctx context.Context, req *ListUserAPIKeysRequest) (*APIKeys, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAPIKeys not implemented")
}
func (*UnimplementedUserAccessServer) GetAPIKey(ctx context.Context, req *GetUserAPIKeyRequest) (*APIKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIKey not implemented")
}
func (*UnimplementedUserAccessServer) UpdateAPIKey(ctx context.Context, req *UpdateUserAPIKeyRequest) (*APIKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAPIKey not implemented")
}

func RegisterUserAccessServer(s *grpc.Server, srv UserAccessServer) {
	s.RegisterService(&_UserAccess_serviceDesc, srv)
}

func _UserAccess_ListRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccessServer).ListRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserAccess/ListRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccessServer).ListRights(ctx, req.(*UserIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccess_CreateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccessServer).CreateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserAccess/CreateAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccessServer).CreateAPIKey(ctx, req.(*CreateUserAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccess_ListAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserAPIKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccessServer).ListAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserAccess/ListAPIKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccessServer).ListAPIKeys(ctx, req.(*ListUserAPIKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccess_GetAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccessServer).GetAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserAccess/GetAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccessServer).GetAPIKey(ctx, req.(*GetUserAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccess_UpdateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccessServer).UpdateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserAccess/UpdateAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccessServer).UpdateAPIKey(ctx, req.(*UpdateUserAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserAccess_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.UserAccess",
	HandlerType: (*UserAccessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRights",
			Handler:    _UserAccess_ListRights_Handler,
		},
		{
			MethodName: "CreateAPIKey",
			Handler:    _UserAccess_CreateAPIKey_Handler,
		},
		{
			MethodName: "ListAPIKeys",
			Handler:    _UserAccess_ListAPIKeys_Handler,
		},
		{
			MethodName: "GetAPIKey",
			Handler:    _UserAccess_GetAPIKey_Handler,
		},
		{
			MethodName: "UpdateAPIKey",
			Handler:    _UserAccess_UpdateAPIKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/user_services.proto",
}

// UserInvitationRegistryClient is the client API for UserInvitationRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserInvitationRegistryClient interface {
	Send(ctx context.Context, in *SendInvitationRequest, opts ...grpc.CallOption) (*Invitation, error)
	List(ctx context.Context, in *ListInvitationsRequest, opts ...grpc.CallOption) (*Invitations, error)
	Delete(ctx context.Context, in *DeleteInvitationRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type userInvitationRegistryClient struct {
	cc *grpc.ClientConn
}

func NewUserInvitationRegistryClient(cc *grpc.ClientConn) UserInvitationRegistryClient {
	return &userInvitationRegistryClient{cc}
}

func (c *userInvitationRegistryClient) Send(ctx context.Context, in *SendInvitationRequest, opts ...grpc.CallOption) (*Invitation, error) {
	out := new(Invitation)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserInvitationRegistry/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInvitationRegistryClient) List(ctx context.Context, in *ListInvitationsRequest, opts ...grpc.CallOption) (*Invitations, error) {
	out := new(Invitations)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserInvitationRegistry/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInvitationRegistryClient) Delete(ctx context.Context, in *DeleteInvitationRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserInvitationRegistry/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserInvitationRegistryServer is the server API for UserInvitationRegistry service.
type UserInvitationRegistryServer interface {
	Send(context.Context, *SendInvitationRequest) (*Invitation, error)
	List(context.Context, *ListInvitationsRequest) (*Invitations, error)
	Delete(context.Context, *DeleteInvitationRequest) (*types.Empty, error)
}

// UnimplementedUserInvitationRegistryServer can be embedded to have forward compatible implementations.
type UnimplementedUserInvitationRegistryServer struct {
}

func (*UnimplementedUserInvitationRegistryServer) Send(ctx context.Context, req *SendInvitationRequest) (*Invitation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (*UnimplementedUserInvitationRegistryServer) List(ctx context.Context, req *ListInvitationsRequest) (*Invitations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedUserInvitationRegistryServer) Delete(ctx context.Context, req *DeleteInvitationRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterUserInvitationRegistryServer(s *grpc.Server, srv UserInvitationRegistryServer) {
	s.RegisterService(&_UserInvitationRegistry_serviceDesc, srv)
}

func _UserInvitationRegistry_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInvitationRegistryServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserInvitationRegistry/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInvitationRegistryServer).Send(ctx, req.(*SendInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInvitationRegistry_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInvitationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInvitationRegistryServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserInvitationRegistry/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInvitationRegistryServer).List(ctx, req.(*ListInvitationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInvitationRegistry_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInvitationRegistryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserInvitationRegistry/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInvitationRegistryServer).Delete(ctx, req.(*DeleteInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserInvitationRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.UserInvitationRegistry",
	HandlerType: (*UserInvitationRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _UserInvitationRegistry_Send_Handler,
		},
		{
			MethodName: "List",
			Handler:    _UserInvitationRegistry_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserInvitationRegistry_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/user_services.proto",
}

// UserSessionRegistryClient is the client API for UserSessionRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserSessionRegistryClient interface {
	List(ctx context.Context, in *ListUserSessionsRequest, opts ...grpc.CallOption) (*UserSessions, error)
	Delete(ctx context.Context, in *UserSessionIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
}

type userSessionRegistryClient struct {
	cc *grpc.ClientConn
}

func NewUserSessionRegistryClient(cc *grpc.ClientConn) UserSessionRegistryClient {
	return &userSessionRegistryClient{cc}
}

func (c *userSessionRegistryClient) List(ctx context.Context, in *ListUserSessionsRequest, opts ...grpc.CallOption) (*UserSessions, error) {
	out := new(UserSessions)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserSessionRegistry/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSessionRegistryClient) Delete(ctx context.Context, in *UserSessionIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserSessionRegistry/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserSessionRegistryServer is the server API for UserSessionRegistry service.
type UserSessionRegistryServer interface {
	List(context.Context, *ListUserSessionsRequest) (*UserSessions, error)
	Delete(context.Context, *UserSessionIdentifiers) (*types.Empty, error)
}

// UnimplementedUserSessionRegistryServer can be embedded to have forward compatible implementations.
type UnimplementedUserSessionRegistryServer struct {
}

func (*UnimplementedUserSessionRegistryServer) List(ctx context.Context, req *ListUserSessionsRequest) (*UserSessions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedUserSessionRegistryServer) Delete(ctx context.Context, req *UserSessionIdentifiers) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterUserSessionRegistryServer(s *grpc.Server, srv UserSessionRegistryServer) {
	s.RegisterService(&_UserSessionRegistry_serviceDesc, srv)
}

func _UserSessionRegistry_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSessionRegistryServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserSessionRegistry/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSessionRegistryServer).List(ctx, req.(*ListUserSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSessionRegistry_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSessionIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSessionRegistryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserSessionRegistry/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSessionRegistryServer).Delete(ctx, req.(*UserSessionIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserSessionRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.UserSessionRegistry",
	HandlerType: (*UserSessionRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _UserSessionRegistry_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserSessionRegistry_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/user_services.proto",
}
