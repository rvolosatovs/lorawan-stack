// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import (
	fmt "fmt"

	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
)

var ApplicationLinkFieldPathsNested = []string{
	"allow_insecure",
	"api_key",
	"default_formatters",
	"default_formatters.down_formatter",
	"default_formatters.down_formatter_parameter",
	"default_formatters.up_formatter",
	"default_formatters.up_formatter_parameter",
	"network_server_address",
}

var ApplicationLinkFieldPathsTopLevel = []string{
	"allow_insecure",
	"api_key",
	"default_formatters",
	"network_server_address",
}

func (dst *ApplicationLink) SetFields(src *ApplicationLink, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "network_server_address":
			if len(subs) > 0 {
				return fmt.Errorf("'network_server_address' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.NetworkServerAddress = src.NetworkServerAddress
			} else {
				var zero string
				dst.NetworkServerAddress = zero
			}
		case "api_key":
			if len(subs) > 0 {
				return fmt.Errorf("'api_key' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.APIKey = src.APIKey
			} else {
				var zero string
				dst.APIKey = zero
			}
		case "default_formatters":
			if len(subs) > 0 {
				newDst := dst.DefaultFormatters
				if newDst == nil {
					newDst = &MessagePayloadFormatters{}
					dst.DefaultFormatters = newDst
				}
				var newSrc *MessagePayloadFormatters
				if src != nil {
					newSrc = src.DefaultFormatters
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.DefaultFormatters = src.DefaultFormatters
				} else {
					dst.DefaultFormatters = nil
				}
			}
		case "allow_insecure":
			if len(subs) > 0 {
				return fmt.Errorf("'allow_insecure' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.AllowInsecure = src.AllowInsecure
			} else {
				var zero bool
				dst.AllowInsecure = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var GetApplicationLinkRequestFieldPathsNested = []string{
	"application_ids",
	"application_ids.application_id",
	"field_mask",
}

var GetApplicationLinkRequestFieldPathsTopLevel = []string{
	"application_ids",
	"field_mask",
}

func (dst *GetApplicationLinkRequest) SetFields(src *GetApplicationLinkRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "application_ids":
			if len(subs) > 0 {
				newDst := &dst.ApplicationIdentifiers
				var newSrc *ApplicationIdentifiers
				if src != nil {
					newSrc = &src.ApplicationIdentifiers
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.ApplicationIdentifiers = src.ApplicationIdentifiers
				} else {
					var zero ApplicationIdentifiers
					dst.ApplicationIdentifiers = zero
				}
			}
		case "field_mask":
			if len(subs) > 0 {
				return fmt.Errorf("'field_mask' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FieldMask = src.FieldMask
			} else {
				var zero github_com_gogo_protobuf_types.FieldMask
				dst.FieldMask = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var SetApplicationLinkRequestFieldPathsNested = []string{
	"application_ids",
	"application_ids.application_id",
	"field_mask",
	"link",
	"link.allow_insecure",
	"link.api_key",
	"link.default_formatters",
	"link.default_formatters.down_formatter",
	"link.default_formatters.down_formatter_parameter",
	"link.default_formatters.up_formatter",
	"link.default_formatters.up_formatter_parameter",
	"link.network_server_address",
}

var SetApplicationLinkRequestFieldPathsTopLevel = []string{
	"application_ids",
	"field_mask",
	"link",
}

func (dst *SetApplicationLinkRequest) SetFields(src *SetApplicationLinkRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "application_ids":
			if len(subs) > 0 {
				newDst := &dst.ApplicationIdentifiers
				var newSrc *ApplicationIdentifiers
				if src != nil {
					newSrc = &src.ApplicationIdentifiers
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.ApplicationIdentifiers = src.ApplicationIdentifiers
				} else {
					var zero ApplicationIdentifiers
					dst.ApplicationIdentifiers = zero
				}
			}
		case "link":
			if len(subs) > 0 {
				newDst := &dst.ApplicationLink
				var newSrc *ApplicationLink
				if src != nil {
					newSrc = &src.ApplicationLink
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.ApplicationLink = src.ApplicationLink
				} else {
					var zero ApplicationLink
					dst.ApplicationLink = zero
				}
			}
		case "field_mask":
			if len(subs) > 0 {
				return fmt.Errorf("'field_mask' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FieldMask = src.FieldMask
			} else {
				var zero github_com_gogo_protobuf_types.FieldMask
				dst.FieldMask = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}
