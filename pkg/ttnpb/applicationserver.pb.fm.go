// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import fmt "fmt"

var _ApplicationLinkFieldPaths = [...]string{
	"allow_insecure",
	"api_key",
	"default_formatters",
	"default_formatters.down_formatter",
	"default_formatters.down_formatter_parameter",
	"default_formatters.up_formatter",
	"default_formatters.up_formatter_parameter",
	"network_server_address",
}

func (*ApplicationLink) FieldMaskPaths() []string {
	ret := make([]string, len(_ApplicationLinkFieldPaths))
	copy(ret, _ApplicationLinkFieldPaths[:])
	return ret
}

func (dst *ApplicationLink) SetFields(src *ApplicationLink, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "allow_insecure":
			dst.AllowInsecure = src.AllowInsecure
		case "api_key":
			dst.APIKey = src.APIKey
		case "default_formatters":
			dst.DefaultFormatters = src.DefaultFormatters
		case "default_formatters.down_formatter":
			if dst.DefaultFormatters == nil {
				dst.DefaultFormatters = &MessagePayloadFormatters{}
			}
			dst.DefaultFormatters.SetFields(src.DefaultFormatters, _pathsWithoutPrefix("default_formatters", paths)...)
		case "default_formatters.down_formatter_parameter":
			if dst.DefaultFormatters == nil {
				dst.DefaultFormatters = &MessagePayloadFormatters{}
			}
			dst.DefaultFormatters.SetFields(src.DefaultFormatters, _pathsWithoutPrefix("default_formatters", paths)...)
		case "default_formatters.up_formatter":
			if dst.DefaultFormatters == nil {
				dst.DefaultFormatters = &MessagePayloadFormatters{}
			}
			dst.DefaultFormatters.SetFields(src.DefaultFormatters, _pathsWithoutPrefix("default_formatters", paths)...)
		case "default_formatters.up_formatter_parameter":
			if dst.DefaultFormatters == nil {
				dst.DefaultFormatters = &MessagePayloadFormatters{}
			}
			dst.DefaultFormatters.SetFields(src.DefaultFormatters, _pathsWithoutPrefix("default_formatters", paths)...)
		case "network_server_address":
			dst.NetworkServerAddress = src.NetworkServerAddress
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _GetApplicationLinkRequestFieldPaths = [...]string{
	"application_ids",
	"application_ids.application_id",
	"field_mask",
}

func (*GetApplicationLinkRequest) FieldMaskPaths() []string {
	ret := make([]string, len(_GetApplicationLinkRequestFieldPaths))
	copy(ret, _GetApplicationLinkRequestFieldPaths[:])
	return ret
}

func (dst *GetApplicationLinkRequest) SetFields(src *GetApplicationLinkRequest, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "application_ids":
			dst.ApplicationIdentifiers = src.ApplicationIdentifiers
		case "application_ids.application_id":
			dst.ApplicationIdentifiers.SetFields(&src.ApplicationIdentifiers, _pathsWithoutPrefix("application_ids", paths)...)
		case "field_mask":
			dst.FieldMask = src.FieldMask
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _SetApplicationLinkRequestFieldPaths = [...]string{
	"application_ids",
	"application_ids.application_id",
	"field_mask",
	"link",
	"link.allow_insecure",
	"link.api_key",
	"link.default_formatters",
	"link.default_formatters.down_formatter",
	"link.default_formatters.down_formatter_parameter",
	"link.default_formatters.up_formatter",
	"link.default_formatters.up_formatter_parameter",
	"link.network_server_address",
}

func (*SetApplicationLinkRequest) FieldMaskPaths() []string {
	ret := make([]string, len(_SetApplicationLinkRequestFieldPaths))
	copy(ret, _SetApplicationLinkRequestFieldPaths[:])
	return ret
}

func (dst *SetApplicationLinkRequest) SetFields(src *SetApplicationLinkRequest, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "application_ids":
			dst.ApplicationIdentifiers = src.ApplicationIdentifiers
		case "application_ids.application_id":
			dst.ApplicationIdentifiers.SetFields(&src.ApplicationIdentifiers, _pathsWithoutPrefix("application_ids", paths)...)
		case "field_mask":
			dst.FieldMask = src.FieldMask
		case "link":
			dst.ApplicationLink = src.ApplicationLink
		case "link.allow_insecure":
			dst.ApplicationLink.SetFields(&src.ApplicationLink, _pathsWithoutPrefix("link", paths)...)
		case "link.api_key":
			dst.ApplicationLink.SetFields(&src.ApplicationLink, _pathsWithoutPrefix("link", paths)...)
		case "link.default_formatters":
			dst.ApplicationLink.SetFields(&src.ApplicationLink, _pathsWithoutPrefix("link", paths)...)
		case "link.default_formatters.down_formatter":
			dst.ApplicationLink.SetFields(&src.ApplicationLink, _pathsWithoutPrefix("link", paths)...)
		case "link.default_formatters.down_formatter_parameter":
			dst.ApplicationLink.SetFields(&src.ApplicationLink, _pathsWithoutPrefix("link", paths)...)
		case "link.default_formatters.up_formatter":
			dst.ApplicationLink.SetFields(&src.ApplicationLink, _pathsWithoutPrefix("link", paths)...)
		case "link.default_formatters.up_formatter_parameter":
			dst.ApplicationLink.SetFields(&src.ApplicationLink, _pathsWithoutPrefix("link", paths)...)
		case "link.network_server_address":
			dst.ApplicationLink.SetFields(&src.ApplicationLink, _pathsWithoutPrefix("link", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}
