// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import fmt "fmt"

var RightsFieldPathsNested = []string{
	"rights",
}

var RightsFieldPathsTopLevel = []string{
	"rights",
}

func (dst *Rights) SetFields(src *Rights, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "rights":
			if len(subs) > 0 {
				return fmt.Errorf("'rights' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Rights = src.Rights
			} else {
				dst.Rights = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var APIKeyFieldPathsNested = []string{
	"id",
	"key",
	"name",
	"rights",
}

var APIKeyFieldPathsTopLevel = []string{
	"id",
	"key",
	"name",
	"rights",
}

func (dst *APIKey) SetFields(src *APIKey, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "id":
			if len(subs) > 0 {
				return fmt.Errorf("'id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ID = src.ID
			} else {
				var zero string
				dst.ID = zero
			}
		case "key":
			if len(subs) > 0 {
				return fmt.Errorf("'key' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Key = src.Key
			} else {
				var zero string
				dst.Key = zero
			}
		case "name":
			if len(subs) > 0 {
				return fmt.Errorf("'name' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Name = src.Name
			} else {
				var zero string
				dst.Name = zero
			}
		case "rights":
			if len(subs) > 0 {
				return fmt.Errorf("'rights' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Rights = src.Rights
			} else {
				dst.Rights = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var APIKeysFieldPathsNested = []string{
	"api_keys",
}

var APIKeysFieldPathsTopLevel = []string{
	"api_keys",
}

func (dst *APIKeys) SetFields(src *APIKeys, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "api_keys":
			if len(subs) > 0 {
				return fmt.Errorf("'api_keys' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.APIKeys = src.APIKeys
			} else {
				dst.APIKeys = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var CollaboratorFieldPathsNested = []string{
	"ids",
	"ids",
	"ids.ids.organization_ids",
	"ids.ids.organization_ids.organization_id",
	"ids.ids.user_ids",
	"ids.ids.user_ids.email",
	"ids.ids.user_ids.user_id",
	"rights",
}

var CollaboratorFieldPathsTopLevel = []string{
	"ids",
	"ids",
	"rights",
}

func (dst *Collaborator) SetFields(src *Collaborator, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "ids":
			if len(subs) > 0 {
				newDst := &dst.OrganizationOrUserIdentifiers
				var newSrc *OrganizationOrUserIdentifiers
				if src != nil {
					newSrc = &src.OrganizationOrUserIdentifiers
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.OrganizationOrUserIdentifiers = src.OrganizationOrUserIdentifiers
				} else {
					var zero OrganizationOrUserIdentifiers
					dst.OrganizationOrUserIdentifiers = zero
				}
			}
		case "rights":
			if len(subs) > 0 {
				return fmt.Errorf("'rights' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Rights = src.Rights
			} else {
				dst.Rights = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var CollaboratorsFieldPathsNested = []string{
	"collaborators",
}

var CollaboratorsFieldPathsTopLevel = []string{
	"collaborators",
}

func (dst *Collaborators) SetFields(src *Collaborators, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "collaborators":
			if len(subs) > 0 {
				return fmt.Errorf("'collaborators' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Collaborators = src.Collaborators
			} else {
				dst.Collaborators = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}
