// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import fmt "fmt"

var _RightsFieldPaths = [...]string{
	"rights",
}

func (*Rights) FieldMaskPaths() []string {
	ret := make([]string, len(_RightsFieldPaths))
	copy(ret, _RightsFieldPaths[:])
	return ret
}

func (dst *Rights) SetFields(src *Rights, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "rights":
			dst.Rights = src.Rights
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _APIKeyFieldPaths = [...]string{
	"id",
	"key",
	"name",
	"rights",
}

func (*APIKey) FieldMaskPaths() []string {
	ret := make([]string, len(_APIKeyFieldPaths))
	copy(ret, _APIKeyFieldPaths[:])
	return ret
}

func (dst *APIKey) SetFields(src *APIKey, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "id":
			dst.ID = src.ID
		case "key":
			dst.Key = src.Key
		case "name":
			dst.Name = src.Name
		case "rights":
			dst.Rights = src.Rights
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _APIKeysFieldPaths = [...]string{
	"api_keys",
}

func (*APIKeys) FieldMaskPaths() []string {
	ret := make([]string, len(_APIKeysFieldPaths))
	copy(ret, _APIKeysFieldPaths[:])
	return ret
}

func (dst *APIKeys) SetFields(src *APIKeys, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "api_keys":
			dst.APIKeys = src.APIKeys
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _CollaboratorFieldPaths = [...]string{
	"ids",
	"ids.organization_ids",
	"ids.organization_ids.organization_id",
	"ids.user_ids",
	"ids.user_ids.email",
	"ids.user_ids.user_id",
	"rights",
}

func (*Collaborator) FieldMaskPaths() []string {
	ret := make([]string, len(_CollaboratorFieldPaths))
	copy(ret, _CollaboratorFieldPaths[:])
	return ret
}

func (dst *Collaborator) SetFields(src *Collaborator, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "ids":
			dst.OrganizationOrUserIdentifiers = src.OrganizationOrUserIdentifiers
		case "ids.organization_ids":
			dst.OrganizationOrUserIdentifiers.SetFields(&src.OrganizationOrUserIdentifiers, _pathsWithoutPrefix("ids", paths)...)
		case "ids.organization_ids.organization_id":
			dst.OrganizationOrUserIdentifiers.SetFields(&src.OrganizationOrUserIdentifiers, _pathsWithoutPrefix("ids", paths)...)
		case "ids.user_ids":
			dst.OrganizationOrUserIdentifiers.SetFields(&src.OrganizationOrUserIdentifiers, _pathsWithoutPrefix("ids", paths)...)
		case "ids.user_ids.email":
			dst.OrganizationOrUserIdentifiers.SetFields(&src.OrganizationOrUserIdentifiers, _pathsWithoutPrefix("ids", paths)...)
		case "ids.user_ids.user_id":
			dst.OrganizationOrUserIdentifiers.SetFields(&src.OrganizationOrUserIdentifiers, _pathsWithoutPrefix("ids", paths)...)
		case "rights":
			dst.Rights = src.Rights
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _CollaboratorsFieldPaths = [...]string{
	"collaborators",
}

func (*Collaborators) FieldMaskPaths() []string {
	ret := make([]string, len(_CollaboratorsFieldPaths))
	copy(ret, _CollaboratorsFieldPaths[:])
	return ret
}

func (dst *Collaborators) SetFields(src *Collaborators, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "collaborators":
			dst.Collaborators = src.Collaborators
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}
