// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: go.thethings.network/lorawan-stack/api/identifiers.proto

package ttnpb // import "go.thethings.network/lorawan-stack/pkg/ttnpb"

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import go_thethings_network_lorawan_stack_pkg_types "go.thethings.network/lorawan-stack/pkg/types"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// UserIdentifiers is the message that is used to identify an user.
type UserIdentifiers struct {
	// The unique and immutable user's ID.
	// This ID shares namespace with organization's IDs.
	UserID string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Unique and mutable user's email address.
	Email                string   `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserIdentifiers) Reset()      { *m = UserIdentifiers{} }
func (*UserIdentifiers) ProtoMessage() {}
func (*UserIdentifiers) Descriptor() ([]byte, []int) {
	return fileDescriptor_identifiers_3b40c4ee266ae5fa, []int{0}
}
func (m *UserIdentifiers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserIdentifiers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserIdentifiers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserIdentifiers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserIdentifiers.Merge(dst, src)
}
func (m *UserIdentifiers) XXX_Size() int {
	return m.Size()
}
func (m *UserIdentifiers) XXX_DiscardUnknown() {
	xxx_messageInfo_UserIdentifiers.DiscardUnknown(m)
}

var xxx_messageInfo_UserIdentifiers proto.InternalMessageInfo

func (m *UserIdentifiers) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *UserIdentifiers) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

// ApplicationIdentifiers is the message that is used to identify an application.
type ApplicationIdentifiers struct {
	// TTN Application ID.
	ApplicationID        string   `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplicationIdentifiers) Reset()      { *m = ApplicationIdentifiers{} }
func (*ApplicationIdentifiers) ProtoMessage() {}
func (*ApplicationIdentifiers) Descriptor() ([]byte, []int) {
	return fileDescriptor_identifiers_3b40c4ee266ae5fa, []int{1}
}
func (m *ApplicationIdentifiers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationIdentifiers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationIdentifiers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ApplicationIdentifiers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationIdentifiers.Merge(dst, src)
}
func (m *ApplicationIdentifiers) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationIdentifiers) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationIdentifiers.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationIdentifiers proto.InternalMessageInfo

func (m *ApplicationIdentifiers) GetApplicationID() string {
	if m != nil {
		return m.ApplicationID
	}
	return ""
}

// GatewayIdentifiers is the message that is used to identify a gateway.
type GatewayIdentifiers struct {
	// TTN Gateway ID.
	GatewayID string `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	// Gateway's unique and immutable EUI.
	EUI                  *go_thethings_network_lorawan_stack_pkg_types.EUI64 `protobuf:"bytes,2,opt,name=eui,proto3,customtype=go.thethings.network/lorawan-stack/pkg/types.EUI64" json:"eui,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                            `json:"-"`
	XXX_sizecache        int32                                               `json:"-"`
}

func (m *GatewayIdentifiers) Reset()      { *m = GatewayIdentifiers{} }
func (*GatewayIdentifiers) ProtoMessage() {}
func (*GatewayIdentifiers) Descriptor() ([]byte, []int) {
	return fileDescriptor_identifiers_3b40c4ee266ae5fa, []int{2}
}
func (m *GatewayIdentifiers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayIdentifiers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayIdentifiers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GatewayIdentifiers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayIdentifiers.Merge(dst, src)
}
func (m *GatewayIdentifiers) XXX_Size() int {
	return m.Size()
}
func (m *GatewayIdentifiers) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayIdentifiers.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayIdentifiers proto.InternalMessageInfo

func (m *GatewayIdentifiers) GetGatewayID() string {
	if m != nil {
		return m.GatewayID
	}
	return ""
}

// End device identifiers are carried with uplink and downlink messages.
// Unknown fields are left empty.
type EndDeviceIdentifiers struct {
	// TTN Device ID.
	DeviceID string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// TTN Application ID.
	ApplicationIdentifiers `protobuf:"bytes,2,opt,name=application_ids,json=applicationIds,embedded=application_ids" json:"application_ids"`
	// LoRaWAN DevEUI.
	DevEUI *go_thethings_network_lorawan_stack_pkg_types.EUI64 `protobuf:"bytes,4,opt,name=dev_eui,json=devEui,proto3,customtype=go.thethings.network/lorawan-stack/pkg/types.EUI64" json:"dev_eui,omitempty"`
	// LoRaWAN JoinEUI (or AppEUI for LoRaWAN 1.0 end devices).
	JoinEUI *go_thethings_network_lorawan_stack_pkg_types.EUI64 `protobuf:"bytes,5,opt,name=join_eui,json=joinEui,proto3,customtype=go.thethings.network/lorawan-stack/pkg/types.EUI64" json:"join_eui,omitempty"`
	// LoRaWAN DevAddr.
	DevAddr              *go_thethings_network_lorawan_stack_pkg_types.DevAddr `protobuf:"bytes,6,opt,name=dev_addr,json=devAddr,proto3,customtype=go.thethings.network/lorawan-stack/pkg/types.DevAddr" json:"dev_addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                              `json:"-"`
	XXX_sizecache        int32                                                 `json:"-"`
}

func (m *EndDeviceIdentifiers) Reset()      { *m = EndDeviceIdentifiers{} }
func (*EndDeviceIdentifiers) ProtoMessage() {}
func (*EndDeviceIdentifiers) Descriptor() ([]byte, []int) {
	return fileDescriptor_identifiers_3b40c4ee266ae5fa, []int{3}
}
func (m *EndDeviceIdentifiers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndDeviceIdentifiers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndDeviceIdentifiers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EndDeviceIdentifiers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndDeviceIdentifiers.Merge(dst, src)
}
func (m *EndDeviceIdentifiers) XXX_Size() int {
	return m.Size()
}
func (m *EndDeviceIdentifiers) XXX_DiscardUnknown() {
	xxx_messageInfo_EndDeviceIdentifiers.DiscardUnknown(m)
}

var xxx_messageInfo_EndDeviceIdentifiers proto.InternalMessageInfo

func (m *EndDeviceIdentifiers) GetDeviceID() string {
	if m != nil {
		return m.DeviceID
	}
	return ""
}

// ClientIdentifiers is the message that is used to identify a client.
type ClientIdentifiers struct {
	// TTN Client ID.
	ClientID             string   `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientIdentifiers) Reset()      { *m = ClientIdentifiers{} }
func (*ClientIdentifiers) ProtoMessage() {}
func (*ClientIdentifiers) Descriptor() ([]byte, []int) {
	return fileDescriptor_identifiers_3b40c4ee266ae5fa, []int{4}
}
func (m *ClientIdentifiers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientIdentifiers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientIdentifiers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClientIdentifiers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientIdentifiers.Merge(dst, src)
}
func (m *ClientIdentifiers) XXX_Size() int {
	return m.Size()
}
func (m *ClientIdentifiers) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientIdentifiers.DiscardUnknown(m)
}

var xxx_messageInfo_ClientIdentifiers proto.InternalMessageInfo

func (m *ClientIdentifiers) GetClientID() string {
	if m != nil {
		return m.ClientID
	}
	return ""
}

// OrganizationIdentifiers is the message that is used to identify an organization.
type OrganizationIdentifiers struct {
	// TTN Organization ID.
	OrganizationID       string   `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrganizationIdentifiers) Reset()      { *m = OrganizationIdentifiers{} }
func (*OrganizationIdentifiers) ProtoMessage() {}
func (*OrganizationIdentifiers) Descriptor() ([]byte, []int) {
	return fileDescriptor_identifiers_3b40c4ee266ae5fa, []int{5}
}
func (m *OrganizationIdentifiers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrganizationIdentifiers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrganizationIdentifiers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *OrganizationIdentifiers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrganizationIdentifiers.Merge(dst, src)
}
func (m *OrganizationIdentifiers) XXX_Size() int {
	return m.Size()
}
func (m *OrganizationIdentifiers) XXX_DiscardUnknown() {
	xxx_messageInfo_OrganizationIdentifiers.DiscardUnknown(m)
}

var xxx_messageInfo_OrganizationIdentifiers proto.InternalMessageInfo

func (m *OrganizationIdentifiers) GetOrganizationID() string {
	if m != nil {
		return m.OrganizationID
	}
	return ""
}

// OrganizationOrUserIdentifiers is the message used in collaborationship messages
// used to identify the persona entity.
type OrganizationOrUserIdentifiers struct {
	// Types that are valid to be assigned to ID:
	//	*OrganizationOrUserIdentifiers_UserID
	//	*OrganizationOrUserIdentifiers_OrganizationID
	ID                   isOrganizationOrUserIdentifiers_ID `protobuf_oneof:"ID"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *OrganizationOrUserIdentifiers) Reset()      { *m = OrganizationOrUserIdentifiers{} }
func (*OrganizationOrUserIdentifiers) ProtoMessage() {}
func (*OrganizationOrUserIdentifiers) Descriptor() ([]byte, []int) {
	return fileDescriptor_identifiers_3b40c4ee266ae5fa, []int{6}
}
func (m *OrganizationOrUserIdentifiers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrganizationOrUserIdentifiers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrganizationOrUserIdentifiers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *OrganizationOrUserIdentifiers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrganizationOrUserIdentifiers.Merge(dst, src)
}
func (m *OrganizationOrUserIdentifiers) XXX_Size() int {
	return m.Size()
}
func (m *OrganizationOrUserIdentifiers) XXX_DiscardUnknown() {
	xxx_messageInfo_OrganizationOrUserIdentifiers.DiscardUnknown(m)
}

var xxx_messageInfo_OrganizationOrUserIdentifiers proto.InternalMessageInfo

type isOrganizationOrUserIdentifiers_ID interface {
	isOrganizationOrUserIdentifiers_ID()
	Equal(interface{}) bool
	VerboseEqual(interface{}) error
	MarshalTo([]byte) (int, error)
	Size() int
}

type OrganizationOrUserIdentifiers_UserID struct {
	UserID *UserIdentifiers `protobuf:"bytes,1,opt,name=user_id,json=userId,oneof"`
}
type OrganizationOrUserIdentifiers_OrganizationID struct {
	OrganizationID *OrganizationIdentifiers `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,oneof"`
}

func (*OrganizationOrUserIdentifiers_UserID) isOrganizationOrUserIdentifiers_ID()         {}
func (*OrganizationOrUserIdentifiers_OrganizationID) isOrganizationOrUserIdentifiers_ID() {}

func (m *OrganizationOrUserIdentifiers) GetID() isOrganizationOrUserIdentifiers_ID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *OrganizationOrUserIdentifiers) GetUserID() *UserIdentifiers {
	if x, ok := m.GetID().(*OrganizationOrUserIdentifiers_UserID); ok {
		return x.UserID
	}
	return nil
}

func (m *OrganizationOrUserIdentifiers) GetOrganizationID() *OrganizationIdentifiers {
	if x, ok := m.GetID().(*OrganizationOrUserIdentifiers_OrganizationID); ok {
		return x.OrganizationID
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*OrganizationOrUserIdentifiers) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _OrganizationOrUserIdentifiers_OneofMarshaler, _OrganizationOrUserIdentifiers_OneofUnmarshaler, _OrganizationOrUserIdentifiers_OneofSizer, []interface{}{
		(*OrganizationOrUserIdentifiers_UserID)(nil),
		(*OrganizationOrUserIdentifiers_OrganizationID)(nil),
	}
}

func _OrganizationOrUserIdentifiers_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*OrganizationOrUserIdentifiers)
	// ID
	switch x := m.ID.(type) {
	case *OrganizationOrUserIdentifiers_UserID:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UserID); err != nil {
			return err
		}
	case *OrganizationOrUserIdentifiers_OrganizationID:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OrganizationID); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("OrganizationOrUserIdentifiers.ID has unexpected type %T", x)
	}
	return nil
}

func _OrganizationOrUserIdentifiers_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*OrganizationOrUserIdentifiers)
	switch tag {
	case 1: // ID.user_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UserIdentifiers)
		err := b.DecodeMessage(msg)
		m.ID = &OrganizationOrUserIdentifiers_UserID{msg}
		return true, err
	case 2: // ID.organization_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OrganizationIdentifiers)
		err := b.DecodeMessage(msg)
		m.ID = &OrganizationOrUserIdentifiers_OrganizationID{msg}
		return true, err
	default:
		return false, nil
	}
}

func _OrganizationOrUserIdentifiers_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*OrganizationOrUserIdentifiers)
	// ID
	switch x := m.ID.(type) {
	case *OrganizationOrUserIdentifiers_UserID:
		s := proto.Size(x.UserID)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OrganizationOrUserIdentifiers_OrganizationID:
		s := proto.Size(x.OrganizationID)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// CombinedIdentifiers combines the identifiers of multiple entities.
// The main purpose of this message is its use in events.
type CombinedIdentifiers struct {
	ApplicationIDs       []*ApplicationIdentifiers  `protobuf:"bytes,1,rep,name=application_ids,json=applicationIds" json:"application_ids,omitempty"`
	ClientIDs            []*ClientIdentifiers       `protobuf:"bytes,2,rep,name=client_ids,json=clientIds" json:"client_ids,omitempty"`
	DeviceIDs            []*EndDeviceIdentifiers    `protobuf:"bytes,3,rep,name=device_ids,json=deviceIds" json:"device_ids,omitempty"`
	GatewayIDs           []*GatewayIdentifiers      `protobuf:"bytes,4,rep,name=gateway_ids,json=gatewayIds" json:"gateway_ids,omitempty"`
	OrganizationIDs      []*OrganizationIdentifiers `protobuf:"bytes,5,rep,name=organization_ids,json=organizationIds" json:"organization_ids,omitempty"`
	UserIDs              []*UserIdentifiers         `protobuf:"bytes,6,rep,name=user_ids,json=userIds" json:"user_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *CombinedIdentifiers) Reset()      { *m = CombinedIdentifiers{} }
func (*CombinedIdentifiers) ProtoMessage() {}
func (*CombinedIdentifiers) Descriptor() ([]byte, []int) {
	return fileDescriptor_identifiers_3b40c4ee266ae5fa, []int{7}
}
func (m *CombinedIdentifiers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CombinedIdentifiers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CombinedIdentifiers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CombinedIdentifiers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CombinedIdentifiers.Merge(dst, src)
}
func (m *CombinedIdentifiers) XXX_Size() int {
	return m.Size()
}
func (m *CombinedIdentifiers) XXX_DiscardUnknown() {
	xxx_messageInfo_CombinedIdentifiers.DiscardUnknown(m)
}

var xxx_messageInfo_CombinedIdentifiers proto.InternalMessageInfo

func (m *CombinedIdentifiers) GetApplicationIDs() []*ApplicationIdentifiers {
	if m != nil {
		return m.ApplicationIDs
	}
	return nil
}

func (m *CombinedIdentifiers) GetClientIDs() []*ClientIdentifiers {
	if m != nil {
		return m.ClientIDs
	}
	return nil
}

func (m *CombinedIdentifiers) GetDeviceIDs() []*EndDeviceIdentifiers {
	if m != nil {
		return m.DeviceIDs
	}
	return nil
}

func (m *CombinedIdentifiers) GetGatewayIDs() []*GatewayIdentifiers {
	if m != nil {
		return m.GatewayIDs
	}
	return nil
}

func (m *CombinedIdentifiers) GetOrganizationIDs() []*OrganizationIdentifiers {
	if m != nil {
		return m.OrganizationIDs
	}
	return nil
}

func (m *CombinedIdentifiers) GetUserIDs() []*UserIdentifiers {
	if m != nil {
		return m.UserIDs
	}
	return nil
}

func init() {
	proto.RegisterType((*UserIdentifiers)(nil), "ttn.lorawan.v3.UserIdentifiers")
	golang_proto.RegisterType((*UserIdentifiers)(nil), "ttn.lorawan.v3.UserIdentifiers")
	proto.RegisterType((*ApplicationIdentifiers)(nil), "ttn.lorawan.v3.ApplicationIdentifiers")
	golang_proto.RegisterType((*ApplicationIdentifiers)(nil), "ttn.lorawan.v3.ApplicationIdentifiers")
	proto.RegisterType((*GatewayIdentifiers)(nil), "ttn.lorawan.v3.GatewayIdentifiers")
	golang_proto.RegisterType((*GatewayIdentifiers)(nil), "ttn.lorawan.v3.GatewayIdentifiers")
	proto.RegisterType((*EndDeviceIdentifiers)(nil), "ttn.lorawan.v3.EndDeviceIdentifiers")
	golang_proto.RegisterType((*EndDeviceIdentifiers)(nil), "ttn.lorawan.v3.EndDeviceIdentifiers")
	proto.RegisterType((*ClientIdentifiers)(nil), "ttn.lorawan.v3.ClientIdentifiers")
	golang_proto.RegisterType((*ClientIdentifiers)(nil), "ttn.lorawan.v3.ClientIdentifiers")
	proto.RegisterType((*OrganizationIdentifiers)(nil), "ttn.lorawan.v3.OrganizationIdentifiers")
	golang_proto.RegisterType((*OrganizationIdentifiers)(nil), "ttn.lorawan.v3.OrganizationIdentifiers")
	proto.RegisterType((*OrganizationOrUserIdentifiers)(nil), "ttn.lorawan.v3.OrganizationOrUserIdentifiers")
	golang_proto.RegisterType((*OrganizationOrUserIdentifiers)(nil), "ttn.lorawan.v3.OrganizationOrUserIdentifiers")
	proto.RegisterType((*CombinedIdentifiers)(nil), "ttn.lorawan.v3.CombinedIdentifiers")
	golang_proto.RegisterType((*CombinedIdentifiers)(nil), "ttn.lorawan.v3.CombinedIdentifiers")
}
func (this *UserIdentifiers) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UserIdentifiers)
	if !ok {
		that2, ok := that.(UserIdentifiers)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UserIdentifiers")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UserIdentifiers but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UserIdentifiers but is not nil && this == nil")
	}
	if this.UserID != that1.UserID {
		return fmt.Errorf("UserID this(%v) Not Equal that(%v)", this.UserID, that1.UserID)
	}
	if this.Email != that1.Email {
		return fmt.Errorf("Email this(%v) Not Equal that(%v)", this.Email, that1.Email)
	}
	return nil
}
func (this *UserIdentifiers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserIdentifiers)
	if !ok {
		that2, ok := that.(UserIdentifiers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserID != that1.UserID {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	return true
}
func (this *ApplicationIdentifiers) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ApplicationIdentifiers)
	if !ok {
		that2, ok := that.(ApplicationIdentifiers)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ApplicationIdentifiers")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ApplicationIdentifiers but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ApplicationIdentifiers but is not nil && this == nil")
	}
	if this.ApplicationID != that1.ApplicationID {
		return fmt.Errorf("ApplicationID this(%v) Not Equal that(%v)", this.ApplicationID, that1.ApplicationID)
	}
	return nil
}
func (this *ApplicationIdentifiers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationIdentifiers)
	if !ok {
		that2, ok := that.(ApplicationIdentifiers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ApplicationID != that1.ApplicationID {
		return false
	}
	return true
}
func (this *GatewayIdentifiers) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GatewayIdentifiers)
	if !ok {
		that2, ok := that.(GatewayIdentifiers)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GatewayIdentifiers")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GatewayIdentifiers but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GatewayIdentifiers but is not nil && this == nil")
	}
	if this.GatewayID != that1.GatewayID {
		return fmt.Errorf("GatewayID this(%v) Not Equal that(%v)", this.GatewayID, that1.GatewayID)
	}
	if that1.EUI == nil {
		if this.EUI != nil {
			return fmt.Errorf("this.EUI != nil && that1.EUI == nil")
		}
	} else if !this.EUI.Equal(*that1.EUI) {
		return fmt.Errorf("EUI this(%v) Not Equal that(%v)", this.EUI, that1.EUI)
	}
	return nil
}
func (this *GatewayIdentifiers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayIdentifiers)
	if !ok {
		that2, ok := that.(GatewayIdentifiers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GatewayID != that1.GatewayID {
		return false
	}
	if that1.EUI == nil {
		if this.EUI != nil {
			return false
		}
	} else if !this.EUI.Equal(*that1.EUI) {
		return false
	}
	return true
}
func (this *EndDeviceIdentifiers) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*EndDeviceIdentifiers)
	if !ok {
		that2, ok := that.(EndDeviceIdentifiers)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *EndDeviceIdentifiers")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *EndDeviceIdentifiers but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *EndDeviceIdentifiers but is not nil && this == nil")
	}
	if this.DeviceID != that1.DeviceID {
		return fmt.Errorf("DeviceID this(%v) Not Equal that(%v)", this.DeviceID, that1.DeviceID)
	}
	if !this.ApplicationIdentifiers.Equal(&that1.ApplicationIdentifiers) {
		return fmt.Errorf("ApplicationIdentifiers this(%v) Not Equal that(%v)", this.ApplicationIdentifiers, that1.ApplicationIdentifiers)
	}
	if that1.DevEUI == nil {
		if this.DevEUI != nil {
			return fmt.Errorf("this.DevEUI != nil && that1.DevEUI == nil")
		}
	} else if !this.DevEUI.Equal(*that1.DevEUI) {
		return fmt.Errorf("DevEUI this(%v) Not Equal that(%v)", this.DevEUI, that1.DevEUI)
	}
	if that1.JoinEUI == nil {
		if this.JoinEUI != nil {
			return fmt.Errorf("this.JoinEUI != nil && that1.JoinEUI == nil")
		}
	} else if !this.JoinEUI.Equal(*that1.JoinEUI) {
		return fmt.Errorf("JoinEUI this(%v) Not Equal that(%v)", this.JoinEUI, that1.JoinEUI)
	}
	if that1.DevAddr == nil {
		if this.DevAddr != nil {
			return fmt.Errorf("this.DevAddr != nil && that1.DevAddr == nil")
		}
	} else if !this.DevAddr.Equal(*that1.DevAddr) {
		return fmt.Errorf("DevAddr this(%v) Not Equal that(%v)", this.DevAddr, that1.DevAddr)
	}
	return nil
}
func (this *EndDeviceIdentifiers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDeviceIdentifiers)
	if !ok {
		that2, ok := that.(EndDeviceIdentifiers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DeviceID != that1.DeviceID {
		return false
	}
	if !this.ApplicationIdentifiers.Equal(&that1.ApplicationIdentifiers) {
		return false
	}
	if that1.DevEUI == nil {
		if this.DevEUI != nil {
			return false
		}
	} else if !this.DevEUI.Equal(*that1.DevEUI) {
		return false
	}
	if that1.JoinEUI == nil {
		if this.JoinEUI != nil {
			return false
		}
	} else if !this.JoinEUI.Equal(*that1.JoinEUI) {
		return false
	}
	if that1.DevAddr == nil {
		if this.DevAddr != nil {
			return false
		}
	} else if !this.DevAddr.Equal(*that1.DevAddr) {
		return false
	}
	return true
}
func (this *ClientIdentifiers) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ClientIdentifiers)
	if !ok {
		that2, ok := that.(ClientIdentifiers)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ClientIdentifiers")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ClientIdentifiers but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ClientIdentifiers but is not nil && this == nil")
	}
	if this.ClientID != that1.ClientID {
		return fmt.Errorf("ClientID this(%v) Not Equal that(%v)", this.ClientID, that1.ClientID)
	}
	return nil
}
func (this *ClientIdentifiers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClientIdentifiers)
	if !ok {
		that2, ok := that.(ClientIdentifiers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClientID != that1.ClientID {
		return false
	}
	return true
}
func (this *OrganizationIdentifiers) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*OrganizationIdentifiers)
	if !ok {
		that2, ok := that.(OrganizationIdentifiers)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *OrganizationIdentifiers")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *OrganizationIdentifiers but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *OrganizationIdentifiers but is not nil && this == nil")
	}
	if this.OrganizationID != that1.OrganizationID {
		return fmt.Errorf("OrganizationID this(%v) Not Equal that(%v)", this.OrganizationID, that1.OrganizationID)
	}
	return nil
}
func (this *OrganizationIdentifiers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OrganizationIdentifiers)
	if !ok {
		that2, ok := that.(OrganizationIdentifiers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrganizationID != that1.OrganizationID {
		return false
	}
	return true
}
func (this *OrganizationOrUserIdentifiers) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*OrganizationOrUserIdentifiers)
	if !ok {
		that2, ok := that.(OrganizationOrUserIdentifiers)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *OrganizationOrUserIdentifiers")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *OrganizationOrUserIdentifiers but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *OrganizationOrUserIdentifiers but is not nil && this == nil")
	}
	if that1.ID == nil {
		if this.ID != nil {
			return fmt.Errorf("this.ID != nil && that1.ID == nil")
		}
	} else if this.ID == nil {
		return fmt.Errorf("this.ID == nil && that1.ID != nil")
	} else if err := this.ID.VerboseEqual(that1.ID); err != nil {
		return err
	}
	return nil
}
func (this *OrganizationOrUserIdentifiers_UserID) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*OrganizationOrUserIdentifiers_UserID)
	if !ok {
		that2, ok := that.(OrganizationOrUserIdentifiers_UserID)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *OrganizationOrUserIdentifiers_UserID")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *OrganizationOrUserIdentifiers_UserID but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *OrganizationOrUserIdentifiers_UserID but is not nil && this == nil")
	}
	if !this.UserID.Equal(that1.UserID) {
		return fmt.Errorf("UserID this(%v) Not Equal that(%v)", this.UserID, that1.UserID)
	}
	return nil
}
func (this *OrganizationOrUserIdentifiers_OrganizationID) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*OrganizationOrUserIdentifiers_OrganizationID)
	if !ok {
		that2, ok := that.(OrganizationOrUserIdentifiers_OrganizationID)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *OrganizationOrUserIdentifiers_OrganizationID")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *OrganizationOrUserIdentifiers_OrganizationID but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *OrganizationOrUserIdentifiers_OrganizationID but is not nil && this == nil")
	}
	if !this.OrganizationID.Equal(that1.OrganizationID) {
		return fmt.Errorf("OrganizationID this(%v) Not Equal that(%v)", this.OrganizationID, that1.OrganizationID)
	}
	return nil
}
func (this *OrganizationOrUserIdentifiers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OrganizationOrUserIdentifiers)
	if !ok {
		that2, ok := that.(OrganizationOrUserIdentifiers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ID == nil {
		if this.ID != nil {
			return false
		}
	} else if this.ID == nil {
		return false
	} else if !this.ID.Equal(that1.ID) {
		return false
	}
	return true
}
func (this *OrganizationOrUserIdentifiers_UserID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OrganizationOrUserIdentifiers_UserID)
	if !ok {
		that2, ok := that.(OrganizationOrUserIdentifiers_UserID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserID.Equal(that1.UserID) {
		return false
	}
	return true
}
func (this *OrganizationOrUserIdentifiers_OrganizationID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OrganizationOrUserIdentifiers_OrganizationID)
	if !ok {
		that2, ok := that.(OrganizationOrUserIdentifiers_OrganizationID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OrganizationID.Equal(that1.OrganizationID) {
		return false
	}
	return true
}
func (this *CombinedIdentifiers) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CombinedIdentifiers)
	if !ok {
		that2, ok := that.(CombinedIdentifiers)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CombinedIdentifiers")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CombinedIdentifiers but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CombinedIdentifiers but is not nil && this == nil")
	}
	if len(this.ApplicationIDs) != len(that1.ApplicationIDs) {
		return fmt.Errorf("ApplicationIDs this(%v) Not Equal that(%v)", len(this.ApplicationIDs), len(that1.ApplicationIDs))
	}
	for i := range this.ApplicationIDs {
		if !this.ApplicationIDs[i].Equal(that1.ApplicationIDs[i]) {
			return fmt.Errorf("ApplicationIDs this[%v](%v) Not Equal that[%v](%v)", i, this.ApplicationIDs[i], i, that1.ApplicationIDs[i])
		}
	}
	if len(this.ClientIDs) != len(that1.ClientIDs) {
		return fmt.Errorf("ClientIDs this(%v) Not Equal that(%v)", len(this.ClientIDs), len(that1.ClientIDs))
	}
	for i := range this.ClientIDs {
		if !this.ClientIDs[i].Equal(that1.ClientIDs[i]) {
			return fmt.Errorf("ClientIDs this[%v](%v) Not Equal that[%v](%v)", i, this.ClientIDs[i], i, that1.ClientIDs[i])
		}
	}
	if len(this.DeviceIDs) != len(that1.DeviceIDs) {
		return fmt.Errorf("DeviceIDs this(%v) Not Equal that(%v)", len(this.DeviceIDs), len(that1.DeviceIDs))
	}
	for i := range this.DeviceIDs {
		if !this.DeviceIDs[i].Equal(that1.DeviceIDs[i]) {
			return fmt.Errorf("DeviceIDs this[%v](%v) Not Equal that[%v](%v)", i, this.DeviceIDs[i], i, that1.DeviceIDs[i])
		}
	}
	if len(this.GatewayIDs) != len(that1.GatewayIDs) {
		return fmt.Errorf("GatewayIDs this(%v) Not Equal that(%v)", len(this.GatewayIDs), len(that1.GatewayIDs))
	}
	for i := range this.GatewayIDs {
		if !this.GatewayIDs[i].Equal(that1.GatewayIDs[i]) {
			return fmt.Errorf("GatewayIDs this[%v](%v) Not Equal that[%v](%v)", i, this.GatewayIDs[i], i, that1.GatewayIDs[i])
		}
	}
	if len(this.OrganizationIDs) != len(that1.OrganizationIDs) {
		return fmt.Errorf("OrganizationIDs this(%v) Not Equal that(%v)", len(this.OrganizationIDs), len(that1.OrganizationIDs))
	}
	for i := range this.OrganizationIDs {
		if !this.OrganizationIDs[i].Equal(that1.OrganizationIDs[i]) {
			return fmt.Errorf("OrganizationIDs this[%v](%v) Not Equal that[%v](%v)", i, this.OrganizationIDs[i], i, that1.OrganizationIDs[i])
		}
	}
	if len(this.UserIDs) != len(that1.UserIDs) {
		return fmt.Errorf("UserIDs this(%v) Not Equal that(%v)", len(this.UserIDs), len(that1.UserIDs))
	}
	for i := range this.UserIDs {
		if !this.UserIDs[i].Equal(that1.UserIDs[i]) {
			return fmt.Errorf("UserIDs this[%v](%v) Not Equal that[%v](%v)", i, this.UserIDs[i], i, that1.UserIDs[i])
		}
	}
	return nil
}
func (this *CombinedIdentifiers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CombinedIdentifiers)
	if !ok {
		that2, ok := that.(CombinedIdentifiers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ApplicationIDs) != len(that1.ApplicationIDs) {
		return false
	}
	for i := range this.ApplicationIDs {
		if !this.ApplicationIDs[i].Equal(that1.ApplicationIDs[i]) {
			return false
		}
	}
	if len(this.ClientIDs) != len(that1.ClientIDs) {
		return false
	}
	for i := range this.ClientIDs {
		if !this.ClientIDs[i].Equal(that1.ClientIDs[i]) {
			return false
		}
	}
	if len(this.DeviceIDs) != len(that1.DeviceIDs) {
		return false
	}
	for i := range this.DeviceIDs {
		if !this.DeviceIDs[i].Equal(that1.DeviceIDs[i]) {
			return false
		}
	}
	if len(this.GatewayIDs) != len(that1.GatewayIDs) {
		return false
	}
	for i := range this.GatewayIDs {
		if !this.GatewayIDs[i].Equal(that1.GatewayIDs[i]) {
			return false
		}
	}
	if len(this.OrganizationIDs) != len(that1.OrganizationIDs) {
		return false
	}
	for i := range this.OrganizationIDs {
		if !this.OrganizationIDs[i].Equal(that1.OrganizationIDs[i]) {
			return false
		}
	}
	if len(this.UserIDs) != len(that1.UserIDs) {
		return false
	}
	for i := range this.UserIDs {
		if !this.UserIDs[i].Equal(that1.UserIDs[i]) {
			return false
		}
	}
	return true
}
func (m *UserIdentifiers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserIdentifiers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIdentifiers(dAtA, i, uint64(len(m.UserID)))
		i += copy(dAtA[i:], m.UserID)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIdentifiers(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	return i, nil
}

func (m *ApplicationIdentifiers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationIdentifiers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApplicationID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIdentifiers(dAtA, i, uint64(len(m.ApplicationID)))
		i += copy(dAtA[i:], m.ApplicationID)
	}
	return i, nil
}

func (m *GatewayIdentifiers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayIdentifiers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GatewayID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIdentifiers(dAtA, i, uint64(len(m.GatewayID)))
		i += copy(dAtA[i:], m.GatewayID)
	}
	if m.EUI != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIdentifiers(dAtA, i, uint64(m.EUI.Size()))
		n1, err := m.EUI.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *EndDeviceIdentifiers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDeviceIdentifiers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DeviceID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIdentifiers(dAtA, i, uint64(len(m.DeviceID)))
		i += copy(dAtA[i:], m.DeviceID)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintIdentifiers(dAtA, i, uint64(m.ApplicationIdentifiers.Size()))
	n2, err := m.ApplicationIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if m.DevEUI != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintIdentifiers(dAtA, i, uint64(m.DevEUI.Size()))
		n3, err := m.DevEUI.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.JoinEUI != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintIdentifiers(dAtA, i, uint64(m.JoinEUI.Size()))
		n4, err := m.JoinEUI.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.DevAddr != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintIdentifiers(dAtA, i, uint64(m.DevAddr.Size()))
		n5, err := m.DevAddr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *ClientIdentifiers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientIdentifiers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ClientID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIdentifiers(dAtA, i, uint64(len(m.ClientID)))
		i += copy(dAtA[i:], m.ClientID)
	}
	return i, nil
}

func (m *OrganizationIdentifiers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrganizationIdentifiers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrganizationID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIdentifiers(dAtA, i, uint64(len(m.OrganizationID)))
		i += copy(dAtA[i:], m.OrganizationID)
	}
	return i, nil
}

func (m *OrganizationOrUserIdentifiers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrganizationOrUserIdentifiers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != nil {
		nn6, err := m.ID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn6
	}
	return i, nil
}

func (m *OrganizationOrUserIdentifiers_UserID) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UserID != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIdentifiers(dAtA, i, uint64(m.UserID.Size()))
		n7, err := m.UserID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *OrganizationOrUserIdentifiers_OrganizationID) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.OrganizationID != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIdentifiers(dAtA, i, uint64(m.OrganizationID.Size()))
		n8, err := m.OrganizationID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *CombinedIdentifiers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CombinedIdentifiers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApplicationIDs) > 0 {
		for _, msg := range m.ApplicationIDs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIdentifiers(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ClientIDs) > 0 {
		for _, msg := range m.ClientIDs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintIdentifiers(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.DeviceIDs) > 0 {
		for _, msg := range m.DeviceIDs {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintIdentifiers(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.GatewayIDs) > 0 {
		for _, msg := range m.GatewayIDs {
			dAtA[i] = 0x22
			i++
			i = encodeVarintIdentifiers(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.OrganizationIDs) > 0 {
		for _, msg := range m.OrganizationIDs {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintIdentifiers(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.UserIDs) > 0 {
		for _, msg := range m.UserIDs {
			dAtA[i] = 0x32
			i++
			i = encodeVarintIdentifiers(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintIdentifiers(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedUserIdentifiers(r randyIdentifiers, easy bool) *UserIdentifiers {
	this := &UserIdentifiers{}
	this.UserID = randStringIdentifiers(r)
	this.Email = randStringIdentifiers(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedClientIdentifiers(r randyIdentifiers, easy bool) *ClientIdentifiers {
	this := &ClientIdentifiers{}
	this.ClientID = randStringIdentifiers(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedOrganizationIdentifiers(r randyIdentifiers, easy bool) *OrganizationIdentifiers {
	this := &OrganizationIdentifiers{}
	this.OrganizationID = randStringIdentifiers(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedOrganizationOrUserIdentifiers(r randyIdentifiers, easy bool) *OrganizationOrUserIdentifiers {
	this := &OrganizationOrUserIdentifiers{}
	oneofNumber_ID := []int32{1, 2}[r.Intn(2)]
	switch oneofNumber_ID {
	case 1:
		this.ID = NewPopulatedOrganizationOrUserIdentifiers_UserID(r, easy)
	case 2:
		this.ID = NewPopulatedOrganizationOrUserIdentifiers_OrganizationID(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedOrganizationOrUserIdentifiers_UserID(r randyIdentifiers, easy bool) *OrganizationOrUserIdentifiers_UserID {
	this := &OrganizationOrUserIdentifiers_UserID{}
	this.UserID = NewPopulatedUserIdentifiers(r, easy)
	return this
}
func NewPopulatedOrganizationOrUserIdentifiers_OrganizationID(r randyIdentifiers, easy bool) *OrganizationOrUserIdentifiers_OrganizationID {
	this := &OrganizationOrUserIdentifiers_OrganizationID{}
	this.OrganizationID = NewPopulatedOrganizationIdentifiers(r, easy)
	return this
}
func NewPopulatedCombinedIdentifiers(r randyIdentifiers, easy bool) *CombinedIdentifiers {
	this := &CombinedIdentifiers{}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.ApplicationIDs = make([]*ApplicationIdentifiers, v1)
		for i := 0; i < v1; i++ {
			this.ApplicationIDs[i] = NewPopulatedApplicationIdentifiers(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.ClientIDs = make([]*ClientIdentifiers, v2)
		for i := 0; i < v2; i++ {
			this.ClientIDs[i] = NewPopulatedClientIdentifiers(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v3 := r.Intn(5)
		this.DeviceIDs = make([]*EndDeviceIdentifiers, v3)
		for i := 0; i < v3; i++ {
			this.DeviceIDs[i] = NewPopulatedEndDeviceIdentifiers(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v4 := r.Intn(5)
		this.GatewayIDs = make([]*GatewayIdentifiers, v4)
		for i := 0; i < v4; i++ {
			this.GatewayIDs[i] = NewPopulatedGatewayIdentifiers(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v5 := r.Intn(5)
		this.OrganizationIDs = make([]*OrganizationIdentifiers, v5)
		for i := 0; i < v5; i++ {
			this.OrganizationIDs[i] = NewPopulatedOrganizationIdentifiers(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v6 := r.Intn(5)
		this.UserIDs = make([]*UserIdentifiers, v6)
		for i := 0; i < v6; i++ {
			this.UserIDs[i] = NewPopulatedUserIdentifiers(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyIdentifiers interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneIdentifiers(r randyIdentifiers) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringIdentifiers(r randyIdentifiers) string {
	v7 := r.Intn(100)
	tmps := make([]rune, v7)
	for i := 0; i < v7; i++ {
		tmps[i] = randUTF8RuneIdentifiers(r)
	}
	return string(tmps)
}
func randUnrecognizedIdentifiers(r randyIdentifiers, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldIdentifiers(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldIdentifiers(dAtA []byte, r randyIdentifiers, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateIdentifiers(dAtA, uint64(key))
		v8 := r.Int63()
		if r.Intn(2) == 0 {
			v8 *= -1
		}
		dAtA = encodeVarintPopulateIdentifiers(dAtA, uint64(v8))
	case 1:
		dAtA = encodeVarintPopulateIdentifiers(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateIdentifiers(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateIdentifiers(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateIdentifiers(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateIdentifiers(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *UserIdentifiers) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovIdentifiers(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovIdentifiers(uint64(l))
	}
	return n
}

func (m *ApplicationIdentifiers) Size() (n int) {
	var l int
	_ = l
	l = len(m.ApplicationID)
	if l > 0 {
		n += 1 + l + sovIdentifiers(uint64(l))
	}
	return n
}

func (m *GatewayIdentifiers) Size() (n int) {
	var l int
	_ = l
	l = len(m.GatewayID)
	if l > 0 {
		n += 1 + l + sovIdentifiers(uint64(l))
	}
	if m.EUI != nil {
		l = m.EUI.Size()
		n += 1 + l + sovIdentifiers(uint64(l))
	}
	return n
}

func (m *EndDeviceIdentifiers) Size() (n int) {
	var l int
	_ = l
	l = len(m.DeviceID)
	if l > 0 {
		n += 1 + l + sovIdentifiers(uint64(l))
	}
	l = m.ApplicationIdentifiers.Size()
	n += 1 + l + sovIdentifiers(uint64(l))
	if m.DevEUI != nil {
		l = m.DevEUI.Size()
		n += 1 + l + sovIdentifiers(uint64(l))
	}
	if m.JoinEUI != nil {
		l = m.JoinEUI.Size()
		n += 1 + l + sovIdentifiers(uint64(l))
	}
	if m.DevAddr != nil {
		l = m.DevAddr.Size()
		n += 1 + l + sovIdentifiers(uint64(l))
	}
	return n
}

func (m *ClientIdentifiers) Size() (n int) {
	var l int
	_ = l
	l = len(m.ClientID)
	if l > 0 {
		n += 1 + l + sovIdentifiers(uint64(l))
	}
	return n
}

func (m *OrganizationIdentifiers) Size() (n int) {
	var l int
	_ = l
	l = len(m.OrganizationID)
	if l > 0 {
		n += 1 + l + sovIdentifiers(uint64(l))
	}
	return n
}

func (m *OrganizationOrUserIdentifiers) Size() (n int) {
	var l int
	_ = l
	if m.ID != nil {
		n += m.ID.Size()
	}
	return n
}

func (m *OrganizationOrUserIdentifiers_UserID) Size() (n int) {
	var l int
	_ = l
	if m.UserID != nil {
		l = m.UserID.Size()
		n += 1 + l + sovIdentifiers(uint64(l))
	}
	return n
}
func (m *OrganizationOrUserIdentifiers_OrganizationID) Size() (n int) {
	var l int
	_ = l
	if m.OrganizationID != nil {
		l = m.OrganizationID.Size()
		n += 1 + l + sovIdentifiers(uint64(l))
	}
	return n
}
func (m *CombinedIdentifiers) Size() (n int) {
	var l int
	_ = l
	if len(m.ApplicationIDs) > 0 {
		for _, e := range m.ApplicationIDs {
			l = e.Size()
			n += 1 + l + sovIdentifiers(uint64(l))
		}
	}
	if len(m.ClientIDs) > 0 {
		for _, e := range m.ClientIDs {
			l = e.Size()
			n += 1 + l + sovIdentifiers(uint64(l))
		}
	}
	if len(m.DeviceIDs) > 0 {
		for _, e := range m.DeviceIDs {
			l = e.Size()
			n += 1 + l + sovIdentifiers(uint64(l))
		}
	}
	if len(m.GatewayIDs) > 0 {
		for _, e := range m.GatewayIDs {
			l = e.Size()
			n += 1 + l + sovIdentifiers(uint64(l))
		}
	}
	if len(m.OrganizationIDs) > 0 {
		for _, e := range m.OrganizationIDs {
			l = e.Size()
			n += 1 + l + sovIdentifiers(uint64(l))
		}
	}
	if len(m.UserIDs) > 0 {
		for _, e := range m.UserIDs {
			l = e.Size()
			n += 1 + l + sovIdentifiers(uint64(l))
		}
	}
	return n
}

func sovIdentifiers(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozIdentifiers(x uint64) (n int) {
	return sovIdentifiers((x << 1) ^ uint64((int64(x) >> 63)))
}
func (this *UserIdentifiers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserIdentifiers{`,
		`UserID:` + fmt.Sprintf("%v", this.UserID) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationIdentifiers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationIdentifiers{`,
		`ApplicationID:` + fmt.Sprintf("%v", this.ApplicationID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayIdentifiers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayIdentifiers{`,
		`GatewayID:` + fmt.Sprintf("%v", this.GatewayID) + `,`,
		`EUI:` + fmt.Sprintf("%v", this.EUI) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndDeviceIdentifiers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndDeviceIdentifiers{`,
		`DeviceID:` + fmt.Sprintf("%v", this.DeviceID) + `,`,
		`ApplicationIdentifiers:` + strings.Replace(strings.Replace(this.ApplicationIdentifiers.String(), "ApplicationIdentifiers", "ApplicationIdentifiers", 1), `&`, ``, 1) + `,`,
		`DevEUI:` + fmt.Sprintf("%v", this.DevEUI) + `,`,
		`JoinEUI:` + fmt.Sprintf("%v", this.JoinEUI) + `,`,
		`DevAddr:` + fmt.Sprintf("%v", this.DevAddr) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClientIdentifiers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClientIdentifiers{`,
		`ClientID:` + fmt.Sprintf("%v", this.ClientID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OrganizationIdentifiers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OrganizationIdentifiers{`,
		`OrganizationID:` + fmt.Sprintf("%v", this.OrganizationID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OrganizationOrUserIdentifiers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OrganizationOrUserIdentifiers{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OrganizationOrUserIdentifiers_UserID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OrganizationOrUserIdentifiers_UserID{`,
		`UserID:` + strings.Replace(fmt.Sprintf("%v", this.UserID), "UserIdentifiers", "UserIdentifiers", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OrganizationOrUserIdentifiers_OrganizationID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OrganizationOrUserIdentifiers_OrganizationID{`,
		`OrganizationID:` + strings.Replace(fmt.Sprintf("%v", this.OrganizationID), "OrganizationIdentifiers", "OrganizationIdentifiers", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CombinedIdentifiers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CombinedIdentifiers{`,
		`ApplicationIDs:` + strings.Replace(fmt.Sprintf("%v", this.ApplicationIDs), "ApplicationIdentifiers", "ApplicationIdentifiers", 1) + `,`,
		`ClientIDs:` + strings.Replace(fmt.Sprintf("%v", this.ClientIDs), "ClientIdentifiers", "ClientIdentifiers", 1) + `,`,
		`DeviceIDs:` + strings.Replace(fmt.Sprintf("%v", this.DeviceIDs), "EndDeviceIdentifiers", "EndDeviceIdentifiers", 1) + `,`,
		`GatewayIDs:` + strings.Replace(fmt.Sprintf("%v", this.GatewayIDs), "GatewayIdentifiers", "GatewayIdentifiers", 1) + `,`,
		`OrganizationIDs:` + strings.Replace(fmt.Sprintf("%v", this.OrganizationIDs), "OrganizationIdentifiers", "OrganizationIdentifiers", 1) + `,`,
		`UserIDs:` + strings.Replace(fmt.Sprintf("%v", this.UserIDs), "UserIdentifiers", "UserIdentifiers", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringIdentifiers(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *UserIdentifiers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentifiers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserIdentifiers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserIdentifiers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentifiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentifiers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentifiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentifiers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentifiers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentifiers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationIdentifiers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentifiers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationIdentifiers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationIdentifiers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentifiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentifiers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentifiers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentifiers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayIdentifiers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentifiers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayIdentifiers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayIdentifiers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentifiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentifiers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentifiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIdentifiers
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v go_thethings_network_lorawan_stack_pkg_types.EUI64
			m.EUI = &v
			if err := m.EUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentifiers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentifiers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDeviceIdentifiers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentifiers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndDeviceIdentifiers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndDeviceIdentifiers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentifiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentifiers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentifiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentifiers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentifiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIdentifiers
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v go_thethings_network_lorawan_stack_pkg_types.EUI64
			m.DevEUI = &v
			if err := m.DevEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentifiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIdentifiers
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v go_thethings_network_lorawan_stack_pkg_types.EUI64
			m.JoinEUI = &v
			if err := m.JoinEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentifiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIdentifiers
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v go_thethings_network_lorawan_stack_pkg_types.DevAddr
			m.DevAddr = &v
			if err := m.DevAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentifiers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentifiers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientIdentifiers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentifiers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientIdentifiers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientIdentifiers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentifiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentifiers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentifiers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentifiers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrganizationIdentifiers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentifiers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrganizationIdentifiers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrganizationIdentifiers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentifiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentifiers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentifiers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentifiers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrganizationOrUserIdentifiers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentifiers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrganizationOrUserIdentifiers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrganizationOrUserIdentifiers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentifiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentifiers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UserIdentifiers{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ID = &OrganizationOrUserIdentifiers_UserID{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentifiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentifiers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OrganizationIdentifiers{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ID = &OrganizationOrUserIdentifiers_OrganizationID{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentifiers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentifiers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CombinedIdentifiers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentifiers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CombinedIdentifiers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CombinedIdentifiers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationIDs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentifiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentifiers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationIDs = append(m.ApplicationIDs, &ApplicationIdentifiers{})
			if err := m.ApplicationIDs[len(m.ApplicationIDs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIDs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentifiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentifiers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientIDs = append(m.ClientIDs, &ClientIdentifiers{})
			if err := m.ClientIDs[len(m.ClientIDs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceIDs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentifiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentifiers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceIDs = append(m.DeviceIDs, &EndDeviceIdentifiers{})
			if err := m.DeviceIDs[len(m.DeviceIDs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayIDs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentifiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentifiers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayIDs = append(m.GatewayIDs, &GatewayIdentifiers{})
			if err := m.GatewayIDs[len(m.GatewayIDs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationIDs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentifiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentifiers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationIDs = append(m.OrganizationIDs, &OrganizationIdentifiers{})
			if err := m.OrganizationIDs[len(m.OrganizationIDs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIDs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentifiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentifiers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserIDs = append(m.UserIDs, &UserIdentifiers{})
			if err := m.UserIDs[len(m.UserIDs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentifiers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentifiers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIdentifiers(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIdentifiers
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIdentifiers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIdentifiers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthIdentifiers
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowIdentifiers
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipIdentifiers(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthIdentifiers = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIdentifiers   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("go.thethings.network/lorawan-stack/api/identifiers.proto", fileDescriptor_identifiers_3b40c4ee266ae5fa)
}
func init() {
	golang_proto.RegisterFile("go.thethings.network/lorawan-stack/api/identifiers.proto", fileDescriptor_identifiers_3b40c4ee266ae5fa)
}

var fileDescriptor_identifiers_3b40c4ee266ae5fa = []byte{
	// 853 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x95, 0x3d, 0x6c, 0xdb, 0x46,
	0x14, 0xc7, 0xef, 0x22, 0x59, 0x1f, 0xcf, 0xb1, 0xd4, 0x30, 0x41, 0x2b, 0x14, 0xe8, 0x31, 0x55,
	0x8b, 0x7e, 0x00, 0x09, 0x05, 0x38, 0x41, 0x61, 0xb4, 0x68, 0x51, 0x2b, 0x74, 0x13, 0x17, 0x05,
	0x0c, 0x5c, 0xe0, 0xa2, 0x29, 0x0a, 0x18, 0x94, 0x78, 0xa6, 0xaf, 0x96, 0x49, 0x81, 0x47, 0xc9,
	0x48, 0xa7, 0x8c, 0x19, 0x3b, 0xb6, 0x5b, 0xd0, 0xa1, 0xc8, 0xe8, 0xd1, 0x63, 0x46, 0x8f, 0x5e,
	0x0a, 0x04, 0x19, 0x88, 0xe8, 0xb8, 0x64, 0xcc, 0x98, 0xb1, 0xe0, 0x91, 0x92, 0x48, 0xca, 0x45,
	0x1d, 0x6f, 0xbc, 0xbb, 0xf7, 0x7e, 0x7a, 0xef, 0xfd, 0xdf, 0x7b, 0x82, 0x35, 0xc7, 0x33, 0x82,
	0x3d, 0x16, 0xec, 0x71, 0xd7, 0x11, 0x86, 0xcb, 0x82, 0x43, 0xcf, 0xdf, 0xef, 0x0c, 0x3c, 0xdf,
	0x3a, 0xb4, 0xdc, 0x9b, 0x22, 0xb0, 0xfa, 0xfb, 0x1d, 0x6b, 0xc8, 0x3b, 0xdc, 0x66, 0x6e, 0xc0,
	0x77, 0x39, 0xf3, 0x85, 0x31, 0xf4, 0xbd, 0xc0, 0xd3, 0x1a, 0x41, 0xe0, 0x1a, 0xa9, 0xa1, 0x31,
	0xbe, 0xf5, 0xfe, 0x4d, 0x87, 0x07, 0x7b, 0xa3, 0x9e, 0xd1, 0xf7, 0x0e, 0x3a, 0x8e, 0xe7, 0x78,
	0x1d, 0x65, 0xd6, 0x1b, 0xed, 0xaa, 0x93, 0x3a, 0xa8, 0xaf, 0xc4, 0xbd, 0xfd, 0x03, 0x34, 0xb7,
	0x05, 0xf3, 0x37, 0xe7, 0x5c, 0xed, 0x23, 0xa8, 0x8e, 0x04, 0xf3, 0x77, 0xb8, 0xdd, 0xc2, 0xd7,
	0xf1, 0x67, 0xf5, 0x2e, 0xc8, 0x50, 0xaf, 0x28, 0x2b, 0x93, 0x56, 0x46, 0xca, 0x5a, 0xbb, 0x06,
	0x4b, 0xec, 0xc0, 0xe2, 0x83, 0xd6, 0xa5, 0xd8, 0x84, 0x26, 0x87, 0xf6, 0x4f, 0xf0, 0xee, 0xfa,
	0x70, 0x38, 0xe0, 0x7d, 0x2b, 0xe0, 0x9e, 0x9b, 0x85, 0xae, 0x41, 0xc3, 0x9a, 0xbf, 0xcc, 0xd9,
	0x57, 0x64, 0xa8, 0xaf, 0x64, 0x7d, 0x4c, 0xba, 0x62, 0x65, 0x11, 0x5f, 0x96, 0x8f, 0x9f, 0xe8,
	0xa8, 0xfd, 0x27, 0x06, 0xed, 0xae, 0x15, 0xb0, 0x43, 0xeb, 0x61, 0x16, 0x7b, 0x03, 0xc0, 0x49,
	0x6e, 0xe7, 0xc8, 0x15, 0x19, 0xea, 0xf5, 0xa9, 0xad, 0x49, 0xeb, 0xce, 0xd4, 0x4d, 0xdb, 0x82,
	0x12, 0x1b, 0x71, 0x15, 0xf2, 0xe5, 0xee, 0xd7, 0x2f, 0x42, 0x7d, 0xf5, 0x1c, 0x65, 0x1f, 0xee,
	0x3b, 0x9d, 0xe0, 0xe1, 0x90, 0x09, 0x63, 0x63, 0x7b, 0xf3, 0x8b, 0xdb, 0x32, 0xd4, 0x4b, 0x1b,
	0xdb, 0x9b, 0x34, 0x26, 0xa5, 0xb1, 0x1d, 0x95, 0xe0, 0xda, 0x86, 0x6b, 0x9b, 0x6c, 0xcc, 0xfb,
	0x2c, 0x1b, 0xdd, 0xe7, 0x50, 0xb7, 0xd5, 0xe5, 0x3c, 0xb8, 0xcb, 0x32, 0xd4, 0x6b, 0xa9, 0xa5,
	0x49, 0x6b, 0x76, 0xea, 0xa3, 0x3d, 0x80, 0x66, 0xbe, 0x3e, 0x42, 0x85, 0xb9, 0xbc, 0xfa, 0x89,
	0x91, 0x17, 0xd8, 0x38, 0xbb, 0xc0, 0xdd, 0xda, 0x49, 0xa8, 0xa3, 0xd3, 0x50, 0xc7, 0xb4, 0x91,
	0xab, 0x9f, 0xd0, 0x1e, 0x40, 0xd5, 0x66, 0xe3, 0x9d, 0x38, 0xf3, 0xb2, 0xca, 0xfc, 0xdb, 0x0b,
	0x67, 0x5e, 0x31, 0xd9, 0x38, 0x4e, 0xbe, 0x62, 0xb3, 0xf1, 0xc6, 0x88, 0x6b, 0xbf, 0x40, 0xed,
	0x57, 0x8f, 0xbb, 0x8a, 0xbd, 0xa4, 0xd8, 0xeb, 0x17, 0x66, 0x57, 0xbf, 0xf7, 0xb8, 0x1b, 0xc3,
	0xab, 0x31, 0x32, 0xa6, 0xdf, 0x87, 0xb8, 0x3e, 0x3b, 0x96, 0x6d, 0xfb, 0xad, 0x8a, 0xa2, 0xaf,
	0xbd, 0x08, 0xf5, 0xdb, 0x6f, 0x45, 0x37, 0xd9, 0x78, 0xdd, 0xb6, 0x7d, 0x1a, 0x97, 0x20, 0xfe,
	0x48, 0x25, 0xfb, 0x06, 0xae, 0xdc, 0x19, 0x70, 0xe6, 0x06, 0x05, 0xb9, 0xfa, 0xea, 0xb2, 0x20,
	0x57, 0x6a, 0x69, 0xd2, 0x5a, 0x3f, 0xf5, 0x69, 0xff, 0x08, 0xef, 0x6d, 0xf9, 0x8e, 0xe5, 0xf2,
	0xdf, 0x16, 0x3a, 0xfd, 0x2b, 0x68, 0x7a, 0x99, 0xa7, 0x39, 0x4b, 0x93, 0xa1, 0xde, 0xc8, 0x79,
	0x99, 0xb4, 0xe1, 0xe5, 0x28, 0xed, 0x7f, 0x30, 0x7c, 0x90, 0x35, 0xd9, 0xf2, 0x8b, 0xd3, 0xf9,
	0x5d, 0x7e, 0x3a, 0x97, 0x57, 0xf5, 0x62, 0x83, 0x14, 0x3c, 0xb2, 0xe3, 0x7b, 0x0f, 0xcd, 0x06,
	0x78, 0x77, 0x31, 0xcc, 0xa4, 0xe1, 0x3e, 0x2d, 0xf2, 0xfe, 0x23, 0xd1, 0xb3, 0xf2, 0xb9, 0x87,
	0x8a, 0x19, 0x75, 0xcb, 0x70, 0x69, 0xd3, 0x6c, 0xff, 0x5d, 0x86, 0xab, 0x77, 0xbc, 0x83, 0x1e,
	0x77, 0x99, 0x9d, 0xcd, 0xa6, 0xbf, 0xd8, 0xf6, 0xf8, 0x7a, 0xe9, 0x2d, 0xda, 0x5e, 0x05, 0x91,
	0xdb, 0x1f, 0x62, 0x61, 0x00, 0xb6, 0x00, 0x66, 0xba, 0xc6, 0x63, 0x15, 0xf3, 0x3f, 0x2c, 0xf2,
	0x17, 0xda, 0x21, 0xd9, 0x23, 0x53, 0xed, 0x05, 0xad, 0x4f, 0xc5, 0x17, 0x1a, 0x05, 0x98, 0xcd,
	0xb5, 0x68, 0x95, 0x14, 0xf0, 0xe3, 0x22, 0xf0, 0xac, 0x8d, 0x90, 0x30, 0xa7, 0xe3, 0x2f, 0x68,
	0x7d, 0x3a, 0xff, 0x42, 0xbb, 0x0f, 0xcb, 0xf3, 0x4d, 0x26, 0x5a, 0x65, 0x05, 0x6d, 0x17, 0xa1,
	0x8b, 0x2b, 0xb0, 0xdb, 0x90, 0xa1, 0x0e, 0xb3, 0x75, 0x27, 0x28, 0xcc, 0xf6, 0x9d, 0xd0, 0x1c,
	0x78, 0xa7, 0x20, 0xb2, 0x68, 0x2d, 0x29, 0xf2, 0xb9, 0x55, 0xbe, 0x2a, 0x43, 0xbd, 0x99, 0x57,
	0x59, 0xd0, 0x66, 0x5e, 0x64, 0xa1, 0xdd, 0x85, 0x5a, 0xda, 0x95, 0xa2, 0x55, 0x51, 0x3f, 0xf0,
	0xbf, 0x6d, 0xb9, 0x1c, 0xcf, 0x7c, 0xd2, 0x96, 0x82, 0x56, 0x93, 0xae, 0x14, 0xdd, 0xbf, 0xf0,
	0xc9, 0x84, 0xe0, 0xd3, 0x09, 0xc1, 0xcf, 0x27, 0x04, 0xbd, 0x9c, 0x10, 0xfc, 0x6a, 0x42, 0xd0,
	0xeb, 0x09, 0x41, 0x6f, 0x26, 0x04, 0x3f, 0x92, 0x04, 0x3f, 0x96, 0x04, 0x3d, 0x95, 0x04, 0x1f,
	0x49, 0x82, 0x8e, 0x25, 0x41, 0xcf, 0x24, 0xc1, 0x27, 0x92, 0xe0, 0x53, 0x49, 0xf0, 0x73, 0x49,
	0xd0, 0x4b, 0x49, 0xf0, 0x2b, 0x49, 0xd0, 0x6b, 0x49, 0xf0, 0x1b, 0x49, 0xd0, 0xa3, 0x88, 0xa0,
	0xc7, 0x11, 0xc1, 0xbf, 0x47, 0x04, 0xfd, 0x11, 0x11, 0xfc, 0x24, 0x22, 0xe8, 0x69, 0x44, 0xd0,
	0x51, 0x44, 0xf0, 0x71, 0x44, 0xf0, 0xb3, 0x88, 0xe0, 0x9f, 0x6f, 0x9c, 0x77, 0xa9, 0x04, 0xee,
	0xb0, 0xd7, 0xab, 0xa8, 0xff, 0xce, 0x5b, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x65, 0x50, 0x4e,
	0x32, 0xb6, 0x07, 0x00, 0x00,
}
