// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import fmt "fmt"

var _SessionKeyRequestFieldPaths = [...]string{
	"dev_eui",
	"session_key_id",
}

func (*SessionKeyRequest) FieldMaskPaths() []string {
	ret := make([]string, len(_SessionKeyRequestFieldPaths))
	copy(ret, _SessionKeyRequestFieldPaths[:])
	return ret
}

func (dst *SessionKeyRequest) SetFields(src *SessionKeyRequest, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "dev_eui":
			dst.DevEUI = src.DevEUI
		case "session_key_id":
			dst.SessionKeyID = src.SessionKeyID
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _NwkSKeysResponseFieldPaths = [...]string{
	"f_nwk_s_int_key",
	"f_nwk_s_int_key.kek_label",
	"f_nwk_s_int_key.key",
	"nwk_s_enc_key",
	"nwk_s_enc_key.kek_label",
	"nwk_s_enc_key.key",
	"s_nwk_s_int_key",
	"s_nwk_s_int_key.kek_label",
	"s_nwk_s_int_key.key",
}

func (*NwkSKeysResponse) FieldMaskPaths() []string {
	ret := make([]string, len(_NwkSKeysResponseFieldPaths))
	copy(ret, _NwkSKeysResponseFieldPaths[:])
	return ret
}

func (dst *NwkSKeysResponse) SetFields(src *NwkSKeysResponse, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "f_nwk_s_int_key":
			dst.FNwkSIntKey = src.FNwkSIntKey
		case "f_nwk_s_int_key.kek_label":
			dst.FNwkSIntKey.SetFields(&src.FNwkSIntKey, _pathsWithoutPrefix("f_nwk_s_int_key", paths)...)
		case "f_nwk_s_int_key.key":
			dst.FNwkSIntKey.SetFields(&src.FNwkSIntKey, _pathsWithoutPrefix("f_nwk_s_int_key", paths)...)
		case "nwk_s_enc_key":
			dst.NwkSEncKey = src.NwkSEncKey
		case "nwk_s_enc_key.kek_label":
			dst.NwkSEncKey.SetFields(&src.NwkSEncKey, _pathsWithoutPrefix("nwk_s_enc_key", paths)...)
		case "nwk_s_enc_key.key":
			dst.NwkSEncKey.SetFields(&src.NwkSEncKey, _pathsWithoutPrefix("nwk_s_enc_key", paths)...)
		case "s_nwk_s_int_key":
			dst.SNwkSIntKey = src.SNwkSIntKey
		case "s_nwk_s_int_key.kek_label":
			dst.SNwkSIntKey.SetFields(&src.SNwkSIntKey, _pathsWithoutPrefix("s_nwk_s_int_key", paths)...)
		case "s_nwk_s_int_key.key":
			dst.SNwkSIntKey.SetFields(&src.SNwkSIntKey, _pathsWithoutPrefix("s_nwk_s_int_key", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _AppSKeyResponseFieldPaths = [...]string{
	"app_s_key",
	"app_s_key.kek_label",
	"app_s_key.key",
}

func (*AppSKeyResponse) FieldMaskPaths() []string {
	ret := make([]string, len(_AppSKeyResponseFieldPaths))
	copy(ret, _AppSKeyResponseFieldPaths[:])
	return ret
}

func (dst *AppSKeyResponse) SetFields(src *AppSKeyResponse, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "app_s_key":
			dst.AppSKey = src.AppSKey
		case "app_s_key.kek_label":
			dst.AppSKey.SetFields(&src.AppSKey, _pathsWithoutPrefix("app_s_key", paths)...)
		case "app_s_key.key":
			dst.AppSKey.SetFields(&src.AppSKey, _pathsWithoutPrefix("app_s_key", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}
