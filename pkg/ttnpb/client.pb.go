// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/client.proto

package ttnpb

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
	time "time"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// The OAuth2 flows an OAuth client can use to get an access token.
type GrantType int32

const (
	// Grant type used to exchange an authorization code for an access token.
	GRANT_AUTHORIZATION_CODE GrantType = 0
	// Grant type used to exchange a user ID and password for an access token.
	GRANT_PASSWORD GrantType = 1
	// Grant type used to exchange a refresh token for an access token.
	GRANT_REFRESH_TOKEN GrantType = 2
)

var GrantType_name = map[int32]string{
	0: "GRANT_AUTHORIZATION_CODE",
	1: "GRANT_PASSWORD",
	2: "GRANT_REFRESH_TOKEN",
}

var GrantType_value = map[string]int32{
	"GRANT_AUTHORIZATION_CODE": 0,
	"GRANT_PASSWORD":           1,
	"GRANT_REFRESH_TOKEN":      2,
}

func (GrantType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c5f33a3b812bf10c, []int{0}
}

// An OAuth client on the network.
type Client struct {
	ClientIdentifiers `protobuf:"bytes,1,opt,name=ids,proto3,embedded=ids" json:"ids"`
	CreatedAt         time.Time `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
	UpdatedAt         time.Time `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at"`
	Name              string    `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description       string    `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Key-value attributes for this client. Typically used for organizing clients or for storing integration-specific data.
	Attributes map[string]string `protobuf:"bytes,6,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Contact information for this client. Typically used to indicate who to contact with technical/security questions about the application.
	ContactInfo []*ContactInfo `protobuf:"bytes,7,rep,name=contact_info,json=contactInfo,proto3" json:"contact_info,omitempty"`
	// The client secret is only visible to collaborators of the client.
	Secret string `protobuf:"bytes,8,opt,name=secret,proto3" json:"secret,omitempty"`
	// The allowed redirect URIs against which authorization requests are checked.
	// If the authorization request does not pass a redirect URI, the first one
	// from this list is taken.
	RedirectURIs []string `protobuf:"bytes,9,rep,name=redirect_uris,json=redirectUris,proto3" json:"redirect_uris,omitempty"`
	// The allowed logout redirect URIs against which client initiated logout
	// requests are checked. If the authorization request does not pass a redirect
	// URI, the first one from this list is taken.
	LogoutRedirectURIs []string `protobuf:"bytes,15,rep,name=logout_redirect_uris,json=logoutRedirectUris,proto3" json:"logout_redirect_uris,omitempty"`
	// The reviewing state of the client.
	// This field can only be modified by admins.
	State State `protobuf:"varint,10,opt,name=state,proto3,enum=ttn.lorawan.v3.State" json:"state,omitempty"`
	// If set, the authorization page will be skipped.
	// This field can only be modified by admins.
	SkipAuthorization bool `protobuf:"varint,11,opt,name=skip_authorization,json=skipAuthorization,proto3" json:"skip_authorization,omitempty"`
	// If set, the authorization page will show endorsement.
	// This field can only be modified by admins.
	Endorsed bool `protobuf:"varint,12,opt,name=endorsed,proto3" json:"endorsed,omitempty"`
	// OAuth flows that can be used for the client to get a token.
	// After a client is created, this field can only be modified by admins.
	Grants []GrantType `protobuf:"varint,13,rep,packed,name=grants,proto3,enum=ttn.lorawan.v3.GrantType" json:"grants,omitempty"`
	// Rights denotes what rights the client will have access to.
	// Users that previously authorized this client will have to re-authorize the
	// client after rights are added to this list.
	Rights               []Right  `protobuf:"varint,14,rep,packed,name=rights,proto3,enum=ttn.lorawan.v3.Right" json:"rights,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Client) Reset()      { *m = Client{} }
func (*Client) ProtoMessage() {}
func (*Client) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5f33a3b812bf10c, []int{0}
}
func (m *Client) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Client) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Client.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Client) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Client.Merge(m, src)
}
func (m *Client) XXX_Size() int {
	return m.Size()
}
func (m *Client) XXX_DiscardUnknown() {
	xxx_messageInfo_Client.DiscardUnknown(m)
}

var xxx_messageInfo_Client proto.InternalMessageInfo

func (m *Client) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *Client) GetUpdatedAt() time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return time.Time{}
}

func (m *Client) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Client) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Client) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Client) GetContactInfo() []*ContactInfo {
	if m != nil {
		return m.ContactInfo
	}
	return nil
}

func (m *Client) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *Client) GetRedirectURIs() []string {
	if m != nil {
		return m.RedirectURIs
	}
	return nil
}

func (m *Client) GetLogoutRedirectURIs() []string {
	if m != nil {
		return m.LogoutRedirectURIs
	}
	return nil
}

func (m *Client) GetState() State {
	if m != nil {
		return m.State
	}
	return STATE_REQUESTED
}

func (m *Client) GetSkipAuthorization() bool {
	if m != nil {
		return m.SkipAuthorization
	}
	return false
}

func (m *Client) GetEndorsed() bool {
	if m != nil {
		return m.Endorsed
	}
	return false
}

func (m *Client) GetGrants() []GrantType {
	if m != nil {
		return m.Grants
	}
	return nil
}

func (m *Client) GetRights() []Right {
	if m != nil {
		return m.Rights
	}
	return nil
}

type Clients struct {
	Clients              []*Client `protobuf:"bytes,1,rep,name=clients,proto3" json:"clients,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Clients) Reset()      { *m = Clients{} }
func (*Clients) ProtoMessage() {}
func (*Clients) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5f33a3b812bf10c, []int{1}
}
func (m *Clients) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clients) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clients.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Clients) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clients.Merge(m, src)
}
func (m *Clients) XXX_Size() int {
	return m.Size()
}
func (m *Clients) XXX_DiscardUnknown() {
	xxx_messageInfo_Clients.DiscardUnknown(m)
}

var xxx_messageInfo_Clients proto.InternalMessageInfo

func (m *Clients) GetClients() []*Client {
	if m != nil {
		return m.Clients
	}
	return nil
}

type GetClientRequest struct {
	ClientIdentifiers `protobuf:"bytes,1,opt,name=client_ids,json=clientIds,proto3,embedded=client_ids" json:"client_ids"`
	// The names of the client fields that should be returned.
	FieldMask            types.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetClientRequest) Reset()      { *m = GetClientRequest{} }
func (*GetClientRequest) ProtoMessage() {}
func (*GetClientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5f33a3b812bf10c, []int{2}
}
func (m *GetClientRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetClientRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetClientRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetClientRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClientRequest.Merge(m, src)
}
func (m *GetClientRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetClientRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClientRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetClientRequest proto.InternalMessageInfo

func (m *GetClientRequest) GetFieldMask() types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return types.FieldMask{}
}

type ListClientsRequest struct {
	// By default we list all OAuth clients the caller has rights on.
	// Set the user or the organization (not both) to instead list the OAuth clients
	// where the user or organization is collaborator on.
	Collaborator *OrganizationOrUserIdentifiers `protobuf:"bytes,1,opt,name=collaborator,proto3" json:"collaborator,omitempty"`
	// The names of the client fields that should be returned.
	FieldMask types.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask"`
	// Order the results by this field path (must be present in the field mask).
	// Default ordering is by ID. Prepend with a minus (-) to reverse the order.
	Order string `protobuf:"bytes,3,opt,name=order,proto3" json:"order,omitempty"`
	// Limit the number of results per page.
	Limit uint32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	// Page number for pagination. 0 is interpreted as 1.
	Page                 uint32   `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListClientsRequest) Reset()      { *m = ListClientsRequest{} }
func (*ListClientsRequest) ProtoMessage() {}
func (*ListClientsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5f33a3b812bf10c, []int{3}
}
func (m *ListClientsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListClientsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListClientsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListClientsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClientsRequest.Merge(m, src)
}
func (m *ListClientsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListClientsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClientsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListClientsRequest proto.InternalMessageInfo

func (m *ListClientsRequest) GetCollaborator() *OrganizationOrUserIdentifiers {
	if m != nil {
		return m.Collaborator
	}
	return nil
}

func (m *ListClientsRequest) GetFieldMask() types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return types.FieldMask{}
}

func (m *ListClientsRequest) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *ListClientsRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListClientsRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type CreateClientRequest struct {
	Client `protobuf:"bytes,1,opt,name=client,proto3,embedded=client" json:"client"`
	// Collaborator to grant all rights on the newly created client.
	Collaborator         OrganizationOrUserIdentifiers `protobuf:"bytes,2,opt,name=collaborator,proto3" json:"collaborator"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *CreateClientRequest) Reset()      { *m = CreateClientRequest{} }
func (*CreateClientRequest) ProtoMessage() {}
func (*CreateClientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5f33a3b812bf10c, []int{4}
}
func (m *CreateClientRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateClientRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateClientRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateClientRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClientRequest.Merge(m, src)
}
func (m *CreateClientRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateClientRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClientRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClientRequest proto.InternalMessageInfo

func (m *CreateClientRequest) GetCollaborator() OrganizationOrUserIdentifiers {
	if m != nil {
		return m.Collaborator
	}
	return OrganizationOrUserIdentifiers{}
}

type UpdateClientRequest struct {
	Client `protobuf:"bytes,1,opt,name=client,proto3,embedded=client" json:"client"`
	// The names of the client fields that should be updated.
	FieldMask            types.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *UpdateClientRequest) Reset()      { *m = UpdateClientRequest{} }
func (*UpdateClientRequest) ProtoMessage() {}
func (*UpdateClientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5f33a3b812bf10c, []int{5}
}
func (m *UpdateClientRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateClientRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateClientRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateClientRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateClientRequest.Merge(m, src)
}
func (m *UpdateClientRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateClientRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateClientRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateClientRequest proto.InternalMessageInfo

func (m *UpdateClientRequest) GetFieldMask() types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return types.FieldMask{}
}

type ListClientCollaboratorsRequest struct {
	ClientIdentifiers `protobuf:"bytes,1,opt,name=client_ids,json=clientIds,proto3,embedded=client_ids" json:"client_ids"`
	// Limit the number of results per page.
	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// Page number for pagination. 0 is interpreted as 1.
	Page                 uint32   `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListClientCollaboratorsRequest) Reset()      { *m = ListClientCollaboratorsRequest{} }
func (*ListClientCollaboratorsRequest) ProtoMessage() {}
func (*ListClientCollaboratorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5f33a3b812bf10c, []int{6}
}
func (m *ListClientCollaboratorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListClientCollaboratorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListClientCollaboratorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListClientCollaboratorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClientCollaboratorsRequest.Merge(m, src)
}
func (m *ListClientCollaboratorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListClientCollaboratorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClientCollaboratorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListClientCollaboratorsRequest proto.InternalMessageInfo

func (m *ListClientCollaboratorsRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListClientCollaboratorsRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type GetClientCollaboratorRequest struct {
	ClientIdentifiers             `protobuf:"bytes,1,opt,name=client_ids,json=clientIds,proto3,embedded=client_ids" json:"client_ids"`
	OrganizationOrUserIdentifiers `protobuf:"bytes,2,opt,name=collaborator,proto3,embedded=collaborator" json:"collaborator"`
	XXX_NoUnkeyedLiteral          struct{} `json:"-"`
	XXX_sizecache                 int32    `json:"-"`
}

func (m *GetClientCollaboratorRequest) Reset()      { *m = GetClientCollaboratorRequest{} }
func (*GetClientCollaboratorRequest) ProtoMessage() {}
func (*GetClientCollaboratorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5f33a3b812bf10c, []int{7}
}
func (m *GetClientCollaboratorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetClientCollaboratorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetClientCollaboratorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetClientCollaboratorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClientCollaboratorRequest.Merge(m, src)
}
func (m *GetClientCollaboratorRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetClientCollaboratorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClientCollaboratorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetClientCollaboratorRequest proto.InternalMessageInfo

type SetClientCollaboratorRequest struct {
	ClientIdentifiers    `protobuf:"bytes,1,opt,name=client_ids,json=clientIds,proto3,embedded=client_ids" json:"client_ids"`
	Collaborator         Collaborator `protobuf:"bytes,2,opt,name=collaborator,proto3" json:"collaborator"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SetClientCollaboratorRequest) Reset()      { *m = SetClientCollaboratorRequest{} }
func (*SetClientCollaboratorRequest) ProtoMessage() {}
func (*SetClientCollaboratorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5f33a3b812bf10c, []int{8}
}
func (m *SetClientCollaboratorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetClientCollaboratorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetClientCollaboratorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetClientCollaboratorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetClientCollaboratorRequest.Merge(m, src)
}
func (m *SetClientCollaboratorRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetClientCollaboratorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetClientCollaboratorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetClientCollaboratorRequest proto.InternalMessageInfo

func (m *SetClientCollaboratorRequest) GetCollaborator() Collaborator {
	if m != nil {
		return m.Collaborator
	}
	return Collaborator{}
}

func init() {
	proto.RegisterEnum("ttn.lorawan.v3.GrantType", GrantType_name, GrantType_value)
	golang_proto.RegisterEnum("ttn.lorawan.v3.GrantType", GrantType_name, GrantType_value)
	proto.RegisterType((*Client)(nil), "ttn.lorawan.v3.Client")
	golang_proto.RegisterType((*Client)(nil), "ttn.lorawan.v3.Client")
	proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.Client.AttributesEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.Client.AttributesEntry")
	proto.RegisterType((*Clients)(nil), "ttn.lorawan.v3.Clients")
	golang_proto.RegisterType((*Clients)(nil), "ttn.lorawan.v3.Clients")
	proto.RegisterType((*GetClientRequest)(nil), "ttn.lorawan.v3.GetClientRequest")
	golang_proto.RegisterType((*GetClientRequest)(nil), "ttn.lorawan.v3.GetClientRequest")
	proto.RegisterType((*ListClientsRequest)(nil), "ttn.lorawan.v3.ListClientsRequest")
	golang_proto.RegisterType((*ListClientsRequest)(nil), "ttn.lorawan.v3.ListClientsRequest")
	proto.RegisterType((*CreateClientRequest)(nil), "ttn.lorawan.v3.CreateClientRequest")
	golang_proto.RegisterType((*CreateClientRequest)(nil), "ttn.lorawan.v3.CreateClientRequest")
	proto.RegisterType((*UpdateClientRequest)(nil), "ttn.lorawan.v3.UpdateClientRequest")
	golang_proto.RegisterType((*UpdateClientRequest)(nil), "ttn.lorawan.v3.UpdateClientRequest")
	proto.RegisterType((*ListClientCollaboratorsRequest)(nil), "ttn.lorawan.v3.ListClientCollaboratorsRequest")
	golang_proto.RegisterType((*ListClientCollaboratorsRequest)(nil), "ttn.lorawan.v3.ListClientCollaboratorsRequest")
	proto.RegisterType((*GetClientCollaboratorRequest)(nil), "ttn.lorawan.v3.GetClientCollaboratorRequest")
	golang_proto.RegisterType((*GetClientCollaboratorRequest)(nil), "ttn.lorawan.v3.GetClientCollaboratorRequest")
	proto.RegisterType((*SetClientCollaboratorRequest)(nil), "ttn.lorawan.v3.SetClientCollaboratorRequest")
	golang_proto.RegisterType((*SetClientCollaboratorRequest)(nil), "ttn.lorawan.v3.SetClientCollaboratorRequest")
}

func init() { proto.RegisterFile("lorawan-stack/api/client.proto", fileDescriptor_c5f33a3b812bf10c) }
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/client.proto", fileDescriptor_c5f33a3b812bf10c)
}

var fileDescriptor_c5f33a3b812bf10c = []byte{
	// 1250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x4d, 0x6c, 0x13, 0x47,
	0x14, 0xde, 0xb1, 0x63, 0x3b, 0x9e, 0xfc, 0xe0, 0x0e, 0x94, 0x6e, 0x43, 0x3a, 0x71, 0xdd, 0x08,
	0x19, 0x84, 0x6d, 0x64, 0x84, 0xd4, 0xd2, 0x9f, 0xe0, 0x0d, 0x01, 0xa2, 0xd2, 0xb8, 0x9d, 0x24,
	0xaa, 0x04, 0xa5, 0xd6, 0xc6, 0x9e, 0x6c, 0x46, 0xb6, 0x77, 0xdd, 0x99, 0x71, 0x68, 0xa8, 0x2a,
	0xa1, 0x9e, 0x50, 0x4f, 0xa8, 0x27, 0xd4, 0x53, 0xa5, 0xaa, 0x2a, 0x47, 0xd4, 0x53, 0x8e, 0xa8,
	0x27, 0x8e, 0xb9, 0x95, 0x53, 0x8a, 0xd7, 0x17, 0x8e, 0x1c, 0x51, 0x4e, 0xd5, 0xce, 0xae, 0x63,
	0x3b, 0x36, 0x48, 0x2d, 0xd0, 0x93, 0xe7, 0xcd, 0xfb, 0xde, 0x37, 0x6f, 0xde, 0x7c, 0xef, 0xad,
	0x21, 0xae, 0x39, 0xdc, 0xbc, 0x61, 0xda, 0x19, 0x21, 0xcd, 0x72, 0x35, 0x67, 0x36, 0x58, 0xae,
	0x5c, 0x63, 0xd4, 0x96, 0xd9, 0x06, 0x77, 0xa4, 0x83, 0x26, 0xa5, 0xb4, 0xb3, 0x01, 0x26, 0xbb,
	0x79, 0x66, 0xaa, 0x60, 0x31, 0xb9, 0xd1, 0x5c, 0xcb, 0x96, 0x9d, 0x7a, 0x8e, 0xda, 0x9b, 0xce,
	0x56, 0x83, 0x3b, 0xdf, 0x6e, 0xe5, 0x14, 0xb8, 0x9c, 0xb1, 0xa8, 0x9d, 0xd9, 0x34, 0x6b, 0xac,
	0x62, 0x4a, 0x9a, 0x1b, 0x58, 0xf8, 0x94, 0x53, 0x99, 0x1e, 0x0a, 0xcb, 0xb1, 0x1c, 0x3f, 0x78,
	0xad, 0xb9, 0xae, 0x2c, 0x65, 0xa8, 0x55, 0x00, 0x4f, 0x5a, 0x8e, 0x63, 0xd5, 0x68, 0x17, 0xb5,
	0xce, 0x68, 0xad, 0x52, 0xaa, 0x9b, 0xa2, 0x1a, 0x20, 0x66, 0x0e, 0x22, 0x24, 0xab, 0x53, 0x21,
	0xcd, 0x7a, 0x23, 0x00, 0xcc, 0x0e, 0xb9, 0xa4, 0x63, 0x4b, 0xb3, 0x2c, 0x4b, 0xcc, 0x5e, 0xef,
	0x1c, 0xf4, 0xce, 0x20, 0x8a, 0xda, 0xcd, 0xba, 0x08, 0xdc, 0xef, 0x0d, 0xba, 0x59, 0x85, 0xda,
	0x92, 0xad, 0x33, 0xca, 0x3b, 0xa0, 0x21, 0xe5, 0xe4, 0xcc, 0xda, 0x90, 0x81, 0x3f, 0xf5, 0x47,
	0x0c, 0x46, 0xe7, 0x55, 0x7d, 0xd1, 0x02, 0x0c, 0xb3, 0x8a, 0xd0, 0x41, 0x12, 0xa4, 0xc7, 0xf2,
	0xef, 0x66, 0xfb, 0xeb, 0x9c, 0xf5, 0x41, 0x8b, 0xdd, 0x03, 0x8c, 0xc4, 0x9e, 0x11, 0xf9, 0x11,
	0x84, 0x12, 0xe0, 0xe1, 0xee, 0x8c, 0xb6, 0xb3, 0x3b, 0x03, 0x88, 0x17, 0x8f, 0xe6, 0x21, 0x2c,
	0x73, 0x6a, 0x4a, 0x5a, 0x29, 0x99, 0x52, 0x0f, 0x29, 0xb6, 0xa9, 0xac, 0x5f, 0x91, 0x6c, 0xa7,
	0x22, 0xd9, 0x95, 0x4e, 0x45, 0x8c, 0x51, 0x2f, 0xfc, 0xce, 0xdf, 0x33, 0x80, 0xc4, 0x83, 0xb8,
	0x82, 0xf4, 0x48, 0x9a, 0x8d, 0x4a, 0x87, 0x24, 0xfc, 0x6f, 0x48, 0x82, 0xb8, 0x82, 0x44, 0xc7,
	0xe0, 0x88, 0x6d, 0xd6, 0xa9, 0x3e, 0x92, 0x04, 0xe9, 0xb8, 0x11, 0xdb, 0x33, 0x46, 0x78, 0x48,
	0xcf, 0x13, 0xb5, 0x89, 0x4e, 0xc2, 0xb1, 0x0a, 0x15, 0x65, 0xce, 0x1a, 0x92, 0x39, 0xb6, 0x1e,
	0x51, 0x98, 0xd1, 0x3d, 0x23, 0xc2, 0xc3, 0xfa, 0xce, 0x21, 0xd2, 0xeb, 0x44, 0x12, 0x42, 0x53,
	0x4a, 0xce, 0xd6, 0x9a, 0x92, 0x0a, 0x3d, 0x9a, 0x0c, 0xa7, 0xc7, 0xf2, 0xc7, 0x87, 0x17, 0x28,
	0x5b, 0xd8, 0x07, 0x2e, 0xd8, 0x92, 0x6f, 0x19, 0xa7, 0xf6, 0x8c, 0x13, 0x3f, 0x83, 0xe3, 0xa9,
	0x59, 0x9e, 0xd2, 0x67, 0xf3, 0xf8, 0xeb, 0x6b, 0x66, 0xe6, 0xe6, 0xe9, 0xcc, 0x07, 0xd7, 0xd3,
	0x73, 0xe7, 0xae, 0x65, 0xae, 0xcf, 0x75, 0xcc, 0x13, 0xdf, 0xe5, 0x4f, 0x7d, 0x3f, 0x4b, 0x7a,
	0xce, 0x41, 0x9f, 0xc0, 0xf1, 0x5e, 0x51, 0xe8, 0x31, 0x75, 0xee, 0xb1, 0x81, 0x73, 0x7d, 0xcc,
	0xa2, 0xbd, 0xee, 0x90, 0xb1, 0x72, 0xd7, 0x40, 0x47, 0x61, 0x54, 0xd0, 0x32, 0xa7, 0x52, 0x1f,
	0xf5, 0x2e, 0x47, 0x02, 0x0b, 0x9d, 0x85, 0x13, 0x9c, 0x56, 0x18, 0xa7, 0x65, 0x59, 0x6a, 0x72,
	0x26, 0xf4, 0x78, 0x32, 0x9c, 0x8e, 0x1b, 0x09, 0x77, 0x77, 0x66, 0x9c, 0x04, 0x8e, 0x55, 0xb2,
	0x28, 0xc8, 0x78, 0x07, 0xb6, 0xca, 0x99, 0x40, 0x97, 0xe1, 0x91, 0x9a, 0x63, 0x39, 0x4d, 0x59,
	0xea, 0x8f, 0x3e, 0xa4, 0xa2, 0x8f, 0xba, 0xbb, 0x33, 0xe8, 0x8a, 0xf2, 0xf7, 0x71, 0xa0, 0x5a,
	0xff, 0x9e, 0xc7, 0x74, 0x16, 0x46, 0x84, 0x34, 0x25, 0xd5, 0x61, 0x12, 0xa4, 0x27, 0xf3, 0x6f,
	0x1e, 0xbc, 0xd1, 0xb2, 0xe7, 0x54, 0x6f, 0xf1, 0x83, 0x27, 0x2f, 0xe2, 0xa3, 0x51, 0x06, 0x22,
	0x51, 0x65, 0x8d, 0x92, 0xd9, 0x94, 0x1b, 0x0e, 0x67, 0x37, 0x4d, 0xf5, 0x70, 0x63, 0x49, 0x90,
	0x1e, 0x25, 0x6f, 0x78, 0x9e, 0x42, 0xaf, 0x03, 0x4d, 0xc1, 0x51, 0x6a, 0x57, 0x1c, 0x2e, 0x68,
	0x45, 0x1f, 0x57, 0xa0, 0x7d, 0x1b, 0x9d, 0x87, 0x51, 0x8b, 0x9b, 0xb6, 0x14, 0xfa, 0x44, 0x32,
	0x9c, 0x9e, 0xcc, 0xbf, 0x7d, 0x30, 0x85, 0x4b, 0x9e, 0x77, 0x65, 0xab, 0x41, 0x8d, 0x89, 0x3d,
	0x03, 0xfe, 0x04, 0x62, 0xa9, 0x20, 0x97, 0x20, 0x0e, 0x7d, 0x04, 0xa3, 0x7e, 0x1f, 0xe9, 0x93,
	0x8a, 0x61, 0xe0, 0x12, 0xc4, 0xf3, 0x0e, 0x44, 0xfb, 0x31, 0x53, 0x1f, 0xc3, 0x43, 0x07, 0x74,
	0x82, 0x12, 0x30, 0x5c, 0xa5, 0x5b, 0xaa, 0xfb, 0xe2, 0xc4, 0x5b, 0xa2, 0x23, 0x30, 0xb2, 0x69,
	0xd6, 0x9a, 0x54, 0xf5, 0x50, 0x9c, 0xf8, 0xc6, 0xb9, 0xd0, 0xfb, 0x20, 0xf5, 0x21, 0x8c, 0xf9,
	0x6a, 0x13, 0xe8, 0x34, 0x8c, 0xf9, 0xe3, 0xd1, 0x6b, 0x5c, 0x4f, 0x1f, 0x47, 0x87, 0xeb, 0x92,
	0x74, 0x60, 0xa9, 0xdf, 0x01, 0x4c, 0x5c, 0xa2, 0x32, 0xd8, 0xa6, 0xdf, 0x34, 0xa9, 0x90, 0x88,
	0x40, 0xe8, 0xfb, 0x4b, 0x2f, 0x39, 0x02, 0xe2, 0xe5, 0x00, 0x24, 0xd0, 0x1c, 0x84, 0xdd, 0xc9,
	0xf8, 0xdc, 0x41, 0x70, 0xd1, 0x83, 0x7c, 0x66, 0x8a, 0xaa, 0x31, 0xe2, 0x91, 0x90, 0xf8, 0x7a,
	0x67, 0x23, 0xb5, 0x1d, 0x82, 0xe8, 0x0a, 0x13, 0x41, 0xaa, 0xa2, 0x93, 0xeb, 0x17, 0x5e, 0x5f,
	0xd4, 0x6a, 0xe6, 0x9a, 0xc3, 0x4d, 0xe9, 0xf0, 0x20, 0xdb, 0xcc, 0xc1, 0x6c, 0x8b, 0xdc, 0x32,
	0xed, 0x40, 0x0c, 0x45, 0xbe, 0x2a, 0x28, 0xef, 0xc9, 0x9c, 0xf4, 0x51, 0xbc, 0x74, 0xaa, 0xe8,
	0x2a, 0x8c, 0x38, 0xbc, 0x42, 0xb9, 0x1a, 0x55, 0x71, 0xe3, 0xc2, 0x9e, 0x51, 0xe0, 0x73, 0x44,
	0xeb, 0x94, 0xa3, 0xc4, 0x2a, 0x04, 0x66, 0xba, 0x6b, 0x35, 0x82, 0x48, 0x24, 0xa3, 0x7e, 0x7a,
	0xc6, 0x25, 0x19, 0xcb, 0xf4, 0x18, 0x3e, 0x25, 0xc2, 0x30, 0x52, 0x63, 0x75, 0x26, 0xd5, 0x1c,
	0x9b, 0x50, 0x7d, 0x71, 0x32, 0xac, 0x3f, 0x89, 0x11, 0x7f, 0x1b, 0x21, 0x38, 0xd2, 0x30, 0x2d,
	0xaa, 0x46, 0xd8, 0x04, 0x51, 0xeb, 0xd4, 0x36, 0x80, 0x87, 0xe7, 0x15, 0x53, 0xff, 0x3b, 0x9f,
	0x87, 0x51, 0x3f, 0x8b, 0xa0, 0x6a, 0xcf, 0x51, 0xcb, 0x90, 0x87, 0x0d, 0xe2, 0x50, 0xe9, 0x40,
	0xf5, 0x43, 0xff, 0xa1, 0xfa, 0xc6, 0x78, 0x2f, 0x7d, 0xff, 0x5b, 0xa4, 0xee, 0x02, 0x78, 0x78,
	0x55, 0xcd, 0xf0, 0x57, 0x9d, 0xfa, 0x4b, 0x0b, 0xf2, 0x1e, 0x80, 0xb8, 0x2b, 0xc8, 0xf9, 0x9e,
	0xac, 0xc5, 0xeb, 0x6c, 0xa4, 0x7d, 0x01, 0x84, 0x5e, 0x2c, 0x80, 0x70, 0x8f, 0x00, 0xfe, 0x02,
	0x70, 0x7a, 0xbf, 0xcb, 0x7b, 0x33, 0x7d, 0x9d, 0x89, 0x96, 0x5f, 0x85, 0x36, 0x06, 0x4f, 0xe8,
	0xd7, 0xc7, 0x9f, 0x00, 0x4e, 0x2f, 0xff, 0xdf, 0x37, 0x5b, 0x1a, 0x7a, 0xb3, 0xe9, 0xc1, 0x6f,
	0x71, 0x17, 0xf3, 0x22, 0x91, 0x9f, 0xfc, 0x0a, 0xc6, 0xf7, 0x3f, 0x31, 0x68, 0x1a, 0xea, 0x97,
	0x48, 0x61, 0x69, 0xa5, 0x54, 0x58, 0x5d, 0xb9, 0x5c, 0x24, 0x8b, 0x57, 0x0b, 0x2b, 0x8b, 0xc5,
	0xa5, 0xd2, 0x7c, 0xf1, 0xc2, 0x42, 0x42, 0x43, 0x08, 0x4e, 0xfa, 0xde, 0xcf, 0x0b, 0xcb, 0xcb,
	0x5f, 0x16, 0xc9, 0x85, 0x04, 0x40, 0x6f, 0xc1, 0xc3, 0xfe, 0x1e, 0x59, 0xb8, 0x48, 0x16, 0x96,
	0x2f, 0x97, 0x56, 0x8a, 0x9f, 0x2e, 0x2c, 0x25, 0x42, 0x53, 0x23, 0xb7, 0x7f, 0xc5, 0x9a, 0xf1,
	0x1b, 0x78, 0xd8, 0xc2, 0x60, 0xa7, 0x85, 0xc1, 0xa3, 0x16, 0xd6, 0x1e, 0xb7, 0xb0, 0xf6, 0xa4,
	0x85, 0xb5, 0xa7, 0x2d, 0xac, 0x3d, 0x6b, 0x61, 0x70, 0xcb, 0xc5, 0xe0, 0xb6, 0x8b, 0xb5, 0x7b,
	0x2e, 0x06, 0xf7, 0x5d, 0xac, 0x6d, 0xbb, 0x58, 0x7b, 0xe0, 0x62, 0xed, 0xa1, 0x8b, 0xc1, 0x8e,
	0x8b, 0xc1, 0x23, 0x17, 0x6b, 0x8f, 0x5d, 0x0c, 0x9e, 0xb8, 0x58, 0x7b, 0xea, 0x62, 0xf0, 0xcc,
	0xc5, 0xda, 0xad, 0x36, 0xd6, 0x6e, 0xb7, 0x31, 0xb8, 0xd3, 0xc6, 0xda, 0xdd, 0x36, 0x06, 0xbf,
	0xb4, 0xb1, 0x76, 0xaf, 0x8d, 0xb5, 0xfb, 0x6d, 0x0c, 0xb6, 0xdb, 0x18, 0x3c, 0x68, 0x63, 0x70,
	0x35, 0x67, 0x39, 0x59, 0xb9, 0x41, 0xe5, 0x06, 0xb3, 0x2d, 0x91, 0xb5, 0xa9, 0xbc, 0xe1, 0xf0,
	0x6a, 0xae, 0xff, 0x0f, 0xe8, 0xe6, 0x99, 0x5c, 0xa3, 0x6a, 0xe5, 0xa4, 0xb4, 0x1b, 0x6b, 0x6b,
	0x51, 0xd5, 0x74, 0x67, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0x5a, 0x1e, 0x69, 0x30, 0xf4, 0x0b,
	0x00, 0x00,
}

func (x GrantType) String() string {
	s, ok := GrantType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Client) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Client)
	if !ok {
		that2, ok := that.(Client)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClientIdentifiers.Equal(&that1.ClientIdentifiers) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return false
	}
	for i := range this.Attributes {
		if this.Attributes[i] != that1.Attributes[i] {
			return false
		}
	}
	if len(this.ContactInfo) != len(that1.ContactInfo) {
		return false
	}
	for i := range this.ContactInfo {
		if !this.ContactInfo[i].Equal(that1.ContactInfo[i]) {
			return false
		}
	}
	if this.Secret != that1.Secret {
		return false
	}
	if len(this.RedirectURIs) != len(that1.RedirectURIs) {
		return false
	}
	for i := range this.RedirectURIs {
		if this.RedirectURIs[i] != that1.RedirectURIs[i] {
			return false
		}
	}
	if len(this.LogoutRedirectURIs) != len(that1.LogoutRedirectURIs) {
		return false
	}
	for i := range this.LogoutRedirectURIs {
		if this.LogoutRedirectURIs[i] != that1.LogoutRedirectURIs[i] {
			return false
		}
	}
	if this.State != that1.State {
		return false
	}
	if this.SkipAuthorization != that1.SkipAuthorization {
		return false
	}
	if this.Endorsed != that1.Endorsed {
		return false
	}
	if len(this.Grants) != len(that1.Grants) {
		return false
	}
	for i := range this.Grants {
		if this.Grants[i] != that1.Grants[i] {
			return false
		}
	}
	if len(this.Rights) != len(that1.Rights) {
		return false
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return false
		}
	}
	return true
}
func (this *Clients) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clients)
	if !ok {
		that2, ok := that.(Clients)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Clients) != len(that1.Clients) {
		return false
	}
	for i := range this.Clients {
		if !this.Clients[i].Equal(that1.Clients[i]) {
			return false
		}
	}
	return true
}
func (this *GetClientRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetClientRequest)
	if !ok {
		that2, ok := that.(GetClientRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClientIdentifiers.Equal(&that1.ClientIdentifiers) {
		return false
	}
	if !this.FieldMask.Equal(&that1.FieldMask) {
		return false
	}
	return true
}
func (this *ListClientsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListClientsRequest)
	if !ok {
		that2, ok := that.(ListClientsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Collaborator.Equal(that1.Collaborator) {
		return false
	}
	if !this.FieldMask.Equal(&that1.FieldMask) {
		return false
	}
	if this.Order != that1.Order {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	return true
}
func (this *CreateClientRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateClientRequest)
	if !ok {
		that2, ok := that.(CreateClientRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Client.Equal(&that1.Client) {
		return false
	}
	if !this.Collaborator.Equal(&that1.Collaborator) {
		return false
	}
	return true
}
func (this *UpdateClientRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateClientRequest)
	if !ok {
		that2, ok := that.(UpdateClientRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Client.Equal(&that1.Client) {
		return false
	}
	if !this.FieldMask.Equal(&that1.FieldMask) {
		return false
	}
	return true
}
func (this *ListClientCollaboratorsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListClientCollaboratorsRequest)
	if !ok {
		that2, ok := that.(ListClientCollaboratorsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClientIdentifiers.Equal(&that1.ClientIdentifiers) {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	return true
}
func (this *GetClientCollaboratorRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetClientCollaboratorRequest)
	if !ok {
		that2, ok := that.(GetClientCollaboratorRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClientIdentifiers.Equal(&that1.ClientIdentifiers) {
		return false
	}
	if !this.OrganizationOrUserIdentifiers.Equal(&that1.OrganizationOrUserIdentifiers) {
		return false
	}
	return true
}
func (this *SetClientCollaboratorRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetClientCollaboratorRequest)
	if !ok {
		that2, ok := that.(SetClientCollaboratorRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClientIdentifiers.Equal(&that1.ClientIdentifiers) {
		return false
	}
	if !this.Collaborator.Equal(&that1.Collaborator) {
		return false
	}
	return true
}
func (m *Client) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Client) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Client) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LogoutRedirectURIs) > 0 {
		for iNdEx := len(m.LogoutRedirectURIs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LogoutRedirectURIs[iNdEx])
			copy(dAtA[i:], m.LogoutRedirectURIs[iNdEx])
			i = encodeVarintClient(dAtA, i, uint64(len(m.LogoutRedirectURIs[iNdEx])))
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.Rights) > 0 {
		dAtA2 := make([]byte, len(m.Rights)*10)
		var j1 int
		for _, num := range m.Rights {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintClient(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Grants) > 0 {
		dAtA4 := make([]byte, len(m.Grants)*10)
		var j3 int
		for _, num := range m.Grants {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintClient(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x6a
	}
	if m.Endorsed {
		i--
		if m.Endorsed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.SkipAuthorization {
		i--
		if m.SkipAuthorization {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.State != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x50
	}
	if len(m.RedirectURIs) > 0 {
		for iNdEx := len(m.RedirectURIs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RedirectURIs[iNdEx])
			copy(dAtA[i:], m.RedirectURIs[iNdEx])
			i = encodeVarintClient(dAtA, i, uint64(len(m.RedirectURIs[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Secret) > 0 {
		i -= len(m.Secret)
		copy(dAtA[i:], m.Secret)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Secret)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ContactInfo) > 0 {
		for iNdEx := len(m.ContactInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContactInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClient(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Attributes) > 0 {
		for k := range m.Attributes {
			v := m.Attributes[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintClient(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintClient(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintClient(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintClient(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x1a
	n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintClient(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ClientIdentifiers.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClient(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Clients) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clients) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Clients) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Clients) > 0 {
		for iNdEx := len(m.Clients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Clients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClient(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetClientRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetClientRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetClientRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FieldMask.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClient(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ClientIdentifiers.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClient(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ListClientsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListClientsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListClientsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x28
	}
	if m.Limit != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Order) > 0 {
		i -= len(m.Order)
		copy(dAtA[i:], m.Order)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Order)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.FieldMask.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClient(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Collaborator != nil {
		{
			size, err := m.Collaborator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateClientRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateClientRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateClientRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Collaborator.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClient(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Client.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClient(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *UpdateClientRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateClientRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateClientRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FieldMask.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClient(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Client.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClient(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ListClientCollaboratorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListClientCollaboratorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListClientCollaboratorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.ClientIdentifiers.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClient(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetClientCollaboratorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetClientCollaboratorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetClientCollaboratorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.OrganizationOrUserIdentifiers.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClient(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ClientIdentifiers.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClient(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SetClientCollaboratorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetClientCollaboratorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetClientCollaboratorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Collaborator.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClient(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ClientIdentifiers.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClient(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintClient(dAtA []byte, offset int, v uint64) int {
	offset -= sovClient(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedClient(r randyClient, easy bool) *Client {
	this := &Client{}
	v1 := NewPopulatedClientIdentifiers(r, easy)
	this.ClientIdentifiers = *v1
	v2 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.CreatedAt = *v2
	v3 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.UpdatedAt = *v3
	this.Name = randStringClient(r)
	this.Description = randStringClient(r)
	if r.Intn(5) != 0 {
		v4 := r.Intn(10)
		this.Attributes = make(map[string]string)
		for i := 0; i < v4; i++ {
			this.Attributes[randStringClient(r)] = randStringClient(r)
		}
	}
	if r.Intn(5) != 0 {
		v5 := r.Intn(5)
		this.ContactInfo = make([]*ContactInfo, v5)
		for i := 0; i < v5; i++ {
			this.ContactInfo[i] = NewPopulatedContactInfo(r, easy)
		}
	}
	this.Secret = randStringClient(r)
	v6 := r.Intn(10)
	this.RedirectURIs = make([]string, v6)
	for i := 0; i < v6; i++ {
		this.RedirectURIs[i] = randStringClient(r)
	}
	this.State = State([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	this.SkipAuthorization = bool(r.Intn(2) == 0)
	this.Endorsed = bool(r.Intn(2) == 0)
	v7 := r.Intn(10)
	this.Grants = make([]GrantType, v7)
	for i := 0; i < v7; i++ {
		this.Grants[i] = GrantType([]int32{0, 1, 2}[r.Intn(3)])
	}
	v8 := r.Intn(10)
	this.Rights = make([]Right, v8)
	for i := 0; i < v8; i++ {
		this.Rights[i] = Right([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 56, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 57, 58, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55}[r.Intn(59)])
	}
	v9 := r.Intn(10)
	this.LogoutRedirectURIs = make([]string, v9)
	for i := 0; i < v9; i++ {
		this.LogoutRedirectURIs[i] = randStringClient(r)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedClients(r randyClient, easy bool) *Clients {
	this := &Clients{}
	if r.Intn(5) != 0 {
		v10 := r.Intn(5)
		this.Clients = make([]*Client, v10)
		for i := 0; i < v10; i++ {
			this.Clients[i] = NewPopulatedClient(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetClientRequest(r randyClient, easy bool) *GetClientRequest {
	this := &GetClientRequest{}
	v11 := NewPopulatedClientIdentifiers(r, easy)
	this.ClientIdentifiers = *v11
	v12 := types.NewPopulatedFieldMask(r, easy)
	this.FieldMask = *v12
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListClientsRequest(r randyClient, easy bool) *ListClientsRequest {
	this := &ListClientsRequest{}
	if r.Intn(5) != 0 {
		this.Collaborator = NewPopulatedOrganizationOrUserIdentifiers(r, easy)
	}
	v13 := types.NewPopulatedFieldMask(r, easy)
	this.FieldMask = *v13
	this.Order = randStringClient(r)
	this.Limit = r.Uint32()
	this.Page = r.Uint32()
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateClientRequest(r randyClient, easy bool) *CreateClientRequest {
	this := &CreateClientRequest{}
	v14 := NewPopulatedClient(r, easy)
	this.Client = *v14
	v15 := NewPopulatedOrganizationOrUserIdentifiers(r, easy)
	this.Collaborator = *v15
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateClientRequest(r randyClient, easy bool) *UpdateClientRequest {
	this := &UpdateClientRequest{}
	v16 := NewPopulatedClient(r, easy)
	this.Client = *v16
	v17 := types.NewPopulatedFieldMask(r, easy)
	this.FieldMask = *v17
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListClientCollaboratorsRequest(r randyClient, easy bool) *ListClientCollaboratorsRequest {
	this := &ListClientCollaboratorsRequest{}
	v18 := NewPopulatedClientIdentifiers(r, easy)
	this.ClientIdentifiers = *v18
	this.Limit = r.Uint32()
	this.Page = r.Uint32()
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetClientCollaboratorRequest(r randyClient, easy bool) *GetClientCollaboratorRequest {
	this := &GetClientCollaboratorRequest{}
	v19 := NewPopulatedClientIdentifiers(r, easy)
	this.ClientIdentifiers = *v19
	v20 := NewPopulatedOrganizationOrUserIdentifiers(r, easy)
	this.OrganizationOrUserIdentifiers = *v20
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSetClientCollaboratorRequest(r randyClient, easy bool) *SetClientCollaboratorRequest {
	this := &SetClientCollaboratorRequest{}
	v21 := NewPopulatedClientIdentifiers(r, easy)
	this.ClientIdentifiers = *v21
	v22 := NewPopulatedCollaborator(r, easy)
	this.Collaborator = *v22
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyClient interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneClient(r randyClient) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringClient(r randyClient) string {
	v23 := r.Intn(100)
	tmps := make([]rune, v23)
	for i := 0; i < v23; i++ {
		tmps[i] = randUTF8RuneClient(r)
	}
	return string(tmps)
}
func randUnrecognizedClient(r randyClient, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldClient(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldClient(dAtA []byte, r randyClient, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateClient(dAtA, uint64(key))
		v24 := r.Int63()
		if r.Intn(2) == 0 {
			v24 *= -1
		}
		dAtA = encodeVarintPopulateClient(dAtA, uint64(v24))
	case 1:
		dAtA = encodeVarintPopulateClient(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateClient(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateClient(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateClient(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateClient(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Client) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ClientIdentifiers.Size()
	n += 1 + l + sovClient(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovClient(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)
	n += 1 + l + sovClient(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if len(m.Attributes) > 0 {
		for k, v := range m.Attributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovClient(uint64(len(k))) + 1 + len(v) + sovClient(uint64(len(v)))
			n += mapEntrySize + 1 + sovClient(uint64(mapEntrySize))
		}
	}
	if len(m.ContactInfo) > 0 {
		for _, e := range m.ContactInfo {
			l = e.Size()
			n += 1 + l + sovClient(uint64(l))
		}
	}
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if len(m.RedirectURIs) > 0 {
		for _, s := range m.RedirectURIs {
			l = len(s)
			n += 1 + l + sovClient(uint64(l))
		}
	}
	if m.State != 0 {
		n += 1 + sovClient(uint64(m.State))
	}
	if m.SkipAuthorization {
		n += 2
	}
	if m.Endorsed {
		n += 2
	}
	if len(m.Grants) > 0 {
		l = 0
		for _, e := range m.Grants {
			l += sovClient(uint64(e))
		}
		n += 1 + sovClient(uint64(l)) + l
	}
	if len(m.Rights) > 0 {
		l = 0
		for _, e := range m.Rights {
			l += sovClient(uint64(e))
		}
		n += 1 + sovClient(uint64(l)) + l
	}
	if len(m.LogoutRedirectURIs) > 0 {
		for _, s := range m.LogoutRedirectURIs {
			l = len(s)
			n += 1 + l + sovClient(uint64(l))
		}
	}
	return n
}

func (m *Clients) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Clients) > 0 {
		for _, e := range m.Clients {
			l = e.Size()
			n += 1 + l + sovClient(uint64(l))
		}
	}
	return n
}

func (m *GetClientRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ClientIdentifiers.Size()
	n += 1 + l + sovClient(uint64(l))
	l = m.FieldMask.Size()
	n += 1 + l + sovClient(uint64(l))
	return n
}

func (m *ListClientsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Collaborator != nil {
		l = m.Collaborator.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	l = m.FieldMask.Size()
	n += 1 + l + sovClient(uint64(l))
	l = len(m.Order)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovClient(uint64(m.Limit))
	}
	if m.Page != 0 {
		n += 1 + sovClient(uint64(m.Page))
	}
	return n
}

func (m *CreateClientRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Client.Size()
	n += 1 + l + sovClient(uint64(l))
	l = m.Collaborator.Size()
	n += 1 + l + sovClient(uint64(l))
	return n
}

func (m *UpdateClientRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Client.Size()
	n += 1 + l + sovClient(uint64(l))
	l = m.FieldMask.Size()
	n += 1 + l + sovClient(uint64(l))
	return n
}

func (m *ListClientCollaboratorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ClientIdentifiers.Size()
	n += 1 + l + sovClient(uint64(l))
	if m.Limit != 0 {
		n += 1 + sovClient(uint64(m.Limit))
	}
	if m.Page != 0 {
		n += 1 + sovClient(uint64(m.Page))
	}
	return n
}

func (m *GetClientCollaboratorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ClientIdentifiers.Size()
	n += 1 + l + sovClient(uint64(l))
	l = m.OrganizationOrUserIdentifiers.Size()
	n += 1 + l + sovClient(uint64(l))
	return n
}

func (m *SetClientCollaboratorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ClientIdentifiers.Size()
	n += 1 + l + sovClient(uint64(l))
	l = m.Collaborator.Size()
	n += 1 + l + sovClient(uint64(l))
	return n
}

func sovClient(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClient(x uint64) (n int) {
	return sovClient((x << 1) ^ uint64((int64(x) >> 63)))
}
func (this *Client) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForContactInfo := "[]*ContactInfo{"
	for _, f := range this.ContactInfo {
		repeatedStringForContactInfo += strings.Replace(fmt.Sprintf("%v", f), "ContactInfo", "ContactInfo", 1) + ","
	}
	repeatedStringForContactInfo += "}"
	keysForAttributes := make([]string, 0, len(this.Attributes))
	for k := range this.Attributes {
		keysForAttributes = append(keysForAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributes)
	mapStringForAttributes := "map[string]string{"
	for _, k := range keysForAttributes {
		mapStringForAttributes += fmt.Sprintf("%v: %v,", k, this.Attributes[k])
	}
	mapStringForAttributes += "}"
	s := strings.Join([]string{`&Client{`,
		`ClientIdentifiers:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ClientIdentifiers), "ClientIdentifiers", "ClientIdentifiers", 1), `&`, ``, 1) + `,`,
		`CreatedAt:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`UpdatedAt:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Attributes:` + mapStringForAttributes + `,`,
		`ContactInfo:` + repeatedStringForContactInfo + `,`,
		`Secret:` + fmt.Sprintf("%v", this.Secret) + `,`,
		`RedirectURIs:` + fmt.Sprintf("%v", this.RedirectURIs) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`SkipAuthorization:` + fmt.Sprintf("%v", this.SkipAuthorization) + `,`,
		`Endorsed:` + fmt.Sprintf("%v", this.Endorsed) + `,`,
		`Grants:` + fmt.Sprintf("%v", this.Grants) + `,`,
		`Rights:` + fmt.Sprintf("%v", this.Rights) + `,`,
		`LogoutRedirectURIs:` + fmt.Sprintf("%v", this.LogoutRedirectURIs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Clients) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForClients := "[]*Client{"
	for _, f := range this.Clients {
		repeatedStringForClients += strings.Replace(f.String(), "Client", "Client", 1) + ","
	}
	repeatedStringForClients += "}"
	s := strings.Join([]string{`&Clients{`,
		`Clients:` + repeatedStringForClients + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetClientRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetClientRequest{`,
		`ClientIdentifiers:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ClientIdentifiers), "ClientIdentifiers", "ClientIdentifiers", 1), `&`, ``, 1) + `,`,
		`FieldMask:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.FieldMask), "FieldMask", "types.FieldMask", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListClientsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListClientsRequest{`,
		`Collaborator:` + strings.Replace(fmt.Sprintf("%v", this.Collaborator), "OrganizationOrUserIdentifiers", "OrganizationOrUserIdentifiers", 1) + `,`,
		`FieldMask:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.FieldMask), "FieldMask", "types.FieldMask", 1), `&`, ``, 1) + `,`,
		`Order:` + fmt.Sprintf("%v", this.Order) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateClientRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateClientRequest{`,
		`Client:` + strings.Replace(strings.Replace(this.Client.String(), "Client", "Client", 1), `&`, ``, 1) + `,`,
		`Collaborator:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Collaborator), "OrganizationOrUserIdentifiers", "OrganizationOrUserIdentifiers", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateClientRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateClientRequest{`,
		`Client:` + strings.Replace(strings.Replace(this.Client.String(), "Client", "Client", 1), `&`, ``, 1) + `,`,
		`FieldMask:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.FieldMask), "FieldMask", "types.FieldMask", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListClientCollaboratorsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListClientCollaboratorsRequest{`,
		`ClientIdentifiers:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ClientIdentifiers), "ClientIdentifiers", "ClientIdentifiers", 1), `&`, ``, 1) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetClientCollaboratorRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetClientCollaboratorRequest{`,
		`ClientIdentifiers:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ClientIdentifiers), "ClientIdentifiers", "ClientIdentifiers", 1), `&`, ``, 1) + `,`,
		`OrganizationOrUserIdentifiers:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.OrganizationOrUserIdentifiers), "OrganizationOrUserIdentifiers", "OrganizationOrUserIdentifiers", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetClientCollaboratorRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetClientCollaboratorRequest{`,
		`ClientIdentifiers:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ClientIdentifiers), "ClientIdentifiers", "ClientIdentifiers", 1), `&`, ``, 1) + `,`,
		`Collaborator:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Collaborator), "Collaborator", "Collaborator", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringClient(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Client) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Client: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Client: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClientIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowClient
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowClient
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthClient
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthClient
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowClient
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthClient
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthClient
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipClient(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthClient
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attributes[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactInfo = append(m.ContactInfo, &ContactInfo{})
			if err := m.ContactInfo[len(m.ContactInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectURIs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedirectURIs = append(m.RedirectURIs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipAuthorization", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SkipAuthorization = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endorsed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Endorsed = bool(v != 0)
		case 13:
			if wireType == 0 {
				var v GrantType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowClient
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= GrantType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Grants = append(m.Grants, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowClient
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthClient
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthClient
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Grants) == 0 {
					m.Grants = make([]GrantType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v GrantType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowClient
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= GrantType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Grants = append(m.Grants, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Grants", wireType)
			}
		case 14:
			if wireType == 0 {
				var v Right
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowClient
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Right(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rights = append(m.Rights, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowClient
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthClient
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthClient
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Rights) == 0 {
					m.Rights = make([]Right, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Right
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowClient
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Right(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rights = append(m.Rights, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rights", wireType)
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogoutRedirectURIs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogoutRedirectURIs = append(m.LogoutRedirectURIs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clients) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Clients: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Clients: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Clients = append(m.Clients, &Client{})
			if err := m.Clients[len(m.Clients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetClientRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetClientRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetClientRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClientIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListClientsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListClientsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListClientsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collaborator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Collaborator == nil {
				m.Collaborator = &OrganizationOrUserIdentifiers{}
			}
			if err := m.Collaborator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Order = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateClientRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateClientRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateClientRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Client.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collaborator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Collaborator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateClientRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateClientRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateClientRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Client.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListClientCollaboratorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListClientCollaboratorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListClientCollaboratorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClientIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetClientCollaboratorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetClientCollaboratorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetClientCollaboratorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClientIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationOrUserIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OrganizationOrUserIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetClientCollaboratorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetClientCollaboratorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetClientCollaboratorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClientIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collaborator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Collaborator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClient(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClient
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClient
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClient
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClient
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupClient
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthClient
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthClient        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClient          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupClient = fmt.Errorf("proto: unexpected end of group")
)
