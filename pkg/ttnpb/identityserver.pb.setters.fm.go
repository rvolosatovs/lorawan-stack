// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import fmt "fmt"

func (dst *AuthInfoResponse) SetFields(src *AuthInfoResponse, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "universal_rights":
			if len(subs) > 0 {
				newDst := dst.UniversalRights
				if newDst == nil {
					newDst = &Rights{}
					dst.UniversalRights = newDst
				}
				var newSrc *Rights
				if src != nil {
					newSrc = src.UniversalRights
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.UniversalRights = src.UniversalRights
				} else {
					dst.UniversalRights = nil
				}
			}
		case "is_admin":
			if len(subs) > 0 {
				return fmt.Errorf("'is_admin' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.IsAdmin = src.IsAdmin
			} else {
				var zero bool
				dst.IsAdmin = zero
			}

		case "access_method":
			if len(subs) == 0 && src == nil {
				dst.AccessMethod = nil
				continue
			} else if len(subs) == 0 {
				dst.AccessMethod = src.AccessMethod
				continue
			}

			subPathMap := _processPaths(subs)
			if len(subPathMap) > 1 {
				return fmt.Errorf("more than one field specified for oneof field '%s'", name)
			}
			for oneofName, oneofSubs := range subPathMap {
				switch oneofName {
				case "api_key":
					if _, ok := dst.AccessMethod.(*AuthInfoResponse_APIKey); !ok {
						dst.AccessMethod = &AuthInfoResponse_APIKey{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.AccessMethod.(*AuthInfoResponse_APIKey).APIKey
						if newDst == nil {
							newDst = &AuthInfoResponse_APIKeyAccess{}
							dst.AccessMethod.(*AuthInfoResponse_APIKey).APIKey = newDst
						}
						var newSrc *AuthInfoResponse_APIKeyAccess
						if src != nil {
							newSrc = src.GetAPIKey()
						}
						if err := newDst.SetFields(newSrc, oneofSubs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.AccessMethod.(*AuthInfoResponse_APIKey).APIKey = src.GetAPIKey()
						} else {
							dst.AccessMethod.(*AuthInfoResponse_APIKey).APIKey = nil
						}
					}
				case "oauth_access_token":
					if _, ok := dst.AccessMethod.(*AuthInfoResponse_OAuthAccessToken); !ok {
						dst.AccessMethod = &AuthInfoResponse_OAuthAccessToken{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.AccessMethod.(*AuthInfoResponse_OAuthAccessToken).OAuthAccessToken
						if newDst == nil {
							newDst = &OAuthAccessToken{}
							dst.AccessMethod.(*AuthInfoResponse_OAuthAccessToken).OAuthAccessToken = newDst
						}
						var newSrc *OAuthAccessToken
						if src != nil {
							newSrc = src.GetOAuthAccessToken()
						}
						if err := newDst.SetFields(newSrc, oneofSubs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.AccessMethod.(*AuthInfoResponse_OAuthAccessToken).OAuthAccessToken = src.GetOAuthAccessToken()
						} else {
							dst.AccessMethod.(*AuthInfoResponse_OAuthAccessToken).OAuthAccessToken = nil
						}
					}

				default:
					return fmt.Errorf("invalid oneof field: '%s.%s'", name, oneofName)
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *AuthInfoResponse_APIKeyAccess) SetFields(src *AuthInfoResponse_APIKeyAccess, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "api_key":
			if len(subs) > 0 {
				newDst := &dst.APIKey
				var newSrc *APIKey
				if src != nil {
					newSrc = &src.APIKey
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.APIKey = src.APIKey
				} else {
					var zero APIKey
					dst.APIKey = zero
				}
			}
		case "entity_ids":
			if len(subs) > 0 {
				newDst := &dst.EntityIDs
				var newSrc *EntityIdentifiers
				if src != nil {
					newSrc = &src.EntityIDs
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.EntityIDs = src.EntityIDs
				} else {
					var zero EntityIdentifiers
					dst.EntityIDs = zero
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}
