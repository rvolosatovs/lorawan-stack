// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/TheThingsNetwork/ttn/api/end_device.proto

package ttnpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_TheThingsNetwork_ttn_pkg_types "github.com/TheThingsNetwork/ttn/pkg/types"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// End device identifiers are carried with uplink and downlink messages
// Unknown fields are left empty
type EndDeviceIdentifiers struct {
	// TTN Device ID
	DevID string `protobuf:"bytes,1,opt,name=dev_id,json=devId,proto3" json:"dev_id,omitempty"`
	// TTN Application ID
	AppID string `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// LoRaWAN DevEUI
	DevEUI *github_com_TheThingsNetwork_ttn_pkg_types.EUI64 `protobuf:"bytes,3,opt,name=dev_eui,json=devEui,proto3,customtype=github.com/TheThingsNetwork/ttn/pkg/types.EUI64" json:"dev_eui,omitempty"`
	// LoRaWAN JoinEUI (or AppEUI for LoRaWAN 1.0 end devices)
	JoinEUI *github_com_TheThingsNetwork_ttn_pkg_types.EUI64 `protobuf:"bytes,4,opt,name=join_eui,json=joinEui,proto3,customtype=github.com/TheThingsNetwork/ttn/pkg/types.EUI64" json:"join_eui,omitempty"`
	// LoRaWAN DevAddr
	DevAddr *github_com_TheThingsNetwork_ttn_pkg_types.DevAddr `protobuf:"bytes,5,opt,name=dev_addr,json=devAddr,proto3,customtype=github.com/TheThingsNetwork/ttn/pkg/types.DevAddr" json:"dev_addr,omitempty"`
}

func (m *EndDeviceIdentifiers) Reset()                    { *m = EndDeviceIdentifiers{} }
func (*EndDeviceIdentifiers) ProtoMessage()               {}
func (*EndDeviceIdentifiers) Descriptor() ([]byte, []int) { return fileDescriptorEndDevice, []int{0} }

func (m *EndDeviceIdentifiers) GetDevID() string {
	if m != nil {
		return m.DevID
	}
	return ""
}

func (m *EndDeviceIdentifiers) GetAppID() string {
	if m != nil {
		return m.AppID
	}
	return ""
}

func init() {
	proto.RegisterType((*EndDeviceIdentifiers)(nil), "ttn.v3.EndDeviceIdentifiers")
}
func (m *EndDeviceIdentifiers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDeviceIdentifiers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DevID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.DevID)))
		i += copy(dAtA[i:], m.DevID)
	}
	if len(m.AppID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.AppID)))
		i += copy(dAtA[i:], m.AppID)
	}
	if m.DevEUI != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.DevEUI.Size()))
		n1, err := m.DevEUI.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.JoinEUI != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.JoinEUI.Size()))
		n2, err := m.JoinEUI.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.DevAddr != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.DevAddr.Size()))
		n3, err := m.DevAddr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func encodeFixed64EndDevice(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32EndDevice(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintEndDevice(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EndDeviceIdentifiers) Size() (n int) {
	var l int
	_ = l
	l = len(m.DevID)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	l = len(m.AppID)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if m.DevEUI != nil {
		l = m.DevEUI.Size()
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if m.JoinEUI != nil {
		l = m.JoinEUI.Size()
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if m.DevAddr != nil {
		l = m.DevAddr.Size()
		n += 1 + l + sovEndDevice(uint64(l))
	}
	return n
}

func sovEndDevice(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEndDevice(x uint64) (n int) {
	return sovEndDevice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *EndDeviceIdentifiers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndDeviceIdentifiers{`,
		`DevID:` + fmt.Sprintf("%v", this.DevID) + `,`,
		`AppID:` + fmt.Sprintf("%v", this.AppID) + `,`,
		`DevEUI:` + fmt.Sprintf("%v", this.DevEUI) + `,`,
		`JoinEUI:` + fmt.Sprintf("%v", this.JoinEUI) + `,`,
		`DevAddr:` + fmt.Sprintf("%v", this.DevAddr) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringEndDevice(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *EndDeviceIdentifiers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndDeviceIdentifiers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndDeviceIdentifiers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_TheThingsNetwork_ttn_pkg_types.EUI64
			m.DevEUI = &v
			if err := m.DevEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_TheThingsNetwork_ttn_pkg_types.EUI64
			m.JoinEUI = &v
			if err := m.JoinEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_TheThingsNetwork_ttn_pkg_types.DevAddr
			m.DevAddr = &v
			if err := m.DevAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEndDevice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEndDevice
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEndDevice
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEndDevice(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEndDevice = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEndDevice   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/end_device.proto", fileDescriptorEndDevice)
}

var fileDescriptorEndDevice = []byte{
	// 338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0xd1, 0x31, 0x4f, 0xe3, 0x30,
	0x14, 0x07, 0xf0, 0xba, 0x77, 0x4d, 0xdb, 0xe8, 0xa6, 0xe8, 0x86, 0xea, 0x86, 0xa4, 0xba, 0xa9,
	0x0c, 0xc4, 0x42, 0x2d, 0x6c, 0x20, 0xb5, 0x4a, 0x84, 0xc2, 0x80, 0x50, 0xd5, 0x22, 0xc1, 0x52,
	0x25, 0xf5, 0x6b, 0x6a, 0x2a, 0x6c, 0x2b, 0x75, 0x8c, 0xd8, 0xf8, 0x78, 0x8c, 0x8c, 0xa8, 0x43,
	0x00, 0x4f, 0x8c, 0x7c, 0x04, 0x64, 0x33, 0xc0, 0x46, 0xc5, 0xf6, 0x9e, 0xfc, 0x7f, 0x3f, 0xbd,
	0x27, 0xbb, 0x83, 0x9c, 0xca, 0x65, 0x99, 0x85, 0x73, 0x7e, 0x8d, 0x27, 0x4b, 0x98, 0x2c, 0x29,
	0xcb, 0xd7, 0xa7, 0x20, 0x6f, 0x78, 0xb1, 0xc2, 0x52, 0x32, 0x9c, 0x0a, 0x8a, 0x81, 0x91, 0x19,
	0x01, 0x45, 0xe7, 0x10, 0x8a, 0x82, 0x4b, 0xee, 0x39, 0x52, 0xb2, 0x50, 0xf5, 0xff, 0xed, 0x7e,
	0x99, 0xce, 0x79, 0xce, 0xb1, 0x7d, 0xce, 0xca, 0x85, 0xed, 0x6c, 0x63, 0xab, 0x8f, 0xb1, 0xff,
	0x4f, 0x75, 0xf7, 0x6f, 0xcc, 0x48, 0x64, 0xa9, 0x84, 0x00, 0x93, 0x74, 0x41, 0xa1, 0x58, 0x7b,
	0x5d, 0xd7, 0x21, 0xa0, 0x66, 0x94, 0x74, 0x50, 0x17, 0xf5, 0xda, 0xa3, 0xb6, 0xae, 0x82, 0x46,
	0x04, 0x2a, 0x89, 0xc6, 0x0d, 0x02, 0x2a, 0x21, 0x26, 0x91, 0x0a, 0x61, 0x12, 0xf5, 0xcf, 0xc4,
	0x50, 0x08, 0x93, 0x48, 0x85, 0x48, 0x88, 0x77, 0xee, 0x36, 0x8d, 0x01, 0x25, 0xed, 0xfc, 0xea,
	0xa2, 0xde, 0x9f, 0xd1, 0xe1, 0xa6, 0x0a, 0xf0, 0x77, 0xe7, 0x89, 0x55, 0x8e, 0xe5, 0xad, 0x80,
	0x75, 0x18, 0x4f, 0x93, 0x83, 0x81, 0xae, 0x02, 0x27, 0x02, 0x15, 0x4f, 0x93, 0xb1, 0xd9, 0x28,
	0x2e, 0xa9, 0x77, 0xe1, 0xb6, 0xae, 0x38, 0x65, 0x16, 0xfe, 0x6d, 0xe1, 0xa3, 0x9f, 0xc1, 0xcd,
	0x13, 0x4e, 0x99, 0x91, 0x9b, 0xc6, 0x33, 0xf4, 0x99, 0xdb, 0x32, 0x2b, 0xa7, 0x84, 0x14, 0x9d,
	0x86, 0xa5, 0xf7, 0x37, 0x55, 0xb0, 0xb7, 0x3d, 0x1d, 0x81, 0x1a, 0x12, 0x52, 0x8c, 0xcd, 0xe5,
	0xa6, 0x18, 0x1d, 0x3f, 0xbe, 0xf8, 0xb5, 0x3b, 0xed, 0xa3, 0x7b, 0xed, 0xa3, 0x07, 0xed, 0xa3,
	0x67, 0xed, 0xa3, 0x57, 0xed, 0xd7, 0xde, 0xb4, 0x8f, 0x2e, 0x77, 0xb6, 0x92, 0x25, 0x13, 0x59,
	0xe6, 0xd8, 0x1f, 0xeb, 0xbf, 0x07, 0x00, 0x00, 0xff, 0xff, 0x07, 0xec, 0x01, 0x77, 0x20, 0x02,
	0x00, 0x00,
}
