// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/end_device.proto

package ttnpb // import "go.thethings.network/lorawan-stack/pkg/ttnpb"

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import types "github.com/gogo/protobuf/types"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import go_thethings_network_lorawan_stack_pkg_types "go.thethings.network/lorawan-stack/pkg/types"
import time "time"

import encoding_binary "encoding/binary"
import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Session struct {
	// Device Address, issued by the Network Server or chosen by device manufacturer in case of testing range (beginning with 00-03).
	// Known by Network Server, Application Server and Join Server. Owned by Network Server.
	DevAddr     go_thethings_network_lorawan_stack_pkg_types.DevAddr `protobuf:"bytes,2,opt,name=dev_addr,json=devAddr,proto3,customtype=go.thethings.network/lorawan-stack/pkg/types.DevAddr" json:"dev_addr"`
	SessionKeys `protobuf:"bytes,3,opt,name=keys,embedded=keys" json:"keys"`
	// Next FCntUp to expect. Network Server only. Application Server assumes the Network Server checked it.
	NextFCntUp uint32 `protobuf:"varint,4,opt,name=next_f_cnt_up,json=nextFCntUp,proto3" json:"next_f_cnt_up,omitempty"`
	// Next NFcntDown to be used. Network Server only.
	NextNFCntDown uint32 `protobuf:"varint,5,opt,name=next_n_f_cnt_down,json=nextNFCntDown,proto3" json:"next_n_f_cnt_down,omitempty"`
	// Next AFCntDown to be used. Application Server only.
	NextAFCntDown uint32 `protobuf:"varint,6,opt,name=next_a_f_cnt_down,json=nextAFCntDown,proto3" json:"next_a_f_cnt_down,omitempty"`
	// Last FCntDown of the last confirmed message.
	LastConfFCntDown     uint32    `protobuf:"varint,7,opt,name=last_conf_f_cnt_down,json=lastConfFCntDown,proto3" json:"last_conf_f_cnt_down,omitempty"`
	StartedAt            time.Time `protobuf:"bytes,8,opt,name=started_at,json=startedAt,stdtime" json:"started_at"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Session) Reset()      { *m = Session{} }
func (*Session) ProtoMessage() {}
func (*Session) Descriptor() ([]byte, []int) {
	return fileDescriptor_end_device_ee3c8ff8609c1f53, []int{0}
}
func (m *Session) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Session) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Session.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Session) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Session.Merge(dst, src)
}
func (m *Session) XXX_Size() int {
	return m.Size()
}
func (m *Session) XXX_DiscardUnknown() {
	xxx_messageInfo_Session.DiscardUnknown(m)
}

var xxx_messageInfo_Session proto.InternalMessageInfo

func (m *Session) GetNextFCntUp() uint32 {
	if m != nil {
		return m.NextFCntUp
	}
	return 0
}

func (m *Session) GetNextNFCntDown() uint32 {
	if m != nil {
		return m.NextNFCntDown
	}
	return 0
}

func (m *Session) GetNextAFCntDown() uint32 {
	if m != nil {
		return m.NextAFCntDown
	}
	return 0
}

func (m *Session) GetLastConfFCntDown() uint32 {
	if m != nil {
		return m.LastConfFCntDown
	}
	return 0
}

func (m *Session) GetStartedAt() time.Time {
	if m != nil {
		return m.StartedAt
	}
	return time.Time{}
}

// MACParameters represent the parameters of the device's MAC layer (active or desired).
// This is used internally by the Network Server and is read only.
type MACParameters struct {
	// Maximum EIRP power (in dBm).
	MaxEIRP float32 `protobuf:"fixed32,1,opt,name=max_eirp,json=maxEirp,proto3" json:"max_eirp,omitempty"`
	// Uplink dwell time is set (400ms).
	UplinkDwellTime bool `protobuf:"varint,2,opt,name=uplink_dwell_time,json=uplinkDwellTime,proto3" json:"uplink_dwell_time,omitempty"`
	// Downlink dwell time is set (400ms).
	DownlinkDwellTime bool `protobuf:"varint,3,opt,name=downlink_dwell_time,json=downlinkDwellTime,proto3" json:"downlink_dwell_time,omitempty"`
	// ADR: data rate index to use.
	ADRDataRateIndex DataRateIndex `protobuf:"varint,4,opt,name=adr_data_rate_index,json=adrDataRateIndex,proto3,enum=ttn.lorawan.v3.DataRateIndex" json:"adr_data_rate_index,omitempty"`
	// ADR: transmission power index to use.
	ADRTxPowerIndex uint32 `protobuf:"varint,5,opt,name=adr_tx_power_index,json=adrTxPowerIndex,proto3" json:"adr_tx_power_index,omitempty"`
	// ADR: number of retransmissions.
	ADRNbTrans uint32 `protobuf:"varint,6,opt,name=adr_nb_trans,json=adrNbTrans,proto3" json:"adr_nb_trans,omitempty"`
	// ADR: number of messages to wait before setting ADRAckReq.
	ADRAckLimit uint32 `protobuf:"varint,7,opt,name=adr_ack_limit,json=adrAckLimit,proto3" json:"adr_ack_limit,omitempty"`
	// ADR: number of messages to wait after setting ADRAckReq and before changing TxPower or DataRate.
	ADRAckDelay uint32 `protobuf:"varint,8,opt,name=adr_ack_delay,json=adrAckDelay,proto3" json:"adr_ack_delay,omitempty"`
	// Rx1 delay in seconds (Rx2 delay is Rx1 delay + 1 second).
	Rx1Delay uint32 `protobuf:"varint,9,opt,name=rx1_delay,json=rx1Delay,proto3" json:"rx1_delay,omitempty"`
	// Data rate offset for Rx1.
	Rx1DataRateOffset uint32 `protobuf:"varint,10,opt,name=rx1_data_rate_offset,json=rx1DataRateOffset,proto3" json:"rx1_data_rate_offset,omitempty"`
	// Data rate index for Rx2.
	Rx2DataRateIndex DataRateIndex `protobuf:"varint,11,opt,name=rx2_data_rate_index,json=rx2DataRateIndex,proto3,enum=ttn.lorawan.v3.DataRateIndex" json:"rx2_data_rate_index,omitempty"`
	// Frequency for Rx2 (in Hz).
	Rx2Frequency uint64 `protobuf:"varint,12,opt,name=rx2_frequency,json=rx2Frequency,proto3" json:"rx2_frequency,omitempty"`
	// Time within which a rejoin-request must be sent.
	RejoinTimePeriodicity RejoinTimeExponent `protobuf:"varint,13,opt,name=rejoin_time_periodicity,json=rejoinTimePeriodicity,proto3,enum=ttn.lorawan.v3.RejoinTimeExponent" json:"rejoin_time_periodicity,omitempty"`
	// Message count after which a rejoin-request must be sent.
	RejoinCountPeriodicity RejoinCountExponent `protobuf:"varint,14,opt,name=rejoin_count_periodicity,json=rejoinCountPeriodicity,proto3,enum=ttn.lorawan.v3.RejoinCountExponent" json:"rejoin_count_periodicity,omitempty"`
	// Aggregated uplink duty cycle (of all channels).
	DutyCycle AggregatedDutyCycle `protobuf:"varint,15,opt,name=duty_cycle,json=dutyCycle,proto3,enum=ttn.lorawan.v3.AggregatedDutyCycle" json:"duty_cycle,omitempty"`
	// Configured uplink channels and optionally Rx1 frequency.
	Channels []*MACParameters_Channel `protobuf:"bytes,16,rep,name=channels" json:"channels,omitempty"`
	// Frequency of the class B ping slot (in Hz).
	PingSlotFrequency uint64 `protobuf:"varint,17,opt,name=ping_slot_frequency,json=pingSlotFrequency,proto3" json:"ping_slot_frequency,omitempty"`
	// Data rate index of the class B ping slot.
	PingSlotDataRateIndex DataRateIndex `protobuf:"varint,18,opt,name=ping_slot_data_rate_index,json=pingSlotDataRateIndex,proto3,enum=ttn.lorawan.v3.DataRateIndex" json:"ping_slot_data_rate_index,omitempty"`
	// Frequency of the class B beacon (in Hz).
	BeaconFrequency      uint64   `protobuf:"varint,19,opt,name=beacon_frequency,json=beaconFrequency,proto3" json:"beacon_frequency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MACParameters) Reset()      { *m = MACParameters{} }
func (*MACParameters) ProtoMessage() {}
func (*MACParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_end_device_ee3c8ff8609c1f53, []int{1}
}
func (m *MACParameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACParameters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACParameters.Merge(dst, src)
}
func (m *MACParameters) XXX_Size() int {
	return m.Size()
}
func (m *MACParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_MACParameters.DiscardUnknown(m)
}

var xxx_messageInfo_MACParameters proto.InternalMessageInfo

func (m *MACParameters) GetMaxEIRP() float32 {
	if m != nil {
		return m.MaxEIRP
	}
	return 0
}

func (m *MACParameters) GetUplinkDwellTime() bool {
	if m != nil {
		return m.UplinkDwellTime
	}
	return false
}

func (m *MACParameters) GetDownlinkDwellTime() bool {
	if m != nil {
		return m.DownlinkDwellTime
	}
	return false
}

func (m *MACParameters) GetADRDataRateIndex() DataRateIndex {
	if m != nil {
		return m.ADRDataRateIndex
	}
	return DATA_RATE_0
}

func (m *MACParameters) GetADRTxPowerIndex() uint32 {
	if m != nil {
		return m.ADRTxPowerIndex
	}
	return 0
}

func (m *MACParameters) GetADRNbTrans() uint32 {
	if m != nil {
		return m.ADRNbTrans
	}
	return 0
}

func (m *MACParameters) GetADRAckLimit() uint32 {
	if m != nil {
		return m.ADRAckLimit
	}
	return 0
}

func (m *MACParameters) GetADRAckDelay() uint32 {
	if m != nil {
		return m.ADRAckDelay
	}
	return 0
}

func (m *MACParameters) GetRx1Delay() uint32 {
	if m != nil {
		return m.Rx1Delay
	}
	return 0
}

func (m *MACParameters) GetRx1DataRateOffset() uint32 {
	if m != nil {
		return m.Rx1DataRateOffset
	}
	return 0
}

func (m *MACParameters) GetRx2DataRateIndex() DataRateIndex {
	if m != nil {
		return m.Rx2DataRateIndex
	}
	return DATA_RATE_0
}

func (m *MACParameters) GetRx2Frequency() uint64 {
	if m != nil {
		return m.Rx2Frequency
	}
	return 0
}

func (m *MACParameters) GetRejoinTimePeriodicity() RejoinTimeExponent {
	if m != nil {
		return m.RejoinTimePeriodicity
	}
	return REJOIN_TIME_0
}

func (m *MACParameters) GetRejoinCountPeriodicity() RejoinCountExponent {
	if m != nil {
		return m.RejoinCountPeriodicity
	}
	return REJOIN_COUNT_16
}

func (m *MACParameters) GetDutyCycle() AggregatedDutyCycle {
	if m != nil {
		return m.DutyCycle
	}
	return DUTY_CYCLE_1
}

func (m *MACParameters) GetChannels() []*MACParameters_Channel {
	if m != nil {
		return m.Channels
	}
	return nil
}

func (m *MACParameters) GetPingSlotFrequency() uint64 {
	if m != nil {
		return m.PingSlotFrequency
	}
	return 0
}

func (m *MACParameters) GetPingSlotDataRateIndex() DataRateIndex {
	if m != nil {
		return m.PingSlotDataRateIndex
	}
	return DATA_RATE_0
}

func (m *MACParameters) GetBeaconFrequency() uint64 {
	if m != nil {
		return m.BeaconFrequency
	}
	return 0
}

type MACParameters_Channel struct {
	// Uplink frequency of the channel (in Hz).
	UplinkFrequency uint64 `protobuf:"varint,1,opt,name=uplink_frequency,json=uplinkFrequency,proto3" json:"uplink_frequency,omitempty"`
	// Downlink frequency of the channel (in Hz).
	DownlinkFrequency uint64 `protobuf:"varint,2,opt,name=downlink_frequency,json=downlinkFrequency,proto3" json:"downlink_frequency,omitempty"`
	// Index of the minimum data rate for uplink.
	MinDataRateIndex DataRateIndex `protobuf:"varint,3,opt,name=min_data_rate_index,json=minDataRateIndex,proto3,enum=ttn.lorawan.v3.DataRateIndex" json:"min_data_rate_index,omitempty"`
	// Index of the maximum data rate for uplink.
	MaxDataRateIndex DataRateIndex `protobuf:"varint,4,opt,name=max_data_rate_index,json=maxDataRateIndex,proto3,enum=ttn.lorawan.v3.DataRateIndex" json:"max_data_rate_index,omitempty"`
	// Channel can be used by device for uplink.
	UplinkEnabled        bool     `protobuf:"varint,5,opt,name=uplink_enabled,json=uplinkEnabled,proto3" json:"uplink_enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MACParameters_Channel) Reset()      { *m = MACParameters_Channel{} }
func (*MACParameters_Channel) ProtoMessage() {}
func (*MACParameters_Channel) Descriptor() ([]byte, []int) {
	return fileDescriptor_end_device_ee3c8ff8609c1f53, []int{1, 0}
}
func (m *MACParameters_Channel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACParameters_Channel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACParameters_Channel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACParameters_Channel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACParameters_Channel.Merge(dst, src)
}
func (m *MACParameters_Channel) XXX_Size() int {
	return m.Size()
}
func (m *MACParameters_Channel) XXX_DiscardUnknown() {
	xxx_messageInfo_MACParameters_Channel.DiscardUnknown(m)
}

var xxx_messageInfo_MACParameters_Channel proto.InternalMessageInfo

func (m *MACParameters_Channel) GetUplinkFrequency() uint64 {
	if m != nil {
		return m.UplinkFrequency
	}
	return 0
}

func (m *MACParameters_Channel) GetDownlinkFrequency() uint64 {
	if m != nil {
		return m.DownlinkFrequency
	}
	return 0
}

func (m *MACParameters_Channel) GetMinDataRateIndex() DataRateIndex {
	if m != nil {
		return m.MinDataRateIndex
	}
	return DATA_RATE_0
}

func (m *MACParameters_Channel) GetMaxDataRateIndex() DataRateIndex {
	if m != nil {
		return m.MaxDataRateIndex
	}
	return DATA_RATE_0
}

func (m *MACParameters_Channel) GetUplinkEnabled() bool {
	if m != nil {
		return m.UplinkEnabled
	}
	return false
}

type EndDeviceBrand struct {
	ID   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	URL  string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	// Logos contains file names of brand logos.
	Logos                []string `protobuf:"bytes,4,rep,name=logos" json:"logos,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndDeviceBrand) Reset()      { *m = EndDeviceBrand{} }
func (*EndDeviceBrand) ProtoMessage() {}
func (*EndDeviceBrand) Descriptor() ([]byte, []int) {
	return fileDescriptor_end_device_ee3c8ff8609c1f53, []int{2}
}
func (m *EndDeviceBrand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndDeviceBrand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndDeviceBrand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EndDeviceBrand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndDeviceBrand.Merge(dst, src)
}
func (m *EndDeviceBrand) XXX_Size() int {
	return m.Size()
}
func (m *EndDeviceBrand) XXX_DiscardUnknown() {
	xxx_messageInfo_EndDeviceBrand.DiscardUnknown(m)
}

var xxx_messageInfo_EndDeviceBrand proto.InternalMessageInfo

func (m *EndDeviceBrand) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *EndDeviceBrand) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EndDeviceBrand) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *EndDeviceBrand) GetLogos() []string {
	if m != nil {
		return m.Logos
	}
	return nil
}

type EndDeviceModel struct {
	BrandID              string   `protobuf:"bytes,1,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`
	ID                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndDeviceModel) Reset()      { *m = EndDeviceModel{} }
func (*EndDeviceModel) ProtoMessage() {}
func (*EndDeviceModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_end_device_ee3c8ff8609c1f53, []int{3}
}
func (m *EndDeviceModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndDeviceModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndDeviceModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EndDeviceModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndDeviceModel.Merge(dst, src)
}
func (m *EndDeviceModel) XXX_Size() int {
	return m.Size()
}
func (m *EndDeviceModel) XXX_DiscardUnknown() {
	xxx_messageInfo_EndDeviceModel.DiscardUnknown(m)
}

var xxx_messageInfo_EndDeviceModel proto.InternalMessageInfo

func (m *EndDeviceModel) GetBrandID() string {
	if m != nil {
		return m.BrandID
	}
	return ""
}

func (m *EndDeviceModel) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *EndDeviceModel) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Identifies an end device model with version information.
type EndDeviceVersionIdentifiers struct {
	BrandID string `protobuf:"bytes,1,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`
	ModelID string `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// LoRaWAN MAC version.
	LoRaWANVersion MACVersion `protobuf:"varint,3,opt,name=lorawan_version,json=lorawanVersion,proto3,enum=ttn.lorawan.v3.MACVersion" json:"lorawan_version,omitempty"`
	// LoRaWAN PHY version.
	LoRaWANPHYVersion    PHYVersion `protobuf:"varint,4,opt,name=lorawan_phy_version,json=lorawanPhyVersion,proto3,enum=ttn.lorawan.v3.PHYVersion" json:"lorawan_phy_version,omitempty"`
	HardwareVersion      string     `protobuf:"bytes,5,opt,name=hardware_version,json=hardwareVersion,proto3" json:"hardware_version,omitempty"`
	FirmwareVersion      string     `protobuf:"bytes,6,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *EndDeviceVersionIdentifiers) Reset()      { *m = EndDeviceVersionIdentifiers{} }
func (*EndDeviceVersionIdentifiers) ProtoMessage() {}
func (*EndDeviceVersionIdentifiers) Descriptor() ([]byte, []int) {
	return fileDescriptor_end_device_ee3c8ff8609c1f53, []int{4}
}
func (m *EndDeviceVersionIdentifiers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndDeviceVersionIdentifiers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndDeviceVersionIdentifiers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EndDeviceVersionIdentifiers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndDeviceVersionIdentifiers.Merge(dst, src)
}
func (m *EndDeviceVersionIdentifiers) XXX_Size() int {
	return m.Size()
}
func (m *EndDeviceVersionIdentifiers) XXX_DiscardUnknown() {
	xxx_messageInfo_EndDeviceVersionIdentifiers.DiscardUnknown(m)
}

var xxx_messageInfo_EndDeviceVersionIdentifiers proto.InternalMessageInfo

func (m *EndDeviceVersionIdentifiers) GetBrandID() string {
	if m != nil {
		return m.BrandID
	}
	return ""
}

func (m *EndDeviceVersionIdentifiers) GetModelID() string {
	if m != nil {
		return m.ModelID
	}
	return ""
}

func (m *EndDeviceVersionIdentifiers) GetLoRaWANVersion() MACVersion {
	if m != nil {
		return m.LoRaWANVersion
	}
	return MAC_UNKNOWN
}

func (m *EndDeviceVersionIdentifiers) GetLoRaWANPHYVersion() PHYVersion {
	if m != nil {
		return m.LoRaWANPHYVersion
	}
	return PHY_UNKNOWN
}

func (m *EndDeviceVersionIdentifiers) GetHardwareVersion() string {
	if m != nil {
		return m.HardwareVersion
	}
	return ""
}

func (m *EndDeviceVersionIdentifiers) GetFirmwareVersion() string {
	if m != nil {
		return m.FirmwareVersion
	}
	return ""
}

// Template for creating end devices.
type EndDeviceVersion struct {
	// Version identifiers.
	EndDeviceVersionIdentifiers `protobuf:"bytes,1,opt,name=ids,embedded=ids" json:"ids"`
	// Photos contains file names of device photos.
	Photos []string `protobuf:"bytes,2,rep,name=photos" json:"photos,omitempty"`
	// Default formatters defining the payload formats for this end device.
	DefaultFormatters MessagePayloadFormatters `protobuf:"bytes,3,opt,name=default_formatters,json=defaultFormatters" json:"default_formatters"`
	// Default MAC layer parameters, to which device is reset by default (e.g. on join or ResetInd).
	DefaultMACParameters *MACParameters `protobuf:"bytes,4,opt,name=default_mac_parameters,json=defaultMacParameters" json:"default_mac_parameters,omitempty"`
	// Minimum frequency the device is capable of using (in Hz).
	MinFrequency uint64 `protobuf:"varint,5,opt,name=min_frequency,json=minFrequency,proto3" json:"min_frequency,omitempty"`
	// Maximum frequency the device is capable of using (in Hz).
	MaxFrequency uint64 `protobuf:"varint,6,opt,name=max_frequency,json=maxFrequency,proto3" json:"max_frequency,omitempty"`
	// Indicator that the device may reset the frame counters (not LoRaWAN compliant).
	FCntResets bool `protobuf:"varint,7,opt,name=f_cnt_resets,json=fCntResets,proto3" json:"f_cnt_resets,omitempty"`
	// Indicator that the device uses 32-bit frame counters.
	Supports32BitFCnt bool `protobuf:"varint,8,opt,name=supports_32_bit_f_cnt,json=supports32BitFCnt,proto3" json:"supports_32_bit_f_cnt,omitempty"`
	// DisableJoinNonceCheck specifies whether LoRaWAN DevNonce check procedure should be disabled.
	DisableJoinNonceCheck bool     `protobuf:"varint,9,opt,name=disable_join_nonce_check,json=disableJoinNonceCheck,proto3" json:"disable_join_nonce_check,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *EndDeviceVersion) Reset()      { *m = EndDeviceVersion{} }
func (*EndDeviceVersion) ProtoMessage() {}
func (*EndDeviceVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_end_device_ee3c8ff8609c1f53, []int{5}
}
func (m *EndDeviceVersion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndDeviceVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndDeviceVersion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EndDeviceVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndDeviceVersion.Merge(dst, src)
}
func (m *EndDeviceVersion) XXX_Size() int {
	return m.Size()
}
func (m *EndDeviceVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_EndDeviceVersion.DiscardUnknown(m)
}

var xxx_messageInfo_EndDeviceVersion proto.InternalMessageInfo

func (m *EndDeviceVersion) GetPhotos() []string {
	if m != nil {
		return m.Photos
	}
	return nil
}

func (m *EndDeviceVersion) GetDefaultFormatters() MessagePayloadFormatters {
	if m != nil {
		return m.DefaultFormatters
	}
	return MessagePayloadFormatters{}
}

func (m *EndDeviceVersion) GetDefaultMACParameters() *MACParameters {
	if m != nil {
		return m.DefaultMACParameters
	}
	return nil
}

func (m *EndDeviceVersion) GetMinFrequency() uint64 {
	if m != nil {
		return m.MinFrequency
	}
	return 0
}

func (m *EndDeviceVersion) GetMaxFrequency() uint64 {
	if m != nil {
		return m.MaxFrequency
	}
	return 0
}

func (m *EndDeviceVersion) GetFCntResets() bool {
	if m != nil {
		return m.FCntResets
	}
	return false
}

func (m *EndDeviceVersion) GetSupports32BitFCnt() bool {
	if m != nil {
		return m.Supports32BitFCnt
	}
	return false
}

func (m *EndDeviceVersion) GetDisableJoinNonceCheck() bool {
	if m != nil {
		return m.DisableJoinNonceCheck
	}
	return false
}

type MACSettings struct {
	// Whether to disable ADR or not.
	DisableADR bool `protobuf:"varint,1,opt,name=disable_adr,json=disableAdr,proto3" json:"disable_adr,omitempty"`
	// The ADR margin tells the network server how much margin it should add in ADR requests.
	// A bigger margin is less efficient, but gives a better chance of successful reception.
	ADRMargin uint32 `protobuf:"varint,2,opt,name=adr_margin,json=adrMargin,proto3" json:"adr_margin,omitempty"`
	// Deadline for the device to respond to requests from the Network Server.
	ClassBTimeout time.Time `protobuf:"bytes,3,opt,name=class_b_timeout,json=classBTimeout,stdtime" json:"class_b_timeout"`
	// Deadline for the device to respond to requests from the Network Server.
	ClassCTimeout time.Time `protobuf:"bytes,4,opt,name=class_c_timeout,json=classCTimeout,stdtime" json:"class_c_timeout"`
	// The interval after which a DevStatusReq MACCommand shall be sent.
	StatusTimePeriodicity time.Duration `protobuf:"bytes,5,opt,name=status_time_periodicity,json=statusTimePeriodicity,stdduration" json:"status_time_periodicity"`
	// Number of uplink messages after which a DevStatusReq MACCommand shall be sent.
	StatusCountPeriodicity uint64   `protobuf:"varint,6,opt,name=status_count_periodicity,json=statusCountPeriodicity,proto3" json:"status_count_periodicity,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *MACSettings) Reset()      { *m = MACSettings{} }
func (*MACSettings) ProtoMessage() {}
func (*MACSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_end_device_ee3c8ff8609c1f53, []int{6}
}
func (m *MACSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACSettings.Merge(dst, src)
}
func (m *MACSettings) XXX_Size() int {
	return m.Size()
}
func (m *MACSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_MACSettings.DiscardUnknown(m)
}

var xxx_messageInfo_MACSettings proto.InternalMessageInfo

func (m *MACSettings) GetDisableADR() bool {
	if m != nil {
		return m.DisableADR
	}
	return false
}

func (m *MACSettings) GetADRMargin() uint32 {
	if m != nil {
		return m.ADRMargin
	}
	return 0
}

func (m *MACSettings) GetClassBTimeout() time.Time {
	if m != nil {
		return m.ClassBTimeout
	}
	return time.Time{}
}

func (m *MACSettings) GetClassCTimeout() time.Time {
	if m != nil {
		return m.ClassCTimeout
	}
	return time.Time{}
}

func (m *MACSettings) GetStatusTimePeriodicity() time.Duration {
	if m != nil {
		return m.StatusTimePeriodicity
	}
	return 0
}

func (m *MACSettings) GetStatusCountPeriodicity() uint64 {
	if m != nil {
		return m.StatusCountPeriodicity
	}
	return 0
}

// MACState represents the state of MAC layer of the device.
// MACState is reset on each join for OTAA or ResetInd for ABP devices.
// This is used internally by the Network Server and is read only.
type MACState struct {
	// Current LoRaWAN MAC parameters.
	MACParameters `protobuf:"bytes,1,opt,name=current_parameters,json=currentParameters,embedded=current_parameters" json:"current_parameters"`
	// Desired LoRaWAN MAC parameters.
	DesiredMACParameters MACParameters `protobuf:"bytes,2,opt,name=desired_parameters,json=desiredParameters" json:"desired_parameters"`
	// Currently active LoRaWAN device class
	// - Device class is A by default
	// - If device sets ClassB bit in uplink, this will be set to B
	// - If device sent DeviceModeInd MAC message, this will be set to that value
	DeviceClass Class `protobuf:"varint,3,opt,name=device_class,json=deviceClass,proto3,enum=ttn.lorawan.v3.Class" json:"device_class,omitempty"`
	// LoRaWAN MAC version.
	LoRaWANVersion MACVersion `protobuf:"varint,4,opt,name=lorawan_version,json=lorawanVersion,proto3,enum=ttn.lorawan.v3.MACVersion" json:"lorawan_version,omitempty"`
	// Time when a new confirmed downlink message or MAC command is ready to be scheduled for class C.
	NextConfirmedDownlinkAt *time.Time `protobuf:"bytes,6,opt,name=next_confirmed_downlink_at,json=nextConfirmedDownlinkAt,stdtime" json:"next_confirmed_downlink_at,omitempty"`
	// Periodicity of the class B ping slot.
	PingSlotPeriodicity PingSlotPeriod `protobuf:"varint,7,opt,name=ping_slot_periodicity,json=pingSlotPeriodicity,proto3,enum=ttn.lorawan.v3.PingSlotPeriod" json:"ping_slot_periodicity,omitempty"`
	// A confirmed application downlink, for which an acknowledgment is expected to arrive.
	PendingApplicationDownlink *ApplicationDownlink `protobuf:"bytes,8,opt,name=pending_application_downlink,json=pendingApplicationDownlink" json:"pending_application_downlink,omitempty"`
	// Queued MAC responses.
	// Regenerated on each uplink.
	QueuedResponses []*MACCommand `protobuf:"bytes,9,rep,name=queued_responses,json=queuedResponses" json:"queued_responses,omitempty"`
	// Pending MAC requests(i.e. sent requests, for which no response has been received yet).
	// Regenerated on each downlink.
	PendingRequests      []*MACCommand `protobuf:"bytes,10,rep,name=pending_requests,json=pendingRequests" json:"pending_requests,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *MACState) Reset()      { *m = MACState{} }
func (*MACState) ProtoMessage() {}
func (*MACState) Descriptor() ([]byte, []int) {
	return fileDescriptor_end_device_ee3c8ff8609c1f53, []int{7}
}
func (m *MACState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACState.Merge(dst, src)
}
func (m *MACState) XXX_Size() int {
	return m.Size()
}
func (m *MACState) XXX_DiscardUnknown() {
	xxx_messageInfo_MACState.DiscardUnknown(m)
}

var xxx_messageInfo_MACState proto.InternalMessageInfo

func (m *MACState) GetDesiredMACParameters() MACParameters {
	if m != nil {
		return m.DesiredMACParameters
	}
	return MACParameters{}
}

func (m *MACState) GetDeviceClass() Class {
	if m != nil {
		return m.DeviceClass
	}
	return CLASS_A
}

func (m *MACState) GetLoRaWANVersion() MACVersion {
	if m != nil {
		return m.LoRaWANVersion
	}
	return MAC_UNKNOWN
}

func (m *MACState) GetNextConfirmedDownlinkAt() *time.Time {
	if m != nil {
		return m.NextConfirmedDownlinkAt
	}
	return nil
}

func (m *MACState) GetPingSlotPeriodicity() PingSlotPeriod {
	if m != nil {
		return m.PingSlotPeriodicity
	}
	return PING_EVERY_1S
}

func (m *MACState) GetPendingApplicationDownlink() *ApplicationDownlink {
	if m != nil {
		return m.PendingApplicationDownlink
	}
	return nil
}

func (m *MACState) GetQueuedResponses() []*MACCommand {
	if m != nil {
		return m.QueuedResponses
	}
	return nil
}

func (m *MACState) GetPendingRequests() []*MACCommand {
	if m != nil {
		return m.PendingRequests
	}
	return nil
}

// TODO: Split the EndDevice into NS/AS/JS messages (https://github.com/TheThingsIndustries/lorawan-stack/issues/1036)
type EndDevice struct {
	EndDeviceIdentifiers        `protobuf:"bytes,1,opt,name=ids,embedded=ids" json:"ids"`
	EndDeviceVersionIdentifiers `protobuf:"bytes,2,opt,name=version_ids,json=versionIds,embedded=version_ids" json:"version_ids"`
	RootKeys                    *RootKeys `protobuf:"bytes,3,opt,name=root_keys,json=rootKeys" json:"root_keys,omitempty"`
	// The address (host:port) of the Network Server associated with this device.
	NetworkServerAddress string `protobuf:"bytes,4,opt,name=network_server_address,json=networkServerAddress,proto3" json:"network_server_address,omitempty"`
	// The address (host:port) of the Application Server associated with this device.
	ApplicationServerAddress string `protobuf:"bytes,5,opt,name=application_server_address,json=applicationServerAddress,proto3" json:"application_server_address,omitempty"`
	FrequencyPlanID          string `protobuf:"bytes,6,opt,name=frequency_plan_id,json=frequencyPlanId,proto3" json:"frequency_plan_id,omitempty"`
	// Settings for how the Network Server handles MAC for this device.
	MACSettings MACSettings `protobuf:"bytes,7,opt,name=mac_settings,json=macSettings" json:"mac_settings"`
	// MAC states of the device.
	MACState *MACState `protobuf:"bytes,8,opt,name=mac_state,json=macState" json:"mac_state,omitempty"`
	// The device supports join (it's OTAA).
	SupportsJoin bool `protobuf:"varint,9,opt,name=supports_join,json=supportsJoin,proto3" json:"supports_join,omitempty"`
	// Current session.
	Session *Session `protobuf:"bytes,10,opt,name=session" json:"session,omitempty"`
	// Fallback session (stored until RekeyInd is received).
	SessionFallback *Session `protobuf:"bytes,11,opt,name=session_fallback,json=sessionFallback" json:"session_fallback,omitempty"`
	// Next DevNonce to be expected (in case of LoRaWAN 1.1).
	NextDevNonce uint32 `protobuf:"varint,12,opt,name=next_dev_nonce,json=nextDevNonce,proto3" json:"next_dev_nonce,omitempty"`
	// Used DevNonces (in case of LoRaWAN 1.0).
	UsedDevNonces []uint32 `protobuf:"varint,13,rep,packed,name=used_dev_nonces,json=usedDevNonces" json:"used_dev_nonces,omitempty"`
	// Next JoinNonce/AppNonce to be used (in case of LoRaWAN 1.1).
	NextJoinNonce uint32 `protobuf:"varint,14,opt,name=next_join_nonce,json=nextJoinNonce,proto3" json:"next_join_nonce,omitempty"`
	// Used JoinNonces/AppNonce (in case of LoRaWAN 1.0).
	UsedJoinNonces []uint32 `protobuf:"varint,15,rep,packed,name=used_join_nonces,json=usedJoinNonces" json:"used_join_nonces,omitempty"`
	// Next Rejoin counter (type 0/2) to expect.
	NextRJCount0 uint32 `protobuf:"varint,16,opt,name=next_rj_count_0,json=nextRjCount0,proto3" json:"next_rj_count_0,omitempty"`
	// Next Rejoin counter (type 1) to expect.
	NextRJCount1 uint32 `protobuf:"varint,17,opt,name=next_rj_count_1,json=nextRjCount1,proto3" json:"next_rj_count_1,omitempty"`
	// Location of the device.
	Location *Location `protobuf:"bytes,18,opt,name=location" json:"location,omitempty"`
	// Time when a new DevStatusReq MAC command shall be scheduled.
	NextStatusAt time.Time `protobuf:"bytes,19,opt,name=next_status_at,json=nextStatusAt,stdtime" json:"next_status_at"`
	// Number of messages, after which a new DevStatusReq MAC command shall be scheduled.
	NextStatusAfter uint64 `protobuf:"varint,20,opt,name=next_status_after,json=nextStatusAfter,proto3" json:"next_status_after,omitempty"`
	// Battery percentage of the device, see also status_updated_at.
	BatteryPercentage float32 `protobuf:"fixed32,21,opt,name=battery_percentage,json=batteryPercentage,proto3" json:"battery_percentage,omitempty"`
	// Demodulation signal-to-noise ratio(in dB), see also status_updated_at.
	DownlinkMargin int32 `protobuf:"varint,22,opt,name=downlink_margin,json=downlinkMargin,proto3" json:"downlink_margin,omitempty"`
	// Recent uplink messages sorted by time. The number of messages stored may depend on configuration.
	RecentUplinks []*UplinkMessage `protobuf:"bytes,23,rep,name=recent_uplinks,json=recentUplinks" json:"recent_uplinks,omitempty"`
	// Recent downlink messages sorted by time. The number of messages stored may depend on configuration.
	RecentDownlinks []*DownlinkMessage `protobuf:"bytes,24,rep,name=recent_downlinks,json=recentDownlinks" json:"recent_downlinks,omitempty"`
	// Queued Application downlink messages.
	QueuedApplicationDownlinks []*ApplicationDownlink `protobuf:"bytes,25,rep,name=queued_application_downlinks,json=queuedApplicationDownlinks" json:"queued_application_downlinks,omitempty"`
	// Formatters defining the payload formats.
	MessagePayloadFormatters `protobuf:"bytes,26,opt,name=formatters,embedded=formatters" json:"formatters"`
	// Device Attributes, field names are written in snake_case.
	Attributes *types.Struct `protobuf:"bytes,27,opt,name=attributes" json:"attributes,omitempty"`
	// Time when the device status was received last updated(e.g. via DevStatus MAC command).
	StatusUpdatedAt      *time.Time `protobuf:"bytes,28,opt,name=status_updated_at,json=statusUpdatedAt,stdtime" json:"status_updated_at,omitempty"`
	CreatedAt            time.Time  `protobuf:"bytes,97,opt,name=created_at,json=createdAt,stdtime" json:"created_at"`
	UpdatedAt            time.Time  `protobuf:"bytes,98,opt,name=updated_at,json=updatedAt,stdtime" json:"updated_at"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *EndDevice) Reset()      { *m = EndDevice{} }
func (*EndDevice) ProtoMessage() {}
func (*EndDevice) Descriptor() ([]byte, []int) {
	return fileDescriptor_end_device_ee3c8ff8609c1f53, []int{8}
}
func (m *EndDevice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndDevice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndDevice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EndDevice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndDevice.Merge(dst, src)
}
func (m *EndDevice) XXX_Size() int {
	return m.Size()
}
func (m *EndDevice) XXX_DiscardUnknown() {
	xxx_messageInfo_EndDevice.DiscardUnknown(m)
}

var xxx_messageInfo_EndDevice proto.InternalMessageInfo

func (m *EndDevice) GetRootKeys() *RootKeys {
	if m != nil {
		return m.RootKeys
	}
	return nil
}

func (m *EndDevice) GetNetworkServerAddress() string {
	if m != nil {
		return m.NetworkServerAddress
	}
	return ""
}

func (m *EndDevice) GetApplicationServerAddress() string {
	if m != nil {
		return m.ApplicationServerAddress
	}
	return ""
}

func (m *EndDevice) GetFrequencyPlanID() string {
	if m != nil {
		return m.FrequencyPlanID
	}
	return ""
}

func (m *EndDevice) GetMACSettings() MACSettings {
	if m != nil {
		return m.MACSettings
	}
	return MACSettings{}
}

func (m *EndDevice) GetMACState() *MACState {
	if m != nil {
		return m.MACState
	}
	return nil
}

func (m *EndDevice) GetSupportsJoin() bool {
	if m != nil {
		return m.SupportsJoin
	}
	return false
}

func (m *EndDevice) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *EndDevice) GetSessionFallback() *Session {
	if m != nil {
		return m.SessionFallback
	}
	return nil
}

func (m *EndDevice) GetNextDevNonce() uint32 {
	if m != nil {
		return m.NextDevNonce
	}
	return 0
}

func (m *EndDevice) GetUsedDevNonces() []uint32 {
	if m != nil {
		return m.UsedDevNonces
	}
	return nil
}

func (m *EndDevice) GetNextJoinNonce() uint32 {
	if m != nil {
		return m.NextJoinNonce
	}
	return 0
}

func (m *EndDevice) GetUsedJoinNonces() []uint32 {
	if m != nil {
		return m.UsedJoinNonces
	}
	return nil
}

func (m *EndDevice) GetNextRJCount0() uint32 {
	if m != nil {
		return m.NextRJCount0
	}
	return 0
}

func (m *EndDevice) GetNextRJCount1() uint32 {
	if m != nil {
		return m.NextRJCount1
	}
	return 0
}

func (m *EndDevice) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *EndDevice) GetNextStatusAt() time.Time {
	if m != nil {
		return m.NextStatusAt
	}
	return time.Time{}
}

func (m *EndDevice) GetNextStatusAfter() uint64 {
	if m != nil {
		return m.NextStatusAfter
	}
	return 0
}

func (m *EndDevice) GetBatteryPercentage() float32 {
	if m != nil {
		return m.BatteryPercentage
	}
	return 0
}

func (m *EndDevice) GetDownlinkMargin() int32 {
	if m != nil {
		return m.DownlinkMargin
	}
	return 0
}

func (m *EndDevice) GetRecentUplinks() []*UplinkMessage {
	if m != nil {
		return m.RecentUplinks
	}
	return nil
}

func (m *EndDevice) GetRecentDownlinks() []*DownlinkMessage {
	if m != nil {
		return m.RecentDownlinks
	}
	return nil
}

func (m *EndDevice) GetQueuedApplicationDownlinks() []*ApplicationDownlink {
	if m != nil {
		return m.QueuedApplicationDownlinks
	}
	return nil
}

func (m *EndDevice) GetAttributes() *types.Struct {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *EndDevice) GetStatusUpdatedAt() *time.Time {
	if m != nil {
		return m.StatusUpdatedAt
	}
	return nil
}

func (m *EndDevice) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *EndDevice) GetUpdatedAt() time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return time.Time{}
}

type EndDevices struct {
	EndDevices           []*EndDevice `protobuf:"bytes,1,rep,name=end_devices,json=endDevices" json:"end_devices,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *EndDevices) Reset()      { *m = EndDevices{} }
func (*EndDevices) ProtoMessage() {}
func (*EndDevices) Descriptor() ([]byte, []int) {
	return fileDescriptor_end_device_ee3c8ff8609c1f53, []int{9}
}
func (m *EndDevices) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndDevices) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndDevices.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EndDevices) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndDevices.Merge(dst, src)
}
func (m *EndDevices) XXX_Size() int {
	return m.Size()
}
func (m *EndDevices) XXX_DiscardUnknown() {
	xxx_messageInfo_EndDevices.DiscardUnknown(m)
}

var xxx_messageInfo_EndDevices proto.InternalMessageInfo

func (m *EndDevices) GetEndDevices() []*EndDevice {
	if m != nil {
		return m.EndDevices
	}
	return nil
}

// TODO: Should the SetDeviceRequest be split up into NS/AS/JS messages?
type SetDeviceRequest struct {
	Device               EndDevice        `protobuf:"bytes,1,opt,name=device" json:"device"`
	FieldMask            *types.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask" json:"field_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SetDeviceRequest) Reset()      { *m = SetDeviceRequest{} }
func (*SetDeviceRequest) ProtoMessage() {}
func (*SetDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_end_device_ee3c8ff8609c1f53, []int{10}
}
func (m *SetDeviceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetDeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetDeviceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SetDeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetDeviceRequest.Merge(dst, src)
}
func (m *SetDeviceRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetDeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetDeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetDeviceRequest proto.InternalMessageInfo

func (m *SetDeviceRequest) GetDevice() EndDevice {
	if m != nil {
		return m.Device
	}
	return EndDevice{}
}

func (m *SetDeviceRequest) GetFieldMask() *types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func init() {
	proto.RegisterType((*Session)(nil), "ttn.lorawan.v3.Session")
	golang_proto.RegisterType((*Session)(nil), "ttn.lorawan.v3.Session")
	proto.RegisterType((*MACParameters)(nil), "ttn.lorawan.v3.MACParameters")
	golang_proto.RegisterType((*MACParameters)(nil), "ttn.lorawan.v3.MACParameters")
	proto.RegisterType((*MACParameters_Channel)(nil), "ttn.lorawan.v3.MACParameters.Channel")
	golang_proto.RegisterType((*MACParameters_Channel)(nil), "ttn.lorawan.v3.MACParameters.Channel")
	proto.RegisterType((*EndDeviceBrand)(nil), "ttn.lorawan.v3.EndDeviceBrand")
	golang_proto.RegisterType((*EndDeviceBrand)(nil), "ttn.lorawan.v3.EndDeviceBrand")
	proto.RegisterType((*EndDeviceModel)(nil), "ttn.lorawan.v3.EndDeviceModel")
	golang_proto.RegisterType((*EndDeviceModel)(nil), "ttn.lorawan.v3.EndDeviceModel")
	proto.RegisterType((*EndDeviceVersionIdentifiers)(nil), "ttn.lorawan.v3.EndDeviceVersionIdentifiers")
	golang_proto.RegisterType((*EndDeviceVersionIdentifiers)(nil), "ttn.lorawan.v3.EndDeviceVersionIdentifiers")
	proto.RegisterType((*EndDeviceVersion)(nil), "ttn.lorawan.v3.EndDeviceVersion")
	golang_proto.RegisterType((*EndDeviceVersion)(nil), "ttn.lorawan.v3.EndDeviceVersion")
	proto.RegisterType((*MACSettings)(nil), "ttn.lorawan.v3.MACSettings")
	golang_proto.RegisterType((*MACSettings)(nil), "ttn.lorawan.v3.MACSettings")
	proto.RegisterType((*MACState)(nil), "ttn.lorawan.v3.MACState")
	golang_proto.RegisterType((*MACState)(nil), "ttn.lorawan.v3.MACState")
	proto.RegisterType((*EndDevice)(nil), "ttn.lorawan.v3.EndDevice")
	golang_proto.RegisterType((*EndDevice)(nil), "ttn.lorawan.v3.EndDevice")
	proto.RegisterType((*EndDevices)(nil), "ttn.lorawan.v3.EndDevices")
	golang_proto.RegisterType((*EndDevices)(nil), "ttn.lorawan.v3.EndDevices")
	proto.RegisterType((*SetDeviceRequest)(nil), "ttn.lorawan.v3.SetDeviceRequest")
	golang_proto.RegisterType((*SetDeviceRequest)(nil), "ttn.lorawan.v3.SetDeviceRequest")
}
func (this *Session) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Session)
	if !ok {
		that2, ok := that.(Session)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DevAddr.Equal(that1.DevAddr) {
		return false
	}
	if !this.SessionKeys.Equal(&that1.SessionKeys) {
		return false
	}
	if this.NextFCntUp != that1.NextFCntUp {
		return false
	}
	if this.NextNFCntDown != that1.NextNFCntDown {
		return false
	}
	if this.NextAFCntDown != that1.NextAFCntDown {
		return false
	}
	if this.LastConfFCntDown != that1.LastConfFCntDown {
		return false
	}
	if !this.StartedAt.Equal(that1.StartedAt) {
		return false
	}
	return true
}
func (this *MACParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACParameters)
	if !ok {
		that2, ok := that.(MACParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxEIRP != that1.MaxEIRP {
		return false
	}
	if this.UplinkDwellTime != that1.UplinkDwellTime {
		return false
	}
	if this.DownlinkDwellTime != that1.DownlinkDwellTime {
		return false
	}
	if this.ADRDataRateIndex != that1.ADRDataRateIndex {
		return false
	}
	if this.ADRTxPowerIndex != that1.ADRTxPowerIndex {
		return false
	}
	if this.ADRNbTrans != that1.ADRNbTrans {
		return false
	}
	if this.ADRAckLimit != that1.ADRAckLimit {
		return false
	}
	if this.ADRAckDelay != that1.ADRAckDelay {
		return false
	}
	if this.Rx1Delay != that1.Rx1Delay {
		return false
	}
	if this.Rx1DataRateOffset != that1.Rx1DataRateOffset {
		return false
	}
	if this.Rx2DataRateIndex != that1.Rx2DataRateIndex {
		return false
	}
	if this.Rx2Frequency != that1.Rx2Frequency {
		return false
	}
	if this.RejoinTimePeriodicity != that1.RejoinTimePeriodicity {
		return false
	}
	if this.RejoinCountPeriodicity != that1.RejoinCountPeriodicity {
		return false
	}
	if this.DutyCycle != that1.DutyCycle {
		return false
	}
	if len(this.Channels) != len(that1.Channels) {
		return false
	}
	for i := range this.Channels {
		if !this.Channels[i].Equal(that1.Channels[i]) {
			return false
		}
	}
	if this.PingSlotFrequency != that1.PingSlotFrequency {
		return false
	}
	if this.PingSlotDataRateIndex != that1.PingSlotDataRateIndex {
		return false
	}
	if this.BeaconFrequency != that1.BeaconFrequency {
		return false
	}
	return true
}
func (this *MACParameters_Channel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACParameters_Channel)
	if !ok {
		that2, ok := that.(MACParameters_Channel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UplinkFrequency != that1.UplinkFrequency {
		return false
	}
	if this.DownlinkFrequency != that1.DownlinkFrequency {
		return false
	}
	if this.MinDataRateIndex != that1.MinDataRateIndex {
		return false
	}
	if this.MaxDataRateIndex != that1.MaxDataRateIndex {
		return false
	}
	if this.UplinkEnabled != that1.UplinkEnabled {
		return false
	}
	return true
}
func (this *EndDeviceBrand) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDeviceBrand)
	if !ok {
		that2, ok := that.(EndDeviceBrand)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.URL != that1.URL {
		return false
	}
	if len(this.Logos) != len(that1.Logos) {
		return false
	}
	for i := range this.Logos {
		if this.Logos[i] != that1.Logos[i] {
			return false
		}
	}
	return true
}
func (this *EndDeviceModel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDeviceModel)
	if !ok {
		that2, ok := that.(EndDeviceModel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BrandID != that1.BrandID {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *EndDeviceVersionIdentifiers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDeviceVersionIdentifiers)
	if !ok {
		that2, ok := that.(EndDeviceVersionIdentifiers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BrandID != that1.BrandID {
		return false
	}
	if this.ModelID != that1.ModelID {
		return false
	}
	if this.LoRaWANVersion != that1.LoRaWANVersion {
		return false
	}
	if this.LoRaWANPHYVersion != that1.LoRaWANPHYVersion {
		return false
	}
	if this.HardwareVersion != that1.HardwareVersion {
		return false
	}
	if this.FirmwareVersion != that1.FirmwareVersion {
		return false
	}
	return true
}
func (this *EndDeviceVersion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDeviceVersion)
	if !ok {
		that2, ok := that.(EndDeviceVersion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EndDeviceVersionIdentifiers.Equal(&that1.EndDeviceVersionIdentifiers) {
		return false
	}
	if len(this.Photos) != len(that1.Photos) {
		return false
	}
	for i := range this.Photos {
		if this.Photos[i] != that1.Photos[i] {
			return false
		}
	}
	if !this.DefaultFormatters.Equal(&that1.DefaultFormatters) {
		return false
	}
	if !this.DefaultMACParameters.Equal(that1.DefaultMACParameters) {
		return false
	}
	if this.MinFrequency != that1.MinFrequency {
		return false
	}
	if this.MaxFrequency != that1.MaxFrequency {
		return false
	}
	if this.FCntResets != that1.FCntResets {
		return false
	}
	if this.Supports32BitFCnt != that1.Supports32BitFCnt {
		return false
	}
	if this.DisableJoinNonceCheck != that1.DisableJoinNonceCheck {
		return false
	}
	return true
}
func (this *MACSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACSettings)
	if !ok {
		that2, ok := that.(MACSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DisableADR != that1.DisableADR {
		return false
	}
	if this.ADRMargin != that1.ADRMargin {
		return false
	}
	if !this.ClassBTimeout.Equal(that1.ClassBTimeout) {
		return false
	}
	if !this.ClassCTimeout.Equal(that1.ClassCTimeout) {
		return false
	}
	if this.StatusTimePeriodicity != that1.StatusTimePeriodicity {
		return false
	}
	if this.StatusCountPeriodicity != that1.StatusCountPeriodicity {
		return false
	}
	return true
}
func (this *MACState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACState)
	if !ok {
		that2, ok := that.(MACState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MACParameters.Equal(&that1.MACParameters) {
		return false
	}
	if !this.DesiredMACParameters.Equal(&that1.DesiredMACParameters) {
		return false
	}
	if this.DeviceClass != that1.DeviceClass {
		return false
	}
	if this.LoRaWANVersion != that1.LoRaWANVersion {
		return false
	}
	if that1.NextConfirmedDownlinkAt == nil {
		if this.NextConfirmedDownlinkAt != nil {
			return false
		}
	} else if !this.NextConfirmedDownlinkAt.Equal(*that1.NextConfirmedDownlinkAt) {
		return false
	}
	if this.PingSlotPeriodicity != that1.PingSlotPeriodicity {
		return false
	}
	if !this.PendingApplicationDownlink.Equal(that1.PendingApplicationDownlink) {
		return false
	}
	if len(this.QueuedResponses) != len(that1.QueuedResponses) {
		return false
	}
	for i := range this.QueuedResponses {
		if !this.QueuedResponses[i].Equal(that1.QueuedResponses[i]) {
			return false
		}
	}
	if len(this.PendingRequests) != len(that1.PendingRequests) {
		return false
	}
	for i := range this.PendingRequests {
		if !this.PendingRequests[i].Equal(that1.PendingRequests[i]) {
			return false
		}
	}
	return true
}
func (this *EndDevice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDevice)
	if !ok {
		that2, ok := that.(EndDevice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EndDeviceIdentifiers.Equal(&that1.EndDeviceIdentifiers) {
		return false
	}
	if !this.EndDeviceVersionIdentifiers.Equal(&that1.EndDeviceVersionIdentifiers) {
		return false
	}
	if !this.RootKeys.Equal(that1.RootKeys) {
		return false
	}
	if this.NetworkServerAddress != that1.NetworkServerAddress {
		return false
	}
	if this.ApplicationServerAddress != that1.ApplicationServerAddress {
		return false
	}
	if this.FrequencyPlanID != that1.FrequencyPlanID {
		return false
	}
	if !this.MACSettings.Equal(&that1.MACSettings) {
		return false
	}
	if !this.MACState.Equal(that1.MACState) {
		return false
	}
	if this.SupportsJoin != that1.SupportsJoin {
		return false
	}
	if !this.Session.Equal(that1.Session) {
		return false
	}
	if !this.SessionFallback.Equal(that1.SessionFallback) {
		return false
	}
	if this.NextDevNonce != that1.NextDevNonce {
		return false
	}
	if len(this.UsedDevNonces) != len(that1.UsedDevNonces) {
		return false
	}
	for i := range this.UsedDevNonces {
		if this.UsedDevNonces[i] != that1.UsedDevNonces[i] {
			return false
		}
	}
	if this.NextJoinNonce != that1.NextJoinNonce {
		return false
	}
	if len(this.UsedJoinNonces) != len(that1.UsedJoinNonces) {
		return false
	}
	for i := range this.UsedJoinNonces {
		if this.UsedJoinNonces[i] != that1.UsedJoinNonces[i] {
			return false
		}
	}
	if this.NextRJCount0 != that1.NextRJCount0 {
		return false
	}
	if this.NextRJCount1 != that1.NextRJCount1 {
		return false
	}
	if !this.Location.Equal(that1.Location) {
		return false
	}
	if !this.NextStatusAt.Equal(that1.NextStatusAt) {
		return false
	}
	if this.NextStatusAfter != that1.NextStatusAfter {
		return false
	}
	if this.BatteryPercentage != that1.BatteryPercentage {
		return false
	}
	if this.DownlinkMargin != that1.DownlinkMargin {
		return false
	}
	if len(this.RecentUplinks) != len(that1.RecentUplinks) {
		return false
	}
	for i := range this.RecentUplinks {
		if !this.RecentUplinks[i].Equal(that1.RecentUplinks[i]) {
			return false
		}
	}
	if len(this.RecentDownlinks) != len(that1.RecentDownlinks) {
		return false
	}
	for i := range this.RecentDownlinks {
		if !this.RecentDownlinks[i].Equal(that1.RecentDownlinks[i]) {
			return false
		}
	}
	if len(this.QueuedApplicationDownlinks) != len(that1.QueuedApplicationDownlinks) {
		return false
	}
	for i := range this.QueuedApplicationDownlinks {
		if !this.QueuedApplicationDownlinks[i].Equal(that1.QueuedApplicationDownlinks[i]) {
			return false
		}
	}
	if !this.MessagePayloadFormatters.Equal(&that1.MessagePayloadFormatters) {
		return false
	}
	if !this.Attributes.Equal(that1.Attributes) {
		return false
	}
	if that1.StatusUpdatedAt == nil {
		if this.StatusUpdatedAt != nil {
			return false
		}
	} else if !this.StatusUpdatedAt.Equal(*that1.StatusUpdatedAt) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	return true
}
func (this *EndDevices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDevices)
	if !ok {
		that2, ok := that.(EndDevices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.EndDevices) != len(that1.EndDevices) {
		return false
	}
	for i := range this.EndDevices {
		if !this.EndDevices[i].Equal(that1.EndDevices[i]) {
			return false
		}
	}
	return true
}
func (this *SetDeviceRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetDeviceRequest)
	if !ok {
		that2, ok := that.(SetDeviceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Device.Equal(&that1.Device) {
		return false
	}
	if !this.FieldMask.Equal(that1.FieldMask) {
		return false
	}
	return true
}
func (m *Session) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Session) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(m.DevAddr.Size()))
	n1, err := m.DevAddr.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(m.SessionKeys.Size()))
	n2, err := m.SessionKeys.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if m.NextFCntUp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.NextFCntUp))
	}
	if m.NextNFCntDown != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.NextNFCntDown))
	}
	if m.NextAFCntDown != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.NextAFCntDown))
	}
	if m.LastConfFCntDown != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.LastConfFCntDown))
	}
	dAtA[i] = 0x42
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.StartedAt)))
	n3, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	return i, nil
}

func (m *MACParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACParameters) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxEIRP != 0 {
		dAtA[i] = 0xd
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], math.Float32bits(m.MaxEIRP))
		i += 4
	}
	if m.UplinkDwellTime {
		dAtA[i] = 0x10
		i++
		if m.UplinkDwellTime {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DownlinkDwellTime {
		dAtA[i] = 0x18
		i++
		if m.DownlinkDwellTime {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ADRDataRateIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.ADRDataRateIndex))
	}
	if m.ADRTxPowerIndex != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.ADRTxPowerIndex))
	}
	if m.ADRNbTrans != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.ADRNbTrans))
	}
	if m.ADRAckLimit != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.ADRAckLimit))
	}
	if m.ADRAckDelay != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.ADRAckDelay))
	}
	if m.Rx1Delay != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.Rx1Delay))
	}
	if m.Rx1DataRateOffset != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.Rx1DataRateOffset))
	}
	if m.Rx2DataRateIndex != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.Rx2DataRateIndex))
	}
	if m.Rx2Frequency != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintEndDevice(dAtA, i, m.Rx2Frequency)
	}
	if m.RejoinTimePeriodicity != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.RejoinTimePeriodicity))
	}
	if m.RejoinCountPeriodicity != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.RejoinCountPeriodicity))
	}
	if m.DutyCycle != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.DutyCycle))
	}
	if len(m.Channels) > 0 {
		for _, msg := range m.Channels {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintEndDevice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.PingSlotFrequency != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndDevice(dAtA, i, m.PingSlotFrequency)
	}
	if m.PingSlotDataRateIndex != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.PingSlotDataRateIndex))
	}
	if m.BeaconFrequency != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndDevice(dAtA, i, m.BeaconFrequency)
	}
	return i, nil
}

func (m *MACParameters_Channel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACParameters_Channel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UplinkFrequency != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEndDevice(dAtA, i, m.UplinkFrequency)
	}
	if m.DownlinkFrequency != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEndDevice(dAtA, i, m.DownlinkFrequency)
	}
	if m.MinDataRateIndex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.MinDataRateIndex))
	}
	if m.MaxDataRateIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.MaxDataRateIndex))
	}
	if m.UplinkEnabled {
		dAtA[i] = 0x28
		i++
		if m.UplinkEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *EndDeviceBrand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDeviceBrand) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.URL) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.URL)))
		i += copy(dAtA[i:], m.URL)
	}
	if len(m.Logos) > 0 {
		for _, s := range m.Logos {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *EndDeviceModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDeviceModel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BrandID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.BrandID)))
		i += copy(dAtA[i:], m.BrandID)
	}
	if len(m.ID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *EndDeviceVersionIdentifiers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDeviceVersionIdentifiers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BrandID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.BrandID)))
		i += copy(dAtA[i:], m.BrandID)
	}
	if len(m.ModelID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.ModelID)))
		i += copy(dAtA[i:], m.ModelID)
	}
	if m.LoRaWANVersion != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.LoRaWANVersion))
	}
	if m.LoRaWANPHYVersion != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.LoRaWANPHYVersion))
	}
	if len(m.HardwareVersion) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.HardwareVersion)))
		i += copy(dAtA[i:], m.HardwareVersion)
	}
	if len(m.FirmwareVersion) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.FirmwareVersion)))
		i += copy(dAtA[i:], m.FirmwareVersion)
	}
	return i, nil
}

func (m *EndDeviceVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDeviceVersion) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(m.EndDeviceVersionIdentifiers.Size()))
	n4, err := m.EndDeviceVersionIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if len(m.Photos) > 0 {
		for _, s := range m.Photos {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(m.DefaultFormatters.Size()))
	n5, err := m.DefaultFormatters.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if m.DefaultMACParameters != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.DefaultMACParameters.Size()))
		n6, err := m.DefaultMACParameters.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.MinFrequency != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintEndDevice(dAtA, i, m.MinFrequency)
	}
	if m.MaxFrequency != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintEndDevice(dAtA, i, m.MaxFrequency)
	}
	if m.FCntResets {
		dAtA[i] = 0x38
		i++
		if m.FCntResets {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Supports32BitFCnt {
		dAtA[i] = 0x40
		i++
		if m.Supports32BitFCnt {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DisableJoinNonceCheck {
		dAtA[i] = 0x48
		i++
		if m.DisableJoinNonceCheck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *MACSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACSettings) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DisableADR {
		dAtA[i] = 0x8
		i++
		if m.DisableADR {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ADRMargin != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.ADRMargin))
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.ClassBTimeout)))
	n7, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ClassBTimeout, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x22
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.ClassCTimeout)))
	n8, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ClassCTimeout, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	dAtA[i] = 0x2a
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdDuration(m.StatusTimePeriodicity)))
	n9, err := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.StatusTimePeriodicity, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	if m.StatusCountPeriodicity != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintEndDevice(dAtA, i, m.StatusCountPeriodicity)
	}
	return i, nil
}

func (m *MACState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(m.MACParameters.Size()))
	n10, err := m.MACParameters.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	dAtA[i] = 0x12
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(m.DesiredMACParameters.Size()))
	n11, err := m.DesiredMACParameters.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	if m.DeviceClass != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.DeviceClass))
	}
	if m.LoRaWANVersion != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.LoRaWANVersion))
	}
	if m.NextConfirmedDownlinkAt != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.NextConfirmedDownlinkAt)))
		n12, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.NextConfirmedDownlinkAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.PingSlotPeriodicity != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.PingSlotPeriodicity))
	}
	if m.PendingApplicationDownlink != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.PendingApplicationDownlink.Size()))
		n13, err := m.PendingApplicationDownlink.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if len(m.QueuedResponses) > 0 {
		for _, msg := range m.QueuedResponses {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintEndDevice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PendingRequests) > 0 {
		for _, msg := range m.PendingRequests {
			dAtA[i] = 0x52
			i++
			i = encodeVarintEndDevice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *EndDevice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDevice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(m.EndDeviceIdentifiers.Size()))
	n14, err := m.EndDeviceIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	dAtA[i] = 0x12
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(m.EndDeviceVersionIdentifiers.Size()))
	n15, err := m.EndDeviceVersionIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	if m.RootKeys != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.RootKeys.Size()))
		n16, err := m.RootKeys.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if len(m.NetworkServerAddress) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.NetworkServerAddress)))
		i += copy(dAtA[i:], m.NetworkServerAddress)
	}
	if len(m.ApplicationServerAddress) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.ApplicationServerAddress)))
		i += copy(dAtA[i:], m.ApplicationServerAddress)
	}
	if len(m.FrequencyPlanID) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.FrequencyPlanID)))
		i += copy(dAtA[i:], m.FrequencyPlanID)
	}
	dAtA[i] = 0x3a
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(m.MACSettings.Size()))
	n17, err := m.MACSettings.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n17
	if m.MACState != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.MACState.Size()))
		n18, err := m.MACState.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.SupportsJoin {
		dAtA[i] = 0x48
		i++
		if m.SupportsJoin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Session != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.Session.Size()))
		n19, err := m.Session.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.SessionFallback != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.SessionFallback.Size()))
		n20, err := m.SessionFallback.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.NextDevNonce != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.NextDevNonce))
	}
	if len(m.UsedDevNonces) > 0 {
		dAtA22 := make([]byte, len(m.UsedDevNonces)*10)
		var j21 int
		for _, num := range m.UsedDevNonces {
			for num >= 1<<7 {
				dAtA22[j21] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j21++
			}
			dAtA22[j21] = uint8(num)
			j21++
		}
		dAtA[i] = 0x6a
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(j21))
		i += copy(dAtA[i:], dAtA22[:j21])
	}
	if m.NextJoinNonce != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.NextJoinNonce))
	}
	if len(m.UsedJoinNonces) > 0 {
		dAtA24 := make([]byte, len(m.UsedJoinNonces)*10)
		var j23 int
		for _, num := range m.UsedJoinNonces {
			for num >= 1<<7 {
				dAtA24[j23] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j23++
			}
			dAtA24[j23] = uint8(num)
			j23++
		}
		dAtA[i] = 0x7a
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(j23))
		i += copy(dAtA[i:], dAtA24[:j23])
	}
	if m.NextRJCount0 != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.NextRJCount0))
	}
	if m.NextRJCount1 != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.NextRJCount1))
	}
	if m.Location != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.Location.Size()))
		n25, err := m.Location.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	dAtA[i] = 0x9a
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.NextStatusAt)))
	n26, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.NextStatusAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n26
	if m.NextStatusAfter != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndDevice(dAtA, i, m.NextStatusAfter)
	}
	if m.BatteryPercentage != 0 {
		dAtA[i] = 0xad
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], math.Float32bits(m.BatteryPercentage))
		i += 4
	}
	if m.DownlinkMargin != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.DownlinkMargin))
	}
	if len(m.RecentUplinks) > 0 {
		for _, msg := range m.RecentUplinks {
			dAtA[i] = 0xba
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintEndDevice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RecentDownlinks) > 0 {
		for _, msg := range m.RecentDownlinks {
			dAtA[i] = 0xc2
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintEndDevice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.QueuedApplicationDownlinks) > 0 {
		for _, msg := range m.QueuedApplicationDownlinks {
			dAtA[i] = 0xca
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintEndDevice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0xd2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(m.MessagePayloadFormatters.Size()))
	n27, err := m.MessagePayloadFormatters.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n27
	if m.Attributes != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.Attributes.Size()))
		n28, err := m.Attributes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	if m.StatusUpdatedAt != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.StatusUpdatedAt)))
		n29, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.StatusUpdatedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	dAtA[i] = 0x8a
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)))
	n30, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n30
	dAtA[i] = 0x92
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)))
	n31, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n31
	return i, nil
}

func (m *EndDevices) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDevices) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EndDevices) > 0 {
		for _, msg := range m.EndDevices {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEndDevice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SetDeviceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetDeviceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(m.Device.Size()))
	n32, err := m.Device.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n32
	if m.FieldMask != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.FieldMask.Size()))
		n33, err := m.FieldMask.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}

func encodeVarintEndDevice(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedSession(r randyEndDevice, easy bool) *Session {
	this := &Session{}
	v1 := go_thethings_network_lorawan_stack_pkg_types.NewPopulatedDevAddr(r)
	this.DevAddr = *v1
	v2 := NewPopulatedSessionKeys(r, easy)
	this.SessionKeys = *v2
	this.NextFCntUp = r.Uint32()
	this.NextNFCntDown = r.Uint32()
	this.NextAFCntDown = r.Uint32()
	this.LastConfFCntDown = r.Uint32()
	v3 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.StartedAt = *v3
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEndDeviceBrand(r randyEndDevice, easy bool) *EndDeviceBrand {
	this := &EndDeviceBrand{}
	this.ID = randStringEndDevice(r)
	this.Name = randStringEndDevice(r)
	this.URL = randStringEndDevice(r)
	v4 := r.Intn(10)
	this.Logos = make([]string, v4)
	for i := 0; i < v4; i++ {
		this.Logos[i] = randStringEndDevice(r)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEndDeviceModel(r randyEndDevice, easy bool) *EndDeviceModel {
	this := &EndDeviceModel{}
	this.BrandID = randStringEndDevice(r)
	this.ID = randStringEndDevice(r)
	this.Name = randStringEndDevice(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEndDeviceVersionIdentifiers(r randyEndDevice, easy bool) *EndDeviceVersionIdentifiers {
	this := &EndDeviceVersionIdentifiers{}
	this.BrandID = randStringEndDevice(r)
	this.ModelID = randStringEndDevice(r)
	this.LoRaWANVersion = MACVersion([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	this.LoRaWANPHYVersion = PHYVersion([]int32{0, 1, 2, 3, 4, 5, 6}[r.Intn(7)])
	this.HardwareVersion = randStringEndDevice(r)
	this.FirmwareVersion = randStringEndDevice(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACSettings(r randyEndDevice, easy bool) *MACSettings {
	this := &MACSettings{}
	this.DisableADR = bool(r.Intn(2) == 0)
	this.ADRMargin = r.Uint32()
	v5 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.ClassBTimeout = *v5
	v6 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.ClassCTimeout = *v6
	v7 := github_com_gogo_protobuf_types.NewPopulatedStdDuration(r, easy)
	this.StatusTimePeriodicity = *v7
	this.StatusCountPeriodicity = uint64(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEndDevices(r randyEndDevice, easy bool) *EndDevices {
	this := &EndDevices{}
	if r.Intn(10) != 0 {
		v8 := r.Intn(5)
		this.EndDevices = make([]*EndDevice, v8)
		for i := 0; i < v8; i++ {
			this.EndDevices[i] = NewPopulatedEndDevice(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSetDeviceRequest(r randyEndDevice, easy bool) *SetDeviceRequest {
	this := &SetDeviceRequest{}
	v9 := NewPopulatedEndDevice(r, easy)
	this.Device = *v9
	if r.Intn(10) != 0 {
		this.FieldMask = types.NewPopulatedFieldMask(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyEndDevice interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneEndDevice(r randyEndDevice) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringEndDevice(r randyEndDevice) string {
	v10 := r.Intn(100)
	tmps := make([]rune, v10)
	for i := 0; i < v10; i++ {
		tmps[i] = randUTF8RuneEndDevice(r)
	}
	return string(tmps)
}
func randUnrecognizedEndDevice(r randyEndDevice, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldEndDevice(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldEndDevice(dAtA []byte, r randyEndDevice, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateEndDevice(dAtA, uint64(key))
		v11 := r.Int63()
		if r.Intn(2) == 0 {
			v11 *= -1
		}
		dAtA = encodeVarintPopulateEndDevice(dAtA, uint64(v11))
	case 1:
		dAtA = encodeVarintPopulateEndDevice(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateEndDevice(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateEndDevice(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateEndDevice(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateEndDevice(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Session) Size() (n int) {
	var l int
	_ = l
	l = m.DevAddr.Size()
	n += 1 + l + sovEndDevice(uint64(l))
	l = m.SessionKeys.Size()
	n += 1 + l + sovEndDevice(uint64(l))
	if m.NextFCntUp != 0 {
		n += 1 + sovEndDevice(uint64(m.NextFCntUp))
	}
	if m.NextNFCntDown != 0 {
		n += 1 + sovEndDevice(uint64(m.NextNFCntDown))
	}
	if m.NextAFCntDown != 0 {
		n += 1 + sovEndDevice(uint64(m.NextAFCntDown))
	}
	if m.LastConfFCntDown != 0 {
		n += 1 + sovEndDevice(uint64(m.LastConfFCntDown))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartedAt)
	n += 1 + l + sovEndDevice(uint64(l))
	return n
}

func (m *MACParameters) Size() (n int) {
	var l int
	_ = l
	if m.MaxEIRP != 0 {
		n += 5
	}
	if m.UplinkDwellTime {
		n += 2
	}
	if m.DownlinkDwellTime {
		n += 2
	}
	if m.ADRDataRateIndex != 0 {
		n += 1 + sovEndDevice(uint64(m.ADRDataRateIndex))
	}
	if m.ADRTxPowerIndex != 0 {
		n += 1 + sovEndDevice(uint64(m.ADRTxPowerIndex))
	}
	if m.ADRNbTrans != 0 {
		n += 1 + sovEndDevice(uint64(m.ADRNbTrans))
	}
	if m.ADRAckLimit != 0 {
		n += 1 + sovEndDevice(uint64(m.ADRAckLimit))
	}
	if m.ADRAckDelay != 0 {
		n += 1 + sovEndDevice(uint64(m.ADRAckDelay))
	}
	if m.Rx1Delay != 0 {
		n += 1 + sovEndDevice(uint64(m.Rx1Delay))
	}
	if m.Rx1DataRateOffset != 0 {
		n += 1 + sovEndDevice(uint64(m.Rx1DataRateOffset))
	}
	if m.Rx2DataRateIndex != 0 {
		n += 1 + sovEndDevice(uint64(m.Rx2DataRateIndex))
	}
	if m.Rx2Frequency != 0 {
		n += 1 + sovEndDevice(m.Rx2Frequency)
	}
	if m.RejoinTimePeriodicity != 0 {
		n += 1 + sovEndDevice(uint64(m.RejoinTimePeriodicity))
	}
	if m.RejoinCountPeriodicity != 0 {
		n += 1 + sovEndDevice(uint64(m.RejoinCountPeriodicity))
	}
	if m.DutyCycle != 0 {
		n += 1 + sovEndDevice(uint64(m.DutyCycle))
	}
	if len(m.Channels) > 0 {
		for _, e := range m.Channels {
			l = e.Size()
			n += 2 + l + sovEndDevice(uint64(l))
		}
	}
	if m.PingSlotFrequency != 0 {
		n += 2 + sovEndDevice(m.PingSlotFrequency)
	}
	if m.PingSlotDataRateIndex != 0 {
		n += 2 + sovEndDevice(uint64(m.PingSlotDataRateIndex))
	}
	if m.BeaconFrequency != 0 {
		n += 2 + sovEndDevice(m.BeaconFrequency)
	}
	return n
}

func (m *MACParameters_Channel) Size() (n int) {
	var l int
	_ = l
	if m.UplinkFrequency != 0 {
		n += 1 + sovEndDevice(m.UplinkFrequency)
	}
	if m.DownlinkFrequency != 0 {
		n += 1 + sovEndDevice(m.DownlinkFrequency)
	}
	if m.MinDataRateIndex != 0 {
		n += 1 + sovEndDevice(uint64(m.MinDataRateIndex))
	}
	if m.MaxDataRateIndex != 0 {
		n += 1 + sovEndDevice(uint64(m.MaxDataRateIndex))
	}
	if m.UplinkEnabled {
		n += 2
	}
	return n
}

func (m *EndDeviceBrand) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if len(m.Logos) > 0 {
		for _, s := range m.Logos {
			l = len(s)
			n += 1 + l + sovEndDevice(uint64(l))
		}
	}
	return n
}

func (m *EndDeviceModel) Size() (n int) {
	var l int
	_ = l
	l = len(m.BrandID)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	return n
}

func (m *EndDeviceVersionIdentifiers) Size() (n int) {
	var l int
	_ = l
	l = len(m.BrandID)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	l = len(m.ModelID)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if m.LoRaWANVersion != 0 {
		n += 1 + sovEndDevice(uint64(m.LoRaWANVersion))
	}
	if m.LoRaWANPHYVersion != 0 {
		n += 1 + sovEndDevice(uint64(m.LoRaWANPHYVersion))
	}
	l = len(m.HardwareVersion)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	l = len(m.FirmwareVersion)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	return n
}

func (m *EndDeviceVersion) Size() (n int) {
	var l int
	_ = l
	l = m.EndDeviceVersionIdentifiers.Size()
	n += 1 + l + sovEndDevice(uint64(l))
	if len(m.Photos) > 0 {
		for _, s := range m.Photos {
			l = len(s)
			n += 1 + l + sovEndDevice(uint64(l))
		}
	}
	l = m.DefaultFormatters.Size()
	n += 1 + l + sovEndDevice(uint64(l))
	if m.DefaultMACParameters != nil {
		l = m.DefaultMACParameters.Size()
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if m.MinFrequency != 0 {
		n += 1 + sovEndDevice(m.MinFrequency)
	}
	if m.MaxFrequency != 0 {
		n += 1 + sovEndDevice(m.MaxFrequency)
	}
	if m.FCntResets {
		n += 2
	}
	if m.Supports32BitFCnt {
		n += 2
	}
	if m.DisableJoinNonceCheck {
		n += 2
	}
	return n
}

func (m *MACSettings) Size() (n int) {
	var l int
	_ = l
	if m.DisableADR {
		n += 2
	}
	if m.ADRMargin != 0 {
		n += 1 + sovEndDevice(uint64(m.ADRMargin))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ClassBTimeout)
	n += 1 + l + sovEndDevice(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ClassCTimeout)
	n += 1 + l + sovEndDevice(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.StatusTimePeriodicity)
	n += 1 + l + sovEndDevice(uint64(l))
	if m.StatusCountPeriodicity != 0 {
		n += 1 + sovEndDevice(m.StatusCountPeriodicity)
	}
	return n
}

func (m *MACState) Size() (n int) {
	var l int
	_ = l
	l = m.MACParameters.Size()
	n += 1 + l + sovEndDevice(uint64(l))
	l = m.DesiredMACParameters.Size()
	n += 1 + l + sovEndDevice(uint64(l))
	if m.DeviceClass != 0 {
		n += 1 + sovEndDevice(uint64(m.DeviceClass))
	}
	if m.LoRaWANVersion != 0 {
		n += 1 + sovEndDevice(uint64(m.LoRaWANVersion))
	}
	if m.NextConfirmedDownlinkAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.NextConfirmedDownlinkAt)
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if m.PingSlotPeriodicity != 0 {
		n += 1 + sovEndDevice(uint64(m.PingSlotPeriodicity))
	}
	if m.PendingApplicationDownlink != nil {
		l = m.PendingApplicationDownlink.Size()
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if len(m.QueuedResponses) > 0 {
		for _, e := range m.QueuedResponses {
			l = e.Size()
			n += 1 + l + sovEndDevice(uint64(l))
		}
	}
	if len(m.PendingRequests) > 0 {
		for _, e := range m.PendingRequests {
			l = e.Size()
			n += 1 + l + sovEndDevice(uint64(l))
		}
	}
	return n
}

func (m *EndDevice) Size() (n int) {
	var l int
	_ = l
	l = m.EndDeviceIdentifiers.Size()
	n += 1 + l + sovEndDevice(uint64(l))
	l = m.EndDeviceVersionIdentifiers.Size()
	n += 1 + l + sovEndDevice(uint64(l))
	if m.RootKeys != nil {
		l = m.RootKeys.Size()
		n += 1 + l + sovEndDevice(uint64(l))
	}
	l = len(m.NetworkServerAddress)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	l = len(m.ApplicationServerAddress)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	l = len(m.FrequencyPlanID)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	l = m.MACSettings.Size()
	n += 1 + l + sovEndDevice(uint64(l))
	if m.MACState != nil {
		l = m.MACState.Size()
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if m.SupportsJoin {
		n += 2
	}
	if m.Session != nil {
		l = m.Session.Size()
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if m.SessionFallback != nil {
		l = m.SessionFallback.Size()
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if m.NextDevNonce != 0 {
		n += 1 + sovEndDevice(uint64(m.NextDevNonce))
	}
	if len(m.UsedDevNonces) > 0 {
		l = 0
		for _, e := range m.UsedDevNonces {
			l += sovEndDevice(uint64(e))
		}
		n += 1 + sovEndDevice(uint64(l)) + l
	}
	if m.NextJoinNonce != 0 {
		n += 1 + sovEndDevice(uint64(m.NextJoinNonce))
	}
	if len(m.UsedJoinNonces) > 0 {
		l = 0
		for _, e := range m.UsedJoinNonces {
			l += sovEndDevice(uint64(e))
		}
		n += 1 + sovEndDevice(uint64(l)) + l
	}
	if m.NextRJCount0 != 0 {
		n += 2 + sovEndDevice(uint64(m.NextRJCount0))
	}
	if m.NextRJCount1 != 0 {
		n += 2 + sovEndDevice(uint64(m.NextRJCount1))
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 2 + l + sovEndDevice(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.NextStatusAt)
	n += 2 + l + sovEndDevice(uint64(l))
	if m.NextStatusAfter != 0 {
		n += 2 + sovEndDevice(m.NextStatusAfter)
	}
	if m.BatteryPercentage != 0 {
		n += 6
	}
	if m.DownlinkMargin != 0 {
		n += 2 + sovEndDevice(uint64(m.DownlinkMargin))
	}
	if len(m.RecentUplinks) > 0 {
		for _, e := range m.RecentUplinks {
			l = e.Size()
			n += 2 + l + sovEndDevice(uint64(l))
		}
	}
	if len(m.RecentDownlinks) > 0 {
		for _, e := range m.RecentDownlinks {
			l = e.Size()
			n += 2 + l + sovEndDevice(uint64(l))
		}
	}
	if len(m.QueuedApplicationDownlinks) > 0 {
		for _, e := range m.QueuedApplicationDownlinks {
			l = e.Size()
			n += 2 + l + sovEndDevice(uint64(l))
		}
	}
	l = m.MessagePayloadFormatters.Size()
	n += 2 + l + sovEndDevice(uint64(l))
	if m.Attributes != nil {
		l = m.Attributes.Size()
		n += 2 + l + sovEndDevice(uint64(l))
	}
	if m.StatusUpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.StatusUpdatedAt)
		n += 2 + l + sovEndDevice(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 2 + l + sovEndDevice(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)
	n += 2 + l + sovEndDevice(uint64(l))
	return n
}

func (m *EndDevices) Size() (n int) {
	var l int
	_ = l
	if len(m.EndDevices) > 0 {
		for _, e := range m.EndDevices {
			l = e.Size()
			n += 1 + l + sovEndDevice(uint64(l))
		}
	}
	return n
}

func (m *SetDeviceRequest) Size() (n int) {
	var l int
	_ = l
	l = m.Device.Size()
	n += 1 + l + sovEndDevice(uint64(l))
	if m.FieldMask != nil {
		l = m.FieldMask.Size()
		n += 1 + l + sovEndDevice(uint64(l))
	}
	return n
}

func sovEndDevice(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEndDevice(x uint64) (n int) {
	return sovEndDevice((x << 1) ^ uint64((int64(x) >> 63)))
}
func (this *Session) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Session{`,
		`DevAddr:` + fmt.Sprintf("%v", this.DevAddr) + `,`,
		`SessionKeys:` + strings.Replace(strings.Replace(this.SessionKeys.String(), "SessionKeys", "SessionKeys", 1), `&`, ``, 1) + `,`,
		`NextFCntUp:` + fmt.Sprintf("%v", this.NextFCntUp) + `,`,
		`NextNFCntDown:` + fmt.Sprintf("%v", this.NextNFCntDown) + `,`,
		`NextAFCntDown:` + fmt.Sprintf("%v", this.NextAFCntDown) + `,`,
		`LastConfFCntDown:` + fmt.Sprintf("%v", this.LastConfFCntDown) + `,`,
		`StartedAt:` + strings.Replace(strings.Replace(this.StartedAt.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACParameters{`,
		`MaxEIRP:` + fmt.Sprintf("%v", this.MaxEIRP) + `,`,
		`UplinkDwellTime:` + fmt.Sprintf("%v", this.UplinkDwellTime) + `,`,
		`DownlinkDwellTime:` + fmt.Sprintf("%v", this.DownlinkDwellTime) + `,`,
		`ADRDataRateIndex:` + fmt.Sprintf("%v", this.ADRDataRateIndex) + `,`,
		`ADRTxPowerIndex:` + fmt.Sprintf("%v", this.ADRTxPowerIndex) + `,`,
		`ADRNbTrans:` + fmt.Sprintf("%v", this.ADRNbTrans) + `,`,
		`ADRAckLimit:` + fmt.Sprintf("%v", this.ADRAckLimit) + `,`,
		`ADRAckDelay:` + fmt.Sprintf("%v", this.ADRAckDelay) + `,`,
		`Rx1Delay:` + fmt.Sprintf("%v", this.Rx1Delay) + `,`,
		`Rx1DataRateOffset:` + fmt.Sprintf("%v", this.Rx1DataRateOffset) + `,`,
		`Rx2DataRateIndex:` + fmt.Sprintf("%v", this.Rx2DataRateIndex) + `,`,
		`Rx2Frequency:` + fmt.Sprintf("%v", this.Rx2Frequency) + `,`,
		`RejoinTimePeriodicity:` + fmt.Sprintf("%v", this.RejoinTimePeriodicity) + `,`,
		`RejoinCountPeriodicity:` + fmt.Sprintf("%v", this.RejoinCountPeriodicity) + `,`,
		`DutyCycle:` + fmt.Sprintf("%v", this.DutyCycle) + `,`,
		`Channels:` + strings.Replace(fmt.Sprintf("%v", this.Channels), "MACParameters_Channel", "MACParameters_Channel", 1) + `,`,
		`PingSlotFrequency:` + fmt.Sprintf("%v", this.PingSlotFrequency) + `,`,
		`PingSlotDataRateIndex:` + fmt.Sprintf("%v", this.PingSlotDataRateIndex) + `,`,
		`BeaconFrequency:` + fmt.Sprintf("%v", this.BeaconFrequency) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACParameters_Channel) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACParameters_Channel{`,
		`UplinkFrequency:` + fmt.Sprintf("%v", this.UplinkFrequency) + `,`,
		`DownlinkFrequency:` + fmt.Sprintf("%v", this.DownlinkFrequency) + `,`,
		`MinDataRateIndex:` + fmt.Sprintf("%v", this.MinDataRateIndex) + `,`,
		`MaxDataRateIndex:` + fmt.Sprintf("%v", this.MaxDataRateIndex) + `,`,
		`UplinkEnabled:` + fmt.Sprintf("%v", this.UplinkEnabled) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndDeviceBrand) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndDeviceBrand{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`URL:` + fmt.Sprintf("%v", this.URL) + `,`,
		`Logos:` + fmt.Sprintf("%v", this.Logos) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndDeviceModel) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndDeviceModel{`,
		`BrandID:` + fmt.Sprintf("%v", this.BrandID) + `,`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndDeviceVersionIdentifiers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndDeviceVersionIdentifiers{`,
		`BrandID:` + fmt.Sprintf("%v", this.BrandID) + `,`,
		`ModelID:` + fmt.Sprintf("%v", this.ModelID) + `,`,
		`LoRaWANVersion:` + fmt.Sprintf("%v", this.LoRaWANVersion) + `,`,
		`LoRaWANPHYVersion:` + fmt.Sprintf("%v", this.LoRaWANPHYVersion) + `,`,
		`HardwareVersion:` + fmt.Sprintf("%v", this.HardwareVersion) + `,`,
		`FirmwareVersion:` + fmt.Sprintf("%v", this.FirmwareVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndDeviceVersion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndDeviceVersion{`,
		`EndDeviceVersionIdentifiers:` + strings.Replace(strings.Replace(this.EndDeviceVersionIdentifiers.String(), "EndDeviceVersionIdentifiers", "EndDeviceVersionIdentifiers", 1), `&`, ``, 1) + `,`,
		`Photos:` + fmt.Sprintf("%v", this.Photos) + `,`,
		`DefaultFormatters:` + strings.Replace(strings.Replace(this.DefaultFormatters.String(), "MessagePayloadFormatters", "MessagePayloadFormatters", 1), `&`, ``, 1) + `,`,
		`DefaultMACParameters:` + strings.Replace(fmt.Sprintf("%v", this.DefaultMACParameters), "MACParameters", "MACParameters", 1) + `,`,
		`MinFrequency:` + fmt.Sprintf("%v", this.MinFrequency) + `,`,
		`MaxFrequency:` + fmt.Sprintf("%v", this.MaxFrequency) + `,`,
		`FCntResets:` + fmt.Sprintf("%v", this.FCntResets) + `,`,
		`Supports32BitFCnt:` + fmt.Sprintf("%v", this.Supports32BitFCnt) + `,`,
		`DisableJoinNonceCheck:` + fmt.Sprintf("%v", this.DisableJoinNonceCheck) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACSettings{`,
		`DisableADR:` + fmt.Sprintf("%v", this.DisableADR) + `,`,
		`ADRMargin:` + fmt.Sprintf("%v", this.ADRMargin) + `,`,
		`ClassBTimeout:` + strings.Replace(strings.Replace(this.ClassBTimeout.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`ClassCTimeout:` + strings.Replace(strings.Replace(this.ClassCTimeout.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`StatusTimePeriodicity:` + strings.Replace(strings.Replace(this.StatusTimePeriodicity.String(), "Duration", "types.Duration", 1), `&`, ``, 1) + `,`,
		`StatusCountPeriodicity:` + fmt.Sprintf("%v", this.StatusCountPeriodicity) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACState{`,
		`MACParameters:` + strings.Replace(strings.Replace(this.MACParameters.String(), "MACParameters", "MACParameters", 1), `&`, ``, 1) + `,`,
		`DesiredMACParameters:` + strings.Replace(strings.Replace(this.DesiredMACParameters.String(), "MACParameters", "MACParameters", 1), `&`, ``, 1) + `,`,
		`DeviceClass:` + fmt.Sprintf("%v", this.DeviceClass) + `,`,
		`LoRaWANVersion:` + fmt.Sprintf("%v", this.LoRaWANVersion) + `,`,
		`NextConfirmedDownlinkAt:` + strings.Replace(fmt.Sprintf("%v", this.NextConfirmedDownlinkAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`PingSlotPeriodicity:` + fmt.Sprintf("%v", this.PingSlotPeriodicity) + `,`,
		`PendingApplicationDownlink:` + strings.Replace(fmt.Sprintf("%v", this.PendingApplicationDownlink), "ApplicationDownlink", "ApplicationDownlink", 1) + `,`,
		`QueuedResponses:` + strings.Replace(fmt.Sprintf("%v", this.QueuedResponses), "MACCommand", "MACCommand", 1) + `,`,
		`PendingRequests:` + strings.Replace(fmt.Sprintf("%v", this.PendingRequests), "MACCommand", "MACCommand", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndDevice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndDevice{`,
		`EndDeviceIdentifiers:` + strings.Replace(strings.Replace(this.EndDeviceIdentifiers.String(), "EndDeviceIdentifiers", "EndDeviceIdentifiers", 1), `&`, ``, 1) + `,`,
		`EndDeviceVersionIdentifiers:` + strings.Replace(strings.Replace(this.EndDeviceVersionIdentifiers.String(), "EndDeviceVersionIdentifiers", "EndDeviceVersionIdentifiers", 1), `&`, ``, 1) + `,`,
		`RootKeys:` + strings.Replace(fmt.Sprintf("%v", this.RootKeys), "RootKeys", "RootKeys", 1) + `,`,
		`NetworkServerAddress:` + fmt.Sprintf("%v", this.NetworkServerAddress) + `,`,
		`ApplicationServerAddress:` + fmt.Sprintf("%v", this.ApplicationServerAddress) + `,`,
		`FrequencyPlanID:` + fmt.Sprintf("%v", this.FrequencyPlanID) + `,`,
		`MACSettings:` + strings.Replace(strings.Replace(this.MACSettings.String(), "MACSettings", "MACSettings", 1), `&`, ``, 1) + `,`,
		`MACState:` + strings.Replace(fmt.Sprintf("%v", this.MACState), "MACState", "MACState", 1) + `,`,
		`SupportsJoin:` + fmt.Sprintf("%v", this.SupportsJoin) + `,`,
		`Session:` + strings.Replace(fmt.Sprintf("%v", this.Session), "Session", "Session", 1) + `,`,
		`SessionFallback:` + strings.Replace(fmt.Sprintf("%v", this.SessionFallback), "Session", "Session", 1) + `,`,
		`NextDevNonce:` + fmt.Sprintf("%v", this.NextDevNonce) + `,`,
		`UsedDevNonces:` + fmt.Sprintf("%v", this.UsedDevNonces) + `,`,
		`NextJoinNonce:` + fmt.Sprintf("%v", this.NextJoinNonce) + `,`,
		`UsedJoinNonces:` + fmt.Sprintf("%v", this.UsedJoinNonces) + `,`,
		`NextRJCount0:` + fmt.Sprintf("%v", this.NextRJCount0) + `,`,
		`NextRJCount1:` + fmt.Sprintf("%v", this.NextRJCount1) + `,`,
		`Location:` + strings.Replace(fmt.Sprintf("%v", this.Location), "Location", "Location", 1) + `,`,
		`NextStatusAt:` + strings.Replace(strings.Replace(this.NextStatusAt.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`NextStatusAfter:` + fmt.Sprintf("%v", this.NextStatusAfter) + `,`,
		`BatteryPercentage:` + fmt.Sprintf("%v", this.BatteryPercentage) + `,`,
		`DownlinkMargin:` + fmt.Sprintf("%v", this.DownlinkMargin) + `,`,
		`RecentUplinks:` + strings.Replace(fmt.Sprintf("%v", this.RecentUplinks), "UplinkMessage", "UplinkMessage", 1) + `,`,
		`RecentDownlinks:` + strings.Replace(fmt.Sprintf("%v", this.RecentDownlinks), "DownlinkMessage", "DownlinkMessage", 1) + `,`,
		`QueuedApplicationDownlinks:` + strings.Replace(fmt.Sprintf("%v", this.QueuedApplicationDownlinks), "ApplicationDownlink", "ApplicationDownlink", 1) + `,`,
		`MessagePayloadFormatters:` + strings.Replace(strings.Replace(this.MessagePayloadFormatters.String(), "MessagePayloadFormatters", "MessagePayloadFormatters", 1), `&`, ``, 1) + `,`,
		`Attributes:` + strings.Replace(fmt.Sprintf("%v", this.Attributes), "Struct", "types.Struct", 1) + `,`,
		`StatusUpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.StatusUpdatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`CreatedAt:` + strings.Replace(strings.Replace(this.CreatedAt.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`UpdatedAt:` + strings.Replace(strings.Replace(this.UpdatedAt.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndDevices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndDevices{`,
		`EndDevices:` + strings.Replace(fmt.Sprintf("%v", this.EndDevices), "EndDevice", "EndDevice", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetDeviceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetDeviceRequest{`,
		`Device:` + strings.Replace(strings.Replace(this.Device.String(), "EndDevice", "EndDevice", 1), `&`, ``, 1) + `,`,
		`FieldMask:` + strings.Replace(fmt.Sprintf("%v", this.FieldMask), "FieldMask", "types.FieldMask", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringEndDevice(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Session) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Session: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Session: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SessionKeys.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextFCntUp", wireType)
			}
			m.NextFCntUp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextFCntUp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextNFCntDown", wireType)
			}
			m.NextNFCntDown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextNFCntDown |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextAFCntDown", wireType)
			}
			m.NextAFCntDown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextAFCntDown |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastConfFCntDown", wireType)
			}
			m.LastConfFCntDown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastConfFCntDown |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MACParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MACParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxEIRP", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:])
			iNdEx += 4
			m.MaxEIRP = math.Float32frombits(v)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplinkDwellTime", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UplinkDwellTime = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkDwellTime", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DownlinkDwellTime = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ADRDataRateIndex", wireType)
			}
			m.ADRDataRateIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ADRDataRateIndex |= (DataRateIndex(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ADRTxPowerIndex", wireType)
			}
			m.ADRTxPowerIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ADRTxPowerIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ADRNbTrans", wireType)
			}
			m.ADRNbTrans = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ADRNbTrans |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ADRAckLimit", wireType)
			}
			m.ADRAckLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ADRAckLimit |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ADRAckDelay", wireType)
			}
			m.ADRAckDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ADRAckDelay |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx1Delay", wireType)
			}
			m.Rx1Delay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx1Delay |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx1DataRateOffset", wireType)
			}
			m.Rx1DataRateOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx1DataRateOffset |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx2DataRateIndex", wireType)
			}
			m.Rx2DataRateIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx2DataRateIndex |= (DataRateIndex(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx2Frequency", wireType)
			}
			m.Rx2Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx2Frequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejoinTimePeriodicity", wireType)
			}
			m.RejoinTimePeriodicity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RejoinTimePeriodicity |= (RejoinTimeExponent(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejoinCountPeriodicity", wireType)
			}
			m.RejoinCountPeriodicity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RejoinCountPeriodicity |= (RejoinCountExponent(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DutyCycle", wireType)
			}
			m.DutyCycle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DutyCycle |= (AggregatedDutyCycle(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channels = append(m.Channels, &MACParameters_Channel{})
			if err := m.Channels[len(m.Channels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingSlotFrequency", wireType)
			}
			m.PingSlotFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PingSlotFrequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingSlotDataRateIndex", wireType)
			}
			m.PingSlotDataRateIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PingSlotDataRateIndex |= (DataRateIndex(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeaconFrequency", wireType)
			}
			m.BeaconFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeaconFrequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACParameters_Channel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Channel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Channel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplinkFrequency", wireType)
			}
			m.UplinkFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UplinkFrequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkFrequency", wireType)
			}
			m.DownlinkFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DownlinkFrequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDataRateIndex", wireType)
			}
			m.MinDataRateIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinDataRateIndex |= (DataRateIndex(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDataRateIndex", wireType)
			}
			m.MaxDataRateIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDataRateIndex |= (DataRateIndex(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplinkEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UplinkEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDeviceBrand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndDeviceBrand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndDeviceBrand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logos", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logos = append(m.Logos, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDeviceModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndDeviceModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndDeviceModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BrandID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDeviceVersionIdentifiers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndDeviceVersionIdentifiers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndDeviceVersionIdentifiers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BrandID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoRaWANVersion", wireType)
			}
			m.LoRaWANVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoRaWANVersion |= (MACVersion(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoRaWANPHYVersion", wireType)
			}
			m.LoRaWANPHYVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoRaWANPHYVersion |= (PHYVersion(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HardwareVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirmwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirmwareVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDeviceVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndDeviceVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndDeviceVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDeviceVersionIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EndDeviceVersionIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photos", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photos = append(m.Photos, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultFormatters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultFormatters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultMACParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultMACParameters == nil {
				m.DefaultMACParameters = &MACParameters{}
			}
			if err := m.DefaultMACParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinFrequency", wireType)
			}
			m.MinFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinFrequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFrequency", wireType)
			}
			m.MaxFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxFrequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCntResets", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FCntResets = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supports32BitFCnt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Supports32BitFCnt = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableJoinNonceCheck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableJoinNonceCheck = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MACSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MACSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableADR", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableADR = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ADRMargin", wireType)
			}
			m.ADRMargin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ADRMargin |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassBTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ClassBTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassCTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ClassCTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusTimePeriodicity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.StatusTimePeriodicity, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusCountPeriodicity", wireType)
			}
			m.StatusCountPeriodicity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatusCountPeriodicity |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MACState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MACState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MACParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MACParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredMACParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DesiredMACParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceClass", wireType)
			}
			m.DeviceClass = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceClass |= (Class(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoRaWANVersion", wireType)
			}
			m.LoRaWANVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoRaWANVersion |= (MACVersion(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextConfirmedDownlinkAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextConfirmedDownlinkAt == nil {
				m.NextConfirmedDownlinkAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.NextConfirmedDownlinkAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingSlotPeriodicity", wireType)
			}
			m.PingSlotPeriodicity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PingSlotPeriodicity |= (PingSlotPeriod(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingApplicationDownlink", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PendingApplicationDownlink == nil {
				m.PendingApplicationDownlink = &ApplicationDownlink{}
			}
			if err := m.PendingApplicationDownlink.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueuedResponses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueuedResponses = append(m.QueuedResponses, &MACCommand{})
			if err := m.QueuedResponses[len(m.QueuedResponses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingRequests = append(m.PendingRequests, &MACCommand{})
			if err := m.PendingRequests[len(m.PendingRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDevice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndDevice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndDevice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDeviceIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EndDeviceIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDeviceVersionIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EndDeviceVersionIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RootKeys == nil {
				m.RootKeys = &RootKeys{}
			}
			if err := m.RootKeys.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkServerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkServerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationServerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationServerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyPlanID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrequencyPlanID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MACSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MACSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MACState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MACState == nil {
				m.MACState = &MACState{}
			}
			if err := m.MACState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportsJoin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SupportsJoin = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Session == nil {
				m.Session = &Session{}
			}
			if err := m.Session.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionFallback", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SessionFallback == nil {
				m.SessionFallback = &Session{}
			}
			if err := m.SessionFallback.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextDevNonce", wireType)
			}
			m.NextDevNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextDevNonce |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEndDevice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UsedDevNonces = append(m.UsedDevNonces, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEndDevice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEndDevice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEndDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UsedDevNonces = append(m.UsedDevNonces, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedDevNonces", wireType)
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextJoinNonce", wireType)
			}
			m.NextJoinNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextJoinNonce |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEndDevice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UsedJoinNonces = append(m.UsedJoinNonces, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEndDevice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEndDevice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEndDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UsedJoinNonces = append(m.UsedJoinNonces, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedJoinNonces", wireType)
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextRJCount0", wireType)
			}
			m.NextRJCount0 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextRJCount0 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextRJCount1", wireType)
			}
			m.NextRJCount1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextRJCount1 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &Location{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextStatusAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.NextStatusAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextStatusAfter", wireType)
			}
			m.NextStatusAfter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextStatusAfter |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatteryPercentage", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:])
			iNdEx += 4
			m.BatteryPercentage = math.Float32frombits(v)
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkMargin", wireType)
			}
			m.DownlinkMargin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DownlinkMargin |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecentUplinks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecentUplinks = append(m.RecentUplinks, &UplinkMessage{})
			if err := m.RecentUplinks[len(m.RecentUplinks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecentDownlinks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecentDownlinks = append(m.RecentDownlinks, &DownlinkMessage{})
			if err := m.RecentDownlinks[len(m.RecentDownlinks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueuedApplicationDownlinks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueuedApplicationDownlinks = append(m.QueuedApplicationDownlinks, &ApplicationDownlink{})
			if err := m.QueuedApplicationDownlinks[len(m.QueuedApplicationDownlinks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessagePayloadFormatters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MessagePayloadFormatters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = &types.Struct{}
			}
			if err := m.Attributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusUpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StatusUpdatedAt == nil {
				m.StatusUpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.StatusUpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 97:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDevices) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndDevices: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndDevices: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDevices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndDevices = append(m.EndDevices, &EndDevice{})
			if err := m.EndDevices[len(m.EndDevices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetDeviceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetDeviceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetDeviceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Device.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FieldMask == nil {
				m.FieldMask = &types.FieldMask{}
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEndDevice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEndDevice
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEndDevice
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEndDevice(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEndDevice = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEndDevice   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("lorawan-stack/api/end_device.proto", fileDescriptor_end_device_ee3c8ff8609c1f53)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/end_device.proto", fileDescriptor_end_device_ee3c8ff8609c1f53)
}

var fileDescriptor_end_device_ee3c8ff8609c1f53 = []byte{
	// 2756 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x59, 0x3d, 0x70, 0x1b, 0x47,
	0xb2, 0xc6, 0x82, 0x10, 0x09, 0x0c, 0x08, 0x02, 0x18, 0x92, 0xd2, 0x8a, 0xd2, 0x5b, 0xf0, 0x51,
	0xb6, 0x1f, 0xed, 0x67, 0x83, 0x16, 0xe5, 0x57, 0xb2, 0x5d, 0xaf, 0xea, 0x8c, 0x1f, 0xc9, 0xa6,
	0x4c, 0xf2, 0x58, 0x43, 0xc9, 0xaa, 0xf3, 0x95, 0x6b, 0x6b, 0xb0, 0x3b, 0x00, 0x57, 0x04, 0x76,
	0xe1, 0x99, 0x01, 0x09, 0x64, 0xbe, 0xe4, 0xca, 0x99, 0x1d, 0x3a, 0x3b, 0xd7, 0x45, 0x0e, 0x2e,
	0x70, 0x72, 0x55, 0x0e, 0x7d, 0x99, 0x43, 0x87, 0xae, 0x0b, 0x70, 0x26, 0x98, 0x38, 0x74, 0xe8,
	0xec, 0xae, 0xe6, 0x67, 0x77, 0xf1, 0x43, 0xe9, 0xa8, 0xbb, 0x4b, 0x50, 0xbb, 0xdd, 0x5f, 0x7f,
	0xf3, 0xd3, 0x3d, 0xdd, 0x3d, 0x0b, 0xb0, 0xd1, 0x0e, 0x28, 0x3e, 0xc5, 0xfe, 0x6b, 0x8c, 0x63,
	0xe7, 0x78, 0x0b, 0x77, 0xbd, 0x2d, 0xe2, 0xbb, 0xb6, 0x4b, 0x4e, 0x3c, 0x87, 0x94, 0xbb, 0x34,
	0xe0, 0x01, 0x5c, 0xe2, 0xdc, 0x2f, 0x6b, 0x5c, 0xf9, 0xe4, 0xce, 0xda, 0x6b, 0x2d, 0x8f, 0x1f,
	0xf5, 0x1a, 0x65, 0x27, 0xe8, 0x6c, 0xb5, 0x82, 0x56, 0xb0, 0x25, 0x61, 0x8d, 0x5e, 0x53, 0xbe,
	0xc9, 0x17, 0xf9, 0xa4, 0xcc, 0xd7, 0x6e, 0xcd, 0x0e, 0xe1, 0xb9, 0xc4, 0xe7, 0x5e, 0xd3, 0x23,
	0x94, 0x69, 0xd0, 0xcd, 0x59, 0xd0, 0x31, 0x19, 0x84, 0xda, 0xd2, 0xac, 0x36, 0x9c, 0x8f, 0x02,
	0xac, 0xcf, 0x02, 0x3a, 0x84, 0x31, 0xdc, 0x22, 0xec, 0x59, 0x08, 0x8e, 0x5d, 0xcc, 0x71, 0x38,
	0x85, 0x56, 0x10, 0xb4, 0xda, 0x44, 0xaa, 0xb0, 0xef, 0x07, 0x1c, 0x73, 0x2f, 0xf0, 0x43, 0x7b,
	0x4b, 0x6b, 0xa3, 0xb5, 0xba, 0x3d, 0x2a, 0x01, 0x21, 0xff, 0xb4, 0xbe, 0xe9, 0x91, 0xb6, 0x6b,
	0x77, 0x30, 0x3b, 0x9e, 0xe2, 0x8f, 0x10, 0x8c, 0xd3, 0x9e, 0xc3, 0xc3, 0x25, 0x4e, 0x6b, 0xb9,
	0xd7, 0x21, 0x8c, 0xe3, 0x4e, 0x57, 0x01, 0x36, 0x3e, 0x9b, 0x03, 0x0b, 0x87, 0x84, 0x31, 0x2f,
	0xf0, 0xe1, 0x63, 0x90, 0x76, 0xc9, 0x89, 0x8d, 0x5d, 0x97, 0x9a, 0xc9, 0x75, 0x63, 0x73, 0xb1,
	0xfa, 0xff, 0xdf, 0x0d, 0x4b, 0x89, 0xbf, 0x0e, 0x4b, 0x6f, 0xb4, 0x82, 0x32, 0x3f, 0x22, 0xfc,
	0xc8, 0xf3, 0x5b, 0xac, 0xec, 0x13, 0x7e, 0x1a, 0xd0, 0xe3, 0xad, 0xc9, 0xb5, 0x77, 0x8f, 0x5b,
	0x5b, 0x7c, 0xd0, 0x25, 0xac, 0x5c, 0x27, 0x27, 0x15, 0xd7, 0xa5, 0x68, 0xc1, 0x55, 0x0f, 0xf0,
	0x2d, 0x90, 0x12, 0xdb, 0x6e, 0xce, 0xad, 0x1b, 0x9b, 0xd9, 0xed, 0x1b, 0xe5, 0x49, 0xcf, 0x97,
	0xf5, 0xf8, 0xef, 0x93, 0x01, 0xab, 0xa6, 0xc5, 0x88, 0xdf, 0x0f, 0x4b, 0x06, 0x92, 0x26, 0xf0,
	0xbf, 0x41, 0xce, 0x27, 0x7d, 0x6e, 0x37, 0x6d, 0xc7, 0xe7, 0x76, 0xaf, 0x6b, 0xa6, 0xd6, 0x8d,
	0xcd, 0x1c, 0x02, 0x42, 0x78, 0xbf, 0xe6, 0xf3, 0x47, 0x5d, 0xb8, 0x09, 0x8a, 0x12, 0xe2, 0x6b,
	0x90, 0x1b, 0x9c, 0xfa, 0xe6, 0x15, 0x09, 0x93, 0xb6, 0xfb, 0x02, 0x57, 0x0f, 0x4e, 0xfd, 0x08,
	0x89, 0xc7, 0x91, 0xf3, 0x31, 0xb2, 0x12, 0x21, 0xcb, 0x60, 0xa5, 0x8d, 0x19, 0xb7, 0x9d, 0xc0,
	0x6f, 0x8e, 0x83, 0x17, 0x24, 0xb8, 0x20, 0x74, 0xb5, 0xc0, 0x6f, 0x46, 0xf8, 0x1a, 0x00, 0x8c,
	0x63, 0xca, 0x89, 0x6b, 0x63, 0x6e, 0xa6, 0xe5, 0x3a, 0xd7, 0xca, 0x6a, 0xf3, 0xcb, 0xe1, 0xe6,
	0x97, 0x1f, 0x86, 0x9b, 0xaf, 0x96, 0xf9, 0xf9, 0xdf, 0x4a, 0x06, 0xca, 0x68, 0xbb, 0x0a, 0x7f,
	0x90, 0x4a, 0x1b, 0x85, 0xe4, 0xc6, 0x5f, 0xb2, 0x20, 0xb7, 0x57, 0xa9, 0x1d, 0x60, 0x8a, 0x3b,
	0x84, 0x13, 0xca, 0xe0, 0x4b, 0x20, 0xdd, 0xc1, 0x7d, 0x9b, 0x78, 0xb4, 0x6b, 0x1a, 0xeb, 0xc6,
	0x66, 0xb2, 0x9a, 0x1d, 0x0d, 0x4b, 0x0b, 0x7b, 0xb8, 0x7f, 0x6f, 0x07, 0x1d, 0xa0, 0x85, 0x0e,
	0xee, 0xdf, 0xf3, 0x68, 0x17, 0xbe, 0x02, 0x8a, 0xbd, 0x6e, 0xdb, 0xf3, 0x8f, 0x6d, 0xf7, 0x94,
	0xb4, 0xdb, 0xb6, 0xf0, 0xb5, 0x74, 0x64, 0x1a, 0xe5, 0x95, 0xa2, 0x2e, 0xe4, 0x62, 0x16, 0xb0,
	0x0c, 0x96, 0xc5, 0x82, 0xa6, 0xd1, 0x73, 0x12, 0x5d, 0x0c, 0x55, 0x31, 0xbe, 0x01, 0x96, 0xb1,
	0x4b, 0x6d, 0x11, 0xd8, 0x36, 0xc5, 0x9c, 0xd8, 0x9e, 0xef, 0x92, 0xbe, 0xf4, 0xc6, 0xd2, 0xf6,
	0x7f, 0x4d, 0x7b, 0xb4, 0x8e, 0x39, 0x46, 0x98, 0x93, 0x1d, 0x01, 0xaa, 0xae, 0x8c, 0x86, 0xa5,
	0x42, 0xa5, 0x8e, 0x26, 0xa4, 0xa8, 0x80, 0x5d, 0x3a, 0x21, 0x81, 0xef, 0x00, 0x28, 0xc6, 0xe0,
	0x7d, 0xbb, 0x1b, 0x9c, 0x12, 0xaa, 0x87, 0x90, 0x9e, 0xac, 0x2e, 0x8f, 0x86, 0xa5, 0x7c, 0xa5,
	0x8e, 0x1e, 0xf6, 0x0f, 0x84, 0x4e, 0x51, 0xe4, 0xb1, 0x4b, 0xc7, 0x05, 0xf0, 0x75, 0xb0, 0x28,
	0x18, 0xfc, 0x86, 0xcd, 0x29, 0xf6, 0x99, 0xf2, 0x6d, 0x75, 0x69, 0x34, 0x2c, 0x81, 0x4a, 0x1d,
	0xed, 0x37, 0x1e, 0x0a, 0x29, 0x02, 0xd8, 0xa5, 0xfa, 0x19, 0xde, 0x01, 0x39, 0x61, 0x81, 0x9d,
	0x63, 0xbb, 0xed, 0x75, 0x3c, 0xae, 0x3c, 0x5c, 0xcd, 0x8f, 0x86, 0xa5, 0x6c, 0xa5, 0x8e, 0x2a,
	0xce, 0xf1, 0xae, 0x10, 0xa3, 0x2c, 0x76, 0x69, 0xf8, 0x32, 0x6e, 0xe4, 0x92, 0x36, 0x1e, 0x48,
	0x87, 0x4f, 0x18, 0xd5, 0x85, 0x38, 0x34, 0x92, 0x2f, 0xf0, 0x06, 0xc8, 0xd0, 0xfe, 0x6d, 0x6d,
	0x90, 0x91, 0x71, 0x94, 0xa6, 0xfd, 0xdb, 0x4a, 0xb9, 0x05, 0x56, 0xa4, 0x32, 0xda, 0xde, 0xa0,
	0xd9, 0x64, 0x84, 0x9b, 0x40, 0xe2, 0x8a, 0x02, 0xa7, 0xb7, 0xea, 0xd7, 0x52, 0x01, 0x77, 0xc1,
	0x32, 0xed, 0x6f, 0xcf, 0xf8, 0x23, 0x7b, 0x09, 0x7f, 0xa0, 0x02, 0xed, 0x6f, 0x4f, 0xee, 0xfc,
	0x2d, 0x90, 0x13, 0x6c, 0x4d, 0x4a, 0x3e, 0xee, 0x11, 0xdf, 0x19, 0x98, 0x8b, 0xeb, 0xc6, 0x66,
	0x0a, 0x2d, 0xd2, 0xfe, 0xf6, 0xfd, 0x50, 0x06, 0x3f, 0x04, 0xd7, 0x28, 0x79, 0x12, 0x78, 0xbe,
	0x0c, 0x15, 0xbb, 0x4b, 0xa8, 0x17, 0xb8, 0x9e, 0xe3, 0xf1, 0x81, 0x99, 0x93, 0xc3, 0x6e, 0x4c,
	0x0f, 0x8b, 0x24, 0x5c, 0xc4, 0xcf, 0xbd, 0x7e, 0x37, 0xf0, 0x89, 0xcf, 0xd1, 0x2a, 0x8d, 0x64,
	0x07, 0x31, 0x01, 0xfc, 0x08, 0x98, 0x9a, 0xdb, 0x09, 0x7a, 0x3e, 0x9f, 0x20, 0x5f, 0x92, 0xe4,
	0xb7, 0x2e, 0x26, 0xaf, 0x09, 0x78, 0xc4, 0x7e, 0x95, 0xc6, 0xc2, 0x71, 0xfa, 0x2a, 0x00, 0x6e,
	0x8f, 0x0f, 0x6c, 0x67, 0xe0, 0xb4, 0x89, 0x99, 0xbf, 0x98, 0xb0, 0xd2, 0x6a, 0x51, 0xd2, 0xc2,
	0x9c, 0xb8, 0xf5, 0x1e, 0x1f, 0xd4, 0x04, 0x14, 0x65, 0xdc, 0xf0, 0x11, 0x56, 0x40, 0xda, 0x39,
	0xc2, 0xbe, 0x4f, 0xda, 0xcc, 0x2c, 0xac, 0xcf, 0x6d, 0x66, 0xb7, 0x5f, 0x9c, 0x66, 0x98, 0x38,
	0xb6, 0xe5, 0x9a, 0x42, 0xa3, 0xc8, 0x4c, 0x1c, 0xba, 0xae, 0xe7, 0xb7, 0x6c, 0xd6, 0x0e, 0xf8,
	0xd8, 0x66, 0x17, 0xe5, 0x66, 0x17, 0x85, 0xea, 0xb0, 0x1d, 0xf0, 0x78, 0xc7, 0x1f, 0x83, 0xeb,
	0x31, 0x7e, 0xda, 0xd5, 0xf0, 0x32, 0xae, 0x5e, 0x0d, 0x49, 0x27, 0xfd, 0xfd, 0x32, 0x28, 0x34,
	0x08, 0x76, 0x02, 0x7f, 0x6c, 0x16, 0xcb, 0x72, 0x16, 0x79, 0x25, 0x8f, 0xe6, 0xb0, 0xf6, 0xa7,
	0x24, 0x58, 0xd0, 0x2b, 0x11, 0x66, 0x3a, 0xc1, 0xc4, 0x66, 0x86, 0x32, 0x53, 0xf2, 0x78, 0xea,
	0xaf, 0x01, 0x18, 0xe5, 0x97, 0x18, 0x9c, 0x54, 0x2b, 0x0d, 0x35, 0x31, 0x7c, 0x17, 0x2c, 0x77,
	0x3c, 0x7f, 0x66, 0x8d, 0x73, 0x97, 0x0a, 0xe7, 0x8e, 0xe7, 0x4f, 0x2e, 0x4f, 0xb0, 0xe1, 0xfe,
	0xbf, 0x94, 0xac, 0x50, 0xa1, 0x83, 0xfb, 0x93, 0x6c, 0x2f, 0x82, 0x25, 0xbd, 0x6a, 0xe2, 0xe3,
	0x46, 0x9b, 0xb8, 0x32, 0x25, 0xa5, 0x51, 0x4e, 0x49, 0xef, 0x29, 0xe1, 0xdb, 0xa9, 0x6f, 0xbe,
	0x2c, 0x25, 0xd4, 0xef, 0x46, 0x07, 0x2c, 0xdd, 0xf3, 0xdd, 0xba, 0x6c, 0x77, 0xaa, 0x14, 0xfb,
	0x2e, 0xbc, 0x0a, 0x92, 0x9e, 0x2b, 0x37, 0x2b, 0x53, 0x9d, 0x1f, 0x0d, 0x4b, 0xc9, 0x9d, 0x3a,
	0x4a, 0x7a, 0x2e, 0x84, 0x20, 0xe5, 0x63, 0x9d, 0xa6, 0x33, 0x48, 0x3e, 0xc3, 0xeb, 0x60, 0xae,
	0x47, 0xdb, 0x72, 0xf1, 0x99, 0xea, 0xc2, 0x68, 0x58, 0x9a, 0x7b, 0x84, 0x76, 0x91, 0x90, 0xc1,
	0x15, 0x70, 0xa5, 0x1d, 0xb4, 0x02, 0x66, 0xa6, 0xd6, 0xe7, 0x36, 0x33, 0x48, 0xbd, 0x6c, 0xb8,
	0x63, 0xc3, 0xed, 0x05, 0x2e, 0x69, 0x8b, 0x92, 0xd1, 0x10, 0xe3, 0xda, 0xd1, 0xa0, 0xb2, 0x64,
	0xc8, 0xb9, 0xec, 0xd4, 0xd1, 0x82, 0x54, 0xee, 0x84, 0xd3, 0x4a, 0x3e, 0x75, 0x5a, 0x73, 0xf1,
	0xb4, 0x36, 0xfe, 0x9e, 0x04, 0x37, 0xa2, 0x61, 0x3e, 0x20, 0x54, 0xd4, 0xec, 0x9d, 0xb8, 0xe5,
	0xba, 0xf4, 0x98, 0xa2, 0x9c, 0x89, 0x49, 0xda, 0xd1, 0xc8, 0xaa, 0x9c, 0x09, 0x99, 0xc0, 0x49,
	0xe5, 0x8e, 0x0b, 0x1f, 0x83, 0xbc, 0xf6, 0x92, 0x7d, 0xa2, 0x46, 0xd3, 0xf1, 0xb0, 0x76, 0xc1,
	0xb9, 0xd3, 0xf3, 0xa9, 0xc2, 0xd1, 0xb0, 0xb4, 0xb4, 0x1b, 0x20, 0xfc, 0xb8, 0xb2, 0xaf, 0x65,
	0x68, 0x49, 0x43, 0xf5, 0x3b, 0xc4, 0x60, 0x39, 0x24, 0xee, 0x1e, 0x0d, 0x22, 0xf2, 0xd4, 0xc5,
	0xe4, 0x07, 0xef, 0xfd, 0x26, 0x24, 0x5f, 0x1d, 0x0d, 0x4b, 0x45, 0x4d, 0x1e, 0x8b, 0x51, 0x51,
	0xa3, 0x0f, 0x8e, 0x06, 0xe1, 0x10, 0x2f, 0x83, 0xc2, 0x11, 0xa6, 0xee, 0x29, 0xa6, 0x24, 0xe2,
	0xbf, 0x22, 0xf7, 0x32, 0x1f, 0xca, 0xc7, 0xa0, 0x4d, 0x8f, 0x76, 0x26, 0xa0, 0xf3, 0x0a, 0x1a,
	0xca, 0x35, 0x74, 0xe3, 0xcf, 0x29, 0x50, 0x98, 0xf6, 0x00, 0x7c, 0x17, 0xcc, 0x79, 0x2e, 0x93,
	0x3b, 0x9e, 0xdd, 0xfe, 0xdf, 0xe9, 0xd9, 0x3f, 0xc3, 0x61, 0x63, 0xbd, 0x96, 0x60, 0x80, 0x57,
	0xc1, 0x7c, 0xf7, 0x28, 0xe0, 0x01, 0x33, 0x93, 0x32, 0xb8, 0xf4, 0x1b, 0xfc, 0x08, 0x40, 0x97,
	0x34, 0x71, 0xaf, 0xcd, 0xed, 0x66, 0x40, 0x3b, 0x98, 0x8b, 0xec, 0xa6, 0x7b, 0xb9, 0xcd, 0x19,
	0x57, 0xa8, 0xfe, 0xf8, 0x00, 0x0f, 0xda, 0x01, 0x76, 0xef, 0x47, 0xf8, 0x6a, 0x4a, 0x0c, 0x86,
	0x8a, 0x9a, 0x29, 0x56, 0xc0, 0x0e, 0xb8, 0x1a, 0xd2, 0x77, 0xb0, 0x63, 0x77, 0xa3, 0x04, 0x2a,
	0x1d, 0x92, 0x9d, 0x3d, 0xaf, 0x13, 0x59, 0xb6, 0x6a, 0x8e, 0x86, 0xa5, 0x95, 0xba, 0x22, 0x98,
	0xd0, 0xa0, 0x15, 0x4d, 0xbb, 0x87, 0x9d, 0xb1, 0x66, 0xea, 0x16, 0xc8, 0x89, 0x4c, 0x13, 0xe7,
	0xa4, 0x2b, 0xaa, 0xd4, 0x75, 0xbc, 0x38, 0xe9, 0x49, 0x10, 0xee, 0x8f, 0x81, 0xe6, 0x35, 0x08,
	0xf7, 0x63, 0xd0, 0x3a, 0x58, 0x54, 0x9d, 0x21, 0x25, 0x8c, 0x70, 0x26, 0x3b, 0x87, 0x34, 0x02,
	0xcd, 0x9a, 0xcf, 0x91, 0x94, 0xc0, 0x77, 0xc1, 0x2a, 0xeb, 0x75, 0xbb, 0x01, 0xe5, 0xcc, 0xbe,
	0xb3, 0x6d, 0x37, 0x3c, 0xdd, 0xc7, 0xca, 0x7e, 0x21, 0xad, 0xc2, 0xe9, 0x50, 0x03, 0xee, 0x6c,
	0x57, 0x3d, 0xd9, 0xd1, 0xa2, 0x22, 0x9b, 0x16, 0xc1, 0xbb, 0xc0, 0x74, 0x3d, 0x26, 0xf2, 0x8c,
	0x2d, 0x8b, 0xa4, 0x1f, 0xf8, 0x0e, 0xb1, 0x9d, 0x23, 0xe2, 0x1c, 0xcb, 0x56, 0x22, 0x8d, 0x56,
	0xb5, 0xfe, 0x41, 0xe0, 0xf9, 0xfb, 0x42, 0x5b, 0x13, 0x4a, 0x9d, 0x8e, 0xfe, 0x30, 0x07, 0xb2,
	0x7b, 0x95, 0xda, 0x21, 0xe1, 0x5c, 0x34, 0xf0, 0x70, 0x0b, 0x64, 0x43, 0x3a, 0xec, 0x52, 0x19,
	0x3a, 0x69, 0xd5, 0x25, 0xd5, 0x95, 0xb8, 0x52, 0x47, 0x08, 0x68, 0x48, 0xc5, 0xa5, 0xf0, 0x55,
	0x20, 0x7a, 0x26, 0xbb, 0x83, 0x69, 0xcb, 0xf3, 0xe5, 0xa1, 0xcd, 0x55, 0x73, 0xa3, 0x61, 0x29,
	0x53, 0xa9, 0xa3, 0x3d, 0x29, 0x44, 0x19, 0xec, 0x52, 0xf5, 0x08, 0x77, 0x41, 0xde, 0x69, 0x63,
	0xc6, 0xec, 0x86, 0xec, 0x14, 0x82, 0x1e, 0xd7, 0xd1, 0x72, 0xb9, 0x8e, 0x38, 0x27, 0x8d, 0xab,
	0x0f, 0x95, 0x69, 0xcc, 0xe6, 0x44, 0x6c, 0xa9, 0xe7, 0x66, 0xab, 0x85, 0x6c, 0xbf, 0x05, 0xd7,
	0x18, 0xc7, 0xbc, 0xc7, 0x66, 0x9b, 0x98, 0x2b, 0x92, 0xf5, 0xfa, 0x0c, 0x6b, 0x5d, 0x5f, 0xc9,
	0x14, 0xe9, 0x17, 0x82, 0x74, 0x55, 0x71, 0x4c, 0x77, 0x31, 0x6f, 0x02, 0x53, 0x93, 0xcf, 0x76,
	0x31, 0x2a, 0x82, 0xae, 0x2a, 0xfd, 0x74, 0x83, 0xb2, 0xf1, 0xd9, 0x3c, 0x48, 0x0b, 0x0f, 0x71,
	0xcc, 0x09, 0xfc, 0x00, 0x40, 0xa7, 0x47, 0x29, 0x11, 0x0c, 0xf1, 0x69, 0x30, 0x2e, 0x73, 0x1a,
	0xe2, 0x23, 0x5d, 0xd4, 0x14, 0x63, 0xa1, 0xff, 0x44, 0x1c, 0x64, 0xe6, 0x51, 0xe2, 0x8e, 0xf3,
	0x26, 0x2f, 0xc3, 0x7b, 0x53, 0xf0, 0xaa, 0x93, 0x26, 0x09, 0x26, 0x4f, 0x5a, 0x51, 0xd3, 0x8e,
	0x8d, 0xf5, 0x26, 0x58, 0x54, 0xb7, 0x7d, 0x5b, 0xee, 0xbf, 0xce, 0xdc, 0xab, 0xd3, 0xa3, 0xd4,
	0x84, 0x12, 0x65, 0x15, 0x54, 0xbe, 0x5c, 0x94, 0xf6, 0x53, 0xff, 0x91, 0xb4, 0xff, 0x11, 0x58,
	0x93, 0xb7, 0x3f, 0x71, 0xa7, 0xf3, 0x68, 0x87, 0xb8, 0x76, 0xd4, 0xa1, 0x60, 0x2e, 0xfd, 0xf3,
	0xec, 0x98, 0x4a, 0xc9, 0x78, 0xba, 0x26, 0x38, 0x6a, 0x21, 0x45, 0x5d, 0x33, 0x54, 0x38, 0x44,
	0x60, 0x35, 0x6e, 0xd6, 0xc6, 0x3d, 0xbf, 0x20, 0x67, 0x6f, 0xcd, 0xd4, 0x15, 0xdd, 0x99, 0xa9,
	0x30, 0x40, 0xcb, 0xdd, 0x89, 0x77, 0x15, 0x50, 0x04, 0xdc, 0xec, 0x12, 0xdf, 0x15, 0xb4, 0xb8,
	0xdb, 0x6d, 0x7b, 0x8e, 0x0c, 0xc4, 0x68, 0xde, 0xfa, 0xa2, 0x39, 0xdb, 0xc9, 0xc6, 0xd8, 0x70,
	0x82, 0x68, 0x4d, 0x13, 0x5d, 0xa0, 0x83, 0xf7, 0x40, 0xe1, 0xe3, 0x1e, 0xe9, 0x11, 0x57, 0xa4,
	0xb2, 0x6e, 0xe0, 0x33, 0xc2, 0xcc, 0x8c, 0x6c, 0x71, 0x2f, 0xda, 0xf3, 0x5a, 0xd0, 0xe9, 0x60,
	0xdf, 0x45, 0x79, 0x65, 0x83, 0x42, 0x13, 0x41, 0x13, 0xce, 0x56, 0x26, 0x49, 0xc6, 0x99, 0x09,
	0xfe, 0x39, 0x8d, 0xb6, 0x41, 0xda, 0x44, 0xe7, 0xac, 0xdf, 0xe5, 0x41, 0x26, 0x2a, 0x5e, 0xf0,
	0x9d, 0xf1, 0x22, 0xf7, 0xc2, 0x53, 0x8b, 0xdc, 0x33, 0xaa, 0xdb, 0x07, 0x20, 0xab, 0xc3, 0xc9,
	0x16, 0x4c, 0xc9, 0x7f, 0xa7, 0x5c, 0x82, 0x93, 0x50, 0xcb, 0xe0, 0xff, 0x81, 0x0c, 0x0d, 0x02,
	0x6e, 0x8f, 0x7d, 0xe0, 0x30, 0x67, 0xae, 0x2a, 0x41, 0xc0, 0xdf, 0x27, 0x03, 0x86, 0xd2, 0x54,
	0x3f, 0xc1, 0x7d, 0x70, 0x55, 0x7f, 0x46, 0xb1, 0x19, 0xa1, 0x27, 0x84, 0xca, 0xcf, 0x2e, 0x84,
	0xa9, 0xaa, 0x97, 0x51, 0x65, 0x6d, 0x5f, 0x21, 0x0e, 0x25, 0xa0, 0xa2, 0xf4, 0x68, 0xc5, 0xbf,
	0x40, 0x0a, 0x3f, 0x04, 0x6b, 0xe3, 0x11, 0x32, 0xc5, 0x29, 0x5b, 0x8f, 0xea, 0xcd, 0xd1, 0xb0,
	0x64, 0x8e, 0xf9, 0x7f, 0x92, 0xd7, 0xc4, 0x4f, 0xd1, 0xc0, 0x5f, 0x81, 0x62, 0x54, 0x09, 0xed,
	0x6e, 0x1b, 0x8b, 0x1d, 0x54, 0x2d, 0x8a, 0xba, 0x96, 0x47, 0x25, 0xf1, 0xa0, 0x8d, 0xfd, 0x9d,
	0x3a, 0xca, 0x37, 0x27, 0x04, 0x2e, 0x3c, 0x04, 0x8b, 0xa2, 0xb4, 0x33, 0x5d, 0x7f, 0xe4, 0x89,
	0xb8, 0xe0, 0x3b, 0xd0, 0x58, 0x89, 0xaa, 0x2e, 0xeb, 0x84, 0x33, 0x5e, 0xb7, 0x50, 0xb6, 0x83,
	0x9d, 0xa8, 0x88, 0xd5, 0x40, 0x46, 0x92, 0x8a, 0x94, 0xa9, 0x0f, 0x82, 0x79, 0x11, 0xa3, 0xd0,
	0x57, 0x17, 0x47, 0xc3, 0x52, 0x94, 0x60, 0x51, 0x5a, 0xf0, 0xc8, 0x54, 0x7b, 0x0b, 0xe4, 0xa2,
	0x0a, 0x2d, 0x2a, 0xab, 0xae, 0xa6, 0x8b, 0xa1, 0x50, 0x94, 0x53, 0x78, 0x1b, 0x2c, 0x30, 0xf5,
	0x89, 0x4a, 0xde, 0xc7, 0xb3, 0xdb, 0xd7, 0x9e, 0xf2, 0x05, 0x0b, 0x85, 0x38, 0x58, 0x05, 0x05,
	0xfd, 0x68, 0x37, 0x71, 0xbb, 0xdd, 0xc0, 0xce, 0xb1, 0xbc, 0x9b, 0x3f, 0xc3, 0x36, 0xaf, 0x0d,
	0xee, 0x6b, 0x3c, 0x7c, 0x01, 0x2c, 0xc9, 0x7c, 0xe5, 0x92, 0x13, 0x55, 0xf0, 0xe5, 0xad, 0x3c,
	0x87, 0x16, 0x85, 0xb4, 0x4e, 0x4e, 0x64, 0x99, 0x87, 0x2f, 0x81, 0x7c, 0x8f, 0x11, 0x37, 0x46,
	0x31, 0x33, 0xb7, 0x3e, 0xb7, 0x99, 0x43, 0x39, 0x21, 0x0e, 0x61, 0xa2, 0x3b, 0xcf, 0x4b, 0xb6,
	0xb8, 0x7f, 0x90, 0x17, 0x6b, 0xfd, 0xe5, 0x2b, 0x6a, 0x1b, 0xe0, 0x26, 0x28, 0x48, 0xbe, 0x18,
	0xc7, 0xcc, 0xbc, 0x24, 0x5c, 0x12, 0xf2, 0x08, 0xc8, 0xe0, 0x5d, 0xcd, 0x48, 0x9f, 0xe8, 0x72,
	0xf7, 0xba, 0x59, 0x90, 0x9d, 0x41, 0x61, 0x34, 0x2c, 0x2d, 0xee, 0x93, 0x3e, 0x47, 0x0f, 0x64,
	0xa1, 0x7b, 0x5d, 0x4d, 0x19, 0x3d, 0x51, 0x6f, 0xb3, 0x86, 0xb7, 0xe5, 0x15, 0x78, 0xd6, 0xf0,
	0xf6, 0x84, 0xe1, 0x6d, 0xf8, 0x06, 0x48, 0xb7, 0x03, 0x15, 0xa1, 0xf2, 0xfa, 0x7b, 0x81, 0xc7,
	0x77, 0xb5, 0x1e, 0x45, 0x48, 0xf8, 0x40, 0xef, 0xa3, 0x2e, 0xcd, 0x98, 0xcb, 0xab, 0xee, 0x65,
	0xfb, 0x07, 0x39, 0x83, 0x43, 0x69, 0x5a, 0xe1, 0xf0, 0x15, 0xfd, 0x05, 0x31, 0xe4, 0x6a, 0x72,
	0x42, 0xcd, 0x15, 0x75, 0x05, 0x1e, 0x03, 0x0a, 0xb1, 0xb8, 0x02, 0x37, 0x64, 0x8f, 0x3b, 0x10,
	0xe5, 0xc0, 0x21, 0x3e, 0xc7, 0x2d, 0x62, 0xae, 0xae, 0x1b, 0x9b, 0x49, 0x54, 0xd4, 0x9a, 0x83,
	0x48, 0x01, 0xff, 0x07, 0xe4, 0xa3, 0x7a, 0xa4, 0x1b, 0xad, 0xab, 0xeb, 0xc6, 0xe6, 0x15, 0xb4,
	0x14, 0x8a, 0x75, 0x7b, 0x55, 0x07, 0x4b, 0x94, 0x08, 0x2b, 0x5b, 0x5d, 0x40, 0x99, 0x79, 0x4d,
	0x26, 0xd9, 0x99, 0x12, 0xfe, 0x48, 0xaa, 0x75, 0x47, 0x8e, 0x72, 0xca, 0x48, 0x09, 0x19, 0x7c,
	0x00, 0x0a, 0x9a, 0x25, 0xa4, 0x67, 0xa6, 0x29, 0x79, 0x4a, 0x33, 0x17, 0xe4, 0x70, 0x7c, 0xcd,
	0x94, 0x57, 0x86, 0xa1, 0x98, 0x89, 0x32, 0xa5, 0xeb, 0xc7, 0x45, 0x55, 0x8a, 0x99, 0xd7, 0x25,
	0xef, 0xe5, 0xca, 0x94, 0x22, 0xba, 0x40, 0xc5, 0x20, 0x02, 0x60, 0xec, 0x02, 0xb2, 0xf6, 0x9c,
	0x17, 0x90, 0xb1, 0xf4, 0x1d, 0xb3, 0xc0, 0xbb, 0x00, 0x60, 0xce, 0xa9, 0xd7, 0xe8, 0x71, 0xc2,
	0xcc, 0x1b, 0xfa, 0x88, 0x4e, 0x07, 0xc6, 0xa1, 0xfc, 0xa6, 0x8e, 0xc6, 0xa0, 0x70, 0x17, 0x14,
	0x75, 0x10, 0xf4, 0xba, 0x2e, 0xd6, 0x1f, 0x7e, 0x6f, 0x5e, 0xb2, 0x89, 0xc8, 0x2b, 0xd3, 0x47,
	0xca, 0xb2, 0xc2, 0x61, 0x0d, 0x00, 0x87, 0x92, 0x90, 0x06, 0x3f, 0xcf, 0xf7, 0x63, 0x6d, 0xa7,
	0x48, 0xc6, 0xe6, 0xd2, 0x78, 0x1e, 0x92, 0x5e, 0x38, 0x13, 0x55, 0x7d, 0x1f, 0xa4, 0xd2, 0x4e,
	0xc1, 0xdd, 0x78, 0x0f, 0x80, 0xa8, 0x20, 0x32, 0xf8, 0x36, 0xc8, 0xc6, 0x7f, 0xe2, 0x88, 0x5a,
	0x3c, 0x27, 0xdb, 0xe5, 0xa7, 0x55, 0x50, 0x04, 0x48, 0x64, 0xbb, 0xf1, 0x7b, 0x03, 0x14, 0x0e,
	0x09, 0xd7, 0x1a, 0x55, 0xe9, 0xe1, 0x5d, 0x30, 0xaf, 0xc8, 0x74, 0x5d, 0x7f, 0x3a, 0x97, 0xbe,
	0x3d, 0x6a, 0x38, 0x7c, 0x0b, 0x80, 0xf8, 0x7f, 0x10, 0x5d, 0xca, 0x67, 0x17, 0x7a, 0x5f, 0x40,
	0xf6, 0x30, 0x3b, 0x46, 0x99, 0x66, 0xf8, 0x58, 0xfd, 0xa3, 0xf1, 0xdd, 0x99, 0x65, 0x7c, 0x7f,
	0x66, 0x19, 0x3f, 0x9c, 0x59, 0x89, 0x1f, 0xcf, 0xac, 0xc4, 0x4f, 0x67, 0x56, 0xe2, 0xe7, 0x33,
	0x2b, 0xf1, 0xcb, 0x99, 0x65, 0x7c, 0x32, 0xb2, 0x8c, 0x4f, 0x47, 0x56, 0xe2, 0xab, 0x91, 0x65,
	0x7c, 0x3d, 0xb2, 0x12, 0xdf, 0x8c, 0xac, 0xc4, 0xb7, 0x23, 0x2b, 0xf1, 0xdd, 0xc8, 0x32, 0xbe,
	0x1f, 0x59, 0xc6, 0x0f, 0x23, 0x2b, 0xf1, 0xe3, 0xc8, 0x32, 0x7e, 0x1a, 0x59, 0x89, 0x9f, 0x47,
	0x96, 0xf1, 0xcb, 0xc8, 0x4a, 0x7c, 0x72, 0x6e, 0x25, 0x3e, 0x3d, 0xb7, 0x8c, 0xcf, 0xcf, 0xad,
	0xc4, 0x17, 0xe7, 0x96, 0xf1, 0xe5, 0xb9, 0x95, 0xf8, 0xea, 0xdc, 0x4a, 0x7c, 0x7d, 0x6e, 0x19,
	0xdf, 0x9c, 0x5b, 0xc6, 0xb7, 0xe7, 0x96, 0xf1, 0xe1, 0xab, 0x97, 0xfd, 0x03, 0x85, 0xfb, 0xdd,
	0x46, 0x63, 0x5e, 0xae, 0xe1, 0xce, 0x3f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x08, 0xe2, 0x77, 0x42,
	0x47, 0x1b, 0x00, 0x00,
}
