// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/end_device.proto

package ttnpb // import "go.thethings.network/lorawan-stack/pkg/ttnpb"

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import types "github.com/gogo/protobuf/types"
import _ "github.com/mwitkow/go-proto-validators"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import go_thethings_network_lorawan_stack_pkg_types "go.thethings.network/lorawan-stack/pkg/types"
import time "time"

import strconv "strconv"

import bytes "bytes"

import encoding_binary "encoding/binary"
import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Power state of the device.
type PowerState int32

const (
	PowerState_POWER_UNKNOWN  PowerState = 0
	PowerState_POWER_BATTERY  PowerState = 1
	PowerState_POWER_EXTERNAL PowerState = 2
)

var PowerState_name = map[int32]string{
	0: "POWER_UNKNOWN",
	1: "POWER_BATTERY",
	2: "POWER_EXTERNAL",
}
var PowerState_value = map[string]int32{
	"POWER_UNKNOWN":  0,
	"POWER_BATTERY":  1,
	"POWER_EXTERNAL": 2,
}

func (PowerState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_end_device_7df2e0db88789f5d, []int{0}
}

type Session struct {
	// Device Address, issued by the Network Server or chosen by device manufacturer in case of testing range (beginning with 00-03).
	// Known by Network Server, Application Server and Join Server. Owned by Network Server.
	DevAddr     go_thethings_network_lorawan_stack_pkg_types.DevAddr `protobuf:"bytes,2,opt,name=dev_addr,json=devAddr,proto3,customtype=go.thethings.network/lorawan-stack/pkg/types.DevAddr" json:"dev_addr"`
	SessionKeys `protobuf:"bytes,3,opt,name=keys,proto3,embedded=keys" json:"keys"`
	// Last uplink frame counter value used. Network Server only. Application Server assumes the Network Server checked it.
	LastFCntUp uint32 `protobuf:"varint,4,opt,name=last_f_cnt_up,json=lastFCntUp,proto3" json:"last_f_cnt_up,omitempty"`
	// Last network downlink frame counter value used. Network Server only.
	LastNFCntDown uint32 `protobuf:"varint,5,opt,name=last_n_f_cnt_down,json=lastNFCntDown,proto3" json:"last_n_f_cnt_down,omitempty"`
	// Last application downlink frame counter value used. Application Server only.
	LastAFCntDown uint32 `protobuf:"varint,6,opt,name=last_a_f_cnt_down,json=lastAFCntDown,proto3" json:"last_a_f_cnt_down,omitempty"`
	// Frame counter of the last confirmed downlink message sent. Network Server only.
	LastConfFCntDown uint32 `protobuf:"varint,7,opt,name=last_conf_f_cnt_down,json=lastConfFCntDown,proto3" json:"last_conf_f_cnt_down,omitempty"`
	// Time when the session started. Network Server only.
	StartedAt            time.Time `protobuf:"bytes,8,opt,name=started_at,json=startedAt,proto3,stdtime" json:"started_at"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Session) Reset()      { *m = Session{} }
func (*Session) ProtoMessage() {}
func (*Session) Descriptor() ([]byte, []int) {
	return fileDescriptor_end_device_7df2e0db88789f5d, []int{0}
}
func (m *Session) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Session) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Session.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Session) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Session.Merge(dst, src)
}
func (m *Session) XXX_Size() int {
	return m.Size()
}
func (m *Session) XXX_DiscardUnknown() {
	xxx_messageInfo_Session.DiscardUnknown(m)
}

var xxx_messageInfo_Session proto.InternalMessageInfo

func (m *Session) GetLastFCntUp() uint32 {
	if m != nil {
		return m.LastFCntUp
	}
	return 0
}

func (m *Session) GetLastNFCntDown() uint32 {
	if m != nil {
		return m.LastNFCntDown
	}
	return 0
}

func (m *Session) GetLastAFCntDown() uint32 {
	if m != nil {
		return m.LastAFCntDown
	}
	return 0
}

func (m *Session) GetLastConfFCntDown() uint32 {
	if m != nil {
		return m.LastConfFCntDown
	}
	return 0
}

func (m *Session) GetStartedAt() time.Time {
	if m != nil {
		return m.StartedAt
	}
	return time.Time{}
}

// MACParameters represent the parameters of the device's MAC layer (active or desired).
// This is used internally by the Network Server and is read only.
type MACParameters struct {
	// Maximum EIRP (dBm).
	MaxEIRP float32 `protobuf:"fixed32,1,opt,name=max_eirp,json=maxEirp,proto3" json:"max_eirp,omitempty"`
	// Uplink dwell time is set (400ms).
	UplinkDwellTime bool `protobuf:"varint,2,opt,name=uplink_dwell_time,json=uplinkDwellTime,proto3" json:"uplink_dwell_time,omitempty"`
	// Downlink dwell time is set (400ms).
	DownlinkDwellTime bool `protobuf:"varint,3,opt,name=downlink_dwell_time,json=downlinkDwellTime,proto3" json:"downlink_dwell_time,omitempty"`
	// ADR: data rate index to use.
	ADRDataRateIndex DataRateIndex `protobuf:"varint,4,opt,name=adr_data_rate_index,json=adrDataRateIndex,proto3,enum=ttn.lorawan.v3.DataRateIndex" json:"adr_data_rate_index,omitempty"`
	// ADR: transmission power index to use.
	ADRTxPowerIndex uint32 `protobuf:"varint,5,opt,name=adr_tx_power_index,json=adrTxPowerIndex,proto3" json:"adr_tx_power_index,omitempty"`
	// ADR: number of retransmissions.
	ADRNbTrans uint32 `protobuf:"varint,6,opt,name=adr_nb_trans,json=adrNbTrans,proto3" json:"adr_nb_trans,omitempty"`
	// ADR: number of messages to wait before setting ADRAckReq.
	ADRAckLimit uint32 `protobuf:"varint,7,opt,name=adr_ack_limit,json=adrAckLimit,proto3" json:"adr_ack_limit,omitempty"`
	// ADR: number of messages to wait after setting ADRAckReq and before changing TxPower or DataRate.
	ADRAckDelay uint32 `protobuf:"varint,8,opt,name=adr_ack_delay,json=adrAckDelay,proto3" json:"adr_ack_delay,omitempty"`
	// Rx1 delay (Rx2 delay is Rx1 delay + 1 second).
	Rx1Delay RxDelay `protobuf:"varint,9,opt,name=rx1_delay,json=rx1Delay,proto3,enum=ttn.lorawan.v3.RxDelay" json:"rx1_delay,omitempty"`
	// Data rate offset for Rx1.
	Rx1DataRateOffset uint32 `protobuf:"varint,10,opt,name=rx1_data_rate_offset,json=rx1DataRateOffset,proto3" json:"rx1_data_rate_offset,omitempty"`
	// Data rate index for Rx2.
	Rx2DataRateIndex DataRateIndex `protobuf:"varint,11,opt,name=rx2_data_rate_index,json=rx2DataRateIndex,proto3,enum=ttn.lorawan.v3.DataRateIndex" json:"rx2_data_rate_index,omitempty"`
	// Frequency for Rx2 (Hz).
	Rx2Frequency uint64 `protobuf:"varint,12,opt,name=rx2_frequency,json=rx2Frequency,proto3" json:"rx2_frequency,omitempty"`
	// Maximum uplink duty cycle (of all channels).
	MaxDutyCycle AggregatedDutyCycle `protobuf:"varint,13,opt,name=max_duty_cycle,json=maxDutyCycle,proto3,enum=ttn.lorawan.v3.AggregatedDutyCycle" json:"max_duty_cycle,omitempty"`
	// Time within which a rejoin-request must be sent.
	RejoinTimePeriodicity RejoinTimeExponent `protobuf:"varint,14,opt,name=rejoin_time_periodicity,json=rejoinTimePeriodicity,proto3,enum=ttn.lorawan.v3.RejoinTimeExponent" json:"rejoin_time_periodicity,omitempty"`
	// Message count within which a rejoin-request must be sent.
	RejoinCountPeriodicity RejoinCountExponent `protobuf:"varint,15,opt,name=rejoin_count_periodicity,json=rejoinCountPeriodicity,proto3,enum=ttn.lorawan.v3.RejoinCountExponent" json:"rejoin_count_periodicity,omitempty"`
	// Frequency of the class B ping slot (Hz).
	PingSlotFrequency uint64 `protobuf:"varint,16,opt,name=ping_slot_frequency,json=pingSlotFrequency,proto3" json:"ping_slot_frequency,omitempty"`
	// Data rate index of the class B ping slot.
	PingSlotDataRateIndex DataRateIndex `protobuf:"varint,17,opt,name=ping_slot_data_rate_index,json=pingSlotDataRateIndex,proto3,enum=ttn.lorawan.v3.DataRateIndex" json:"ping_slot_data_rate_index,omitempty"`
	// Frequency of the class B beacon (Hz).
	BeaconFrequency uint64 `protobuf:"varint,18,opt,name=beacon_frequency,json=beaconFrequency,proto3" json:"beacon_frequency,omitempty"`
	// Configured uplink channels and optionally Rx1 frequency.
	Channels             []*MACParameters_Channel `protobuf:"bytes,19,rep,name=channels,proto3" json:"channels,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *MACParameters) Reset()      { *m = MACParameters{} }
func (*MACParameters) ProtoMessage() {}
func (*MACParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_end_device_7df2e0db88789f5d, []int{1}
}
func (m *MACParameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACParameters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACParameters.Merge(dst, src)
}
func (m *MACParameters) XXX_Size() int {
	return m.Size()
}
func (m *MACParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_MACParameters.DiscardUnknown(m)
}

var xxx_messageInfo_MACParameters proto.InternalMessageInfo

func (m *MACParameters) GetMaxEIRP() float32 {
	if m != nil {
		return m.MaxEIRP
	}
	return 0
}

func (m *MACParameters) GetUplinkDwellTime() bool {
	if m != nil {
		return m.UplinkDwellTime
	}
	return false
}

func (m *MACParameters) GetDownlinkDwellTime() bool {
	if m != nil {
		return m.DownlinkDwellTime
	}
	return false
}

func (m *MACParameters) GetADRDataRateIndex() DataRateIndex {
	if m != nil {
		return m.ADRDataRateIndex
	}
	return DATA_RATE_0
}

func (m *MACParameters) GetADRTxPowerIndex() uint32 {
	if m != nil {
		return m.ADRTxPowerIndex
	}
	return 0
}

func (m *MACParameters) GetADRNbTrans() uint32 {
	if m != nil {
		return m.ADRNbTrans
	}
	return 0
}

func (m *MACParameters) GetADRAckLimit() uint32 {
	if m != nil {
		return m.ADRAckLimit
	}
	return 0
}

func (m *MACParameters) GetADRAckDelay() uint32 {
	if m != nil {
		return m.ADRAckDelay
	}
	return 0
}

func (m *MACParameters) GetRx1Delay() RxDelay {
	if m != nil {
		return m.Rx1Delay
	}
	return RX_DELAY_0
}

func (m *MACParameters) GetRx1DataRateOffset() uint32 {
	if m != nil {
		return m.Rx1DataRateOffset
	}
	return 0
}

func (m *MACParameters) GetRx2DataRateIndex() DataRateIndex {
	if m != nil {
		return m.Rx2DataRateIndex
	}
	return DATA_RATE_0
}

func (m *MACParameters) GetRx2Frequency() uint64 {
	if m != nil {
		return m.Rx2Frequency
	}
	return 0
}

func (m *MACParameters) GetMaxDutyCycle() AggregatedDutyCycle {
	if m != nil {
		return m.MaxDutyCycle
	}
	return DUTY_CYCLE_1
}

func (m *MACParameters) GetRejoinTimePeriodicity() RejoinTimeExponent {
	if m != nil {
		return m.RejoinTimePeriodicity
	}
	return REJOIN_TIME_0
}

func (m *MACParameters) GetRejoinCountPeriodicity() RejoinCountExponent {
	if m != nil {
		return m.RejoinCountPeriodicity
	}
	return REJOIN_COUNT_16
}

func (m *MACParameters) GetPingSlotFrequency() uint64 {
	if m != nil {
		return m.PingSlotFrequency
	}
	return 0
}

func (m *MACParameters) GetPingSlotDataRateIndex() DataRateIndex {
	if m != nil {
		return m.PingSlotDataRateIndex
	}
	return DATA_RATE_0
}

func (m *MACParameters) GetBeaconFrequency() uint64 {
	if m != nil {
		return m.BeaconFrequency
	}
	return 0
}

func (m *MACParameters) GetChannels() []*MACParameters_Channel {
	if m != nil {
		return m.Channels
	}
	return nil
}

type MACParameters_Channel struct {
	// Uplink frequency of the channel (Hz).
	UplinkFrequency uint64 `protobuf:"varint,1,opt,name=uplink_frequency,json=uplinkFrequency,proto3" json:"uplink_frequency,omitempty"`
	// Downlink frequency of the channel (Hz).
	DownlinkFrequency uint64 `protobuf:"varint,2,opt,name=downlink_frequency,json=downlinkFrequency,proto3" json:"downlink_frequency,omitempty"`
	// Index of the minimum data rate for uplink.
	MinDataRateIndex DataRateIndex `protobuf:"varint,3,opt,name=min_data_rate_index,json=minDataRateIndex,proto3,enum=ttn.lorawan.v3.DataRateIndex" json:"min_data_rate_index,omitempty"`
	// Index of the maximum data rate for uplink.
	MaxDataRateIndex DataRateIndex `protobuf:"varint,4,opt,name=max_data_rate_index,json=maxDataRateIndex,proto3,enum=ttn.lorawan.v3.DataRateIndex" json:"max_data_rate_index,omitempty"`
	// Channel can be used by device for uplink.
	EnableUplink         bool     `protobuf:"varint,5,opt,name=enable_uplink,json=enableUplink,proto3" json:"enable_uplink,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MACParameters_Channel) Reset()      { *m = MACParameters_Channel{} }
func (*MACParameters_Channel) ProtoMessage() {}
func (*MACParameters_Channel) Descriptor() ([]byte, []int) {
	return fileDescriptor_end_device_7df2e0db88789f5d, []int{1, 0}
}
func (m *MACParameters_Channel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACParameters_Channel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACParameters_Channel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACParameters_Channel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACParameters_Channel.Merge(dst, src)
}
func (m *MACParameters_Channel) XXX_Size() int {
	return m.Size()
}
func (m *MACParameters_Channel) XXX_DiscardUnknown() {
	xxx_messageInfo_MACParameters_Channel.DiscardUnknown(m)
}

var xxx_messageInfo_MACParameters_Channel proto.InternalMessageInfo

func (m *MACParameters_Channel) GetUplinkFrequency() uint64 {
	if m != nil {
		return m.UplinkFrequency
	}
	return 0
}

func (m *MACParameters_Channel) GetDownlinkFrequency() uint64 {
	if m != nil {
		return m.DownlinkFrequency
	}
	return 0
}

func (m *MACParameters_Channel) GetMinDataRateIndex() DataRateIndex {
	if m != nil {
		return m.MinDataRateIndex
	}
	return DATA_RATE_0
}

func (m *MACParameters_Channel) GetMaxDataRateIndex() DataRateIndex {
	if m != nil {
		return m.MaxDataRateIndex
	}
	return DATA_RATE_0
}

func (m *MACParameters_Channel) GetEnableUplink() bool {
	if m != nil {
		return m.EnableUplink
	}
	return false
}

type EndDeviceBrand struct {
	ID   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	URL  string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	// Logos contains file names of brand logos.
	Logos                []string `protobuf:"bytes,4,rep,name=logos,proto3" json:"logos,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndDeviceBrand) Reset()      { *m = EndDeviceBrand{} }
func (*EndDeviceBrand) ProtoMessage() {}
func (*EndDeviceBrand) Descriptor() ([]byte, []int) {
	return fileDescriptor_end_device_7df2e0db88789f5d, []int{2}
}
func (m *EndDeviceBrand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndDeviceBrand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndDeviceBrand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EndDeviceBrand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndDeviceBrand.Merge(dst, src)
}
func (m *EndDeviceBrand) XXX_Size() int {
	return m.Size()
}
func (m *EndDeviceBrand) XXX_DiscardUnknown() {
	xxx_messageInfo_EndDeviceBrand.DiscardUnknown(m)
}

var xxx_messageInfo_EndDeviceBrand proto.InternalMessageInfo

func (m *EndDeviceBrand) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *EndDeviceBrand) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EndDeviceBrand) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *EndDeviceBrand) GetLogos() []string {
	if m != nil {
		return m.Logos
	}
	return nil
}

type EndDeviceModel struct {
	BrandID              string   `protobuf:"bytes,1,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`
	ID                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndDeviceModel) Reset()      { *m = EndDeviceModel{} }
func (*EndDeviceModel) ProtoMessage() {}
func (*EndDeviceModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_end_device_7df2e0db88789f5d, []int{3}
}
func (m *EndDeviceModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndDeviceModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndDeviceModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EndDeviceModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndDeviceModel.Merge(dst, src)
}
func (m *EndDeviceModel) XXX_Size() int {
	return m.Size()
}
func (m *EndDeviceModel) XXX_DiscardUnknown() {
	xxx_messageInfo_EndDeviceModel.DiscardUnknown(m)
}

var xxx_messageInfo_EndDeviceModel proto.InternalMessageInfo

func (m *EndDeviceModel) GetBrandID() string {
	if m != nil {
		return m.BrandID
	}
	return ""
}

func (m *EndDeviceModel) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *EndDeviceModel) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Identifies an end device model with version information.
type EndDeviceVersionIdentifiers struct {
	BrandID              string   `protobuf:"bytes,1,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`
	ModelID              string   `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	HardwareVersion      string   `protobuf:"bytes,3,opt,name=hardware_version,json=hardwareVersion,proto3" json:"hardware_version,omitempty"`
	FirmwareVersion      string   `protobuf:"bytes,4,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndDeviceVersionIdentifiers) Reset()      { *m = EndDeviceVersionIdentifiers{} }
func (*EndDeviceVersionIdentifiers) ProtoMessage() {}
func (*EndDeviceVersionIdentifiers) Descriptor() ([]byte, []int) {
	return fileDescriptor_end_device_7df2e0db88789f5d, []int{4}
}
func (m *EndDeviceVersionIdentifiers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndDeviceVersionIdentifiers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndDeviceVersionIdentifiers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EndDeviceVersionIdentifiers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndDeviceVersionIdentifiers.Merge(dst, src)
}
func (m *EndDeviceVersionIdentifiers) XXX_Size() int {
	return m.Size()
}
func (m *EndDeviceVersionIdentifiers) XXX_DiscardUnknown() {
	xxx_messageInfo_EndDeviceVersionIdentifiers.DiscardUnknown(m)
}

var xxx_messageInfo_EndDeviceVersionIdentifiers proto.InternalMessageInfo

func (m *EndDeviceVersionIdentifiers) GetBrandID() string {
	if m != nil {
		return m.BrandID
	}
	return ""
}

func (m *EndDeviceVersionIdentifiers) GetModelID() string {
	if m != nil {
		return m.ModelID
	}
	return ""
}

func (m *EndDeviceVersionIdentifiers) GetHardwareVersion() string {
	if m != nil {
		return m.HardwareVersion
	}
	return ""
}

func (m *EndDeviceVersionIdentifiers) GetFirmwareVersion() string {
	if m != nil {
		return m.FirmwareVersion
	}
	return ""
}

// Template for creating end devices.
type EndDeviceVersion struct {
	// Version identifiers.
	EndDeviceVersionIdentifiers `protobuf:"bytes,1,opt,name=ids,proto3,embedded=ids" json:"ids"`
	// LoRaWAN MAC version.
	LoRaWANVersion MACVersion `protobuf:"varint,2,opt,name=lorawan_version,json=lorawanVersion,proto3,enum=ttn.lorawan.v3.MACVersion" json:"lorawan_version,omitempty"`
	// LoRaWAN PHY version.
	LoRaWANPHYVersion PHYVersion `protobuf:"varint,3,opt,name=lorawan_phy_version,json=lorawanPhyVersion,proto3,enum=ttn.lorawan.v3.PHYVersion" json:"lorawan_phy_version,omitempty"`
	// ID of the frequency plan used by this device.
	FrequencyPlanID string `protobuf:"bytes,4,opt,name=frequency_plan_id,json=frequencyPlanId,proto3" json:"frequency_plan_id,omitempty"`
	// Photos contains file names of device photos.
	Photos []string `protobuf:"bytes,5,rep,name=photos,proto3" json:"photos,omitempty"`
	// Whether the device supports class B.
	SupportsClassB bool `protobuf:"varint,6,opt,name=supports_class_b,json=supportsClassB,proto3" json:"supports_class_b,omitempty"`
	// Whether the device supports class C.
	SupportsClassC bool `protobuf:"varint,7,opt,name=supports_class_c,json=supportsClassC,proto3" json:"supports_class_c,omitempty"`
	// Default MAC layer settings of the device.
	DefaultMACSettings *MACSettings `protobuf:"bytes,8,opt,name=default_mac_settings,json=defaultMacSettings,proto3" json:"default_mac_settings,omitempty"`
	// Minimum frequency the device is capable of using (Hz).
	MinFrequency uint64 `protobuf:"varint,9,opt,name=min_frequency,json=minFrequency,proto3" json:"min_frequency,omitempty"`
	// Maximum frequency the device is capable of using (Hz).
	MaxFrequency uint64 `protobuf:"varint,10,opt,name=max_frequency,json=maxFrequency,proto3" json:"max_frequency,omitempty"`
	// Whether the device resets the frame counters (not LoRaWAN compliant).
	ResetsFCnt bool `protobuf:"varint,11,opt,name=resets_f_cnt,json=resetsFCnt,proto3" json:"resets_f_cnt,omitempty"`
	// The device supports join (it's OTAA).
	SupportsJoin bool `protobuf:"varint,13,opt,name=supports_join,json=supportsJoin,proto3" json:"supports_join,omitempty"`
	// Whether the device resets the join and dev nonces (not LoRaWAN 1.1 compliant).
	ResetsJoinNonces bool `protobuf:"varint,14,opt,name=resets_join_nonces,json=resetsJoinNonces,proto3" json:"resets_join_nonces,omitempty"`
	// Default formatters defining the payload formats for this end device.
	DefaultFormatters    MessagePayloadFormatters `protobuf:"bytes,15,opt,name=default_formatters,json=defaultFormatters,proto3" json:"default_formatters"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *EndDeviceVersion) Reset()      { *m = EndDeviceVersion{} }
func (*EndDeviceVersion) ProtoMessage() {}
func (*EndDeviceVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_end_device_7df2e0db88789f5d, []int{5}
}
func (m *EndDeviceVersion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndDeviceVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndDeviceVersion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EndDeviceVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndDeviceVersion.Merge(dst, src)
}
func (m *EndDeviceVersion) XXX_Size() int {
	return m.Size()
}
func (m *EndDeviceVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_EndDeviceVersion.DiscardUnknown(m)
}

var xxx_messageInfo_EndDeviceVersion proto.InternalMessageInfo

func (m *EndDeviceVersion) GetLoRaWANVersion() MACVersion {
	if m != nil {
		return m.LoRaWANVersion
	}
	return MAC_UNKNOWN
}

func (m *EndDeviceVersion) GetLoRaWANPHYVersion() PHYVersion {
	if m != nil {
		return m.LoRaWANPHYVersion
	}
	return PHY_UNKNOWN
}

func (m *EndDeviceVersion) GetFrequencyPlanID() string {
	if m != nil {
		return m.FrequencyPlanID
	}
	return ""
}

func (m *EndDeviceVersion) GetPhotos() []string {
	if m != nil {
		return m.Photos
	}
	return nil
}

func (m *EndDeviceVersion) GetSupportsClassB() bool {
	if m != nil {
		return m.SupportsClassB
	}
	return false
}

func (m *EndDeviceVersion) GetSupportsClassC() bool {
	if m != nil {
		return m.SupportsClassC
	}
	return false
}

func (m *EndDeviceVersion) GetDefaultMACSettings() *MACSettings {
	if m != nil {
		return m.DefaultMACSettings
	}
	return nil
}

func (m *EndDeviceVersion) GetMinFrequency() uint64 {
	if m != nil {
		return m.MinFrequency
	}
	return 0
}

func (m *EndDeviceVersion) GetMaxFrequency() uint64 {
	if m != nil {
		return m.MaxFrequency
	}
	return 0
}

func (m *EndDeviceVersion) GetResetsFCnt() bool {
	if m != nil {
		return m.ResetsFCnt
	}
	return false
}

func (m *EndDeviceVersion) GetSupportsJoin() bool {
	if m != nil {
		return m.SupportsJoin
	}
	return false
}

func (m *EndDeviceVersion) GetResetsJoinNonces() bool {
	if m != nil {
		return m.ResetsJoinNonces
	}
	return false
}

func (m *EndDeviceVersion) GetDefaultFormatters() MessagePayloadFormatters {
	if m != nil {
		return m.DefaultFormatters
	}
	return MessagePayloadFormatters{}
}

type MACSettings struct {
	// Maximum delay for the device to answer a MAC request or a confirmed downlink frame.
	// Must be set if the device supports class B.
	ClassBTimeout *time.Duration `protobuf:"bytes,1,opt,name=class_b_timeout,json=classBTimeout,proto3,stdduration" json:"class_b_timeout,omitempty"`
	// Periodicity of the class B ping slot.
	// Must be set if the device supports class B.
	PingSlotPeriodicity *MACSettings_PingSlotPeriodValue `protobuf:"bytes,2,opt,name=ping_slot_periodicity,json=pingSlotPeriodicity,proto3" json:"ping_slot_periodicity,omitempty"`
	// Data rate index of the class B ping slot.
	// Must be set if the device supports class B.
	PingSlotDataRateIndex *MACSettings_DataRateIndexValue `protobuf:"bytes,3,opt,name=ping_slot_data_rate_index,json=pingSlotDataRateIndex,proto3" json:"ping_slot_data_rate_index,omitempty"`
	// Frequency of the class B ping slot (Hz).
	// Must be set if the device supports class B.
	PingSlotFrequency uint64 `protobuf:"varint,4,opt,name=ping_slot_frequency,json=pingSlotFrequency,proto3" json:"ping_slot_frequency,omitempty"`
	// Maximum delay for the device to answer a MAC request or a confirmed downlink frame.
	// Must be set if the device supports class C.
	ClassCTimeout *time.Duration `protobuf:"bytes,5,opt,name=class_c_timeout,json=classCTimeout,proto3,stdduration" json:"class_c_timeout,omitempty"`
	// Class A Rx1 delay.
	// Must be set if the device is ABP.
	Rx1Delay *MACSettings_RxDelayValue `protobuf:"bytes,6,opt,name=rx1_delay,json=rx1Delay,proto3" json:"rx1_delay,omitempty"`
	// Rx1 data rate offset.
	// Must be set if the device is ABP.
	Rx1DataRateOffset *types.UInt32Value `protobuf:"bytes,7,opt,name=rx1_data_rate_offset,json=rx1DataRateOffset,proto3" json:"rx1_data_rate_offset,omitempty"`
	// Data rate index for Rx2.
	// Must be set if the device is ABP.
	Rx2DataRateIndex *MACSettings_DataRateIndexValue `protobuf:"bytes,8,opt,name=rx2_data_rate_index,json=rx2DataRateIndex,proto3" json:"rx2_data_rate_index,omitempty"`
	// Frequency for Rx2 (Hz).
	// Must be set if the device is ABP.
	Rx2Frequency uint64 `protobuf:"varint,9,opt,name=rx2_frequency,json=rx2Frequency,proto3" json:"rx2_frequency,omitempty"`
	// List of factory-preset frequencies.
	// Must be set if the device is ABP.
	FactoryPresetFrequencies []uint64 `protobuf:"varint,10,rep,packed,name=factory_preset_frequencies,json=factoryPresetFrequencies,proto3" json:"factory_preset_frequencies,omitempty"`
	// Maximum uplink duty cycle (of all channels).
	MaxDutyCycle *MACSettings_AggregatedDutyCycleValue `protobuf:"bytes,11,opt,name=max_duty_cycle,json=maxDutyCycle,proto3" json:"max_duty_cycle,omitempty"`
	// Whether the device supports 32-bit frame counters.
	// Must be set if the device MAC version is 1.0.
	Supports32BitFCnt *types.BoolValue `protobuf:"bytes,12,opt,name=supports_32_bit_f_cnt,json=supports32BitFCnt,proto3" json:"supports_32_bit_f_cnt,omitempty"`
	// Whether the Network Server should use ADR for the device.
	UseADR *types.BoolValue `protobuf:"bytes,13,opt,name=use_adr,json=useAdr,proto3" json:"use_adr,omitempty"`
	// The ADR margin tells the network server how much margin it should add in ADR requests.
	// A bigger margin is less efficient, but gives a better chance of successful reception.
	ADRMargin *types.FloatValue `protobuf:"bytes,14,opt,name=adr_margin,json=adrMargin,proto3" json:"adr_margin,omitempty"`
	// Whether the device resets the frame counters (not LoRaWAN compliant).
	ResetsFCnt *types.BoolValue `protobuf:"bytes,15,opt,name=resets_f_cnt,json=resetsFCnt,proto3" json:"resets_f_cnt,omitempty"`
	// The interval after which a DevStatusReq MACCommand shall be sent.
	StatusTimePeriodicity *time.Duration `protobuf:"bytes,16,opt,name=status_time_periodicity,json=statusTimePeriodicity,proto3,stdduration" json:"status_time_periodicity,omitempty"`
	// Number of uplink messages after which a DevStatusReq MACCommand shall be sent.
	StatusCountPeriodicity *types.UInt32Value `protobuf:"bytes,17,opt,name=status_count_periodicity,json=statusCountPeriodicity,proto3" json:"status_count_periodicity,omitempty"`
	// The Rx1 delay Network Server should configure device to use via MAC commands or Join-Accept.
	DesiredRx1Delay *MACSettings_RxDelayValue `protobuf:"bytes,18,opt,name=desired_rx1_delay,json=desiredRx1Delay,proto3" json:"desired_rx1_delay,omitempty"`
	// The Rx1 data rate offset Network Server should configure device to use via MAC commands or Join-Accept.
	DesiredRx1DataRateOffset *types.UInt32Value `protobuf:"bytes,19,opt,name=desired_rx1_data_rate_offset,json=desiredRx1DataRateOffset,proto3" json:"desired_rx1_data_rate_offset,omitempty"`
	// The Rx2 data rate index Network Server should configure device to use via MAC commands or Join-Accept.
	DesiredRx2DataRateIndex *MACSettings_DataRateIndexValue `protobuf:"bytes,20,opt,name=desired_rx2_data_rate_index,json=desiredRx2DataRateIndex,proto3" json:"desired_rx2_data_rate_index,omitempty"`
	// The Rx2 frequency index Network Server should configure device to use via MAC commands.
	DesiredRx2Frequency  uint64   `protobuf:"varint,21,opt,name=desired_rx2_frequency,json=desiredRx2Frequency,proto3" json:"desired_rx2_frequency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MACSettings) Reset()      { *m = MACSettings{} }
func (*MACSettings) ProtoMessage() {}
func (*MACSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_end_device_7df2e0db88789f5d, []int{6}
}
func (m *MACSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACSettings.Merge(dst, src)
}
func (m *MACSettings) XXX_Size() int {
	return m.Size()
}
func (m *MACSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_MACSettings.DiscardUnknown(m)
}

var xxx_messageInfo_MACSettings proto.InternalMessageInfo

func (m *MACSettings) GetClassBTimeout() *time.Duration {
	if m != nil {
		return m.ClassBTimeout
	}
	return nil
}

func (m *MACSettings) GetPingSlotPeriodicity() *MACSettings_PingSlotPeriodValue {
	if m != nil {
		return m.PingSlotPeriodicity
	}
	return nil
}

func (m *MACSettings) GetPingSlotDataRateIndex() *MACSettings_DataRateIndexValue {
	if m != nil {
		return m.PingSlotDataRateIndex
	}
	return nil
}

func (m *MACSettings) GetPingSlotFrequency() uint64 {
	if m != nil {
		return m.PingSlotFrequency
	}
	return 0
}

func (m *MACSettings) GetClassCTimeout() *time.Duration {
	if m != nil {
		return m.ClassCTimeout
	}
	return nil
}

func (m *MACSettings) GetRx1Delay() *MACSettings_RxDelayValue {
	if m != nil {
		return m.Rx1Delay
	}
	return nil
}

func (m *MACSettings) GetRx1DataRateOffset() *types.UInt32Value {
	if m != nil {
		return m.Rx1DataRateOffset
	}
	return nil
}

func (m *MACSettings) GetRx2DataRateIndex() *MACSettings_DataRateIndexValue {
	if m != nil {
		return m.Rx2DataRateIndex
	}
	return nil
}

func (m *MACSettings) GetRx2Frequency() uint64 {
	if m != nil {
		return m.Rx2Frequency
	}
	return 0
}

func (m *MACSettings) GetFactoryPresetFrequencies() []uint64 {
	if m != nil {
		return m.FactoryPresetFrequencies
	}
	return nil
}

func (m *MACSettings) GetMaxDutyCycle() *MACSettings_AggregatedDutyCycleValue {
	if m != nil {
		return m.MaxDutyCycle
	}
	return nil
}

func (m *MACSettings) GetSupports32BitFCnt() *types.BoolValue {
	if m != nil {
		return m.Supports32BitFCnt
	}
	return nil
}

func (m *MACSettings) GetUseADR() *types.BoolValue {
	if m != nil {
		return m.UseADR
	}
	return nil
}

func (m *MACSettings) GetADRMargin() *types.FloatValue {
	if m != nil {
		return m.ADRMargin
	}
	return nil
}

func (m *MACSettings) GetResetsFCnt() *types.BoolValue {
	if m != nil {
		return m.ResetsFCnt
	}
	return nil
}

func (m *MACSettings) GetStatusTimePeriodicity() *time.Duration {
	if m != nil {
		return m.StatusTimePeriodicity
	}
	return nil
}

func (m *MACSettings) GetStatusCountPeriodicity() *types.UInt32Value {
	if m != nil {
		return m.StatusCountPeriodicity
	}
	return nil
}

func (m *MACSettings) GetDesiredRx1Delay() *MACSettings_RxDelayValue {
	if m != nil {
		return m.DesiredRx1Delay
	}
	return nil
}

func (m *MACSettings) GetDesiredRx1DataRateOffset() *types.UInt32Value {
	if m != nil {
		return m.DesiredRx1DataRateOffset
	}
	return nil
}

func (m *MACSettings) GetDesiredRx2DataRateIndex() *MACSettings_DataRateIndexValue {
	if m != nil {
		return m.DesiredRx2DataRateIndex
	}
	return nil
}

func (m *MACSettings) GetDesiredRx2Frequency() uint64 {
	if m != nil {
		return m.DesiredRx2Frequency
	}
	return 0
}

type MACSettings_DataRateIndexValue struct {
	Value                DataRateIndex `protobuf:"varint,1,opt,name=value,proto3,enum=ttn.lorawan.v3.DataRateIndex" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *MACSettings_DataRateIndexValue) Reset()      { *m = MACSettings_DataRateIndexValue{} }
func (*MACSettings_DataRateIndexValue) ProtoMessage() {}
func (*MACSettings_DataRateIndexValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_end_device_7df2e0db88789f5d, []int{6, 0}
}
func (m *MACSettings_DataRateIndexValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACSettings_DataRateIndexValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACSettings_DataRateIndexValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACSettings_DataRateIndexValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACSettings_DataRateIndexValue.Merge(dst, src)
}
func (m *MACSettings_DataRateIndexValue) XXX_Size() int {
	return m.Size()
}
func (m *MACSettings_DataRateIndexValue) XXX_DiscardUnknown() {
	xxx_messageInfo_MACSettings_DataRateIndexValue.DiscardUnknown(m)
}

var xxx_messageInfo_MACSettings_DataRateIndexValue proto.InternalMessageInfo

func (m *MACSettings_DataRateIndexValue) GetValue() DataRateIndex {
	if m != nil {
		return m.Value
	}
	return DATA_RATE_0
}

type MACSettings_PingSlotPeriodValue struct {
	Value                PingSlotPeriod `protobuf:"varint,1,opt,name=value,proto3,enum=ttn.lorawan.v3.PingSlotPeriod" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *MACSettings_PingSlotPeriodValue) Reset()      { *m = MACSettings_PingSlotPeriodValue{} }
func (*MACSettings_PingSlotPeriodValue) ProtoMessage() {}
func (*MACSettings_PingSlotPeriodValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_end_device_7df2e0db88789f5d, []int{6, 1}
}
func (m *MACSettings_PingSlotPeriodValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACSettings_PingSlotPeriodValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACSettings_PingSlotPeriodValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACSettings_PingSlotPeriodValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACSettings_PingSlotPeriodValue.Merge(dst, src)
}
func (m *MACSettings_PingSlotPeriodValue) XXX_Size() int {
	return m.Size()
}
func (m *MACSettings_PingSlotPeriodValue) XXX_DiscardUnknown() {
	xxx_messageInfo_MACSettings_PingSlotPeriodValue.DiscardUnknown(m)
}

var xxx_messageInfo_MACSettings_PingSlotPeriodValue proto.InternalMessageInfo

func (m *MACSettings_PingSlotPeriodValue) GetValue() PingSlotPeriod {
	if m != nil {
		return m.Value
	}
	return PING_EVERY_1S
}

type MACSettings_AggregatedDutyCycleValue struct {
	Value                AggregatedDutyCycle `protobuf:"varint,1,opt,name=value,proto3,enum=ttn.lorawan.v3.AggregatedDutyCycle" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *MACSettings_AggregatedDutyCycleValue) Reset()      { *m = MACSettings_AggregatedDutyCycleValue{} }
func (*MACSettings_AggregatedDutyCycleValue) ProtoMessage() {}
func (*MACSettings_AggregatedDutyCycleValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_end_device_7df2e0db88789f5d, []int{6, 2}
}
func (m *MACSettings_AggregatedDutyCycleValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACSettings_AggregatedDutyCycleValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACSettings_AggregatedDutyCycleValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACSettings_AggregatedDutyCycleValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACSettings_AggregatedDutyCycleValue.Merge(dst, src)
}
func (m *MACSettings_AggregatedDutyCycleValue) XXX_Size() int {
	return m.Size()
}
func (m *MACSettings_AggregatedDutyCycleValue) XXX_DiscardUnknown() {
	xxx_messageInfo_MACSettings_AggregatedDutyCycleValue.DiscardUnknown(m)
}

var xxx_messageInfo_MACSettings_AggregatedDutyCycleValue proto.InternalMessageInfo

func (m *MACSettings_AggregatedDutyCycleValue) GetValue() AggregatedDutyCycle {
	if m != nil {
		return m.Value
	}
	return DUTY_CYCLE_1
}

type MACSettings_RxDelayValue struct {
	Value                RxDelay  `protobuf:"varint,1,opt,name=value,proto3,enum=ttn.lorawan.v3.RxDelay" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MACSettings_RxDelayValue) Reset()      { *m = MACSettings_RxDelayValue{} }
func (*MACSettings_RxDelayValue) ProtoMessage() {}
func (*MACSettings_RxDelayValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_end_device_7df2e0db88789f5d, []int{6, 3}
}
func (m *MACSettings_RxDelayValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACSettings_RxDelayValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACSettings_RxDelayValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACSettings_RxDelayValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACSettings_RxDelayValue.Merge(dst, src)
}
func (m *MACSettings_RxDelayValue) XXX_Size() int {
	return m.Size()
}
func (m *MACSettings_RxDelayValue) XXX_DiscardUnknown() {
	xxx_messageInfo_MACSettings_RxDelayValue.DiscardUnknown(m)
}

var xxx_messageInfo_MACSettings_RxDelayValue proto.InternalMessageInfo

func (m *MACSettings_RxDelayValue) GetValue() RxDelay {
	if m != nil {
		return m.Value
	}
	return RX_DELAY_0
}

// MACState represents the state of MAC layer of the device.
// MACState is reset on each join for OTAA or ResetInd for ABP devices.
// This is used internally by the Network Server and is read only.
type MACState struct {
	// Current LoRaWAN MAC parameters.
	CurrentParameters MACParameters `protobuf:"bytes,1,opt,name=current_parameters,json=currentParameters,proto3" json:"current_parameters"`
	// Desired LoRaWAN MAC parameters.
	DesiredParameters MACParameters `protobuf:"bytes,2,opt,name=desired_parameters,json=desiredParameters,proto3" json:"desired_parameters"`
	// Currently active LoRaWAN device class
	// - Device class is A by default
	// - If device sets ClassB bit in uplink, this will be set to B
	// - If device sent DeviceModeInd MAC message, this will be set to that value
	DeviceClass Class `protobuf:"varint,3,opt,name=device_class,json=deviceClass,proto3,enum=ttn.lorawan.v3.Class" json:"device_class,omitempty"`
	// LoRaWAN MAC version.
	LoRaWANVersion MACVersion `protobuf:"varint,4,opt,name=lorawan_version,json=lorawanVersion,proto3,enum=ttn.lorawan.v3.MACVersion" json:"lorawan_version,omitempty"`
	// Time when the last confirmed downlink message or MAC command was scheduled.
	LastConfirmedDownlinkAt *time.Time `protobuf:"bytes,5,opt,name=last_confirmed_downlink_at,json=lastConfirmedDownlinkAt,proto3,stdtime" json:"last_confirmed_downlink_at,omitempty"`
	// Frame counter value of last uplink containing DevStatusAns.
	LastDevStatusFCntUp uint32 `protobuf:"varint,6,opt,name=last_dev_status_f_cnt_up,json=lastDevStatusFCntUp,proto3" json:"last_dev_status_f_cnt_up,omitempty"`
	// Periodicity of the class B ping slot.
	PingSlotPeriodicity PingSlotPeriod `protobuf:"varint,7,opt,name=ping_slot_periodicity,json=pingSlotPeriodicity,proto3,enum=ttn.lorawan.v3.PingSlotPeriod" json:"ping_slot_periodicity,omitempty"`
	// A confirmed application downlink, for which an acknowledgment is expected to arrive.
	PendingApplicationDownlink *ApplicationDownlink `protobuf:"bytes,8,opt,name=pending_application_downlink,json=pendingApplicationDownlink,proto3" json:"pending_application_downlink,omitempty"`
	// Queued MAC responses.
	// Regenerated on each uplink.
	QueuedResponses []*MACCommand `protobuf:"bytes,9,rep,name=queued_responses,json=queuedResponses,proto3" json:"queued_responses,omitempty"`
	// Pending MAC requests(i.e. sent requests, for which no response has been received yet).
	// Regenerated on each downlink.
	PendingRequests []*MACCommand `protobuf:"bytes,10,rep,name=pending_requests,json=pendingRequests,proto3" json:"pending_requests,omitempty"`
	// Queued join-accept.
	// Set each time a (re-)join request accept is received from Join Server and removed each time a downlink is scheduled.
	QueuedJoinAccept *MACState_JoinAccept `protobuf:"bytes,11,opt,name=queued_join_accept,json=queuedJoinAccept,proto3" json:"queued_join_accept,omitempty"`
	// Pending join request.
	// Set each time a join accept is scheduled and removed each time an uplink is received from the device.
	PendingJoinRequest *JoinRequest `protobuf:"bytes,12,opt,name=pending_join_request,json=pendingJoinRequest,proto3" json:"pending_join_request,omitempty"`
	// Whether or not Rx windows are expected to be open.
	// Set to true every time an uplink is received.
	// Set to false every time a successful downlink scheduling attempt is made.
	RxWindowsAvailable   bool     `protobuf:"varint,13,opt,name=rx_windows_available,json=rxWindowsAvailable,proto3" json:"rx_windows_available,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MACState) Reset()      { *m = MACState{} }
func (*MACState) ProtoMessage() {}
func (*MACState) Descriptor() ([]byte, []int) {
	return fileDescriptor_end_device_7df2e0db88789f5d, []int{7}
}
func (m *MACState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACState.Merge(dst, src)
}
func (m *MACState) XXX_Size() int {
	return m.Size()
}
func (m *MACState) XXX_DiscardUnknown() {
	xxx_messageInfo_MACState.DiscardUnknown(m)
}

var xxx_messageInfo_MACState proto.InternalMessageInfo

func (m *MACState) GetCurrentParameters() MACParameters {
	if m != nil {
		return m.CurrentParameters
	}
	return MACParameters{}
}

func (m *MACState) GetDesiredParameters() MACParameters {
	if m != nil {
		return m.DesiredParameters
	}
	return MACParameters{}
}

func (m *MACState) GetDeviceClass() Class {
	if m != nil {
		return m.DeviceClass
	}
	return CLASS_A
}

func (m *MACState) GetLoRaWANVersion() MACVersion {
	if m != nil {
		return m.LoRaWANVersion
	}
	return MAC_UNKNOWN
}

func (m *MACState) GetLastConfirmedDownlinkAt() *time.Time {
	if m != nil {
		return m.LastConfirmedDownlinkAt
	}
	return nil
}

func (m *MACState) GetLastDevStatusFCntUp() uint32 {
	if m != nil {
		return m.LastDevStatusFCntUp
	}
	return 0
}

func (m *MACState) GetPingSlotPeriodicity() PingSlotPeriod {
	if m != nil {
		return m.PingSlotPeriodicity
	}
	return PING_EVERY_1S
}

func (m *MACState) GetPendingApplicationDownlink() *ApplicationDownlink {
	if m != nil {
		return m.PendingApplicationDownlink
	}
	return nil
}

func (m *MACState) GetQueuedResponses() []*MACCommand {
	if m != nil {
		return m.QueuedResponses
	}
	return nil
}

func (m *MACState) GetPendingRequests() []*MACCommand {
	if m != nil {
		return m.PendingRequests
	}
	return nil
}

func (m *MACState) GetQueuedJoinAccept() *MACState_JoinAccept {
	if m != nil {
		return m.QueuedJoinAccept
	}
	return nil
}

func (m *MACState) GetPendingJoinRequest() *JoinRequest {
	if m != nil {
		return m.PendingJoinRequest
	}
	return nil
}

func (m *MACState) GetRxWindowsAvailable() bool {
	if m != nil {
		return m.RxWindowsAvailable
	}
	return false
}

type MACState_JoinAccept struct {
	// Payload of the join-accept received from Join Server.
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// JoinRequest sent to Join Server.
	Request JoinRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request"`
	// Network session keys associated with the join.
	Keys                 SessionKeys `protobuf:"bytes,3,opt,name=keys,proto3" json:"keys"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *MACState_JoinAccept) Reset()      { *m = MACState_JoinAccept{} }
func (*MACState_JoinAccept) ProtoMessage() {}
func (*MACState_JoinAccept) Descriptor() ([]byte, []int) {
	return fileDescriptor_end_device_7df2e0db88789f5d, []int{7, 0}
}
func (m *MACState_JoinAccept) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACState_JoinAccept) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACState_JoinAccept.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACState_JoinAccept) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACState_JoinAccept.Merge(dst, src)
}
func (m *MACState_JoinAccept) XXX_Size() int {
	return m.Size()
}
func (m *MACState_JoinAccept) XXX_DiscardUnknown() {
	xxx_messageInfo_MACState_JoinAccept.DiscardUnknown(m)
}

var xxx_messageInfo_MACState_JoinAccept proto.InternalMessageInfo

func (m *MACState_JoinAccept) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *MACState_JoinAccept) GetRequest() JoinRequest {
	if m != nil {
		return m.Request
	}
	return JoinRequest{}
}

func (m *MACState_JoinAccept) GetKeys() SessionKeys {
	if m != nil {
		return m.Keys
	}
	return SessionKeys{}
}

// Defines an End Device registration and its state on the network.
// The persistence of the EndDevice is divided between the Network Server, Application Server and Join Server.
// SDKs are responsible for combining (if desired) the three.
type EndDevice struct {
	EndDeviceIdentifiers `protobuf:"bytes,1,opt,name=ids,proto3,embedded=ids" json:"ids"`
	CreatedAt            time.Time `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
	UpdatedAt            time.Time `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at"`
	// Friendly name of the device. Stored in Entity Registry.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the device. Stored in Entity Registry.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Attributes of the device. Stored in Entity Registry.
	Attributes map[string]string `protobuf:"bytes,6,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Version Identifiers. Stored in Entity Registry and Application Server.
	VersionIDs *EndDeviceVersionIdentifiers `protobuf:"bytes,7,opt,name=version_ids,json=versionIds,proto3" json:"version_ids,omitempty"`
	// Default service profile. Stored in Entity Registry.
	ServiceProfileID string `protobuf:"bytes,8,opt,name=service_profile_id,json=serviceProfileId,proto3" json:"service_profile_id,omitempty"`
	// The address of the Network Server where this device is supposed to be registered.
	// Stored in Entity Registry.
	// The typical format of the address is "host:port". If the port is omitted,
	// the normal port inference (with DNS lookup, otherwise defaults) is used.
	// The connection shall be established with transport layer security (TLS).
	// Custom certificate authorities may be configured out-of-band.
	NetworkServerAddress string `protobuf:"bytes,9,opt,name=network_server_address,json=networkServerAddress,proto3" json:"network_server_address,omitempty"`
	// The address of the Application Server where this device is supposed to be registered.
	// Stored in Entity Registry.
	// The typical format of the address is "host:port". If the port is omitted,
	// the normal port inference (with DNS lookup, otherwise defaults) is used.
	// The connection shall be established with transport layer security (TLS).
	// Custom certificate authorities may be configured out-of-band.
	ApplicationServerAddress string `protobuf:"bytes,10,opt,name=application_server_address,json=applicationServerAddress,proto3" json:"application_server_address,omitempty"`
	// The address of the Join Server where this device is supposed to be registered.
	// Stored in Entity Registry.
	// The typical format of the address is "host:port". If the port is omitted,
	// the normal port inference (with DNS lookup, otherwise defaults) is used.
	// The connection shall be established with transport layer security (TLS).
	// Custom certificate authorities may be configured out-of-band.
	JoinServerAddress string `protobuf:"bytes,11,opt,name=join_server_address,json=joinServerAddress,proto3" json:"join_server_address,omitempty"`
	// Location of the device. Stored in Entity Registry.
	Locations map[string]*Location `protobuf:"bytes,12,rep,name=locations,proto3" json:"locations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Whether the device supports class B.
	// Copied on creation from template identified by version_ids, if any or from the home Network Server device profile, if any.
	SupportsClassB bool `protobuf:"varint,13,opt,name=supports_class_b,json=supportsClassB,proto3" json:"supports_class_b,omitempty"`
	// Whether the device supports class C.
	// Copied on creation from template identified by version_ids, if any or from the home Network Server device profile, if any.
	SupportsClassC bool `protobuf:"varint,14,opt,name=supports_class_c,json=supportsClassC,proto3" json:"supports_class_c,omitempty"`
	// LoRaWAN MAC version. Stored in Network Server.
	// Copied on creation from template identified by version_ids, if any or from the home Network Server device profile, if any.
	LoRaWANVersion MACVersion `protobuf:"varint,15,opt,name=lorawan_version,json=lorawanVersion,proto3,enum=ttn.lorawan.v3.MACVersion" json:"lorawan_version,omitempty"`
	// LoRaWAN PHY version. Stored in Network Server.
	// Copied on creation from template identified by version_ids, if any or from the home Network Server device profile, if any.
	LoRaWANPHYVersion PHYVersion `protobuf:"varint,16,opt,name=lorawan_phy_version,json=lorawanPhyVersion,proto3,enum=ttn.lorawan.v3.PHYVersion" json:"lorawan_phy_version,omitempty"`
	// ID of the frequency plan used by this device.
	// Copied on creation from template identified by version_ids, if any or from the home Network Server device profile, if any.
	FrequencyPlanID string `protobuf:"bytes,17,opt,name=frequency_plan_id,json=frequencyPlanId,proto3" json:"frequency_plan_id,omitempty"`
	// Minimum frequency the device is capable of using (Hz). Stored in Network Server.
	// Copied on creation from template identified by version_ids, if any or from the home Network Server device profile, if any.
	MinFrequency uint64 `protobuf:"varint,18,opt,name=min_frequency,json=minFrequency,proto3" json:"min_frequency,omitempty"`
	// Maximum frequency the device is capable of using (Hz). Stored in Network Server.
	// Copied on creation from template identified by version_ids, if any or from the home Network Server device profile, if any.
	MaxFrequency uint64 `protobuf:"varint,19,opt,name=max_frequency,json=maxFrequency,proto3" json:"max_frequency,omitempty"`
	// The device supports join (it's OTAA).
	// Copied on creation from template identified by version_ids, if any or from the home Network Server device profile, if any.
	SupportsJoin bool `protobuf:"varint,20,opt,name=supports_join,json=supportsJoin,proto3" json:"supports_join,omitempty"`
	// Whether the device resets the join and dev nonces (not LoRaWAN 1.1 compliant). Stored in Join Server.
	// Copied on creation from template identified by version_ids, if any or from the home Network Server device profile, if any.
	ResetsJoinNonces bool `protobuf:"varint,21,opt,name=resets_join_nonces,json=resetsJoinNonces,proto3" json:"resets_join_nonces,omitempty"`
	// Device root keys. Stored in Join Server.
	RootKeys *RootKeys `protobuf:"bytes,22,opt,name=root_keys,json=rootKeys,proto3" json:"root_keys,omitempty"`
	// Home NetID. Stored in Join Server.
	NetID *go_thethings_network_lorawan_stack_pkg_types.NetID `protobuf:"bytes,23,opt,name=net_id,json=netId,proto3,customtype=go.thethings.network/lorawan-stack/pkg/types.NetID" json:"net_id,omitempty"`
	// Settings for how the Network Server handles MAC layer for this device. Stored in Network Server.
	MACSettings *MACSettings `protobuf:"bytes,24,opt,name=mac_settings,json=macSettings,proto3" json:"mac_settings,omitempty"`
	// MAC state of the device. Stored in Network Server.
	MACState *MACState `protobuf:"bytes,25,opt,name=mac_state,json=macState,proto3" json:"mac_state,omitempty"`
	// Current session of the device. Stored in Network Server and Application Server.
	Session *Session `protobuf:"bytes,26,opt,name=session,proto3" json:"session,omitempty"`
	// Pending session. Stored in Network Server and Application Server until RekeyInd is received.
	PendingSession *Session `protobuf:"bytes,27,opt,name=pending_session,json=pendingSession,proto3" json:"pending_session,omitempty"`
	// Last DevNonce used.
	// This field is only used for devices using LoRaWAN version 1.1 and later.
	// Stored in Join Server.
	LastDevNonce uint32 `protobuf:"varint,28,opt,name=last_dev_nonce,json=lastDevNonce,proto3" json:"last_dev_nonce,omitempty"`
	// Used DevNonces sorted in ascending order.
	// This field is only used for devices using LoRaWAN versions preceding 1.1.
	// Stored in Join Server.
	UsedDevNonces []uint32 `protobuf:"varint,29,rep,packed,name=used_dev_nonces,json=usedDevNonces,proto3" json:"used_dev_nonces,omitempty"`
	// Last JoinNonce/AppNonce(for devices using LoRaWAN versions preceding 1.1) used.
	// Stored in Join Server.
	LastJoinNonce uint32 `protobuf:"varint,30,opt,name=last_join_nonce,json=lastJoinNonce,proto3" json:"last_join_nonce,omitempty"`
	// Last Rejoin counter value used (type 0/2).
	// Stored in Join Server.
	LastRJCount0 uint32 `protobuf:"varint,31,opt,name=last_rj_count_0,json=lastRjCount0,proto3" json:"last_rj_count_0,omitempty"`
	// Last Rejoin counter value used (type 1).
	// Stored in Join Server.
	LastRJCount1 uint32 `protobuf:"varint,32,opt,name=last_rj_count_1,json=lastRjCount1,proto3" json:"last_rj_count_1,omitempty"`
	// Time when last DevStatus MAC command was received.
	// Stored in Network Server.
	LastDevStatusReceivedAt *time.Time `protobuf:"bytes,33,opt,name=last_dev_status_received_at,json=lastDevStatusReceivedAt,proto3,stdtime" json:"last_dev_status_received_at,omitempty"`
	// The power state of the device; whether it is battery-powered or connected to an external power source.
	// Received via the DevStatus MAC command at status_received_at.
	// Stored in Network Server.
	PowerState PowerState `protobuf:"varint,34,opt,name=power_state,json=powerState,proto3,enum=ttn.lorawan.v3.PowerState" json:"power_state,omitempty"`
	// Latest-known battery percentage of the device.
	// Received via the DevStatus MAC command at last_dev_status_received_at or earlier.
	// Stored in Network Server.
	BatteryPercentage float32 `protobuf:"fixed32,35,opt,name=battery_percentage,json=batteryPercentage,proto3" json:"battery_percentage,omitempty"`
	// Demodulation signal-to-noise ratio (dB).
	// Received via the DevStatus MAC command at last_dev_status_received_at.
	// Stored in Network Server.
	DownlinkMargin int32 `protobuf:"varint,36,opt,name=downlink_margin,json=downlinkMargin,proto3" json:"downlink_margin,omitempty"`
	// Recent uplink messages with ADR bit set to 1 sorted by time. Stored in Network Server.
	// The field is reset each time an uplink message carrying MACPayload is received with ADR bit set to 0.
	// The number of messages stored is in the range [0,20];
	RecentADRUplinks []*UplinkMessage `protobuf:"bytes,37,rep,name=recent_adr_uplinks,json=recentAdrUplinks,proto3" json:"recent_adr_uplinks,omitempty"`
	// Recent uplink messages sorted by time. Stored in Network Server.
	// The number of messages stored may depend on configuration.
	RecentUplinks []*UplinkMessage `protobuf:"bytes,38,rep,name=recent_uplinks,json=recentUplinks,proto3" json:"recent_uplinks,omitempty"`
	// Recent downlink messages sorted by time. Stored in Network Server.
	// The number of messages stored may depend on configuration.
	RecentDownlinks []*DownlinkMessage `protobuf:"bytes,39,rep,name=recent_downlinks,json=recentDownlinks,proto3" json:"recent_downlinks,omitempty"`
	// Queued Application downlink messages. Stored in Application Server,
	// which sets them on the Network Server.
	QueuedApplicationDownlinks []*ApplicationDownlink `protobuf:"bytes,40,rep,name=queued_application_downlinks,json=queuedApplicationDownlinks,proto3" json:"queued_application_downlinks,omitempty"`
	// The payload formatters for this end device. Stored in Application Server.
	// Copied on creation from template identified by version_ids.
	Formatters *MessagePayloadFormatters `protobuf:"bytes,41,opt,name=formatters,proto3" json:"formatters,omitempty"`
	// ID of the provisioner. Stored in Join Server.
	ProvisionerID string `protobuf:"bytes,42,opt,name=provisioner_id,json=provisionerId,proto3" json:"provisioner_id,omitempty"`
	// Vendor-specific provisioning data. Stored in Join Server.
	ProvisioningData     *types.Struct `protobuf:"bytes,43,opt,name=provisioning_data,json=provisioningData,proto3" json:"provisioning_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *EndDevice) Reset()      { *m = EndDevice{} }
func (*EndDevice) ProtoMessage() {}
func (*EndDevice) Descriptor() ([]byte, []int) {
	return fileDescriptor_end_device_7df2e0db88789f5d, []int{8}
}
func (m *EndDevice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndDevice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndDevice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EndDevice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndDevice.Merge(dst, src)
}
func (m *EndDevice) XXX_Size() int {
	return m.Size()
}
func (m *EndDevice) XXX_DiscardUnknown() {
	xxx_messageInfo_EndDevice.DiscardUnknown(m)
}

var xxx_messageInfo_EndDevice proto.InternalMessageInfo

func (m *EndDevice) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *EndDevice) GetUpdatedAt() time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return time.Time{}
}

func (m *EndDevice) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EndDevice) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *EndDevice) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *EndDevice) GetVersionIDs() *EndDeviceVersionIdentifiers {
	if m != nil {
		return m.VersionIDs
	}
	return nil
}

func (m *EndDevice) GetServiceProfileID() string {
	if m != nil {
		return m.ServiceProfileID
	}
	return ""
}

func (m *EndDevice) GetNetworkServerAddress() string {
	if m != nil {
		return m.NetworkServerAddress
	}
	return ""
}

func (m *EndDevice) GetApplicationServerAddress() string {
	if m != nil {
		return m.ApplicationServerAddress
	}
	return ""
}

func (m *EndDevice) GetJoinServerAddress() string {
	if m != nil {
		return m.JoinServerAddress
	}
	return ""
}

func (m *EndDevice) GetLocations() map[string]*Location {
	if m != nil {
		return m.Locations
	}
	return nil
}

func (m *EndDevice) GetSupportsClassB() bool {
	if m != nil {
		return m.SupportsClassB
	}
	return false
}

func (m *EndDevice) GetSupportsClassC() bool {
	if m != nil {
		return m.SupportsClassC
	}
	return false
}

func (m *EndDevice) GetLoRaWANVersion() MACVersion {
	if m != nil {
		return m.LoRaWANVersion
	}
	return MAC_UNKNOWN
}

func (m *EndDevice) GetLoRaWANPHYVersion() PHYVersion {
	if m != nil {
		return m.LoRaWANPHYVersion
	}
	return PHY_UNKNOWN
}

func (m *EndDevice) GetFrequencyPlanID() string {
	if m != nil {
		return m.FrequencyPlanID
	}
	return ""
}

func (m *EndDevice) GetMinFrequency() uint64 {
	if m != nil {
		return m.MinFrequency
	}
	return 0
}

func (m *EndDevice) GetMaxFrequency() uint64 {
	if m != nil {
		return m.MaxFrequency
	}
	return 0
}

func (m *EndDevice) GetSupportsJoin() bool {
	if m != nil {
		return m.SupportsJoin
	}
	return false
}

func (m *EndDevice) GetResetsJoinNonces() bool {
	if m != nil {
		return m.ResetsJoinNonces
	}
	return false
}

func (m *EndDevice) GetRootKeys() *RootKeys {
	if m != nil {
		return m.RootKeys
	}
	return nil
}

func (m *EndDevice) GetMACSettings() *MACSettings {
	if m != nil {
		return m.MACSettings
	}
	return nil
}

func (m *EndDevice) GetMACState() *MACState {
	if m != nil {
		return m.MACState
	}
	return nil
}

func (m *EndDevice) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *EndDevice) GetPendingSession() *Session {
	if m != nil {
		return m.PendingSession
	}
	return nil
}

func (m *EndDevice) GetLastDevNonce() uint32 {
	if m != nil {
		return m.LastDevNonce
	}
	return 0
}

func (m *EndDevice) GetUsedDevNonces() []uint32 {
	if m != nil {
		return m.UsedDevNonces
	}
	return nil
}

func (m *EndDevice) GetLastJoinNonce() uint32 {
	if m != nil {
		return m.LastJoinNonce
	}
	return 0
}

func (m *EndDevice) GetLastRJCount0() uint32 {
	if m != nil {
		return m.LastRJCount0
	}
	return 0
}

func (m *EndDevice) GetLastRJCount1() uint32 {
	if m != nil {
		return m.LastRJCount1
	}
	return 0
}

func (m *EndDevice) GetLastDevStatusReceivedAt() *time.Time {
	if m != nil {
		return m.LastDevStatusReceivedAt
	}
	return nil
}

func (m *EndDevice) GetPowerState() PowerState {
	if m != nil {
		return m.PowerState
	}
	return PowerState_POWER_UNKNOWN
}

func (m *EndDevice) GetBatteryPercentage() float32 {
	if m != nil {
		return m.BatteryPercentage
	}
	return 0
}

func (m *EndDevice) GetDownlinkMargin() int32 {
	if m != nil {
		return m.DownlinkMargin
	}
	return 0
}

func (m *EndDevice) GetRecentADRUplinks() []*UplinkMessage {
	if m != nil {
		return m.RecentADRUplinks
	}
	return nil
}

func (m *EndDevice) GetRecentUplinks() []*UplinkMessage {
	if m != nil {
		return m.RecentUplinks
	}
	return nil
}

func (m *EndDevice) GetRecentDownlinks() []*DownlinkMessage {
	if m != nil {
		return m.RecentDownlinks
	}
	return nil
}

func (m *EndDevice) GetQueuedApplicationDownlinks() []*ApplicationDownlink {
	if m != nil {
		return m.QueuedApplicationDownlinks
	}
	return nil
}

func (m *EndDevice) GetFormatters() *MessagePayloadFormatters {
	if m != nil {
		return m.Formatters
	}
	return nil
}

func (m *EndDevice) GetProvisionerID() string {
	if m != nil {
		return m.ProvisionerID
	}
	return ""
}

func (m *EndDevice) GetProvisioningData() *types.Struct {
	if m != nil {
		return m.ProvisioningData
	}
	return nil
}

type EndDevices struct {
	EndDevices           []*EndDevice `protobuf:"bytes,1,rep,name=end_devices,json=endDevices,proto3" json:"end_devices,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *EndDevices) Reset()      { *m = EndDevices{} }
func (*EndDevices) ProtoMessage() {}
func (*EndDevices) Descriptor() ([]byte, []int) {
	return fileDescriptor_end_device_7df2e0db88789f5d, []int{9}
}
func (m *EndDevices) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndDevices) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndDevices.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EndDevices) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndDevices.Merge(dst, src)
}
func (m *EndDevices) XXX_Size() int {
	return m.Size()
}
func (m *EndDevices) XXX_DiscardUnknown() {
	xxx_messageInfo_EndDevices.DiscardUnknown(m)
}

var xxx_messageInfo_EndDevices proto.InternalMessageInfo

func (m *EndDevices) GetEndDevices() []*EndDevice {
	if m != nil {
		return m.EndDevices
	}
	return nil
}

type CreateEndDeviceRequest struct {
	EndDevice            `protobuf:"bytes,1,opt,name=end_device,json=endDevice,proto3,embedded=end_device" json:"end_device"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateEndDeviceRequest) Reset()      { *m = CreateEndDeviceRequest{} }
func (*CreateEndDeviceRequest) ProtoMessage() {}
func (*CreateEndDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_end_device_7df2e0db88789f5d, []int{10}
}
func (m *CreateEndDeviceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateEndDeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateEndDeviceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateEndDeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateEndDeviceRequest.Merge(dst, src)
}
func (m *CreateEndDeviceRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateEndDeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateEndDeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateEndDeviceRequest proto.InternalMessageInfo

type UpdateEndDeviceRequest struct {
	EndDevice            `protobuf:"bytes,1,opt,name=end_device,json=endDevice,proto3,embedded=end_device" json:"end_device"`
	FieldMask            types.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *UpdateEndDeviceRequest) Reset()      { *m = UpdateEndDeviceRequest{} }
func (*UpdateEndDeviceRequest) ProtoMessage() {}
func (*UpdateEndDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_end_device_7df2e0db88789f5d, []int{11}
}
func (m *UpdateEndDeviceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateEndDeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateEndDeviceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateEndDeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateEndDeviceRequest.Merge(dst, src)
}
func (m *UpdateEndDeviceRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateEndDeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateEndDeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateEndDeviceRequest proto.InternalMessageInfo

func (m *UpdateEndDeviceRequest) GetFieldMask() types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return types.FieldMask{}
}

type GetEndDeviceRequest struct {
	EndDeviceIdentifiers `protobuf:"bytes,1,opt,name=end_device_ids,json=endDeviceIds,proto3,embedded=end_device_ids" json:"end_device_ids"`
	FieldMask            types.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetEndDeviceRequest) Reset()      { *m = GetEndDeviceRequest{} }
func (*GetEndDeviceRequest) ProtoMessage() {}
func (*GetEndDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_end_device_7df2e0db88789f5d, []int{12}
}
func (m *GetEndDeviceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetEndDeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetEndDeviceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetEndDeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEndDeviceRequest.Merge(dst, src)
}
func (m *GetEndDeviceRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetEndDeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEndDeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetEndDeviceRequest proto.InternalMessageInfo

func (m *GetEndDeviceRequest) GetFieldMask() types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return types.FieldMask{}
}

type ListEndDevicesRequest struct {
	ApplicationIdentifiers `protobuf:"bytes,1,opt,name=application_ids,json=applicationIds,proto3,embedded=application_ids" json:"application_ids"`
	FieldMask              types.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask"`
	// Order the results by this field path (must be present in the field mask).
	// Default ordering is by ID. Prepend with a minus (-) to reverse the order.
	Order string `protobuf:"bytes,3,opt,name=order,proto3" json:"order,omitempty"`
	// Limit the number of results per page.
	Limit uint32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	// Page number for pagination. 0 is interpreted as 1.
	Page                 uint32   `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListEndDevicesRequest) Reset()      { *m = ListEndDevicesRequest{} }
func (*ListEndDevicesRequest) ProtoMessage() {}
func (*ListEndDevicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_end_device_7df2e0db88789f5d, []int{13}
}
func (m *ListEndDevicesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListEndDevicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListEndDevicesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListEndDevicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListEndDevicesRequest.Merge(dst, src)
}
func (m *ListEndDevicesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListEndDevicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListEndDevicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListEndDevicesRequest proto.InternalMessageInfo

func (m *ListEndDevicesRequest) GetFieldMask() types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return types.FieldMask{}
}

func (m *ListEndDevicesRequest) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *ListEndDevicesRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListEndDevicesRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type SetEndDeviceRequest struct {
	Device               EndDevice       `protobuf:"bytes,1,opt,name=device,proto3" json:"device"`
	FieldMask            types.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SetEndDeviceRequest) Reset()      { *m = SetEndDeviceRequest{} }
func (*SetEndDeviceRequest) ProtoMessage() {}
func (*SetEndDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_end_device_7df2e0db88789f5d, []int{14}
}
func (m *SetEndDeviceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetEndDeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetEndDeviceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SetEndDeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetEndDeviceRequest.Merge(dst, src)
}
func (m *SetEndDeviceRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetEndDeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetEndDeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetEndDeviceRequest proto.InternalMessageInfo

func (m *SetEndDeviceRequest) GetDevice() EndDevice {
	if m != nil {
		return m.Device
	}
	return EndDevice{}
}

func (m *SetEndDeviceRequest) GetFieldMask() types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return types.FieldMask{}
}

func init() {
	proto.RegisterType((*Session)(nil), "ttn.lorawan.v3.Session")
	golang_proto.RegisterType((*Session)(nil), "ttn.lorawan.v3.Session")
	proto.RegisterType((*MACParameters)(nil), "ttn.lorawan.v3.MACParameters")
	golang_proto.RegisterType((*MACParameters)(nil), "ttn.lorawan.v3.MACParameters")
	proto.RegisterType((*MACParameters_Channel)(nil), "ttn.lorawan.v3.MACParameters.Channel")
	golang_proto.RegisterType((*MACParameters_Channel)(nil), "ttn.lorawan.v3.MACParameters.Channel")
	proto.RegisterType((*EndDeviceBrand)(nil), "ttn.lorawan.v3.EndDeviceBrand")
	golang_proto.RegisterType((*EndDeviceBrand)(nil), "ttn.lorawan.v3.EndDeviceBrand")
	proto.RegisterType((*EndDeviceModel)(nil), "ttn.lorawan.v3.EndDeviceModel")
	golang_proto.RegisterType((*EndDeviceModel)(nil), "ttn.lorawan.v3.EndDeviceModel")
	proto.RegisterType((*EndDeviceVersionIdentifiers)(nil), "ttn.lorawan.v3.EndDeviceVersionIdentifiers")
	golang_proto.RegisterType((*EndDeviceVersionIdentifiers)(nil), "ttn.lorawan.v3.EndDeviceVersionIdentifiers")
	proto.RegisterType((*EndDeviceVersion)(nil), "ttn.lorawan.v3.EndDeviceVersion")
	golang_proto.RegisterType((*EndDeviceVersion)(nil), "ttn.lorawan.v3.EndDeviceVersion")
	proto.RegisterType((*MACSettings)(nil), "ttn.lorawan.v3.MACSettings")
	golang_proto.RegisterType((*MACSettings)(nil), "ttn.lorawan.v3.MACSettings")
	proto.RegisterType((*MACSettings_DataRateIndexValue)(nil), "ttn.lorawan.v3.MACSettings.DataRateIndexValue")
	golang_proto.RegisterType((*MACSettings_DataRateIndexValue)(nil), "ttn.lorawan.v3.MACSettings.DataRateIndexValue")
	proto.RegisterType((*MACSettings_PingSlotPeriodValue)(nil), "ttn.lorawan.v3.MACSettings.PingSlotPeriodValue")
	golang_proto.RegisterType((*MACSettings_PingSlotPeriodValue)(nil), "ttn.lorawan.v3.MACSettings.PingSlotPeriodValue")
	proto.RegisterType((*MACSettings_AggregatedDutyCycleValue)(nil), "ttn.lorawan.v3.MACSettings.AggregatedDutyCycleValue")
	golang_proto.RegisterType((*MACSettings_AggregatedDutyCycleValue)(nil), "ttn.lorawan.v3.MACSettings.AggregatedDutyCycleValue")
	proto.RegisterType((*MACSettings_RxDelayValue)(nil), "ttn.lorawan.v3.MACSettings.RxDelayValue")
	golang_proto.RegisterType((*MACSettings_RxDelayValue)(nil), "ttn.lorawan.v3.MACSettings.RxDelayValue")
	proto.RegisterType((*MACState)(nil), "ttn.lorawan.v3.MACState")
	golang_proto.RegisterType((*MACState)(nil), "ttn.lorawan.v3.MACState")
	proto.RegisterType((*MACState_JoinAccept)(nil), "ttn.lorawan.v3.MACState.JoinAccept")
	golang_proto.RegisterType((*MACState_JoinAccept)(nil), "ttn.lorawan.v3.MACState.JoinAccept")
	proto.RegisterType((*EndDevice)(nil), "ttn.lorawan.v3.EndDevice")
	golang_proto.RegisterType((*EndDevice)(nil), "ttn.lorawan.v3.EndDevice")
	proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.EndDevice.AttributesEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.EndDevice.AttributesEntry")
	proto.RegisterMapType((map[string]*Location)(nil), "ttn.lorawan.v3.EndDevice.LocationsEntry")
	golang_proto.RegisterMapType((map[string]*Location)(nil), "ttn.lorawan.v3.EndDevice.LocationsEntry")
	proto.RegisterType((*EndDevices)(nil), "ttn.lorawan.v3.EndDevices")
	golang_proto.RegisterType((*EndDevices)(nil), "ttn.lorawan.v3.EndDevices")
	proto.RegisterType((*CreateEndDeviceRequest)(nil), "ttn.lorawan.v3.CreateEndDeviceRequest")
	golang_proto.RegisterType((*CreateEndDeviceRequest)(nil), "ttn.lorawan.v3.CreateEndDeviceRequest")
	proto.RegisterType((*UpdateEndDeviceRequest)(nil), "ttn.lorawan.v3.UpdateEndDeviceRequest")
	golang_proto.RegisterType((*UpdateEndDeviceRequest)(nil), "ttn.lorawan.v3.UpdateEndDeviceRequest")
	proto.RegisterType((*GetEndDeviceRequest)(nil), "ttn.lorawan.v3.GetEndDeviceRequest")
	golang_proto.RegisterType((*GetEndDeviceRequest)(nil), "ttn.lorawan.v3.GetEndDeviceRequest")
	proto.RegisterType((*ListEndDevicesRequest)(nil), "ttn.lorawan.v3.ListEndDevicesRequest")
	golang_proto.RegisterType((*ListEndDevicesRequest)(nil), "ttn.lorawan.v3.ListEndDevicesRequest")
	proto.RegisterType((*SetEndDeviceRequest)(nil), "ttn.lorawan.v3.SetEndDeviceRequest")
	golang_proto.RegisterType((*SetEndDeviceRequest)(nil), "ttn.lorawan.v3.SetEndDeviceRequest")
	proto.RegisterEnum("ttn.lorawan.v3.PowerState", PowerState_name, PowerState_value)
	golang_proto.RegisterEnum("ttn.lorawan.v3.PowerState", PowerState_name, PowerState_value)
}
func (x PowerState) String() string {
	s, ok := PowerState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Session) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Session)
	if !ok {
		that2, ok := that.(Session)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DevAddr.Equal(that1.DevAddr) {
		return false
	}
	if !this.SessionKeys.Equal(&that1.SessionKeys) {
		return false
	}
	if this.LastFCntUp != that1.LastFCntUp {
		return false
	}
	if this.LastNFCntDown != that1.LastNFCntDown {
		return false
	}
	if this.LastAFCntDown != that1.LastAFCntDown {
		return false
	}
	if this.LastConfFCntDown != that1.LastConfFCntDown {
		return false
	}
	if !this.StartedAt.Equal(that1.StartedAt) {
		return false
	}
	return true
}
func (this *MACParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACParameters)
	if !ok {
		that2, ok := that.(MACParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxEIRP != that1.MaxEIRP {
		return false
	}
	if this.UplinkDwellTime != that1.UplinkDwellTime {
		return false
	}
	if this.DownlinkDwellTime != that1.DownlinkDwellTime {
		return false
	}
	if this.ADRDataRateIndex != that1.ADRDataRateIndex {
		return false
	}
	if this.ADRTxPowerIndex != that1.ADRTxPowerIndex {
		return false
	}
	if this.ADRNbTrans != that1.ADRNbTrans {
		return false
	}
	if this.ADRAckLimit != that1.ADRAckLimit {
		return false
	}
	if this.ADRAckDelay != that1.ADRAckDelay {
		return false
	}
	if this.Rx1Delay != that1.Rx1Delay {
		return false
	}
	if this.Rx1DataRateOffset != that1.Rx1DataRateOffset {
		return false
	}
	if this.Rx2DataRateIndex != that1.Rx2DataRateIndex {
		return false
	}
	if this.Rx2Frequency != that1.Rx2Frequency {
		return false
	}
	if this.MaxDutyCycle != that1.MaxDutyCycle {
		return false
	}
	if this.RejoinTimePeriodicity != that1.RejoinTimePeriodicity {
		return false
	}
	if this.RejoinCountPeriodicity != that1.RejoinCountPeriodicity {
		return false
	}
	if this.PingSlotFrequency != that1.PingSlotFrequency {
		return false
	}
	if this.PingSlotDataRateIndex != that1.PingSlotDataRateIndex {
		return false
	}
	if this.BeaconFrequency != that1.BeaconFrequency {
		return false
	}
	if len(this.Channels) != len(that1.Channels) {
		return false
	}
	for i := range this.Channels {
		if !this.Channels[i].Equal(that1.Channels[i]) {
			return false
		}
	}
	return true
}
func (this *MACParameters_Channel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACParameters_Channel)
	if !ok {
		that2, ok := that.(MACParameters_Channel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UplinkFrequency != that1.UplinkFrequency {
		return false
	}
	if this.DownlinkFrequency != that1.DownlinkFrequency {
		return false
	}
	if this.MinDataRateIndex != that1.MinDataRateIndex {
		return false
	}
	if this.MaxDataRateIndex != that1.MaxDataRateIndex {
		return false
	}
	if this.EnableUplink != that1.EnableUplink {
		return false
	}
	return true
}
func (this *EndDeviceBrand) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDeviceBrand)
	if !ok {
		that2, ok := that.(EndDeviceBrand)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.URL != that1.URL {
		return false
	}
	if len(this.Logos) != len(that1.Logos) {
		return false
	}
	for i := range this.Logos {
		if this.Logos[i] != that1.Logos[i] {
			return false
		}
	}
	return true
}
func (this *EndDeviceModel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDeviceModel)
	if !ok {
		that2, ok := that.(EndDeviceModel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BrandID != that1.BrandID {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *EndDeviceVersionIdentifiers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDeviceVersionIdentifiers)
	if !ok {
		that2, ok := that.(EndDeviceVersionIdentifiers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BrandID != that1.BrandID {
		return false
	}
	if this.ModelID != that1.ModelID {
		return false
	}
	if this.HardwareVersion != that1.HardwareVersion {
		return false
	}
	if this.FirmwareVersion != that1.FirmwareVersion {
		return false
	}
	return true
}
func (this *EndDeviceVersion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDeviceVersion)
	if !ok {
		that2, ok := that.(EndDeviceVersion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EndDeviceVersionIdentifiers.Equal(&that1.EndDeviceVersionIdentifiers) {
		return false
	}
	if this.LoRaWANVersion != that1.LoRaWANVersion {
		return false
	}
	if this.LoRaWANPHYVersion != that1.LoRaWANPHYVersion {
		return false
	}
	if this.FrequencyPlanID != that1.FrequencyPlanID {
		return false
	}
	if len(this.Photos) != len(that1.Photos) {
		return false
	}
	for i := range this.Photos {
		if this.Photos[i] != that1.Photos[i] {
			return false
		}
	}
	if this.SupportsClassB != that1.SupportsClassB {
		return false
	}
	if this.SupportsClassC != that1.SupportsClassC {
		return false
	}
	if !this.DefaultMACSettings.Equal(that1.DefaultMACSettings) {
		return false
	}
	if this.MinFrequency != that1.MinFrequency {
		return false
	}
	if this.MaxFrequency != that1.MaxFrequency {
		return false
	}
	if this.ResetsFCnt != that1.ResetsFCnt {
		return false
	}
	if this.SupportsJoin != that1.SupportsJoin {
		return false
	}
	if this.ResetsJoinNonces != that1.ResetsJoinNonces {
		return false
	}
	if !this.DefaultFormatters.Equal(&that1.DefaultFormatters) {
		return false
	}
	return true
}
func (this *MACSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACSettings)
	if !ok {
		that2, ok := that.(MACSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClassBTimeout != nil && that1.ClassBTimeout != nil {
		if *this.ClassBTimeout != *that1.ClassBTimeout {
			return false
		}
	} else if this.ClassBTimeout != nil {
		return false
	} else if that1.ClassBTimeout != nil {
		return false
	}
	if !this.PingSlotPeriodicity.Equal(that1.PingSlotPeriodicity) {
		return false
	}
	if !this.PingSlotDataRateIndex.Equal(that1.PingSlotDataRateIndex) {
		return false
	}
	if this.PingSlotFrequency != that1.PingSlotFrequency {
		return false
	}
	if this.ClassCTimeout != nil && that1.ClassCTimeout != nil {
		if *this.ClassCTimeout != *that1.ClassCTimeout {
			return false
		}
	} else if this.ClassCTimeout != nil {
		return false
	} else if that1.ClassCTimeout != nil {
		return false
	}
	if !this.Rx1Delay.Equal(that1.Rx1Delay) {
		return false
	}
	if !this.Rx1DataRateOffset.Equal(that1.Rx1DataRateOffset) {
		return false
	}
	if !this.Rx2DataRateIndex.Equal(that1.Rx2DataRateIndex) {
		return false
	}
	if this.Rx2Frequency != that1.Rx2Frequency {
		return false
	}
	if len(this.FactoryPresetFrequencies) != len(that1.FactoryPresetFrequencies) {
		return false
	}
	for i := range this.FactoryPresetFrequencies {
		if this.FactoryPresetFrequencies[i] != that1.FactoryPresetFrequencies[i] {
			return false
		}
	}
	if !this.MaxDutyCycle.Equal(that1.MaxDutyCycle) {
		return false
	}
	if !this.Supports32BitFCnt.Equal(that1.Supports32BitFCnt) {
		return false
	}
	if !this.UseADR.Equal(that1.UseADR) {
		return false
	}
	if !this.ADRMargin.Equal(that1.ADRMargin) {
		return false
	}
	if !this.ResetsFCnt.Equal(that1.ResetsFCnt) {
		return false
	}
	if this.StatusTimePeriodicity != nil && that1.StatusTimePeriodicity != nil {
		if *this.StatusTimePeriodicity != *that1.StatusTimePeriodicity {
			return false
		}
	} else if this.StatusTimePeriodicity != nil {
		return false
	} else if that1.StatusTimePeriodicity != nil {
		return false
	}
	if !this.StatusCountPeriodicity.Equal(that1.StatusCountPeriodicity) {
		return false
	}
	if !this.DesiredRx1Delay.Equal(that1.DesiredRx1Delay) {
		return false
	}
	if !this.DesiredRx1DataRateOffset.Equal(that1.DesiredRx1DataRateOffset) {
		return false
	}
	if !this.DesiredRx2DataRateIndex.Equal(that1.DesiredRx2DataRateIndex) {
		return false
	}
	if this.DesiredRx2Frequency != that1.DesiredRx2Frequency {
		return false
	}
	return true
}
func (this *MACSettings_DataRateIndexValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACSettings_DataRateIndexValue)
	if !ok {
		that2, ok := that.(MACSettings_DataRateIndexValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *MACSettings_PingSlotPeriodValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACSettings_PingSlotPeriodValue)
	if !ok {
		that2, ok := that.(MACSettings_PingSlotPeriodValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *MACSettings_AggregatedDutyCycleValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACSettings_AggregatedDutyCycleValue)
	if !ok {
		that2, ok := that.(MACSettings_AggregatedDutyCycleValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *MACSettings_RxDelayValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACSettings_RxDelayValue)
	if !ok {
		that2, ok := that.(MACSettings_RxDelayValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *MACState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACState)
	if !ok {
		that2, ok := that.(MACState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CurrentParameters.Equal(&that1.CurrentParameters) {
		return false
	}
	if !this.DesiredParameters.Equal(&that1.DesiredParameters) {
		return false
	}
	if this.DeviceClass != that1.DeviceClass {
		return false
	}
	if this.LoRaWANVersion != that1.LoRaWANVersion {
		return false
	}
	if that1.LastConfirmedDownlinkAt == nil {
		if this.LastConfirmedDownlinkAt != nil {
			return false
		}
	} else if !this.LastConfirmedDownlinkAt.Equal(*that1.LastConfirmedDownlinkAt) {
		return false
	}
	if this.LastDevStatusFCntUp != that1.LastDevStatusFCntUp {
		return false
	}
	if this.PingSlotPeriodicity != that1.PingSlotPeriodicity {
		return false
	}
	if !this.PendingApplicationDownlink.Equal(that1.PendingApplicationDownlink) {
		return false
	}
	if len(this.QueuedResponses) != len(that1.QueuedResponses) {
		return false
	}
	for i := range this.QueuedResponses {
		if !this.QueuedResponses[i].Equal(that1.QueuedResponses[i]) {
			return false
		}
	}
	if len(this.PendingRequests) != len(that1.PendingRequests) {
		return false
	}
	for i := range this.PendingRequests {
		if !this.PendingRequests[i].Equal(that1.PendingRequests[i]) {
			return false
		}
	}
	if !this.QueuedJoinAccept.Equal(that1.QueuedJoinAccept) {
		return false
	}
	if !this.PendingJoinRequest.Equal(that1.PendingJoinRequest) {
		return false
	}
	if this.RxWindowsAvailable != that1.RxWindowsAvailable {
		return false
	}
	return true
}
func (this *MACState_JoinAccept) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACState_JoinAccept)
	if !ok {
		that2, ok := that.(MACState_JoinAccept)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	if !this.Request.Equal(&that1.Request) {
		return false
	}
	if !this.Keys.Equal(&that1.Keys) {
		return false
	}
	return true
}
func (this *EndDevice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDevice)
	if !ok {
		that2, ok := that.(EndDevice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EndDeviceIdentifiers.Equal(&that1.EndDeviceIdentifiers) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return false
	}
	for i := range this.Attributes {
		if this.Attributes[i] != that1.Attributes[i] {
			return false
		}
	}
	if !this.VersionIDs.Equal(that1.VersionIDs) {
		return false
	}
	if this.ServiceProfileID != that1.ServiceProfileID {
		return false
	}
	if this.NetworkServerAddress != that1.NetworkServerAddress {
		return false
	}
	if this.ApplicationServerAddress != that1.ApplicationServerAddress {
		return false
	}
	if this.JoinServerAddress != that1.JoinServerAddress {
		return false
	}
	if len(this.Locations) != len(that1.Locations) {
		return false
	}
	for i := range this.Locations {
		if !this.Locations[i].Equal(that1.Locations[i]) {
			return false
		}
	}
	if this.SupportsClassB != that1.SupportsClassB {
		return false
	}
	if this.SupportsClassC != that1.SupportsClassC {
		return false
	}
	if this.LoRaWANVersion != that1.LoRaWANVersion {
		return false
	}
	if this.LoRaWANPHYVersion != that1.LoRaWANPHYVersion {
		return false
	}
	if this.FrequencyPlanID != that1.FrequencyPlanID {
		return false
	}
	if this.MinFrequency != that1.MinFrequency {
		return false
	}
	if this.MaxFrequency != that1.MaxFrequency {
		return false
	}
	if this.SupportsJoin != that1.SupportsJoin {
		return false
	}
	if this.ResetsJoinNonces != that1.ResetsJoinNonces {
		return false
	}
	if !this.RootKeys.Equal(that1.RootKeys) {
		return false
	}
	if that1.NetID == nil {
		if this.NetID != nil {
			return false
		}
	} else if !this.NetID.Equal(*that1.NetID) {
		return false
	}
	if !this.MACSettings.Equal(that1.MACSettings) {
		return false
	}
	if !this.MACState.Equal(that1.MACState) {
		return false
	}
	if !this.Session.Equal(that1.Session) {
		return false
	}
	if !this.PendingSession.Equal(that1.PendingSession) {
		return false
	}
	if this.LastDevNonce != that1.LastDevNonce {
		return false
	}
	if len(this.UsedDevNonces) != len(that1.UsedDevNonces) {
		return false
	}
	for i := range this.UsedDevNonces {
		if this.UsedDevNonces[i] != that1.UsedDevNonces[i] {
			return false
		}
	}
	if this.LastJoinNonce != that1.LastJoinNonce {
		return false
	}
	if this.LastRJCount0 != that1.LastRJCount0 {
		return false
	}
	if this.LastRJCount1 != that1.LastRJCount1 {
		return false
	}
	if that1.LastDevStatusReceivedAt == nil {
		if this.LastDevStatusReceivedAt != nil {
			return false
		}
	} else if !this.LastDevStatusReceivedAt.Equal(*that1.LastDevStatusReceivedAt) {
		return false
	}
	if this.PowerState != that1.PowerState {
		return false
	}
	if this.BatteryPercentage != that1.BatteryPercentage {
		return false
	}
	if this.DownlinkMargin != that1.DownlinkMargin {
		return false
	}
	if len(this.RecentADRUplinks) != len(that1.RecentADRUplinks) {
		return false
	}
	for i := range this.RecentADRUplinks {
		if !this.RecentADRUplinks[i].Equal(that1.RecentADRUplinks[i]) {
			return false
		}
	}
	if len(this.RecentUplinks) != len(that1.RecentUplinks) {
		return false
	}
	for i := range this.RecentUplinks {
		if !this.RecentUplinks[i].Equal(that1.RecentUplinks[i]) {
			return false
		}
	}
	if len(this.RecentDownlinks) != len(that1.RecentDownlinks) {
		return false
	}
	for i := range this.RecentDownlinks {
		if !this.RecentDownlinks[i].Equal(that1.RecentDownlinks[i]) {
			return false
		}
	}
	if len(this.QueuedApplicationDownlinks) != len(that1.QueuedApplicationDownlinks) {
		return false
	}
	for i := range this.QueuedApplicationDownlinks {
		if !this.QueuedApplicationDownlinks[i].Equal(that1.QueuedApplicationDownlinks[i]) {
			return false
		}
	}
	if !this.Formatters.Equal(that1.Formatters) {
		return false
	}
	if this.ProvisionerID != that1.ProvisionerID {
		return false
	}
	if !this.ProvisioningData.Equal(that1.ProvisioningData) {
		return false
	}
	return true
}
func (this *EndDevices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDevices)
	if !ok {
		that2, ok := that.(EndDevices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.EndDevices) != len(that1.EndDevices) {
		return false
	}
	for i := range this.EndDevices {
		if !this.EndDevices[i].Equal(that1.EndDevices[i]) {
			return false
		}
	}
	return true
}
func (this *CreateEndDeviceRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateEndDeviceRequest)
	if !ok {
		that2, ok := that.(CreateEndDeviceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EndDevice.Equal(&that1.EndDevice) {
		return false
	}
	return true
}
func (this *UpdateEndDeviceRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateEndDeviceRequest)
	if !ok {
		that2, ok := that.(UpdateEndDeviceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EndDevice.Equal(&that1.EndDevice) {
		return false
	}
	if !this.FieldMask.Equal(&that1.FieldMask) {
		return false
	}
	return true
}
func (this *GetEndDeviceRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetEndDeviceRequest)
	if !ok {
		that2, ok := that.(GetEndDeviceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EndDeviceIdentifiers.Equal(&that1.EndDeviceIdentifiers) {
		return false
	}
	if !this.FieldMask.Equal(&that1.FieldMask) {
		return false
	}
	return true
}
func (this *ListEndDevicesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListEndDevicesRequest)
	if !ok {
		that2, ok := that.(ListEndDevicesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationIdentifiers.Equal(&that1.ApplicationIdentifiers) {
		return false
	}
	if !this.FieldMask.Equal(&that1.FieldMask) {
		return false
	}
	if this.Order != that1.Order {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	return true
}
func (this *SetEndDeviceRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetEndDeviceRequest)
	if !ok {
		that2, ok := that.(SetEndDeviceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Device.Equal(&that1.Device) {
		return false
	}
	if !this.FieldMask.Equal(&that1.FieldMask) {
		return false
	}
	return true
}
func (m *Session) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Session) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(m.DevAddr.Size()))
	n1, err := m.DevAddr.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(m.SessionKeys.Size()))
	n2, err := m.SessionKeys.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if m.LastFCntUp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.LastFCntUp))
	}
	if m.LastNFCntDown != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.LastNFCntDown))
	}
	if m.LastAFCntDown != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.LastAFCntDown))
	}
	if m.LastConfFCntDown != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.LastConfFCntDown))
	}
	dAtA[i] = 0x42
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.StartedAt)))
	n3, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	return i, nil
}

func (m *MACParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACParameters) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxEIRP != 0 {
		dAtA[i] = 0xd
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], math.Float32bits(float32(m.MaxEIRP)))
		i += 4
	}
	if m.UplinkDwellTime {
		dAtA[i] = 0x10
		i++
		if m.UplinkDwellTime {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DownlinkDwellTime {
		dAtA[i] = 0x18
		i++
		if m.DownlinkDwellTime {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ADRDataRateIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.ADRDataRateIndex))
	}
	if m.ADRTxPowerIndex != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.ADRTxPowerIndex))
	}
	if m.ADRNbTrans != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.ADRNbTrans))
	}
	if m.ADRAckLimit != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.ADRAckLimit))
	}
	if m.ADRAckDelay != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.ADRAckDelay))
	}
	if m.Rx1Delay != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.Rx1Delay))
	}
	if m.Rx1DataRateOffset != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.Rx1DataRateOffset))
	}
	if m.Rx2DataRateIndex != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.Rx2DataRateIndex))
	}
	if m.Rx2Frequency != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintEndDevice(dAtA, i, m.Rx2Frequency)
	}
	if m.MaxDutyCycle != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.MaxDutyCycle))
	}
	if m.RejoinTimePeriodicity != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.RejoinTimePeriodicity))
	}
	if m.RejoinCountPeriodicity != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.RejoinCountPeriodicity))
	}
	if m.PingSlotFrequency != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndDevice(dAtA, i, m.PingSlotFrequency)
	}
	if m.PingSlotDataRateIndex != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.PingSlotDataRateIndex))
	}
	if m.BeaconFrequency != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndDevice(dAtA, i, m.BeaconFrequency)
	}
	if len(m.Channels) > 0 {
		for _, msg := range m.Channels {
			dAtA[i] = 0x9a
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintEndDevice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MACParameters_Channel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACParameters_Channel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UplinkFrequency != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEndDevice(dAtA, i, m.UplinkFrequency)
	}
	if m.DownlinkFrequency != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEndDevice(dAtA, i, m.DownlinkFrequency)
	}
	if m.MinDataRateIndex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.MinDataRateIndex))
	}
	if m.MaxDataRateIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.MaxDataRateIndex))
	}
	if m.EnableUplink {
		dAtA[i] = 0x28
		i++
		if m.EnableUplink {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *EndDeviceBrand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDeviceBrand) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.URL) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.URL)))
		i += copy(dAtA[i:], m.URL)
	}
	if len(m.Logos) > 0 {
		for _, s := range m.Logos {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *EndDeviceModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDeviceModel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BrandID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.BrandID)))
		i += copy(dAtA[i:], m.BrandID)
	}
	if len(m.ID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *EndDeviceVersionIdentifiers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDeviceVersionIdentifiers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BrandID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.BrandID)))
		i += copy(dAtA[i:], m.BrandID)
	}
	if len(m.ModelID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.ModelID)))
		i += copy(dAtA[i:], m.ModelID)
	}
	if len(m.HardwareVersion) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.HardwareVersion)))
		i += copy(dAtA[i:], m.HardwareVersion)
	}
	if len(m.FirmwareVersion) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.FirmwareVersion)))
		i += copy(dAtA[i:], m.FirmwareVersion)
	}
	return i, nil
}

func (m *EndDeviceVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDeviceVersion) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(m.EndDeviceVersionIdentifiers.Size()))
	n4, err := m.EndDeviceVersionIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if m.LoRaWANVersion != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.LoRaWANVersion))
	}
	if m.LoRaWANPHYVersion != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.LoRaWANPHYVersion))
	}
	if len(m.FrequencyPlanID) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.FrequencyPlanID)))
		i += copy(dAtA[i:], m.FrequencyPlanID)
	}
	if len(m.Photos) > 0 {
		for _, s := range m.Photos {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.SupportsClassB {
		dAtA[i] = 0x30
		i++
		if m.SupportsClassB {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SupportsClassC {
		dAtA[i] = 0x38
		i++
		if m.SupportsClassC {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DefaultMACSettings != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.DefaultMACSettings.Size()))
		n5, err := m.DefaultMACSettings.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.MinFrequency != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintEndDevice(dAtA, i, m.MinFrequency)
	}
	if m.MaxFrequency != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintEndDevice(dAtA, i, m.MaxFrequency)
	}
	if m.ResetsFCnt {
		dAtA[i] = 0x58
		i++
		if m.ResetsFCnt {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SupportsJoin {
		dAtA[i] = 0x68
		i++
		if m.SupportsJoin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ResetsJoinNonces {
		dAtA[i] = 0x70
		i++
		if m.ResetsJoinNonces {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	dAtA[i] = 0x7a
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(m.DefaultFormatters.Size()))
	n6, err := m.DefaultFormatters.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	return i, nil
}

func (m *MACSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACSettings) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ClassBTimeout != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdDuration(*m.ClassBTimeout)))
		n7, err := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.ClassBTimeout, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.PingSlotPeriodicity != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.PingSlotPeriodicity.Size()))
		n8, err := m.PingSlotPeriodicity.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.PingSlotDataRateIndex != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.PingSlotDataRateIndex.Size()))
		n9, err := m.PingSlotDataRateIndex.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.PingSlotFrequency != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEndDevice(dAtA, i, m.PingSlotFrequency)
	}
	if m.ClassCTimeout != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdDuration(*m.ClassCTimeout)))
		n10, err := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.ClassCTimeout, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Rx1Delay != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.Rx1Delay.Size()))
		n11, err := m.Rx1Delay.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Rx1DataRateOffset != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.Rx1DataRateOffset.Size()))
		n12, err := m.Rx1DataRateOffset.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.Rx2DataRateIndex != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.Rx2DataRateIndex.Size()))
		n13, err := m.Rx2DataRateIndex.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.Rx2Frequency != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintEndDevice(dAtA, i, m.Rx2Frequency)
	}
	if len(m.FactoryPresetFrequencies) > 0 {
		dAtA15 := make([]byte, len(m.FactoryPresetFrequencies)*10)
		var j14 int
		for _, num := range m.FactoryPresetFrequencies {
			for num >= 1<<7 {
				dAtA15[j14] = uint8(num&0x7f | 0x80)
				num >>= 7
				j14++
			}
			dAtA15[j14] = uint8(num)
			j14++
		}
		dAtA[i] = 0x52
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(j14))
		i += copy(dAtA[i:], dAtA15[:j14])
	}
	if m.MaxDutyCycle != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.MaxDutyCycle.Size()))
		n16, err := m.MaxDutyCycle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.Supports32BitFCnt != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.Supports32BitFCnt.Size()))
		n17, err := m.Supports32BitFCnt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.UseADR != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.UseADR.Size()))
		n18, err := m.UseADR.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.ADRMargin != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.ADRMargin.Size()))
		n19, err := m.ADRMargin.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.ResetsFCnt != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.ResetsFCnt.Size()))
		n20, err := m.ResetsFCnt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.StatusTimePeriodicity != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdDuration(*m.StatusTimePeriodicity)))
		n21, err := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.StatusTimePeriodicity, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.StatusCountPeriodicity != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.StatusCountPeriodicity.Size()))
		n22, err := m.StatusCountPeriodicity.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.DesiredRx1Delay != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.DesiredRx1Delay.Size()))
		n23, err := m.DesiredRx1Delay.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.DesiredRx1DataRateOffset != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.DesiredRx1DataRateOffset.Size()))
		n24, err := m.DesiredRx1DataRateOffset.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if m.DesiredRx2DataRateIndex != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.DesiredRx2DataRateIndex.Size()))
		n25, err := m.DesiredRx2DataRateIndex.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if m.DesiredRx2Frequency != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndDevice(dAtA, i, m.DesiredRx2Frequency)
	}
	return i, nil
}

func (m *MACSettings_DataRateIndexValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACSettings_DataRateIndexValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *MACSettings_PingSlotPeriodValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACSettings_PingSlotPeriodValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *MACSettings_AggregatedDutyCycleValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACSettings_AggregatedDutyCycleValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *MACSettings_RxDelayValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACSettings_RxDelayValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *MACState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(m.CurrentParameters.Size()))
	n26, err := m.CurrentParameters.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n26
	dAtA[i] = 0x12
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(m.DesiredParameters.Size()))
	n27, err := m.DesiredParameters.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n27
	if m.DeviceClass != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.DeviceClass))
	}
	if m.LoRaWANVersion != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.LoRaWANVersion))
	}
	if m.LastConfirmedDownlinkAt != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastConfirmedDownlinkAt)))
		n28, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastConfirmedDownlinkAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	if m.LastDevStatusFCntUp != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.LastDevStatusFCntUp))
	}
	if m.PingSlotPeriodicity != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.PingSlotPeriodicity))
	}
	if m.PendingApplicationDownlink != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.PendingApplicationDownlink.Size()))
		n29, err := m.PendingApplicationDownlink.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	if len(m.QueuedResponses) > 0 {
		for _, msg := range m.QueuedResponses {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintEndDevice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PendingRequests) > 0 {
		for _, msg := range m.PendingRequests {
			dAtA[i] = 0x52
			i++
			i = encodeVarintEndDevice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.QueuedJoinAccept != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.QueuedJoinAccept.Size()))
		n30, err := m.QueuedJoinAccept.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if m.PendingJoinRequest != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.PendingJoinRequest.Size()))
		n31, err := m.PendingJoinRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	if m.RxWindowsAvailable {
		dAtA[i] = 0x68
		i++
		if m.RxWindowsAvailable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *MACState_JoinAccept) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACState_JoinAccept) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(m.Request.Size()))
	n32, err := m.Request.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n32
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(m.Keys.Size()))
	n33, err := m.Keys.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n33
	return i, nil
}

func (m *EndDevice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDevice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(m.EndDeviceIdentifiers.Size()))
	n34, err := m.EndDeviceIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n34
	dAtA[i] = 0x12
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)))
	n35, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n35
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)))
	n36, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n36
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.Attributes) > 0 {
		for k := range m.Attributes {
			dAtA[i] = 0x32
			i++
			v := m.Attributes[k]
			mapSize := 1 + len(k) + sovEndDevice(uint64(len(k))) + 1 + len(v) + sovEndDevice(uint64(len(v)))
			i = encodeVarintEndDevice(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintEndDevice(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintEndDevice(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.VersionIDs != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.VersionIDs.Size()))
		n37, err := m.VersionIDs.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	if len(m.ServiceProfileID) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.ServiceProfileID)))
		i += copy(dAtA[i:], m.ServiceProfileID)
	}
	if len(m.NetworkServerAddress) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.NetworkServerAddress)))
		i += copy(dAtA[i:], m.NetworkServerAddress)
	}
	if len(m.ApplicationServerAddress) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.ApplicationServerAddress)))
		i += copy(dAtA[i:], m.ApplicationServerAddress)
	}
	if len(m.JoinServerAddress) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.JoinServerAddress)))
		i += copy(dAtA[i:], m.JoinServerAddress)
	}
	if len(m.Locations) > 0 {
		for k := range m.Locations {
			dAtA[i] = 0x62
			i++
			v := m.Locations[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovEndDevice(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovEndDevice(uint64(len(k))) + msgSize
			i = encodeVarintEndDevice(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintEndDevice(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintEndDevice(dAtA, i, uint64(v.Size()))
				n38, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n38
			}
		}
	}
	if m.SupportsClassB {
		dAtA[i] = 0x68
		i++
		if m.SupportsClassB {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SupportsClassC {
		dAtA[i] = 0x70
		i++
		if m.SupportsClassC {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.LoRaWANVersion != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.LoRaWANVersion))
	}
	if m.LoRaWANPHYVersion != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.LoRaWANPHYVersion))
	}
	if len(m.FrequencyPlanID) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.FrequencyPlanID)))
		i += copy(dAtA[i:], m.FrequencyPlanID)
	}
	if m.MinFrequency != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndDevice(dAtA, i, m.MinFrequency)
	}
	if m.MaxFrequency != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndDevice(dAtA, i, m.MaxFrequency)
	}
	if m.SupportsJoin {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		if m.SupportsJoin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ResetsJoinNonces {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		if m.ResetsJoinNonces {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RootKeys != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.RootKeys.Size()))
		n39, err := m.RootKeys.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	if m.NetID != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.NetID.Size()))
		n40, err := m.NetID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	if m.MACSettings != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.MACSettings.Size()))
		n41, err := m.MACSettings.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	if m.MACState != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.MACState.Size()))
		n42, err := m.MACState.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	if m.Session != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.Session.Size()))
		n43, err := m.Session.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	if m.PendingSession != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.PendingSession.Size()))
		n44, err := m.PendingSession.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	if m.LastDevNonce != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.LastDevNonce))
	}
	if len(m.UsedDevNonces) > 0 {
		dAtA46 := make([]byte, len(m.UsedDevNonces)*10)
		var j45 int
		for _, num := range m.UsedDevNonces {
			for num >= 1<<7 {
				dAtA46[j45] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j45++
			}
			dAtA46[j45] = uint8(num)
			j45++
		}
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(j45))
		i += copy(dAtA[i:], dAtA46[:j45])
	}
	if m.LastJoinNonce != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.LastJoinNonce))
	}
	if m.LastRJCount0 != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.LastRJCount0))
	}
	if m.LastRJCount1 != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.LastRJCount1))
	}
	if m.LastDevStatusReceivedAt != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastDevStatusReceivedAt)))
		n47, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastDevStatusReceivedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	if m.PowerState != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.PowerState))
	}
	if m.BatteryPercentage != 0 {
		dAtA[i] = 0x9d
		i++
		dAtA[i] = 0x2
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], math.Float32bits(float32(m.BatteryPercentage)))
		i += 4
	}
	if m.DownlinkMargin != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.DownlinkMargin))
	}
	if len(m.RecentADRUplinks) > 0 {
		for _, msg := range m.RecentADRUplinks {
			dAtA[i] = 0xaa
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintEndDevice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RecentUplinks) > 0 {
		for _, msg := range m.RecentUplinks {
			dAtA[i] = 0xb2
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintEndDevice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RecentDownlinks) > 0 {
		for _, msg := range m.RecentDownlinks {
			dAtA[i] = 0xba
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintEndDevice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.QueuedApplicationDownlinks) > 0 {
		for _, msg := range m.QueuedApplicationDownlinks {
			dAtA[i] = 0xc2
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintEndDevice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Formatters != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.Formatters.Size()))
		n48, err := m.Formatters.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	if len(m.ProvisionerID) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.ProvisionerID)))
		i += copy(dAtA[i:], m.ProvisionerID)
	}
	if m.ProvisioningData != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.ProvisioningData.Size()))
		n49, err := m.ProvisioningData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n49
	}
	return i, nil
}

func (m *EndDevices) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDevices) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EndDevices) > 0 {
		for _, msg := range m.EndDevices {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEndDevice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CreateEndDeviceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateEndDeviceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(m.EndDevice.Size()))
	n50, err := m.EndDevice.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n50
	return i, nil
}

func (m *UpdateEndDeviceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateEndDeviceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(m.EndDevice.Size()))
	n51, err := m.EndDevice.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n51
	dAtA[i] = 0x12
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(m.FieldMask.Size()))
	n52, err := m.FieldMask.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n52
	return i, nil
}

func (m *GetEndDeviceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetEndDeviceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(m.EndDeviceIdentifiers.Size()))
	n53, err := m.EndDeviceIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n53
	dAtA[i] = 0x12
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(m.FieldMask.Size()))
	n54, err := m.FieldMask.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n54
	return i, nil
}

func (m *ListEndDevicesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListEndDevicesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(m.ApplicationIdentifiers.Size()))
	n55, err := m.ApplicationIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n55
	dAtA[i] = 0x12
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(m.FieldMask.Size()))
	n56, err := m.FieldMask.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n56
	if len(m.Order) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.Order)))
		i += copy(dAtA[i:], m.Order)
	}
	if m.Limit != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.Limit))
	}
	if m.Page != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.Page))
	}
	return i, nil
}

func (m *SetEndDeviceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetEndDeviceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(m.Device.Size()))
	n57, err := m.Device.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n57
	dAtA[i] = 0x12
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(m.FieldMask.Size()))
	n58, err := m.FieldMask.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n58
	return i, nil
}

func encodeVarintEndDevice(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedSession(r randyEndDevice, easy bool) *Session {
	this := &Session{}
	v1 := go_thethings_network_lorawan_stack_pkg_types.NewPopulatedDevAddr(r)
	this.DevAddr = *v1
	v2 := NewPopulatedSessionKeys(r, easy)
	this.SessionKeys = *v2
	this.LastFCntUp = r.Uint32()
	this.LastNFCntDown = r.Uint32()
	this.LastAFCntDown = r.Uint32()
	this.LastConfFCntDown = r.Uint32()
	v3 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.StartedAt = *v3
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEndDeviceBrand(r randyEndDevice, easy bool) *EndDeviceBrand {
	this := &EndDeviceBrand{}
	this.ID = randStringEndDevice(r)
	this.Name = randStringEndDevice(r)
	this.URL = randStringEndDevice(r)
	v4 := r.Intn(10)
	this.Logos = make([]string, v4)
	for i := 0; i < v4; i++ {
		this.Logos[i] = randStringEndDevice(r)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEndDeviceModel(r randyEndDevice, easy bool) *EndDeviceModel {
	this := &EndDeviceModel{}
	this.BrandID = randStringEndDevice(r)
	this.ID = randStringEndDevice(r)
	this.Name = randStringEndDevice(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEndDeviceVersionIdentifiers(r randyEndDevice, easy bool) *EndDeviceVersionIdentifiers {
	this := &EndDeviceVersionIdentifiers{}
	this.BrandID = randStringEndDevice(r)
	this.ModelID = randStringEndDevice(r)
	this.HardwareVersion = randStringEndDevice(r)
	this.FirmwareVersion = randStringEndDevice(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACSettings(r randyEndDevice, easy bool) *MACSettings {
	this := &MACSettings{}
	if r.Intn(10) != 0 {
		this.ClassBTimeout = github_com_gogo_protobuf_types.NewPopulatedStdDuration(r, easy)
	}
	if r.Intn(10) != 0 {
		this.PingSlotPeriodicity = NewPopulatedMACSettings_PingSlotPeriodValue(r, easy)
	}
	if r.Intn(10) != 0 {
		this.PingSlotDataRateIndex = NewPopulatedMACSettings_DataRateIndexValue(r, easy)
	}
	this.PingSlotFrequency = uint64(r.Uint32())
	if r.Intn(10) != 0 {
		this.ClassCTimeout = github_com_gogo_protobuf_types.NewPopulatedStdDuration(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Rx1Delay = NewPopulatedMACSettings_RxDelayValue(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Rx1DataRateOffset = types.NewPopulatedUInt32Value(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Rx2DataRateIndex = NewPopulatedMACSettings_DataRateIndexValue(r, easy)
	}
	this.Rx2Frequency = uint64(r.Uint32())
	v5 := r.Intn(10)
	this.FactoryPresetFrequencies = make([]uint64, v5)
	for i := 0; i < v5; i++ {
		this.FactoryPresetFrequencies[i] = uint64(r.Uint32())
	}
	if r.Intn(10) != 0 {
		this.MaxDutyCycle = NewPopulatedMACSettings_AggregatedDutyCycleValue(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Supports32BitFCnt = types.NewPopulatedBoolValue(r, easy)
	}
	if r.Intn(10) != 0 {
		this.UseADR = types.NewPopulatedBoolValue(r, easy)
	}
	if r.Intn(10) != 0 {
		this.ADRMargin = types.NewPopulatedFloatValue(r, easy)
	}
	if r.Intn(10) != 0 {
		this.ResetsFCnt = types.NewPopulatedBoolValue(r, easy)
	}
	if r.Intn(10) != 0 {
		this.StatusTimePeriodicity = github_com_gogo_protobuf_types.NewPopulatedStdDuration(r, easy)
	}
	if r.Intn(10) != 0 {
		this.StatusCountPeriodicity = types.NewPopulatedUInt32Value(r, easy)
	}
	if r.Intn(10) != 0 {
		this.DesiredRx1Delay = NewPopulatedMACSettings_RxDelayValue(r, easy)
	}
	if r.Intn(10) != 0 {
		this.DesiredRx1DataRateOffset = types.NewPopulatedUInt32Value(r, easy)
	}
	if r.Intn(10) != 0 {
		this.DesiredRx2DataRateIndex = NewPopulatedMACSettings_DataRateIndexValue(r, easy)
	}
	this.DesiredRx2Frequency = uint64(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACSettings_DataRateIndexValue(r randyEndDevice, easy bool) *MACSettings_DataRateIndexValue {
	this := &MACSettings_DataRateIndexValue{}
	this.Value = DataRateIndex([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}[r.Intn(16)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACSettings_PingSlotPeriodValue(r randyEndDevice, easy bool) *MACSettings_PingSlotPeriodValue {
	this := &MACSettings_PingSlotPeriodValue{}
	this.Value = PingSlotPeriod([]int32{0, 1, 2, 3, 4, 5, 6, 7}[r.Intn(8)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACSettings_AggregatedDutyCycleValue(r randyEndDevice, easy bool) *MACSettings_AggregatedDutyCycleValue {
	this := &MACSettings_AggregatedDutyCycleValue{}
	this.Value = AggregatedDutyCycle([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}[r.Intn(16)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACSettings_RxDelayValue(r randyEndDevice, easy bool) *MACSettings_RxDelayValue {
	this := &MACSettings_RxDelayValue{}
	this.Value = RxDelay([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}[r.Intn(16)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACState_JoinAccept(r randyEndDevice, easy bool) *MACState_JoinAccept {
	this := &MACState_JoinAccept{}
	v6 := r.Intn(100)
	this.Payload = make([]byte, v6)
	for i := 0; i < v6; i++ {
		this.Payload[i] = byte(r.Intn(256))
	}
	v7 := NewPopulatedJoinRequest(r, easy)
	this.Request = *v7
	v8 := NewPopulatedSessionKeys(r, easy)
	this.Keys = *v8
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEndDevices(r randyEndDevice, easy bool) *EndDevices {
	this := &EndDevices{}
	if r.Intn(10) != 0 {
		v9 := r.Intn(5)
		this.EndDevices = make([]*EndDevice, v9)
		for i := 0; i < v9; i++ {
			this.EndDevices[i] = NewPopulatedEndDevice(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateEndDeviceRequest(r randyEndDevice, easy bool) *CreateEndDeviceRequest {
	this := &CreateEndDeviceRequest{}
	v10 := NewPopulatedEndDevice(r, easy)
	this.EndDevice = *v10
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateEndDeviceRequest(r randyEndDevice, easy bool) *UpdateEndDeviceRequest {
	this := &UpdateEndDeviceRequest{}
	v11 := NewPopulatedEndDevice(r, easy)
	this.EndDevice = *v11
	v12 := types.NewPopulatedFieldMask(r, easy)
	this.FieldMask = *v12
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetEndDeviceRequest(r randyEndDevice, easy bool) *GetEndDeviceRequest {
	this := &GetEndDeviceRequest{}
	v13 := NewPopulatedEndDeviceIdentifiers(r, easy)
	this.EndDeviceIdentifiers = *v13
	v14 := types.NewPopulatedFieldMask(r, easy)
	this.FieldMask = *v14
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListEndDevicesRequest(r randyEndDevice, easy bool) *ListEndDevicesRequest {
	this := &ListEndDevicesRequest{}
	v15 := NewPopulatedApplicationIdentifiers(r, easy)
	this.ApplicationIdentifiers = *v15
	v16 := types.NewPopulatedFieldMask(r, easy)
	this.FieldMask = *v16
	this.Order = randStringEndDevice(r)
	this.Limit = r.Uint32()
	this.Page = r.Uint32()
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSetEndDeviceRequest(r randyEndDevice, easy bool) *SetEndDeviceRequest {
	this := &SetEndDeviceRequest{}
	v17 := NewPopulatedEndDevice(r, easy)
	this.Device = *v17
	v18 := types.NewPopulatedFieldMask(r, easy)
	this.FieldMask = *v18
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyEndDevice interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneEndDevice(r randyEndDevice) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringEndDevice(r randyEndDevice) string {
	v19 := r.Intn(100)
	tmps := make([]rune, v19)
	for i := 0; i < v19; i++ {
		tmps[i] = randUTF8RuneEndDevice(r)
	}
	return string(tmps)
}
func randUnrecognizedEndDevice(r randyEndDevice, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldEndDevice(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldEndDevice(dAtA []byte, r randyEndDevice, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateEndDevice(dAtA, uint64(key))
		v20 := r.Int63()
		if r.Intn(2) == 0 {
			v20 *= -1
		}
		dAtA = encodeVarintPopulateEndDevice(dAtA, uint64(v20))
	case 1:
		dAtA = encodeVarintPopulateEndDevice(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateEndDevice(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateEndDevice(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateEndDevice(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateEndDevice(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Session) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DevAddr.Size()
	n += 1 + l + sovEndDevice(uint64(l))
	l = m.SessionKeys.Size()
	n += 1 + l + sovEndDevice(uint64(l))
	if m.LastFCntUp != 0 {
		n += 1 + sovEndDevice(uint64(m.LastFCntUp))
	}
	if m.LastNFCntDown != 0 {
		n += 1 + sovEndDevice(uint64(m.LastNFCntDown))
	}
	if m.LastAFCntDown != 0 {
		n += 1 + sovEndDevice(uint64(m.LastAFCntDown))
	}
	if m.LastConfFCntDown != 0 {
		n += 1 + sovEndDevice(uint64(m.LastConfFCntDown))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartedAt)
	n += 1 + l + sovEndDevice(uint64(l))
	return n
}

func (m *MACParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxEIRP != 0 {
		n += 5
	}
	if m.UplinkDwellTime {
		n += 2
	}
	if m.DownlinkDwellTime {
		n += 2
	}
	if m.ADRDataRateIndex != 0 {
		n += 1 + sovEndDevice(uint64(m.ADRDataRateIndex))
	}
	if m.ADRTxPowerIndex != 0 {
		n += 1 + sovEndDevice(uint64(m.ADRTxPowerIndex))
	}
	if m.ADRNbTrans != 0 {
		n += 1 + sovEndDevice(uint64(m.ADRNbTrans))
	}
	if m.ADRAckLimit != 0 {
		n += 1 + sovEndDevice(uint64(m.ADRAckLimit))
	}
	if m.ADRAckDelay != 0 {
		n += 1 + sovEndDevice(uint64(m.ADRAckDelay))
	}
	if m.Rx1Delay != 0 {
		n += 1 + sovEndDevice(uint64(m.Rx1Delay))
	}
	if m.Rx1DataRateOffset != 0 {
		n += 1 + sovEndDevice(uint64(m.Rx1DataRateOffset))
	}
	if m.Rx2DataRateIndex != 0 {
		n += 1 + sovEndDevice(uint64(m.Rx2DataRateIndex))
	}
	if m.Rx2Frequency != 0 {
		n += 1 + sovEndDevice(m.Rx2Frequency)
	}
	if m.MaxDutyCycle != 0 {
		n += 1 + sovEndDevice(uint64(m.MaxDutyCycle))
	}
	if m.RejoinTimePeriodicity != 0 {
		n += 1 + sovEndDevice(uint64(m.RejoinTimePeriodicity))
	}
	if m.RejoinCountPeriodicity != 0 {
		n += 1 + sovEndDevice(uint64(m.RejoinCountPeriodicity))
	}
	if m.PingSlotFrequency != 0 {
		n += 2 + sovEndDevice(m.PingSlotFrequency)
	}
	if m.PingSlotDataRateIndex != 0 {
		n += 2 + sovEndDevice(uint64(m.PingSlotDataRateIndex))
	}
	if m.BeaconFrequency != 0 {
		n += 2 + sovEndDevice(m.BeaconFrequency)
	}
	if len(m.Channels) > 0 {
		for _, e := range m.Channels {
			l = e.Size()
			n += 2 + l + sovEndDevice(uint64(l))
		}
	}
	return n
}

func (m *MACParameters_Channel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UplinkFrequency != 0 {
		n += 1 + sovEndDevice(m.UplinkFrequency)
	}
	if m.DownlinkFrequency != 0 {
		n += 1 + sovEndDevice(m.DownlinkFrequency)
	}
	if m.MinDataRateIndex != 0 {
		n += 1 + sovEndDevice(uint64(m.MinDataRateIndex))
	}
	if m.MaxDataRateIndex != 0 {
		n += 1 + sovEndDevice(uint64(m.MaxDataRateIndex))
	}
	if m.EnableUplink {
		n += 2
	}
	return n
}

func (m *EndDeviceBrand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if len(m.Logos) > 0 {
		for _, s := range m.Logos {
			l = len(s)
			n += 1 + l + sovEndDevice(uint64(l))
		}
	}
	return n
}

func (m *EndDeviceModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BrandID)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	return n
}

func (m *EndDeviceVersionIdentifiers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BrandID)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	l = len(m.ModelID)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	l = len(m.HardwareVersion)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	l = len(m.FirmwareVersion)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	return n
}

func (m *EndDeviceVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EndDeviceVersionIdentifiers.Size()
	n += 1 + l + sovEndDevice(uint64(l))
	if m.LoRaWANVersion != 0 {
		n += 1 + sovEndDevice(uint64(m.LoRaWANVersion))
	}
	if m.LoRaWANPHYVersion != 0 {
		n += 1 + sovEndDevice(uint64(m.LoRaWANPHYVersion))
	}
	l = len(m.FrequencyPlanID)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if len(m.Photos) > 0 {
		for _, s := range m.Photos {
			l = len(s)
			n += 1 + l + sovEndDevice(uint64(l))
		}
	}
	if m.SupportsClassB {
		n += 2
	}
	if m.SupportsClassC {
		n += 2
	}
	if m.DefaultMACSettings != nil {
		l = m.DefaultMACSettings.Size()
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if m.MinFrequency != 0 {
		n += 1 + sovEndDevice(m.MinFrequency)
	}
	if m.MaxFrequency != 0 {
		n += 1 + sovEndDevice(m.MaxFrequency)
	}
	if m.ResetsFCnt {
		n += 2
	}
	if m.SupportsJoin {
		n += 2
	}
	if m.ResetsJoinNonces {
		n += 2
	}
	l = m.DefaultFormatters.Size()
	n += 1 + l + sovEndDevice(uint64(l))
	return n
}

func (m *MACSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClassBTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.ClassBTimeout)
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if m.PingSlotPeriodicity != nil {
		l = m.PingSlotPeriodicity.Size()
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if m.PingSlotDataRateIndex != nil {
		l = m.PingSlotDataRateIndex.Size()
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if m.PingSlotFrequency != 0 {
		n += 1 + sovEndDevice(m.PingSlotFrequency)
	}
	if m.ClassCTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.ClassCTimeout)
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if m.Rx1Delay != nil {
		l = m.Rx1Delay.Size()
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if m.Rx1DataRateOffset != nil {
		l = m.Rx1DataRateOffset.Size()
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if m.Rx2DataRateIndex != nil {
		l = m.Rx2DataRateIndex.Size()
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if m.Rx2Frequency != 0 {
		n += 1 + sovEndDevice(m.Rx2Frequency)
	}
	if len(m.FactoryPresetFrequencies) > 0 {
		l = 0
		for _, e := range m.FactoryPresetFrequencies {
			l += sovEndDevice(e)
		}
		n += 1 + sovEndDevice(uint64(l)) + l
	}
	if m.MaxDutyCycle != nil {
		l = m.MaxDutyCycle.Size()
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if m.Supports32BitFCnt != nil {
		l = m.Supports32BitFCnt.Size()
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if m.UseADR != nil {
		l = m.UseADR.Size()
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if m.ADRMargin != nil {
		l = m.ADRMargin.Size()
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if m.ResetsFCnt != nil {
		l = m.ResetsFCnt.Size()
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if m.StatusTimePeriodicity != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.StatusTimePeriodicity)
		n += 2 + l + sovEndDevice(uint64(l))
	}
	if m.StatusCountPeriodicity != nil {
		l = m.StatusCountPeriodicity.Size()
		n += 2 + l + sovEndDevice(uint64(l))
	}
	if m.DesiredRx1Delay != nil {
		l = m.DesiredRx1Delay.Size()
		n += 2 + l + sovEndDevice(uint64(l))
	}
	if m.DesiredRx1DataRateOffset != nil {
		l = m.DesiredRx1DataRateOffset.Size()
		n += 2 + l + sovEndDevice(uint64(l))
	}
	if m.DesiredRx2DataRateIndex != nil {
		l = m.DesiredRx2DataRateIndex.Size()
		n += 2 + l + sovEndDevice(uint64(l))
	}
	if m.DesiredRx2Frequency != 0 {
		n += 2 + sovEndDevice(m.DesiredRx2Frequency)
	}
	return n
}

func (m *MACSettings_DataRateIndexValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovEndDevice(uint64(m.Value))
	}
	return n
}

func (m *MACSettings_PingSlotPeriodValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovEndDevice(uint64(m.Value))
	}
	return n
}

func (m *MACSettings_AggregatedDutyCycleValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovEndDevice(uint64(m.Value))
	}
	return n
}

func (m *MACSettings_RxDelayValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovEndDevice(uint64(m.Value))
	}
	return n
}

func (m *MACState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CurrentParameters.Size()
	n += 1 + l + sovEndDevice(uint64(l))
	l = m.DesiredParameters.Size()
	n += 1 + l + sovEndDevice(uint64(l))
	if m.DeviceClass != 0 {
		n += 1 + sovEndDevice(uint64(m.DeviceClass))
	}
	if m.LoRaWANVersion != 0 {
		n += 1 + sovEndDevice(uint64(m.LoRaWANVersion))
	}
	if m.LastConfirmedDownlinkAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastConfirmedDownlinkAt)
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if m.LastDevStatusFCntUp != 0 {
		n += 1 + sovEndDevice(uint64(m.LastDevStatusFCntUp))
	}
	if m.PingSlotPeriodicity != 0 {
		n += 1 + sovEndDevice(uint64(m.PingSlotPeriodicity))
	}
	if m.PendingApplicationDownlink != nil {
		l = m.PendingApplicationDownlink.Size()
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if len(m.QueuedResponses) > 0 {
		for _, e := range m.QueuedResponses {
			l = e.Size()
			n += 1 + l + sovEndDevice(uint64(l))
		}
	}
	if len(m.PendingRequests) > 0 {
		for _, e := range m.PendingRequests {
			l = e.Size()
			n += 1 + l + sovEndDevice(uint64(l))
		}
	}
	if m.QueuedJoinAccept != nil {
		l = m.QueuedJoinAccept.Size()
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if m.PendingJoinRequest != nil {
		l = m.PendingJoinRequest.Size()
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if m.RxWindowsAvailable {
		n += 2
	}
	return n
}

func (m *MACState_JoinAccept) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	l = m.Request.Size()
	n += 1 + l + sovEndDevice(uint64(l))
	l = m.Keys.Size()
	n += 1 + l + sovEndDevice(uint64(l))
	return n
}

func (m *EndDevice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EndDeviceIdentifiers.Size()
	n += 1 + l + sovEndDevice(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovEndDevice(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)
	n += 1 + l + sovEndDevice(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if len(m.Attributes) > 0 {
		for k, v := range m.Attributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovEndDevice(uint64(len(k))) + 1 + len(v) + sovEndDevice(uint64(len(v)))
			n += mapEntrySize + 1 + sovEndDevice(uint64(mapEntrySize))
		}
	}
	if m.VersionIDs != nil {
		l = m.VersionIDs.Size()
		n += 1 + l + sovEndDevice(uint64(l))
	}
	l = len(m.ServiceProfileID)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	l = len(m.NetworkServerAddress)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	l = len(m.ApplicationServerAddress)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	l = len(m.JoinServerAddress)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if len(m.Locations) > 0 {
		for k, v := range m.Locations {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovEndDevice(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovEndDevice(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovEndDevice(uint64(mapEntrySize))
		}
	}
	if m.SupportsClassB {
		n += 2
	}
	if m.SupportsClassC {
		n += 2
	}
	if m.LoRaWANVersion != 0 {
		n += 1 + sovEndDevice(uint64(m.LoRaWANVersion))
	}
	if m.LoRaWANPHYVersion != 0 {
		n += 2 + sovEndDevice(uint64(m.LoRaWANPHYVersion))
	}
	l = len(m.FrequencyPlanID)
	if l > 0 {
		n += 2 + l + sovEndDevice(uint64(l))
	}
	if m.MinFrequency != 0 {
		n += 2 + sovEndDevice(m.MinFrequency)
	}
	if m.MaxFrequency != 0 {
		n += 2 + sovEndDevice(m.MaxFrequency)
	}
	if m.SupportsJoin {
		n += 3
	}
	if m.ResetsJoinNonces {
		n += 3
	}
	if m.RootKeys != nil {
		l = m.RootKeys.Size()
		n += 2 + l + sovEndDevice(uint64(l))
	}
	if m.NetID != nil {
		l = m.NetID.Size()
		n += 2 + l + sovEndDevice(uint64(l))
	}
	if m.MACSettings != nil {
		l = m.MACSettings.Size()
		n += 2 + l + sovEndDevice(uint64(l))
	}
	if m.MACState != nil {
		l = m.MACState.Size()
		n += 2 + l + sovEndDevice(uint64(l))
	}
	if m.Session != nil {
		l = m.Session.Size()
		n += 2 + l + sovEndDevice(uint64(l))
	}
	if m.PendingSession != nil {
		l = m.PendingSession.Size()
		n += 2 + l + sovEndDevice(uint64(l))
	}
	if m.LastDevNonce != 0 {
		n += 2 + sovEndDevice(uint64(m.LastDevNonce))
	}
	if len(m.UsedDevNonces) > 0 {
		l = 0
		for _, e := range m.UsedDevNonces {
			l += sovEndDevice(uint64(e))
		}
		n += 2 + sovEndDevice(uint64(l)) + l
	}
	if m.LastJoinNonce != 0 {
		n += 2 + sovEndDevice(uint64(m.LastJoinNonce))
	}
	if m.LastRJCount0 != 0 {
		n += 2 + sovEndDevice(uint64(m.LastRJCount0))
	}
	if m.LastRJCount1 != 0 {
		n += 2 + sovEndDevice(uint64(m.LastRJCount1))
	}
	if m.LastDevStatusReceivedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastDevStatusReceivedAt)
		n += 2 + l + sovEndDevice(uint64(l))
	}
	if m.PowerState != 0 {
		n += 2 + sovEndDevice(uint64(m.PowerState))
	}
	if m.BatteryPercentage != 0 {
		n += 6
	}
	if m.DownlinkMargin != 0 {
		n += 2 + sovEndDevice(uint64(m.DownlinkMargin))
	}
	if len(m.RecentADRUplinks) > 0 {
		for _, e := range m.RecentADRUplinks {
			l = e.Size()
			n += 2 + l + sovEndDevice(uint64(l))
		}
	}
	if len(m.RecentUplinks) > 0 {
		for _, e := range m.RecentUplinks {
			l = e.Size()
			n += 2 + l + sovEndDevice(uint64(l))
		}
	}
	if len(m.RecentDownlinks) > 0 {
		for _, e := range m.RecentDownlinks {
			l = e.Size()
			n += 2 + l + sovEndDevice(uint64(l))
		}
	}
	if len(m.QueuedApplicationDownlinks) > 0 {
		for _, e := range m.QueuedApplicationDownlinks {
			l = e.Size()
			n += 2 + l + sovEndDevice(uint64(l))
		}
	}
	if m.Formatters != nil {
		l = m.Formatters.Size()
		n += 2 + l + sovEndDevice(uint64(l))
	}
	l = len(m.ProvisionerID)
	if l > 0 {
		n += 2 + l + sovEndDevice(uint64(l))
	}
	if m.ProvisioningData != nil {
		l = m.ProvisioningData.Size()
		n += 2 + l + sovEndDevice(uint64(l))
	}
	return n
}

func (m *EndDevices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EndDevices) > 0 {
		for _, e := range m.EndDevices {
			l = e.Size()
			n += 1 + l + sovEndDevice(uint64(l))
		}
	}
	return n
}

func (m *CreateEndDeviceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EndDevice.Size()
	n += 1 + l + sovEndDevice(uint64(l))
	return n
}

func (m *UpdateEndDeviceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EndDevice.Size()
	n += 1 + l + sovEndDevice(uint64(l))
	l = m.FieldMask.Size()
	n += 1 + l + sovEndDevice(uint64(l))
	return n
}

func (m *GetEndDeviceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EndDeviceIdentifiers.Size()
	n += 1 + l + sovEndDevice(uint64(l))
	l = m.FieldMask.Size()
	n += 1 + l + sovEndDevice(uint64(l))
	return n
}

func (m *ListEndDevicesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ApplicationIdentifiers.Size()
	n += 1 + l + sovEndDevice(uint64(l))
	l = m.FieldMask.Size()
	n += 1 + l + sovEndDevice(uint64(l))
	l = len(m.Order)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovEndDevice(uint64(m.Limit))
	}
	if m.Page != 0 {
		n += 1 + sovEndDevice(uint64(m.Page))
	}
	return n
}

func (m *SetEndDeviceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Device.Size()
	n += 1 + l + sovEndDevice(uint64(l))
	l = m.FieldMask.Size()
	n += 1 + l + sovEndDevice(uint64(l))
	return n
}

func sovEndDevice(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEndDevice(x uint64) (n int) {
	return sovEndDevice((x << 1) ^ uint64((int64(x) >> 63)))
}
func (this *Session) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Session{`,
		`DevAddr:` + fmt.Sprintf("%v", this.DevAddr) + `,`,
		`SessionKeys:` + strings.Replace(strings.Replace(this.SessionKeys.String(), "SessionKeys", "SessionKeys", 1), `&`, ``, 1) + `,`,
		`LastFCntUp:` + fmt.Sprintf("%v", this.LastFCntUp) + `,`,
		`LastNFCntDown:` + fmt.Sprintf("%v", this.LastNFCntDown) + `,`,
		`LastAFCntDown:` + fmt.Sprintf("%v", this.LastAFCntDown) + `,`,
		`LastConfFCntDown:` + fmt.Sprintf("%v", this.LastConfFCntDown) + `,`,
		`StartedAt:` + strings.Replace(strings.Replace(this.StartedAt.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACParameters{`,
		`MaxEIRP:` + fmt.Sprintf("%v", this.MaxEIRP) + `,`,
		`UplinkDwellTime:` + fmt.Sprintf("%v", this.UplinkDwellTime) + `,`,
		`DownlinkDwellTime:` + fmt.Sprintf("%v", this.DownlinkDwellTime) + `,`,
		`ADRDataRateIndex:` + fmt.Sprintf("%v", this.ADRDataRateIndex) + `,`,
		`ADRTxPowerIndex:` + fmt.Sprintf("%v", this.ADRTxPowerIndex) + `,`,
		`ADRNbTrans:` + fmt.Sprintf("%v", this.ADRNbTrans) + `,`,
		`ADRAckLimit:` + fmt.Sprintf("%v", this.ADRAckLimit) + `,`,
		`ADRAckDelay:` + fmt.Sprintf("%v", this.ADRAckDelay) + `,`,
		`Rx1Delay:` + fmt.Sprintf("%v", this.Rx1Delay) + `,`,
		`Rx1DataRateOffset:` + fmt.Sprintf("%v", this.Rx1DataRateOffset) + `,`,
		`Rx2DataRateIndex:` + fmt.Sprintf("%v", this.Rx2DataRateIndex) + `,`,
		`Rx2Frequency:` + fmt.Sprintf("%v", this.Rx2Frequency) + `,`,
		`MaxDutyCycle:` + fmt.Sprintf("%v", this.MaxDutyCycle) + `,`,
		`RejoinTimePeriodicity:` + fmt.Sprintf("%v", this.RejoinTimePeriodicity) + `,`,
		`RejoinCountPeriodicity:` + fmt.Sprintf("%v", this.RejoinCountPeriodicity) + `,`,
		`PingSlotFrequency:` + fmt.Sprintf("%v", this.PingSlotFrequency) + `,`,
		`PingSlotDataRateIndex:` + fmt.Sprintf("%v", this.PingSlotDataRateIndex) + `,`,
		`BeaconFrequency:` + fmt.Sprintf("%v", this.BeaconFrequency) + `,`,
		`Channels:` + strings.Replace(fmt.Sprintf("%v", this.Channels), "MACParameters_Channel", "MACParameters_Channel", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACParameters_Channel) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACParameters_Channel{`,
		`UplinkFrequency:` + fmt.Sprintf("%v", this.UplinkFrequency) + `,`,
		`DownlinkFrequency:` + fmt.Sprintf("%v", this.DownlinkFrequency) + `,`,
		`MinDataRateIndex:` + fmt.Sprintf("%v", this.MinDataRateIndex) + `,`,
		`MaxDataRateIndex:` + fmt.Sprintf("%v", this.MaxDataRateIndex) + `,`,
		`EnableUplink:` + fmt.Sprintf("%v", this.EnableUplink) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndDeviceBrand) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndDeviceBrand{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`URL:` + fmt.Sprintf("%v", this.URL) + `,`,
		`Logos:` + fmt.Sprintf("%v", this.Logos) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndDeviceModel) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndDeviceModel{`,
		`BrandID:` + fmt.Sprintf("%v", this.BrandID) + `,`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndDeviceVersionIdentifiers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndDeviceVersionIdentifiers{`,
		`BrandID:` + fmt.Sprintf("%v", this.BrandID) + `,`,
		`ModelID:` + fmt.Sprintf("%v", this.ModelID) + `,`,
		`HardwareVersion:` + fmt.Sprintf("%v", this.HardwareVersion) + `,`,
		`FirmwareVersion:` + fmt.Sprintf("%v", this.FirmwareVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndDeviceVersion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndDeviceVersion{`,
		`EndDeviceVersionIdentifiers:` + strings.Replace(strings.Replace(this.EndDeviceVersionIdentifiers.String(), "EndDeviceVersionIdentifiers", "EndDeviceVersionIdentifiers", 1), `&`, ``, 1) + `,`,
		`LoRaWANVersion:` + fmt.Sprintf("%v", this.LoRaWANVersion) + `,`,
		`LoRaWANPHYVersion:` + fmt.Sprintf("%v", this.LoRaWANPHYVersion) + `,`,
		`FrequencyPlanID:` + fmt.Sprintf("%v", this.FrequencyPlanID) + `,`,
		`Photos:` + fmt.Sprintf("%v", this.Photos) + `,`,
		`SupportsClassB:` + fmt.Sprintf("%v", this.SupportsClassB) + `,`,
		`SupportsClassC:` + fmt.Sprintf("%v", this.SupportsClassC) + `,`,
		`DefaultMACSettings:` + strings.Replace(fmt.Sprintf("%v", this.DefaultMACSettings), "MACSettings", "MACSettings", 1) + `,`,
		`MinFrequency:` + fmt.Sprintf("%v", this.MinFrequency) + `,`,
		`MaxFrequency:` + fmt.Sprintf("%v", this.MaxFrequency) + `,`,
		`ResetsFCnt:` + fmt.Sprintf("%v", this.ResetsFCnt) + `,`,
		`SupportsJoin:` + fmt.Sprintf("%v", this.SupportsJoin) + `,`,
		`ResetsJoinNonces:` + fmt.Sprintf("%v", this.ResetsJoinNonces) + `,`,
		`DefaultFormatters:` + strings.Replace(strings.Replace(this.DefaultFormatters.String(), "MessagePayloadFormatters", "MessagePayloadFormatters", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACSettings{`,
		`ClassBTimeout:` + strings.Replace(fmt.Sprintf("%v", this.ClassBTimeout), "Duration", "types.Duration", 1) + `,`,
		`PingSlotPeriodicity:` + strings.Replace(fmt.Sprintf("%v", this.PingSlotPeriodicity), "MACSettings_PingSlotPeriodValue", "MACSettings_PingSlotPeriodValue", 1) + `,`,
		`PingSlotDataRateIndex:` + strings.Replace(fmt.Sprintf("%v", this.PingSlotDataRateIndex), "MACSettings_DataRateIndexValue", "MACSettings_DataRateIndexValue", 1) + `,`,
		`PingSlotFrequency:` + fmt.Sprintf("%v", this.PingSlotFrequency) + `,`,
		`ClassCTimeout:` + strings.Replace(fmt.Sprintf("%v", this.ClassCTimeout), "Duration", "types.Duration", 1) + `,`,
		`Rx1Delay:` + strings.Replace(fmt.Sprintf("%v", this.Rx1Delay), "MACSettings_RxDelayValue", "MACSettings_RxDelayValue", 1) + `,`,
		`Rx1DataRateOffset:` + strings.Replace(fmt.Sprintf("%v", this.Rx1DataRateOffset), "UInt32Value", "types.UInt32Value", 1) + `,`,
		`Rx2DataRateIndex:` + strings.Replace(fmt.Sprintf("%v", this.Rx2DataRateIndex), "MACSettings_DataRateIndexValue", "MACSettings_DataRateIndexValue", 1) + `,`,
		`Rx2Frequency:` + fmt.Sprintf("%v", this.Rx2Frequency) + `,`,
		`FactoryPresetFrequencies:` + fmt.Sprintf("%v", this.FactoryPresetFrequencies) + `,`,
		`MaxDutyCycle:` + strings.Replace(fmt.Sprintf("%v", this.MaxDutyCycle), "MACSettings_AggregatedDutyCycleValue", "MACSettings_AggregatedDutyCycleValue", 1) + `,`,
		`Supports32BitFCnt:` + strings.Replace(fmt.Sprintf("%v", this.Supports32BitFCnt), "BoolValue", "types.BoolValue", 1) + `,`,
		`UseADR:` + strings.Replace(fmt.Sprintf("%v", this.UseADR), "BoolValue", "types.BoolValue", 1) + `,`,
		`ADRMargin:` + strings.Replace(fmt.Sprintf("%v", this.ADRMargin), "FloatValue", "types.FloatValue", 1) + `,`,
		`ResetsFCnt:` + strings.Replace(fmt.Sprintf("%v", this.ResetsFCnt), "BoolValue", "types.BoolValue", 1) + `,`,
		`StatusTimePeriodicity:` + strings.Replace(fmt.Sprintf("%v", this.StatusTimePeriodicity), "Duration", "types.Duration", 1) + `,`,
		`StatusCountPeriodicity:` + strings.Replace(fmt.Sprintf("%v", this.StatusCountPeriodicity), "UInt32Value", "types.UInt32Value", 1) + `,`,
		`DesiredRx1Delay:` + strings.Replace(fmt.Sprintf("%v", this.DesiredRx1Delay), "MACSettings_RxDelayValue", "MACSettings_RxDelayValue", 1) + `,`,
		`DesiredRx1DataRateOffset:` + strings.Replace(fmt.Sprintf("%v", this.DesiredRx1DataRateOffset), "UInt32Value", "types.UInt32Value", 1) + `,`,
		`DesiredRx2DataRateIndex:` + strings.Replace(fmt.Sprintf("%v", this.DesiredRx2DataRateIndex), "MACSettings_DataRateIndexValue", "MACSettings_DataRateIndexValue", 1) + `,`,
		`DesiredRx2Frequency:` + fmt.Sprintf("%v", this.DesiredRx2Frequency) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACSettings_DataRateIndexValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACSettings_DataRateIndexValue{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACSettings_PingSlotPeriodValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACSettings_PingSlotPeriodValue{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACSettings_AggregatedDutyCycleValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACSettings_AggregatedDutyCycleValue{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACSettings_RxDelayValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACSettings_RxDelayValue{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACState{`,
		`CurrentParameters:` + strings.Replace(strings.Replace(this.CurrentParameters.String(), "MACParameters", "MACParameters", 1), `&`, ``, 1) + `,`,
		`DesiredParameters:` + strings.Replace(strings.Replace(this.DesiredParameters.String(), "MACParameters", "MACParameters", 1), `&`, ``, 1) + `,`,
		`DeviceClass:` + fmt.Sprintf("%v", this.DeviceClass) + `,`,
		`LoRaWANVersion:` + fmt.Sprintf("%v", this.LoRaWANVersion) + `,`,
		`LastConfirmedDownlinkAt:` + strings.Replace(fmt.Sprintf("%v", this.LastConfirmedDownlinkAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`LastDevStatusFCntUp:` + fmt.Sprintf("%v", this.LastDevStatusFCntUp) + `,`,
		`PingSlotPeriodicity:` + fmt.Sprintf("%v", this.PingSlotPeriodicity) + `,`,
		`PendingApplicationDownlink:` + strings.Replace(fmt.Sprintf("%v", this.PendingApplicationDownlink), "ApplicationDownlink", "ApplicationDownlink", 1) + `,`,
		`QueuedResponses:` + strings.Replace(fmt.Sprintf("%v", this.QueuedResponses), "MACCommand", "MACCommand", 1) + `,`,
		`PendingRequests:` + strings.Replace(fmt.Sprintf("%v", this.PendingRequests), "MACCommand", "MACCommand", 1) + `,`,
		`QueuedJoinAccept:` + strings.Replace(fmt.Sprintf("%v", this.QueuedJoinAccept), "MACState_JoinAccept", "MACState_JoinAccept", 1) + `,`,
		`PendingJoinRequest:` + strings.Replace(fmt.Sprintf("%v", this.PendingJoinRequest), "JoinRequest", "JoinRequest", 1) + `,`,
		`RxWindowsAvailable:` + fmt.Sprintf("%v", this.RxWindowsAvailable) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACState_JoinAccept) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACState_JoinAccept{`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`Request:` + strings.Replace(strings.Replace(this.Request.String(), "JoinRequest", "JoinRequest", 1), `&`, ``, 1) + `,`,
		`Keys:` + strings.Replace(strings.Replace(this.Keys.String(), "SessionKeys", "SessionKeys", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndDevice) String() string {
	if this == nil {
		return "nil"
	}
	keysForAttributes := make([]string, 0, len(this.Attributes))
	for k := range this.Attributes {
		keysForAttributes = append(keysForAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributes)
	mapStringForAttributes := "map[string]string{"
	for _, k := range keysForAttributes {
		mapStringForAttributes += fmt.Sprintf("%v: %v,", k, this.Attributes[k])
	}
	mapStringForAttributes += "}"
	keysForLocations := make([]string, 0, len(this.Locations))
	for k := range this.Locations {
		keysForLocations = append(keysForLocations, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLocations)
	mapStringForLocations := "map[string]*Location{"
	for _, k := range keysForLocations {
		mapStringForLocations += fmt.Sprintf("%v: %v,", k, this.Locations[k])
	}
	mapStringForLocations += "}"
	s := strings.Join([]string{`&EndDevice{`,
		`EndDeviceIdentifiers:` + strings.Replace(strings.Replace(this.EndDeviceIdentifiers.String(), "EndDeviceIdentifiers", "EndDeviceIdentifiers", 1), `&`, ``, 1) + `,`,
		`CreatedAt:` + strings.Replace(strings.Replace(this.CreatedAt.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`UpdatedAt:` + strings.Replace(strings.Replace(this.UpdatedAt.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Attributes:` + mapStringForAttributes + `,`,
		`VersionIDs:` + strings.Replace(fmt.Sprintf("%v", this.VersionIDs), "EndDeviceVersionIdentifiers", "EndDeviceVersionIdentifiers", 1) + `,`,
		`ServiceProfileID:` + fmt.Sprintf("%v", this.ServiceProfileID) + `,`,
		`NetworkServerAddress:` + fmt.Sprintf("%v", this.NetworkServerAddress) + `,`,
		`ApplicationServerAddress:` + fmt.Sprintf("%v", this.ApplicationServerAddress) + `,`,
		`JoinServerAddress:` + fmt.Sprintf("%v", this.JoinServerAddress) + `,`,
		`Locations:` + mapStringForLocations + `,`,
		`SupportsClassB:` + fmt.Sprintf("%v", this.SupportsClassB) + `,`,
		`SupportsClassC:` + fmt.Sprintf("%v", this.SupportsClassC) + `,`,
		`LoRaWANVersion:` + fmt.Sprintf("%v", this.LoRaWANVersion) + `,`,
		`LoRaWANPHYVersion:` + fmt.Sprintf("%v", this.LoRaWANPHYVersion) + `,`,
		`FrequencyPlanID:` + fmt.Sprintf("%v", this.FrequencyPlanID) + `,`,
		`MinFrequency:` + fmt.Sprintf("%v", this.MinFrequency) + `,`,
		`MaxFrequency:` + fmt.Sprintf("%v", this.MaxFrequency) + `,`,
		`SupportsJoin:` + fmt.Sprintf("%v", this.SupportsJoin) + `,`,
		`ResetsJoinNonces:` + fmt.Sprintf("%v", this.ResetsJoinNonces) + `,`,
		`RootKeys:` + strings.Replace(fmt.Sprintf("%v", this.RootKeys), "RootKeys", "RootKeys", 1) + `,`,
		`NetID:` + fmt.Sprintf("%v", this.NetID) + `,`,
		`MACSettings:` + strings.Replace(fmt.Sprintf("%v", this.MACSettings), "MACSettings", "MACSettings", 1) + `,`,
		`MACState:` + strings.Replace(fmt.Sprintf("%v", this.MACState), "MACState", "MACState", 1) + `,`,
		`Session:` + strings.Replace(fmt.Sprintf("%v", this.Session), "Session", "Session", 1) + `,`,
		`PendingSession:` + strings.Replace(fmt.Sprintf("%v", this.PendingSession), "Session", "Session", 1) + `,`,
		`LastDevNonce:` + fmt.Sprintf("%v", this.LastDevNonce) + `,`,
		`UsedDevNonces:` + fmt.Sprintf("%v", this.UsedDevNonces) + `,`,
		`LastJoinNonce:` + fmt.Sprintf("%v", this.LastJoinNonce) + `,`,
		`LastRJCount0:` + fmt.Sprintf("%v", this.LastRJCount0) + `,`,
		`LastRJCount1:` + fmt.Sprintf("%v", this.LastRJCount1) + `,`,
		`LastDevStatusReceivedAt:` + strings.Replace(fmt.Sprintf("%v", this.LastDevStatusReceivedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`PowerState:` + fmt.Sprintf("%v", this.PowerState) + `,`,
		`BatteryPercentage:` + fmt.Sprintf("%v", this.BatteryPercentage) + `,`,
		`DownlinkMargin:` + fmt.Sprintf("%v", this.DownlinkMargin) + `,`,
		`RecentADRUplinks:` + strings.Replace(fmt.Sprintf("%v", this.RecentADRUplinks), "UplinkMessage", "UplinkMessage", 1) + `,`,
		`RecentUplinks:` + strings.Replace(fmt.Sprintf("%v", this.RecentUplinks), "UplinkMessage", "UplinkMessage", 1) + `,`,
		`RecentDownlinks:` + strings.Replace(fmt.Sprintf("%v", this.RecentDownlinks), "DownlinkMessage", "DownlinkMessage", 1) + `,`,
		`QueuedApplicationDownlinks:` + strings.Replace(fmt.Sprintf("%v", this.QueuedApplicationDownlinks), "ApplicationDownlink", "ApplicationDownlink", 1) + `,`,
		`Formatters:` + strings.Replace(fmt.Sprintf("%v", this.Formatters), "MessagePayloadFormatters", "MessagePayloadFormatters", 1) + `,`,
		`ProvisionerID:` + fmt.Sprintf("%v", this.ProvisionerID) + `,`,
		`ProvisioningData:` + strings.Replace(fmt.Sprintf("%v", this.ProvisioningData), "Struct", "types.Struct", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndDevices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndDevices{`,
		`EndDevices:` + strings.Replace(fmt.Sprintf("%v", this.EndDevices), "EndDevice", "EndDevice", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateEndDeviceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateEndDeviceRequest{`,
		`EndDevice:` + strings.Replace(strings.Replace(this.EndDevice.String(), "EndDevice", "EndDevice", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateEndDeviceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateEndDeviceRequest{`,
		`EndDevice:` + strings.Replace(strings.Replace(this.EndDevice.String(), "EndDevice", "EndDevice", 1), `&`, ``, 1) + `,`,
		`FieldMask:` + strings.Replace(strings.Replace(this.FieldMask.String(), "FieldMask", "types.FieldMask", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetEndDeviceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetEndDeviceRequest{`,
		`EndDeviceIdentifiers:` + strings.Replace(strings.Replace(this.EndDeviceIdentifiers.String(), "EndDeviceIdentifiers", "EndDeviceIdentifiers", 1), `&`, ``, 1) + `,`,
		`FieldMask:` + strings.Replace(strings.Replace(this.FieldMask.String(), "FieldMask", "types.FieldMask", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListEndDevicesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListEndDevicesRequest{`,
		`ApplicationIdentifiers:` + strings.Replace(strings.Replace(this.ApplicationIdentifiers.String(), "ApplicationIdentifiers", "ApplicationIdentifiers", 1), `&`, ``, 1) + `,`,
		`FieldMask:` + strings.Replace(strings.Replace(this.FieldMask.String(), "FieldMask", "types.FieldMask", 1), `&`, ``, 1) + `,`,
		`Order:` + fmt.Sprintf("%v", this.Order) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetEndDeviceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetEndDeviceRequest{`,
		`Device:` + strings.Replace(strings.Replace(this.Device.String(), "EndDevice", "EndDevice", 1), `&`, ``, 1) + `,`,
		`FieldMask:` + strings.Replace(strings.Replace(this.FieldMask.String(), "FieldMask", "types.FieldMask", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringEndDevice(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Session) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Session: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Session: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SessionKeys.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastFCntUp", wireType)
			}
			m.LastFCntUp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastFCntUp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastNFCntDown", wireType)
			}
			m.LastNFCntDown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastNFCntDown |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastAFCntDown", wireType)
			}
			m.LastAFCntDown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastAFCntDown |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastConfFCntDown", wireType)
			}
			m.LastConfFCntDown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastConfFCntDown |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MACParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MACParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxEIRP", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:])
			iNdEx += 4
			m.MaxEIRP = float32(math.Float32frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplinkDwellTime", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UplinkDwellTime = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkDwellTime", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DownlinkDwellTime = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ADRDataRateIndex", wireType)
			}
			m.ADRDataRateIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ADRDataRateIndex |= (DataRateIndex(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ADRTxPowerIndex", wireType)
			}
			m.ADRTxPowerIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ADRTxPowerIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ADRNbTrans", wireType)
			}
			m.ADRNbTrans = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ADRNbTrans |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ADRAckLimit", wireType)
			}
			m.ADRAckLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ADRAckLimit |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ADRAckDelay", wireType)
			}
			m.ADRAckDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ADRAckDelay |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx1Delay", wireType)
			}
			m.Rx1Delay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx1Delay |= (RxDelay(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx1DataRateOffset", wireType)
			}
			m.Rx1DataRateOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx1DataRateOffset |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx2DataRateIndex", wireType)
			}
			m.Rx2DataRateIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx2DataRateIndex |= (DataRateIndex(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx2Frequency", wireType)
			}
			m.Rx2Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx2Frequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDutyCycle", wireType)
			}
			m.MaxDutyCycle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDutyCycle |= (AggregatedDutyCycle(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejoinTimePeriodicity", wireType)
			}
			m.RejoinTimePeriodicity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RejoinTimePeriodicity |= (RejoinTimeExponent(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejoinCountPeriodicity", wireType)
			}
			m.RejoinCountPeriodicity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RejoinCountPeriodicity |= (RejoinCountExponent(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingSlotFrequency", wireType)
			}
			m.PingSlotFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PingSlotFrequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingSlotDataRateIndex", wireType)
			}
			m.PingSlotDataRateIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PingSlotDataRateIndex |= (DataRateIndex(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeaconFrequency", wireType)
			}
			m.BeaconFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeaconFrequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channels = append(m.Channels, &MACParameters_Channel{})
			if err := m.Channels[len(m.Channels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACParameters_Channel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Channel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Channel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplinkFrequency", wireType)
			}
			m.UplinkFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UplinkFrequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkFrequency", wireType)
			}
			m.DownlinkFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DownlinkFrequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDataRateIndex", wireType)
			}
			m.MinDataRateIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinDataRateIndex |= (DataRateIndex(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDataRateIndex", wireType)
			}
			m.MaxDataRateIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDataRateIndex |= (DataRateIndex(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableUplink", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableUplink = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDeviceBrand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndDeviceBrand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndDeviceBrand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logos", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logos = append(m.Logos, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDeviceModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndDeviceModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndDeviceModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BrandID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDeviceVersionIdentifiers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndDeviceVersionIdentifiers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndDeviceVersionIdentifiers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BrandID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HardwareVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirmwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirmwareVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDeviceVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndDeviceVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndDeviceVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDeviceVersionIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EndDeviceVersionIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoRaWANVersion", wireType)
			}
			m.LoRaWANVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoRaWANVersion |= (MACVersion(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoRaWANPHYVersion", wireType)
			}
			m.LoRaWANPHYVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoRaWANPHYVersion |= (PHYVersion(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyPlanID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrequencyPlanID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photos", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photos = append(m.Photos, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportsClassB", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SupportsClassB = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportsClassC", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SupportsClassC = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultMACSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultMACSettings == nil {
				m.DefaultMACSettings = &MACSettings{}
			}
			if err := m.DefaultMACSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinFrequency", wireType)
			}
			m.MinFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinFrequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFrequency", wireType)
			}
			m.MaxFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxFrequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetsFCnt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ResetsFCnt = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportsJoin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SupportsJoin = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetsJoinNonces", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ResetsJoinNonces = bool(v != 0)
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultFormatters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultFormatters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MACSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MACSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassBTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClassBTimeout == nil {
				m.ClassBTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.ClassBTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingSlotPeriodicity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PingSlotPeriodicity == nil {
				m.PingSlotPeriodicity = &MACSettings_PingSlotPeriodValue{}
			}
			if err := m.PingSlotPeriodicity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingSlotDataRateIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PingSlotDataRateIndex == nil {
				m.PingSlotDataRateIndex = &MACSettings_DataRateIndexValue{}
			}
			if err := m.PingSlotDataRateIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingSlotFrequency", wireType)
			}
			m.PingSlotFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PingSlotFrequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassCTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClassCTimeout == nil {
				m.ClassCTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.ClassCTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx1Delay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rx1Delay == nil {
				m.Rx1Delay = &MACSettings_RxDelayValue{}
			}
			if err := m.Rx1Delay.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx1DataRateOffset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rx1DataRateOffset == nil {
				m.Rx1DataRateOffset = &types.UInt32Value{}
			}
			if err := m.Rx1DataRateOffset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx2DataRateIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rx2DataRateIndex == nil {
				m.Rx2DataRateIndex = &MACSettings_DataRateIndexValue{}
			}
			if err := m.Rx2DataRateIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx2Frequency", wireType)
			}
			m.Rx2Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx2Frequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEndDevice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FactoryPresetFrequencies = append(m.FactoryPresetFrequencies, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEndDevice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEndDevice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.FactoryPresetFrequencies) == 0 {
					m.FactoryPresetFrequencies = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEndDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FactoryPresetFrequencies = append(m.FactoryPresetFrequencies, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FactoryPresetFrequencies", wireType)
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDutyCycle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxDutyCycle == nil {
				m.MaxDutyCycle = &MACSettings_AggregatedDutyCycleValue{}
			}
			if err := m.MaxDutyCycle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supports32BitFCnt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Supports32BitFCnt == nil {
				m.Supports32BitFCnt = &types.BoolValue{}
			}
			if err := m.Supports32BitFCnt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseADR", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UseADR == nil {
				m.UseADR = &types.BoolValue{}
			}
			if err := m.UseADR.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ADRMargin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ADRMargin == nil {
				m.ADRMargin = &types.FloatValue{}
			}
			if err := m.ADRMargin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetsFCnt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResetsFCnt == nil {
				m.ResetsFCnt = &types.BoolValue{}
			}
			if err := m.ResetsFCnt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusTimePeriodicity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StatusTimePeriodicity == nil {
				m.StatusTimePeriodicity = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.StatusTimePeriodicity, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusCountPeriodicity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StatusCountPeriodicity == nil {
				m.StatusCountPeriodicity = &types.UInt32Value{}
			}
			if err := m.StatusCountPeriodicity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredRx1Delay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DesiredRx1Delay == nil {
				m.DesiredRx1Delay = &MACSettings_RxDelayValue{}
			}
			if err := m.DesiredRx1Delay.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredRx1DataRateOffset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DesiredRx1DataRateOffset == nil {
				m.DesiredRx1DataRateOffset = &types.UInt32Value{}
			}
			if err := m.DesiredRx1DataRateOffset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredRx2DataRateIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DesiredRx2DataRateIndex == nil {
				m.DesiredRx2DataRateIndex = &MACSettings_DataRateIndexValue{}
			}
			if err := m.DesiredRx2DataRateIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredRx2Frequency", wireType)
			}
			m.DesiredRx2Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DesiredRx2Frequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACSettings_DataRateIndexValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataRateIndexValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataRateIndexValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (DataRateIndex(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACSettings_PingSlotPeriodValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingSlotPeriodValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingSlotPeriodValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (PingSlotPeriod(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACSettings_AggregatedDutyCycleValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggregatedDutyCycleValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggregatedDutyCycleValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (AggregatedDutyCycle(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACSettings_RxDelayValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RxDelayValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RxDelayValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (RxDelay(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MACState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MACState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DesiredParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceClass", wireType)
			}
			m.DeviceClass = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceClass |= (Class(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoRaWANVersion", wireType)
			}
			m.LoRaWANVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoRaWANVersion |= (MACVersion(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastConfirmedDownlinkAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastConfirmedDownlinkAt == nil {
				m.LastConfirmedDownlinkAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastConfirmedDownlinkAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastDevStatusFCntUp", wireType)
			}
			m.LastDevStatusFCntUp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastDevStatusFCntUp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingSlotPeriodicity", wireType)
			}
			m.PingSlotPeriodicity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PingSlotPeriodicity |= (PingSlotPeriod(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingApplicationDownlink", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PendingApplicationDownlink == nil {
				m.PendingApplicationDownlink = &ApplicationDownlink{}
			}
			if err := m.PendingApplicationDownlink.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueuedResponses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueuedResponses = append(m.QueuedResponses, &MACCommand{})
			if err := m.QueuedResponses[len(m.QueuedResponses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingRequests = append(m.PendingRequests, &MACCommand{})
			if err := m.PendingRequests[len(m.PendingRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueuedJoinAccept", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QueuedJoinAccept == nil {
				m.QueuedJoinAccept = &MACState_JoinAccept{}
			}
			if err := m.QueuedJoinAccept.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingJoinRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PendingJoinRequest == nil {
				m.PendingJoinRequest = &JoinRequest{}
			}
			if err := m.PendingJoinRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxWindowsAvailable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RxWindowsAvailable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACState_JoinAccept) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinAccept: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinAccept: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Keys.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDevice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndDevice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndDevice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDeviceIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EndDeviceIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEndDevice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEndDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthEndDevice
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEndDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthEndDevice
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipEndDevice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthEndDevice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attributes[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionIDs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VersionIDs == nil {
				m.VersionIDs = &EndDeviceVersionIdentifiers{}
			}
			if err := m.VersionIDs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceProfileID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceProfileID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkServerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkServerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationServerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationServerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinServerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JoinServerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Locations == nil {
				m.Locations = make(map[string]*Location)
			}
			var mapkey string
			var mapvalue *Location
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEndDevice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEndDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthEndDevice
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEndDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthEndDevice
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthEndDevice
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Location{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipEndDevice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthEndDevice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Locations[mapkey] = mapvalue
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportsClassB", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SupportsClassB = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportsClassC", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SupportsClassC = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoRaWANVersion", wireType)
			}
			m.LoRaWANVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoRaWANVersion |= (MACVersion(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoRaWANPHYVersion", wireType)
			}
			m.LoRaWANPHYVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoRaWANPHYVersion |= (PHYVersion(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyPlanID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrequencyPlanID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinFrequency", wireType)
			}
			m.MinFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinFrequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFrequency", wireType)
			}
			m.MaxFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxFrequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportsJoin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SupportsJoin = bool(v != 0)
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetsJoinNonces", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ResetsJoinNonces = bool(v != 0)
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RootKeys == nil {
				m.RootKeys = &RootKeys{}
			}
			if err := m.RootKeys.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v go_thethings_network_lorawan_stack_pkg_types.NetID
			m.NetID = &v
			if err := m.NetID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MACSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MACSettings == nil {
				m.MACSettings = &MACSettings{}
			}
			if err := m.MACSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MACState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MACState == nil {
				m.MACState = &MACState{}
			}
			if err := m.MACState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Session == nil {
				m.Session = &Session{}
			}
			if err := m.Session.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingSession", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PendingSession == nil {
				m.PendingSession = &Session{}
			}
			if err := m.PendingSession.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastDevNonce", wireType)
			}
			m.LastDevNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastDevNonce |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEndDevice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UsedDevNonces = append(m.UsedDevNonces, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEndDevice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEndDevice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UsedDevNonces) == 0 {
					m.UsedDevNonces = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEndDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UsedDevNonces = append(m.UsedDevNonces, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedDevNonces", wireType)
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastJoinNonce", wireType)
			}
			m.LastJoinNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastJoinNonce |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRJCount0", wireType)
			}
			m.LastRJCount0 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastRJCount0 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRJCount1", wireType)
			}
			m.LastRJCount1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastRJCount1 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastDevStatusReceivedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastDevStatusReceivedAt == nil {
				m.LastDevStatusReceivedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastDevStatusReceivedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerState", wireType)
			}
			m.PowerState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PowerState |= (PowerState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 35:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatteryPercentage", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:])
			iNdEx += 4
			m.BatteryPercentage = float32(math.Float32frombits(v))
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkMargin", wireType)
			}
			m.DownlinkMargin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DownlinkMargin |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecentADRUplinks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecentADRUplinks = append(m.RecentADRUplinks, &UplinkMessage{})
			if err := m.RecentADRUplinks[len(m.RecentADRUplinks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecentUplinks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecentUplinks = append(m.RecentUplinks, &UplinkMessage{})
			if err := m.RecentUplinks[len(m.RecentUplinks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecentDownlinks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecentDownlinks = append(m.RecentDownlinks, &DownlinkMessage{})
			if err := m.RecentDownlinks[len(m.RecentDownlinks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueuedApplicationDownlinks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueuedApplicationDownlinks = append(m.QueuedApplicationDownlinks, &ApplicationDownlink{})
			if err := m.QueuedApplicationDownlinks[len(m.QueuedApplicationDownlinks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Formatters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Formatters == nil {
				m.Formatters = &MessagePayloadFormatters{}
			}
			if err := m.Formatters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvisionerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProvisionerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvisioningData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProvisioningData == nil {
				m.ProvisioningData = &types.Struct{}
			}
			if err := m.ProvisioningData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDevices) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndDevices: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndDevices: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDevices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndDevices = append(m.EndDevices, &EndDevice{})
			if err := m.EndDevices[len(m.EndDevices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateEndDeviceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateEndDeviceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateEndDeviceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDevice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EndDevice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateEndDeviceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateEndDeviceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateEndDeviceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDevice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EndDevice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetEndDeviceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetEndDeviceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetEndDeviceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDeviceIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EndDeviceIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListEndDevicesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListEndDevicesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListEndDevicesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Order = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetEndDeviceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetEndDeviceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetEndDeviceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Device.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEndDevice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEndDevice
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEndDevice
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEndDevice(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEndDevice = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEndDevice   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("lorawan-stack/api/end_device.proto", fileDescriptor_end_device_7df2e0db88789f5d)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/end_device.proto", fileDescriptor_end_device_7df2e0db88789f5d)
}

var fileDescriptor_end_device_7df2e0db88789f5d = []byte{
	// 3729 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x5a, 0x4b, 0x70, 0x1b, 0xc7,
	0x99, 0x06, 0x40, 0x8a, 0x04, 0x1a, 0x24, 0x1e, 0xcd, 0x87, 0xc6, 0x94, 0x0c, 0xd0, 0x94, 0xec,
	0xd0, 0x8e, 0x09, 0x4a, 0x94, 0xbc, 0x89, 0x15, 0xa7, 0x64, 0x80, 0xa0, 0x6c, 0xda, 0x14, 0xc5,
	0x6d, 0x52, 0xd2, 0xda, 0xb1, 0x3c, 0xd5, 0xc4, 0x34, 0xc9, 0x31, 0x81, 0x99, 0x49, 0x77, 0x83,
	0x04, 0xf7, 0x51, 0x95, 0x63, 0x6e, 0xc9, 0x65, 0xab, 0x72, 0xd9, 0xaa, 0xd4, 0xd6, 0x6e, 0x55,
	0x6a, 0x6b, 0x0f, 0x39, 0xed, 0xfa, 0x98, 0xa3, 0x6f, 0xeb, 0x63, 0x2a, 0x07, 0x38, 0x02, 0x2f,
	0x39, 0xa6, 0x6a, 0x2f, 0x3e, 0x6e, 0xf5, 0x63, 0x1e, 0x78, 0x51, 0xa0, 0xbc, 0xbe, 0xb0, 0x30,
	0xff, 0xe3, 0xeb, 0xbf, 0x5f, 0x7f, 0x7f, 0xfd, 0x37, 0xc1, 0x52, 0xdd, 0xa5, 0xf8, 0x14, 0x3b,
	0x2b, 0x8c, 0xe3, 0xda, 0xf1, 0x2a, 0xf6, 0xec, 0x55, 0xe2, 0x58, 0xa6, 0x45, 0x4e, 0xec, 0x1a,
	0x29, 0x79, 0xd4, 0xe5, 0x2e, 0xcc, 0x70, 0xee, 0x94, 0xb4, 0x5d, 0xe9, 0xe4, 0xce, 0xc2, 0xca,
	0xa1, 0xcd, 0x8f, 0x9a, 0xfb, 0xa5, 0x9a, 0xdb, 0x58, 0x3d, 0x74, 0x0f, 0xdd, 0x55, 0x69, 0xb6,
	0xdf, 0x3c, 0x90, 0x5f, 0xf2, 0x43, 0xfe, 0x52, 0xee, 0x0b, 0x7f, 0x13, 0x31, 0x6f, 0x9c, 0xda,
	0xfc, 0xd8, 0x3d, 0x5d, 0x3d, 0x74, 0x57, 0xa4, 0x72, 0xe5, 0x04, 0xd7, 0x6d, 0x0b, 0x73, 0x97,
	0xb2, 0xd5, 0xe0, 0xa7, 0xf6, 0xbb, 0x7e, 0xe8, 0xba, 0x87, 0x75, 0x22, 0x63, 0xc2, 0x8e, 0xe3,
	0x72, 0xcc, 0x6d, 0xd7, 0x61, 0x5a, 0x5b, 0xd0, 0xda, 0xa0, 0x6d, 0xab, 0x49, 0xa5, 0x81, 0xd6,
	0x2f, 0xf6, 0xea, 0x0f, 0x6c, 0x52, 0xb7, 0xcc, 0x06, 0x66, 0xc7, 0x3d, 0xf8, 0x81, 0x05, 0xe3,
	0xb4, 0x59, 0xe3, 0x5a, 0x5b, 0xec, 0xd5, 0x72, 0xbb, 0x41, 0x18, 0xc7, 0x0d, 0x6f, 0x58, 0x00,
	0xa7, 0x14, 0x7b, 0x1e, 0xa1, 0x7e, 0x80, 0x37, 0xfa, 0x47, 0xd6, 0xb6, 0x88, 0xc3, 0xed, 0x03,
	0x3b, 0x34, 0xba, 0xde, 0x6f, 0xf4, 0x85, 0x6b, 0x3b, 0xc3, 0xb5, 0xc7, 0xe4, 0xcc, 0xf7, 0x2d,
	0xf6, 0x6b, 0xfd, 0x49, 0xd2, 0x43, 0xd0, 0x6f, 0xd0, 0x20, 0x8c, 0xe1, 0x43, 0xc2, 0x2e, 0xb2,
	0xe0, 0xd8, 0xc2, 0x1c, 0x2b, 0x8b, 0xa5, 0x5f, 0x8d, 0x81, 0xc9, 0x5d, 0xc2, 0x98, 0xed, 0x3a,
	0xf0, 0x29, 0x48, 0x5a, 0xe4, 0xc4, 0xc4, 0x96, 0x45, 0x8d, 0xc4, 0x62, 0x7c, 0x79, 0xaa, 0xf2,
	0xde, 0x57, 0xed, 0x62, 0xec, 0x4f, 0xed, 0xe2, 0xdd, 0x43, 0xb7, 0xc4, 0x8f, 0x08, 0x3f, 0xb2,
	0x9d, 0x43, 0x56, 0x72, 0x08, 0x3f, 0x75, 0xe9, 0xf1, 0x6a, 0x37, 0xb8, 0x77, 0x7c, 0xb8, 0xca,
	0xcf, 0x3c, 0xc2, 0x4a, 0x55, 0x72, 0x52, 0xb6, 0x2c, 0x8a, 0x26, 0x2d, 0xf5, 0x03, 0xbe, 0x0b,
	0xc6, 0x45, 0xbf, 0x8c, 0xb1, 0xc5, 0xf8, 0x72, 0x7a, 0xed, 0x5a, 0xa9, 0x7b, 0xbd, 0x95, 0x74,
	0xfb, 0x1f, 0x93, 0x33, 0x56, 0x49, 0x8a, 0x16, 0xbf, 0x6e, 0x17, 0xe3, 0x48, 0xba, 0xc0, 0xd7,
	0xc0, 0x74, 0x1d, 0x33, 0x6e, 0x1e, 0x98, 0x35, 0x87, 0x9b, 0x4d, 0xcf, 0x18, 0x5f, 0x8c, 0x2f,
	0x4f, 0x23, 0x20, 0x84, 0x0f, 0xd6, 0x1d, 0xfe, 0xd8, 0x83, 0xcb, 0x20, 0x2f, 0x4d, 0x1c, 0x6d,
	0x64, 0xb9, 0xa7, 0x8e, 0x71, 0x45, 0x9a, 0x49, 0xdf, 0x6d, 0x61, 0x57, 0x75, 0x4f, 0x9d, 0xc0,
	0x12, 0x47, 0x2d, 0x27, 0x42, 0xcb, 0x72, 0x60, 0x59, 0x02, 0xb3, 0xd2, 0xb2, 0xe6, 0x3a, 0x07,
	0x51, 0xe3, 0x49, 0x69, 0x9c, 0x13, 0xba, 0x75, 0xd7, 0x39, 0x08, 0xec, 0xd7, 0x01, 0x60, 0x1c,
	0x53, 0x4e, 0x2c, 0x13, 0x73, 0x23, 0x29, 0xfb, 0xb9, 0x50, 0x52, 0x2b, 0xa8, 0xe4, 0xaf, 0xa0,
	0xd2, 0x9e, 0xbf, 0xc4, 0x54, 0x37, 0x7f, 0xfd, 0x4d, 0x31, 0x8e, 0x52, 0xda, 0xaf, 0xcc, 0x3f,
	0x1a, 0x4f, 0xc6, 0x73, 0x89, 0xa5, 0x6f, 0xd2, 0x60, 0xfa, 0x61, 0x79, 0x7d, 0x07, 0x53, 0xdc,
	0x20, 0x9c, 0x50, 0x06, 0xdf, 0x00, 0xc9, 0x06, 0x6e, 0x99, 0xc4, 0xa6, 0x9e, 0x11, 0x5f, 0x8c,
	0x2f, 0x27, 0x2a, 0xe9, 0x4e, 0xbb, 0x38, 0xf9, 0x10, 0xb7, 0x36, 0x36, 0xd1, 0x0e, 0x9a, 0x6c,
	0xe0, 0xd6, 0x86, 0x4d, 0x3d, 0xf8, 0x16, 0xc8, 0x37, 0xbd, 0xba, 0xed, 0x1c, 0x9b, 0xd6, 0x29,
	0xa9, 0xd7, 0x4d, 0xb1, 0xa2, 0xe5, 0x44, 0x26, 0x51, 0x56, 0x29, 0xaa, 0x42, 0x2e, 0xa2, 0x80,
	0x25, 0x30, 0x23, 0x3a, 0xd4, 0x6b, 0x3d, 0x26, 0xad, 0xf3, 0xbe, 0x2a, 0xb4, 0xdf, 0x07, 0x33,
	0xd8, 0xa2, 0xa6, 0x58, 0x39, 0x26, 0xc5, 0x9c, 0x98, 0xb6, 0x63, 0x91, 0x96, 0x9c, 0x8d, 0xcc,
	0xda, 0xab, 0xbd, 0x33, 0x5a, 0xc5, 0x1c, 0x23, 0xcc, 0xc9, 0xa6, 0x30, 0xaa, 0xcc, 0x76, 0xda,
	0xc5, 0x5c, 0xb9, 0x8a, 0xba, 0xa4, 0x28, 0x87, 0x2d, 0xda, 0x25, 0x81, 0xef, 0x03, 0x28, 0xda,
	0xe0, 0x2d, 0xd3, 0x73, 0x4f, 0x09, 0xd5, 0x4d, 0xc8, 0x99, 0xac, 0xcc, 0x74, 0xda, 0xc5, 0x6c,
	0xb9, 0x8a, 0xf6, 0x5a, 0x3b, 0x42, 0xa7, 0x20, 0xb2, 0xd8, 0xa2, 0x51, 0x01, 0xbc, 0x05, 0xa6,
	0x04, 0x82, 0xb3, 0x6f, 0x72, 0x8a, 0x1d, 0xa6, 0xe6, 0xb6, 0x92, 0xe9, 0xb4, 0x8b, 0xa0, 0x5c,
	0x45, 0xdb, 0xfb, 0x7b, 0x42, 0x8a, 0x00, 0xb6, 0xa8, 0xfe, 0x0d, 0xef, 0x80, 0x69, 0xe1, 0x81,
	0x6b, 0xc7, 0x66, 0xdd, 0x6e, 0xd8, 0x5c, 0xcd, 0x70, 0x25, 0xdb, 0x69, 0x17, 0xd3, 0xe5, 0x2a,
	0x2a, 0xd7, 0x8e, 0xb7, 0x84, 0x18, 0xa5, 0xb1, 0x45, 0xfd, 0x8f, 0xa8, 0x93, 0x45, 0xea, 0xf8,
	0x4c, 0x4e, 0x78, 0x97, 0x53, 0x55, 0x88, 0x7d, 0x27, 0xf9, 0x01, 0xef, 0x82, 0x14, 0x6d, 0xdd,
	0xd6, 0x0e, 0x29, 0x39, 0x6e, 0x57, 0x7b, 0xc7, 0x0d, 0xb5, 0x94, 0x63, 0x92, 0xb6, 0x6e, 0x2b,
	0xaf, 0x55, 0x30, 0x2b, 0xbd, 0x82, 0x71, 0x77, 0x0f, 0x0e, 0x18, 0xe1, 0x06, 0x90, 0x0b, 0x31,
	0x2f, 0xec, 0xf4, 0x18, 0x3e, 0x92, 0x0a, 0xb8, 0x05, 0x66, 0x68, 0x6b, 0xad, 0x6f, 0xa2, 0xd2,
	0x23, 0x4c, 0x14, 0xca, 0xd1, 0xd6, 0x5a, 0xf7, 0x94, 0xdc, 0x00, 0xd3, 0x02, 0xed, 0x80, 0x92,
	0x9f, 0x37, 0x89, 0x53, 0x3b, 0x33, 0xa6, 0x16, 0xe3, 0xcb, 0xe3, 0x68, 0x8a, 0xb6, 0xd6, 0x1e,
	0xf8, 0x32, 0xb8, 0x09, 0x32, 0x62, 0x7d, 0x5a, 0x4d, 0x7e, 0x66, 0xd6, 0xce, 0x6a, 0x75, 0x62,
	0x4c, 0xcb, 0xd6, 0x6e, 0xf4, 0xb6, 0x56, 0x3e, 0x3c, 0xa4, 0xe4, 0x10, 0x73, 0x62, 0x55, 0x9b,
	0xfc, 0x6c, 0x5d, 0x98, 0xa2, 0xa9, 0x06, 0x6e, 0x05, 0x5f, 0xf0, 0x53, 0x70, 0x95, 0x12, 0x91,
	0x21, 0xe5, 0x72, 0x34, 0x3d, 0x42, 0x6d, 0xd7, 0xb2, 0x6b, 0x36, 0x3f, 0x33, 0x32, 0x12, 0x73,
	0xa9, 0x6f, 0xc8, 0xa4, 0xb9, 0x58, 0xa3, 0x1b, 0x2d, 0xcf, 0x75, 0x88, 0xc3, 0xd1, 0x1c, 0x0d,
	0x64, 0x3b, 0x21, 0x00, 0x7c, 0x06, 0x0c, 0x8d, 0x5d, 0x73, 0x9b, 0x0e, 0xef, 0x02, 0xcf, 0x0e,
	0x0e, 0x58, 0x81, 0xaf, 0x0b, 0xf3, 0x00, 0x7d, 0x9e, 0x86, 0xc2, 0x28, 0x7c, 0x09, 0xcc, 0x78,
	0xb6, 0x73, 0x68, 0xb2, 0xba, 0xcb, 0x23, 0x03, 0x96, 0x93, 0x03, 0x96, 0x17, 0xaa, 0xdd, 0xba,
	0xcb, 0xc3, 0x51, 0x7b, 0x0a, 0x5e, 0x09, 0xed, 0x7b, 0xa7, 0x2b, 0x3f, 0xca, 0x74, 0xcd, 0xf9,
	0xa0, 0xdd, 0x73, 0xf6, 0x26, 0xc8, 0xed, 0x13, 0x5c, 0x73, 0x9d, 0x48, 0x14, 0x50, 0x46, 0x91,
	0x55, 0xf2, 0x30, 0x86, 0x32, 0x48, 0xd6, 0x8e, 0xb0, 0xe3, 0x90, 0x3a, 0x33, 0x66, 0x16, 0xc7,
	0x96, 0xd3, 0x6b, 0xaf, 0xf7, 0x36, 0xd9, 0x95, 0x8a, 0x4a, 0xeb, 0xca, 0x1a, 0x05, 0x6e, 0x0b,
	0xff, 0x91, 0x00, 0x93, 0x5a, 0x2a, 0x5a, 0xd6, 0x09, 0x28, 0x6c, 0x39, 0xae, 0x5a, 0x56, 0xf2,
	0xb0, 0xe5, 0x15, 0x00, 0x83, 0xfc, 0x13, 0x1a, 0x27, 0xd4, 0x60, 0xf9, 0x9a, 0xd0, 0x7c, 0x0b,
	0xcc, 0x34, 0x6c, 0xa7, 0x6f, 0x98, 0xc6, 0x46, 0x5a, 0xd5, 0x0d, 0xdb, 0xe9, 0x1e, 0x21, 0x81,
	0x26, 0x16, 0xec, 0x4b, 0x24, 0x33, 0x94, 0x13, 0xeb, 0xb5, 0x77, 0x8f, 0x10, 0x07, 0xef, 0xd7,
	0x89, 0xa9, 0x3a, 0x29, 0x33, 0x56, 0x12, 0x4d, 0x29, 0xe1, 0x63, 0x29, 0xbb, 0x37, 0xfe, 0xe5,
	0x6f, 0x8b, 0x31, 0xf5, 0x77, 0xa9, 0x01, 0x32, 0x1b, 0x8e, 0x55, 0x95, 0x14, 0xac, 0x42, 0xb1,
	0x63, 0xc1, 0x79, 0x90, 0xb0, 0x2d, 0x39, 0x54, 0xa9, 0xca, 0x44, 0xa7, 0x5d, 0x4c, 0x6c, 0x56,
	0x51, 0xc2, 0xb6, 0x20, 0x04, 0xe3, 0x0e, 0xd6, 0x49, 0x3c, 0x85, 0xe4, 0x6f, 0xf8, 0x0a, 0x18,
	0x6b, 0xd2, 0xba, 0xec, 0x7a, 0xaa, 0x32, 0xd9, 0x69, 0x17, 0xc7, 0x1e, 0xa3, 0x2d, 0x24, 0x64,
	0x70, 0x16, 0x5c, 0xa9, 0xbb, 0x87, 0x2e, 0x33, 0xc6, 0x17, 0xc7, 0x96, 0x53, 0x48, 0x7d, 0x2c,
	0x59, 0x91, 0xe6, 0x1e, 0xba, 0x16, 0xa9, 0x8b, 0x03, 0x65, 0x5f, 0xb4, 0x6b, 0x06, 0x8d, 0xca,
	0x03, 0x45, 0xc6, 0xb2, 0x59, 0x45, 0x93, 0x52, 0xb9, 0xe9, 0x87, 0x95, 0x18, 0x1a, 0xd6, 0x58,
	0x18, 0xd6, 0xd2, 0x3f, 0x27, 0xc0, 0xb5, 0xa0, 0x99, 0x27, 0x84, 0x8a, 0x13, 0x7d, 0x33, 0xe4,
	0x43, 0xf0, 0x51, 0x5f, 0x9b, 0x77, 0x23, 0x6d, 0x76, 0xbe, 0x29, 0xbe, 0x0e, 0x5e, 0xfb, 0xfc,
	0x67, 0x78, 0xe5, 0xef, 0x6f, 0xad, 0xbc, 0xfb, 0x6c, 0xf9, 0xfe, 0xbd, 0x9f, 0xad, 0x3c, 0xbb,
	0xef, 0x7f, 0xbe, 0xf9, 0x0f, 0x6b, 0x6f, 0xff, 0xd3, 0xcd, 0x7f, 0xfc, 0xfc, 0x66, 0xeb, 0xf5,
	0x30, 0xb8, 0x47, 0x20, 0xd9, 0x10, 0xbd, 0x31, 0x83, 0x10, 0x25, 0xa0, 0xec, 0xe1, 0xa5, 0x00,
	0x25, 0xca, 0xa6, 0x25, 0x56, 0xef, 0x11, 0xa6, 0xd6, 0x29, 0xa6, 0xc4, 0x3c, 0x51, 0x1d, 0xd0,
	0x3d, 0xcc, 0xfa, 0x72, 0xdd, 0x2f, 0x61, 0x7a, 0x60, 0xd3, 0x46, 0x97, 0xe9, 0xb8, 0x32, 0xf5,
	0xe5, 0xda, 0x74, 0xe9, 0x7f, 0x26, 0x40, 0xae, 0x77, 0x5c, 0xe0, 0x07, 0x60, 0xcc, 0xb6, 0x98,
	0x1c, 0x87, 0xf4, 0xda, 0x0f, 0x7b, 0x17, 0xdc, 0x05, 0xc3, 0x18, 0xe1, 0x47, 0x02, 0x01, 0x3e,
	0x05, 0x59, 0xed, 0x18, 0xc4, 0x91, 0x90, 0xab, 0x78, 0x61, 0xc0, 0x3e, 0xd6, 0x70, 0x15, 0xd8,
	0x69, 0x17, 0x33, 0x5b, 0x2e, 0xc2, 0x4f, 0xcb, 0xdb, 0x5a, 0x86, 0x32, 0xda, 0xd4, 0x8f, 0x10,
	0x83, 0x19, 0x1f, 0xd8, 0x3b, 0x3a, 0xeb, 0x1a, 0x8f, 0x01, 0xe0, 0x3b, 0x1f, 0x7e, 0xe2, 0x83,
	0xcf, 0x75, 0xda, 0xc5, 0xbc, 0x06, 0x0f, 0xc5, 0x28, 0xaf, 0xad, 0x77, 0x8e, 0xce, 0xfc, 0x26,
	0xee, 0x83, 0x7c, 0xb0, 0xf3, 0x4d, 0xaf, 0x8e, 0x1d, 0x31, 0x93, 0x72, 0x14, 0xd5, 0x69, 0x1f,
	0xec, 0xfe, 0x9d, 0x3a, 0x76, 0x36, 0xab, 0x28, 0x7b, 0xd0, 0x25, 0x10, 0xcb, 0x73, 0xc2, 0x3b,
	0x72, 0xb9, 0xcb, 0x8c, 0x2b, 0x72, 0xbd, 0xeb, 0x2f, 0xb8, 0x0c, 0x72, 0xac, 0xe9, 0x79, 0x2e,
	0xe5, 0xcc, 0xac, 0xd5, 0x31, 0x63, 0xe6, 0xbe, 0x64, 0x02, 0x49, 0x94, 0xf1, 0xe5, 0xeb, 0x42,
	0x5c, 0x19, 0x60, 0x59, 0x93, 0x04, 0xa0, 0xd7, 0x72, 0x1d, 0x12, 0x30, 0x6b, 0x91, 0x03, 0xdc,
	0xac, 0x73, 0xb3, 0x81, 0x6b, 0x26, 0x23, 0x9c, 0x0b, 0x2e, 0xac, 0xa9, 0xde, 0xb5, 0x01, 0xa3,
	0xbd, 0xab, 0x4d, 0x2a, 0xf3, 0x9d, 0x76, 0x11, 0x56, 0x95, 0x73, 0x44, 0x8e, 0xa0, 0x06, 0x7c,
	0x88, 0x6b, 0xbe, 0x4c, 0xe4, 0x12, 0x91, 0xe7, 0xc2, 0x8c, 0x98, 0x52, 0xe7, 0x6d, 0xc3, 0x8e,
	0x64, 0x6d, 0x61, 0x84, 0x5b, 0x11, 0x23, 0xa0, 0x8d, 0x70, 0x2b, 0x34, 0x5a, 0x04, 0x53, 0x94,
	0x30, 0xc2, 0x99, 0xa2, 0xaf, 0x92, 0x00, 0x24, 0x11, 0x50, 0x32, 0xc1, 0x5b, 0x05, 0x4c, 0xd0,
	0x79, 0x71, 0xa2, 0xc9, 0x53, 0x3b, 0x89, 0xa6, 0x7c, 0xe1, 0x47, 0xae, 0xed, 0xc0, 0xb7, 0x01,
	0xd4, 0x30, 0xf2, 0xe4, 0x74, 0x5c, 0xa7, 0x46, 0x98, 0x3c, 0x8b, 0x93, 0x28, 0xa7, 0x34, 0xc2,
	0x6e, 0x5b, 0xca, 0xe1, 0x33, 0xe0, 0x77, 0xca, 0x3c, 0x70, 0x69, 0x03, 0x73, 0x71, 0x68, 0xc8,
	0xc3, 0x35, 0xbd, 0xb6, 0xdc, 0x37, 0x46, 0xea, 0xae, 0xb2, 0x83, 0xcf, 0xea, 0x2e, 0xb6, 0x1e,
	0x04, 0xf6, 0x95, 0x71, 0xb1, 0xc6, 0x51, 0x5e, 0x23, 0x85, 0x0a, 0x9d, 0x3e, 0xff, 0x2b, 0x0b,
	0xd2, 0x91, 0x71, 0x84, 0x1f, 0x80, 0xac, 0x9e, 0x65, 0x49, 0x1a, 0xdc, 0x26, 0xd7, 0x1b, 0xeb,
	0x95, 0x3e, 0x02, 0x5e, 0xd5, 0x77, 0xc8, 0xca, 0xf8, 0x6f, 0x04, 0xf7, 0x9e, 0x96, 0x7e, 0x95,
	0x3d, 0xe5, 0x05, 0x6b, 0x60, 0x2e, 0x3c, 0x91, 0xa3, 0xec, 0x20, 0x21, 0xe1, 0x56, 0x2f, 0x98,
	0xe4, 0xd2, 0x8e, 0x3e, 0x8a, 0x15, 0x23, 0x78, 0x82, 0xeb, 0x4d, 0x82, 0x66, 0xbc, 0x2e, 0xa1,
	0xa2, 0x09, 0x47, 0x17, 0x1d, 0xfb, 0xea, 0x82, 0x54, 0xba, 0xa8, 0xa1, 0xae, 0xb3, 0x47, 0xb5,
	0x33, 0x84, 0x07, 0x0c, 0x21, 0x24, 0xe3, 0xc3, 0x08, 0x49, 0x30, 0x8e, 0xb5, 0x60, 0x1c, 0xaf,
	0x5c, 0x66, 0x1c, 0xd7, 0xfd, 0x71, 0xdc, 0x88, 0x32, 0xdd, 0x89, 0x21, 0x93, 0x1f, 0xe9, 0x92,
	0x66, 0xbd, 0xaa, 0x33, 0x21, 0xf5, 0x7d, 0x38, 0x84, 0xfa, 0x4e, 0x4a, 0xc4, 0xeb, 0x7d, 0x41,
	0x3d, 0xde, 0x74, 0xf8, 0x9d, 0x35, 0x85, 0x32, 0x80, 0x18, 0x3f, 0x1b, 0x4c, 0x8c, 0x93, 0x2f,
	0x35, 0xe4, 0x23, 0x30, 0xe5, 0xd4, 0x00, 0xa6, 0xfc, 0x1e, 0x58, 0x38, 0xc0, 0x35, 0xee, 0xd2,
	0x33, 0xd3, 0x93, 0x9b, 0x27, 0xb0, 0xb7, 0x09, 0x33, 0xc0, 0xe2, 0xd8, 0xf2, 0x38, 0x32, 0xb4,
	0xc5, 0x8e, 0x34, 0x78, 0x10, 0xea, 0xe1, 0xa7, 0x7d, 0x3c, 0x3b, 0x2d, 0x83, 0xbf, 0x7b, 0x51,
	0xf0, 0x03, 0x38, 0xb7, 0xea, 0x42, 0x37, 0xf1, 0xae, 0x81, 0xb9, 0x20, 0x19, 0xdc, 0x59, 0x33,
	0xf7, 0x6d, 0x7d, 0xe5, 0x96, 0x84, 0x7f, 0xd0, 0x5d, 0xb6, 0xe2, 0xba, 0x75, 0x09, 0xa4, 0x32,
	0xfe, 0xae, 0x76, 0xbe, 0xb3, 0x56, 0xb1, 0xe5, 0xc5, 0x1c, 0xe5, 0x59, 0xaf, 0x08, 0xde, 0x07,
	0x93, 0x4d, 0x46, 0x4c, 0x6c, 0x51, 0x99, 0x6b, 0x2e, 0x86, 0x05, 0x9d, 0x76, 0x71, 0xe2, 0x31,
	0x23, 0xe5, 0x2a, 0x42, 0x13, 0x4d, 0x46, 0xca, 0x16, 0x85, 0x9b, 0x40, 0xdc, 0xdd, 0xcc, 0x06,
	0xa6, 0x87, 0xb6, 0x23, 0xb3, 0x90, 0xc8, 0xbd, 0xbd, 0x18, 0x0f, 0xea, 0x2e, 0xe6, 0x0a, 0x64,
	0xba, 0xd3, 0x2e, 0xa6, 0xca, 0x55, 0xf4, 0x50, 0x7a, 0xa0, 0x14, 0xb6, 0xa8, 0xfa, 0x09, 0xdf,
	0xeb, 0xc9, 0x8f, 0xd9, 0x17, 0x05, 0xd4, 0x95, 0x3b, 0x9f, 0x82, 0xab, 0x8c, 0x63, 0xde, 0x64,
	0xfd, 0xf7, 0x94, 0xdc, 0x68, 0x7b, 0x66, 0x4e, 0xf9, 0xf7, 0x5e, 0x52, 0x9e, 0x00, 0x43, 0x03,
	0xf7, 0x5f, 0x52, 0xf2, 0x23, 0x2c, 0xfc, 0x79, 0xe5, 0xdd, 0x77, 0x3b, 0xd9, 0x03, 0x79, 0x8b,
	0x30, 0x9b, 0x12, 0xcb, 0x0c, 0xf7, 0x26, 0xbc, 0xe4, 0xde, 0xcc, 0x6a, 0x08, 0xe4, 0x6f, 0xd1,
	0xcf, 0xc0, 0xf5, 0x2e, 0xd4, 0xde, 0xad, 0x3a, 0x33, 0x42, 0xc4, 0x46, 0x04, 0xb4, 0x7b, 0xc7,
	0xd6, 0xc1, 0xb5, 0x10, 0xbd, 0x7f, 0xe7, 0xce, 0xbe, 0xd4, 0xce, 0xbd, 0x1a, 0x34, 0xd7, 0xb3,
	0x81, 0xd7, 0xc0, 0x5c, 0xb4, 0xb5, 0x70, 0x23, 0xcf, 0xc9, 0x8d, 0x3c, 0x13, 0xfa, 0x05, 0xfb,
	0x79, 0x61, 0x13, 0xc0, 0xfe, 0x26, 0xe0, 0x1d, 0x70, 0xe5, 0x44, 0xfc, 0x90, 0xc7, 0xd0, 0x0b,
	0x2f, 0x14, 0xca, 0x76, 0xe1, 0x63, 0x30, 0x33, 0xe0, 0x0c, 0x81, 0x77, 0xbb, 0xb1, 0x0a, 0x7d,
	0xcc, 0xab, 0xcb, 0xc7, 0x07, 0x7b, 0x0c, 0x8c, 0x61, 0xfb, 0x1e, 0xbe, 0xdb, 0x8d, 0x38, 0xd2,
	0x25, 0x5d, 0xc3, 0xfe, 0x14, 0x4c, 0x45, 0xd7, 0x03, 0x5c, 0xe9, 0x86, 0x1a, 0x5a, 0xce, 0x50,
	0x56, 0x4b, 0xff, 0x9e, 0x02, 0x49, 0x31, 0x3b, 0x1c, 0x73, 0x02, 0x11, 0x80, 0xb5, 0x26, 0xa5,
	0x44, 0xac, 0xf1, 0xe0, 0x7e, 0xa9, 0x0f, 0xee, 0x57, 0x2f, 0xbc, 0x84, 0xfa, 0xfc, 0x40, 0xbb,
	0x47, 0x0a, 0x65, 0x48, 0xd0, 0x0f, 0x35, 0x85, 0x11, 0xcc, 0xc4, 0x25, 0x30, 0xb5, 0x7b, 0x04,
	0xf3, 0xc7, 0x60, 0x4a, 0x15, 0xcb, 0x15, 0x41, 0xd4, 0x0c, 0x78, 0xae, 0x17, 0x4d, 0xd2, 0x44,
	0x94, 0x56, 0xa6, 0xf2, 0x63, 0x10, 0x37, 0x1f, 0xff, 0x7f, 0xe1, 0xe6, 0xcf, 0xc0, 0x42, 0x50,
	0x9c, 0xb4, 0x69, 0x83, 0x58, 0x66, 0x70, 0x95, 0xc6, 0xfe, 0x99, 0x7d, 0x51, 0xf1, 0x71, 0x5c,
	0x16, 0x1e, 0xaf, 0xfa, 0x45, 0x4c, 0x09, 0x51, 0xd5, 0x08, 0x65, 0x0e, 0xdf, 0x01, 0x86, 0x84,
	0xb7, 0xc8, 0x89, 0xa9, 0x73, 0x51, 0x50, 0x7d, 0x55, 0xc5, 0xd2, 0x19, 0xa1, 0xaf, 0x92, 0x93,
	0x5d, 0xa9, 0xd5, 0x65, 0x58, 0x34, 0x8c, 0x3d, 0x4d, 0x8e, 0xb4, 0x72, 0x07, 0x92, 0x25, 0x02,
	0xae, 0x7b, 0xc4, 0xb1, 0x04, 0x2c, 0xf6, 0xbc, 0xba, 0x5d, 0x93, 0x19, 0x34, 0xe8, 0xae, 0x3e,
	0xbc, 0xfb, 0x97, 0x70, 0x68, 0xeb, 0xf7, 0x0b, 0x2d, 0x68, 0xa0, 0x01, 0x3a, 0xb8, 0x01, 0x72,
	0x3f, 0x6f, 0x92, 0xa6, 0xd8, 0xf9, 0x84, 0x79, 0xae, 0xc3, 0x08, 0x33, 0x52, 0xb2, 0x1c, 0x32,
	0x68, 0xaa, 0xd6, 0xdd, 0x46, 0x03, 0x3b, 0x16, 0xca, 0x2a, 0x1f, 0xe4, 0xbb, 0x08, 0x18, 0x3f,
	0x5a, 0x99, 0x21, 0x18, 0x57, 0x67, 0xfa, 0x0b, 0x60, 0xb4, 0x0f, 0xd2, 0x2e, 0xf0, 0x6f, 0x01,
	0xd4, 0xd1, 0x48, 0xca, 0x8d, 0x6b, 0x35, 0xe2, 0x71, 0x7d, 0xd4, 0xdf, 0x18, 0x94, 0xed, 0xc4,
	0x7e, 0x2a, 0x09, 0x16, 0x5e, 0x96, 0xa6, 0x48, 0x77, 0x26, 0x94, 0x08, 0x2a, 0xe5, 0x47, 0x26,
	0x31, 0x75, 0x78, 0xfa, 0x70, 0xef, 0xbb, 0xbd, 0x08, 0x4f, 0x1d, 0x0e, 0x82, 0xda, 0x31, 0x22,
	0x83, 0xb7, 0x04, 0x33, 0x33, 0x4f, 0x6d, 0xc7, 0x72, 0x4f, 0x99, 0x89, 0x4f, 0xb0, 0x5d, 0xc7,
	0xfb, 0xba, 0xec, 0x97, 0x44, 0x90, 0xb6, 0x9e, 0x2a, 0x55, 0xd9, 0xd7, 0x2c, 0xfc, 0x5b, 0x1c,
	0x80, 0x48, 0x3c, 0x4b, 0x60, 0xd2, 0x53, 0xb4, 0x5f, 0xee, 0xf8, 0xa9, 0x4a, 0xb2, 0xf3, 0x4d,
	0x71, 0xdc, 0x4b, 0xb7, 0x5e, 0x45, 0xbe, 0x02, 0xfe, 0x04, 0x4c, 0xfa, 0x61, 0x26, 0x5e, 0x18,
	0xa6, 0xde, 0xbf, 0xbe, 0x07, 0x7c, 0x67, 0xf4, 0x17, 0x07, 0xe5, 0x29, 0xcd, 0xf5, 0x05, 0xe3,
	0xbf, 0xe7, 0x41, 0x2a, 0xb8, 0x83, 0xc3, 0xf7, 0xa3, 0x77, 0xf5, 0x9b, 0x43, 0xef, 0xea, 0x17,
	0x5c, 0xd2, 0xd7, 0x01, 0xa8, 0x51, 0x82, 0xf5, 0xe3, 0x40, 0xe2, 0x32, 0x8f, 0x03, 0xda, 0xaf,
	0xcc, 0x05, 0x48, 0xd3, 0xb3, 0x7c, 0x90, 0xb1, 0xcb, 0x80, 0x68, 0xbf, 0x32, 0x0f, 0x0a, 0x37,
	0xe3, 0x91, 0x7a, 0xd2, 0x22, 0x48, 0x5b, 0x84, 0xd5, 0xa8, 0xed, 0x89, 0x3d, 0x21, 0xd3, 0x47,
	0x0a, 0x45, 0x45, 0x92, 0x75, 0x71, 0x4e, 0xed, 0xfd, 0x26, 0x27, 0xcc, 0x98, 0x90, 0x2b, 0xfa,
	0xcd, 0xa1, 0x03, 0x51, 0x2a, 0x07, 0xb6, 0x1b, 0x0e, 0xa7, 0x67, 0x28, 0xe2, 0x0c, 0x3f, 0x03,
	0x69, 0x9d, 0x0b, 0x4d, 0x31, 0xa8, 0x93, 0x97, 0x2f, 0x80, 0xc8, 0x62, 0xbe, 0x2f, 0xaf, 0x32,
	0x04, 0x4e, 0x7c, 0x1b, 0x06, 0x2b, 0x00, 0x32, 0x42, 0x65, 0xb2, 0xf6, 0xa8, 0x7b, 0x60, 0xd7,
	0x89, 0x69, 0x5b, 0x32, 0x49, 0xa4, 0xd4, 0x23, 0xc4, 0xae, 0xd2, 0xee, 0x28, 0xe5, 0x66, 0x15,
	0xe5, 0x58, 0xb7, 0xc4, 0x82, 0x77, 0xc1, 0xbc, 0x7e, 0xdf, 0x32, 0x85, 0x8e, 0x50, 0xf9, 0x1e,
	0x46, 0x18, 0x93, 0x84, 0x3e, 0x85, 0x66, 0xb5, 0x76, 0x57, 0x2a, 0xcb, 0x4a, 0x27, 0x88, 0x7d,
	0x34, 0x41, 0xf5, 0x78, 0x02, 0xe9, 0x69, 0x44, 0x2c, 0xba, 0xbd, 0x4b, 0x60, 0x46, 0x6e, 0xcb,
	0x1e, 0xb7, 0xb4, 0x74, 0xcb, 0x0b, 0x55, 0xb7, 0xfd, 0x03, 0x90, 0xaa, 0xbb, 0x0a, 0x88, 0x19,
	0x53, 0x72, 0x3e, 0x96, 0x87, 0xcf, 0xc7, 0x96, 0x6f, 0xaa, 0xa6, 0x23, 0x74, 0x1d, 0x58, 0x28,
	0x99, 0x1e, 0xb9, 0x50, 0x92, 0x19, 0x58, 0x28, 0x19, 0x70, 0xea, 0x65, 0xbf, 0xcf, 0x8a, 0x54,
	0xee, 0xfb, 0xae, 0x48, 0xe5, 0x2f, 0x51, 0x91, 0xea, 0x2b, 0xdf, 0xc0, 0x51, 0xca, 0x37, 0x33,
	0x03, 0xca, 0x37, 0x7d, 0xc5, 0x99, 0xd9, 0x91, 0x8b, 0x33, 0x73, 0x43, 0x8a, 0x33, 0xef, 0x80,
	0x14, 0x75, 0x5d, 0x6e, 0xca, 0xc4, 0x38, 0x2f, 0x77, 0x9e, 0xd1, 0xc7, 0xd8, 0x5c, 0x97, 0x8b,
	0xac, 0x88, 0x92, 0x54, 0xff, 0x82, 0x4f, 0xc0, 0x84, 0x43, 0xb8, 0x18, 0x89, 0xab, 0x32, 0x55,
	0xdf, 0xff, 0x53, 0xbb, 0xb8, 0x76, 0xa9, 0xf7, 0xe0, 0x6d, 0xc2, 0x37, 0xab, 0x9d, 0x76, 0xf1,
	0x8a, 0xfc, 0x81, 0xae, 0x38, 0x84, 0xcb, 0xfa, 0xed, 0x54, 0x57, 0x25, 0xcd, 0x78, 0x71, 0x25,
	0x4d, 0x3e, 0xb0, 0x45, 0x4b, 0x68, 0xe9, 0x46, 0xa4, 0x76, 0xb6, 0x0e, 0x52, 0x12, 0x50, 0x1c,
	0x87, 0xc6, 0x2b, 0x83, 0xfb, 0xe7, 0x1f, 0x97, 0x95, 0xa9, 0x4e, 0xbb, 0x18, 0x90, 0x51, 0x94,
	0x14, 0x38, 0x92, 0x96, 0xde, 0x06, 0x93, 0x4c, 0x1d, 0x0e, 0xc6, 0x82, 0x84, 0xb8, 0x3a, 0xe4,
	0xec, 0x40, 0xbe, 0x1d, 0x7c, 0x1f, 0xf8, 0x47, 0xb8, 0xe9, 0xbb, 0x5e, 0xbb, 0xd8, 0x35, 0xa3,
	0xed, 0xfd, 0x87, 0xf7, 0x9b, 0x20, 0x13, 0x30, 0x2e, 0x39, 0x89, 0xc6, 0x75, 0xc9, 0xb3, 0xa6,
	0x34, 0xcf, 0x92, 0x13, 0x08, 0xdf, 0x00, 0xd9, 0x26, 0x23, 0x56, 0x68, 0xc5, 0x8c, 0x57, 0x17,
	0xc7, 0x96, 0xa7, 0xd1, 0xb4, 0x10, 0xfb, 0x66, 0x4c, 0xd8, 0x49, 0xb4, 0x70, 0x4d, 0x18, 0x85,
	0xf0, 0x8d, 0x3b, 0x58, 0x10, 0xf0, 0x47, 0xda, 0x8e, 0x7e, 0xa1, 0xef, 0x9a, 0xb7, 0x8c, 0xa2,
	0x7c, 0xc7, 0xcc, 0x75, 0xda, 0xc5, 0xa9, 0x2d, 0xcc, 0x38, 0xfa, 0x48, 0xde, 0x23, 0x6f, 0xa9,
	0x40, 0xd0, 0x17, 0xea, 0xab, 0xdf, 0xf1, 0xb6, 0xb1, 0x38, 0xd0, 0xf1, 0x76, 0x97, 0xe3, 0x6d,
	0xf8, 0x39, 0xb8, 0xd6, 0xcb, 0x2c, 0x29, 0xa9, 0x11, 0xfb, 0x44, 0x1d, 0x6a, 0xaf, 0x5d, 0x86,
	0xb9, 0x06, 0xf4, 0x13, 0x69, 0x84, 0x32, 0x87, 0x3f, 0x01, 0x69, 0xf5, 0x72, 0xac, 0xd6, 0xc0,
	0xd2, 0x90, 0xd4, 0x20, 0x4c, 0xd4, 0xbc, 0x03, 0x2f, 0xf8, 0x0d, 0x57, 0x00, 0xdc, 0x97, 0x75,
	0xc6, 0x33, 0xc1, 0x5e, 0x6b, 0xc4, 0xe1, 0xf8, 0x90, 0x18, 0x37, 0x16, 0xe3, 0xcb, 0x09, 0x94,
	0xd7, 0x9a, 0x9d, 0x40, 0x01, 0x7f, 0x00, 0xb2, 0x01, 0xeb, 0xd6, 0xf5, 0x88, 0x9b, 0x8b, 0xf1,
	0xe5, 0x2b, 0x28, 0xe3, 0x8b, 0x75, 0xa1, 0x01, 0x8b, 0x4d, 0x2a, 0xbc, 0x4c, 0x6c, 0x51, 0xfd,
	0x44, 0xc4, 0x8c, 0xd7, 0x65, 0xd6, 0xee, 0xbb, 0x94, 0xa8, 0xd7, 0x22, 0x5d, 0x19, 0x55, 0x67,
	0x16, 0x92, 0xce, 0xe5, 0x2a, 0x52, 0x3a, 0x26, 0x76, 0xb6, 0x94, 0x58, 0x54, 0x4b, 0x60, 0x15,
	0x64, 0x74, 0x13, 0x3e, 0xfc, 0x1b, 0x23, 0xc0, 0xa3, 0x69, 0xe5, 0xe4, 0xa3, 0x7c, 0x04, 0x34,
	0x72, 0xc0, 0xaf, 0x99, 0xf1, 0x03, 0x89, 0x53, 0xec, 0xbb, 0xc1, 0xfa, 0x5d, 0xd4, 0x48, 0x59,
	0xe5, 0xe8, 0x8b, 0x99, 0x20, 0xee, 0x9a, 0xc3, 0x0e, 0xe2, 0xed, 0xcc, 0x58, 0x96, 0xb8, 0xa3,
	0x11, 0x77, 0x05, 0x34, 0x40, 0xc5, 0xe0, 0x87, 0x00, 0x44, 0xea, 0xcc, 0x6f, 0x5e, 0xae, 0xce,
	0x8c, 0x22, 0xbe, 0x10, 0x83, 0x8c, 0x47, 0xdd, 0x13, 0x5b, 0xec, 0x47, 0x42, 0x45, 0xb6, 0x7b,
	0x4b, 0xe6, 0xfd, 0x7b, 0x9d, 0x76, 0x71, 0x7a, 0x27, 0xd4, 0x5c, 0xe6, 0x65, 0x69, 0x3a, 0x82,
	0xb8, 0x69, 0xc1, 0x2a, 0xc8, 0x07, 0x02, 0x91, 0x2c, 0x2c, 0xcc, 0xb1, 0xf1, 0x43, 0x9d, 0x29,
	0x7a, 0xd7, 0xfc, 0xae, 0xfc, 0x5f, 0x25, 0x94, 0x8b, 0x7a, 0x54, 0x31, 0xc7, 0x0b, 0x3f, 0x05,
	0xd9, 0x1e, 0x82, 0x05, 0x73, 0x60, 0xec, 0x98, 0xa8, 0x97, 0xd6, 0x14, 0x12, 0x3f, 0xe1, 0xac,
	0x7f, 0x31, 0x57, 0x0f, 0x87, 0xea, 0xe3, 0x5e, 0xe2, 0xc7, 0xf1, 0x85, 0x27, 0x20, 0xd3, 0xcd,
	0x07, 0x06, 0x78, 0x97, 0xa2, 0xde, 0x03, 0x92, 0xa8, 0x0f, 0x10, 0xc1, 0xd5, 0xcc, 0xf9, 0x43,
	0x00, 0x02, 0xde, 0xc1, 0xe0, 0x3d, 0x90, 0x0e, 0xff, 0xd7, 0x4c, 0x30, 0xe8, 0x31, 0x59, 0x18,
	0x1b, 0x46, 0x54, 0x10, 0x20, 0x81, 0xef, 0xd2, 0x67, 0x60, 0x7e, 0x5d, 0x72, 0xdf, 0x50, 0xad,
	0xa9, 0x7d, 0x05, 0x80, 0x10, 0x35, 0xa8, 0xf4, 0x0f, 0x03, 0x8d, 0x70, 0xf1, 0x54, 0x00, 0xbf,
	0xf4, 0x2f, 0x71, 0x30, 0xff, 0x58, 0xb2, 0xe2, 0xef, 0x03, 0x1e, 0xde, 0x07, 0x20, 0xfc, 0x6f,
	0xb4, 0xa1, 0x84, 0xff, 0x81, 0x30, 0x79, 0x88, 0xd9, 0xb1, 0xbe, 0x82, 0xa4, 0x0e, 0x7c, 0xc1,
	0xd2, 0x7f, 0xc6, 0xc1, 0xcc, 0x07, 0x84, 0xf7, 0x05, 0xb7, 0x07, 0x32, 0x61, 0x70, 0xe6, 0xcb,
	0x5f, 0x4b, 0xa6, 0x48, 0xa8, 0x67, 0xdf, 0x3d, 0xdc, 0xff, 0x8d, 0x83, 0xb9, 0x2d, 0x9b, 0x85,
	0xf1, 0x32, 0x3f, 0xe0, 0x4f, 0x40, 0x36, 0x9a, 0x00, 0xc2, 0x88, 0xdf, 0xb8, 0x60, 0xeb, 0x0f,
	0x8e, 0x39, 0x83, 0xa3, 0x16, 0xdf, 0x3d, 0x6a, 0xb1, 0x49, 0x5c, 0x6a, 0x11, 0xaa, 0x1f, 0x79,
	0xd5, 0x87, 0x7c, 0x43, 0x97, 0xff, 0x08, 0xa4, 0xfe, 0xd1, 0x4c, 0x7d, 0x88, 0x8b, 0x93, 0x27,
	0x8e, 0x03, 0xf5, 0x6f, 0x65, 0xf2, 0xf7, 0xd2, 0xaf, 0xe2, 0x60, 0x66, 0x77, 0xc0, 0x24, 0xfd,
	0x08, 0x4c, 0x8c, 0xba, 0x7a, 0x54, 0x4c, 0xda, 0xfc, 0x3b, 0xf7, 0xe8, 0xad, 0x07, 0x00, 0x84,
	0x87, 0x1b, 0xcc, 0x83, 0xe9, 0x9d, 0x47, 0x4f, 0x37, 0x90, 0xf9, 0x78, 0xfb, 0xe3, 0xed, 0x47,
	0x4f, 0xb7, 0x73, 0xb1, 0x50, 0x54, 0x29, 0xef, 0xed, 0x6d, 0xa0, 0x4f, 0x72, 0x71, 0x08, 0x41,
	0x46, 0x89, 0x36, 0xfe, 0x6e, 0x6f, 0x03, 0x6d, 0x97, 0xb7, 0x72, 0x89, 0xca, 0xbf, 0xc6, 0xbf,
	0x7a, 0x5e, 0x88, 0x7f, 0xfd, 0xbc, 0x10, 0xff, 0xe3, 0xf3, 0x42, 0xec, 0xcf, 0xcf, 0x0b, 0xb1,
	0xbf, 0x3c, 0x2f, 0xc4, 0xfe, 0xfa, 0xbc, 0x10, 0xfb, 0xf6, 0x79, 0x21, 0xfe, 0x8b, 0x4e, 0x21,
	0xfe, 0xcb, 0x4e, 0x21, 0xf6, 0xbb, 0x4e, 0x21, 0xfe, 0xfb, 0x4e, 0x21, 0xf6, 0x65, 0xa7, 0x10,
	0xfb, 0x43, 0xa7, 0x10, 0xfb, 0xaa, 0x53, 0x88, 0x7f, 0xdd, 0x29, 0xc4, 0xff, 0xd8, 0x29, 0xc4,
	0xfe, 0xdc, 0x29, 0xc4, 0xff, 0xd2, 0x29, 0xc4, 0xfe, 0xda, 0x29, 0xc4, 0xbf, 0xed, 0x14, 0x62,
	0xbf, 0x38, 0x2f, 0xc4, 0x7e, 0x79, 0x5e, 0x88, 0xff, 0xfa, 0xbc, 0x10, 0xfb, 0xcd, 0x79, 0x21,
	0xfe, 0xdb, 0xf3, 0x42, 0xec, 0x77, 0xe7, 0x85, 0xd8, 0xef, 0xcf, 0x0b, 0xf1, 0x2f, 0xcf, 0x0b,
	0xf1, 0x3f, 0x9c, 0x17, 0xe2, 0x9f, 0xbe, 0x3d, 0x2a, 0xab, 0xe4, 0x8e, 0xb7, 0xbf, 0x3f, 0x21,
	0x47, 0xe4, 0xce, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x19, 0xc6, 0x35, 0x44, 0xe2, 0x2a, 0x00,
	0x00,
}
