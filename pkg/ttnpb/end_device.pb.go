// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: go.thethings.network/lorawan-stack/api/end_device.proto

package ttnpb

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/types"

import go_thethings_network_lorawan_stack_pkg_types "go.thethings.network/lorawan-stack/pkg/types"
import time "time"

import binary "encoding/binary"
import types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

type Session struct {
	DevAddr          go_thethings_network_lorawan_stack_pkg_types.DevAddr `protobuf:"bytes,2,opt,name=dev_addr,json=devAddr,proto3,customtype=go.thethings.network/lorawan-stack/pkg/types.DevAddr" json:"dev_addr"`
	SessionKeys      `protobuf:"bytes,3,opt,name=keys,embedded=keys" json:"keys"`
	NextFCntUp       uint32    `protobuf:"varint,4,opt,name=next_f_cnt_up,json=nextFCntUp,proto3" json:"next_f_cnt_up,omitempty"`
	NextNFCntDown    uint32    `protobuf:"varint,5,opt,name=next_n_f_cnt_down,json=nextNFCntDown,proto3" json:"next_n_f_cnt_down,omitempty"`
	NextAFCntDown    uint32    `protobuf:"varint,6,opt,name=next_a_f_cnt_down,json=nextAFCntDown,proto3" json:"next_a_f_cnt_down,omitempty"`
	LastConfFCntDown uint32    `protobuf:"varint,7,opt,name=last_conf_f_cnt_down,json=lastConfFCntDown,proto3" json:"last_conf_f_cnt_down,omitempty"`
	StartedAt        time.Time `protobuf:"bytes,8,opt,name=started_at,json=startedAt,stdtime" json:"started_at"`
}

func (m *Session) Reset()                    { *m = Session{} }
func (m *Session) String() string            { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()               {}
func (*Session) Descriptor() ([]byte, []int) { return fileDescriptorEndDevice, []int{0} }

func (m *Session) GetNextFCntUp() uint32 {
	if m != nil {
		return m.NextFCntUp
	}
	return 0
}

func (m *Session) GetNextNFCntDown() uint32 {
	if m != nil {
		return m.NextNFCntDown
	}
	return 0
}

func (m *Session) GetNextAFCntDown() uint32 {
	if m != nil {
		return m.NextAFCntDown
	}
	return 0
}

func (m *Session) GetLastConfFCntDown() uint32 {
	if m != nil {
		return m.LastConfFCntDown
	}
	return 0
}

func (m *Session) GetStartedAt() time.Time {
	if m != nil {
		return m.StartedAt
	}
	return time.Time{}
}

type DeviceFormatters struct {
	// Type of formatter used to process uplink messages.
	UpFormatter PayloadFormatter `protobuf:"varint,1,opt,name=up_formatter,json=upFormatter,proto3,enum=ttn.lorawan.v3.PayloadFormatter" json:"up_formatter,omitempty"`
	// Parameter used by the uplink formatter.
	UpFormatterParameter string `protobuf:"bytes,2,opt,name=up_formatter_parameter,json=upFormatterParameter,proto3" json:"up_formatter_parameter,omitempty"`
	// Type of formatter used to format downlink messages.
	DownFormatter PayloadFormatter `protobuf:"varint,3,opt,name=down_formatter,json=downFormatter,proto3,enum=ttn.lorawan.v3.PayloadFormatter" json:"down_formatter,omitempty"`
	// Parameter used by the downlink formatter.
	DownFormatterParameter string `protobuf:"bytes,4,opt,name=down_formatter_parameter,json=downFormatterParameter,proto3" json:"down_formatter_parameter,omitempty"`
}

func (m *DeviceFormatters) Reset()                    { *m = DeviceFormatters{} }
func (m *DeviceFormatters) String() string            { return proto.CompactTextString(m) }
func (*DeviceFormatters) ProtoMessage()               {}
func (*DeviceFormatters) Descriptor() ([]byte, []int) { return fileDescriptorEndDevice, []int{1} }

func (m *DeviceFormatters) GetUpFormatter() PayloadFormatter {
	if m != nil {
		return m.UpFormatter
	}
	return PayloadFormatter_FORMATTER_NONE
}

func (m *DeviceFormatters) GetUpFormatterParameter() string {
	if m != nil {
		return m.UpFormatterParameter
	}
	return ""
}

func (m *DeviceFormatters) GetDownFormatter() PayloadFormatter {
	if m != nil {
		return m.DownFormatter
	}
	return PayloadFormatter_FORMATTER_NONE
}

func (m *DeviceFormatters) GetDownFormatterParameter() string {
	if m != nil {
		return m.DownFormatterParameter
	}
	return ""
}

type DeviceBrand struct {
	// ID of the device brand.
	ID string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the brand.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// URL for this brand.
	URL string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	// Logos of the brand.
	Logos []string `protobuf:"bytes,4,rep,name=logos" json:"logos,omitempty"`
}

func (m *DeviceBrand) Reset()                    { *m = DeviceBrand{} }
func (m *DeviceBrand) String() string            { return proto.CompactTextString(m) }
func (*DeviceBrand) ProtoMessage()               {}
func (*DeviceBrand) Descriptor() ([]byte, []int) { return fileDescriptorEndDevice, []int{2} }

func (m *DeviceBrand) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *DeviceBrand) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeviceBrand) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *DeviceBrand) GetLogos() []string {
	if m != nil {
		return m.Logos
	}
	return nil
}

type EndDeviceModel struct {
	// ID of the model.
	ModelID string `protobuf:"bytes,1,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// ID of the brand of this device.
	BrandID string `protobuf:"bytes,2,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`
	// Name of the device model.
	ModelName string `protobuf:"bytes,3,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
}

func (m *EndDeviceModel) Reset()                    { *m = EndDeviceModel{} }
func (m *EndDeviceModel) String() string            { return proto.CompactTextString(m) }
func (*EndDeviceModel) ProtoMessage()               {}
func (*EndDeviceModel) Descriptor() ([]byte, []int) { return fileDescriptorEndDevice, []int{3} }

func (m *EndDeviceModel) GetModelID() string {
	if m != nil {
		return m.ModelID
	}
	return ""
}

func (m *EndDeviceModel) GetBrandID() string {
	if m != nil {
		return m.BrandID
	}
	return ""
}

func (m *EndDeviceModel) GetModelName() string {
	if m != nil {
		return m.ModelName
	}
	return ""
}

type EndDeviceVersion struct {
	// Model of the device.
	EndDeviceModel `protobuf:"bytes,1,opt,name=model,embedded=model" json:"model"`
	// LoRaWAN MAC version.
	LoRaWANVersion MACVersion `protobuf:"varint,2,opt,name=lorawan_version,json=lorawanVersion,proto3,enum=ttn.lorawan.v3.MACVersion" json:"lorawan_version,omitempty"`
	// LoRaWAN PHY version.
	LoRaWANPHYVersion PHYVersion `protobuf:"varint,3,opt,name=lorawan_phy_version,json=lorawanPhyVersion,proto3,enum=ttn.lorawan.v3.PHYVersion" json:"lorawan_phy_version,omitempty"`
	// Hardware version of this end-device.
	HardwareVersion string `protobuf:"bytes,4,opt,name=hardware_version,json=hardwareVersion,proto3" json:"hardware_version,omitempty"`
	// Firmware version of this end-device.
	FirmwareVersion string `protobuf:"bytes,5,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`
	// Time after which a rejoin request will be sent.
	// Default formatters defining the payload formats for this end device.
	DefaultFormatters *DeviceFormatters `protobuf:"bytes,7,opt,name=default_formatters,json=defaultFormatters" json:"default_formatters,omitempty"`
	// DefaultMACParameters are the default MAC layer parameters, to which device is reset by default.(e.g. on join or ResetInd).
	DefaultMACParameters *MACParameters `protobuf:"bytes,8,opt,name=default_mac_parameters,json=defaultMacParameters" json:"default_mac_parameters,omitempty"`
	// Min frequency the device is capable of using (in Hz).
	MinFrequency uint64 `protobuf:"varint,9,opt,name=min_frequency,json=minFrequency,proto3" json:"min_frequency,omitempty"`
	// Max frequency the device is capable of using (in Hz).
	MaxFrequency uint64 `protobuf:"varint,10,opt,name=max_frequency,json=maxFrequency,proto3" json:"max_frequency,omitempty"`
	// Indicator that the device may reset the frame counters (not LoRaWAN compliant).
	FCntResets bool `protobuf:"varint,11,opt,name=f_cnt_resets,json=fCntResets,proto3" json:"f_cnt_resets,omitempty"`
	// Indicator that the device uses 16-bit frame counters.
	Supports32BitFCnt bool `protobuf:"varint,12,opt,name=supports_32_bit_f_cnt,json=supports32BitFCnt,proto3" json:"supports_32_bit_f_cnt,omitempty"`
	// DisableJoinNonceCheck specifies whether LoRaWAN DevNonce check procedure should be disabled.
	DisableJoinNonceCheck bool `protobuf:"varint,13,opt,name=disable_join_nonce_check,json=disableJoinNonceCheck,proto3" json:"disable_join_nonce_check,omitempty"`
}

func (m *EndDeviceVersion) Reset()                    { *m = EndDeviceVersion{} }
func (m *EndDeviceVersion) String() string            { return proto.CompactTextString(m) }
func (*EndDeviceVersion) ProtoMessage()               {}
func (*EndDeviceVersion) Descriptor() ([]byte, []int) { return fileDescriptorEndDevice, []int{4} }

func (m *EndDeviceVersion) GetLoRaWANVersion() MACVersion {
	if m != nil {
		return m.LoRaWANVersion
	}
	return MAC_UNKNOWN
}

func (m *EndDeviceVersion) GetLoRaWANPHYVersion() PHYVersion {
	if m != nil {
		return m.LoRaWANPHYVersion
	}
	return PHY_UNKNOWN
}

func (m *EndDeviceVersion) GetHardwareVersion() string {
	if m != nil {
		return m.HardwareVersion
	}
	return ""
}

func (m *EndDeviceVersion) GetFirmwareVersion() string {
	if m != nil {
		return m.FirmwareVersion
	}
	return ""
}

func (m *EndDeviceVersion) GetDefaultFormatters() *DeviceFormatters {
	if m != nil {
		return m.DefaultFormatters
	}
	return nil
}

func (m *EndDeviceVersion) GetDefaultMACParameters() *MACParameters {
	if m != nil {
		return m.DefaultMACParameters
	}
	return nil
}

func (m *EndDeviceVersion) GetMinFrequency() uint64 {
	if m != nil {
		return m.MinFrequency
	}
	return 0
}

func (m *EndDeviceVersion) GetMaxFrequency() uint64 {
	if m != nil {
		return m.MaxFrequency
	}
	return 0
}

func (m *EndDeviceVersion) GetFCntResets() bool {
	if m != nil {
		return m.FCntResets
	}
	return false
}

func (m *EndDeviceVersion) GetSupports32BitFCnt() bool {
	if m != nil {
		return m.Supports32BitFCnt
	}
	return false
}

func (m *EndDeviceVersion) GetDisableJoinNonceCheck() bool {
	if m != nil {
		return m.DisableJoinNonceCheck
	}
	return false
}

type MACSettings struct {
	// Whether to disable ADR or not.
	DisableADR bool `protobuf:"varint,1,opt,name=disable_adr,json=disableAdr,proto3" json:"disable_adr,omitempty"`
	// The ADR margin.
	ADRMargin uint32 `protobuf:"varint,2,opt,name=adr_margin,json=adrMargin,proto3" json:"adr_margin,omitempty"`
	// Class B timeout.
	ClassBTimeout time.Time `protobuf:"bytes,3,opt,name=class_b_timeout,json=classBTimeout,stdtime" json:"class_b_timeout"`
	// Class C timeout.
	ClassCTimeout time.Time `protobuf:"bytes,4,opt,name=class_c_timeout,json=classCTimeout,stdtime" json:"class_c_timeout"`
}

func (m *MACSettings) Reset()                    { *m = MACSettings{} }
func (m *MACSettings) String() string            { return proto.CompactTextString(m) }
func (*MACSettings) ProtoMessage()               {}
func (*MACSettings) Descriptor() ([]byte, []int) { return fileDescriptorEndDevice, []int{5} }

func (m *MACSettings) GetDisableADR() bool {
	if m != nil {
		return m.DisableADR
	}
	return false
}

func (m *MACSettings) GetADRMargin() uint32 {
	if m != nil {
		return m.ADRMargin
	}
	return 0
}

func (m *MACSettings) GetClassBTimeout() time.Time {
	if m != nil {
		return m.ClassBTimeout
	}
	return time.Time{}
}

func (m *MACSettings) GetClassCTimeout() time.Time {
	if m != nil {
		return m.ClassCTimeout
	}
	return time.Time{}
}

// MACParameters represent the parameters of the device's MAC layer (active or desired).
// This is used internally by the Network Server and is read only.
type MACParameters struct {
	// Maximum EIRP power (in dBm).
	MaxEIRP float32 `protobuf:"fixed32,1,opt,name=max_eirp,json=maxEirp,proto3" json:"max_eirp,omitempty"`
	// Uplink dwell time is set (400ms).
	UplinkDwellTime bool `protobuf:"varint,2,opt,name=uplink_dwell_time,json=uplinkDwellTime,proto3" json:"uplink_dwell_time,omitempty"`
	// Downlink dwell time is set (400ms).
	DownlinkDwellTime bool `protobuf:"varint,3,opt,name=downlink_dwell_time,json=downlinkDwellTime,proto3" json:"downlink_dwell_time,omitempty"`
	// ADR: data rate index to use.
	ADRDataRateIndex uint32 `protobuf:"varint,4,opt,name=adr_data_rate_index,json=adrDataRateIndex,proto3" json:"adr_data_rate_index,omitempty"`
	// ADR: transmission power index to use.
	ADRTXPowerIndex uint32 `protobuf:"varint,5,opt,name=adr_tx_power_index,json=adrTxPowerIndex,proto3" json:"adr_tx_power_index,omitempty"`
	// ADR: number of retransmissions.
	ADRNbTrans uint32 `protobuf:"varint,6,opt,name=adr_nb_trans,json=adrNbTrans,proto3" json:"adr_nb_trans,omitempty"`
	// ADR: number of messages to wait before setting ADRAckReq.
	ADRAckLimit uint32 `protobuf:"varint,7,opt,name=adr_ack_limit,json=adrAckLimit,proto3" json:"adr_ack_limit,omitempty"`
	// ADR: number of messages to wait after setting ADRAckReq and before changing TxPower or DataRate.
	ADRAckDelay uint32 `protobuf:"varint,8,opt,name=adr_ack_delay,json=adrAckDelay,proto3" json:"adr_ack_delay,omitempty"`
	// Rx1 delay in seconds (Rx2 delay is Rx1 delay + 1 second).
	Rx1Delay uint32 `protobuf:"varint,9,opt,name=rx1_delay,json=rx1Delay,proto3" json:"rx1_delay,omitempty"`
	// Data rate offset for Rx1.
	Rx1DataRateOffset uint32 `protobuf:"varint,10,opt,name=rx1_data_rate_offset,json=rx1DataRateOffset,proto3" json:"rx1_data_rate_offset,omitempty"`
	// Data rate index for Rx2.
	Rx2DataRateIndex uint32 `protobuf:"varint,11,opt,name=rx2_data_rate_index,json=rx2DataRateIndex,proto3" json:"rx2_data_rate_index,omitempty"`
	// Frequency for Rx2.
	Rx2Frequency uint64 `protobuf:"varint,12,opt,name=rx2_frequency,json=rx2Frequency,proto3" json:"rx2_frequency,omitempty"`
	// Time within which a rejoin request must be sent.
	RejoinTimePeriodicity RejoinTimePeriod `protobuf:"varint,13,opt,name=rejoin_time_periodicity,json=rejoinTimePeriodicity,proto3,enum=ttn.lorawan.v3.RejoinTimePeriod" json:"rejoin_time_periodicity,omitempty"`
	// Frequency of the class B ping slot.
	PingSlotFrequency uint64 `protobuf:"varint,15,opt,name=ping_slot_frequency,json=pingSlotFrequency,proto3" json:"ping_slot_frequency,omitempty"`
	// Data rate index of the class B ping slot.
	PingSlotDataRateIndex uint32 `protobuf:"varint,16,opt,name=ping_slot_data_rate_index,json=pingSlotDataRateIndex,proto3" json:"ping_slot_data_rate_index,omitempty"`
	// Aggregated duty cycle of the device.
	DutyCycle AggregatedDutyCycle `protobuf:"varint,17,opt,name=duty_cycle,json=dutyCycle,proto3,enum=ttn.lorawan.v3.AggregatedDutyCycle" json:"duty_cycle,omitempty"`
}

func (m *MACParameters) Reset()                    { *m = MACParameters{} }
func (m *MACParameters) String() string            { return proto.CompactTextString(m) }
func (*MACParameters) ProtoMessage()               {}
func (*MACParameters) Descriptor() ([]byte, []int) { return fileDescriptorEndDevice, []int{6} }

func (m *MACParameters) GetMaxEIRP() float32 {
	if m != nil {
		return m.MaxEIRP
	}
	return 0
}

func (m *MACParameters) GetUplinkDwellTime() bool {
	if m != nil {
		return m.UplinkDwellTime
	}
	return false
}

func (m *MACParameters) GetDownlinkDwellTime() bool {
	if m != nil {
		return m.DownlinkDwellTime
	}
	return false
}

func (m *MACParameters) GetADRDataRateIndex() uint32 {
	if m != nil {
		return m.ADRDataRateIndex
	}
	return 0
}

func (m *MACParameters) GetADRTXPowerIndex() uint32 {
	if m != nil {
		return m.ADRTXPowerIndex
	}
	return 0
}

func (m *MACParameters) GetADRNbTrans() uint32 {
	if m != nil {
		return m.ADRNbTrans
	}
	return 0
}

func (m *MACParameters) GetADRAckLimit() uint32 {
	if m != nil {
		return m.ADRAckLimit
	}
	return 0
}

func (m *MACParameters) GetADRAckDelay() uint32 {
	if m != nil {
		return m.ADRAckDelay
	}
	return 0
}

func (m *MACParameters) GetRx1Delay() uint32 {
	if m != nil {
		return m.Rx1Delay
	}
	return 0
}

func (m *MACParameters) GetRx1DataRateOffset() uint32 {
	if m != nil {
		return m.Rx1DataRateOffset
	}
	return 0
}

func (m *MACParameters) GetRx2DataRateIndex() uint32 {
	if m != nil {
		return m.Rx2DataRateIndex
	}
	return 0
}

func (m *MACParameters) GetRx2Frequency() uint64 {
	if m != nil {
		return m.Rx2Frequency
	}
	return 0
}

func (m *MACParameters) GetRejoinTimePeriodicity() RejoinTimePeriod {
	if m != nil {
		return m.RejoinTimePeriodicity
	}
	return REJOIN_TIME_0
}

func (m *MACParameters) GetPingSlotFrequency() uint64 {
	if m != nil {
		return m.PingSlotFrequency
	}
	return 0
}

func (m *MACParameters) GetPingSlotDataRateIndex() uint32 {
	if m != nil {
		return m.PingSlotDataRateIndex
	}
	return 0
}

func (m *MACParameters) GetDutyCycle() AggregatedDutyCycle {
	if m != nil {
		return m.DutyCycle
	}
	return DUTY_CYCLE_1
}

// MACState represents the state of MAC layer of the device.
// MACState is reset on each join for OTAA or ResetInd for ABP devices.
// This is used internally by the Network Server and is read only.
type MACState struct {
	// Current LoRaWAN MAC parameters.
	MACParameters `protobuf:"bytes,1,opt,name=current_parameters,json=currentParameters,embedded=current_parameters" json:"current_parameters"`
	// Desired LoRaWAN MAC parameters.
	DesiredMACParameters MACParameters `protobuf:"bytes,2,opt,name=desired_parameters,json=desiredParameters" json:"desired_parameters"`
	// Currently active LoRaWAN device class
	// - Device class is A by default
	// - If device sets ClassB bit in uplink, this will be set to B
	// - If device sent DeviceModeInd MAC message, this will be set to that value
	DeviceClass Class `protobuf:"varint,3,opt,name=device_class,json=deviceClass,proto3,enum=ttn.lorawan.v3.Class" json:"device_class,omitempty"`
	// LoRaWAN MAC version.
	LoRaWANVersion MACVersion `protobuf:"varint,4,opt,name=lorawan_version,json=lorawanVersion,proto3,enum=ttn.lorawan.v3.MACVersion" json:"lorawan_version,omitempty"`
	// Time when a new confirmed downlink message or MAC command is ready to be scheduled for class C.
	NextConfirmedDownlinkAt *time.Time `protobuf:"bytes,6,opt,name=next_confirmed_downlink_at,json=nextConfirmedDownlinkAt,stdtime" json:"next_confirmed_downlink_at,omitempty"`
	// Periodicity of the class B ping slot
	PingSlotPeriodicity PingSlotPeriod `protobuf:"varint,7,opt,name=ping_slot_periodicity,json=pingSlotPeriodicity,proto3,enum=ttn.lorawan.v3.PingSlotPeriod" json:"ping_slot_periodicity,omitempty"`
	// A confirmed application downlink, for which an acknowledgment is expected to arrive.
	PendingApplicationDownlink *ApplicationDownlink `protobuf:"bytes,8,opt,name=pending_application_downlink,json=pendingApplicationDownlink" json:"pending_application_downlink,omitempty"`
	// Queued MAC responses.
	// Regenerated on each uplink.
	QueuedResponses []*MACCommand `protobuf:"bytes,9,rep,name=queued_responses,json=queuedResponses" json:"queued_responses,omitempty"`
	// Pending MAC requests(i.e. sent requests, for which no response has been received yet).
	// Regenerated on each downlink.
	PendingRequests []*MACCommand `protobuf:"bytes,10,rep,name=pending_requests,json=pendingRequests" json:"pending_requests,omitempty"`
}

func (m *MACState) Reset()                    { *m = MACState{} }
func (m *MACState) String() string            { return proto.CompactTextString(m) }
func (*MACState) ProtoMessage()               {}
func (*MACState) Descriptor() ([]byte, []int) { return fileDescriptorEndDevice, []int{7} }

func (m *MACState) GetDesiredMACParameters() MACParameters {
	if m != nil {
		return m.DesiredMACParameters
	}
	return MACParameters{}
}

func (m *MACState) GetDeviceClass() Class {
	if m != nil {
		return m.DeviceClass
	}
	return CLASS_A
}

func (m *MACState) GetLoRaWANVersion() MACVersion {
	if m != nil {
		return m.LoRaWANVersion
	}
	return MAC_UNKNOWN
}

func (m *MACState) GetNextConfirmedDownlinkAt() *time.Time {
	if m != nil {
		return m.NextConfirmedDownlinkAt
	}
	return nil
}

func (m *MACState) GetPingSlotPeriodicity() PingSlotPeriod {
	if m != nil {
		return m.PingSlotPeriodicity
	}
	return PING_EVERY_1S
}

func (m *MACState) GetPendingApplicationDownlink() *ApplicationDownlink {
	if m != nil {
		return m.PendingApplicationDownlink
	}
	return nil
}

func (m *MACState) GetQueuedResponses() []*MACCommand {
	if m != nil {
		return m.QueuedResponses
	}
	return nil
}

func (m *MACState) GetPendingRequests() []*MACCommand {
	if m != nil {
		return m.PendingRequests
	}
	return nil
}

type EndDevice struct {
	EndDeviceVersion     `protobuf:"bytes,1,opt,name=version,embedded=version" json:"version"`
	EndDeviceIdentifiers `protobuf:"bytes,2,opt,name=ids,embedded=ids" json:"ids"`
	// Root keys of the device.
	RootKeys *RootKeys `protobuf:"bytes,3,opt,name=root_keys,json=rootKeys" json:"root_keys,omitempty"`
	// NetworkServerAddress specifies Address(host:port) of the Network Server associated with this device.
	NetworkServerAddress string `protobuf:"bytes,4,opt,name=network_server_address,json=networkServerAddress,proto3" json:"network_server_address,omitempty"`
	// ApplicationServerAddress specifies Address(host:port) of the Application Server associated with this device.
	ApplicationServerAddress string `protobuf:"bytes,5,opt,name=application_server_address,json=applicationServerAddress,proto3" json:"application_server_address,omitempty"`
	// frequency_plan_id indicates the ID of the frequency plan.
	FrequencyPlanID string `protobuf:"bytes,6,opt,name=frequency_plan_id,json=frequencyPlanId,proto3" json:"frequency_plan_id,omitempty"`
	// LoRaWAN MAC settings for the device.
	MACSettings *MACSettings `protobuf:"bytes,7,opt,name=mac_settings,json=macSettings" json:"mac_settings,omitempty"`
	// MACState represents the state of device's MAC layer.
	MACState *MACState `protobuf:"bytes,8,opt,name=mac_state,json=macState" json:"mac_state,omitempty"`
	// Whether the device supports Join flow or not.
	SupportsJoin bool `protobuf:"varint,9,opt,name=supports_join,json=supportsJoin,proto3" json:"supports_join,omitempty"`
	// Current session.
	Session *Session `protobuf:"bytes,10,opt,name=session" json:"session,omitempty"`
	// Fallback session (stored until RekeyInd is received).
	SessionFallback *Session `protobuf:"bytes,11,opt,name=session_fallback,json=sessionFallback" json:"session_fallback,omitempty"`
	// Next DevNonce to be expected (in case of LoRaWAN 1.1).
	NextDevNonce uint32 `protobuf:"varint,12,opt,name=next_dev_nonce,json=nextDevNonce,proto3" json:"next_dev_nonce,omitempty"`
	// Used DevNonces (in case of LoRaWAN 1.0).
	UsedDevNonces []uint32 `protobuf:"varint,13,rep,packed,name=used_dev_nonces,json=usedDevNonces" json:"used_dev_nonces,omitempty"`
	// Next JoinNonce/AppNonce to be used (in case of LoRaWAN 1.1).
	NextJoinNonce uint32 `protobuf:"varint,14,opt,name=next_join_nonce,json=nextJoinNonce,proto3" json:"next_join_nonce,omitempty"`
	// Used JoinNonces/AppNonce (in case of LoRaWAN 1.0).
	UsedJoinNonces []uint32 `protobuf:"varint,15,rep,packed,name=used_join_nonces,json=usedJoinNonces" json:"used_join_nonces,omitempty"`
	// Next Rejoin counter (type 0/2) to expect.
	NextRJCount0 uint32 `protobuf:"varint,16,opt,name=next_rj_count_0,json=nextRjCount0,proto3" json:"next_rj_count_0,omitempty"`
	// Next Rejoin counter (type 1) to expect.
	NextRJCount1 uint32 `protobuf:"varint,17,opt,name=next_rj_count_1,json=nextRjCount1,proto3" json:"next_rj_count_1,omitempty"`
	// Location of the device.
	Location *Location `protobuf:"bytes,18,opt,name=location" json:"location,omitempty"`
	// Battery percentage of the device.
	BatteryPercentage float32 `protobuf:"fixed32,19,opt,name=battery_percentage,json=batteryPercentage,proto3" json:"battery_percentage,omitempty"`
	// Demodulation signal-to-noise ratio(in dB).
	DownlinkMargin int32 `protobuf:"varint,20,opt,name=downlink_margin,json=downlinkMargin,proto3" json:"downlink_margin,omitempty"`
	// Recent uplink messages sorted by time.
	RecentUplinks []*UplinkMessage `protobuf:"bytes,21,rep,name=recent_uplinks,json=recentUplinks" json:"recent_uplinks,omitempty"`
	// Recent downlink messages sorted by time.
	RecentDownlinks []*DownlinkMessage `protobuf:"bytes,22,rep,name=recent_downlinks,json=recentDownlinks" json:"recent_downlinks,omitempty"`
	// Queued Application downlink messages.
	QueuedApplicationDownlinks []*ApplicationDownlink `protobuf:"bytes,23,rep,name=queued_application_downlinks,json=queuedApplicationDownlinks" json:"queued_application_downlinks,omitempty"`
	// Formatters defining the payload formats.
	DeviceFormatters `protobuf:"bytes,24,opt,name=formatters,embedded=formatters" json:"formatters"`
	// Device Attributes
	// - field names are written in snake_case
	Attributes *google_protobuf1.Struct `protobuf:"bytes,25,opt,name=attributes" json:"attributes,omitempty"`
	// Time when the device status was received last updated(e.g. via DevStatus MAC command).
	StatusUpdatedAt *time.Time `protobuf:"bytes,27,opt,name=status_updated_at,json=statusUpdatedAt,stdtime" json:"status_updated_at,omitempty"`
	CreatedAt       time.Time  `protobuf:"bytes,97,opt,name=created_at,json=createdAt,stdtime" json:"created_at"`
	UpdatedAt       time.Time  `protobuf:"bytes,98,opt,name=updated_at,json=updatedAt,stdtime" json:"updated_at"`
}

func (m *EndDevice) Reset()                    { *m = EndDevice{} }
func (m *EndDevice) String() string            { return proto.CompactTextString(m) }
func (*EndDevice) ProtoMessage()               {}
func (*EndDevice) Descriptor() ([]byte, []int) { return fileDescriptorEndDevice, []int{8} }

func (m *EndDevice) GetRootKeys() *RootKeys {
	if m != nil {
		return m.RootKeys
	}
	return nil
}

func (m *EndDevice) GetNetworkServerAddress() string {
	if m != nil {
		return m.NetworkServerAddress
	}
	return ""
}

func (m *EndDevice) GetApplicationServerAddress() string {
	if m != nil {
		return m.ApplicationServerAddress
	}
	return ""
}

func (m *EndDevice) GetFrequencyPlanID() string {
	if m != nil {
		return m.FrequencyPlanID
	}
	return ""
}

func (m *EndDevice) GetMACSettings() *MACSettings {
	if m != nil {
		return m.MACSettings
	}
	return nil
}

func (m *EndDevice) GetMACState() *MACState {
	if m != nil {
		return m.MACState
	}
	return nil
}

func (m *EndDevice) GetSupportsJoin() bool {
	if m != nil {
		return m.SupportsJoin
	}
	return false
}

func (m *EndDevice) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *EndDevice) GetSessionFallback() *Session {
	if m != nil {
		return m.SessionFallback
	}
	return nil
}

func (m *EndDevice) GetNextDevNonce() uint32 {
	if m != nil {
		return m.NextDevNonce
	}
	return 0
}

func (m *EndDevice) GetUsedDevNonces() []uint32 {
	if m != nil {
		return m.UsedDevNonces
	}
	return nil
}

func (m *EndDevice) GetNextJoinNonce() uint32 {
	if m != nil {
		return m.NextJoinNonce
	}
	return 0
}

func (m *EndDevice) GetUsedJoinNonces() []uint32 {
	if m != nil {
		return m.UsedJoinNonces
	}
	return nil
}

func (m *EndDevice) GetNextRJCount0() uint32 {
	if m != nil {
		return m.NextRJCount0
	}
	return 0
}

func (m *EndDevice) GetNextRJCount1() uint32 {
	if m != nil {
		return m.NextRJCount1
	}
	return 0
}

func (m *EndDevice) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *EndDevice) GetBatteryPercentage() float32 {
	if m != nil {
		return m.BatteryPercentage
	}
	return 0
}

func (m *EndDevice) GetDownlinkMargin() int32 {
	if m != nil {
		return m.DownlinkMargin
	}
	return 0
}

func (m *EndDevice) GetRecentUplinks() []*UplinkMessage {
	if m != nil {
		return m.RecentUplinks
	}
	return nil
}

func (m *EndDevice) GetRecentDownlinks() []*DownlinkMessage {
	if m != nil {
		return m.RecentDownlinks
	}
	return nil
}

func (m *EndDevice) GetQueuedApplicationDownlinks() []*ApplicationDownlink {
	if m != nil {
		return m.QueuedApplicationDownlinks
	}
	return nil
}

func (m *EndDevice) GetAttributes() *google_protobuf1.Struct {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *EndDevice) GetStatusUpdatedAt() *time.Time {
	if m != nil {
		return m.StatusUpdatedAt
	}
	return nil
}

func (m *EndDevice) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *EndDevice) GetUpdatedAt() time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return time.Time{}
}

type EndDevices struct {
	EndDevices []*EndDevice `protobuf:"bytes,1,rep,name=end_devices,json=endDevices" json:"end_devices,omitempty"`
}

func (m *EndDevices) Reset()                    { *m = EndDevices{} }
func (m *EndDevices) String() string            { return proto.CompactTextString(m) }
func (*EndDevices) ProtoMessage()               {}
func (*EndDevices) Descriptor() ([]byte, []int) { return fileDescriptorEndDevice, []int{9} }

func (m *EndDevices) GetEndDevices() []*EndDevice {
	if m != nil {
		return m.EndDevices
	}
	return nil
}

func init() {
	proto.RegisterType((*Session)(nil), "ttn.lorawan.v3.Session")
	golang_proto.RegisterType((*Session)(nil), "ttn.lorawan.v3.Session")
	proto.RegisterType((*DeviceFormatters)(nil), "ttn.lorawan.v3.DeviceFormatters")
	golang_proto.RegisterType((*DeviceFormatters)(nil), "ttn.lorawan.v3.DeviceFormatters")
	proto.RegisterType((*DeviceBrand)(nil), "ttn.lorawan.v3.DeviceBrand")
	golang_proto.RegisterType((*DeviceBrand)(nil), "ttn.lorawan.v3.DeviceBrand")
	proto.RegisterType((*EndDeviceModel)(nil), "ttn.lorawan.v3.EndDeviceModel")
	golang_proto.RegisterType((*EndDeviceModel)(nil), "ttn.lorawan.v3.EndDeviceModel")
	proto.RegisterType((*EndDeviceVersion)(nil), "ttn.lorawan.v3.EndDeviceVersion")
	golang_proto.RegisterType((*EndDeviceVersion)(nil), "ttn.lorawan.v3.EndDeviceVersion")
	proto.RegisterType((*MACSettings)(nil), "ttn.lorawan.v3.MACSettings")
	golang_proto.RegisterType((*MACSettings)(nil), "ttn.lorawan.v3.MACSettings")
	proto.RegisterType((*MACParameters)(nil), "ttn.lorawan.v3.MACParameters")
	golang_proto.RegisterType((*MACParameters)(nil), "ttn.lorawan.v3.MACParameters")
	proto.RegisterType((*MACState)(nil), "ttn.lorawan.v3.MACState")
	golang_proto.RegisterType((*MACState)(nil), "ttn.lorawan.v3.MACState")
	proto.RegisterType((*EndDevice)(nil), "ttn.lorawan.v3.EndDevice")
	golang_proto.RegisterType((*EndDevice)(nil), "ttn.lorawan.v3.EndDevice")
	proto.RegisterType((*EndDevices)(nil), "ttn.lorawan.v3.EndDevices")
	golang_proto.RegisterType((*EndDevices)(nil), "ttn.lorawan.v3.EndDevices")
}
func (this *Session) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Session)
	if !ok {
		that2, ok := that.(Session)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Session")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Session but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Session but is not nil && this == nil")
	}
	if !this.DevAddr.Equal(that1.DevAddr) {
		return fmt.Errorf("DevAddr this(%v) Not Equal that(%v)", this.DevAddr, that1.DevAddr)
	}
	if !this.SessionKeys.Equal(&that1.SessionKeys) {
		return fmt.Errorf("SessionKeys this(%v) Not Equal that(%v)", this.SessionKeys, that1.SessionKeys)
	}
	if this.NextFCntUp != that1.NextFCntUp {
		return fmt.Errorf("NextFCntUp this(%v) Not Equal that(%v)", this.NextFCntUp, that1.NextFCntUp)
	}
	if this.NextNFCntDown != that1.NextNFCntDown {
		return fmt.Errorf("NextNFCntDown this(%v) Not Equal that(%v)", this.NextNFCntDown, that1.NextNFCntDown)
	}
	if this.NextAFCntDown != that1.NextAFCntDown {
		return fmt.Errorf("NextAFCntDown this(%v) Not Equal that(%v)", this.NextAFCntDown, that1.NextAFCntDown)
	}
	if this.LastConfFCntDown != that1.LastConfFCntDown {
		return fmt.Errorf("LastConfFCntDown this(%v) Not Equal that(%v)", this.LastConfFCntDown, that1.LastConfFCntDown)
	}
	if !this.StartedAt.Equal(that1.StartedAt) {
		return fmt.Errorf("StartedAt this(%v) Not Equal that(%v)", this.StartedAt, that1.StartedAt)
	}
	return nil
}
func (this *Session) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Session)
	if !ok {
		that2, ok := that.(Session)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DevAddr.Equal(that1.DevAddr) {
		return false
	}
	if !this.SessionKeys.Equal(&that1.SessionKeys) {
		return false
	}
	if this.NextFCntUp != that1.NextFCntUp {
		return false
	}
	if this.NextNFCntDown != that1.NextNFCntDown {
		return false
	}
	if this.NextAFCntDown != that1.NextAFCntDown {
		return false
	}
	if this.LastConfFCntDown != that1.LastConfFCntDown {
		return false
	}
	if !this.StartedAt.Equal(that1.StartedAt) {
		return false
	}
	return true
}
func (this *DeviceFormatters) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DeviceFormatters)
	if !ok {
		that2, ok := that.(DeviceFormatters)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DeviceFormatters")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DeviceFormatters but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DeviceFormatters but is not nil && this == nil")
	}
	if this.UpFormatter != that1.UpFormatter {
		return fmt.Errorf("UpFormatter this(%v) Not Equal that(%v)", this.UpFormatter, that1.UpFormatter)
	}
	if this.UpFormatterParameter != that1.UpFormatterParameter {
		return fmt.Errorf("UpFormatterParameter this(%v) Not Equal that(%v)", this.UpFormatterParameter, that1.UpFormatterParameter)
	}
	if this.DownFormatter != that1.DownFormatter {
		return fmt.Errorf("DownFormatter this(%v) Not Equal that(%v)", this.DownFormatter, that1.DownFormatter)
	}
	if this.DownFormatterParameter != that1.DownFormatterParameter {
		return fmt.Errorf("DownFormatterParameter this(%v) Not Equal that(%v)", this.DownFormatterParameter, that1.DownFormatterParameter)
	}
	return nil
}
func (this *DeviceFormatters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceFormatters)
	if !ok {
		that2, ok := that.(DeviceFormatters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UpFormatter != that1.UpFormatter {
		return false
	}
	if this.UpFormatterParameter != that1.UpFormatterParameter {
		return false
	}
	if this.DownFormatter != that1.DownFormatter {
		return false
	}
	if this.DownFormatterParameter != that1.DownFormatterParameter {
		return false
	}
	return true
}
func (this *DeviceBrand) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DeviceBrand)
	if !ok {
		that2, ok := that.(DeviceBrand)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DeviceBrand")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DeviceBrand but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DeviceBrand but is not nil && this == nil")
	}
	if this.ID != that1.ID {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.URL != that1.URL {
		return fmt.Errorf("URL this(%v) Not Equal that(%v)", this.URL, that1.URL)
	}
	if len(this.Logos) != len(that1.Logos) {
		return fmt.Errorf("Logos this(%v) Not Equal that(%v)", len(this.Logos), len(that1.Logos))
	}
	for i := range this.Logos {
		if this.Logos[i] != that1.Logos[i] {
			return fmt.Errorf("Logos this[%v](%v) Not Equal that[%v](%v)", i, this.Logos[i], i, that1.Logos[i])
		}
	}
	return nil
}
func (this *DeviceBrand) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceBrand)
	if !ok {
		that2, ok := that.(DeviceBrand)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.URL != that1.URL {
		return false
	}
	if len(this.Logos) != len(that1.Logos) {
		return false
	}
	for i := range this.Logos {
		if this.Logos[i] != that1.Logos[i] {
			return false
		}
	}
	return true
}
func (this *EndDeviceModel) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*EndDeviceModel)
	if !ok {
		that2, ok := that.(EndDeviceModel)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *EndDeviceModel")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *EndDeviceModel but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *EndDeviceModel but is not nil && this == nil")
	}
	if this.ModelID != that1.ModelID {
		return fmt.Errorf("ModelID this(%v) Not Equal that(%v)", this.ModelID, that1.ModelID)
	}
	if this.BrandID != that1.BrandID {
		return fmt.Errorf("BrandID this(%v) Not Equal that(%v)", this.BrandID, that1.BrandID)
	}
	if this.ModelName != that1.ModelName {
		return fmt.Errorf("ModelName this(%v) Not Equal that(%v)", this.ModelName, that1.ModelName)
	}
	return nil
}
func (this *EndDeviceModel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDeviceModel)
	if !ok {
		that2, ok := that.(EndDeviceModel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ModelID != that1.ModelID {
		return false
	}
	if this.BrandID != that1.BrandID {
		return false
	}
	if this.ModelName != that1.ModelName {
		return false
	}
	return true
}
func (this *EndDeviceVersion) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*EndDeviceVersion)
	if !ok {
		that2, ok := that.(EndDeviceVersion)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *EndDeviceVersion")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *EndDeviceVersion but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *EndDeviceVersion but is not nil && this == nil")
	}
	if !this.EndDeviceModel.Equal(&that1.EndDeviceModel) {
		return fmt.Errorf("EndDeviceModel this(%v) Not Equal that(%v)", this.EndDeviceModel, that1.EndDeviceModel)
	}
	if this.LoRaWANVersion != that1.LoRaWANVersion {
		return fmt.Errorf("LoRaWANVersion this(%v) Not Equal that(%v)", this.LoRaWANVersion, that1.LoRaWANVersion)
	}
	if this.LoRaWANPHYVersion != that1.LoRaWANPHYVersion {
		return fmt.Errorf("LoRaWANPHYVersion this(%v) Not Equal that(%v)", this.LoRaWANPHYVersion, that1.LoRaWANPHYVersion)
	}
	if this.HardwareVersion != that1.HardwareVersion {
		return fmt.Errorf("HardwareVersion this(%v) Not Equal that(%v)", this.HardwareVersion, that1.HardwareVersion)
	}
	if this.FirmwareVersion != that1.FirmwareVersion {
		return fmt.Errorf("FirmwareVersion this(%v) Not Equal that(%v)", this.FirmwareVersion, that1.FirmwareVersion)
	}
	if !this.DefaultFormatters.Equal(that1.DefaultFormatters) {
		return fmt.Errorf("DefaultFormatters this(%v) Not Equal that(%v)", this.DefaultFormatters, that1.DefaultFormatters)
	}
	if !this.DefaultMACParameters.Equal(that1.DefaultMACParameters) {
		return fmt.Errorf("DefaultMACParameters this(%v) Not Equal that(%v)", this.DefaultMACParameters, that1.DefaultMACParameters)
	}
	if this.MinFrequency != that1.MinFrequency {
		return fmt.Errorf("MinFrequency this(%v) Not Equal that(%v)", this.MinFrequency, that1.MinFrequency)
	}
	if this.MaxFrequency != that1.MaxFrequency {
		return fmt.Errorf("MaxFrequency this(%v) Not Equal that(%v)", this.MaxFrequency, that1.MaxFrequency)
	}
	if this.FCntResets != that1.FCntResets {
		return fmt.Errorf("FCntResets this(%v) Not Equal that(%v)", this.FCntResets, that1.FCntResets)
	}
	if this.Supports32BitFCnt != that1.Supports32BitFCnt {
		return fmt.Errorf("Supports32BitFCnt this(%v) Not Equal that(%v)", this.Supports32BitFCnt, that1.Supports32BitFCnt)
	}
	if this.DisableJoinNonceCheck != that1.DisableJoinNonceCheck {
		return fmt.Errorf("DisableJoinNonceCheck this(%v) Not Equal that(%v)", this.DisableJoinNonceCheck, that1.DisableJoinNonceCheck)
	}
	return nil
}
func (this *EndDeviceVersion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDeviceVersion)
	if !ok {
		that2, ok := that.(EndDeviceVersion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EndDeviceModel.Equal(&that1.EndDeviceModel) {
		return false
	}
	if this.LoRaWANVersion != that1.LoRaWANVersion {
		return false
	}
	if this.LoRaWANPHYVersion != that1.LoRaWANPHYVersion {
		return false
	}
	if this.HardwareVersion != that1.HardwareVersion {
		return false
	}
	if this.FirmwareVersion != that1.FirmwareVersion {
		return false
	}
	if !this.DefaultFormatters.Equal(that1.DefaultFormatters) {
		return false
	}
	if !this.DefaultMACParameters.Equal(that1.DefaultMACParameters) {
		return false
	}
	if this.MinFrequency != that1.MinFrequency {
		return false
	}
	if this.MaxFrequency != that1.MaxFrequency {
		return false
	}
	if this.FCntResets != that1.FCntResets {
		return false
	}
	if this.Supports32BitFCnt != that1.Supports32BitFCnt {
		return false
	}
	if this.DisableJoinNonceCheck != that1.DisableJoinNonceCheck {
		return false
	}
	return true
}
func (this *MACSettings) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACSettings)
	if !ok {
		that2, ok := that.(MACSettings)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACSettings")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACSettings but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACSettings but is not nil && this == nil")
	}
	if this.DisableADR != that1.DisableADR {
		return fmt.Errorf("DisableADR this(%v) Not Equal that(%v)", this.DisableADR, that1.DisableADR)
	}
	if this.ADRMargin != that1.ADRMargin {
		return fmt.Errorf("ADRMargin this(%v) Not Equal that(%v)", this.ADRMargin, that1.ADRMargin)
	}
	if !this.ClassBTimeout.Equal(that1.ClassBTimeout) {
		return fmt.Errorf("ClassBTimeout this(%v) Not Equal that(%v)", this.ClassBTimeout, that1.ClassBTimeout)
	}
	if !this.ClassCTimeout.Equal(that1.ClassCTimeout) {
		return fmt.Errorf("ClassCTimeout this(%v) Not Equal that(%v)", this.ClassCTimeout, that1.ClassCTimeout)
	}
	return nil
}
func (this *MACSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACSettings)
	if !ok {
		that2, ok := that.(MACSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DisableADR != that1.DisableADR {
		return false
	}
	if this.ADRMargin != that1.ADRMargin {
		return false
	}
	if !this.ClassBTimeout.Equal(that1.ClassBTimeout) {
		return false
	}
	if !this.ClassCTimeout.Equal(that1.ClassCTimeout) {
		return false
	}
	return true
}
func (this *MACParameters) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACParameters)
	if !ok {
		that2, ok := that.(MACParameters)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACParameters")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACParameters but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACParameters but is not nil && this == nil")
	}
	if this.MaxEIRP != that1.MaxEIRP {
		return fmt.Errorf("MaxEIRP this(%v) Not Equal that(%v)", this.MaxEIRP, that1.MaxEIRP)
	}
	if this.UplinkDwellTime != that1.UplinkDwellTime {
		return fmt.Errorf("UplinkDwellTime this(%v) Not Equal that(%v)", this.UplinkDwellTime, that1.UplinkDwellTime)
	}
	if this.DownlinkDwellTime != that1.DownlinkDwellTime {
		return fmt.Errorf("DownlinkDwellTime this(%v) Not Equal that(%v)", this.DownlinkDwellTime, that1.DownlinkDwellTime)
	}
	if this.ADRDataRateIndex != that1.ADRDataRateIndex {
		return fmt.Errorf("ADRDataRateIndex this(%v) Not Equal that(%v)", this.ADRDataRateIndex, that1.ADRDataRateIndex)
	}
	if this.ADRTXPowerIndex != that1.ADRTXPowerIndex {
		return fmt.Errorf("ADRTXPowerIndex this(%v) Not Equal that(%v)", this.ADRTXPowerIndex, that1.ADRTXPowerIndex)
	}
	if this.ADRNbTrans != that1.ADRNbTrans {
		return fmt.Errorf("ADRNbTrans this(%v) Not Equal that(%v)", this.ADRNbTrans, that1.ADRNbTrans)
	}
	if this.ADRAckLimit != that1.ADRAckLimit {
		return fmt.Errorf("ADRAckLimit this(%v) Not Equal that(%v)", this.ADRAckLimit, that1.ADRAckLimit)
	}
	if this.ADRAckDelay != that1.ADRAckDelay {
		return fmt.Errorf("ADRAckDelay this(%v) Not Equal that(%v)", this.ADRAckDelay, that1.ADRAckDelay)
	}
	if this.Rx1Delay != that1.Rx1Delay {
		return fmt.Errorf("Rx1Delay this(%v) Not Equal that(%v)", this.Rx1Delay, that1.Rx1Delay)
	}
	if this.Rx1DataRateOffset != that1.Rx1DataRateOffset {
		return fmt.Errorf("Rx1DataRateOffset this(%v) Not Equal that(%v)", this.Rx1DataRateOffset, that1.Rx1DataRateOffset)
	}
	if this.Rx2DataRateIndex != that1.Rx2DataRateIndex {
		return fmt.Errorf("Rx2DataRateIndex this(%v) Not Equal that(%v)", this.Rx2DataRateIndex, that1.Rx2DataRateIndex)
	}
	if this.Rx2Frequency != that1.Rx2Frequency {
		return fmt.Errorf("Rx2Frequency this(%v) Not Equal that(%v)", this.Rx2Frequency, that1.Rx2Frequency)
	}
	if this.RejoinTimePeriodicity != that1.RejoinTimePeriodicity {
		return fmt.Errorf("RejoinTimePeriodicity this(%v) Not Equal that(%v)", this.RejoinTimePeriodicity, that1.RejoinTimePeriodicity)
	}
	if this.PingSlotFrequency != that1.PingSlotFrequency {
		return fmt.Errorf("PingSlotFrequency this(%v) Not Equal that(%v)", this.PingSlotFrequency, that1.PingSlotFrequency)
	}
	if this.PingSlotDataRateIndex != that1.PingSlotDataRateIndex {
		return fmt.Errorf("PingSlotDataRateIndex this(%v) Not Equal that(%v)", this.PingSlotDataRateIndex, that1.PingSlotDataRateIndex)
	}
	if this.DutyCycle != that1.DutyCycle {
		return fmt.Errorf("DutyCycle this(%v) Not Equal that(%v)", this.DutyCycle, that1.DutyCycle)
	}
	return nil
}
func (this *MACParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACParameters)
	if !ok {
		that2, ok := that.(MACParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxEIRP != that1.MaxEIRP {
		return false
	}
	if this.UplinkDwellTime != that1.UplinkDwellTime {
		return false
	}
	if this.DownlinkDwellTime != that1.DownlinkDwellTime {
		return false
	}
	if this.ADRDataRateIndex != that1.ADRDataRateIndex {
		return false
	}
	if this.ADRTXPowerIndex != that1.ADRTXPowerIndex {
		return false
	}
	if this.ADRNbTrans != that1.ADRNbTrans {
		return false
	}
	if this.ADRAckLimit != that1.ADRAckLimit {
		return false
	}
	if this.ADRAckDelay != that1.ADRAckDelay {
		return false
	}
	if this.Rx1Delay != that1.Rx1Delay {
		return false
	}
	if this.Rx1DataRateOffset != that1.Rx1DataRateOffset {
		return false
	}
	if this.Rx2DataRateIndex != that1.Rx2DataRateIndex {
		return false
	}
	if this.Rx2Frequency != that1.Rx2Frequency {
		return false
	}
	if this.RejoinTimePeriodicity != that1.RejoinTimePeriodicity {
		return false
	}
	if this.PingSlotFrequency != that1.PingSlotFrequency {
		return false
	}
	if this.PingSlotDataRateIndex != that1.PingSlotDataRateIndex {
		return false
	}
	if this.DutyCycle != that1.DutyCycle {
		return false
	}
	return true
}
func (this *MACState) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACState)
	if !ok {
		that2, ok := that.(MACState)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACState")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACState but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACState but is not nil && this == nil")
	}
	if !this.MACParameters.Equal(&that1.MACParameters) {
		return fmt.Errorf("MACParameters this(%v) Not Equal that(%v)", this.MACParameters, that1.MACParameters)
	}
	if !this.DesiredMACParameters.Equal(&that1.DesiredMACParameters) {
		return fmt.Errorf("DesiredMACParameters this(%v) Not Equal that(%v)", this.DesiredMACParameters, that1.DesiredMACParameters)
	}
	if this.DeviceClass != that1.DeviceClass {
		return fmt.Errorf("DeviceClass this(%v) Not Equal that(%v)", this.DeviceClass, that1.DeviceClass)
	}
	if this.LoRaWANVersion != that1.LoRaWANVersion {
		return fmt.Errorf("LoRaWANVersion this(%v) Not Equal that(%v)", this.LoRaWANVersion, that1.LoRaWANVersion)
	}
	if that1.NextConfirmedDownlinkAt == nil {
		if this.NextConfirmedDownlinkAt != nil {
			return fmt.Errorf("this.NextConfirmedDownlinkAt != nil && that1.NextConfirmedDownlinkAt == nil")
		}
	} else if !this.NextConfirmedDownlinkAt.Equal(*that1.NextConfirmedDownlinkAt) {
		return fmt.Errorf("NextConfirmedDownlinkAt this(%v) Not Equal that(%v)", this.NextConfirmedDownlinkAt, that1.NextConfirmedDownlinkAt)
	}
	if this.PingSlotPeriodicity != that1.PingSlotPeriodicity {
		return fmt.Errorf("PingSlotPeriodicity this(%v) Not Equal that(%v)", this.PingSlotPeriodicity, that1.PingSlotPeriodicity)
	}
	if !this.PendingApplicationDownlink.Equal(that1.PendingApplicationDownlink) {
		return fmt.Errorf("PendingApplicationDownlink this(%v) Not Equal that(%v)", this.PendingApplicationDownlink, that1.PendingApplicationDownlink)
	}
	if len(this.QueuedResponses) != len(that1.QueuedResponses) {
		return fmt.Errorf("QueuedResponses this(%v) Not Equal that(%v)", len(this.QueuedResponses), len(that1.QueuedResponses))
	}
	for i := range this.QueuedResponses {
		if !this.QueuedResponses[i].Equal(that1.QueuedResponses[i]) {
			return fmt.Errorf("QueuedResponses this[%v](%v) Not Equal that[%v](%v)", i, this.QueuedResponses[i], i, that1.QueuedResponses[i])
		}
	}
	if len(this.PendingRequests) != len(that1.PendingRequests) {
		return fmt.Errorf("PendingRequests this(%v) Not Equal that(%v)", len(this.PendingRequests), len(that1.PendingRequests))
	}
	for i := range this.PendingRequests {
		if !this.PendingRequests[i].Equal(that1.PendingRequests[i]) {
			return fmt.Errorf("PendingRequests this[%v](%v) Not Equal that[%v](%v)", i, this.PendingRequests[i], i, that1.PendingRequests[i])
		}
	}
	return nil
}
func (this *MACState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACState)
	if !ok {
		that2, ok := that.(MACState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MACParameters.Equal(&that1.MACParameters) {
		return false
	}
	if !this.DesiredMACParameters.Equal(&that1.DesiredMACParameters) {
		return false
	}
	if this.DeviceClass != that1.DeviceClass {
		return false
	}
	if this.LoRaWANVersion != that1.LoRaWANVersion {
		return false
	}
	if that1.NextConfirmedDownlinkAt == nil {
		if this.NextConfirmedDownlinkAt != nil {
			return false
		}
	} else if !this.NextConfirmedDownlinkAt.Equal(*that1.NextConfirmedDownlinkAt) {
		return false
	}
	if this.PingSlotPeriodicity != that1.PingSlotPeriodicity {
		return false
	}
	if !this.PendingApplicationDownlink.Equal(that1.PendingApplicationDownlink) {
		return false
	}
	if len(this.QueuedResponses) != len(that1.QueuedResponses) {
		return false
	}
	for i := range this.QueuedResponses {
		if !this.QueuedResponses[i].Equal(that1.QueuedResponses[i]) {
			return false
		}
	}
	if len(this.PendingRequests) != len(that1.PendingRequests) {
		return false
	}
	for i := range this.PendingRequests {
		if !this.PendingRequests[i].Equal(that1.PendingRequests[i]) {
			return false
		}
	}
	return true
}
func (this *EndDevice) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*EndDevice)
	if !ok {
		that2, ok := that.(EndDevice)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *EndDevice")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *EndDevice but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *EndDevice but is not nil && this == nil")
	}
	if !this.EndDeviceVersion.Equal(&that1.EndDeviceVersion) {
		return fmt.Errorf("EndDeviceVersion this(%v) Not Equal that(%v)", this.EndDeviceVersion, that1.EndDeviceVersion)
	}
	if !this.EndDeviceIdentifiers.Equal(&that1.EndDeviceIdentifiers) {
		return fmt.Errorf("EndDeviceIdentifiers this(%v) Not Equal that(%v)", this.EndDeviceIdentifiers, that1.EndDeviceIdentifiers)
	}
	if !this.RootKeys.Equal(that1.RootKeys) {
		return fmt.Errorf("RootKeys this(%v) Not Equal that(%v)", this.RootKeys, that1.RootKeys)
	}
	if this.NetworkServerAddress != that1.NetworkServerAddress {
		return fmt.Errorf("NetworkServerAddress this(%v) Not Equal that(%v)", this.NetworkServerAddress, that1.NetworkServerAddress)
	}
	if this.ApplicationServerAddress != that1.ApplicationServerAddress {
		return fmt.Errorf("ApplicationServerAddress this(%v) Not Equal that(%v)", this.ApplicationServerAddress, that1.ApplicationServerAddress)
	}
	if this.FrequencyPlanID != that1.FrequencyPlanID {
		return fmt.Errorf("FrequencyPlanID this(%v) Not Equal that(%v)", this.FrequencyPlanID, that1.FrequencyPlanID)
	}
	if !this.MACSettings.Equal(that1.MACSettings) {
		return fmt.Errorf("MACSettings this(%v) Not Equal that(%v)", this.MACSettings, that1.MACSettings)
	}
	if !this.MACState.Equal(that1.MACState) {
		return fmt.Errorf("MACState this(%v) Not Equal that(%v)", this.MACState, that1.MACState)
	}
	if this.SupportsJoin != that1.SupportsJoin {
		return fmt.Errorf("SupportsJoin this(%v) Not Equal that(%v)", this.SupportsJoin, that1.SupportsJoin)
	}
	if !this.Session.Equal(that1.Session) {
		return fmt.Errorf("Session this(%v) Not Equal that(%v)", this.Session, that1.Session)
	}
	if !this.SessionFallback.Equal(that1.SessionFallback) {
		return fmt.Errorf("SessionFallback this(%v) Not Equal that(%v)", this.SessionFallback, that1.SessionFallback)
	}
	if this.NextDevNonce != that1.NextDevNonce {
		return fmt.Errorf("NextDevNonce this(%v) Not Equal that(%v)", this.NextDevNonce, that1.NextDevNonce)
	}
	if len(this.UsedDevNonces) != len(that1.UsedDevNonces) {
		return fmt.Errorf("UsedDevNonces this(%v) Not Equal that(%v)", len(this.UsedDevNonces), len(that1.UsedDevNonces))
	}
	for i := range this.UsedDevNonces {
		if this.UsedDevNonces[i] != that1.UsedDevNonces[i] {
			return fmt.Errorf("UsedDevNonces this[%v](%v) Not Equal that[%v](%v)", i, this.UsedDevNonces[i], i, that1.UsedDevNonces[i])
		}
	}
	if this.NextJoinNonce != that1.NextJoinNonce {
		return fmt.Errorf("NextJoinNonce this(%v) Not Equal that(%v)", this.NextJoinNonce, that1.NextJoinNonce)
	}
	if len(this.UsedJoinNonces) != len(that1.UsedJoinNonces) {
		return fmt.Errorf("UsedJoinNonces this(%v) Not Equal that(%v)", len(this.UsedJoinNonces), len(that1.UsedJoinNonces))
	}
	for i := range this.UsedJoinNonces {
		if this.UsedJoinNonces[i] != that1.UsedJoinNonces[i] {
			return fmt.Errorf("UsedJoinNonces this[%v](%v) Not Equal that[%v](%v)", i, this.UsedJoinNonces[i], i, that1.UsedJoinNonces[i])
		}
	}
	if this.NextRJCount0 != that1.NextRJCount0 {
		return fmt.Errorf("NextRJCount0 this(%v) Not Equal that(%v)", this.NextRJCount0, that1.NextRJCount0)
	}
	if this.NextRJCount1 != that1.NextRJCount1 {
		return fmt.Errorf("NextRJCount1 this(%v) Not Equal that(%v)", this.NextRJCount1, that1.NextRJCount1)
	}
	if !this.Location.Equal(that1.Location) {
		return fmt.Errorf("Location this(%v) Not Equal that(%v)", this.Location, that1.Location)
	}
	if this.BatteryPercentage != that1.BatteryPercentage {
		return fmt.Errorf("BatteryPercentage this(%v) Not Equal that(%v)", this.BatteryPercentage, that1.BatteryPercentage)
	}
	if this.DownlinkMargin != that1.DownlinkMargin {
		return fmt.Errorf("DownlinkMargin this(%v) Not Equal that(%v)", this.DownlinkMargin, that1.DownlinkMargin)
	}
	if len(this.RecentUplinks) != len(that1.RecentUplinks) {
		return fmt.Errorf("RecentUplinks this(%v) Not Equal that(%v)", len(this.RecentUplinks), len(that1.RecentUplinks))
	}
	for i := range this.RecentUplinks {
		if !this.RecentUplinks[i].Equal(that1.RecentUplinks[i]) {
			return fmt.Errorf("RecentUplinks this[%v](%v) Not Equal that[%v](%v)", i, this.RecentUplinks[i], i, that1.RecentUplinks[i])
		}
	}
	if len(this.RecentDownlinks) != len(that1.RecentDownlinks) {
		return fmt.Errorf("RecentDownlinks this(%v) Not Equal that(%v)", len(this.RecentDownlinks), len(that1.RecentDownlinks))
	}
	for i := range this.RecentDownlinks {
		if !this.RecentDownlinks[i].Equal(that1.RecentDownlinks[i]) {
			return fmt.Errorf("RecentDownlinks this[%v](%v) Not Equal that[%v](%v)", i, this.RecentDownlinks[i], i, that1.RecentDownlinks[i])
		}
	}
	if len(this.QueuedApplicationDownlinks) != len(that1.QueuedApplicationDownlinks) {
		return fmt.Errorf("QueuedApplicationDownlinks this(%v) Not Equal that(%v)", len(this.QueuedApplicationDownlinks), len(that1.QueuedApplicationDownlinks))
	}
	for i := range this.QueuedApplicationDownlinks {
		if !this.QueuedApplicationDownlinks[i].Equal(that1.QueuedApplicationDownlinks[i]) {
			return fmt.Errorf("QueuedApplicationDownlinks this[%v](%v) Not Equal that[%v](%v)", i, this.QueuedApplicationDownlinks[i], i, that1.QueuedApplicationDownlinks[i])
		}
	}
	if !this.DeviceFormatters.Equal(&that1.DeviceFormatters) {
		return fmt.Errorf("DeviceFormatters this(%v) Not Equal that(%v)", this.DeviceFormatters, that1.DeviceFormatters)
	}
	if !this.Attributes.Equal(that1.Attributes) {
		return fmt.Errorf("Attributes this(%v) Not Equal that(%v)", this.Attributes, that1.Attributes)
	}
	if that1.StatusUpdatedAt == nil {
		if this.StatusUpdatedAt != nil {
			return fmt.Errorf("this.StatusUpdatedAt != nil && that1.StatusUpdatedAt == nil")
		}
	} else if !this.StatusUpdatedAt.Equal(*that1.StatusUpdatedAt) {
		return fmt.Errorf("StatusUpdatedAt this(%v) Not Equal that(%v)", this.StatusUpdatedAt, that1.StatusUpdatedAt)
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return fmt.Errorf("CreatedAt this(%v) Not Equal that(%v)", this.CreatedAt, that1.CreatedAt)
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return fmt.Errorf("UpdatedAt this(%v) Not Equal that(%v)", this.UpdatedAt, that1.UpdatedAt)
	}
	return nil
}
func (this *EndDevice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDevice)
	if !ok {
		that2, ok := that.(EndDevice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EndDeviceVersion.Equal(&that1.EndDeviceVersion) {
		return false
	}
	if !this.EndDeviceIdentifiers.Equal(&that1.EndDeviceIdentifiers) {
		return false
	}
	if !this.RootKeys.Equal(that1.RootKeys) {
		return false
	}
	if this.NetworkServerAddress != that1.NetworkServerAddress {
		return false
	}
	if this.ApplicationServerAddress != that1.ApplicationServerAddress {
		return false
	}
	if this.FrequencyPlanID != that1.FrequencyPlanID {
		return false
	}
	if !this.MACSettings.Equal(that1.MACSettings) {
		return false
	}
	if !this.MACState.Equal(that1.MACState) {
		return false
	}
	if this.SupportsJoin != that1.SupportsJoin {
		return false
	}
	if !this.Session.Equal(that1.Session) {
		return false
	}
	if !this.SessionFallback.Equal(that1.SessionFallback) {
		return false
	}
	if this.NextDevNonce != that1.NextDevNonce {
		return false
	}
	if len(this.UsedDevNonces) != len(that1.UsedDevNonces) {
		return false
	}
	for i := range this.UsedDevNonces {
		if this.UsedDevNonces[i] != that1.UsedDevNonces[i] {
			return false
		}
	}
	if this.NextJoinNonce != that1.NextJoinNonce {
		return false
	}
	if len(this.UsedJoinNonces) != len(that1.UsedJoinNonces) {
		return false
	}
	for i := range this.UsedJoinNonces {
		if this.UsedJoinNonces[i] != that1.UsedJoinNonces[i] {
			return false
		}
	}
	if this.NextRJCount0 != that1.NextRJCount0 {
		return false
	}
	if this.NextRJCount1 != that1.NextRJCount1 {
		return false
	}
	if !this.Location.Equal(that1.Location) {
		return false
	}
	if this.BatteryPercentage != that1.BatteryPercentage {
		return false
	}
	if this.DownlinkMargin != that1.DownlinkMargin {
		return false
	}
	if len(this.RecentUplinks) != len(that1.RecentUplinks) {
		return false
	}
	for i := range this.RecentUplinks {
		if !this.RecentUplinks[i].Equal(that1.RecentUplinks[i]) {
			return false
		}
	}
	if len(this.RecentDownlinks) != len(that1.RecentDownlinks) {
		return false
	}
	for i := range this.RecentDownlinks {
		if !this.RecentDownlinks[i].Equal(that1.RecentDownlinks[i]) {
			return false
		}
	}
	if len(this.QueuedApplicationDownlinks) != len(that1.QueuedApplicationDownlinks) {
		return false
	}
	for i := range this.QueuedApplicationDownlinks {
		if !this.QueuedApplicationDownlinks[i].Equal(that1.QueuedApplicationDownlinks[i]) {
			return false
		}
	}
	if !this.DeviceFormatters.Equal(&that1.DeviceFormatters) {
		return false
	}
	if !this.Attributes.Equal(that1.Attributes) {
		return false
	}
	if that1.StatusUpdatedAt == nil {
		if this.StatusUpdatedAt != nil {
			return false
		}
	} else if !this.StatusUpdatedAt.Equal(*that1.StatusUpdatedAt) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	return true
}
func (this *EndDevices) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*EndDevices)
	if !ok {
		that2, ok := that.(EndDevices)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *EndDevices")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *EndDevices but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *EndDevices but is not nil && this == nil")
	}
	if len(this.EndDevices) != len(that1.EndDevices) {
		return fmt.Errorf("EndDevices this(%v) Not Equal that(%v)", len(this.EndDevices), len(that1.EndDevices))
	}
	for i := range this.EndDevices {
		if !this.EndDevices[i].Equal(that1.EndDevices[i]) {
			return fmt.Errorf("EndDevices this[%v](%v) Not Equal that[%v](%v)", i, this.EndDevices[i], i, that1.EndDevices[i])
		}
	}
	return nil
}
func (this *EndDevices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDevices)
	if !ok {
		that2, ok := that.(EndDevices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.EndDevices) != len(that1.EndDevices) {
		return false
	}
	for i := range this.EndDevices {
		if !this.EndDevices[i].Equal(that1.EndDevices[i]) {
			return false
		}
	}
	return true
}
func (m *Session) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Session) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(m.DevAddr.Size()))
	n1, err := m.DevAddr.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(m.SessionKeys.Size()))
	n2, err := m.SessionKeys.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if m.NextFCntUp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.NextFCntUp))
	}
	if m.NextNFCntDown != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.NextNFCntDown))
	}
	if m.NextAFCntDown != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.NextAFCntDown))
	}
	if m.LastConfFCntDown != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.LastConfFCntDown))
	}
	dAtA[i] = 0x42
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(types.SizeOfStdTime(m.StartedAt)))
	n3, err := types.StdTimeMarshalTo(m.StartedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	return i, nil
}

func (m *DeviceFormatters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceFormatters) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UpFormatter != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.UpFormatter))
	}
	if len(m.UpFormatterParameter) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.UpFormatterParameter)))
		i += copy(dAtA[i:], m.UpFormatterParameter)
	}
	if m.DownFormatter != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.DownFormatter))
	}
	if len(m.DownFormatterParameter) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.DownFormatterParameter)))
		i += copy(dAtA[i:], m.DownFormatterParameter)
	}
	return i, nil
}

func (m *DeviceBrand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceBrand) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.URL) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.URL)))
		i += copy(dAtA[i:], m.URL)
	}
	if len(m.Logos) > 0 {
		for _, s := range m.Logos {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *EndDeviceModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDeviceModel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ModelID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.ModelID)))
		i += copy(dAtA[i:], m.ModelID)
	}
	if len(m.BrandID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.BrandID)))
		i += copy(dAtA[i:], m.BrandID)
	}
	if len(m.ModelName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.ModelName)))
		i += copy(dAtA[i:], m.ModelName)
	}
	return i, nil
}

func (m *EndDeviceVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDeviceVersion) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(m.EndDeviceModel.Size()))
	n4, err := m.EndDeviceModel.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if m.LoRaWANVersion != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.LoRaWANVersion))
	}
	if m.LoRaWANPHYVersion != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.LoRaWANPHYVersion))
	}
	if len(m.HardwareVersion) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.HardwareVersion)))
		i += copy(dAtA[i:], m.HardwareVersion)
	}
	if len(m.FirmwareVersion) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.FirmwareVersion)))
		i += copy(dAtA[i:], m.FirmwareVersion)
	}
	if m.DefaultFormatters != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.DefaultFormatters.Size()))
		n5, err := m.DefaultFormatters.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.DefaultMACParameters != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.DefaultMACParameters.Size()))
		n6, err := m.DefaultMACParameters.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.MinFrequency != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintEndDevice(dAtA, i, m.MinFrequency)
	}
	if m.MaxFrequency != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintEndDevice(dAtA, i, m.MaxFrequency)
	}
	if m.FCntResets {
		dAtA[i] = 0x58
		i++
		if m.FCntResets {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Supports32BitFCnt {
		dAtA[i] = 0x60
		i++
		if m.Supports32BitFCnt {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DisableJoinNonceCheck {
		dAtA[i] = 0x68
		i++
		if m.DisableJoinNonceCheck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *MACSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACSettings) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DisableADR {
		dAtA[i] = 0x8
		i++
		if m.DisableADR {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ADRMargin != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.ADRMargin))
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(types.SizeOfStdTime(m.ClassBTimeout)))
	n7, err := types.StdTimeMarshalTo(m.ClassBTimeout, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x22
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(types.SizeOfStdTime(m.ClassCTimeout)))
	n8, err := types.StdTimeMarshalTo(m.ClassCTimeout, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	return i, nil
}

func (m *MACParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACParameters) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxEIRP != 0 {
		dAtA[i] = 0xd
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], math.Float32bits(m.MaxEIRP))
		i += 4
	}
	if m.UplinkDwellTime {
		dAtA[i] = 0x10
		i++
		if m.UplinkDwellTime {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DownlinkDwellTime {
		dAtA[i] = 0x18
		i++
		if m.DownlinkDwellTime {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ADRDataRateIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.ADRDataRateIndex))
	}
	if m.ADRTXPowerIndex != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.ADRTXPowerIndex))
	}
	if m.ADRNbTrans != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.ADRNbTrans))
	}
	if m.ADRAckLimit != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.ADRAckLimit))
	}
	if m.ADRAckDelay != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.ADRAckDelay))
	}
	if m.Rx1Delay != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.Rx1Delay))
	}
	if m.Rx1DataRateOffset != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.Rx1DataRateOffset))
	}
	if m.Rx2DataRateIndex != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.Rx2DataRateIndex))
	}
	if m.Rx2Frequency != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintEndDevice(dAtA, i, m.Rx2Frequency)
	}
	if m.RejoinTimePeriodicity != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.RejoinTimePeriodicity))
	}
	if m.PingSlotFrequency != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintEndDevice(dAtA, i, m.PingSlotFrequency)
	}
	if m.PingSlotDataRateIndex != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.PingSlotDataRateIndex))
	}
	if m.DutyCycle != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.DutyCycle))
	}
	return i, nil
}

func (m *MACState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(m.MACParameters.Size()))
	n9, err := m.MACParameters.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	dAtA[i] = 0x12
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(m.DesiredMACParameters.Size()))
	n10, err := m.DesiredMACParameters.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	if m.DeviceClass != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.DeviceClass))
	}
	if m.LoRaWANVersion != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.LoRaWANVersion))
	}
	if m.NextConfirmedDownlinkAt != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(types.SizeOfStdTime(*m.NextConfirmedDownlinkAt)))
		n11, err := types.StdTimeMarshalTo(*m.NextConfirmedDownlinkAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.PingSlotPeriodicity != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.PingSlotPeriodicity))
	}
	if m.PendingApplicationDownlink != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.PendingApplicationDownlink.Size()))
		n12, err := m.PendingApplicationDownlink.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if len(m.QueuedResponses) > 0 {
		for _, msg := range m.QueuedResponses {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintEndDevice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PendingRequests) > 0 {
		for _, msg := range m.PendingRequests {
			dAtA[i] = 0x52
			i++
			i = encodeVarintEndDevice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *EndDevice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDevice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(m.EndDeviceVersion.Size()))
	n13, err := m.EndDeviceVersion.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	dAtA[i] = 0x12
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(m.EndDeviceIdentifiers.Size()))
	n14, err := m.EndDeviceIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	if m.RootKeys != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.RootKeys.Size()))
		n15, err := m.RootKeys.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if len(m.NetworkServerAddress) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.NetworkServerAddress)))
		i += copy(dAtA[i:], m.NetworkServerAddress)
	}
	if len(m.ApplicationServerAddress) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.ApplicationServerAddress)))
		i += copy(dAtA[i:], m.ApplicationServerAddress)
	}
	if len(m.FrequencyPlanID) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(len(m.FrequencyPlanID)))
		i += copy(dAtA[i:], m.FrequencyPlanID)
	}
	if m.MACSettings != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.MACSettings.Size()))
		n16, err := m.MACSettings.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.MACState != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.MACState.Size()))
		n17, err := m.MACState.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.SupportsJoin {
		dAtA[i] = 0x48
		i++
		if m.SupportsJoin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Session != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.Session.Size()))
		n18, err := m.Session.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.SessionFallback != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.SessionFallback.Size()))
		n19, err := m.SessionFallback.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.NextDevNonce != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.NextDevNonce))
	}
	if len(m.UsedDevNonces) > 0 {
		dAtA21 := make([]byte, len(m.UsedDevNonces)*10)
		var j20 int
		for _, num := range m.UsedDevNonces {
			for num >= 1<<7 {
				dAtA21[j20] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j20++
			}
			dAtA21[j20] = uint8(num)
			j20++
		}
		dAtA[i] = 0x6a
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(j20))
		i += copy(dAtA[i:], dAtA21[:j20])
	}
	if m.NextJoinNonce != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.NextJoinNonce))
	}
	if len(m.UsedJoinNonces) > 0 {
		dAtA23 := make([]byte, len(m.UsedJoinNonces)*10)
		var j22 int
		for _, num := range m.UsedJoinNonces {
			for num >= 1<<7 {
				dAtA23[j22] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j22++
			}
			dAtA23[j22] = uint8(num)
			j22++
		}
		dAtA[i] = 0x7a
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(j22))
		i += copy(dAtA[i:], dAtA23[:j22])
	}
	if m.NextRJCount0 != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.NextRJCount0))
	}
	if m.NextRJCount1 != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.NextRJCount1))
	}
	if m.Location != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.Location.Size()))
		n24, err := m.Location.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if m.BatteryPercentage != 0 {
		dAtA[i] = 0x9d
		i++
		dAtA[i] = 0x1
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], math.Float32bits(m.BatteryPercentage))
		i += 4
	}
	if m.DownlinkMargin != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.DownlinkMargin))
	}
	if len(m.RecentUplinks) > 0 {
		for _, msg := range m.RecentUplinks {
			dAtA[i] = 0xaa
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintEndDevice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RecentDownlinks) > 0 {
		for _, msg := range m.RecentDownlinks {
			dAtA[i] = 0xb2
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintEndDevice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.QueuedApplicationDownlinks) > 0 {
		for _, msg := range m.QueuedApplicationDownlinks {
			dAtA[i] = 0xba
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintEndDevice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0xc2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(m.DeviceFormatters.Size()))
	n25, err := m.DeviceFormatters.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n25
	if m.Attributes != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(m.Attributes.Size()))
		n26, err := m.Attributes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	if m.StatusUpdatedAt != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndDevice(dAtA, i, uint64(types.SizeOfStdTime(*m.StatusUpdatedAt)))
		n27, err := types.StdTimeMarshalTo(*m.StatusUpdatedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	dAtA[i] = 0x8a
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(types.SizeOfStdTime(m.CreatedAt)))
	n28, err := types.StdTimeMarshalTo(m.CreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n28
	dAtA[i] = 0x92
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintEndDevice(dAtA, i, uint64(types.SizeOfStdTime(m.UpdatedAt)))
	n29, err := types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n29
	return i, nil
}

func (m *EndDevices) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDevices) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EndDevices) > 0 {
		for _, msg := range m.EndDevices {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEndDevice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintEndDevice(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedSession(r randyEndDevice, easy bool) *Session {
	this := &Session{}
	v1 := go_thethings_network_lorawan_stack_pkg_types.NewPopulatedDevAddr(r)
	this.DevAddr = *v1
	v2 := NewPopulatedSessionKeys(r, easy)
	this.SessionKeys = *v2
	this.NextFCntUp = r.Uint32()
	this.NextNFCntDown = r.Uint32()
	this.NextAFCntDown = r.Uint32()
	this.LastConfFCntDown = r.Uint32()
	v3 := types.NewPopulatedStdTime(r, easy)
	this.StartedAt = *v3
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDeviceFormatters(r randyEndDevice, easy bool) *DeviceFormatters {
	this := &DeviceFormatters{}
	this.UpFormatter = PayloadFormatter([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	this.UpFormatterParameter = randStringEndDevice(r)
	this.DownFormatter = PayloadFormatter([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	this.DownFormatterParameter = randStringEndDevice(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDeviceBrand(r randyEndDevice, easy bool) *DeviceBrand {
	this := &DeviceBrand{}
	this.ID = randStringEndDevice(r)
	this.Name = randStringEndDevice(r)
	this.URL = randStringEndDevice(r)
	v4 := r.Intn(10)
	this.Logos = make([]string, v4)
	for i := 0; i < v4; i++ {
		this.Logos[i] = randStringEndDevice(r)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEndDeviceModel(r randyEndDevice, easy bool) *EndDeviceModel {
	this := &EndDeviceModel{}
	this.ModelID = randStringEndDevice(r)
	this.BrandID = randStringEndDevice(r)
	this.ModelName = randStringEndDevice(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACSettings(r randyEndDevice, easy bool) *MACSettings {
	this := &MACSettings{}
	this.DisableADR = bool(r.Intn(2) == 0)
	this.ADRMargin = r.Uint32()
	v5 := types.NewPopulatedStdTime(r, easy)
	this.ClassBTimeout = *v5
	v6 := types.NewPopulatedStdTime(r, easy)
	this.ClassCTimeout = *v6
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEndDevices(r randyEndDevice, easy bool) *EndDevices {
	this := &EndDevices{}
	if r.Intn(10) != 0 {
		v7 := r.Intn(5)
		this.EndDevices = make([]*EndDevice, v7)
		for i := 0; i < v7; i++ {
			this.EndDevices[i] = NewPopulatedEndDevice(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyEndDevice interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneEndDevice(r randyEndDevice) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringEndDevice(r randyEndDevice) string {
	v8 := r.Intn(100)
	tmps := make([]rune, v8)
	for i := 0; i < v8; i++ {
		tmps[i] = randUTF8RuneEndDevice(r)
	}
	return string(tmps)
}
func randUnrecognizedEndDevice(r randyEndDevice, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldEndDevice(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldEndDevice(dAtA []byte, r randyEndDevice, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateEndDevice(dAtA, uint64(key))
		v9 := r.Int63()
		if r.Intn(2) == 0 {
			v9 *= -1
		}
		dAtA = encodeVarintPopulateEndDevice(dAtA, uint64(v9))
	case 1:
		dAtA = encodeVarintPopulateEndDevice(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateEndDevice(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateEndDevice(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateEndDevice(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateEndDevice(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Session) Size() (n int) {
	var l int
	_ = l
	l = m.DevAddr.Size()
	n += 1 + l + sovEndDevice(uint64(l))
	l = m.SessionKeys.Size()
	n += 1 + l + sovEndDevice(uint64(l))
	if m.NextFCntUp != 0 {
		n += 1 + sovEndDevice(uint64(m.NextFCntUp))
	}
	if m.NextNFCntDown != 0 {
		n += 1 + sovEndDevice(uint64(m.NextNFCntDown))
	}
	if m.NextAFCntDown != 0 {
		n += 1 + sovEndDevice(uint64(m.NextAFCntDown))
	}
	if m.LastConfFCntDown != 0 {
		n += 1 + sovEndDevice(uint64(m.LastConfFCntDown))
	}
	l = types.SizeOfStdTime(m.StartedAt)
	n += 1 + l + sovEndDevice(uint64(l))
	return n
}

func (m *DeviceFormatters) Size() (n int) {
	var l int
	_ = l
	if m.UpFormatter != 0 {
		n += 1 + sovEndDevice(uint64(m.UpFormatter))
	}
	l = len(m.UpFormatterParameter)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if m.DownFormatter != 0 {
		n += 1 + sovEndDevice(uint64(m.DownFormatter))
	}
	l = len(m.DownFormatterParameter)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	return n
}

func (m *DeviceBrand) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if len(m.Logos) > 0 {
		for _, s := range m.Logos {
			l = len(s)
			n += 1 + l + sovEndDevice(uint64(l))
		}
	}
	return n
}

func (m *EndDeviceModel) Size() (n int) {
	var l int
	_ = l
	l = len(m.ModelID)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	l = len(m.BrandID)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	l = len(m.ModelName)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	return n
}

func (m *EndDeviceVersion) Size() (n int) {
	var l int
	_ = l
	l = m.EndDeviceModel.Size()
	n += 1 + l + sovEndDevice(uint64(l))
	if m.LoRaWANVersion != 0 {
		n += 1 + sovEndDevice(uint64(m.LoRaWANVersion))
	}
	if m.LoRaWANPHYVersion != 0 {
		n += 1 + sovEndDevice(uint64(m.LoRaWANPHYVersion))
	}
	l = len(m.HardwareVersion)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	l = len(m.FirmwareVersion)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if m.DefaultFormatters != nil {
		l = m.DefaultFormatters.Size()
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if m.DefaultMACParameters != nil {
		l = m.DefaultMACParameters.Size()
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if m.MinFrequency != 0 {
		n += 1 + sovEndDevice(m.MinFrequency)
	}
	if m.MaxFrequency != 0 {
		n += 1 + sovEndDevice(m.MaxFrequency)
	}
	if m.FCntResets {
		n += 2
	}
	if m.Supports32BitFCnt {
		n += 2
	}
	if m.DisableJoinNonceCheck {
		n += 2
	}
	return n
}

func (m *MACSettings) Size() (n int) {
	var l int
	_ = l
	if m.DisableADR {
		n += 2
	}
	if m.ADRMargin != 0 {
		n += 1 + sovEndDevice(uint64(m.ADRMargin))
	}
	l = types.SizeOfStdTime(m.ClassBTimeout)
	n += 1 + l + sovEndDevice(uint64(l))
	l = types.SizeOfStdTime(m.ClassCTimeout)
	n += 1 + l + sovEndDevice(uint64(l))
	return n
}

func (m *MACParameters) Size() (n int) {
	var l int
	_ = l
	if m.MaxEIRP != 0 {
		n += 5
	}
	if m.UplinkDwellTime {
		n += 2
	}
	if m.DownlinkDwellTime {
		n += 2
	}
	if m.ADRDataRateIndex != 0 {
		n += 1 + sovEndDevice(uint64(m.ADRDataRateIndex))
	}
	if m.ADRTXPowerIndex != 0 {
		n += 1 + sovEndDevice(uint64(m.ADRTXPowerIndex))
	}
	if m.ADRNbTrans != 0 {
		n += 1 + sovEndDevice(uint64(m.ADRNbTrans))
	}
	if m.ADRAckLimit != 0 {
		n += 1 + sovEndDevice(uint64(m.ADRAckLimit))
	}
	if m.ADRAckDelay != 0 {
		n += 1 + sovEndDevice(uint64(m.ADRAckDelay))
	}
	if m.Rx1Delay != 0 {
		n += 1 + sovEndDevice(uint64(m.Rx1Delay))
	}
	if m.Rx1DataRateOffset != 0 {
		n += 1 + sovEndDevice(uint64(m.Rx1DataRateOffset))
	}
	if m.Rx2DataRateIndex != 0 {
		n += 1 + sovEndDevice(uint64(m.Rx2DataRateIndex))
	}
	if m.Rx2Frequency != 0 {
		n += 1 + sovEndDevice(m.Rx2Frequency)
	}
	if m.RejoinTimePeriodicity != 0 {
		n += 1 + sovEndDevice(uint64(m.RejoinTimePeriodicity))
	}
	if m.PingSlotFrequency != 0 {
		n += 1 + sovEndDevice(m.PingSlotFrequency)
	}
	if m.PingSlotDataRateIndex != 0 {
		n += 2 + sovEndDevice(uint64(m.PingSlotDataRateIndex))
	}
	if m.DutyCycle != 0 {
		n += 2 + sovEndDevice(uint64(m.DutyCycle))
	}
	return n
}

func (m *MACState) Size() (n int) {
	var l int
	_ = l
	l = m.MACParameters.Size()
	n += 1 + l + sovEndDevice(uint64(l))
	l = m.DesiredMACParameters.Size()
	n += 1 + l + sovEndDevice(uint64(l))
	if m.DeviceClass != 0 {
		n += 1 + sovEndDevice(uint64(m.DeviceClass))
	}
	if m.LoRaWANVersion != 0 {
		n += 1 + sovEndDevice(uint64(m.LoRaWANVersion))
	}
	if m.NextConfirmedDownlinkAt != nil {
		l = types.SizeOfStdTime(*m.NextConfirmedDownlinkAt)
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if m.PingSlotPeriodicity != 0 {
		n += 1 + sovEndDevice(uint64(m.PingSlotPeriodicity))
	}
	if m.PendingApplicationDownlink != nil {
		l = m.PendingApplicationDownlink.Size()
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if len(m.QueuedResponses) > 0 {
		for _, e := range m.QueuedResponses {
			l = e.Size()
			n += 1 + l + sovEndDevice(uint64(l))
		}
	}
	if len(m.PendingRequests) > 0 {
		for _, e := range m.PendingRequests {
			l = e.Size()
			n += 1 + l + sovEndDevice(uint64(l))
		}
	}
	return n
}

func (m *EndDevice) Size() (n int) {
	var l int
	_ = l
	l = m.EndDeviceVersion.Size()
	n += 1 + l + sovEndDevice(uint64(l))
	l = m.EndDeviceIdentifiers.Size()
	n += 1 + l + sovEndDevice(uint64(l))
	if m.RootKeys != nil {
		l = m.RootKeys.Size()
		n += 1 + l + sovEndDevice(uint64(l))
	}
	l = len(m.NetworkServerAddress)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	l = len(m.ApplicationServerAddress)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	l = len(m.FrequencyPlanID)
	if l > 0 {
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if m.MACSettings != nil {
		l = m.MACSettings.Size()
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if m.MACState != nil {
		l = m.MACState.Size()
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if m.SupportsJoin {
		n += 2
	}
	if m.Session != nil {
		l = m.Session.Size()
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if m.SessionFallback != nil {
		l = m.SessionFallback.Size()
		n += 1 + l + sovEndDevice(uint64(l))
	}
	if m.NextDevNonce != 0 {
		n += 1 + sovEndDevice(uint64(m.NextDevNonce))
	}
	if len(m.UsedDevNonces) > 0 {
		l = 0
		for _, e := range m.UsedDevNonces {
			l += sovEndDevice(uint64(e))
		}
		n += 1 + sovEndDevice(uint64(l)) + l
	}
	if m.NextJoinNonce != 0 {
		n += 1 + sovEndDevice(uint64(m.NextJoinNonce))
	}
	if len(m.UsedJoinNonces) > 0 {
		l = 0
		for _, e := range m.UsedJoinNonces {
			l += sovEndDevice(uint64(e))
		}
		n += 1 + sovEndDevice(uint64(l)) + l
	}
	if m.NextRJCount0 != 0 {
		n += 2 + sovEndDevice(uint64(m.NextRJCount0))
	}
	if m.NextRJCount1 != 0 {
		n += 2 + sovEndDevice(uint64(m.NextRJCount1))
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 2 + l + sovEndDevice(uint64(l))
	}
	if m.BatteryPercentage != 0 {
		n += 6
	}
	if m.DownlinkMargin != 0 {
		n += 2 + sovEndDevice(uint64(m.DownlinkMargin))
	}
	if len(m.RecentUplinks) > 0 {
		for _, e := range m.RecentUplinks {
			l = e.Size()
			n += 2 + l + sovEndDevice(uint64(l))
		}
	}
	if len(m.RecentDownlinks) > 0 {
		for _, e := range m.RecentDownlinks {
			l = e.Size()
			n += 2 + l + sovEndDevice(uint64(l))
		}
	}
	if len(m.QueuedApplicationDownlinks) > 0 {
		for _, e := range m.QueuedApplicationDownlinks {
			l = e.Size()
			n += 2 + l + sovEndDevice(uint64(l))
		}
	}
	l = m.DeviceFormatters.Size()
	n += 2 + l + sovEndDevice(uint64(l))
	if m.Attributes != nil {
		l = m.Attributes.Size()
		n += 2 + l + sovEndDevice(uint64(l))
	}
	if m.StatusUpdatedAt != nil {
		l = types.SizeOfStdTime(*m.StatusUpdatedAt)
		n += 2 + l + sovEndDevice(uint64(l))
	}
	l = types.SizeOfStdTime(m.CreatedAt)
	n += 2 + l + sovEndDevice(uint64(l))
	l = types.SizeOfStdTime(m.UpdatedAt)
	n += 2 + l + sovEndDevice(uint64(l))
	return n
}

func (m *EndDevices) Size() (n int) {
	var l int
	_ = l
	if len(m.EndDevices) > 0 {
		for _, e := range m.EndDevices {
			l = e.Size()
			n += 1 + l + sovEndDevice(uint64(l))
		}
	}
	return n
}

func sovEndDevice(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEndDevice(x uint64) (n int) {
	return sovEndDevice((x << 1) ^ uint64((int64(x) >> 63)))
}
func (m *Session) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Session: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Session: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SessionKeys.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextFCntUp", wireType)
			}
			m.NextFCntUp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextFCntUp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextNFCntDown", wireType)
			}
			m.NextNFCntDown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextNFCntDown |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextAFCntDown", wireType)
			}
			m.NextAFCntDown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextAFCntDown |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastConfFCntDown", wireType)
			}
			m.LastConfFCntDown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastConfFCntDown |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdTimeUnmarshal(&m.StartedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceFormatters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceFormatters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceFormatters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpFormatter", wireType)
			}
			m.UpFormatter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpFormatter |= (PayloadFormatter(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpFormatterParameter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpFormatterParameter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownFormatter", wireType)
			}
			m.DownFormatter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DownFormatter |= (PayloadFormatter(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownFormatterParameter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownFormatterParameter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceBrand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceBrand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceBrand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logos", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logos = append(m.Logos, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDeviceModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndDeviceModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndDeviceModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BrandID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDeviceVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndDeviceVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndDeviceVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDeviceModel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EndDeviceModel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoRaWANVersion", wireType)
			}
			m.LoRaWANVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoRaWANVersion |= (MACVersion(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoRaWANPHYVersion", wireType)
			}
			m.LoRaWANPHYVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoRaWANPHYVersion |= (PHYVersion(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HardwareVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirmwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirmwareVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultFormatters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultFormatters == nil {
				m.DefaultFormatters = &DeviceFormatters{}
			}
			if err := m.DefaultFormatters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultMACParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultMACParameters == nil {
				m.DefaultMACParameters = &MACParameters{}
			}
			if err := m.DefaultMACParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinFrequency", wireType)
			}
			m.MinFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinFrequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFrequency", wireType)
			}
			m.MaxFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxFrequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCntResets", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FCntResets = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supports32BitFCnt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Supports32BitFCnt = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableJoinNonceCheck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableJoinNonceCheck = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MACSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MACSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableADR", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableADR = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ADRMargin", wireType)
			}
			m.ADRMargin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ADRMargin |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassBTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdTimeUnmarshal(&m.ClassBTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassCTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdTimeUnmarshal(&m.ClassCTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MACParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MACParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxEIRP", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = binary.LittleEndian.Uint32(dAtA[iNdEx:])
			iNdEx += 4
			m.MaxEIRP = math.Float32frombits(v)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplinkDwellTime", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UplinkDwellTime = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkDwellTime", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DownlinkDwellTime = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ADRDataRateIndex", wireType)
			}
			m.ADRDataRateIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ADRDataRateIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ADRTXPowerIndex", wireType)
			}
			m.ADRTXPowerIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ADRTXPowerIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ADRNbTrans", wireType)
			}
			m.ADRNbTrans = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ADRNbTrans |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ADRAckLimit", wireType)
			}
			m.ADRAckLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ADRAckLimit |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ADRAckDelay", wireType)
			}
			m.ADRAckDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ADRAckDelay |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx1Delay", wireType)
			}
			m.Rx1Delay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx1Delay |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx1DataRateOffset", wireType)
			}
			m.Rx1DataRateOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx1DataRateOffset |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx2DataRateIndex", wireType)
			}
			m.Rx2DataRateIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx2DataRateIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx2Frequency", wireType)
			}
			m.Rx2Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx2Frequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejoinTimePeriodicity", wireType)
			}
			m.RejoinTimePeriodicity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RejoinTimePeriodicity |= (RejoinTimePeriod(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingSlotFrequency", wireType)
			}
			m.PingSlotFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PingSlotFrequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingSlotDataRateIndex", wireType)
			}
			m.PingSlotDataRateIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PingSlotDataRateIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DutyCycle", wireType)
			}
			m.DutyCycle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DutyCycle |= (AggregatedDutyCycle(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MACState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MACState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MACParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MACParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredMACParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DesiredMACParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceClass", wireType)
			}
			m.DeviceClass = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceClass |= (Class(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoRaWANVersion", wireType)
			}
			m.LoRaWANVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoRaWANVersion |= (MACVersion(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextConfirmedDownlinkAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextConfirmedDownlinkAt == nil {
				m.NextConfirmedDownlinkAt = new(time.Time)
			}
			if err := types.StdTimeUnmarshal(m.NextConfirmedDownlinkAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingSlotPeriodicity", wireType)
			}
			m.PingSlotPeriodicity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PingSlotPeriodicity |= (PingSlotPeriod(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingApplicationDownlink", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PendingApplicationDownlink == nil {
				m.PendingApplicationDownlink = &ApplicationDownlink{}
			}
			if err := m.PendingApplicationDownlink.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueuedResponses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueuedResponses = append(m.QueuedResponses, &MACCommand{})
			if err := m.QueuedResponses[len(m.QueuedResponses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingRequests = append(m.PendingRequests, &MACCommand{})
			if err := m.PendingRequests[len(m.PendingRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDevice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndDevice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndDevice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDeviceVersion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EndDeviceVersion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDeviceIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EndDeviceIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RootKeys == nil {
				m.RootKeys = &RootKeys{}
			}
			if err := m.RootKeys.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkServerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkServerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationServerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationServerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyPlanID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrequencyPlanID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MACSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MACSettings == nil {
				m.MACSettings = &MACSettings{}
			}
			if err := m.MACSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MACState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MACState == nil {
				m.MACState = &MACState{}
			}
			if err := m.MACState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportsJoin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SupportsJoin = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Session == nil {
				m.Session = &Session{}
			}
			if err := m.Session.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionFallback", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SessionFallback == nil {
				m.SessionFallback = &Session{}
			}
			if err := m.SessionFallback.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextDevNonce", wireType)
			}
			m.NextDevNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextDevNonce |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEndDevice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UsedDevNonces = append(m.UsedDevNonces, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEndDevice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEndDevice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEndDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UsedDevNonces = append(m.UsedDevNonces, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedDevNonces", wireType)
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextJoinNonce", wireType)
			}
			m.NextJoinNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextJoinNonce |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEndDevice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UsedJoinNonces = append(m.UsedJoinNonces, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEndDevice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEndDevice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEndDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UsedJoinNonces = append(m.UsedJoinNonces, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedJoinNonces", wireType)
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextRJCount0", wireType)
			}
			m.NextRJCount0 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextRJCount0 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextRJCount1", wireType)
			}
			m.NextRJCount1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextRJCount1 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &Location{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatteryPercentage", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = binary.LittleEndian.Uint32(dAtA[iNdEx:])
			iNdEx += 4
			m.BatteryPercentage = math.Float32frombits(v)
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkMargin", wireType)
			}
			m.DownlinkMargin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DownlinkMargin |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecentUplinks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecentUplinks = append(m.RecentUplinks, &UplinkMessage{})
			if err := m.RecentUplinks[len(m.RecentUplinks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecentDownlinks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecentDownlinks = append(m.RecentDownlinks, &DownlinkMessage{})
			if err := m.RecentDownlinks[len(m.RecentDownlinks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueuedApplicationDownlinks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueuedApplicationDownlinks = append(m.QueuedApplicationDownlinks, &ApplicationDownlink{})
			if err := m.QueuedApplicationDownlinks[len(m.QueuedApplicationDownlinks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceFormatters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DeviceFormatters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = &google_protobuf1.Struct{}
			}
			if err := m.Attributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusUpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StatusUpdatedAt == nil {
				m.StatusUpdatedAt = new(time.Time)
			}
			if err := types.StdTimeUnmarshal(m.StatusUpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 97:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDevices) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndDevices: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndDevices: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDevices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndDevices = append(m.EndDevices, &EndDevice{})
			if err := m.EndDevices[len(m.EndDevices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEndDevice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEndDevice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEndDevice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEndDevice
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEndDevice
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEndDevice(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEndDevice = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEndDevice   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("go.thethings.network/lorawan-stack/api/end_device.proto", fileDescriptorEndDevice)
}
func init() {
	golang_proto.RegisterFile("go.thethings.network/lorawan-stack/api/end_device.proto", fileDescriptorEndDevice)
}

var fileDescriptorEndDevice = []byte{
	// 2521 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x4d, 0x70, 0xdb, 0x46,
	0xb2, 0x26, 0x24, 0x59, 0x22, 0x87, 0xe2, 0xdf, 0x48, 0xb2, 0x61, 0xd9, 0x01, 0xf5, 0xe4, 0x54,
	0x9e, 0xde, 0xab, 0x98, 0x8a, 0xe4, 0xa4, 0xec, 0x97, 0x7a, 0x95, 0x0d, 0x7f, 0xec, 0x44, 0x5e,
	0x5b, 0x51, 0x8d, 0xed, 0x24, 0x9b, 0xaa, 0x2d, 0xd4, 0x10, 0x18, 0x52, 0xb0, 0x48, 0x00, 0x99,
	0x19, 0x4a, 0xd4, 0x69, 0x73, 0xcc, 0x2d, 0x39, 0xee, 0x69, 0x2b, 0xb5, 0xa7, 0x1c, 0x73, 0xcc,
	0x31, 0xc7, 0x1c, 0x73, 0x4c, 0xed, 0x81, 0x1b, 0x41, 0x97, 0x54, 0xed, 0x1e, 0x72, 0xcc, 0x71,
	0x6b, 0x7e, 0x00, 0x82, 0x94, 0x9c, 0xa5, 0xab, 0xf6, 0x06, 0x74, 0x7f, 0xdf, 0x37, 0x8d, 0x41,
	0x4f, 0x77, 0x03, 0xe0, 0x6e, 0x37, 0xa8, 0xf1, 0x43, 0xc2, 0x0f, 0x3d, 0xbf, 0xcb, 0x6a, 0x3e,
	0xe1, 0x27, 0x01, 0x3d, 0xda, 0xee, 0x05, 0x14, 0x9f, 0x60, 0xff, 0x36, 0xe3, 0xd8, 0x39, 0xda,
	0xc6, 0xa1, 0xb7, 0x4d, 0x7c, 0xd7, 0x76, 0xc9, 0xb1, 0xe7, 0x90, 0x5a, 0x48, 0x03, 0x1e, 0xc0,
	0x22, 0xe7, 0x7e, 0x4d, 0xe3, 0x6a, 0xc7, 0x77, 0xd6, 0xef, 0xcd, 0x28, 0xe4, 0xb9, 0xc4, 0xe7,
	0x5e, 0xc7, 0x23, 0x94, 0x29, 0xa5, 0xf5, 0x9d, 0x19, 0x99, 0x47, 0xe4, 0x34, 0xa6, 0xbc, 0x39,
	0x23, 0x25, 0x8e, 0x4f, 0xb1, 0xde, 0x9a, 0x91, 0xd5, 0x27, 0x8c, 0xe1, 0x2e, 0x61, 0x2f, 0x4d,
	0xe3, 0xd8, 0xc5, 0x1c, 0x6b, 0xda, 0x3b, 0x33, 0xd2, 0x42, 0x7c, 0xda, 0x0b, 0xb0, 0x6b, 0x77,
	0x02, 0xda, 0xc7, 0x9c, 0x13, 0xaa, 0xf9, 0xb7, 0xbb, 0x1e, 0x3f, 0x1c, 0xb4, 0x6b, 0x4e, 0xd0,
	0xdf, 0xee, 0x06, 0xdd, 0x60, 0x5b, 0x9a, 0xdb, 0x83, 0x8e, 0xbc, 0x93, 0x37, 0xf2, 0x4a, 0xc3,
	0x6f, 0x76, 0x83, 0xa0, 0xdb, 0x23, 0x52, 0x12, 0xfb, 0x7e, 0xc0, 0x31, 0xf7, 0x02, 0x9f, 0x4d,
	0x79, 0x13, 0x0d, 0xc6, 0xe9, 0xc0, 0xe1, 0xda, 0x5b, 0x9d, 0xf6, 0x72, 0xaf, 0x4f, 0x18, 0xc7,
	0xfd, 0x50, 0x01, 0x36, 0xbf, 0x98, 0x07, 0x4b, 0x4f, 0x08, 0x63, 0x5e, 0xe0, 0xc3, 0x8f, 0x40,
	0xd6, 0x25, 0xc7, 0x36, 0x76, 0x5d, 0x6a, 0xce, 0x6d, 0x18, 0x5b, 0xcb, 0x8d, 0xff, 0xff, 0x7e,
	0x54, 0xcd, 0xfc, 0x6d, 0x54, 0x9d, 0xe5, 0xad, 0x84, 0x47, 0xdd, 0x6d, 0x7e, 0x1a, 0x12, 0x56,
	0x6b, 0x91, 0xe3, 0xba, 0xeb, 0x52, 0xb4, 0xe4, 0xaa, 0x0b, 0xf8, 0x7f, 0x60, 0x41, 0xbc, 0x62,
	0x73, 0x7e, 0xc3, 0xd8, 0xca, 0xef, 0xde, 0xa8, 0x4d, 0x26, 0x58, 0x4d, 0xaf, 0xff, 0x7b, 0x72,
	0xca, 0x1a, 0x59, 0xb1, 0xe2, 0x0f, 0xa3, 0xaa, 0x81, 0x24, 0x05, 0xfe, 0x17, 0x28, 0xf8, 0x64,
	0xc8, 0xed, 0x8e, 0xed, 0xf8, 0xdc, 0x1e, 0x84, 0xe6, 0xc2, 0x86, 0xb1, 0x55, 0x40, 0x40, 0x18,
	0x1f, 0x34, 0x7d, 0xfe, 0x2c, 0x84, 0x5b, 0xa0, 0x22, 0x21, 0xbe, 0x06, 0xb9, 0xc1, 0x89, 0x6f,
	0x5e, 0x91, 0x30, 0xc9, 0xdd, 0x17, 0xb8, 0x56, 0x70, 0xe2, 0x27, 0x48, 0x9c, 0x46, 0x2e, 0x8e,
	0x91, 0xf5, 0x04, 0x59, 0x03, 0xab, 0x3d, 0xcc, 0xb8, 0xed, 0x04, 0x7e, 0x27, 0x0d, 0x5e, 0x92,
	0xe0, 0xb2, 0xf0, 0x35, 0x03, 0xbf, 0x93, 0xe0, 0x9b, 0x00, 0x30, 0x8e, 0x29, 0x27, 0xae, 0x8d,
	0xb9, 0x99, 0x95, 0xcf, 0xb9, 0x5e, 0x53, 0x9b, 0x5f, 0x8b, 0x37, 0xbf, 0xf6, 0x34, 0xde, 0x7c,
	0xf5, 0x98, 0x5f, 0xfe, 0xbd, 0x6a, 0xa0, 0x9c, 0xe6, 0xd5, 0xf9, 0xc3, 0x85, 0xac, 0x51, 0x9e,
	0xdb, 0xfc, 0x72, 0x0e, 0x94, 0x5b, 0xf2, 0x3c, 0x3e, 0x88, 0xf3, 0x86, 0xc1, 0x26, 0x58, 0x1e,
	0x84, 0xe3, 0x44, 0x32, 0x8d, 0x0d, 0x63, 0xab, 0xb8, 0xbb, 0x31, 0xbd, 0x93, 0x07, 0x2a, 0xe3,
	0x12, 0x22, 0xca, 0x0f, 0xc2, 0xe4, 0x06, 0xbe, 0x09, 0xae, 0xa6, 0x45, 0xec, 0x10, 0x53, 0xdc,
	0x27, 0x42, 0x4e, 0xbc, 0xed, 0x1c, 0x5a, 0x4d, 0x81, 0x0f, 0x62, 0x1f, 0x7c, 0x0f, 0x14, 0xc5,
	0xa3, 0xa7, 0x16, 0x9f, 0x9f, 0x71, 0xf1, 0x82, 0xe0, 0x8d, 0x97, 0xbf, 0x07, 0xcc, 0x49, 0xa1,
	0x54, 0x00, 0x0b, 0x32, 0x80, 0xab, 0x13, 0x84, 0x24, 0x84, 0xcd, 0xe7, 0x20, 0xaf, 0x76, 0xa4,
	0x41, 0xb1, 0xef, 0xc2, 0xab, 0x60, 0xce, 0x73, 0xe5, 0x16, 0xe4, 0x1a, 0x8b, 0xd1, 0xa8, 0x3a,
	0xb7, 0xd7, 0x42, 0x73, 0x9e, 0x0b, 0x21, 0x58, 0xf0, 0x71, 0x9f, 0xe8, 0xa7, 0x91, 0xd7, 0xf0,
	0x3a, 0x98, 0x1f, 0xd0, 0x9e, 0x0c, 0x39, 0xd7, 0x58, 0x8a, 0x46, 0xd5, 0xf9, 0x67, 0xe8, 0x11,
	0x12, 0x36, 0xb8, 0x0a, 0xae, 0xf4, 0x82, 0x6e, 0xc0, 0xcc, 0x85, 0x8d, 0xf9, 0xad, 0x1c, 0x52,
	0x37, 0x9b, 0x7f, 0x02, 0xc5, 0xfb, 0xbe, 0xab, 0x96, 0x7b, 0x1c, 0xb8, 0xa4, 0x07, 0x5f, 0x03,
	0xd9, 0xbe, 0xb8, 0xb0, 0x93, 0x45, 0xf3, 0xd1, 0xa8, 0xba, 0x24, 0x9d, 0x7b, 0x2d, 0xb4, 0x24,
	0x9d, 0x7b, 0xae, 0xc0, 0xb5, 0x45, 0x7c, 0x02, 0x37, 0x37, 0xc6, 0xc9, 0x98, 0x05, 0x4e, 0x3a,
	0xf7, 0x5c, 0xf8, 0x0a, 0x00, 0x4a, 0x4f, 0x06, 0x2b, 0x23, 0x43, 0x39, 0x69, 0xd9, 0xc7, 0x7d,
	0xb2, 0xf9, 0x97, 0x45, 0x50, 0x4e, 0x22, 0xf8, 0x90, 0x50, 0x79, 0x34, 0xdf, 0x01, 0x57, 0x24,
	0x42, 0x06, 0x90, 0xdf, 0xb5, 0xa6, 0xf7, 0x7e, 0x32, 0xe4, 0xd4, 0x29, 0x52, 0x34, 0xf8, 0x11,
	0x28, 0x69, 0xb4, 0x7d, 0xac, 0x24, 0x65, 0x88, 0xc5, 0xdd, 0xf5, 0x69, 0xa5, 0xc7, 0xf5, 0xa6,
	0x5e, 0xb4, 0x01, 0xa3, 0x51, 0xb5, 0xf8, 0x28, 0x40, 0xf8, 0xa3, 0xfa, 0xbe, 0xb6, 0xa1, 0xa2,
	0x86, 0xc6, 0x81, 0x61, 0xb0, 0x12, 0x0b, 0x87, 0x87, 0xa7, 0x89, 0xf8, 0xfc, 0xe5, 0xe2, 0x07,
	0xef, 0xff, 0x21, 0x16, 0x5f, 0x8b, 0x46, 0xd5, 0x8a, 0x16, 0x1f, 0x9b, 0x51, 0x45, 0xa3, 0x0f,
	0x0e, 0x4f, 0xe3, 0x25, 0xfe, 0x07, 0x94, 0x0f, 0x31, 0x75, 0x4f, 0x30, 0x25, 0x89, 0xbe, 0xca,
	0x97, 0x52, 0x6c, 0x4f, 0x41, 0x3b, 0x1e, 0xed, 0x4f, 0x40, 0xaf, 0x28, 0x68, 0x6c, 0x8f, 0xa1,
	0x1f, 0x00, 0xe8, 0x92, 0x0e, 0x1e, 0xf4, 0xf8, 0x38, 0x21, 0x99, 0x3c, 0xdf, 0xf9, 0x8b, 0xa9,
	0x3d, 0x7d, 0x1e, 0x51, 0x45, 0x73, 0x53, 0x47, 0xb4, 0x0f, 0xae, 0xc6, 0x82, 0x7d, 0xec, 0x8c,
	0x73, 0x9b, 0xe9, 0x72, 0xf0, 0xca, 0x25, 0x3b, 0x9d, 0xa4, 0x38, 0x6b, 0x98, 0xd1, 0xa8, 0xba,
	0xda, 0x52, 0x02, 0x13, 0x1e, 0xb4, 0xaa, 0x65, 0x1f, 0x63, 0x67, 0x6c, 0x85, 0xb7, 0x40, 0xa1,
	0xef, 0xf9, 0x76, 0x87, 0x92, 0x4f, 0x07, 0xc4, 0x77, 0x4e, 0xcd, 0xdc, 0x86, 0xb1, 0xb5, 0x80,
	0x96, 0xfb, 0x9e, 0xff, 0x20, 0xb6, 0x49, 0x10, 0x1e, 0xa6, 0x40, 0x40, 0x83, 0xf0, 0x70, 0x0c,
	0xda, 0x00, 0xcb, 0xaa, 0xc2, 0x51, 0xc2, 0x08, 0x67, 0x66, 0x7e, 0xc3, 0xd8, 0xca, 0x22, 0xd0,
	0x69, 0xfa, 0x1c, 0x49, 0x0b, 0x7c, 0x0f, 0xac, 0xb1, 0x41, 0x18, 0x06, 0x94, 0x33, 0xfb, 0xce,
	0xae, 0xdd, 0xf6, 0x74, 0x3d, 0x36, 0x97, 0x05, 0x54, 0xbd, 0xca, 0x27, 0x1a, 0x70, 0x67, 0xb7,
	0xe1, 0xc9, 0xca, 0x8c, 0x2a, 0x6c, 0xda, 0x04, 0xef, 0x02, 0xd3, 0xf5, 0x18, 0x6e, 0xf7, 0x88,
	0xfd, 0x3c, 0xf0, 0x7c, 0xdb, 0x0f, 0x7c, 0x87, 0xd8, 0xce, 0x21, 0x71, 0x8e, 0xcc, 0x82, 0x5c,
	0x76, 0x4d, 0xfb, 0x1f, 0x06, 0x9e, 0xbf, 0x2f, 0xbc, 0x4d, 0xe1, 0x7c, 0x7b, 0xe1, 0xdb, 0xaf,
	0xaa, 0x99, 0x87, 0x0b, 0xd9, 0xc5, 0xf2, 0xd2, 0xe6, 0xe7, 0x73, 0x20, 0xff, 0xb8, 0xde, 0x7c,
	0x42, 0x38, 0x17, 0xed, 0x08, 0x6e, 0x83, 0x7c, 0x2c, 0x8a, 0x5d, 0x55, 0x1a, 0xb3, 0x8d, 0x62,
	0x34, 0xaa, 0x82, 0x96, 0x32, 0xd7, 0x5b, 0x08, 0x01, 0x0d, 0xa9, 0xbb, 0x14, 0xbe, 0x0e, 0x00,
	0x76, 0xa9, 0xdd, 0xc7, 0xb4, 0xeb, 0xa9, 0x73, 0x50, 0x68, 0x14, 0xa2, 0x51, 0x35, 0x57, 0x6f,
	0xa1, 0xc7, 0xd2, 0x88, 0x72, 0xd8, 0xa5, 0xea, 0x12, 0x3e, 0x02, 0x25, 0xa7, 0x87, 0x19, 0xb3,
	0xdb, 0xb6, 0x68, 0x9e, 0xc1, 0x80, 0xeb, 0x3e, 0x36, 0x5b, 0x7d, 0x2f, 0x48, 0x72, 0xe3, 0xa9,
	0xa2, 0x8e, 0xd5, 0x9c, 0x44, 0x6d, 0xe1, 0xa5, 0xd5, 0x9a, 0x5a, 0x6d, 0xf3, 0x9f, 0x8b, 0xa0,
	0x30, 0x91, 0x2c, 0xb2, 0x58, 0xe1, 0xa1, 0x4d, 0x3c, 0x1a, 0xca, 0x9d, 0x98, 0xd3, 0xc5, 0x0a,
	0x0f, 0xef, 0xef, 0xa1, 0x03, 0xb4, 0xd4, 0xc7, 0xc3, 0xfb, 0x1e, 0x0d, 0xe1, 0xff, 0x82, 0xca,
	0x20, 0xec, 0x79, 0xfe, 0x91, 0xed, 0x9e, 0x90, 0x5e, 0x4f, 0x06, 0x23, 0xb7, 0x22, 0x8b, 0x4a,
	0xca, 0xd1, 0x12, 0x76, 0xb1, 0x10, 0xac, 0x81, 0x15, 0x51, 0x98, 0xa7, 0xd1, 0xf3, 0x12, 0x5d,
	0x89, 0x5d, 0x63, 0x7c, 0x13, 0xac, 0x88, 0xfd, 0x15, 0x13, 0x93, 0x4d, 0x31, 0x27, 0xb6, 0xe7,
	0xbb, 0x64, 0xa8, 0x3a, 0x77, 0x63, 0x35, 0x1a, 0x55, 0xcb, 0xf5, 0x16, 0x6a, 0x61, 0x8e, 0x11,
	0xe6, 0x64, 0x4f, 0xf8, 0x50, 0x19, 0xbb, 0x74, 0xc2, 0x02, 0xdf, 0x05, 0x50, 0x88, 0xf0, 0xa1,
	0x1d, 0x06, 0x27, 0x84, 0x6a, 0x0d, 0xd9, 0xd6, 0x1b, 0x2b, 0xd1, 0xa8, 0x5a, 0xaa, 0xb7, 0xd0,
	0xd3, 0x8f, 0x0f, 0x84, 0x4f, 0x49, 0x94, 0xb0, 0x4b, 0x9f, 0x0e, 0xc7, 0x06, 0xf8, 0x06, 0x58,
	0x16, 0x0a, 0x7e, 0xdb, 0xe6, 0x14, 0xfb, 0x4c, 0x35, 0x7a, 0x95, 0x18, 0xf5, 0x16, 0xda, 0x6f,
	0x3f, 0x15, 0x56, 0x24, 0x52, 0x41, 0x5f, 0xc3, 0x3b, 0xa0, 0x20, 0x18, 0xd8, 0x39, 0xb2, 0x7b,
	0x5e, 0xdf, 0xe3, 0xaa, 0xdd, 0x37, 0x4a, 0xd1, 0xa8, 0x9a, 0xaf, 0xb7, 0x50, 0xdd, 0x39, 0x7a,
	0x24, 0xcc, 0x28, 0x8f, 0x5d, 0x1a, 0xdf, 0xa4, 0x49, 0x2e, 0xe9, 0xe1, 0x53, 0x79, 0xdc, 0x27,
	0x48, 0x2d, 0x61, 0x8e, 0x49, 0xf2, 0x06, 0xde, 0x00, 0x39, 0x3a, 0xdc, 0xd1, 0x84, 0x9c, 0x1c,
	0x2a, 0xb2, 0x74, 0xb8, 0xa3, 0x9c, 0xdb, 0x60, 0x55, 0x3a, 0x93, 0xfd, 0x0b, 0x3a, 0x1d, 0x46,
	0xb8, 0x3c, 0xbc, 0x05, 0x54, 0x11, 0x38, 0xbd, 0x55, 0x1f, 0x48, 0x07, 0xbc, 0x0d, 0x56, 0xe8,
	0x70, 0xf7, 0xc2, 0x86, 0xe7, 0xd5, 0xb0, 0x42, 0x87, 0xbb, 0x93, 0x5b, 0x7b, 0x0b, 0x14, 0x04,
	0x7c, 0x5c, 0x15, 0x96, 0x55, 0x55, 0xa0, 0xc3, 0xdd, 0x71, 0x55, 0xf8, 0x18, 0x5c, 0xa3, 0x44,
	0x1e, 0x52, 0xf1, 0xb2, 0xed, 0x90, 0x50, 0x2f, 0x70, 0x3d, 0xc7, 0xe3, 0xa7, 0xf2, 0xa4, 0x5e,
	0xd2, 0xff, 0x91, 0x84, 0x8b, 0x0c, 0x38, 0x90, 0x60, 0xb4, 0x46, 0xa7, 0x2c, 0x92, 0x2e, 0xd2,
	0x29, 0xf4, 0xfc, 0xae, 0xcd, 0x7a, 0x01, 0x4f, 0x05, 0x51, 0x92, 0x41, 0x54, 0x84, 0xeb, 0x49,
	0x2f, 0xe0, 0xe3, 0x48, 0xee, 0x81, 0xeb, 0x63, 0xfc, 0xf4, 0x33, 0x96, 0xe5, 0x33, 0xae, 0xc5,
	0xac, 0xc9, 0x07, 0x6d, 0x00, 0xe0, 0x0e, 0xf8, 0xa9, 0xed, 0x9c, 0x3a, 0x3d, 0x62, 0x56, 0x64,
	0xd8, 0xb7, 0xa6, 0xc3, 0xae, 0x77, 0xbb, 0x94, 0x74, 0x31, 0x27, 0x6e, 0x6b, 0xc0, 0x4f, 0x9b,
	0x02, 0x8a, 0x72, 0x6e, 0x7c, 0x99, 0x54, 0x9e, 0x62, 0xb9, 0xb4, 0xf9, 0xc5, 0x22, 0xc8, 0x8a,
	0xca, 0xc3, 0x31, 0x27, 0xf0, 0x43, 0x00, 0x9d, 0x01, 0xa5, 0xc4, 0xe7, 0xe9, 0x5a, 0x6f, 0xcc,
	0x52, 0xeb, 0xc7, 0xed, 0xb9, 0xa2, 0x25, 0x52, 0x27, 0xf8, 0xb9, 0x68, 0x4c, 0xcc, 0xa3, 0xc4,
	0x4d, 0xeb, 0xce, 0xcd, 0xa2, 0x7b, 0x53, 0xe8, 0xaa, 0x3e, 0x22, 0x05, 0x26, 0xfb, 0x48, 0x45,
	0xcb, 0xa6, 0xd6, 0xba, 0x07, 0x96, 0xd5, 0xa7, 0x9f, 0x2d, 0xeb, 0x8a, 0x6e, 0xdb, 0x6b, 0xd3,
	0xab, 0x34, 0x85, 0x13, 0xe5, 0x15, 0x54, 0xde, 0x5c, 0x36, 0x50, 0x2c, 0xfc, 0x47, 0x06, 0x8a,
	0x3f, 0x82, 0x75, 0x39, 0xa3, 0x8b, 0xc9, 0xdb, 0xa3, 0x7d, 0xe2, 0xda, 0x49, 0xed, 0xc1, 0x5c,
	0x9e, 0xe1, 0xdf, 0xae, 0x95, 0x0b, 0xb2, 0x4e, 0x5e, 0x13, 0x1a, 0xcd, 0x58, 0xa2, 0xa5, 0x15,
	0xea, 0x1c, 0x22, 0xb0, 0x36, 0x4e, 0xa6, 0x74, 0x52, 0x2f, 0xc9, 0xe8, 0x2f, 0x0c, 0x56, 0x07,
	0x3a, 0xb1, 0x74, 0x4a, 0xaf, 0x84, 0x13, 0xf7, 0x2a, 0xa1, 0x09, 0xb8, 0x19, 0x12, 0xdf, 0x15,
	0xb2, 0x38, 0x0c, 0x7b, 0x9e, 0x23, 0x3f, 0xd0, 0x92, 0xb8, 0x75, 0xff, 0xbf, 0x98, 0x78, 0x63,
	0x6c, 0x1c, 0x20, 0x5a, 0xd7, 0x42, 0x97, 0xf8, 0xe0, 0x7d, 0x50, 0xfe, 0x74, 0x40, 0x06, 0xc4,
	0x15, 0x8d, 0x3a, 0x0c, 0x7c, 0x46, 0x98, 0x99, 0xdb, 0x98, 0x97, 0xfb, 0x71, 0x71, 0xcf, 0x9b,
	0x41, 0xbf, 0x8f, 0x7d, 0x17, 0x95, 0x14, 0x07, 0xc5, 0x14, 0x21, 0x13, 0x47, 0x2b, 0x8f, 0x18,
	0xe3, 0xcc, 0x04, 0xff, 0x5e, 0x46, 0x73, 0x90, 0xa6, 0xa8, 0x73, 0xb1, 0xf9, 0x8f, 0x02, 0xc8,
	0x25, 0xb3, 0x27, 0x6c, 0x81, 0xa5, 0x38, 0x19, 0x8c, 0xcb, 0x07, 0xa9, 0xe9, 0xc1, 0x36, 0x75,
	0x14, 0x62, 0x2a, 0x7c, 0x17, 0xcc, 0x7b, 0x6e, 0x9c, 0xf1, 0xaf, 0xbe, 0x50, 0x61, 0x6f, 0xfc,
	0xbb, 0x21, 0xa5, 0x22, 0xa8, 0xf0, 0x2d, 0x90, 0xa3, 0x41, 0xc0, 0xed, 0xd4, 0x47, 0xa7, 0x79,
	0xa1, 0x5a, 0x05, 0x01, 0x17, 0x5f, 0x9c, 0x28, 0x4b, 0xf5, 0x15, 0xdc, 0x07, 0x57, 0xf5, 0xa7,
	0xad, 0xcd, 0x08, 0x3d, 0x26, 0x54, 0x7e, 0x0a, 0x13, 0xc6, 0xd4, 0xb8, 0xa9, 0x46, 0xb4, 0x7d,
	0x85, 0x78, 0x22, 0x01, 0x75, 0xe5, 0x47, 0xab, 0xfe, 0x25, 0x56, 0xf8, 0x09, 0x58, 0x4f, 0xe7,
	0xc3, 0x94, 0xa6, 0x9c, 0x4b, 0x1b, 0x37, 0xa3, 0x51, 0xd5, 0x4c, 0xbd, 0xed, 0x49, 0x5d, 0x13,
	0xbf, 0xc0, 0x03, 0x7f, 0x07, 0x2a, 0x49, 0xe9, 0xb4, 0xc3, 0x1e, 0xf6, 0xc5, 0x57, 0xc7, 0xa2,
	0x94, 0x94, 0xdd, 0x31, 0x29, 0x9f, 0x07, 0x3d, 0xec, 0xef, 0xb5, 0x50, 0xa9, 0x33, 0x61, 0x70,
	0xe1, 0x07, 0x60, 0x59, 0x8c, 0xa9, 0x4c, 0x4f, 0x51, 0x7a, 0xf2, 0xbd, 0x71, 0x49, 0x0a, 0xc4,
	0x83, 0x96, 0x6a, 0x69, 0x29, 0x03, 0xca, 0xf7, 0xb1, 0x93, 0x8c, 0x61, 0x4d, 0x90, 0x93, 0x82,
	0xa2, 0x38, 0xea, 0x94, 0x37, 0x2f, 0x53, 0x13, 0xfe, 0xc6, 0x72, 0x34, 0xaa, 0x26, 0xa5, 0x14,
	0x65, 0x85, 0x8e, 0x2c, 0xaa, 0xb7, 0x40, 0x21, 0x99, 0x34, 0x45, 0xef, 0x90, 0xbd, 0x31, 0x8b,
	0x96, 0x63, 0xa3, 0x18, 0x0b, 0xe1, 0x0e, 0x58, 0x62, 0xea, 0x97, 0x81, 0x6c, 0x89, 0xf9, 0xdd,
	0x6b, 0x2f, 0xf8, 0xa3, 0x80, 0x62, 0x1c, 0x6c, 0x80, 0xb2, 0xbe, 0xb4, 0x3b, 0xb8, 0xd7, 0x6b,
	0x63, 0xe7, 0x48, 0xb6, 0xc7, 0xdf, 0xe0, 0x96, 0x34, 0xe1, 0x81, 0xc6, 0xc3, 0x57, 0x41, 0x51,
	0x56, 0x26, 0x97, 0x1c, 0xab, 0xc1, 0x55, 0xf6, 0xcd, 0x02, 0x5a, 0x16, 0xd6, 0x16, 0x39, 0x96,
	0xe3, 0x2a, 0x7c, 0x0d, 0x94, 0x06, 0x8c, 0xb8, 0x63, 0x14, 0x33, 0x0b, 0x1b, 0xf3, 0x5b, 0x05,
	0x54, 0x10, 0xe6, 0x18, 0x26, 0x06, 0xb5, 0x92, 0x54, 0x1b, 0xcf, 0xc1, 0x66, 0x71, 0xfc, 0x27,
	0x22, 0x19, 0x7f, 0xe1, 0x16, 0x28, 0x4b, 0xbd, 0x31, 0x8e, 0x99, 0x25, 0x29, 0x58, 0x14, 0xf6,
	0x04, 0xc8, 0xe0, 0x5d, 0xad, 0x48, 0x9f, 0xdb, 0x4e, 0x30, 0xf0, 0xb9, 0xfd, 0x86, 0xea, 0x8e,
	0x8d, 0x72, 0x34, 0xaa, 0x2e, 0xef, 0x93, 0x21, 0x47, 0x0f, 0x9b, 0xc2, 0xf1, 0x86, 0x0a, 0x19,
	0x3d, 0x57, 0x77, 0x17, 0x89, 0x3b, 0xb2, 0x57, 0x5e, 0x24, 0xee, 0x4c, 0x10, 0x77, 0xe0, 0x9b,
	0x20, 0xdb, 0x0b, 0x54, 0x76, 0x9a, 0xf0, 0xf2, 0x37, 0xfe, 0x48, 0xfb, 0x51, 0x82, 0x84, 0xb7,
	0x01, 0x6c, 0xcb, 0x6f, 0xa6, 0x53, 0x51, 0x80, 0x1d, 0xe2, 0x73, 0xdc, 0x25, 0xe6, 0x8a, 0x18,
	0x56, 0x51, 0x45, 0x7b, 0x0e, 0x12, 0x07, 0xfc, 0x6f, 0x50, 0x4a, 0x3a, 0x80, 0x1e, 0xd9, 0x57,
	0x37, 0x8c, 0xad, 0x2b, 0xa8, 0x18, 0x9b, 0xf5, 0xa0, 0xde, 0x02, 0x45, 0x4a, 0x04, 0xcb, 0x56,
	0x03, 0x2c, 0x33, 0xd7, 0x64, 0x59, 0xbb, 0xd0, 0x34, 0x9f, 0x49, 0xf7, 0x63, 0xf5, 0x2f, 0x10,
	0x15, 0x14, 0x49, 0x19, 0x19, 0x7c, 0x08, 0xca, 0x5a, 0x25, 0x96, 0x67, 0xe6, 0x55, 0xa9, 0x53,
	0xbd, 0xf0, 0x55, 0x18, 0xaf, 0xaf, 0x95, 0x4a, 0x8a, 0x18, 0x9b, 0x99, 0x68, 0x0c, 0xba, 0x62,
	0x5f, 0xd6, 0x17, 0x98, 0x79, 0x4d, 0xea, 0xce, 0xd6, 0x18, 0x94, 0xd0, 0x25, 0x2e, 0x11, 0x32,
	0x48, 0x7d, 0xc2, 0x9a, 0xb3, 0x7d, 0xc2, 0xa6, 0x6a, 0x66, 0x8a, 0x0d, 0xef, 0x02, 0x80, 0x39,
	0xa7, 0x5e, 0x7b, 0xc0, 0x09, 0x33, 0xaf, 0xeb, 0x23, 0x32, 0xdd, 0x6e, 0x9f, 0xc8, 0x7f, 0x8c,
	0x28, 0x05, 0x85, 0x8f, 0x40, 0x45, 0x1c, 0xfd, 0x01, 0xb3, 0x07, 0xa1, 0x8b, 0xf5, 0x8f, 0xb0,
	0x1b, 0x33, 0xb6, 0xeb, 0x92, 0xa2, 0x3e, 0x53, 0xcc, 0x3a, 0x87, 0x4d, 0x00, 0x1c, 0x4a, 0x62,
	0x19, 0xfc, 0x32, 0xff, 0xd3, 0x34, 0x4f, 0x89, 0xa4, 0x62, 0x69, 0xbf, 0x8c, 0xc8, 0x20, 0x8e,
	0x24, 0x99, 0xff, 0x9c, 0xb2, 0xbb, 0xf9, 0x3e, 0x00, 0x49, 0xfb, 0x61, 0xf0, 0x6d, 0x90, 0x1f,
	0xff, 0x3b, 0x17, 0x93, 0x9f, 0x78, 0x99, 0xd7, 0x5f, 0xd8, 0xaf, 0x10, 0x20, 0x09, 0xb7, 0xf1,
	0x57, 0xe3, 0xfb, 0x33, 0xcb, 0xf8, 0xe1, 0xcc, 0x32, 0x7e, 0x3c, 0xb3, 0x8c, 0x9f, 0xce, 0x2c,
	0xe3, 0xe7, 0x33, 0x2b, 0xf3, 0xcb, 0x99, 0x95, 0xf9, 0xf5, 0xcc, 0x32, 0x3e, 0x8b, 0xac, 0xcc,
	0xe7, 0x91, 0x95, 0xf9, 0x3a, 0xb2, 0x8c, 0x6f, 0x22, 0x2b, 0xf3, 0x6d, 0x64, 0x19, 0xdf, 0x45,
	0x96, 0xf1, 0x7d, 0x64, 0x19, 0x3f, 0x44, 0x96, 0xf1, 0x63, 0x64, 0x65, 0x7e, 0x8a, 0x2c, 0xe3,
	0xe7, 0xc8, 0xca, 0xfc, 0x12, 0x59, 0xc6, 0xaf, 0x91, 0x95, 0xf9, 0xec, 0xdc, 0xca, 0x7c, 0x7e,
	0x6e, 0x19, 0x5f, 0x9e, 0x5b, 0x99, 0x3f, 0x9f, 0x5b, 0xc6, 0x57, 0xe7, 0x56, 0xe6, 0xeb, 0x73,
	0x2b, 0xf3, 0xcd, 0xb9, 0x65, 0x7c, 0x7b, 0x6e, 0x19, 0xdf, 0x9d, 0x5b, 0xc6, 0x27, 0xaf, 0xcf,
	0xfa, 0x1f, 0x97, 0xfb, 0x61, 0xbb, 0xbd, 0x28, 0xf7, 0xe8, 0xce, 0xbf, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x0f, 0xfa, 0xf7, 0x2c, 0x4a, 0x18, 0x00, 0x00,
}
