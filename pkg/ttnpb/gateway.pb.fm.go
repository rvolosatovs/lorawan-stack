// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import fmt "fmt"

var _GatewayBrandFieldPaths = [...]string{
	"id",
	"logos",
	"name",
	"url",
}

func (*GatewayBrand) FieldMaskPaths() []string {
	ret := make([]string, len(_GatewayBrandFieldPaths))
	copy(ret, _GatewayBrandFieldPaths[:])
	return ret
}

func (dst *GatewayBrand) SetFields(src *GatewayBrand, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "id":
			dst.ID = src.ID
		case "logos":
			dst.Logos = src.Logos
		case "name":
			dst.Name = src.Name
		case "url":
			dst.URL = src.URL
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _GatewayModelFieldPaths = [...]string{
	"brand_id",
	"id",
	"name",
}

func (*GatewayModel) FieldMaskPaths() []string {
	ret := make([]string, len(_GatewayModelFieldPaths))
	copy(ret, _GatewayModelFieldPaths[:])
	return ret
}

func (dst *GatewayModel) SetFields(src *GatewayModel, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "brand_id":
			dst.BrandID = src.BrandID
		case "id":
			dst.ID = src.ID
		case "name":
			dst.Name = src.Name
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _GatewayVersionIdentifiersFieldPaths = [...]string{
	"brand_id",
	"firmware_version",
	"hardware_version",
	"model_id",
}

func (*GatewayVersionIdentifiers) FieldMaskPaths() []string {
	ret := make([]string, len(_GatewayVersionIdentifiersFieldPaths))
	copy(ret, _GatewayVersionIdentifiersFieldPaths[:])
	return ret
}

func (dst *GatewayVersionIdentifiers) SetFields(src *GatewayVersionIdentifiers, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "brand_id":
			dst.BrandID = src.BrandID
		case "firmware_version":
			dst.FirmwareVersion = src.FirmwareVersion
		case "hardware_version":
			dst.HardwareVersion = src.HardwareVersion
		case "model_id":
			dst.ModelID = src.ModelID
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _GatewayRadioFieldPaths = [...]string{
	"chip_type",
	"enable",
	"frequency",
	"rssi_offset",
	"tx_configuration",
	"tx_configuration.max_frequency",
	"tx_configuration.min_frequency",
	"tx_configuration.notch_frequency",
}

func (*GatewayRadio) FieldMaskPaths() []string {
	ret := make([]string, len(_GatewayRadioFieldPaths))
	copy(ret, _GatewayRadioFieldPaths[:])
	return ret
}

func (dst *GatewayRadio) SetFields(src *GatewayRadio, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "chip_type":
			dst.ChipType = src.ChipType
		case "enable":
			dst.Enable = src.Enable
		case "frequency":
			dst.Frequency = src.Frequency
		case "rssi_offset":
			dst.RSSIOffset = src.RSSIOffset
		case "tx_configuration":
			dst.TxConfiguration = src.TxConfiguration
		case "tx_configuration.max_frequency":
			if dst.TxConfiguration == nil {
				dst.TxConfiguration = &GatewayRadio_TxConfiguration{}
			}
			dst.TxConfiguration.SetFields(src.TxConfiguration, _pathsWithoutPrefix("tx_configuration", paths)...)
		case "tx_configuration.min_frequency":
			if dst.TxConfiguration == nil {
				dst.TxConfiguration = &GatewayRadio_TxConfiguration{}
			}
			dst.TxConfiguration.SetFields(src.TxConfiguration, _pathsWithoutPrefix("tx_configuration", paths)...)
		case "tx_configuration.notch_frequency":
			if dst.TxConfiguration == nil {
				dst.TxConfiguration = &GatewayRadio_TxConfiguration{}
			}
			dst.TxConfiguration.SetFields(src.TxConfiguration, _pathsWithoutPrefix("tx_configuration", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _GatewayRadio_TxConfigurationFieldPaths = [...]string{
	"max_frequency",
	"min_frequency",
	"notch_frequency",
}

func (*GatewayRadio_TxConfiguration) FieldMaskPaths() []string {
	ret := make([]string, len(_GatewayRadio_TxConfigurationFieldPaths))
	copy(ret, _GatewayRadio_TxConfigurationFieldPaths[:])
	return ret
}

func (dst *GatewayRadio_TxConfiguration) SetFields(src *GatewayRadio_TxConfiguration, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "max_frequency":
			dst.MaxFrequency = src.MaxFrequency
		case "min_frequency":
			dst.MinFrequency = src.MinFrequency
		case "notch_frequency":
			dst.NotchFrequency = src.NotchFrequency
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _GatewayVersionFieldPaths = [...]string{
	"clock_source",
	"ids",
	"ids.brand_id",
	"ids.firmware_version",
	"ids.hardware_version",
	"ids.model_id",
	"photos",
	"radios",
}

func (*GatewayVersion) FieldMaskPaths() []string {
	ret := make([]string, len(_GatewayVersionFieldPaths))
	copy(ret, _GatewayVersionFieldPaths[:])
	return ret
}

func (dst *GatewayVersion) SetFields(src *GatewayVersion, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "clock_source":
			dst.ClockSource = src.ClockSource
		case "ids":
			dst.GatewayVersionIdentifiers = src.GatewayVersionIdentifiers
		case "ids.brand_id":
			dst.GatewayVersionIdentifiers.SetFields(&src.GatewayVersionIdentifiers, _pathsWithoutPrefix("ids", paths)...)
		case "ids.firmware_version":
			dst.GatewayVersionIdentifiers.SetFields(&src.GatewayVersionIdentifiers, _pathsWithoutPrefix("ids", paths)...)
		case "ids.hardware_version":
			dst.GatewayVersionIdentifiers.SetFields(&src.GatewayVersionIdentifiers, _pathsWithoutPrefix("ids", paths)...)
		case "ids.model_id":
			dst.GatewayVersionIdentifiers.SetFields(&src.GatewayVersionIdentifiers, _pathsWithoutPrefix("ids", paths)...)
		case "photos":
			dst.Photos = src.Photos
		case "radios":
			dst.Radios = src.Radios
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _GatewayFieldPaths = [...]string{
	"antennas",
	"attributes",
	"auto_update",
	"contact_info",
	"created_at",
	"description",
	"downlink_path_constraint",
	"enforce_duty_cycle",
	"frequency_plan_id",
	"gateway_server_address",
	"ids",
	"ids.eui",
	"ids.gateway_id",
	"location_public",
	"name",
	"schedule_downlink_late",
	"status_public",
	"update_channel",
	"updated_at",
	"version_ids",
	"version_ids.brand_id",
	"version_ids.firmware_version",
	"version_ids.hardware_version",
	"version_ids.model_id",
}

func (*Gateway) FieldMaskPaths() []string {
	ret := make([]string, len(_GatewayFieldPaths))
	copy(ret, _GatewayFieldPaths[:])
	return ret
}

func (dst *Gateway) SetFields(src *Gateway, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "antennas":
			dst.Antennas = src.Antennas
		case "attributes":
			dst.Attributes = src.Attributes
		case "auto_update":
			dst.AutoUpdate = src.AutoUpdate
		case "contact_info":
			dst.ContactInfo = src.ContactInfo
		case "created_at":
			dst.CreatedAt = src.CreatedAt
		case "description":
			dst.Description = src.Description
		case "downlink_path_constraint":
			dst.DownlinkPathConstraint = src.DownlinkPathConstraint
		case "enforce_duty_cycle":
			dst.EnforceDutyCycle = src.EnforceDutyCycle
		case "frequency_plan_id":
			dst.FrequencyPlanID = src.FrequencyPlanID
		case "gateway_server_address":
			dst.GatewayServerAddress = src.GatewayServerAddress
		case "ids":
			dst.GatewayIdentifiers = src.GatewayIdentifiers
		case "ids.eui":
			dst.GatewayIdentifiers.SetFields(&src.GatewayIdentifiers, _pathsWithoutPrefix("ids", paths)...)
		case "ids.gateway_id":
			dst.GatewayIdentifiers.SetFields(&src.GatewayIdentifiers, _pathsWithoutPrefix("ids", paths)...)
		case "location_public":
			dst.LocationPublic = src.LocationPublic
		case "name":
			dst.Name = src.Name
		case "schedule_downlink_late":
			dst.ScheduleDownlinkLate = src.ScheduleDownlinkLate
		case "status_public":
			dst.StatusPublic = src.StatusPublic
		case "update_channel":
			dst.UpdateChannel = src.UpdateChannel
		case "updated_at":
			dst.UpdatedAt = src.UpdatedAt
		case "version_ids":
			dst.GatewayVersionIdentifiers = src.GatewayVersionIdentifiers
		case "version_ids.brand_id":
			dst.GatewayVersionIdentifiers.SetFields(&src.GatewayVersionIdentifiers, _pathsWithoutPrefix("version_ids", paths)...)
		case "version_ids.firmware_version":
			dst.GatewayVersionIdentifiers.SetFields(&src.GatewayVersionIdentifiers, _pathsWithoutPrefix("version_ids", paths)...)
		case "version_ids.hardware_version":
			dst.GatewayVersionIdentifiers.SetFields(&src.GatewayVersionIdentifiers, _pathsWithoutPrefix("version_ids", paths)...)
		case "version_ids.model_id":
			dst.GatewayVersionIdentifiers.SetFields(&src.GatewayVersionIdentifiers, _pathsWithoutPrefix("version_ids", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _GatewaysFieldPaths = [...]string{
	"gateways",
}

func (*Gateways) FieldMaskPaths() []string {
	ret := make([]string, len(_GatewaysFieldPaths))
	copy(ret, _GatewaysFieldPaths[:])
	return ret
}

func (dst *Gateways) SetFields(src *Gateways, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "gateways":
			dst.Gateways = src.Gateways
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _GetGatewayRequestFieldPaths = [...]string{
	"field_mask",
	"gateway_ids",
	"gateway_ids.eui",
	"gateway_ids.gateway_id",
}

func (*GetGatewayRequest) FieldMaskPaths() []string {
	ret := make([]string, len(_GetGatewayRequestFieldPaths))
	copy(ret, _GetGatewayRequestFieldPaths[:])
	return ret
}

func (dst *GetGatewayRequest) SetFields(src *GetGatewayRequest, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "field_mask":
			dst.FieldMask = src.FieldMask
		case "gateway_ids":
			dst.GatewayIdentifiers = src.GatewayIdentifiers
		case "gateway_ids.eui":
			dst.GatewayIdentifiers.SetFields(&src.GatewayIdentifiers, _pathsWithoutPrefix("gateway_ids", paths)...)
		case "gateway_ids.gateway_id":
			dst.GatewayIdentifiers.SetFields(&src.GatewayIdentifiers, _pathsWithoutPrefix("gateway_ids", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _ListGatewaysRequestFieldPaths = [...]string{
	"collaborator",
	"collaborator.organization_ids",
	"collaborator.organization_ids.organization_id",
	"collaborator.user_ids",
	"collaborator.user_ids.email",
	"collaborator.user_ids.user_id",
	"field_mask",
	"limit",
	"order",
	"page",
}

func (*ListGatewaysRequest) FieldMaskPaths() []string {
	ret := make([]string, len(_ListGatewaysRequestFieldPaths))
	copy(ret, _ListGatewaysRequestFieldPaths[:])
	return ret
}

func (dst *ListGatewaysRequest) SetFields(src *ListGatewaysRequest, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "collaborator":
			dst.Collaborator = src.Collaborator
		case "collaborator.organization_ids":
			if dst.Collaborator == nil {
				dst.Collaborator = &OrganizationOrUserIdentifiers{}
			}
			dst.Collaborator.SetFields(src.Collaborator, _pathsWithoutPrefix("collaborator", paths)...)
		case "collaborator.organization_ids.organization_id":
			if dst.Collaborator == nil {
				dst.Collaborator = &OrganizationOrUserIdentifiers{}
			}
			dst.Collaborator.SetFields(src.Collaborator, _pathsWithoutPrefix("collaborator", paths)...)
		case "collaborator.user_ids":
			if dst.Collaborator == nil {
				dst.Collaborator = &OrganizationOrUserIdentifiers{}
			}
			dst.Collaborator.SetFields(src.Collaborator, _pathsWithoutPrefix("collaborator", paths)...)
		case "collaborator.user_ids.email":
			if dst.Collaborator == nil {
				dst.Collaborator = &OrganizationOrUserIdentifiers{}
			}
			dst.Collaborator.SetFields(src.Collaborator, _pathsWithoutPrefix("collaborator", paths)...)
		case "collaborator.user_ids.user_id":
			if dst.Collaborator == nil {
				dst.Collaborator = &OrganizationOrUserIdentifiers{}
			}
			dst.Collaborator.SetFields(src.Collaborator, _pathsWithoutPrefix("collaborator", paths)...)
		case "field_mask":
			dst.FieldMask = src.FieldMask
		case "limit":
			dst.Limit = src.Limit
		case "order":
			dst.Order = src.Order
		case "page":
			dst.Page = src.Page
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _CreateGatewayRequestFieldPaths = [...]string{
	"collaborator",
	"collaborator.organization_ids",
	"collaborator.organization_ids.organization_id",
	"collaborator.user_ids",
	"collaborator.user_ids.email",
	"collaborator.user_ids.user_id",
	"gateway",
	"gateway.antennas",
	"gateway.attributes",
	"gateway.auto_update",
	"gateway.contact_info",
	"gateway.created_at",
	"gateway.description",
	"gateway.downlink_path_constraint",
	"gateway.enforce_duty_cycle",
	"gateway.frequency_plan_id",
	"gateway.gateway_server_address",
	"gateway.ids",
	"gateway.ids.eui",
	"gateway.ids.gateway_id",
	"gateway.location_public",
	"gateway.name",
	"gateway.schedule_downlink_late",
	"gateway.status_public",
	"gateway.update_channel",
	"gateway.updated_at",
	"gateway.version_ids",
	"gateway.version_ids.brand_id",
	"gateway.version_ids.firmware_version",
	"gateway.version_ids.hardware_version",
	"gateway.version_ids.model_id",
}

func (*CreateGatewayRequest) FieldMaskPaths() []string {
	ret := make([]string, len(_CreateGatewayRequestFieldPaths))
	copy(ret, _CreateGatewayRequestFieldPaths[:])
	return ret
}

func (dst *CreateGatewayRequest) SetFields(src *CreateGatewayRequest, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "collaborator":
			dst.Collaborator = src.Collaborator
		case "collaborator.organization_ids":
			dst.Collaborator.SetFields(&src.Collaborator, _pathsWithoutPrefix("collaborator", paths)...)
		case "collaborator.organization_ids.organization_id":
			dst.Collaborator.SetFields(&src.Collaborator, _pathsWithoutPrefix("collaborator", paths)...)
		case "collaborator.user_ids":
			dst.Collaborator.SetFields(&src.Collaborator, _pathsWithoutPrefix("collaborator", paths)...)
		case "collaborator.user_ids.email":
			dst.Collaborator.SetFields(&src.Collaborator, _pathsWithoutPrefix("collaborator", paths)...)
		case "collaborator.user_ids.user_id":
			dst.Collaborator.SetFields(&src.Collaborator, _pathsWithoutPrefix("collaborator", paths)...)
		case "gateway":
			dst.Gateway = src.Gateway
		case "gateway.antennas":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.attributes":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.auto_update":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.contact_info":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.created_at":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.description":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.downlink_path_constraint":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.enforce_duty_cycle":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.frequency_plan_id":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.gateway_server_address":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.ids":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.ids.eui":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.ids.gateway_id":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.location_public":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.name":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.schedule_downlink_late":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.status_public":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.update_channel":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.updated_at":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.version_ids":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.version_ids.brand_id":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.version_ids.firmware_version":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.version_ids.hardware_version":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.version_ids.model_id":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _UpdateGatewayRequestFieldPaths = [...]string{
	"field_mask",
	"gateway",
	"gateway.antennas",
	"gateway.attributes",
	"gateway.auto_update",
	"gateway.contact_info",
	"gateway.created_at",
	"gateway.description",
	"gateway.downlink_path_constraint",
	"gateway.enforce_duty_cycle",
	"gateway.frequency_plan_id",
	"gateway.gateway_server_address",
	"gateway.ids",
	"gateway.ids.eui",
	"gateway.ids.gateway_id",
	"gateway.location_public",
	"gateway.name",
	"gateway.schedule_downlink_late",
	"gateway.status_public",
	"gateway.update_channel",
	"gateway.updated_at",
	"gateway.version_ids",
	"gateway.version_ids.brand_id",
	"gateway.version_ids.firmware_version",
	"gateway.version_ids.hardware_version",
	"gateway.version_ids.model_id",
}

func (*UpdateGatewayRequest) FieldMaskPaths() []string {
	ret := make([]string, len(_UpdateGatewayRequestFieldPaths))
	copy(ret, _UpdateGatewayRequestFieldPaths[:])
	return ret
}

func (dst *UpdateGatewayRequest) SetFields(src *UpdateGatewayRequest, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "field_mask":
			dst.FieldMask = src.FieldMask
		case "gateway":
			dst.Gateway = src.Gateway
		case "gateway.antennas":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.attributes":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.auto_update":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.contact_info":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.created_at":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.description":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.downlink_path_constraint":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.enforce_duty_cycle":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.frequency_plan_id":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.gateway_server_address":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.ids":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.ids.eui":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.ids.gateway_id":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.location_public":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.name":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.schedule_downlink_late":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.status_public":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.update_channel":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.updated_at":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.version_ids":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.version_ids.brand_id":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.version_ids.firmware_version":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.version_ids.hardware_version":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		case "gateway.version_ids.model_id":
			dst.Gateway.SetFields(&src.Gateway, _pathsWithoutPrefix("gateway", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _CreateGatewayAPIKeyRequestFieldPaths = [...]string{
	"gateway_ids",
	"gateway_ids.eui",
	"gateway_ids.gateway_id",
	"name",
	"rights",
}

func (*CreateGatewayAPIKeyRequest) FieldMaskPaths() []string {
	ret := make([]string, len(_CreateGatewayAPIKeyRequestFieldPaths))
	copy(ret, _CreateGatewayAPIKeyRequestFieldPaths[:])
	return ret
}

func (dst *CreateGatewayAPIKeyRequest) SetFields(src *CreateGatewayAPIKeyRequest, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "gateway_ids":
			dst.GatewayIdentifiers = src.GatewayIdentifiers
		case "gateway_ids.eui":
			dst.GatewayIdentifiers.SetFields(&src.GatewayIdentifiers, _pathsWithoutPrefix("gateway_ids", paths)...)
		case "gateway_ids.gateway_id":
			dst.GatewayIdentifiers.SetFields(&src.GatewayIdentifiers, _pathsWithoutPrefix("gateway_ids", paths)...)
		case "name":
			dst.Name = src.Name
		case "rights":
			dst.Rights = src.Rights
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _UpdateGatewayAPIKeyRequestFieldPaths = [...]string{
	"api_key",
	"api_key.id",
	"api_key.key",
	"api_key.name",
	"api_key.rights",
	"gateway_ids",
	"gateway_ids.eui",
	"gateway_ids.gateway_id",
}

func (*UpdateGatewayAPIKeyRequest) FieldMaskPaths() []string {
	ret := make([]string, len(_UpdateGatewayAPIKeyRequestFieldPaths))
	copy(ret, _UpdateGatewayAPIKeyRequestFieldPaths[:])
	return ret
}

func (dst *UpdateGatewayAPIKeyRequest) SetFields(src *UpdateGatewayAPIKeyRequest, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "api_key":
			dst.APIKey = src.APIKey
		case "api_key.id":
			dst.APIKey.SetFields(&src.APIKey, _pathsWithoutPrefix("api_key", paths)...)
		case "api_key.key":
			dst.APIKey.SetFields(&src.APIKey, _pathsWithoutPrefix("api_key", paths)...)
		case "api_key.name":
			dst.APIKey.SetFields(&src.APIKey, _pathsWithoutPrefix("api_key", paths)...)
		case "api_key.rights":
			dst.APIKey.SetFields(&src.APIKey, _pathsWithoutPrefix("api_key", paths)...)
		case "gateway_ids":
			dst.GatewayIdentifiers = src.GatewayIdentifiers
		case "gateway_ids.eui":
			dst.GatewayIdentifiers.SetFields(&src.GatewayIdentifiers, _pathsWithoutPrefix("gateway_ids", paths)...)
		case "gateway_ids.gateway_id":
			dst.GatewayIdentifiers.SetFields(&src.GatewayIdentifiers, _pathsWithoutPrefix("gateway_ids", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _SetGatewayCollaboratorRequestFieldPaths = [...]string{
	"collaborator",
	"collaborator.ids",
	"collaborator.ids.organization_ids",
	"collaborator.ids.organization_ids.organization_id",
	"collaborator.ids.user_ids",
	"collaborator.ids.user_ids.email",
	"collaborator.ids.user_ids.user_id",
	"collaborator.rights",
	"gateway_ids",
	"gateway_ids.eui",
	"gateway_ids.gateway_id",
}

func (*SetGatewayCollaboratorRequest) FieldMaskPaths() []string {
	ret := make([]string, len(_SetGatewayCollaboratorRequestFieldPaths))
	copy(ret, _SetGatewayCollaboratorRequestFieldPaths[:])
	return ret
}

func (dst *SetGatewayCollaboratorRequest) SetFields(src *SetGatewayCollaboratorRequest, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "collaborator":
			dst.Collaborator = src.Collaborator
		case "collaborator.ids":
			dst.Collaborator.SetFields(&src.Collaborator, _pathsWithoutPrefix("collaborator", paths)...)
		case "collaborator.ids.organization_ids":
			dst.Collaborator.SetFields(&src.Collaborator, _pathsWithoutPrefix("collaborator", paths)...)
		case "collaborator.ids.organization_ids.organization_id":
			dst.Collaborator.SetFields(&src.Collaborator, _pathsWithoutPrefix("collaborator", paths)...)
		case "collaborator.ids.user_ids":
			dst.Collaborator.SetFields(&src.Collaborator, _pathsWithoutPrefix("collaborator", paths)...)
		case "collaborator.ids.user_ids.email":
			dst.Collaborator.SetFields(&src.Collaborator, _pathsWithoutPrefix("collaborator", paths)...)
		case "collaborator.ids.user_ids.user_id":
			dst.Collaborator.SetFields(&src.Collaborator, _pathsWithoutPrefix("collaborator", paths)...)
		case "collaborator.rights":
			dst.Collaborator.SetFields(&src.Collaborator, _pathsWithoutPrefix("collaborator", paths)...)
		case "gateway_ids":
			dst.GatewayIdentifiers = src.GatewayIdentifiers
		case "gateway_ids.eui":
			dst.GatewayIdentifiers.SetFields(&src.GatewayIdentifiers, _pathsWithoutPrefix("gateway_ids", paths)...)
		case "gateway_ids.gateway_id":
			dst.GatewayIdentifiers.SetFields(&src.GatewayIdentifiers, _pathsWithoutPrefix("gateway_ids", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _GatewayAntennaFieldPaths = [...]string{
	"attributes",
	"gain",
	"location",
	"location.accuracy",
	"location.altitude",
	"location.latitude",
	"location.longitude",
	"location.source",
}

func (*GatewayAntenna) FieldMaskPaths() []string {
	ret := make([]string, len(_GatewayAntennaFieldPaths))
	copy(ret, _GatewayAntennaFieldPaths[:])
	return ret
}

func (dst *GatewayAntenna) SetFields(src *GatewayAntenna, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "attributes":
			dst.Attributes = src.Attributes
		case "gain":
			dst.Gain = src.Gain
		case "location":
			dst.Location = src.Location
		case "location.accuracy":
			dst.Location.SetFields(&src.Location, _pathsWithoutPrefix("location", paths)...)
		case "location.altitude":
			dst.Location.SetFields(&src.Location, _pathsWithoutPrefix("location", paths)...)
		case "location.latitude":
			dst.Location.SetFields(&src.Location, _pathsWithoutPrefix("location", paths)...)
		case "location.longitude":
			dst.Location.SetFields(&src.Location, _pathsWithoutPrefix("location", paths)...)
		case "location.source":
			dst.Location.SetFields(&src.Location, _pathsWithoutPrefix("location", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _GatewayStatusFieldPaths = [...]string{
	"advanced",
	"antenna_locations",
	"boot_time",
	"ip",
	"metrics",
	"time",
	"versions",
}

func (*GatewayStatus) FieldMaskPaths() []string {
	ret := make([]string, len(_GatewayStatusFieldPaths))
	copy(ret, _GatewayStatusFieldPaths[:])
	return ret
}

func (dst *GatewayStatus) SetFields(src *GatewayStatus, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "advanced":
			dst.Advanced = src.Advanced
		case "antenna_locations":
			dst.AntennaLocations = src.AntennaLocations
		case "boot_time":
			dst.BootTime = src.BootTime
		case "ip":
			dst.IP = src.IP
		case "metrics":
			dst.Metrics = src.Metrics
		case "time":
			dst.Time = src.Time
		case "versions":
			dst.Versions = src.Versions
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _GatewayConnectionStatsFieldPaths = [...]string{
	"connected_at",
	"downlink_count",
	"last_downlink_received_at",
	"last_status",
	"last_status.advanced",
	"last_status.antenna_locations",
	"last_status.boot_time",
	"last_status.ip",
	"last_status.metrics",
	"last_status.time",
	"last_status.versions",
	"last_status_received_at",
	"last_uplink_received_at",
	"protocol",
	"uplink_count",
}

func (*GatewayConnectionStats) FieldMaskPaths() []string {
	ret := make([]string, len(_GatewayConnectionStatsFieldPaths))
	copy(ret, _GatewayConnectionStatsFieldPaths[:])
	return ret
}

func (dst *GatewayConnectionStats) SetFields(src *GatewayConnectionStats, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "connected_at":
			dst.ConnectedAt = src.ConnectedAt
		case "downlink_count":
			dst.DownlinkCount = src.DownlinkCount
		case "last_downlink_received_at":
			dst.LastDownlinkReceivedAt = src.LastDownlinkReceivedAt
		case "last_status":
			dst.LastStatus = src.LastStatus
		case "last_status.advanced":
			if dst.LastStatus == nil {
				dst.LastStatus = &GatewayStatus{}
			}
			dst.LastStatus.SetFields(src.LastStatus, _pathsWithoutPrefix("last_status", paths)...)
		case "last_status.antenna_locations":
			if dst.LastStatus == nil {
				dst.LastStatus = &GatewayStatus{}
			}
			dst.LastStatus.SetFields(src.LastStatus, _pathsWithoutPrefix("last_status", paths)...)
		case "last_status.boot_time":
			if dst.LastStatus == nil {
				dst.LastStatus = &GatewayStatus{}
			}
			dst.LastStatus.SetFields(src.LastStatus, _pathsWithoutPrefix("last_status", paths)...)
		case "last_status.ip":
			if dst.LastStatus == nil {
				dst.LastStatus = &GatewayStatus{}
			}
			dst.LastStatus.SetFields(src.LastStatus, _pathsWithoutPrefix("last_status", paths)...)
		case "last_status.metrics":
			if dst.LastStatus == nil {
				dst.LastStatus = &GatewayStatus{}
			}
			dst.LastStatus.SetFields(src.LastStatus, _pathsWithoutPrefix("last_status", paths)...)
		case "last_status.time":
			if dst.LastStatus == nil {
				dst.LastStatus = &GatewayStatus{}
			}
			dst.LastStatus.SetFields(src.LastStatus, _pathsWithoutPrefix("last_status", paths)...)
		case "last_status.versions":
			if dst.LastStatus == nil {
				dst.LastStatus = &GatewayStatus{}
			}
			dst.LastStatus.SetFields(src.LastStatus, _pathsWithoutPrefix("last_status", paths)...)
		case "last_status_received_at":
			dst.LastStatusReceivedAt = src.LastStatusReceivedAt
		case "last_uplink_received_at":
			dst.LastUplinkReceivedAt = src.LastUplinkReceivedAt
		case "protocol":
			dst.Protocol = src.Protocol
		case "uplink_count":
			dst.UplinkCount = src.UplinkCount
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}
