// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/TheThingsNetwork/ttn/api/tokenkey.proto

package ttnpb

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GetTokenInfoRequest struct {
	// access_token is the access token to be instrospected.
	AccessToken string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
}

func (m *GetTokenInfoRequest) Reset()                    { *m = GetTokenInfoRequest{} }
func (m *GetTokenInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTokenInfoRequest) ProtoMessage()               {}
func (*GetTokenInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptorTokenkey, []int{0} }

func (m *GetTokenInfoRequest) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

type GetTokenInfoResponse struct {
	// access_token is the requested access token.
	AccessToken string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	// token_type is the access token type.
	TokenType string `protobuf:"bytes,2,opt,name=token_type,json=tokenType,proto3" json:"token_type,omitempty"`
	// client_id is the client's ID related to the access token.
	ClientID *ClientIdentifier `protobuf:"bytes,3,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	// scope is the list of rights that the user has granted to the client.
	Scope string `protobuf:"bytes,4,opt,name=scope,proto3" json:"scope,omitempty"`
	// expires_in is the TTL of the token in seconds.
	ExpiresIn int32 `protobuf:"varint,5,opt,name=expires_in,json=expiresIn,proto3" json:"expires_in,omitempty"`
	// user_id is the ID of the user who granted access to the third-party client.
	UserID *UserIdentifier `protobuf:"bytes,6,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *GetTokenInfoResponse) Reset()                    { *m = GetTokenInfoResponse{} }
func (m *GetTokenInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTokenInfoResponse) ProtoMessage()               {}
func (*GetTokenInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptorTokenkey, []int{1} }

func (m *GetTokenInfoResponse) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *GetTokenInfoResponse) GetTokenType() string {
	if m != nil {
		return m.TokenType
	}
	return ""
}

func (m *GetTokenInfoResponse) GetClientID() *ClientIdentifier {
	if m != nil {
		return m.ClientID
	}
	return nil
}

func (m *GetTokenInfoResponse) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *GetTokenInfoResponse) GetExpiresIn() int32 {
	if m != nil {
		return m.ExpiresIn
	}
	return 0
}

func (m *GetTokenInfoResponse) GetUserID() *UserIdentifier {
	if m != nil {
		return m.UserID
	}
	return nil
}

type GetKeyInfoRequest struct {
	// key is the value of the key itself.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *GetKeyInfoRequest) Reset()                    { *m = GetKeyInfoRequest{} }
func (m *GetKeyInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*GetKeyInfoRequest) ProtoMessage()               {}
func (*GetKeyInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptorTokenkey, []int{2} }

func (m *GetKeyInfoRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type GetKeyInfoResponse struct {
	// entity_id is the entity's ID the API key is for.
	EntityID string `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	// key is the API key.
	Key *APIKey `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *GetKeyInfoResponse) Reset()                    { *m = GetKeyInfoResponse{} }
func (m *GetKeyInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*GetKeyInfoResponse) ProtoMessage()               {}
func (*GetKeyInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptorTokenkey, []int{3} }

func (m *GetKeyInfoResponse) GetEntityID() string {
	if m != nil {
		return m.EntityID
	}
	return ""
}

func (m *GetKeyInfoResponse) GetKey() *APIKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func init() {
	proto.RegisterType((*GetTokenInfoRequest)(nil), "ttn.v3.GetTokenInfoRequest")
	golang_proto.RegisterType((*GetTokenInfoRequest)(nil), "ttn.v3.GetTokenInfoRequest")
	proto.RegisterType((*GetTokenInfoResponse)(nil), "ttn.v3.GetTokenInfoResponse")
	golang_proto.RegisterType((*GetTokenInfoResponse)(nil), "ttn.v3.GetTokenInfoResponse")
	proto.RegisterType((*GetKeyInfoRequest)(nil), "ttn.v3.GetKeyInfoRequest")
	golang_proto.RegisterType((*GetKeyInfoRequest)(nil), "ttn.v3.GetKeyInfoRequest")
	proto.RegisterType((*GetKeyInfoResponse)(nil), "ttn.v3.GetKeyInfoResponse")
	golang_proto.RegisterType((*GetKeyInfoResponse)(nil), "ttn.v3.GetKeyInfoResponse")
}
func (this *GetTokenInfoRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GetTokenInfoRequest)
	if !ok {
		that2, ok := that.(GetTokenInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GetTokenInfoRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GetTokenInfoRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GetTokenInfoRequest but is not nil && this == nil")
	}
	if this.AccessToken != that1.AccessToken {
		return fmt.Errorf("AccessToken this(%v) Not Equal that(%v)", this.AccessToken, that1.AccessToken)
	}
	return nil
}
func (this *GetTokenInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetTokenInfoRequest)
	if !ok {
		that2, ok := that.(GetTokenInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AccessToken != that1.AccessToken {
		return false
	}
	return true
}
func (this *GetTokenInfoResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GetTokenInfoResponse)
	if !ok {
		that2, ok := that.(GetTokenInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GetTokenInfoResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GetTokenInfoResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GetTokenInfoResponse but is not nil && this == nil")
	}
	if this.AccessToken != that1.AccessToken {
		return fmt.Errorf("AccessToken this(%v) Not Equal that(%v)", this.AccessToken, that1.AccessToken)
	}
	if this.TokenType != that1.TokenType {
		return fmt.Errorf("TokenType this(%v) Not Equal that(%v)", this.TokenType, that1.TokenType)
	}
	if !this.ClientID.Equal(that1.ClientID) {
		return fmt.Errorf("ClientID this(%v) Not Equal that(%v)", this.ClientID, that1.ClientID)
	}
	if this.Scope != that1.Scope {
		return fmt.Errorf("Scope this(%v) Not Equal that(%v)", this.Scope, that1.Scope)
	}
	if this.ExpiresIn != that1.ExpiresIn {
		return fmt.Errorf("ExpiresIn this(%v) Not Equal that(%v)", this.ExpiresIn, that1.ExpiresIn)
	}
	if !this.UserID.Equal(that1.UserID) {
		return fmt.Errorf("UserID this(%v) Not Equal that(%v)", this.UserID, that1.UserID)
	}
	return nil
}
func (this *GetTokenInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetTokenInfoResponse)
	if !ok {
		that2, ok := that.(GetTokenInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AccessToken != that1.AccessToken {
		return false
	}
	if this.TokenType != that1.TokenType {
		return false
	}
	if !this.ClientID.Equal(that1.ClientID) {
		return false
	}
	if this.Scope != that1.Scope {
		return false
	}
	if this.ExpiresIn != that1.ExpiresIn {
		return false
	}
	if !this.UserID.Equal(that1.UserID) {
		return false
	}
	return true
}
func (this *GetKeyInfoRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GetKeyInfoRequest)
	if !ok {
		that2, ok := that.(GetKeyInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GetKeyInfoRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GetKeyInfoRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GetKeyInfoRequest but is not nil && this == nil")
	}
	if this.Key != that1.Key {
		return fmt.Errorf("Key this(%v) Not Equal that(%v)", this.Key, that1.Key)
	}
	return nil
}
func (this *GetKeyInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetKeyInfoRequest)
	if !ok {
		that2, ok := that.(GetKeyInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	return true
}
func (this *GetKeyInfoResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GetKeyInfoResponse)
	if !ok {
		that2, ok := that.(GetKeyInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GetKeyInfoResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GetKeyInfoResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GetKeyInfoResponse but is not nil && this == nil")
	}
	if this.EntityID != that1.EntityID {
		return fmt.Errorf("EntityID this(%v) Not Equal that(%v)", this.EntityID, that1.EntityID)
	}
	if !this.Key.Equal(that1.Key) {
		return fmt.Errorf("Key this(%v) Not Equal that(%v)", this.Key, that1.Key)
	}
	return nil
}
func (this *GetKeyInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetKeyInfoResponse)
	if !ok {
		that2, ok := that.(GetKeyInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	if !this.Key.Equal(that1.Key) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for IsTokenKeyInfo service

type IsTokenKeyInfoClient interface {
	// GetTokenInfo returns an access token information.
	// It returns error if token is expired.
	GetTokenInfo(ctx context.Context, in *GetTokenInfoRequest, opts ...grpc.CallOption) (*GetTokenInfoResponse, error)
	// GetKeyInfo returns an API key information.
	GetKeyInfo(ctx context.Context, in *GetKeyInfoRequest, opts ...grpc.CallOption) (*GetKeyInfoResponse, error)
}

type isTokenKeyInfoClient struct {
	cc *grpc.ClientConn
}

func NewIsTokenKeyInfoClient(cc *grpc.ClientConn) IsTokenKeyInfoClient {
	return &isTokenKeyInfoClient{cc}
}

func (c *isTokenKeyInfoClient) GetTokenInfo(ctx context.Context, in *GetTokenInfoRequest, opts ...grpc.CallOption) (*GetTokenInfoResponse, error) {
	out := new(GetTokenInfoResponse)
	err := grpc.Invoke(ctx, "/ttn.v3.IsTokenKeyInfo/GetTokenInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isTokenKeyInfoClient) GetKeyInfo(ctx context.Context, in *GetKeyInfoRequest, opts ...grpc.CallOption) (*GetKeyInfoResponse, error) {
	out := new(GetKeyInfoResponse)
	err := grpc.Invoke(ctx, "/ttn.v3.IsTokenKeyInfo/GetKeyInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IsTokenKeyInfo service

type IsTokenKeyInfoServer interface {
	// GetTokenInfo returns an access token information.
	// It returns error if token is expired.
	GetTokenInfo(context.Context, *GetTokenInfoRequest) (*GetTokenInfoResponse, error)
	// GetKeyInfo returns an API key information.
	GetKeyInfo(context.Context, *GetKeyInfoRequest) (*GetKeyInfoResponse, error)
}

func RegisterIsTokenKeyInfoServer(s *grpc.Server, srv IsTokenKeyInfoServer) {
	s.RegisterService(&_IsTokenKeyInfo_serviceDesc, srv)
}

func _IsTokenKeyInfo_GetTokenInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsTokenKeyInfoServer).GetTokenInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsTokenKeyInfo/GetTokenInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsTokenKeyInfoServer).GetTokenInfo(ctx, req.(*GetTokenInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsTokenKeyInfo_GetKeyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsTokenKeyInfoServer).GetKeyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsTokenKeyInfo/GetKeyInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsTokenKeyInfoServer).GetKeyInfo(ctx, req.(*GetKeyInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IsTokenKeyInfo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.v3.IsTokenKeyInfo",
	HandlerType: (*IsTokenKeyInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTokenInfo",
			Handler:    _IsTokenKeyInfo_GetTokenInfo_Handler,
		},
		{
			MethodName: "GetKeyInfo",
			Handler:    _IsTokenKeyInfo_GetKeyInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/ttn/api/tokenkey.proto",
}

func (m *GetTokenInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTokenInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AccessToken) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTokenkey(dAtA, i, uint64(len(m.AccessToken)))
		i += copy(dAtA[i:], m.AccessToken)
	}
	return i, nil
}

func (m *GetTokenInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTokenInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AccessToken) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTokenkey(dAtA, i, uint64(len(m.AccessToken)))
		i += copy(dAtA[i:], m.AccessToken)
	}
	if len(m.TokenType) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTokenkey(dAtA, i, uint64(len(m.TokenType)))
		i += copy(dAtA[i:], m.TokenType)
	}
	if m.ClientID != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTokenkey(dAtA, i, uint64(m.ClientID.Size()))
		n1, err := m.ClientID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Scope) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTokenkey(dAtA, i, uint64(len(m.Scope)))
		i += copy(dAtA[i:], m.Scope)
	}
	if m.ExpiresIn != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTokenkey(dAtA, i, uint64(m.ExpiresIn))
	}
	if m.UserID != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTokenkey(dAtA, i, uint64(m.UserID.Size()))
		n2, err := m.UserID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *GetKeyInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetKeyInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTokenkey(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	return i, nil
}

func (m *GetKeyInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetKeyInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EntityID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTokenkey(dAtA, i, uint64(len(m.EntityID)))
		i += copy(dAtA[i:], m.EntityID)
	}
	if m.Key != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTokenkey(dAtA, i, uint64(m.Key.Size()))
		n3, err := m.Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func encodeVarintTokenkey(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedGetTokenInfoRequest(r randyTokenkey, easy bool) *GetTokenInfoRequest {
	this := &GetTokenInfoRequest{}
	this.AccessToken = randStringTokenkey(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetTokenInfoResponse(r randyTokenkey, easy bool) *GetTokenInfoResponse {
	this := &GetTokenInfoResponse{}
	this.AccessToken = randStringTokenkey(r)
	this.TokenType = randStringTokenkey(r)
	if r.Intn(10) != 0 {
		this.ClientID = NewPopulatedClientIdentifier(r, easy)
	}
	this.Scope = randStringTokenkey(r)
	this.ExpiresIn = r.Int31()
	if r.Intn(2) == 0 {
		this.ExpiresIn *= -1
	}
	if r.Intn(10) != 0 {
		this.UserID = NewPopulatedUserIdentifier(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetKeyInfoRequest(r randyTokenkey, easy bool) *GetKeyInfoRequest {
	this := &GetKeyInfoRequest{}
	this.Key = randStringTokenkey(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetKeyInfoResponse(r randyTokenkey, easy bool) *GetKeyInfoResponse {
	this := &GetKeyInfoResponse{}
	this.EntityID = randStringTokenkey(r)
	if r.Intn(10) != 0 {
		this.Key = NewPopulatedAPIKey(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyTokenkey interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTokenkey(r randyTokenkey) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTokenkey(r randyTokenkey) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneTokenkey(r)
	}
	return string(tmps)
}
func randUnrecognizedTokenkey(r randyTokenkey, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldTokenkey(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldTokenkey(dAtA []byte, r randyTokenkey, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateTokenkey(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateTokenkey(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateTokenkey(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateTokenkey(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateTokenkey(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateTokenkey(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateTokenkey(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *GetTokenInfoRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovTokenkey(uint64(l))
	}
	return n
}

func (m *GetTokenInfoResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovTokenkey(uint64(l))
	}
	l = len(m.TokenType)
	if l > 0 {
		n += 1 + l + sovTokenkey(uint64(l))
	}
	if m.ClientID != nil {
		l = m.ClientID.Size()
		n += 1 + l + sovTokenkey(uint64(l))
	}
	l = len(m.Scope)
	if l > 0 {
		n += 1 + l + sovTokenkey(uint64(l))
	}
	if m.ExpiresIn != 0 {
		n += 1 + sovTokenkey(uint64(m.ExpiresIn))
	}
	if m.UserID != nil {
		l = m.UserID.Size()
		n += 1 + l + sovTokenkey(uint64(l))
	}
	return n
}

func (m *GetKeyInfoRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovTokenkey(uint64(l))
	}
	return n
}

func (m *GetKeyInfoResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.EntityID)
	if l > 0 {
		n += 1 + l + sovTokenkey(uint64(l))
	}
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovTokenkey(uint64(l))
	}
	return n
}

func sovTokenkey(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTokenkey(x uint64) (n int) {
	return sovTokenkey((x << 1) ^ uint64((int64(x) >> 63)))
}
func (m *GetTokenInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTokenInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTokenInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTokenkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTokenkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTokenInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTokenInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTokenInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTokenkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientID == nil {
				m.ClientID = &ClientIdentifier{}
			}
			if err := m.ClientID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scope = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresIn", wireType)
			}
			m.ExpiresIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiresIn |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTokenkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserID == nil {
				m.UserID = &UserIdentifier{}
			}
			if err := m.UserID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTokenkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTokenkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetKeyInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetKeyInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetKeyInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTokenkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTokenkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetKeyInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetKeyInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetKeyInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTokenkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &APIKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTokenkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTokenkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTokenkey(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTokenkey
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTokenkey
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTokenkey
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTokenkey
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTokenkey
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTokenkey(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTokenkey = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTokenkey   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/tokenkey.proto", fileDescriptorTokenkey)
}
func init() {
	golang_proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/tokenkey.proto", fileDescriptorTokenkey)
}

var fileDescriptorTokenkey = []byte{
	// 571 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x31, 0x6c, 0xd3, 0x4c,
	0x14, 0xbe, 0xd7, 0xfe, 0xcd, 0xdf, 0x5c, 0xab, 0x0a, 0x4c, 0x85, 0x4c, 0x80, 0xd7, 0x10, 0x09,
	0xa9, 0x1d, 0x70, 0x50, 0x2b, 0x24, 0x24, 0x26, 0xda, 0xa2, 0xca, 0xaa, 0x84, 0x50, 0x14, 0x16,
	0x96, 0x28, 0x71, 0x5e, 0x1c, 0x2b, 0x60, 0x1b, 0xfb, 0x0c, 0x78, 0xeb, 0xd8, 0x0d, 0x46, 0x36,
	0x3a, 0x76, 0xec, 0xd8, 0xb1, 0x63, 0xc7, 0x8e, 0x9d, 0xaa, 0xfa, 0xbc, 0x74, 0xec, 0xd8, 0x11,
	0xf9, 0xec, 0x80, 0x2b, 0x45, 0x22, 0x93, 0x7d, 0xef, 0xfb, 0xbe, 0xf7, 0xbd, 0xef, 0x9d, 0x8e,
	0xaf, 0xdb, 0x8e, 0x18, 0x46, 0x3d, 0xc3, 0xf2, 0x3e, 0x35, 0xdb, 0x43, 0x6a, 0x0f, 0x1d, 0xd7,
	0x0e, 0xdf, 0x92, 0xf8, 0xea, 0x05, 0xa3, 0xa6, 0x10, 0x6e, 0xb3, 0xeb, 0x3b, 0x4d, 0xe1, 0x8d,
	0xc8, 0x1d, 0x51, 0x6c, 0xf8, 0x81, 0x27, 0x3c, 0xad, 0x22, 0x84, 0x6b, 0x7c, 0xd9, 0xa8, 0x3d,
	0x2b, 0x69, 0x6d, 0xcf, 0xf6, 0x9a, 0x0a, 0xee, 0x45, 0x03, 0x75, 0x52, 0x07, 0xf5, 0x97, 0xcb,
	0x6a, 0xc6, 0x34, 0x56, 0xdd, 0x48, 0x0c, 0x0b, 0xfe, 0x8b, 0x69, 0xf8, 0x4e, 0x9f, 0x5c, 0xe1,
	0x0c, 0x1c, 0x0a, 0xc2, 0x42, 0xf6, 0x7c, 0x1a, 0x59, 0xe0, 0xd8, 0x43, 0x51, 0x28, 0x1a, 0x2f,
	0xf9, 0xbd, 0x1d, 0x12, 0xed, 0x2c, 0xa4, 0xe9, 0x0e, 0xbc, 0x16, 0x7d, 0x8e, 0x28, 0x14, 0xda,
	0x13, 0xbe, 0xd8, 0xb5, 0x2c, 0x0a, 0xc3, 0x8e, 0xca, 0xaf, 0x43, 0x1d, 0x56, 0xab, 0xad, 0x85,
	0xbc, 0xa6, 0xd8, 0x8d, 0xef, 0x33, 0x7c, 0xf9, 0xb6, 0x34, 0xf4, 0x3d, 0x37, 0xa4, 0x29, 0xb4,
	0xda, 0x63, 0xce, 0x15, 0xd6, 0x11, 0xb1, 0x4f, 0xfa, 0x8c, 0x22, 0x54, 0x55, 0xa5, 0x1d, 0xfb,
	0xa4, 0x6d, 0xf1, 0xaa, 0xf5, 0xd1, 0x21, 0x57, 0x74, 0x9c, 0xbe, 0x3e, 0x5b, 0x87, 0xd5, 0x85,
	0x75, 0xdd, 0xc8, 0x17, 0x6f, 0x6c, 0x29, 0xc0, 0xfc, 0x13, 0x7d, 0x73, 0x51, 0x5e, 0xac, 0xcc,
	0x17, 0xd5, 0xed, 0xd6, 0xbc, 0x55, 0xe0, 0xda, 0x32, 0x9f, 0x0b, 0x2d, 0xcf, 0x27, 0xfd, 0x3f,
	0xd5, 0x3e, 0x3f, 0x64, 0xce, 0xf4, 0xcd, 0x77, 0x02, 0x0a, 0x3b, 0x8e, 0xab, 0xcf, 0xd5, 0x61,
	0x75, 0xae, 0x55, 0x2d, 0x2a, 0xa6, 0xab, 0xbd, 0xe2, 0xff, 0x47, 0x21, 0x05, 0x99, 0x6f, 0x45,
	0xf9, 0xde, 0x1f, 0xfb, 0xbe, 0x0f, 0x29, 0x28, 0xb9, 0x72, 0x79, 0xb1, 0x52, 0x51, 0xb5, 0xed,
	0x56, 0x25, 0x52, 0x58, 0xe3, 0x29, 0xbf, 0xbb, 0x43, 0x62, 0x97, 0xe2, 0xf2, 0x26, 0xef, 0xf0,
	0xd9, 0x11, 0xc5, 0xc5, 0x12, 0xb2, 0xdf, 0x46, 0x97, 0x6b, 0x65, 0x5a, 0xb1, 0xb5, 0x35, 0x5e,
	0xcd, 0x9a, 0x8b, 0x38, 0xf3, 0x56, 0xec, 0x3c, 0xd9, 0x1b, 0x55, 0xcc, 0x92, 0xe5, 0xb0, 0xd9,
	0xd7, 0xea, 0x79, 0xcb, 0x19, 0x35, 0xe0, 0xd2, 0x78, 0xc0, 0xd7, 0xef, 0xcc, 0x5d, 0x8a, 0x95,
	0xc5, 0xfa, 0x01, 0xf0, 0x25, 0x33, 0xdf, 0x75, 0xe1, 0xa3, 0x99, 0x7c, 0xb1, 0x7c, 0x5b, 0xda,
	0xc3, 0xb1, 0x6e, 0xc2, 0xf5, 0xd7, 0x1e, 0x4d, 0x06, 0x8b, 0x51, 0xb7, 0x38, 0xff, 0x1b, 0x40,
	0x7b, 0x50, 0xe2, 0xde, 0xce, 0x5e, 0xab, 0x4d, 0x82, 0xf2, 0x26, 0x9b, 0xbf, 0xe0, 0x34, 0x41,
	0x38, 0x4b, 0x10, 0xce, 0x13, 0x84, 0xcb, 0x04, 0xe1, 0x2a, 0x41, 0x76, 0x9d, 0x20, 0xbb, 0x49,
	0x10, 0xf6, 0x24, 0xb2, 0x7d, 0x89, 0xec, 0x50, 0x22, 0x1c, 0x49, 0x64, 0xc7, 0x12, 0xe1, 0x44,
	0x22, 0x9c, 0x4a, 0x84, 0x33, 0x89, 0x70, 0x2e, 0x91, 0x5d, 0x4a, 0x84, 0x2b, 0x89, 0xec, 0x5a,
	0x22, 0xdc, 0x48, 0x64, 0x7b, 0x29, 0xb2, 0xfd, 0x14, 0xe1, 0x47, 0x8a, 0xec, 0x67, 0x8a, 0x70,
	0x90, 0x22, 0x3b, 0x4c, 0x91, 0x1d, 0xa5, 0x08, 0xc7, 0x29, 0xc2, 0x49, 0x8a, 0xf0, 0x61, 0xed,
	0x5f, 0x2f, 0xc4, 0x1f, 0xd9, 0xd9, 0xd7, 0xef, 0xf5, 0x2a, 0xea, 0x85, 0x6c, 0xfc, 0x0e, 0x00,
	0x00, 0xff, 0xff, 0x1c, 0xc3, 0xf5, 0xf2, 0x27, 0x04, 0x00, 0x00,
}
