// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/TheThingsNetwork/ttn/api/tokenkey.proto

package ttnpb

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// TokenKeyRequest is the request for a specific token key.
type TokenKeyRequest struct {
	// key id used for token rotation.
	KID string `protobuf:"bytes,1,opt,name=kid,proto3" json:"kid,omitempty"`
}

func (m *TokenKeyRequest) Reset()                    { *m = TokenKeyRequest{} }
func (m *TokenKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*TokenKeyRequest) ProtoMessage()               {}
func (*TokenKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptorTokenkey, []int{0} }

func (m *TokenKeyRequest) GetKID() string {
	if m != nil {
		return m.KID
	}
	return ""
}

type TokenKeyResponse struct {
	// public key that is used to sign the tokens. PEM-encoded string.
	PublicKey string `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// key id used for token rotation.
	KID string `protobuf:"bytes,2,opt,name=kid,proto3" json:"kid,omitempty"`
	// algorithm used for this token.
	Algorithm string `protobuf:"bytes,3,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
}

func (m *TokenKeyResponse) Reset()                    { *m = TokenKeyResponse{} }
func (m *TokenKeyResponse) String() string            { return proto.CompactTextString(m) }
func (*TokenKeyResponse) ProtoMessage()               {}
func (*TokenKeyResponse) Descriptor() ([]byte, []int) { return fileDescriptorTokenkey, []int{1} }

func (m *TokenKeyResponse) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *TokenKeyResponse) GetKID() string {
	if m != nil {
		return m.KID
	}
	return ""
}

func (m *TokenKeyResponse) GetAlgorithm() string {
	if m != nil {
		return m.Algorithm
	}
	return ""
}

func init() {
	proto.RegisterType((*TokenKeyRequest)(nil), "ttn.v3.TokenKeyRequest")
	golang_proto.RegisterType((*TokenKeyRequest)(nil), "ttn.v3.TokenKeyRequest")
	proto.RegisterType((*TokenKeyResponse)(nil), "ttn.v3.TokenKeyResponse")
	golang_proto.RegisterType((*TokenKeyResponse)(nil), "ttn.v3.TokenKeyResponse")
}
func (this *TokenKeyRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*TokenKeyRequest)
	if !ok {
		that2, ok := that.(TokenKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *TokenKeyRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *TokenKeyRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *TokenKeyRequest but is not nil && this == nil")
	}
	if this.KID != that1.KID {
		return fmt.Errorf("KID this(%v) Not Equal that(%v)", this.KID, that1.KID)
	}
	return nil
}
func (this *TokenKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TokenKeyRequest)
	if !ok {
		that2, ok := that.(TokenKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.KID != that1.KID {
		return false
	}
	return true
}
func (this *TokenKeyResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*TokenKeyResponse)
	if !ok {
		that2, ok := that.(TokenKeyResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *TokenKeyResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *TokenKeyResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *TokenKeyResponse but is not nil && this == nil")
	}
	if this.PublicKey != that1.PublicKey {
		return fmt.Errorf("PublicKey this(%v) Not Equal that(%v)", this.PublicKey, that1.PublicKey)
	}
	if this.KID != that1.KID {
		return fmt.Errorf("KID this(%v) Not Equal that(%v)", this.KID, that1.KID)
	}
	if this.Algorithm != that1.Algorithm {
		return fmt.Errorf("Algorithm this(%v) Not Equal that(%v)", this.Algorithm, that1.Algorithm)
	}
	return nil
}
func (this *TokenKeyResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TokenKeyResponse)
	if !ok {
		that2, ok := that.(TokenKeyResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.PublicKey != that1.PublicKey {
		return false
	}
	if this.KID != that1.KID {
		return false
	}
	if this.Algorithm != that1.Algorithm {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TokenKeyProvider service

type TokenKeyProviderClient interface {
	// GetTokenKey gets the token public key for with the specified kid.
	GetTokenKey(ctx context.Context, in *TokenKeyRequest, opts ...grpc.CallOption) (*TokenKeyResponse, error)
}

type tokenKeyProviderClient struct {
	cc *grpc.ClientConn
}

func NewTokenKeyProviderClient(cc *grpc.ClientConn) TokenKeyProviderClient {
	return &tokenKeyProviderClient{cc}
}

func (c *tokenKeyProviderClient) GetTokenKey(ctx context.Context, in *TokenKeyRequest, opts ...grpc.CallOption) (*TokenKeyResponse, error) {
	out := new(TokenKeyResponse)
	err := grpc.Invoke(ctx, "/ttn.v3.TokenKeyProvider/GetTokenKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TokenKeyProvider service

type TokenKeyProviderServer interface {
	// GetTokenKey gets the token public key for with the specified kid.
	GetTokenKey(context.Context, *TokenKeyRequest) (*TokenKeyResponse, error)
}

func RegisterTokenKeyProviderServer(s *grpc.Server, srv TokenKeyProviderServer) {
	s.RegisterService(&_TokenKeyProvider_serviceDesc, srv)
}

func _TokenKeyProvider_GetTokenKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenKeyProviderServer).GetTokenKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.TokenKeyProvider/GetTokenKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenKeyProviderServer).GetTokenKey(ctx, req.(*TokenKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TokenKeyProvider_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.v3.TokenKeyProvider",
	HandlerType: (*TokenKeyProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTokenKey",
			Handler:    _TokenKeyProvider_GetTokenKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/ttn/api/tokenkey.proto",
}

func (m *TokenKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.KID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTokenkey(dAtA, i, uint64(len(m.KID)))
		i += copy(dAtA[i:], m.KID)
	}
	return i, nil
}

func (m *TokenKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PublicKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTokenkey(dAtA, i, uint64(len(m.PublicKey)))
		i += copy(dAtA[i:], m.PublicKey)
	}
	if len(m.KID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTokenkey(dAtA, i, uint64(len(m.KID)))
		i += copy(dAtA[i:], m.KID)
	}
	if len(m.Algorithm) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTokenkey(dAtA, i, uint64(len(m.Algorithm)))
		i += copy(dAtA[i:], m.Algorithm)
	}
	return i, nil
}

func encodeVarintTokenkey(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedTokenKeyRequest(r randyTokenkey, easy bool) *TokenKeyRequest {
	this := &TokenKeyRequest{}
	this.KID = string(randStringTokenkey(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTokenKeyResponse(r randyTokenkey, easy bool) *TokenKeyResponse {
	this := &TokenKeyResponse{}
	this.PublicKey = string(randStringTokenkey(r))
	this.KID = string(randStringTokenkey(r))
	this.Algorithm = string(randStringTokenkey(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyTokenkey interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTokenkey(r randyTokenkey) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTokenkey(r randyTokenkey) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneTokenkey(r)
	}
	return string(tmps)
}
func randUnrecognizedTokenkey(r randyTokenkey, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldTokenkey(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldTokenkey(dAtA []byte, r randyTokenkey, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateTokenkey(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateTokenkey(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateTokenkey(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateTokenkey(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateTokenkey(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateTokenkey(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateTokenkey(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *TokenKeyRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.KID)
	if l > 0 {
		n += 1 + l + sovTokenkey(uint64(l))
	}
	return n
}

func (m *TokenKeyResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovTokenkey(uint64(l))
	}
	l = len(m.KID)
	if l > 0 {
		n += 1 + l + sovTokenkey(uint64(l))
	}
	l = len(m.Algorithm)
	if l > 0 {
		n += 1 + l + sovTokenkey(uint64(l))
	}
	return n
}

func sovTokenkey(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTokenkey(x uint64) (n int) {
	return sovTokenkey(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TokenKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTokenkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTokenkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algorithm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Algorithm = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTokenkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTokenkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTokenkey(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTokenkey
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTokenkey
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTokenkey
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTokenkey
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTokenkey
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTokenkey(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTokenkey = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTokenkey   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/tokenkey.proto", fileDescriptorTokenkey)
}
func init() {
	golang_proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/tokenkey.proto", fileDescriptorTokenkey)
}

var fileDescriptorTokenkey = []byte{
	// 372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xb1, 0x6f, 0xda, 0x40,
	0x14, 0xc6, 0xef, 0x15, 0x89, 0x8a, 0xeb, 0xd0, 0xca, 0x4b, 0x29, 0x6a, 0x5f, 0x2b, 0xa6, 0x56,
	0x6a, 0x6d, 0x09, 0xfe, 0x81, 0x0a, 0x55, 0xaa, 0x22, 0xa4, 0x28, 0x42, 0x9e, 0xb2, 0x44, 0x18,
	0x2e, 0xb6, 0x63, 0xf0, 0x39, 0xf6, 0x99, 0xc8, 0x1b, 0x23, 0x63, 0xc6, 0x6c, 0xc9, 0xc8, 0xc8,
	0xc8, 0xc8, 0xc8, 0xc8, 0xc8, 0x14, 0xe1, 0xbb, 0x85, 0x91, 0x91, 0x31, 0xc2, 0x16, 0x21, 0x0a,
	0x43, 0xa6, 0xbb, 0xf7, 0xbd, 0xfb, 0x7d, 0xf7, 0x9e, 0x3e, 0x5a, 0xb3, 0x5d, 0xe1, 0xc4, 0x96,
	0xde, 0xe1, 0x7d, 0xc3, 0x74, 0x98, 0xe9, 0xb8, 0xbe, 0x1d, 0x9d, 0x32, 0x71, 0xc3, 0x43, 0xcf,
	0x10, 0xc2, 0x37, 0xda, 0x81, 0x6b, 0x08, 0xee, 0x31, 0xdf, 0x63, 0x89, 0x1e, 0x84, 0x5c, 0x70,
	0xad, 0x28, 0x84, 0xaf, 0x0f, 0xea, 0x95, 0x3f, 0x2f, 0x58, 0x9b, 0xdb, 0xdc, 0xc8, 0xda, 0x56,
	0x7c, 0x99, 0x55, 0x59, 0x91, 0xdd, 0x72, 0xac, 0xfa, 0x9b, 0x7e, 0x34, 0x77, 0x46, 0x4d, 0x96,
	0xb4, 0xd8, 0x75, 0xcc, 0x22, 0xa1, 0x7d, 0xa1, 0x05, 0xcf, 0xed, 0x96, 0xe1, 0x07, 0xfc, 0x2c,
	0x35, 0xde, 0xcb, 0xc7, 0xef, 0x85, 0xe6, 0xc9, 0xbf, 0xd6, 0x4e, 0xab, 0x5e, 0xd1, 0x4f, 0x87,
	0xd7, 0x51, 0xc0, 0xfd, 0x88, 0x69, 0xdf, 0x28, 0x0d, 0x62, 0xab, 0xe7, 0x76, 0x2e, 0x3c, 0x96,
	0xe4, 0x54, 0xab, 0x94, 0x2b, 0x4d, 0x96, 0xec, 0xdd, 0xde, 0x1d, 0xbb, 0x69, 0x5f, 0x69, 0xa9,
	0xdd, 0xb3, 0x79, 0xe8, 0x0a, 0xa7, 0x5f, 0x2e, 0xe4, 0xe0, 0xb3, 0x50, 0x33, 0x0f, 0x7f, 0x9d,
	0x85, 0x7c, 0xe0, 0x76, 0x59, 0xa8, 0xfd, 0xa5, 0x1f, 0xfe, 0x33, 0xb1, 0x97, 0xb5, 0xcf, 0x7a,
	0xbe, 0xb4, 0xfe, 0x6a, 0x85, 0x4a, 0xf9, 0xb8, 0x91, 0x4f, 0xdb, 0xb8, 0x87, 0x79, 0x8a, 0xb0,
	0x48, 0x11, 0x96, 0x29, 0xc2, 0x2a, 0x45, 0x58, 0xa7, 0x48, 0x36, 0x29, 0x92, 0x6d, 0x8a, 0x30,
	0x94, 0x48, 0x46, 0x12, 0xc9, 0x58, 0x22, 0x4c, 0x24, 0x92, 0xa9, 0x44, 0x98, 0x49, 0x84, 0xb9,
	0x44, 0x58, 0x48, 0x84, 0xa5, 0x44, 0xb2, 0x92, 0x08, 0x6b, 0x89, 0x64, 0x23, 0x11, 0xb6, 0x12,
	0xc9, 0x50, 0x21, 0x19, 0x29, 0x84, 0x5b, 0x85, 0xe4, 0x4e, 0x21, 0x3c, 0x28, 0x24, 0x63, 0x85,
	0x64, 0xa2, 0x10, 0xa6, 0x0a, 0x61, 0xa6, 0x10, 0xce, 0x7f, 0xbd, 0x95, 0x68, 0xe0, 0xd9, 0xbb,
	0x33, 0xb0, 0xac, 0x62, 0x16, 0x4c, 0xfd, 0x29, 0x00, 0x00, 0xff, 0xff, 0x64, 0x3b, 0x91, 0xfb,
	0x05, 0x02, 0x00, 0x00,
}
