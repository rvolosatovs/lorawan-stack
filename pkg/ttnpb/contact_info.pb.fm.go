// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import fmt "fmt"

var _ContactInfoFieldPaths = [...]string{
	"contact_method",
	"contact_type",
	"public",
	"validated_at",
	"value",
}

func (*ContactInfo) FieldMaskPaths() []string {
	ret := make([]string, len(_ContactInfoFieldPaths))
	copy(ret, _ContactInfoFieldPaths[:])
	return ret
}

func (dst *ContactInfo) SetFields(src *ContactInfo, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "contact_method":
			dst.ContactMethod = src.ContactMethod
		case "contact_type":
			dst.ContactType = src.ContactType
		case "public":
			dst.Public = src.Public
		case "validated_at":
			dst.ValidatedAt = src.ValidatedAt
		case "value":
			dst.Value = src.Value
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _ContactInfoValidationFieldPaths = [...]string{
	"contact_info",
	"created_at",
	"entity",
	"entity.application_ids",
	"entity.application_ids.application_id",
	"entity.client_ids",
	"entity.client_ids.client_id",
	"entity.device_ids",
	"entity.device_ids.application_ids",
	"entity.device_ids.application_ids.application_id",
	"entity.device_ids.dev_addr",
	"entity.device_ids.dev_eui",
	"entity.device_ids.device_id",
	"entity.device_ids.join_eui",
	"entity.gateway_ids",
	"entity.gateway_ids.eui",
	"entity.gateway_ids.gateway_id",
	"entity.organization_ids",
	"entity.organization_ids.organization_id",
	"entity.user_ids",
	"entity.user_ids.email",
	"entity.user_ids.user_id",
	"expires_at",
	"id",
	"token",
}

func (*ContactInfoValidation) FieldMaskPaths() []string {
	ret := make([]string, len(_ContactInfoValidationFieldPaths))
	copy(ret, _ContactInfoValidationFieldPaths[:])
	return ret
}

func (dst *ContactInfoValidation) SetFields(src *ContactInfoValidation, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "contact_info":
			dst.ContactInfo = src.ContactInfo
		case "created_at":
			dst.CreatedAt = src.CreatedAt
		case "entity":
			dst.Entity = src.Entity
		case "entity.application_ids":
			if dst.Entity == nil {
				dst.Entity = &EntityIdentifiers{}
			}
			dst.Entity.SetFields(src.Entity, _pathsWithoutPrefix("entity", paths)...)
		case "entity.application_ids.application_id":
			if dst.Entity == nil {
				dst.Entity = &EntityIdentifiers{}
			}
			dst.Entity.SetFields(src.Entity, _pathsWithoutPrefix("entity", paths)...)
		case "entity.client_ids":
			if dst.Entity == nil {
				dst.Entity = &EntityIdentifiers{}
			}
			dst.Entity.SetFields(src.Entity, _pathsWithoutPrefix("entity", paths)...)
		case "entity.client_ids.client_id":
			if dst.Entity == nil {
				dst.Entity = &EntityIdentifiers{}
			}
			dst.Entity.SetFields(src.Entity, _pathsWithoutPrefix("entity", paths)...)
		case "entity.device_ids":
			if dst.Entity == nil {
				dst.Entity = &EntityIdentifiers{}
			}
			dst.Entity.SetFields(src.Entity, _pathsWithoutPrefix("entity", paths)...)
		case "entity.device_ids.application_ids":
			if dst.Entity == nil {
				dst.Entity = &EntityIdentifiers{}
			}
			dst.Entity.SetFields(src.Entity, _pathsWithoutPrefix("entity", paths)...)
		case "entity.device_ids.application_ids.application_id":
			if dst.Entity == nil {
				dst.Entity = &EntityIdentifiers{}
			}
			dst.Entity.SetFields(src.Entity, _pathsWithoutPrefix("entity", paths)...)
		case "entity.device_ids.dev_addr":
			if dst.Entity == nil {
				dst.Entity = &EntityIdentifiers{}
			}
			dst.Entity.SetFields(src.Entity, _pathsWithoutPrefix("entity", paths)...)
		case "entity.device_ids.dev_eui":
			if dst.Entity == nil {
				dst.Entity = &EntityIdentifiers{}
			}
			dst.Entity.SetFields(src.Entity, _pathsWithoutPrefix("entity", paths)...)
		case "entity.device_ids.device_id":
			if dst.Entity == nil {
				dst.Entity = &EntityIdentifiers{}
			}
			dst.Entity.SetFields(src.Entity, _pathsWithoutPrefix("entity", paths)...)
		case "entity.device_ids.join_eui":
			if dst.Entity == nil {
				dst.Entity = &EntityIdentifiers{}
			}
			dst.Entity.SetFields(src.Entity, _pathsWithoutPrefix("entity", paths)...)
		case "entity.gateway_ids":
			if dst.Entity == nil {
				dst.Entity = &EntityIdentifiers{}
			}
			dst.Entity.SetFields(src.Entity, _pathsWithoutPrefix("entity", paths)...)
		case "entity.gateway_ids.eui":
			if dst.Entity == nil {
				dst.Entity = &EntityIdentifiers{}
			}
			dst.Entity.SetFields(src.Entity, _pathsWithoutPrefix("entity", paths)...)
		case "entity.gateway_ids.gateway_id":
			if dst.Entity == nil {
				dst.Entity = &EntityIdentifiers{}
			}
			dst.Entity.SetFields(src.Entity, _pathsWithoutPrefix("entity", paths)...)
		case "entity.organization_ids":
			if dst.Entity == nil {
				dst.Entity = &EntityIdentifiers{}
			}
			dst.Entity.SetFields(src.Entity, _pathsWithoutPrefix("entity", paths)...)
		case "entity.organization_ids.organization_id":
			if dst.Entity == nil {
				dst.Entity = &EntityIdentifiers{}
			}
			dst.Entity.SetFields(src.Entity, _pathsWithoutPrefix("entity", paths)...)
		case "entity.user_ids":
			if dst.Entity == nil {
				dst.Entity = &EntityIdentifiers{}
			}
			dst.Entity.SetFields(src.Entity, _pathsWithoutPrefix("entity", paths)...)
		case "entity.user_ids.email":
			if dst.Entity == nil {
				dst.Entity = &EntityIdentifiers{}
			}
			dst.Entity.SetFields(src.Entity, _pathsWithoutPrefix("entity", paths)...)
		case "entity.user_ids.user_id":
			if dst.Entity == nil {
				dst.Entity = &EntityIdentifiers{}
			}
			dst.Entity.SetFields(src.Entity, _pathsWithoutPrefix("entity", paths)...)
		case "expires_at":
			dst.ExpiresAt = src.ExpiresAt
		case "id":
			dst.ID = src.ID
		case "token":
			dst.Token = src.Token
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}
