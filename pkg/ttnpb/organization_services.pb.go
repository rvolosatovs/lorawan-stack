// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/organization_services.proto

package ttnpb

import (
	context "context"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

func init() {
	proto.RegisterFile("lorawan-stack/api/organization_services.proto", fileDescriptor_1a990e3af7846fd3)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/organization_services.proto", fileDescriptor_1a990e3af7846fd3)
}

var fileDescriptor_1a990e3af7846fd3 = []byte{
	// 798 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x96, 0x4d, 0x4c, 0xdb, 0x48,
	0x14, 0xc7, 0x3d, 0xfb, 0x11, 0x09, 0x2f, 0x62, 0xb5, 0xa3, 0xd5, 0xae, 0xe4, 0x65, 0x9f, 0x56,
	0xde, 0xaa, 0x7c, 0x88, 0xd8, 0x2a, 0x20, 0x24, 0x10, 0x12, 0xe2, 0x4b, 0x29, 0x05, 0xb5, 0x15,
	0xa8, 0x17, 0x2e, 0xc8, 0x09, 0x83, 0x63, 0x25, 0x78, 0x52, 0xcf, 0x04, 0x94, 0x22, 0x2a, 0xda,
	0x43, 0xc5, 0xad, 0x55, 0x7b, 0xa9, 0x7a, 0x68, 0xab, 0x9e, 0xa8, 0x7a, 0xa1, 0x37, 0x8e, 0x1c,
	0x39, 0x22, 0xf5, 0xc2, 0xa5, 0x12, 0xb1, 0x7b, 0xe0, 0xc8, 0x91, 0x63, 0xe5, 0xb1, 0x53, 0xec,
	0x24, 0x24, 0x04, 0x6e, 0xf1, 0xf8, 0x3f, 0xef, 0xfd, 0xfc, 0xde, 0xfb, 0x3f, 0x45, 0x4e, 0xe6,
	0xa9, 0x63, 0xac, 0x1b, 0x76, 0x92, 0x71, 0x23, 0x93, 0xd3, 0x8d, 0x82, 0xa5, 0x53, 0xc7, 0x34,
	0x6c, 0xeb, 0x91, 0xc1, 0x2d, 0x6a, 0x2f, 0x31, 0xe2, 0xac, 0x59, 0x19, 0xc2, 0xb4, 0x82, 0x43,
	0x39, 0xc5, 0x1d, 0x9c, 0xdb, 0x5a, 0x78, 0x45, 0x5b, 0x1b, 0x50, 0x92, 0xa6, 0xc5, 0xb3, 0xc5,
	0xb4, 0x96, 0xa1, 0xab, 0xba, 0x49, 0x4d, 0xaa, 0x0b, 0x59, 0xba, 0xb8, 0x22, 0x9e, 0xc4, 0x83,
	0xf8, 0x15, 0x5c, 0x57, 0x3a, 0x4d, 0x4a, 0xcd, 0x3c, 0x11, 0x69, 0x0c, 0xdb, 0xa6, 0x5c, 0x24,
	0x09, 0x83, 0x2b, 0xff, 0x84, 0x6f, 0x7f, 0xc4, 0x20, 0xab, 0x05, 0x5e, 0x0a, 0x5f, 0xfe, 0x5f,
	0x0b, 0x6a, 0x2d, 0x13, 0x9b, 0x5b, 0x2b, 0x16, 0x71, 0x2a, 0x11, 0x6e, 0x34, 0xfe, 0x9a, 0x50,
	0x05, 0xb5, 0x2a, 0xc7, 0x32, 0xb3, 0x3c, 0x8c, 0xd2, 0xff, 0xf5, 0x57, 0xf9, 0xcf, 0x7b, 0x91,
	0x6b, 0xf3, 0xc4, 0xb4, 0x18, 0x77, 0x4a, 0xf8, 0x25, 0x92, 0x13, 0x93, 0x0e, 0x31, 0x38, 0xc1,
	0x3d, 0x5a, 0xbc, 0x12, 0x5a, 0x70, 0x1e, 0xbf, 0xf6, 0xb0, 0x48, 0x18, 0x57, 0x3a, 0xab, 0xa5,
	0x51, 0x91, 0x3a, 0xf6, 0xf4, 0xcb, 0xb7, 0x57, 0x3f, 0x0d, 0xab, 0x83, 0x7a, 0x91, 0x11, 0x87,
	0xe9, 0x1b, 0x19, 0x9a, 0xcf, 0x1b, 0x69, 0xea, 0x18, 0x9c, 0x3a, 0x9a, 0x7f, 0xb6, 0x64, 0x2d,
	0xb3, 0xca, 0x8f, 0xcd, 0xd8, 0xf7, 0xb0, 0x11, 0xd4, 0x8b, 0x9f, 0x21, 0xf9, 0xe7, 0x14, 0xe1,
	0xf8, 0x66, 0x75, 0x9a, 0x14, 0xe1, 0xad, 0xe3, 0x0c, 0x0b, 0x9c, 0x01, 0x7c, 0x2b, 0x9e, 0x48,
	0xdf, 0x88, 0x4d, 0x85, 0x4f, 0x54, 0x75, 0xb0, 0x89, 0xdf, 0x21, 0xf9, 0x97, 0x39, 0x8b, 0x71,
	0xdc, 0x5d, 0x9d, 0xc1, 0x3f, 0x8d, 0x66, 0x61, 0x15, 0x96, 0x7f, 0x1b, 0xb1, 0x30, 0xf5, 0xae,
	0x80, 0xb9, 0x8d, 0x3b, 0xe2, 0x30, 0x8b, 0x43, 0xf8, 0x4a, 0xd5, 0xc2, 0xcf, 0x91, 0x9c, 0x78,
	0x50, 0x58, 0xae, 0xdb, 0xbf, 0xe0, 0xbc, 0xf5, 0x82, 0x8d, 0x0a, 0xc6, 0x21, 0xa5, 0x61, 0xc1,
	0xb4, 0x7a, 0x05, 0xf3, 0x9b, 0xc7, 0xe4, 0xc4, 0x14, 0xc9, 0x13, 0x4e, 0x70, 0x57, 0xa3, 0x2c,
	0x33, 0xe7, 0x93, 0xae, 0xfc, 0xa5, 0x05, 0x36, 0xd1, 0x2a, 0x36, 0xd1, 0xa6, 0x7d, 0x9b, 0xa8,
	0xdd, 0x02, 0x44, 0xed, 0xfd, 0xaf, 0x49, 0xe7, 0x36, 0xfb, 0x9f, 0xb4, 0xc9, 0x38, 0x1a, 0x7d,
	0x3c, 0x93, 0x21, 0x8c, 0xe1, 0xc7, 0xb2, 0xec, 0x37, 0x6a, 0x5e, 0x58, 0xa1, 0x15, 0x9e, 0x2a,
	0x61, 0x10, 0x40, 0xd5, 0x05, 0x4f, 0x0f, 0xee, 0x6a, 0xc6, 0x13, 0x9a, 0x0f, 0xbf, 0x45, 0x72,
	0x7b, 0xe0, 0xa2, 0xf1, 0xfb, 0x33, 0xb3, 0xa4, 0x84, 0xf5, 0xe6, 0x1e, 0x0b, 0x94, 0x95, 0x4e,
	0xd5, 0xa0, 0x04, 0xaf, 0xd5, 0x69, 0x81, 0x32, 0xa6, 0x8e, 0xb4, 0x3c, 0xd4, 0xfe, 0x72, 0x48,
	0xe6, 0x48, 0x49, 0x38, 0xed, 0x0d, 0x92, 0x7f, 0xf3, 0x2b, 0x14, 0x44, 0x65, 0x58, 0x6b, 0x36,
	0xe7, 0xa1, 0xb0, 0x82, 0xf7, 0x77, 0x7d, 0x3c, 0xa6, 0x4e, 0x08, 0xbe, 0x51, 0x7c, 0x0d, 0x3e,
	0xbf, 0x7a, 0x6d, 0x29, 0x12, 0xb2, 0xe1, 0xbe, 0x26, 0xcb, 0xe0, 0x72, 0x75, 0x9b, 0x15, 0x5c,
	0xd3, 0x78, 0xf2, 0xea, 0x5c, 0xfa, 0x46, 0x8e, 0x94, 0xc4, 0x7a, 0xf8, 0x84, 0xe4, 0xf6, 0xc0,
	0x64, 0x17, 0xb5, 0xb7, 0xd6, 0x82, 0x97, 0xc3, 0x9c, 0x17, 0x98, 0x73, 0x4a, 0xea, 0x3a, 0x98,
	0x46, 0xc1, 0x5a, 0xca, 0x91, 0x92, 0x16, 0x1a, 0xf3, 0x23, 0x92, 0x7f, 0x5f, 0x20, 0x7c, 0x32,
	0xb2, 0x5e, 0x70, 0x7f, 0x75, 0xfe, 0x85, 0x78, 0x51, 0xa3, 0xe2, 0x73, 0xe6, 0xfa, 0x6e, 0xbd,
	0x23, 0x98, 0xa7, 0x94, 0xb1, 0xd6, 0x99, 0xa3, 0x2b, 0x4f, 0xcc, 0xe5, 0x67, 0x24, 0xff, 0xe1,
	0x8f, 0x5e, 0x34, 0x3f, 0xc3, 0x83, 0xcd, 0xa6, 0x33, 0x26, 0xbf, 0x70, 0x23, 0xc7, 0x54, 0x6a,
	0x4a, 0x60, 0x8f, 0xe3, 0xeb, 0x62, 0x4f, 0x7c, 0x40, 0x07, 0x65, 0x40, 0x87, 0x65, 0x40, 0x47,
	0x65, 0x90, 0x8e, 0xcb, 0x20, 0x9d, 0x94, 0x41, 0x3a, 0x2d, 0x83, 0x74, 0x56, 0x06, 0xb4, 0xe5,
	0x02, 0xda, 0x76, 0x41, 0xda, 0x71, 0x01, 0xed, 0xba, 0x20, 0xed, 0xb9, 0x20, 0xed, 0xbb, 0x20,
	0x1d, 0xb8, 0x80, 0x0e, 0x5d, 0x40, 0x47, 0x2e, 0x48, 0xc7, 0x2e, 0xa0, 0x13, 0x17, 0xa4, 0x53,
	0x17, 0xd0, 0x99, 0x0b, 0xd2, 0x96, 0x07, 0xd2, 0xb6, 0x07, 0xe8, 0x85, 0x07, 0xd2, 0x6b, 0x0f,
	0xd0, 0x7b, 0x0f, 0xa4, 0x1d, 0x0f, 0xa4, 0x5d, 0x0f, 0xd0, 0x9e, 0x07, 0x68, 0xdf, 0x03, 0xb4,
	0xd8, 0x67, 0x52, 0x8d, 0x67, 0x09, 0xcf, 0x5a, 0xb6, 0xc9, 0x34, 0x9b, 0xf0, 0x75, 0xea, 0xe4,
	0xf4, 0xf8, 0xff, 0x81, 0x42, 0xce, 0xd4, 0x39, 0xb7, 0x0b, 0xe9, 0x74, 0x42, 0x34, 0x6d, 0xe0,
	0x7b, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4f, 0xb2, 0x47, 0xd8, 0x25, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OrganizationRegistryClient is the client API for OrganizationRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrganizationRegistryClient interface {
	// Create a new organization. This also sets the given user as
	// first collaborator with all possible rights.
	Create(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*Organization, error)
	// Get the organization with the given identifiers, selecting the fields given
	// by the field mask. The method may return more or less fields, depending on
	// the rights of the caller.
	Get(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*Organization, error)
	// List organizations. See request message for details.
	List(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*Organizations, error)
	Update(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*Organization, error)
	Delete(ctx context.Context, in *OrganizationIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
}

type organizationRegistryClient struct {
	cc *grpc.ClientConn
}

func NewOrganizationRegistryClient(cc *grpc.ClientConn) OrganizationRegistryClient {
	return &organizationRegistryClient{cc}
}

func (c *organizationRegistryClient) Create(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*Organization, error) {
	out := new(Organization)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.OrganizationRegistry/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationRegistryClient) Get(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*Organization, error) {
	out := new(Organization)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.OrganizationRegistry/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationRegistryClient) List(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*Organizations, error) {
	out := new(Organizations)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.OrganizationRegistry/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationRegistryClient) Update(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*Organization, error) {
	out := new(Organization)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.OrganizationRegistry/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationRegistryClient) Delete(ctx context.Context, in *OrganizationIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.OrganizationRegistry/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationRegistryServer is the server API for OrganizationRegistry service.
type OrganizationRegistryServer interface {
	// Create a new organization. This also sets the given user as
	// first collaborator with all possible rights.
	Create(context.Context, *CreateOrganizationRequest) (*Organization, error)
	// Get the organization with the given identifiers, selecting the fields given
	// by the field mask. The method may return more or less fields, depending on
	// the rights of the caller.
	Get(context.Context, *GetOrganizationRequest) (*Organization, error)
	// List organizations. See request message for details.
	List(context.Context, *ListOrganizationsRequest) (*Organizations, error)
	Update(context.Context, *UpdateOrganizationRequest) (*Organization, error)
	Delete(context.Context, *OrganizationIdentifiers) (*types.Empty, error)
}

func RegisterOrganizationRegistryServer(s *grpc.Server, srv OrganizationRegistryServer) {
	s.RegisterService(&_OrganizationRegistry_serviceDesc, srv)
}

func _OrganizationRegistry_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationRegistryServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.OrganizationRegistry/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationRegistryServer).Create(ctx, req.(*CreateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationRegistry_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationRegistryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.OrganizationRegistry/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationRegistryServer).Get(ctx, req.(*GetOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationRegistry_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationRegistryServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.OrganizationRegistry/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationRegistryServer).List(ctx, req.(*ListOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationRegistry_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationRegistryServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.OrganizationRegistry/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationRegistryServer).Update(ctx, req.(*UpdateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationRegistry_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationRegistryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.OrganizationRegistry/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationRegistryServer).Delete(ctx, req.(*OrganizationIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrganizationRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.OrganizationRegistry",
	HandlerType: (*OrganizationRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _OrganizationRegistry_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _OrganizationRegistry_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _OrganizationRegistry_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _OrganizationRegistry_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _OrganizationRegistry_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/organization_services.proto",
}

// OrganizationAccessClient is the client API for OrganizationAccess service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrganizationAccessClient interface {
	ListRights(ctx context.Context, in *OrganizationIdentifiers, opts ...grpc.CallOption) (*Rights, error)
	CreateAPIKey(ctx context.Context, in *CreateOrganizationAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error)
	ListAPIKeys(ctx context.Context, in *ListOrganizationAPIKeysRequest, opts ...grpc.CallOption) (*APIKeys, error)
	GetAPIKey(ctx context.Context, in *GetOrganizationAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error)
	// Update the rights of an existing organization API key. To generate an API key,
	// the CreateAPIKey should be used. To delete an API key, update it
	// with zero rights.
	UpdateAPIKey(ctx context.Context, in *UpdateOrganizationAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error)
	// Set the rights of a collaborator (member) on the organization. Users
	// are considered to be a collaborator if they have at least one right on the
	// organization.
	// Note that only users can collaborate (be member of) an organization.
	SetCollaborator(ctx context.Context, in *SetOrganizationCollaboratorRequest, opts ...grpc.CallOption) (*types.Empty, error)
	ListCollaborators(ctx context.Context, in *ListOrganizationCollaboratorsRequest, opts ...grpc.CallOption) (*Collaborators, error)
}

type organizationAccessClient struct {
	cc *grpc.ClientConn
}

func NewOrganizationAccessClient(cc *grpc.ClientConn) OrganizationAccessClient {
	return &organizationAccessClient{cc}
}

func (c *organizationAccessClient) ListRights(ctx context.Context, in *OrganizationIdentifiers, opts ...grpc.CallOption) (*Rights, error) {
	out := new(Rights)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.OrganizationAccess/ListRights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationAccessClient) CreateAPIKey(ctx context.Context, in *CreateOrganizationAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error) {
	out := new(APIKey)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.OrganizationAccess/CreateAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationAccessClient) ListAPIKeys(ctx context.Context, in *ListOrganizationAPIKeysRequest, opts ...grpc.CallOption) (*APIKeys, error) {
	out := new(APIKeys)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.OrganizationAccess/ListAPIKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationAccessClient) GetAPIKey(ctx context.Context, in *GetOrganizationAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error) {
	out := new(APIKey)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.OrganizationAccess/GetAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationAccessClient) UpdateAPIKey(ctx context.Context, in *UpdateOrganizationAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error) {
	out := new(APIKey)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.OrganizationAccess/UpdateAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationAccessClient) SetCollaborator(ctx context.Context, in *SetOrganizationCollaboratorRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.OrganizationAccess/SetCollaborator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationAccessClient) ListCollaborators(ctx context.Context, in *ListOrganizationCollaboratorsRequest, opts ...grpc.CallOption) (*Collaborators, error) {
	out := new(Collaborators)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.OrganizationAccess/ListCollaborators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationAccessServer is the server API for OrganizationAccess service.
type OrganizationAccessServer interface {
	ListRights(context.Context, *OrganizationIdentifiers) (*Rights, error)
	CreateAPIKey(context.Context, *CreateOrganizationAPIKeyRequest) (*APIKey, error)
	ListAPIKeys(context.Context, *ListOrganizationAPIKeysRequest) (*APIKeys, error)
	GetAPIKey(context.Context, *GetOrganizationAPIKeyRequest) (*APIKey, error)
	// Update the rights of an existing organization API key. To generate an API key,
	// the CreateAPIKey should be used. To delete an API key, update it
	// with zero rights.
	UpdateAPIKey(context.Context, *UpdateOrganizationAPIKeyRequest) (*APIKey, error)
	// Set the rights of a collaborator (member) on the organization. Users
	// are considered to be a collaborator if they have at least one right on the
	// organization.
	// Note that only users can collaborate (be member of) an organization.
	SetCollaborator(context.Context, *SetOrganizationCollaboratorRequest) (*types.Empty, error)
	ListCollaborators(context.Context, *ListOrganizationCollaboratorsRequest) (*Collaborators, error)
}

func RegisterOrganizationAccessServer(s *grpc.Server, srv OrganizationAccessServer) {
	s.RegisterService(&_OrganizationAccess_serviceDesc, srv)
}

func _OrganizationAccess_ListRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationAccessServer).ListRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.OrganizationAccess/ListRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationAccessServer).ListRights(ctx, req.(*OrganizationIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationAccess_CreateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationAccessServer).CreateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.OrganizationAccess/CreateAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationAccessServer).CreateAPIKey(ctx, req.(*CreateOrganizationAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationAccess_ListAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationAPIKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationAccessServer).ListAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.OrganizationAccess/ListAPIKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationAccessServer).ListAPIKeys(ctx, req.(*ListOrganizationAPIKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationAccess_GetAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationAccessServer).GetAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.OrganizationAccess/GetAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationAccessServer).GetAPIKey(ctx, req.(*GetOrganizationAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationAccess_UpdateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationAccessServer).UpdateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.OrganizationAccess/UpdateAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationAccessServer).UpdateAPIKey(ctx, req.(*UpdateOrganizationAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationAccess_SetCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOrganizationCollaboratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationAccessServer).SetCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.OrganizationAccess/SetCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationAccessServer).SetCollaborator(ctx, req.(*SetOrganizationCollaboratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationAccess_ListCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationCollaboratorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationAccessServer).ListCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.OrganizationAccess/ListCollaborators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationAccessServer).ListCollaborators(ctx, req.(*ListOrganizationCollaboratorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrganizationAccess_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.OrganizationAccess",
	HandlerType: (*OrganizationAccessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRights",
			Handler:    _OrganizationAccess_ListRights_Handler,
		},
		{
			MethodName: "CreateAPIKey",
			Handler:    _OrganizationAccess_CreateAPIKey_Handler,
		},
		{
			MethodName: "ListAPIKeys",
			Handler:    _OrganizationAccess_ListAPIKeys_Handler,
		},
		{
			MethodName: "GetAPIKey",
			Handler:    _OrganizationAccess_GetAPIKey_Handler,
		},
		{
			MethodName: "UpdateAPIKey",
			Handler:    _OrganizationAccess_UpdateAPIKey_Handler,
		},
		{
			MethodName: "SetCollaborator",
			Handler:    _OrganizationAccess_SetCollaborator_Handler,
		},
		{
			MethodName: "ListCollaborators",
			Handler:    _OrganizationAccess_ListCollaborators_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/organization_services.proto",
}
