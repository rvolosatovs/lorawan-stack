// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/organization_services.proto

package ttnpb // import "go.thethings.network/lorawan-stack/pkg/ttnpb"

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import types "github.com/gogo/protobuf/types"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import context "context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for OrganizationRegistry service

type OrganizationRegistryClient interface {
	// Create a new organization. This also sets the current user as first collaborator
	// with all possible rights.
	CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*Organization, error)
	// Get the organization with the given identifiers, selecting the fields given
	// by the field mask. The method may return more or less fields, depending on
	// the rights of the caller.
	GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*Organization, error)
	// List organizations. See request message for details.
	ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*Organizations, error)
	UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*Organization, error)
	DeleteOrganization(ctx context.Context, in *OrganizationIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
}

type organizationRegistryClient struct {
	cc *grpc.ClientConn
}

func NewOrganizationRegistryClient(cc *grpc.ClientConn) OrganizationRegistryClient {
	return &organizationRegistryClient{cc}
}

func (c *organizationRegistryClient) CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*Organization, error) {
	out := new(Organization)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.OrganizationRegistry/CreateOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationRegistryClient) GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*Organization, error) {
	out := new(Organization)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.OrganizationRegistry/GetOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationRegistryClient) ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*Organizations, error) {
	out := new(Organizations)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.OrganizationRegistry/ListOrganizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationRegistryClient) UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*Organization, error) {
	out := new(Organization)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.OrganizationRegistry/UpdateOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationRegistryClient) DeleteOrganization(ctx context.Context, in *OrganizationIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.OrganizationRegistry/DeleteOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrganizationRegistry service

type OrganizationRegistryServer interface {
	// Create a new organization. This also sets the current user as first collaborator
	// with all possible rights.
	CreateOrganization(context.Context, *CreateOrganizationRequest) (*Organization, error)
	// Get the organization with the given identifiers, selecting the fields given
	// by the field mask. The method may return more or less fields, depending on
	// the rights of the caller.
	GetOrganization(context.Context, *GetOrganizationRequest) (*Organization, error)
	// List organizations. See request message for details.
	ListOrganizations(context.Context, *ListOrganizationsRequest) (*Organizations, error)
	UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*Organization, error)
	DeleteOrganization(context.Context, *OrganizationIdentifiers) (*types.Empty, error)
}

func RegisterOrganizationRegistryServer(s *grpc.Server, srv OrganizationRegistryServer) {
	s.RegisterService(&_OrganizationRegistry_serviceDesc, srv)
}

func _OrganizationRegistry_CreateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationRegistryServer).CreateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.OrganizationRegistry/CreateOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationRegistryServer).CreateOrganization(ctx, req.(*CreateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationRegistry_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationRegistryServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.OrganizationRegistry/GetOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationRegistryServer).GetOrganization(ctx, req.(*GetOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationRegistry_ListOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationRegistryServer).ListOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.OrganizationRegistry/ListOrganizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationRegistryServer).ListOrganizations(ctx, req.(*ListOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationRegistry_UpdateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationRegistryServer).UpdateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.OrganizationRegistry/UpdateOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationRegistryServer).UpdateOrganization(ctx, req.(*UpdateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationRegistry_DeleteOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationRegistryServer).DeleteOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.OrganizationRegistry/DeleteOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationRegistryServer).DeleteOrganization(ctx, req.(*OrganizationIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrganizationRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.OrganizationRegistry",
	HandlerType: (*OrganizationRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganization",
			Handler:    _OrganizationRegistry_CreateOrganization_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _OrganizationRegistry_GetOrganization_Handler,
		},
		{
			MethodName: "ListOrganizations",
			Handler:    _OrganizationRegistry_ListOrganizations_Handler,
		},
		{
			MethodName: "UpdateOrganization",
			Handler:    _OrganizationRegistry_UpdateOrganization_Handler,
		},
		{
			MethodName: "DeleteOrganization",
			Handler:    _OrganizationRegistry_DeleteOrganization_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/organization_services.proto",
}

// Client API for OrganizationAccess service

type OrganizationAccessClient interface {
	ListOrganizationRights(ctx context.Context, in *OrganizationIdentifiers, opts ...grpc.CallOption) (*Rights, error)
	GenerateOrganizationAPIKey(ctx context.Context, in *SetOrganizationAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error)
	ListOrganizationAPIKeys(ctx context.Context, in *OrganizationIdentifiers, opts ...grpc.CallOption) (*APIKeys, error)
	// Set the rights of an existing organization API key. To generate an API key,
	// the GenerateOrganizationAPIKey should be used. To delete an API key, set it
	// without any rights.
	SetOrganizationAPIKey(ctx context.Context, in *SetOrganizationAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error)
	// Set the rights of a collaborator (member) on the organization. Users
	// are considered to be a collaborator if they have at least one right on the
	// organization.
	// Note that only users can collaborate (be member of) an organization.
	SetOrganizationCollaborator(ctx context.Context, in *SetOrganizationCollaboratorRequest, opts ...grpc.CallOption) (*types.Empty, error)
	ListOrganizationCollaborators(ctx context.Context, in *OrganizationIdentifiers, opts ...grpc.CallOption) (*Collaborators, error)
}

type organizationAccessClient struct {
	cc *grpc.ClientConn
}

func NewOrganizationAccessClient(cc *grpc.ClientConn) OrganizationAccessClient {
	return &organizationAccessClient{cc}
}

func (c *organizationAccessClient) ListOrganizationRights(ctx context.Context, in *OrganizationIdentifiers, opts ...grpc.CallOption) (*Rights, error) {
	out := new(Rights)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.OrganizationAccess/ListOrganizationRights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationAccessClient) GenerateOrganizationAPIKey(ctx context.Context, in *SetOrganizationAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error) {
	out := new(APIKey)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.OrganizationAccess/GenerateOrganizationAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationAccessClient) ListOrganizationAPIKeys(ctx context.Context, in *OrganizationIdentifiers, opts ...grpc.CallOption) (*APIKeys, error) {
	out := new(APIKeys)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.OrganizationAccess/ListOrganizationAPIKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationAccessClient) SetOrganizationAPIKey(ctx context.Context, in *SetOrganizationAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error) {
	out := new(APIKey)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.OrganizationAccess/SetOrganizationAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationAccessClient) SetOrganizationCollaborator(ctx context.Context, in *SetOrganizationCollaboratorRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.OrganizationAccess/SetOrganizationCollaborator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationAccessClient) ListOrganizationCollaborators(ctx context.Context, in *OrganizationIdentifiers, opts ...grpc.CallOption) (*Collaborators, error) {
	out := new(Collaborators)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.OrganizationAccess/ListOrganizationCollaborators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrganizationAccess service

type OrganizationAccessServer interface {
	ListOrganizationRights(context.Context, *OrganizationIdentifiers) (*Rights, error)
	GenerateOrganizationAPIKey(context.Context, *SetOrganizationAPIKeyRequest) (*APIKey, error)
	ListOrganizationAPIKeys(context.Context, *OrganizationIdentifiers) (*APIKeys, error)
	// Set the rights of an existing organization API key. To generate an API key,
	// the GenerateOrganizationAPIKey should be used. To delete an API key, set it
	// without any rights.
	SetOrganizationAPIKey(context.Context, *SetOrganizationAPIKeyRequest) (*APIKey, error)
	// Set the rights of a collaborator (member) on the organization. Users
	// are considered to be a collaborator if they have at least one right on the
	// organization.
	// Note that only users can collaborate (be member of) an organization.
	SetOrganizationCollaborator(context.Context, *SetOrganizationCollaboratorRequest) (*types.Empty, error)
	ListOrganizationCollaborators(context.Context, *OrganizationIdentifiers) (*Collaborators, error)
}

func RegisterOrganizationAccessServer(s *grpc.Server, srv OrganizationAccessServer) {
	s.RegisterService(&_OrganizationAccess_serviceDesc, srv)
}

func _OrganizationAccess_ListOrganizationRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationAccessServer).ListOrganizationRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.OrganizationAccess/ListOrganizationRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationAccessServer).ListOrganizationRights(ctx, req.(*OrganizationIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationAccess_GenerateOrganizationAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOrganizationAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationAccessServer).GenerateOrganizationAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.OrganizationAccess/GenerateOrganizationAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationAccessServer).GenerateOrganizationAPIKey(ctx, req.(*SetOrganizationAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationAccess_ListOrganizationAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationAccessServer).ListOrganizationAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.OrganizationAccess/ListOrganizationAPIKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationAccessServer).ListOrganizationAPIKeys(ctx, req.(*OrganizationIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationAccess_SetOrganizationAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOrganizationAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationAccessServer).SetOrganizationAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.OrganizationAccess/SetOrganizationAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationAccessServer).SetOrganizationAPIKey(ctx, req.(*SetOrganizationAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationAccess_SetOrganizationCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOrganizationCollaboratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationAccessServer).SetOrganizationCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.OrganizationAccess/SetOrganizationCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationAccessServer).SetOrganizationCollaborator(ctx, req.(*SetOrganizationCollaboratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationAccess_ListOrganizationCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationAccessServer).ListOrganizationCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.OrganizationAccess/ListOrganizationCollaborators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationAccessServer).ListOrganizationCollaborators(ctx, req.(*OrganizationIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrganizationAccess_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.OrganizationAccess",
	HandlerType: (*OrganizationAccessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListOrganizationRights",
			Handler:    _OrganizationAccess_ListOrganizationRights_Handler,
		},
		{
			MethodName: "GenerateOrganizationAPIKey",
			Handler:    _OrganizationAccess_GenerateOrganizationAPIKey_Handler,
		},
		{
			MethodName: "ListOrganizationAPIKeys",
			Handler:    _OrganizationAccess_ListOrganizationAPIKeys_Handler,
		},
		{
			MethodName: "SetOrganizationAPIKey",
			Handler:    _OrganizationAccess_SetOrganizationAPIKey_Handler,
		},
		{
			MethodName: "SetOrganizationCollaborator",
			Handler:    _OrganizationAccess_SetOrganizationCollaborator_Handler,
		},
		{
			MethodName: "ListOrganizationCollaborators",
			Handler:    _OrganizationAccess_ListOrganizationCollaborators_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/organization_services.proto",
}

func init() {
	proto.RegisterFile("lorawan-stack/api/organization_services.proto", fileDescriptor_organization_services_7a81282e5c381acf)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/organization_services.proto", fileDescriptor_organization_services_7a81282e5c381acf)
}

var fileDescriptor_organization_services_7a81282e5c381acf = []byte{
	// 753 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0x4f, 0x4c, 0x13, 0x4d,
	0x18, 0xc6, 0x67, 0xbe, 0xe4, 0xfb, 0xbe, 0x64, 0x0f, 0x7c, 0xf9, 0x46, 0x85, 0xb8, 0xc0, 0x1b,
	0xb3, 0x1a, 0xf9, 0x23, 0x9d, 0x15, 0x30, 0x24, 0x12, 0x13, 0x82, 0x40, 0x10, 0x35, 0x6a, 0x30,
	0x5e, 0xb8, 0x98, 0x6d, 0x19, 0xb6, 0x9b, 0x96, 0x9d, 0xba, 0x33, 0x05, 0x2b, 0x21, 0x12, 0x4f,
	0xc4, 0x83, 0x31, 0x7a, 0x31, 0xf1, 0xa0, 0xf1, 0x84, 0x89, 0x07, 0x2e, 0x26, 0x1c, 0x39, 0x72,
	0x24, 0xf1, 0xc2, 0x91, 0xee, 0x72, 0xe0, 0x48, 0xe2, 0x85, 0xa3, 0xe9, 0xb4, 0x95, 0xdd, 0x6d,
	0xd3, 0x52, 0xf5, 0xb6, 0xbb, 0xef, 0x33, 0xf3, 0xfc, 0xfa, 0xbc, 0xf3, 0x4e, 0xb5, 0x44, 0x96,
	0x7b, 0xd6, 0xb2, 0xe5, 0x26, 0x84, 0xb4, 0x52, 0x19, 0xd3, 0xca, 0x39, 0x26, 0xf7, 0x6c, 0xcb,
	0x75, 0x9e, 0x59, 0xd2, 0xe1, 0xee, 0x63, 0xc1, 0xbc, 0x25, 0x27, 0xc5, 0x04, 0xcd, 0x79, 0x5c,
	0x72, 0xd2, 0x26, 0xa5, 0x4b, 0x2b, 0x4b, 0xe8, 0xd2, 0xb0, 0x9e, 0xb0, 0x1d, 0x99, 0xce, 0x27,
	0x69, 0x8a, 0x2f, 0x9a, 0x36, 0xb7, 0xb9, 0xa9, 0x64, 0xc9, 0xfc, 0x82, 0x7a, 0x53, 0x2f, 0xea,
	0xa9, 0xbc, 0x5c, 0xbf, 0x58, 0xeb, 0xe6, 0xcc, 0x33, 0x57, 0x3a, 0x0b, 0x0e, 0xf3, 0x2a, 0x1e,
	0xfa, 0xa5, 0xc6, 0x48, 0x15, 0x15, 0xd4, 0xaa, 0x3c, 0xc7, 0x4e, 0xcb, 0xea, 0x2e, 0x5d, 0x36,
	0xe7, 0x76, 0x96, 0xa9, 0x82, 0xe5, 0xba, 0x5c, 0xaa, 0xc5, 0xd5, 0x6a, 0x67, 0xa5, 0xfa, 0x13,
	0x97, 0x2d, 0xe6, 0x64, 0xa1, 0x5c, 0x1c, 0xfa, 0xfe, 0xb7, 0x76, 0xf6, 0x7e, 0xc8, 0x71, 0x96,
	0xd9, 0x8e, 0x90, 0x5e, 0x81, 0x3c, 0xd5, 0xc8, 0x84, 0xc7, 0x2c, 0xc9, 0xc2, 0x55, 0xd2, 0x47,
	0xa3, 0xa1, 0xd0, 0x5a, 0xcd, 0x2c, 0x7b, 0x92, 0x67, 0x42, 0xea, 0x5d, 0x71, 0x69, 0x58, 0x64,
	0x9c, 0x7f, 0xf1, 0xed, 0xe0, 0xed, 0x5f, 0x67, 0x8c, 0xb6, 0xc8, 0xef, 0x15, 0xa3, 0xb8, 0x9f,
	0xbc, 0xc1, 0xda, 0x7f, 0xd3, 0x4c, 0x46, 0x7c, 0x2f, 0xc7, 0x37, 0x8b, 0x09, 0x4e, 0x67, 0x7a,
	0x5d, 0x99, 0x0e, 0x93, 0xc1, 0xa8, 0xa9, 0xb9, 0x12, 0x39, 0x06, 0xce, 0xbc, 0xa0, 0xb1, 0x0f,
	0xab, 0xe4, 0x0b, 0xd6, 0xfe, 0xbf, 0xeb, 0x88, 0x88, 0xa9, 0x20, 0xbd, 0x71, 0xbb, 0x1a, 0x49,
	0x15, 0xac, 0xbb, 0x11, 0x98, 0x30, 0xee, 0x29, 0xb2, 0x5b, 0x24, 0x16, 0xc7, 0xdc, 0x08, 0xb9,
	0x66, 0xe6, 0x05, 0xf3, 0x84, 0xb9, 0x92, 0xe2, 0xd9, 0xac, 0x95, 0xe4, 0x9e, 0x25, 0xb9, 0x47,
	0x4b, 0xdf, 0x14, 0x68, 0xe5, 0x61, 0x35, 0xba, 0x8e, 0xbc, 0xc7, 0x1a, 0x79, 0x94, 0x9b, 0x6f,
	0xda, 0xbe, 0x5a, 0xcd, 0xe9, 0x92, 0xbc, 0xa1, 0x78, 0x47, 0xf4, 0x86, 0x49, 0xd2, 0x7a, 0x49,
	0x96, 0x3a, 0xfc, 0x5c, 0x23, 0x93, 0x2c, 0xcb, 0x62, 0x70, 0x3d, 0x8d, 0x1c, 0x67, 0x4e, 0x46,
	0x47, 0x6f, 0xa7, 0xe5, 0x13, 0x4d, 0xab, 0x27, 0x9a, 0x4e, 0x95, 0x4e, 0xb4, 0xd1, 0xab, 0xa0,
	0x8c, 0xfe, 0x0b, 0x4d, 0xda, 0xbb, 0x3a, 0x74, 0xf0, 0xaf, 0x46, 0xc2, 0xbb, 0x8f, 0xa7, 0x52,
	0x4c, 0x08, 0xf2, 0x12, 0x6b, 0xed, 0xf1, 0x0e, 0xce, 0xaa, 0x41, 0x6b, 0x05, 0x2e, 0x26, 0x2c,
	0x6f, 0x60, 0x98, 0x0a, 0xae, 0x8f, 0xf4, 0x34, 0x83, 0xab, 0x8c, 0x36, 0xf9, 0x8c, 0x35, 0x7d,
	0x9a, 0xb9, 0xcc, 0x8b, 0x35, 0x68, 0xfc, 0xc1, 0xcc, 0x1d, 0x56, 0x20, 0x03, 0x71, 0x9f, 0x87,
	0xd1, 0x89, 0x28, 0xcb, 0xaa, 0xdd, 0xac, 0xa1, 0x2a, 0x97, 0x8d, 0x29, 0x45, 0x35, 0x66, 0x8c,
	0xb6, 0x3c, 0x11, 0xa5, 0xcb, 0x26, 0x91, 0x61, 0x05, 0x35, 0xb2, 0xaf, 0xb0, 0xd6, 0x11, 0x0f,
	0xae, 0xec, 0xd0, 0x42, 0x72, 0x1d, 0xf5, 0x19, 0x85, 0x31, 0xa8, 0x20, 0xaf, 0x90, 0xbe, 0xa6,
	0xd1, 0x55, 0x99, 0x4a, 0xe1, 0x9d, 0xab, 0x1b, 0xc8, 0x1f, 0xca, 0xed, 0xb6, 0x42, 0x9a, 0xd4,
	0xc7, 0x7e, 0x3d, 0x37, 0x73, 0xa5, 0x32, 0x0d, 0x5f, 0xb1, 0xd6, 0x19, 0x83, 0x98, 0x08, 0xcd,
	0x3a, 0x19, 0x6a, 0x42, 0x1c, 0x16, 0x9f, 0x70, 0xd7, 0x1f, 0x91, 0xdf, 0xe0, 0x0e, 0xdf, 0x3f,
	0xaa, 0xe9, 0x1f, 0xb0, 0xd6, 0x1d, 0x6f, 0x7a, 0x98, 0xa5, 0x85, 0xd6, 0xd7, 0xdc, 0x8e, 0x91,
	0x7d, 0x8c, 0x11, 0x45, 0x7d, 0x95, 0xd0, 0xa6, 0x07, 0x20, 0x02, 0x79, 0xf3, 0x13, 0xde, 0x29,
	0x02, 0xde, 0x2d, 0x02, 0xde, 0x2b, 0x02, 0xda, 0x2f, 0x02, 0x3a, 0x2c, 0x02, 0x3a, 0x2a, 0x02,
	0x3a, 0x2e, 0x02, 0x5e, 0xf3, 0x01, 0xaf, 0xfb, 0x80, 0x36, 0x7c, 0xc0, 0x9b, 0x3e, 0xa0, 0x2d,
	0x1f, 0xd0, 0xb6, 0x0f, 0x68, 0xc7, 0x07, 0xbc, 0xeb, 0x03, 0xde, 0xf3, 0x01, 0xed, 0xfb, 0x80,
	0x0f, 0x7d, 0x40, 0x47, 0x3e, 0xe0, 0x63, 0x1f, 0xd0, 0x5a, 0x00, 0x68, 0x3d, 0x00, 0xfc, 0x3a,
	0x00, 0xf4, 0x2e, 0x00, 0xfc, 0x31, 0x00, 0xb4, 0x11, 0x00, 0xda, 0x0c, 0x00, 0x6f, 0x05, 0x80,
	0xb7, 0x03, 0xc0, 0x73, 0x03, 0x36, 0xa7, 0x32, 0xcd, 0x64, 0xda, 0x71, 0x6d, 0x41, 0x5d, 0x26,
	0x97, 0xb9, 0x97, 0x31, 0xa3, 0xff, 0xe1, 0xb9, 0x8c, 0x6d, 0x4a, 0xe9, 0xe6, 0x92, 0xc9, 0x7f,
	0x54, 0x8b, 0x86, 0x7f, 0x04, 0x00, 0x00, 0xff, 0xff, 0x4a, 0x2b, 0xb7, 0xf9, 0x9e, 0x08, 0x00,
	0x00,
}
