// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/deviceclaimingserver.proto

package ttnpb

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	go_thethings_network_lorawan_stack_pkg_types "go.thethings.network/lorawan-stack/pkg/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ClaimEndDeviceRequest struct {
	// Types that are valid to be assigned to SourceDevice:
	//	*ClaimEndDeviceRequest_AuthenticatedIdentifiers_
	//	*ClaimEndDeviceRequest_QRCode
	SourceDevice         isClaimEndDeviceRequest_SourceDevice `protobuf_oneof:"source_device"`
	TargetApplicationIDs ApplicationIdentifiers               `protobuf:"bytes,3,opt,name=target_application_ids,json=targetApplicationIds,proto3" json:"target_application_ids"`
	TargetDeviceID       string                               `protobuf:"bytes,4,opt,name=target_device_id,json=targetDeviceId,proto3" json:"target_device_id,omitempty"`
	// If set, invalidate the authentication code with which the device gets claimed. This prohibits subsequent claiming requests.
	InvalidateAuthenticationCode bool     `protobuf:"varint,5,opt,name=invalidate_authentication_code,json=invalidateAuthenticationCode,proto3" json:"invalidate_authentication_code,omitempty"`
	XXX_NoUnkeyedLiteral         struct{} `json:"-"`
	XXX_sizecache                int32    `json:"-"`
}

func (m *ClaimEndDeviceRequest) Reset()      { *m = ClaimEndDeviceRequest{} }
func (*ClaimEndDeviceRequest) ProtoMessage() {}
func (*ClaimEndDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8a7f6d184fc3dc3, []int{0}
}
func (m *ClaimEndDeviceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimEndDeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimEndDeviceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimEndDeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimEndDeviceRequest.Merge(m, src)
}
func (m *ClaimEndDeviceRequest) XXX_Size() int {
	return m.Size()
}
func (m *ClaimEndDeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimEndDeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimEndDeviceRequest proto.InternalMessageInfo

type isClaimEndDeviceRequest_SourceDevice interface {
	isClaimEndDeviceRequest_SourceDevice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ClaimEndDeviceRequest_AuthenticatedIdentifiers_ struct {
	AuthenticatedIdentifiers *ClaimEndDeviceRequest_AuthenticatedIdentifiers `protobuf:"bytes,1,opt,name=authenticated_identifiers,json=authenticatedIdentifiers,proto3,oneof"`
}
type ClaimEndDeviceRequest_QRCode struct {
	QRCode []byte `protobuf:"bytes,2,opt,name=qr_code,json=qrCode,proto3,oneof"`
}

func (*ClaimEndDeviceRequest_AuthenticatedIdentifiers_) isClaimEndDeviceRequest_SourceDevice() {}
func (*ClaimEndDeviceRequest_QRCode) isClaimEndDeviceRequest_SourceDevice()                    {}

func (m *ClaimEndDeviceRequest) GetSourceDevice() isClaimEndDeviceRequest_SourceDevice {
	if m != nil {
		return m.SourceDevice
	}
	return nil
}

func (m *ClaimEndDeviceRequest) GetAuthenticatedIdentifiers() *ClaimEndDeviceRequest_AuthenticatedIdentifiers {
	if x, ok := m.GetSourceDevice().(*ClaimEndDeviceRequest_AuthenticatedIdentifiers_); ok {
		return x.AuthenticatedIdentifiers
	}
	return nil
}

func (m *ClaimEndDeviceRequest) GetQRCode() []byte {
	if x, ok := m.GetSourceDevice().(*ClaimEndDeviceRequest_QRCode); ok {
		return x.QRCode
	}
	return nil
}

func (m *ClaimEndDeviceRequest) GetTargetApplicationIDs() ApplicationIdentifiers {
	if m != nil {
		return m.TargetApplicationIDs
	}
	return ApplicationIdentifiers{}
}

func (m *ClaimEndDeviceRequest) GetTargetDeviceID() string {
	if m != nil {
		return m.TargetDeviceID
	}
	return ""
}

func (m *ClaimEndDeviceRequest) GetInvalidateAuthenticationCode() bool {
	if m != nil {
		return m.InvalidateAuthenticationCode
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ClaimEndDeviceRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ClaimEndDeviceRequest_OneofMarshaler, _ClaimEndDeviceRequest_OneofUnmarshaler, _ClaimEndDeviceRequest_OneofSizer, []interface{}{
		(*ClaimEndDeviceRequest_AuthenticatedIdentifiers_)(nil),
		(*ClaimEndDeviceRequest_QRCode)(nil),
	}
}

func _ClaimEndDeviceRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ClaimEndDeviceRequest)
	// source_device
	switch x := m.SourceDevice.(type) {
	case *ClaimEndDeviceRequest_AuthenticatedIdentifiers_:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AuthenticatedIdentifiers); err != nil {
			return err
		}
	case *ClaimEndDeviceRequest_QRCode:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.QRCode)
	case nil:
	default:
		return fmt.Errorf("ClaimEndDeviceRequest.SourceDevice has unexpected type %T", x)
	}
	return nil
}

func _ClaimEndDeviceRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ClaimEndDeviceRequest)
	switch tag {
	case 1: // source_device.authenticated_identifiers
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClaimEndDeviceRequest_AuthenticatedIdentifiers)
		err := b.DecodeMessage(msg)
		m.SourceDevice = &ClaimEndDeviceRequest_AuthenticatedIdentifiers_{msg}
		return true, err
	case 2: // source_device.qr_code
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.SourceDevice = &ClaimEndDeviceRequest_QRCode{x}
		return true, err
	default:
		return false, nil
	}
}

func _ClaimEndDeviceRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ClaimEndDeviceRequest)
	// source_device
	switch x := m.SourceDevice.(type) {
	case *ClaimEndDeviceRequest_AuthenticatedIdentifiers_:
		s := proto.Size(x.AuthenticatedIdentifiers)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClaimEndDeviceRequest_QRCode:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.QRCode)))
		n += len(x.QRCode)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ClaimEndDeviceRequest_AuthenticatedIdentifiers struct {
	JoinEUI              go_thethings_network_lorawan_stack_pkg_types.EUI64 `protobuf:"bytes,1,opt,name=join_eui,json=joinEui,proto3,customtype=go.thethings.network/lorawan-stack/pkg/types.EUI64" json:"join_eui"`
	DevEUI               go_thethings_network_lorawan_stack_pkg_types.EUI64 `protobuf:"bytes,2,opt,name=dev_eui,json=devEui,proto3,customtype=go.thethings.network/lorawan-stack/pkg/types.EUI64" json:"dev_eui"`
	AuthenticationCode   []byte                                             `protobuf:"bytes,3,opt,name=authentication_code,json=authenticationCode,proto3" json:"authentication_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                           `json:"-"`
	XXX_sizecache        int32                                              `json:"-"`
}

func (m *ClaimEndDeviceRequest_AuthenticatedIdentifiers) Reset() {
	*m = ClaimEndDeviceRequest_AuthenticatedIdentifiers{}
}
func (*ClaimEndDeviceRequest_AuthenticatedIdentifiers) ProtoMessage() {}
func (*ClaimEndDeviceRequest_AuthenticatedIdentifiers) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8a7f6d184fc3dc3, []int{0, 0}
}
func (m *ClaimEndDeviceRequest_AuthenticatedIdentifiers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimEndDeviceRequest_AuthenticatedIdentifiers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimEndDeviceRequest_AuthenticatedIdentifiers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimEndDeviceRequest_AuthenticatedIdentifiers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimEndDeviceRequest_AuthenticatedIdentifiers.Merge(m, src)
}
func (m *ClaimEndDeviceRequest_AuthenticatedIdentifiers) XXX_Size() int {
	return m.Size()
}
func (m *ClaimEndDeviceRequest_AuthenticatedIdentifiers) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimEndDeviceRequest_AuthenticatedIdentifiers.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimEndDeviceRequest_AuthenticatedIdentifiers proto.InternalMessageInfo

func (m *ClaimEndDeviceRequest_AuthenticatedIdentifiers) GetAuthenticationCode() []byte {
	if m != nil {
		return m.AuthenticationCode
	}
	return nil
}

func init() {
	proto.RegisterType((*ClaimEndDeviceRequest)(nil), "ttn.lorawan.v3.ClaimEndDeviceRequest")
	golang_proto.RegisterType((*ClaimEndDeviceRequest)(nil), "ttn.lorawan.v3.ClaimEndDeviceRequest")
	proto.RegisterType((*ClaimEndDeviceRequest_AuthenticatedIdentifiers)(nil), "ttn.lorawan.v3.ClaimEndDeviceRequest.AuthenticatedIdentifiers")
	golang_proto.RegisterType((*ClaimEndDeviceRequest_AuthenticatedIdentifiers)(nil), "ttn.lorawan.v3.ClaimEndDeviceRequest.AuthenticatedIdentifiers")
}

func init() {
	proto.RegisterFile("lorawan-stack/api/deviceclaimingserver.proto", fileDescriptor_e8a7f6d184fc3dc3)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/deviceclaimingserver.proto", fileDescriptor_e8a7f6d184fc3dc3)
}

var fileDescriptor_e8a7f6d184fc3dc3 = []byte{
	// 805 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x41, 0x6c, 0x1b, 0x45,
	0x14, 0x9d, 0x49, 0x1b, 0x3b, 0xdd, 0x96, 0x60, 0x2d, 0x21, 0x2c, 0x21, 0x1a, 0x9b, 0xe0, 0x82,
	0x41, 0xf1, 0x2e, 0x72, 0x11, 0x12, 0x11, 0xa2, 0xf2, 0xc6, 0x96, 0x6a, 0x6e, 0x2c, 0xf4, 0x42,
	0x95, 0x98, 0xf1, 0xee, 0x64, 0x3d, 0xc4, 0x99, 0xd9, 0xec, 0x8e, 0xb7, 0x38, 0x80, 0x14, 0xf5,
	0x54, 0x71, 0x42, 0xe2, 0x00, 0x12, 0x17, 0xc4, 0xa9, 0xc7, 0x1e, 0x7b, 0xec, 0x81, 0x43, 0x8e,
	0x95, 0xb8, 0x54, 0x1c, 0xac, 0x7a, 0x96, 0x43, 0x8f, 0x3d, 0x56, 0x3e, 0xa1, 0x1d, 0x6f, 0x1a,
	0x07, 0x37, 0x52, 0xa5, 0xde, 0xe6, 0xcf, 0xff, 0xff, 0xfd, 0x79, 0xef, 0xff, 0x3f, 0xda, 0x7a,
	0x8f, 0x87, 0xf8, 0x26, 0x66, 0xd5, 0x48, 0x60, 0x77, 0xd7, 0xc2, 0x01, 0xb5, 0x3c, 0x12, 0x53,
	0x97, 0xb8, 0x3d, 0x4c, 0xf7, 0x28, 0xf3, 0x23, 0x12, 0xc6, 0x24, 0x34, 0x83, 0x90, 0x0b, 0xae,
	0x2f, 0x0a, 0xc1, 0xcc, 0x2c, 0xc3, 0x8c, 0xaf, 0xac, 0xd4, 0x7d, 0x2a, 0xba, 0xfd, 0x8e, 0xe9,
	0xf2, 0x3d, 0x8b, 0xb0, 0x98, 0x0f, 0x82, 0x90, 0x7f, 0x37, 0xb0, 0x54, 0xb0, 0x5b, 0xf5, 0x09,
	0xab, 0xc6, 0xb8, 0x47, 0x3d, 0x2c, 0x88, 0x35, 0x73, 0x98, 0x40, 0xae, 0x54, 0xa7, 0x20, 0x7c,
	0xee, 0xf3, 0x49, 0x72, 0xa7, 0xbf, 0xa3, 0x2c, 0x65, 0xa8, 0x53, 0x16, 0xbe, 0xea, 0x73, 0xee,
	0xf7, 0x88, 0x7a, 0x28, 0x66, 0x8c, 0x0b, 0x2c, 0x28, 0x67, 0x51, 0xe6, 0x7d, 0x2b, 0xf3, 0x3e,
	0xc3, 0x20, 0x7b, 0x81, 0x18, 0x64, 0xce, 0x77, 0x66, 0xa9, 0x52, 0x8f, 0x30, 0x41, 0x77, 0x28,
	0x09, 0x33, 0x84, 0xb5, 0xbf, 0x72, 0xda, 0xeb, 0x9b, 0x29, 0xf5, 0x26, 0xf3, 0x1a, 0x4a, 0x08,
	0x87, 0xec, 0xf7, 0x49, 0x24, 0xf4, 0xdf, 0xa1, 0xf6, 0x26, 0xee, 0x8b, 0x6e, 0x9a, 0xe1, 0x62,
	0x41, 0xbc, 0xf6, 0x54, 0xb6, 0x01, 0x4b, 0xb0, 0x72, 0xb1, 0xf6, 0x99, 0x79, 0x5a, 0x20, 0xf3,
	0xb9, 0x50, 0x66, 0x7d, 0x1a, 0xa6, 0x75, 0x82, 0x62, 0xaf, 0xca, 0x61, 0xd1, 0x38, 0xcb, 0x7b,
	0x0d, 0x38, 0x06, 0x3e, 0xc3, 0xa7, 0x5b, 0x5a, 0x7e, 0x3f, 0x6c, 0xbb, 0xdc, 0x23, 0xc6, 0x5c,
	0x09, 0x56, 0x2e, 0xd9, 0x4b, 0x63, 0x3b, 0x7f, 0x30, 0x5f, 0x80, 0xc6, 0xe1, 0x82, 0x1c, 0x16,
	0x73, 0x5f, 0x38, 0x9b, 0xdc, 0x23, 0xd7, 0x80, 0x93, 0xdb, 0x0f, 0xd3, 0x93, 0x7e, 0x0b, 0x6a,
	0xcb, 0x02, 0x87, 0x3e, 0x11, 0x6d, 0x1c, 0x04, 0xbd, 0x14, 0x91, 0x72, 0xd6, 0xa6, 0x5e, 0x64,
	0x9c, 0x53, 0x5c, 0xde, 0xfd, 0x3f, 0x97, 0xfa, 0x49, 0xd8, 0xf4, 0x9b, 0xcb, 0x63, 0x7b, 0xfe,
	0x27, 0x38, 0x57, 0x80, 0x47, 0xc3, 0x22, 0x90, 0xc3, 0xe2, 0xd2, 0x57, 0x0a, 0x75, 0x3a, 0xba,
	0x11, 0x39, 0x4b, 0x62, 0xe6, 0xd6, 0x8b, 0xf4, 0x1d, 0xad, 0x90, 0xbd, 0x61, 0x32, 0x74, 0x6d,
	0xea, 0x19, 0xe7, 0x4b, 0xb0, 0x72, 0xc1, 0xfe, 0x74, 0x6c, 0xbf, 0x17, 0x5e, 0x36, 0xca, 0xb5,
	0xb7, 0xb7, 0x6f, 0xe0, 0xea, 0xc1, 0x87, 0xd5, 0x4f, 0xb6, 0x2a, 0x57, 0x37, 0x6e, 0x54, 0xb7,
	0xae, 0x1e, 0x9b, 0xef, 0x7f, 0x5f, 0x5b, 0xff, 0xb1, 0xfc, 0xc3, 0x76, 0x59, 0x0e, 0x8b, 0x8b,
	0x93, 0x9a, 0x13, 0x95, 0x5b, 0x0d, 0x67, 0x51, 0x4c, 0xdb, 0x9e, 0xde, 0xd0, 0x10, 0x65, 0xc7,
	0x83, 0xd7, 0x9e, 0x12, 0x31, 0xa5, 0xac, 0x44, 0x9b, 0x2f, 0xc1, 0xca, 0x82, 0xb3, 0x7a, 0x12,
	0x55, 0x3f, 0x15, 0x94, 0x4a, 0xb6, 0xf2, 0xeb, 0x9c, 0x76, 0x66, 0x73, 0xf4, 0x6f, 0xb4, 0x85,
	0x6f, 0x39, 0x65, 0x6d, 0xd2, 0xa7, 0x6a, 0x18, 0x2e, 0xd9, 0xcd, 0x54, 0x90, 0x7f, 0x86, 0xc5,
	0x9a, 0xcf, 0x4d, 0xd1, 0x25, 0xa2, 0x9b, 0x6e, 0x93, 0xc9, 0x88, 0xb8, 0xc9, 0xc3, 0x5d, 0xeb,
	0xf4, 0x30, 0x06, 0xbb, 0xbe, 0x25, 0x06, 0x01, 0x89, 0xcc, 0xe6, 0xf5, 0xd6, 0xc7, 0x1f, 0xc9,
	0x61, 0x31, 0xff, 0x39, 0xa7, 0xac, 0x79, 0xbd, 0xe5, 0xe4, 0x53, 0xd8, 0x66, 0x9f, 0xea, 0x5b,
	0x5a, 0xde, 0x23, 0xb1, 0x2a, 0x30, 0x69, 0x71, 0xe3, 0xa5, 0x0a, 0xe4, 0x1a, 0x24, 0x4e, 0xf1,
	0x73, 0x1e, 0x89, 0x53, 0xf8, 0x0d, 0xed, 0xb5, 0xe7, 0x09, 0x73, 0x4e, 0x95, 0xba, 0x30, 0xb6,
	0x73, 0x07, 0xe7, 0x0b, 0xd0, 0x58, 0x70, 0x74, 0x3c, 0xa3, 0x8c, 0xfd, 0xaa, 0xf6, 0x4a, 0xc4,
	0xfb, 0xa1, 0x4b, 0xb2, 0x3e, 0xd6, 0x06, 0xda, 0x1b, 0xcf, 0xa6, 0x7e, 0x33, 0xfb, 0x49, 0xbe,
	0x54, 0x3f, 0x89, 0xbe, 0xad, 0xcd, 0xab, 0x1b, 0xfd, 0xf2, 0x0b, 0x2d, 0xcb, 0xca, 0xb2, 0x39,
	0x59, 0x6a, 0xf3, 0x78, 0xa9, 0xcd, 0x66, 0xba, 0xd4, 0x6b, 0xcb, 0xb7, 0xfe, 0xfe, 0xf7, 0x97,
	0xb9, 0xc2, 0xda, 0x45, 0x8b, 0x78, 0x6e, 0x64, 0xa9, 0xff, 0x6a, 0x03, 0x7e, 0x60, 0xff, 0x09,
	0x8f, 0x46, 0x08, 0x3e, 0x18, 0x21, 0xf8, 0x70, 0x84, 0xc0, 0xa3, 0x11, 0x02, 0x8f, 0x47, 0x08,
	0x3c, 0x19, 0x21, 0xf0, 0x74, 0x84, 0xe0, 0xa1, 0x44, 0xf0, 0xb6, 0x44, 0xe0, 0x8e, 0x44, 0xf0,
	0xae, 0x44, 0xe0, 0x9e, 0x44, 0xe0, 0xbe, 0x44, 0xe0, 0x48, 0x22, 0xf8, 0x40, 0x22, 0xf8, 0x50,
	0x22, 0xf0, 0x48, 0x22, 0xf8, 0x58, 0x22, 0xf0, 0x44, 0x22, 0xf8, 0x54, 0x22, 0x70, 0x98, 0x20,
	0x70, 0x3b, 0x41, 0xf0, 0xe7, 0x04, 0x81, 0xdf, 0x12, 0x04, 0xff, 0x48, 0x10, 0xb8, 0x93, 0x20,
	0x70, 0x37, 0x41, 0xf0, 0x5e, 0x82, 0xe0, 0xfd, 0x04, 0xc1, 0xaf, 0xd7, 0x5f, 0xb4, 0x09, 0x82,
	0x05, 0x9d, 0x4e, 0x4e, 0x91, 0xb9, 0xf2, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x7b, 0x1f,
	0xcb, 0x7f, 0x05, 0x00, 0x00,
}

func (this *ClaimEndDeviceRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClaimEndDeviceRequest)
	if !ok {
		that2, ok := that.(ClaimEndDeviceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.SourceDevice == nil {
		if this.SourceDevice != nil {
			return false
		}
	} else if this.SourceDevice == nil {
		return false
	} else if !this.SourceDevice.Equal(that1.SourceDevice) {
		return false
	}
	if !this.TargetApplicationIDs.Equal(&that1.TargetApplicationIDs) {
		return false
	}
	if this.TargetDeviceID != that1.TargetDeviceID {
		return false
	}
	if this.InvalidateAuthenticationCode != that1.InvalidateAuthenticationCode {
		return false
	}
	return true
}
func (this *ClaimEndDeviceRequest_AuthenticatedIdentifiers_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClaimEndDeviceRequest_AuthenticatedIdentifiers_)
	if !ok {
		that2, ok := that.(ClaimEndDeviceRequest_AuthenticatedIdentifiers_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AuthenticatedIdentifiers.Equal(that1.AuthenticatedIdentifiers) {
		return false
	}
	return true
}
func (this *ClaimEndDeviceRequest_QRCode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClaimEndDeviceRequest_QRCode)
	if !ok {
		that2, ok := that.(ClaimEndDeviceRequest_QRCode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.QRCode, that1.QRCode) {
		return false
	}
	return true
}
func (this *ClaimEndDeviceRequest_AuthenticatedIdentifiers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClaimEndDeviceRequest_AuthenticatedIdentifiers)
	if !ok {
		that2, ok := that.(ClaimEndDeviceRequest_AuthenticatedIdentifiers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JoinEUI.Equal(that1.JoinEUI) {
		return false
	}
	if !this.DevEUI.Equal(that1.DevEUI) {
		return false
	}
	if !bytes.Equal(this.AuthenticationCode, that1.AuthenticationCode) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EndDeviceClaimingServerClient is the client API for EndDeviceClaimingServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EndDeviceClaimingServerClient interface {
	// Claims the end device by claim authentication code or QR code and transfers the device to the target application.
	Claim(ctx context.Context, in *ClaimEndDeviceRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type endDeviceClaimingServerClient struct {
	cc *grpc.ClientConn
}

func NewEndDeviceClaimingServerClient(cc *grpc.ClientConn) EndDeviceClaimingServerClient {
	return &endDeviceClaimingServerClient{cc}
}

func (c *endDeviceClaimingServerClient) Claim(ctx context.Context, in *ClaimEndDeviceRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EndDeviceClaimingServer/Claim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EndDeviceClaimingServerServer is the server API for EndDeviceClaimingServer service.
type EndDeviceClaimingServerServer interface {
	// Claims the end device by claim authentication code or QR code and transfers the device to the target application.
	Claim(context.Context, *ClaimEndDeviceRequest) (*types.Empty, error)
}

func RegisterEndDeviceClaimingServerServer(s *grpc.Server, srv EndDeviceClaimingServerServer) {
	s.RegisterService(&_EndDeviceClaimingServer_serviceDesc, srv)
}

func _EndDeviceClaimingServer_Claim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimEndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndDeviceClaimingServerServer).Claim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EndDeviceClaimingServer/Claim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndDeviceClaimingServerServer).Claim(ctx, req.(*ClaimEndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EndDeviceClaimingServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.EndDeviceClaimingServer",
	HandlerType: (*EndDeviceClaimingServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Claim",
			Handler:    _EndDeviceClaimingServer_Claim_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/deviceclaimingserver.proto",
}

func (m *ClaimEndDeviceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimEndDeviceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SourceDevice != nil {
		nn1, err := m.SourceDevice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintDeviceclaimingserver(dAtA, i, uint64(m.TargetApplicationIDs.Size()))
	n2, err := m.TargetApplicationIDs.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.TargetDeviceID) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDeviceclaimingserver(dAtA, i, uint64(len(m.TargetDeviceID)))
		i += copy(dAtA[i:], m.TargetDeviceID)
	}
	if m.InvalidateAuthenticationCode {
		dAtA[i] = 0x28
		i++
		if m.InvalidateAuthenticationCode {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ClaimEndDeviceRequest_AuthenticatedIdentifiers_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AuthenticatedIdentifiers != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDeviceclaimingserver(dAtA, i, uint64(m.AuthenticatedIdentifiers.Size()))
		n3, err := m.AuthenticatedIdentifiers.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *ClaimEndDeviceRequest_QRCode) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.QRCode != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDeviceclaimingserver(dAtA, i, uint64(len(m.QRCode)))
		i += copy(dAtA[i:], m.QRCode)
	}
	return i, nil
}
func (m *ClaimEndDeviceRequest_AuthenticatedIdentifiers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimEndDeviceRequest_AuthenticatedIdentifiers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintDeviceclaimingserver(dAtA, i, uint64(m.JoinEUI.Size()))
	n4, err := m.JoinEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x12
	i++
	i = encodeVarintDeviceclaimingserver(dAtA, i, uint64(m.DevEUI.Size()))
	n5, err := m.DevEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if len(m.AuthenticationCode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDeviceclaimingserver(dAtA, i, uint64(len(m.AuthenticationCode)))
		i += copy(dAtA[i:], m.AuthenticationCode)
	}
	return i, nil
}

func encodeVarintDeviceclaimingserver(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedClaimEndDeviceRequest(r randyDeviceclaimingserver, easy bool) *ClaimEndDeviceRequest {
	this := &ClaimEndDeviceRequest{}
	oneofNumber_SourceDevice := []int32{1, 2}[r.Intn(2)]
	switch oneofNumber_SourceDevice {
	case 1:
		this.SourceDevice = NewPopulatedClaimEndDeviceRequest_AuthenticatedIdentifiers_(r, easy)
	case 2:
		this.SourceDevice = NewPopulatedClaimEndDeviceRequest_QRCode(r, easy)
	}
	v1 := NewPopulatedApplicationIdentifiers(r, easy)
	this.TargetApplicationIDs = *v1
	this.TargetDeviceID = randStringDeviceclaimingserver(r)
	this.InvalidateAuthenticationCode = bool(r.Intn(2) == 0)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedClaimEndDeviceRequest_AuthenticatedIdentifiers_(r randyDeviceclaimingserver, easy bool) *ClaimEndDeviceRequest_AuthenticatedIdentifiers_ {
	this := &ClaimEndDeviceRequest_AuthenticatedIdentifiers_{}
	this.AuthenticatedIdentifiers = NewPopulatedClaimEndDeviceRequest_AuthenticatedIdentifiers(r, easy)
	return this
}
func NewPopulatedClaimEndDeviceRequest_QRCode(r randyDeviceclaimingserver, easy bool) *ClaimEndDeviceRequest_QRCode {
	this := &ClaimEndDeviceRequest_QRCode{}
	v2 := r.Intn(100)
	this.QRCode = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.QRCode[i] = byte(r.Intn(256))
	}
	return this
}
func NewPopulatedClaimEndDeviceRequest_AuthenticatedIdentifiers(r randyDeviceclaimingserver, easy bool) *ClaimEndDeviceRequest_AuthenticatedIdentifiers {
	this := &ClaimEndDeviceRequest_AuthenticatedIdentifiers{}
	v3 := go_thethings_network_lorawan_stack_pkg_types.NewPopulatedEUI64(r)
	this.JoinEUI = *v3
	v4 := go_thethings_network_lorawan_stack_pkg_types.NewPopulatedEUI64(r)
	this.DevEUI = *v4
	v5 := r.Intn(100)
	this.AuthenticationCode = make([]byte, v5)
	for i := 0; i < v5; i++ {
		this.AuthenticationCode[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyDeviceclaimingserver interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneDeviceclaimingserver(r randyDeviceclaimingserver) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringDeviceclaimingserver(r randyDeviceclaimingserver) string {
	v6 := r.Intn(100)
	tmps := make([]rune, v6)
	for i := 0; i < v6; i++ {
		tmps[i] = randUTF8RuneDeviceclaimingserver(r)
	}
	return string(tmps)
}
func randUnrecognizedDeviceclaimingserver(r randyDeviceclaimingserver, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldDeviceclaimingserver(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldDeviceclaimingserver(dAtA []byte, r randyDeviceclaimingserver, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateDeviceclaimingserver(dAtA, uint64(key))
		v7 := r.Int63()
		if r.Intn(2) == 0 {
			v7 *= -1
		}
		dAtA = encodeVarintPopulateDeviceclaimingserver(dAtA, uint64(v7))
	case 1:
		dAtA = encodeVarintPopulateDeviceclaimingserver(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateDeviceclaimingserver(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateDeviceclaimingserver(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateDeviceclaimingserver(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateDeviceclaimingserver(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *ClaimEndDeviceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceDevice != nil {
		n += m.SourceDevice.Size()
	}
	l = m.TargetApplicationIDs.Size()
	n += 1 + l + sovDeviceclaimingserver(uint64(l))
	l = len(m.TargetDeviceID)
	if l > 0 {
		n += 1 + l + sovDeviceclaimingserver(uint64(l))
	}
	if m.InvalidateAuthenticationCode {
		n += 2
	}
	return n
}

func (m *ClaimEndDeviceRequest_AuthenticatedIdentifiers_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthenticatedIdentifiers != nil {
		l = m.AuthenticatedIdentifiers.Size()
		n += 1 + l + sovDeviceclaimingserver(uint64(l))
	}
	return n
}
func (m *ClaimEndDeviceRequest_QRCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QRCode != nil {
		l = len(m.QRCode)
		n += 1 + l + sovDeviceclaimingserver(uint64(l))
	}
	return n
}
func (m *ClaimEndDeviceRequest_AuthenticatedIdentifiers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.JoinEUI.Size()
	n += 1 + l + sovDeviceclaimingserver(uint64(l))
	l = m.DevEUI.Size()
	n += 1 + l + sovDeviceclaimingserver(uint64(l))
	l = len(m.AuthenticationCode)
	if l > 0 {
		n += 1 + l + sovDeviceclaimingserver(uint64(l))
	}
	return n
}

func sovDeviceclaimingserver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDeviceclaimingserver(x uint64) (n int) {
	return sovDeviceclaimingserver((x << 1) ^ uint64((int64(x) >> 63)))
}
func (this *ClaimEndDeviceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClaimEndDeviceRequest{`,
		`SourceDevice:` + fmt.Sprintf("%v", this.SourceDevice) + `,`,
		`TargetApplicationIDs:` + strings.Replace(strings.Replace(this.TargetApplicationIDs.String(), "ApplicationIdentifiers", "ApplicationIdentifiers", 1), `&`, ``, 1) + `,`,
		`TargetDeviceID:` + fmt.Sprintf("%v", this.TargetDeviceID) + `,`,
		`InvalidateAuthenticationCode:` + fmt.Sprintf("%v", this.InvalidateAuthenticationCode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClaimEndDeviceRequest_AuthenticatedIdentifiers_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClaimEndDeviceRequest_AuthenticatedIdentifiers_{`,
		`AuthenticatedIdentifiers:` + strings.Replace(fmt.Sprintf("%v", this.AuthenticatedIdentifiers), "ClaimEndDeviceRequest_AuthenticatedIdentifiers", "ClaimEndDeviceRequest_AuthenticatedIdentifiers", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClaimEndDeviceRequest_QRCode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClaimEndDeviceRequest_QRCode{`,
		`QRCode:` + fmt.Sprintf("%v", this.QRCode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClaimEndDeviceRequest_AuthenticatedIdentifiers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClaimEndDeviceRequest_AuthenticatedIdentifiers{`,
		`JoinEUI:` + fmt.Sprintf("%v", this.JoinEUI) + `,`,
		`DevEUI:` + fmt.Sprintf("%v", this.DevEUI) + `,`,
		`AuthenticationCode:` + fmt.Sprintf("%v", this.AuthenticationCode) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDeviceclaimingserver(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ClaimEndDeviceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeviceclaimingserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimEndDeviceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimEndDeviceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticatedIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceclaimingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClaimEndDeviceRequest_AuthenticatedIdentifiers{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SourceDevice = &ClaimEndDeviceRequest_AuthenticatedIdentifiers_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QRCode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceclaimingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.SourceDevice = &ClaimEndDeviceRequest_QRCode{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetApplicationIDs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceclaimingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TargetApplicationIDs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetDeviceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceclaimingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetDeviceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidateAuthenticationCode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceclaimingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InvalidateAuthenticationCode = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDeviceclaimingserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimEndDeviceRequest_AuthenticatedIdentifiers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeviceclaimingserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthenticatedIdentifiers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthenticatedIdentifiers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceclaimingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.JoinEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceclaimingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationCode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceclaimingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthenticationCode = append(m.AuthenticationCode[:0], dAtA[iNdEx:postIndex]...)
			if m.AuthenticationCode == nil {
				m.AuthenticationCode = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeviceclaimingserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDeviceclaimingserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDeviceclaimingserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeviceclaimingserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeviceclaimingserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDeviceclaimingserver
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthDeviceclaimingserver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDeviceclaimingserver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDeviceclaimingserver(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthDeviceclaimingserver
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDeviceclaimingserver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDeviceclaimingserver   = fmt.Errorf("proto: integer overflow")
)
