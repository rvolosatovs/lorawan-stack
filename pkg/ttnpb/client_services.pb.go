// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/client_services.proto

package ttnpb

import (
	context "context"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

func init() {
	proto.RegisterFile("lorawan-stack/api/client_services.proto", fileDescriptor_80815ba053239a77)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/client_services.proto", fileDescriptor_80815ba053239a77)
}

var fileDescriptor_80815ba053239a77 = []byte{
	// 677 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x3d, 0x4c, 0xd5, 0x50,
	0x14, 0xbe, 0x57, 0xf4, 0xc5, 0x34, 0x06, 0xe3, 0x8d, 0xc1, 0xa4, 0xc0, 0x51, 0x8a, 0x09, 0x09,
	0x81, 0x5b, 0x03, 0x31, 0x31, 0x6e, 0x8a, 0x8a, 0x46, 0x27, 0x88, 0xcb, 0x5b, 0x48, 0x5f, 0xb9,
	0xf4, 0xdd, 0x50, 0x7a, 0x1f, 0xbd, 0xf7, 0x41, 0x90, 0x90, 0x10, 0x07, 0x65, 0x31, 0xd1, 0xb8,
	0xe8, 0x66, 0x9c, 0x18, 0x1c, 0x18, 0x19, 0x19, 0xd9, 0x24, 0x61, 0x61, 0xa4, 0xad, 0x03, 0x23,
	0x23, 0xa3, 0x79, 0xb7, 0x2d, 0xf4, 0xfd, 0x10, 0x21, 0x71, 0xbb, 0x3d, 0x3f, 0xdf, 0x77, 0xce,
	0x77, 0xce, 0xa9, 0x31, 0xe4, 0x8b, 0xd0, 0x59, 0x76, 0x82, 0x51, 0xa9, 0x1c, 0x77, 0xde, 0x76,
	0x6a, 0xdc, 0x76, 0x7d, 0xce, 0x02, 0x35, 0x23, 0x59, 0xb8, 0xc4, 0x5d, 0x26, 0x69, 0x2d, 0x14,
	0x4a, 0x90, 0x6e, 0xa5, 0x02, 0x9a, 0x05, 0xd3, 0xa5, 0x71, 0x73, 0xd4, 0xe3, 0xaa, 0x5a, 0xaf,
	0x50, 0x57, 0x2c, 0xd8, 0x9e, 0xf0, 0x84, 0xad, 0xc3, 0x2a, 0xf5, 0x39, 0xfd, 0xa5, 0x3f, 0xf4,
	0x2b, 0x4d, 0x37, 0xfb, 0x3c, 0x21, 0x3c, 0x9f, 0x69, 0x02, 0x27, 0x08, 0x84, 0x72, 0x14, 0x17,
	0x41, 0x06, 0x6e, 0xf6, 0x66, 0xde, 0x53, 0x0c, 0xb6, 0x50, 0x53, 0x2b, 0x99, 0x13, 0xce, 0x2b,
	0x31, 0xf3, 0x0f, 0xb6, 0xfb, 0xf9, 0x2c, 0x0b, 0x14, 0x9f, 0xe3, 0x2c, 0x94, 0xe7, 0x83, 0x84,
	0xdc, 0xab, 0xaa, 0xcc, 0x3f, 0x76, 0x72, 0xcd, 0xe8, 0x9e, 0xd0, 0xa8, 0x53, 0xcc, 0xe3, 0x52,
	0x85, 0x2b, 0xe4, 0x37, 0x36, 0x4a, 0x13, 0x21, 0x73, 0x14, 0x23, 0x83, 0xb4, 0xb9, 0x7b, 0x9a,
	0xda, 0xf3, 0x84, 0xc5, 0x3a, 0x93, 0xca, 0xec, 0x69, 0x0b, 0xd2, 0x6e, 0xeb, 0x23, 0x7e, 0xbf,
	0xff, 0xe7, 0xeb, 0x95, 0x75, 0x6c, 0x51, 0xbb, 0x2e, 0x59, 0x28, 0xed, 0x55, 0x57, 0xf8, 0xbe,
	0x53, 0x11, 0xa1, 0xa3, 0x44, 0x48, 0x1b, 0xb6, 0x19, 0x3e, 0x2b, 0xf3, 0xc7, 0x5a, 0xd6, 0x9e,
	0x7c, 0x8c, 0x87, 0xcb, 0xaf, 0xad, 0x17, 0xb6, 0x08, 0x3d, 0x27, 0xe0, 0xef, 0x52, 0xc5, 0x5a,
	0x92, 0x8b, 0x3e, 0x0d, 0xd2, 0x62, 0x28, 0x82, 0x91, 0xaa, 0xd1, 0x35, 0xc9, 0x14, 0xb9, 0xd7,
	0x5a, 0xe8, 0x24, 0x53, 0x17, 0x6b, 0x65, 0x48, 0x77, 0x32, 0x40, 0xee, 0xe6, 0xa8, 0xf6, 0x6a,
	0xb6, 0x2d, 0x0d, 0xea, 0xd3, 0xe7, 0x1a, 0xd9, 0xc7, 0xc6, 0xd5, 0x37, 0x5c, 0x2a, 0x62, 0xb5,
	0x22, 0x35, 0xac, 0x29, 0x9a, 0xcc, 0xd9, 0xee, 0x74, 0x66, 0x93, 0xd6, 0xa7, 0x54, 0xb9, 0x0f,
	0x98, 0x5c, 0xcf, 0x09, 0xcb, 0x0f, 0xc8, 0x25, 0x55, 0x2c, 0xbf, 0x24, 0xff, 0x49, 0x42, 0xb2,
	0x68, 0x94, 0xde, 0xd6, 0x66, 0x3b, 0x2e, 0x44, 0x6a, 0xbf, 0x98, 0x8a, 0xc3, 0xba, 0xab, 0xfb,
	0x66, 0x9b, 0x8a, 0xb4, 0x59, 0xc5, 0xc6, 0xc8, 0x1c, 0xa3, 0xf4, 0x8c, 0xf9, 0x4c, 0x31, 0x32,
	0xd0, 0x19, 0xed, 0xd5, 0xd9, 0xaa, 0x9b, 0x3d, 0x34, 0xbd, 0x23, 0x9a, 0xdf, 0x11, 0x7d, 0xde,
	0xb8, 0x23, 0xab, 0x4f, 0x13, 0xf6, 0x0c, 0xdf, 0xee, 0x30, 0xb6, 0xb5, 0xb1, 0x5f, 0x5d, 0xc6,
	0x8d, 0x14, 0xeb, 0x89, 0xeb, 0x32, 0x29, 0x89, 0x6f, 0x18, 0x8d, 0x29, 0x4d, 0xe9, 0xfb, 0xb8,
	0x18, 0x6f, 0x4b, 0x48, 0x9a, 0x6a, 0x0d, 0x6a, 0xde, 0x7e, 0xd2, 0xdb, 0x89, 0x37, 0xbb, 0x3f,
	0xf2, 0x05, 0x1b, 0x37, 0xa7, 0x99, 0x9a, 0x28, 0x8c, 0x84, 0x8c, 0xb4, 0x02, 0x4e, 0xe7, 0x1b,
	0x5a, 0x0c, 0x3b, 0xd3, 0xb9, 0x73, 0xdb, 0x8f, 0x34, 0xfd, 0x98, 0x39, 0xfa, 0x8f, 0x6d, 0xb5,
	0x8b, 0xeb, 0xa0, 0x0f, 0xe5, 0x3b, 0x36, 0x6e, 0xe9, 0x45, 0x2d, 0x3a, 0x08, 0x3d, 0x7f, 0x97,
	0x9b, 0x02, 0xf3, 0xba, 0xfa, 0xdb, 0x94, 0x2b, 0x46, 0x59, 0x0f, 0x75, 0x79, 0x36, 0xb9, 0x5c,
	0x79, 0x4f, 0x7f, 0xe2, 0xdd, 0x08, 0xf0, 0x5e, 0x04, 0xf8, 0x20, 0x02, 0x74, 0x18, 0x01, 0x3a,
	0x8a, 0x00, 0x1d, 0x47, 0x80, 0x4e, 0x22, 0xc0, 0xeb, 0x31, 0xe0, 0x8d, 0x18, 0xd0, 0x66, 0x0c,
	0x78, 0x2b, 0x06, 0xb4, 0x1d, 0x03, 0xda, 0x89, 0x01, 0xed, 0xc6, 0x80, 0xf7, 0x62, 0xc0, 0x07,
	0x31, 0xa0, 0xc3, 0x18, 0xf0, 0x51, 0x0c, 0xe8, 0x38, 0x06, 0x7c, 0x12, 0x03, 0x5a, 0x4f, 0x00,
	0x6d, 0x24, 0x80, 0x3f, 0x27, 0x80, 0xbe, 0x25, 0x80, 0x7f, 0x24, 0x80, 0x36, 0x13, 0x40, 0x5b,
	0x09, 0xe0, 0xed, 0x04, 0xf0, 0x4e, 0x02, 0xb8, 0x3c, 0xe2, 0x09, 0xaa, 0xaa, 0x4c, 0x55, 0x79,
	0xe0, 0x49, 0x1a, 0x30, 0xb5, 0x2c, 0xc2, 0x79, 0xbb, 0xf9, 0xaf, 0x5a, 0x9b, 0xf7, 0x6c, 0xa5,
	0x82, 0x5a, 0xa5, 0x52, 0xd2, 0xa3, 0x18, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xf1, 0xfb, 0x05,
	0xe7, 0x5f, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClientRegistryClient is the client API for ClientRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClientRegistryClient interface {
	// Create a new OAuth client. This also sets the given organization or user as
	// first collaborator with all possible rights.
	Create(ctx context.Context, in *CreateClientRequest, opts ...grpc.CallOption) (*Client, error)
	// Get the OAuth client with the given identifiers, selecting the fields given
	// by the field mask. The method may return more or less fields, depending on
	// the rights of the caller.
	Get(ctx context.Context, in *GetClientRequest, opts ...grpc.CallOption) (*Client, error)
	// List OAuth clients. See request message for details.
	List(ctx context.Context, in *ListClientsRequest, opts ...grpc.CallOption) (*Clients, error)
	Update(ctx context.Context, in *UpdateClientRequest, opts ...grpc.CallOption) (*Client, error)
	Delete(ctx context.Context, in *ClientIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
}

type clientRegistryClient struct {
	cc *grpc.ClientConn
}

func NewClientRegistryClient(cc *grpc.ClientConn) ClientRegistryClient {
	return &clientRegistryClient{cc}
}

func (c *clientRegistryClient) Create(ctx context.Context, in *CreateClientRequest, opts ...grpc.CallOption) (*Client, error) {
	out := new(Client)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ClientRegistry/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientRegistryClient) Get(ctx context.Context, in *GetClientRequest, opts ...grpc.CallOption) (*Client, error) {
	out := new(Client)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ClientRegistry/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientRegistryClient) List(ctx context.Context, in *ListClientsRequest, opts ...grpc.CallOption) (*Clients, error) {
	out := new(Clients)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ClientRegistry/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientRegistryClient) Update(ctx context.Context, in *UpdateClientRequest, opts ...grpc.CallOption) (*Client, error) {
	out := new(Client)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ClientRegistry/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientRegistryClient) Delete(ctx context.Context, in *ClientIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ClientRegistry/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientRegistryServer is the server API for ClientRegistry service.
type ClientRegistryServer interface {
	// Create a new OAuth client. This also sets the given organization or user as
	// first collaborator with all possible rights.
	Create(context.Context, *CreateClientRequest) (*Client, error)
	// Get the OAuth client with the given identifiers, selecting the fields given
	// by the field mask. The method may return more or less fields, depending on
	// the rights of the caller.
	Get(context.Context, *GetClientRequest) (*Client, error)
	// List OAuth clients. See request message for details.
	List(context.Context, *ListClientsRequest) (*Clients, error)
	Update(context.Context, *UpdateClientRequest) (*Client, error)
	Delete(context.Context, *ClientIdentifiers) (*types.Empty, error)
}

func RegisterClientRegistryServer(s *grpc.Server, srv ClientRegistryServer) {
	s.RegisterService(&_ClientRegistry_serviceDesc, srv)
}

func _ClientRegistry_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRegistryServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ClientRegistry/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRegistryServer).Create(ctx, req.(*CreateClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientRegistry_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRegistryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ClientRegistry/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRegistryServer).Get(ctx, req.(*GetClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientRegistry_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRegistryServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ClientRegistry/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRegistryServer).List(ctx, req.(*ListClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientRegistry_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRegistryServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ClientRegistry/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRegistryServer).Update(ctx, req.(*UpdateClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientRegistry_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRegistryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ClientRegistry/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRegistryServer).Delete(ctx, req.(*ClientIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClientRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.ClientRegistry",
	HandlerType: (*ClientRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ClientRegistry_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ClientRegistry_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ClientRegistry_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ClientRegistry_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ClientRegistry_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/client_services.proto",
}

// ClientAccessClient is the client API for ClientAccess service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClientAccessClient interface {
	ListRights(ctx context.Context, in *ClientIdentifiers, opts ...grpc.CallOption) (*Rights, error)
	// Set the rights of a collaborator on the OAuth client. Users or organizations
	// are considered to be a collaborator if they have at least one right on the
	// OAuth client.
	SetCollaborator(ctx context.Context, in *SetClientCollaboratorRequest, opts ...grpc.CallOption) (*types.Empty, error)
	ListCollaborators(ctx context.Context, in *ListClientCollaboratorsRequest, opts ...grpc.CallOption) (*Collaborators, error)
}

type clientAccessClient struct {
	cc *grpc.ClientConn
}

func NewClientAccessClient(cc *grpc.ClientConn) ClientAccessClient {
	return &clientAccessClient{cc}
}

func (c *clientAccessClient) ListRights(ctx context.Context, in *ClientIdentifiers, opts ...grpc.CallOption) (*Rights, error) {
	out := new(Rights)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ClientAccess/ListRights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientAccessClient) SetCollaborator(ctx context.Context, in *SetClientCollaboratorRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ClientAccess/SetCollaborator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientAccessClient) ListCollaborators(ctx context.Context, in *ListClientCollaboratorsRequest, opts ...grpc.CallOption) (*Collaborators, error) {
	out := new(Collaborators)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ClientAccess/ListCollaborators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientAccessServer is the server API for ClientAccess service.
type ClientAccessServer interface {
	ListRights(context.Context, *ClientIdentifiers) (*Rights, error)
	// Set the rights of a collaborator on the OAuth client. Users or organizations
	// are considered to be a collaborator if they have at least one right on the
	// OAuth client.
	SetCollaborator(context.Context, *SetClientCollaboratorRequest) (*types.Empty, error)
	ListCollaborators(context.Context, *ListClientCollaboratorsRequest) (*Collaborators, error)
}

func RegisterClientAccessServer(s *grpc.Server, srv ClientAccessServer) {
	s.RegisterService(&_ClientAccess_serviceDesc, srv)
}

func _ClientAccess_ListRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientAccessServer).ListRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ClientAccess/ListRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientAccessServer).ListRights(ctx, req.(*ClientIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientAccess_SetCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetClientCollaboratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientAccessServer).SetCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ClientAccess/SetCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientAccessServer).SetCollaborator(ctx, req.(*SetClientCollaboratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientAccess_ListCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClientCollaboratorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientAccessServer).ListCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ClientAccess/ListCollaborators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientAccessServer).ListCollaborators(ctx, req.(*ListClientCollaboratorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClientAccess_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.ClientAccess",
	HandlerType: (*ClientAccessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRights",
			Handler:    _ClientAccess_ListRights_Handler,
		},
		{
			MethodName: "SetCollaborator",
			Handler:    _ClientAccess_SetCollaborator_Handler,
		},
		{
			MethodName: "ListCollaborators",
			Handler:    _ClientAccess_ListCollaborators_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/client_services.proto",
}
