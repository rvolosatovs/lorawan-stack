// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/client_services.proto

package ttnpb // import "go.thethings.network/lorawan-stack/pkg/ttnpb"

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import types "github.com/gogo/protobuf/types"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import context "context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ClientRegistry service

type ClientRegistryClient interface {
	// Create a new OAuth client. This also sets the current user as first collaborator
	// with all possible rights. When including organization identifiers, this instead
	// grants those rights to the given organization.
	CreateClient(ctx context.Context, in *CreateClientRequest, opts ...grpc.CallOption) (*Client, error)
	// Get the OAuth client with the given identifiers, selecting the fields given
	// by the field mask. The method may return more or less fields, depending on
	// the rights of the caller.
	GetClient(ctx context.Context, in *GetClientRequest, opts ...grpc.CallOption) (*Client, error)
	// List OAuth clients. See request message for details.
	ListClients(ctx context.Context, in *ListClientsRequest, opts ...grpc.CallOption) (*Clients, error)
	UpdateClient(ctx context.Context, in *UpdateClientRequest, opts ...grpc.CallOption) (*Client, error)
	DeleteClient(ctx context.Context, in *ClientIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
}

type clientRegistryClient struct {
	cc *grpc.ClientConn
}

func NewClientRegistryClient(cc *grpc.ClientConn) ClientRegistryClient {
	return &clientRegistryClient{cc}
}

func (c *clientRegistryClient) CreateClient(ctx context.Context, in *CreateClientRequest, opts ...grpc.CallOption) (*Client, error) {
	out := new(Client)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ClientRegistry/CreateClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientRegistryClient) GetClient(ctx context.Context, in *GetClientRequest, opts ...grpc.CallOption) (*Client, error) {
	out := new(Client)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ClientRegistry/GetClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientRegistryClient) ListClients(ctx context.Context, in *ListClientsRequest, opts ...grpc.CallOption) (*Clients, error) {
	out := new(Clients)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ClientRegistry/ListClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientRegistryClient) UpdateClient(ctx context.Context, in *UpdateClientRequest, opts ...grpc.CallOption) (*Client, error) {
	out := new(Client)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ClientRegistry/UpdateClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientRegistryClient) DeleteClient(ctx context.Context, in *ClientIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ClientRegistry/DeleteClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ClientRegistry service

type ClientRegistryServer interface {
	// Create a new OAuth client. This also sets the current user as first collaborator
	// with all possible rights. When including organization identifiers, this instead
	// grants those rights to the given organization.
	CreateClient(context.Context, *CreateClientRequest) (*Client, error)
	// Get the OAuth client with the given identifiers, selecting the fields given
	// by the field mask. The method may return more or less fields, depending on
	// the rights of the caller.
	GetClient(context.Context, *GetClientRequest) (*Client, error)
	// List OAuth clients. See request message for details.
	ListClients(context.Context, *ListClientsRequest) (*Clients, error)
	UpdateClient(context.Context, *UpdateClientRequest) (*Client, error)
	DeleteClient(context.Context, *ClientIdentifiers) (*types.Empty, error)
}

func RegisterClientRegistryServer(s *grpc.Server, srv ClientRegistryServer) {
	s.RegisterService(&_ClientRegistry_serviceDesc, srv)
}

func _ClientRegistry_CreateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRegistryServer).CreateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ClientRegistry/CreateClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRegistryServer).CreateClient(ctx, req.(*CreateClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientRegistry_GetClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRegistryServer).GetClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ClientRegistry/GetClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRegistryServer).GetClient(ctx, req.(*GetClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientRegistry_ListClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRegistryServer).ListClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ClientRegistry/ListClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRegistryServer).ListClients(ctx, req.(*ListClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientRegistry_UpdateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRegistryServer).UpdateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ClientRegistry/UpdateClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRegistryServer).UpdateClient(ctx, req.(*UpdateClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientRegistry_DeleteClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRegistryServer).DeleteClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ClientRegistry/DeleteClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRegistryServer).DeleteClient(ctx, req.(*ClientIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClientRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.ClientRegistry",
	HandlerType: (*ClientRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateClient",
			Handler:    _ClientRegistry_CreateClient_Handler,
		},
		{
			MethodName: "GetClient",
			Handler:    _ClientRegistry_GetClient_Handler,
		},
		{
			MethodName: "ListClients",
			Handler:    _ClientRegistry_ListClients_Handler,
		},
		{
			MethodName: "UpdateClient",
			Handler:    _ClientRegistry_UpdateClient_Handler,
		},
		{
			MethodName: "DeleteClient",
			Handler:    _ClientRegistry_DeleteClient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/client_services.proto",
}

// Client API for ClientAccess service

type ClientAccessClient interface {
	ListClientRights(ctx context.Context, in *ClientIdentifiers, opts ...grpc.CallOption) (*Rights, error)
	// Set the rights of a collaborator on the OAuth client. Users or organizations
	// are considered to be a collaborator if they have at least one right on the
	// OAuth client.
	SetClientCollaborator(ctx context.Context, in *SetClientCollaboratorRequest, opts ...grpc.CallOption) (*types.Empty, error)
	ListClientCollaborators(ctx context.Context, in *ClientIdentifiers, opts ...grpc.CallOption) (*Collaborators, error)
}

type clientAccessClient struct {
	cc *grpc.ClientConn
}

func NewClientAccessClient(cc *grpc.ClientConn) ClientAccessClient {
	return &clientAccessClient{cc}
}

func (c *clientAccessClient) ListClientRights(ctx context.Context, in *ClientIdentifiers, opts ...grpc.CallOption) (*Rights, error) {
	out := new(Rights)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ClientAccess/ListClientRights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientAccessClient) SetClientCollaborator(ctx context.Context, in *SetClientCollaboratorRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ClientAccess/SetClientCollaborator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientAccessClient) ListClientCollaborators(ctx context.Context, in *ClientIdentifiers, opts ...grpc.CallOption) (*Collaborators, error) {
	out := new(Collaborators)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ClientAccess/ListClientCollaborators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ClientAccess service

type ClientAccessServer interface {
	ListClientRights(context.Context, *ClientIdentifiers) (*Rights, error)
	// Set the rights of a collaborator on the OAuth client. Users or organizations
	// are considered to be a collaborator if they have at least one right on the
	// OAuth client.
	SetClientCollaborator(context.Context, *SetClientCollaboratorRequest) (*types.Empty, error)
	ListClientCollaborators(context.Context, *ClientIdentifiers) (*Collaborators, error)
}

func RegisterClientAccessServer(s *grpc.Server, srv ClientAccessServer) {
	s.RegisterService(&_ClientAccess_serviceDesc, srv)
}

func _ClientAccess_ListClientRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientAccessServer).ListClientRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ClientAccess/ListClientRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientAccessServer).ListClientRights(ctx, req.(*ClientIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientAccess_SetClientCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetClientCollaboratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientAccessServer).SetClientCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ClientAccess/SetClientCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientAccessServer).SetClientCollaborator(ctx, req.(*SetClientCollaboratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientAccess_ListClientCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientAccessServer).ListClientCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ClientAccess/ListClientCollaborators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientAccessServer).ListClientCollaborators(ctx, req.(*ClientIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClientAccess_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.ClientAccess",
	HandlerType: (*ClientAccessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListClientRights",
			Handler:    _ClientAccess_ListClientRights_Handler,
		},
		{
			MethodName: "SetClientCollaborator",
			Handler:    _ClientAccess_SetClientCollaborator_Handler,
		},
		{
			MethodName: "ListClientCollaborators",
			Handler:    _ClientAccess_ListClientCollaborators_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/client_services.proto",
}

func init() {
	proto.RegisterFile("lorawan-stack/api/client_services.proto", fileDescriptor_client_services_15d61dd13509c454)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/client_services.proto", fileDescriptor_client_services_15d61dd13509c454)
}

var fileDescriptor_client_services_15d61dd13509c454 = []byte{
	// 675 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x3d, 0x4c, 0x14, 0x41,
	0x14, 0x9e, 0xd1, 0x68, 0x74, 0xbd, 0x10, 0x33, 0x51, 0x48, 0x16, 0x78, 0xca, 0x62, 0x42, 0x42,
	0x60, 0xd6, 0x40, 0xa3, 0x16, 0x26, 0x8a, 0xbf, 0x89, 0x36, 0x10, 0x9b, 0x6b, 0xc8, 0xde, 0x31,
	0xec, 0x4d, 0x38, 0x76, 0xce, 0x9d, 0x39, 0x08, 0x12, 0x12, 0x62, 0xa1, 0x34, 0x26, 0x26, 0x16,
	0x5a, 0x12, 0x0b, 0x43, 0x49, 0x49, 0x49, 0x49, 0x49, 0x62, 0x43, 0xac, 0xd8, 0x59, 0x0b, 0x4a,
	0x4a, 0x4a, 0x73, 0x73, 0x7b, 0x77, 0x7b, 0x77, 0x8b, 0x5c, 0x37, 0xb3, 0xdf, 0x9b, 0xef, 0xfb,
	0xee, 0x7b, 0xef, 0x9d, 0x35, 0x56, 0x16, 0xa1, 0xb7, 0xea, 0x05, 0x93, 0x52, 0x79, 0xc5, 0x25,
	0xd7, 0xab, 0x70, 0xb7, 0x58, 0xe6, 0x2c, 0x50, 0xf3, 0x92, 0x85, 0x2b, 0xbc, 0xc8, 0x24, 0xad,
	0x84, 0x42, 0x09, 0xd2, 0xa7, 0x54, 0x40, 0x93, 0x62, 0xba, 0x32, 0x6d, 0x4f, 0xfa, 0x5c, 0x95,
	0xaa, 0x05, 0x5a, 0x14, 0xcb, 0xae, 0x2f, 0x7c, 0xe1, 0x9a, 0xb2, 0x42, 0x75, 0xd1, 0xdc, 0xcc,
	0xc5, 0x9c, 0xea, 0xcf, 0xed, 0x21, 0x5f, 0x08, 0xbf, 0xcc, 0x8c, 0x80, 0x17, 0x04, 0x42, 0x79,
	0x8a, 0x8b, 0x20, 0x21, 0xb7, 0x07, 0x13, 0xb4, 0xc9, 0xc1, 0x96, 0x2b, 0x6a, 0x2d, 0x01, 0xe1,
	0x3c, 0x8b, 0x09, 0x3e, 0xda, 0x8d, 0xf3, 0x05, 0x16, 0x28, 0xbe, 0xc8, 0x59, 0x28, 0xcf, 0x27,
	0x09, 0xb9, 0x5f, 0x52, 0x09, 0x3e, 0xa5, 0xaf, 0x58, 0x7d, 0x33, 0x86, 0x75, 0x96, 0xf9, 0x5c,
	0xaa, 0x70, 0x8d, 0x6c, 0x63, 0x2b, 0x37, 0x13, 0x32, 0x4f, 0xb1, 0x3a, 0x40, 0x46, 0x69, 0x7b,
	0x06, 0x34, 0x8d, 0xce, 0xb2, 0xf7, 0x55, 0x26, 0x95, 0xdd, 0xdf, 0x55, 0x64, 0x60, 0x67, 0xee,
	0xe3, 0xef, 0xbf, 0xdf, 0x2e, 0xbd, 0x75, 0xae, 0x25, 0xe6, 0xe5, 0x23, 0x3c, 0x9e, 0x7f, 0xec,
	0x3c, 0x74, 0x45, 0xe8, 0x7b, 0x01, 0xff, 0x50, 0xcf, 0xc3, 0x5d, 0x4f, 0x5f, 0xe7, 0xf9, 0x82,
	0xa4, 0x1d, 0x1f, 0x36, 0x52, 0xef, 0x49, 0x60, 0x5d, 0x7f, 0xc9, 0x54, 0x62, 0xef, 0x6e, 0xa7,
	0x72, 0x13, 0xba, 0xc8, 0xdb, 0x98, 0xf1, 0x36, 0x42, 0xee, 0x34, 0xb8, 0xdd, 0xf5, 0x64, 0x08,
	0x6a, 0x06, 0x9a, 0xc7, 0x0d, 0xf2, 0x07, 0x5b, 0x37, 0xde, 0x70, 0x99, 0xd0, 0x4a, 0xe2, 0x74,
	0x12, 0xa6, 0xc0, 0x86, 0xe8, 0x40, 0xb6, 0xa8, 0x74, 0xbe, 0x60, 0x23, 0xfb, 0x09, 0x93, 0x66,
	0x26, 0xf9, 0xfb, 0x84, 0xba, 0x55, 0xc9, 0xc2, 0x9a, 0x03, 0x51, 0x2e, 0x7b, 0x05, 0x11, 0x7a,
	0x4a, 0x84, 0xb4, 0xf6, 0xcd, 0x98, 0x49, 0x0e, 0xcd, 0x14, 0xf2, 0xaf, 0xc8, 0x8b, 0xce, 0x08,
	0xdb, 0x5e, 0xf6, 0x9c, 0x27, 0x59, 0xb5, 0x72, 0xef, 0x2a, 0x0b, 0xff, 0x69, 0x77, 0x1a, 0xbd,
	0x28, 0xd2, 0x71, 0xf3, 0xdb, 0xee, 0xd9, 0x5d, 0x91, 0xd2, 0xf6, 0x48, 0x6b, 0x5d, 0xf4, 0xad,
	0xdc, 0x33, 0x56, 0x66, 0x4d, 0xe1, 0x91, 0x6c, 0xce, 0xd7, 0xad, 0xa1, 0xb6, 0xfb, 0x69, 0x7d,
	0x63, 0x68, 0x63, 0x63, 0xe8, 0xf3, 0xda, 0xc6, 0x38, 0x43, 0x46, 0xb6, 0x7f, 0xfc, 0x56, 0x46,
	0x27, 0x37, 0xa6, 0x7e, 0x5d, 0xb6, 0x72, 0x75, 0xae, 0x27, 0xc5, 0x22, 0x93, 0x92, 0x84, 0xd6,
	0xcd, 0x56, 0xc7, 0x66, 0xcd, 0x3e, 0xf4, 0xa6, 0xde, 0x51, 0x52, 0x7f, 0xea, 0x8c, 0x1a, 0xf5,
	0x61, 0x32, 0x98, 0xa5, 0x9e, 0xec, 0x1b, 0xf9, 0x8e, 0xad, 0xdb, 0x73, 0x8d, 0xc9, 0x9c, 0x49,
	0xb5, 0x8a, 0x4c, 0x74, 0xd2, 0x66, 0x96, 0xb5, 0x92, 0xcf, 0x8e, 0xe0, 0x81, 0x31, 0x31, 0x65,
	0x4f, 0x5e, 0x30, 0xcc, 0x6e, 0x7a, 0x4c, 0xcc, 0x36, 0x7d, 0xc6, 0xd6, 0x40, 0x2b, 0x8e, 0xb4,
	0x66, 0x4f, 0xa9, 0x0c, 0x77, 0x95, 0xa4, 0x19, 0x1a, 0x13, 0x41, 0x9c, 0xcc, 0x70, 0xda, 0xcc,
	0x3c, 0xfd, 0x89, 0x0f, 0x22, 0xc0, 0x87, 0x11, 0xe0, 0xa3, 0x08, 0xd0, 0x71, 0x04, 0xe8, 0x24,
	0x02, 0x74, 0x1a, 0x01, 0x3a, 0x8b, 0x00, 0x6f, 0x6a, 0xc0, 0x5b, 0x1a, 0xd0, 0x8e, 0x06, 0xbc,
	0xab, 0x01, 0xed, 0x69, 0x40, 0xfb, 0x1a, 0xd0, 0x81, 0x06, 0x7c, 0xa8, 0x01, 0x1f, 0x69, 0x40,
	0xc7, 0x1a, 0xf0, 0x89, 0x06, 0x74, 0xaa, 0x01, 0x9f, 0x69, 0x40, 0x9b, 0x31, 0xa0, 0xad, 0x18,
	0xf0, 0xd7, 0x18, 0xd0, 0x8f, 0x18, 0xf0, 0x76, 0x0c, 0x68, 0x27, 0x06, 0xb4, 0x1b, 0x03, 0xde,
	0x8b, 0x01, 0xef, 0xc7, 0x80, 0xf3, 0x13, 0xbe, 0xa0, 0xaa, 0xc4, 0x54, 0x89, 0x07, 0xbe, 0xa4,
	0x01, 0x53, 0xab, 0x22, 0x5c, 0x72, 0xdb, 0xff, 0x39, 0x2b, 0x4b, 0xbe, 0xab, 0x54, 0x50, 0x29,
	0x14, 0xae, 0x9a, 0xe0, 0xa7, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0xd9, 0x7b, 0xe3, 0x8a, 0x43,
	0x06, 0x00, 0x00,
}
