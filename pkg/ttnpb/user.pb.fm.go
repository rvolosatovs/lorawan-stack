// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import fmt "fmt"

var _UserFieldPaths = [...]string{
	"admin",
	"attributes",
	"contact_info",
	"created_at",
	"description",
	"ids",
	"ids.email",
	"ids.user_id",
	"name",
	"password",
	"password_updated_at",
	"primary_email_address",
	"primary_email_address_validated_at",
	"profile_picture",
	"profile_picture.embedded",
	"profile_picture.embedded.data",
	"profile_picture.embedded.mime_type",
	"profile_picture.sizes",
	"require_password_update",
	"state",
	"temporary_password",
	"temporary_password_created_at",
	"temporary_password_expires_at",
	"updated_at",
}

func (*User) FieldMaskPaths() []string {
	ret := make([]string, len(_UserFieldPaths))
	copy(ret, _UserFieldPaths[:])
	return ret
}

func (dst *User) SetFields(src *User, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "admin":
			dst.Admin = src.Admin
		case "attributes":
			dst.Attributes = src.Attributes
		case "contact_info":
			dst.ContactInfo = src.ContactInfo
		case "created_at":
			dst.CreatedAt = src.CreatedAt
		case "description":
			dst.Description = src.Description
		case "ids":
			dst.UserIdentifiers = src.UserIdentifiers
		case "ids.email":
			dst.UserIdentifiers.SetFields(&src.UserIdentifiers, _pathsWithoutPrefix("ids", paths)...)
		case "ids.user_id":
			dst.UserIdentifiers.SetFields(&src.UserIdentifiers, _pathsWithoutPrefix("ids", paths)...)
		case "name":
			dst.Name = src.Name
		case "password":
			dst.Password = src.Password
		case "password_updated_at":
			dst.PasswordUpdatedAt = src.PasswordUpdatedAt
		case "primary_email_address":
			dst.PrimaryEmailAddress = src.PrimaryEmailAddress
		case "primary_email_address_validated_at":
			dst.PrimaryEmailAddressValidatedAt = src.PrimaryEmailAddressValidatedAt
		case "profile_picture":
			dst.ProfilePicture = src.ProfilePicture
		case "profile_picture.embedded":
			if dst.ProfilePicture == nil {
				dst.ProfilePicture = &Picture{}
			}
			dst.ProfilePicture.SetFields(src.ProfilePicture, _pathsWithoutPrefix("profile_picture", paths)...)
		case "profile_picture.embedded.data":
			if dst.ProfilePicture == nil {
				dst.ProfilePicture = &Picture{}
			}
			dst.ProfilePicture.SetFields(src.ProfilePicture, _pathsWithoutPrefix("profile_picture", paths)...)
		case "profile_picture.embedded.mime_type":
			if dst.ProfilePicture == nil {
				dst.ProfilePicture = &Picture{}
			}
			dst.ProfilePicture.SetFields(src.ProfilePicture, _pathsWithoutPrefix("profile_picture", paths)...)
		case "profile_picture.sizes":
			if dst.ProfilePicture == nil {
				dst.ProfilePicture = &Picture{}
			}
			dst.ProfilePicture.SetFields(src.ProfilePicture, _pathsWithoutPrefix("profile_picture", paths)...)
		case "require_password_update":
			dst.RequirePasswordUpdate = src.RequirePasswordUpdate
		case "state":
			dst.State = src.State
		case "temporary_password":
			dst.TemporaryPassword = src.TemporaryPassword
		case "temporary_password_created_at":
			dst.TemporaryPasswordCreatedAt = src.TemporaryPasswordCreatedAt
		case "temporary_password_expires_at":
			dst.TemporaryPasswordExpiresAt = src.TemporaryPasswordExpiresAt
		case "updated_at":
			dst.UpdatedAt = src.UpdatedAt
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _PictureFieldPaths = [...]string{
	"embedded",
	"embedded.data",
	"embedded.mime_type",
	"sizes",
}

func (*Picture) FieldMaskPaths() []string {
	ret := make([]string, len(_PictureFieldPaths))
	copy(ret, _PictureFieldPaths[:])
	return ret
}

func (dst *Picture) SetFields(src *Picture, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "embedded":
			dst.Embedded = src.Embedded
		case "embedded.data":
			if dst.Embedded == nil {
				dst.Embedded = &Picture_Embedded{}
			}
			dst.Embedded.SetFields(src.Embedded, _pathsWithoutPrefix("embedded", paths)...)
		case "embedded.mime_type":
			if dst.Embedded == nil {
				dst.Embedded = &Picture_Embedded{}
			}
			dst.Embedded.SetFields(src.Embedded, _pathsWithoutPrefix("embedded", paths)...)
		case "sizes":
			dst.Sizes = src.Sizes
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _Picture_EmbeddedFieldPaths = [...]string{
	"data",
	"mime_type",
}

func (*Picture_Embedded) FieldMaskPaths() []string {
	ret := make([]string, len(_Picture_EmbeddedFieldPaths))
	copy(ret, _Picture_EmbeddedFieldPaths[:])
	return ret
}

func (dst *Picture_Embedded) SetFields(src *Picture_Embedded, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "data":
			dst.Data = src.Data
		case "mime_type":
			dst.MimeType = src.MimeType
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _UsersFieldPaths = [...]string{
	"users",
}

func (*Users) FieldMaskPaths() []string {
	ret := make([]string, len(_UsersFieldPaths))
	copy(ret, _UsersFieldPaths[:])
	return ret
}

func (dst *Users) SetFields(src *Users, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "users":
			dst.Users = src.Users
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _GetUserRequestFieldPaths = [...]string{
	"field_mask",
	"user_ids",
	"user_ids.email",
	"user_ids.user_id",
}

func (*GetUserRequest) FieldMaskPaths() []string {
	ret := make([]string, len(_GetUserRequestFieldPaths))
	copy(ret, _GetUserRequestFieldPaths[:])
	return ret
}

func (dst *GetUserRequest) SetFields(src *GetUserRequest, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "field_mask":
			dst.FieldMask = src.FieldMask
		case "user_ids":
			dst.UserIdentifiers = src.UserIdentifiers
		case "user_ids.email":
			dst.UserIdentifiers.SetFields(&src.UserIdentifiers, _pathsWithoutPrefix("user_ids", paths)...)
		case "user_ids.user_id":
			dst.UserIdentifiers.SetFields(&src.UserIdentifiers, _pathsWithoutPrefix("user_ids", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _CreateUserRequestFieldPaths = [...]string{
	"invitation_token",
	"user",
	"user.admin",
	"user.attributes",
	"user.contact_info",
	"user.created_at",
	"user.description",
	"user.ids",
	"user.ids.email",
	"user.ids.user_id",
	"user.name",
	"user.password",
	"user.password_updated_at",
	"user.primary_email_address",
	"user.primary_email_address_validated_at",
	"user.profile_picture",
	"user.profile_picture.embedded",
	"user.profile_picture.embedded.data",
	"user.profile_picture.embedded.mime_type",
	"user.profile_picture.sizes",
	"user.require_password_update",
	"user.state",
	"user.temporary_password",
	"user.temporary_password_created_at",
	"user.temporary_password_expires_at",
	"user.updated_at",
}

func (*CreateUserRequest) FieldMaskPaths() []string {
	ret := make([]string, len(_CreateUserRequestFieldPaths))
	copy(ret, _CreateUserRequestFieldPaths[:])
	return ret
}

func (dst *CreateUserRequest) SetFields(src *CreateUserRequest, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "invitation_token":
			dst.InvitationToken = src.InvitationToken
		case "user":
			dst.User = src.User
		case "user.admin":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.attributes":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.contact_info":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.created_at":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.description":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.ids":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.ids.email":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.ids.user_id":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.name":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.password":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.password_updated_at":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.primary_email_address":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.primary_email_address_validated_at":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.profile_picture":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.profile_picture.embedded":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.profile_picture.embedded.data":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.profile_picture.embedded.mime_type":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.profile_picture.sizes":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.require_password_update":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.state":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.temporary_password":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.temporary_password_created_at":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.temporary_password_expires_at":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.updated_at":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _UpdateUserRequestFieldPaths = [...]string{
	"field_mask",
	"user",
	"user.admin",
	"user.attributes",
	"user.contact_info",
	"user.created_at",
	"user.description",
	"user.ids",
	"user.ids.email",
	"user.ids.user_id",
	"user.name",
	"user.password",
	"user.password_updated_at",
	"user.primary_email_address",
	"user.primary_email_address_validated_at",
	"user.profile_picture",
	"user.profile_picture.embedded",
	"user.profile_picture.embedded.data",
	"user.profile_picture.embedded.mime_type",
	"user.profile_picture.sizes",
	"user.require_password_update",
	"user.state",
	"user.temporary_password",
	"user.temporary_password_created_at",
	"user.temporary_password_expires_at",
	"user.updated_at",
}

func (*UpdateUserRequest) FieldMaskPaths() []string {
	ret := make([]string, len(_UpdateUserRequestFieldPaths))
	copy(ret, _UpdateUserRequestFieldPaths[:])
	return ret
}

func (dst *UpdateUserRequest) SetFields(src *UpdateUserRequest, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "field_mask":
			dst.FieldMask = src.FieldMask
		case "user":
			dst.User = src.User
		case "user.admin":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.attributes":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.contact_info":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.created_at":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.description":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.ids":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.ids.email":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.ids.user_id":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.name":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.password":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.password_updated_at":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.primary_email_address":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.primary_email_address_validated_at":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.profile_picture":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.profile_picture.embedded":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.profile_picture.embedded.data":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.profile_picture.embedded.mime_type":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.profile_picture.sizes":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.require_password_update":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.state":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.temporary_password":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.temporary_password_created_at":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.temporary_password_expires_at":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		case "user.updated_at":
			dst.User.SetFields(&src.User, _pathsWithoutPrefix("user", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _CreateTemporaryPasswordRequestFieldPaths = [...]string{
	"user_ids",
	"user_ids.email",
	"user_ids.user_id",
}

func (*CreateTemporaryPasswordRequest) FieldMaskPaths() []string {
	ret := make([]string, len(_CreateTemporaryPasswordRequestFieldPaths))
	copy(ret, _CreateTemporaryPasswordRequestFieldPaths[:])
	return ret
}

func (dst *CreateTemporaryPasswordRequest) SetFields(src *CreateTemporaryPasswordRequest, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "user_ids":
			dst.UserIdentifiers = src.UserIdentifiers
		case "user_ids.email":
			dst.UserIdentifiers.SetFields(&src.UserIdentifiers, _pathsWithoutPrefix("user_ids", paths)...)
		case "user_ids.user_id":
			dst.UserIdentifiers.SetFields(&src.UserIdentifiers, _pathsWithoutPrefix("user_ids", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _UpdateUserPasswordRequestFieldPaths = [...]string{
	"new",
	"old",
	"user_ids",
	"user_ids.email",
	"user_ids.user_id",
}

func (*UpdateUserPasswordRequest) FieldMaskPaths() []string {
	ret := make([]string, len(_UpdateUserPasswordRequestFieldPaths))
	copy(ret, _UpdateUserPasswordRequestFieldPaths[:])
	return ret
}

func (dst *UpdateUserPasswordRequest) SetFields(src *UpdateUserPasswordRequest, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "new":
			dst.New = src.New
		case "old":
			dst.Old = src.Old
		case "user_ids":
			dst.UserIdentifiers = src.UserIdentifiers
		case "user_ids.email":
			dst.UserIdentifiers.SetFields(&src.UserIdentifiers, _pathsWithoutPrefix("user_ids", paths)...)
		case "user_ids.user_id":
			dst.UserIdentifiers.SetFields(&src.UserIdentifiers, _pathsWithoutPrefix("user_ids", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _CreateUserAPIKeyRequestFieldPaths = [...]string{
	"name",
	"rights",
	"user_ids",
	"user_ids.email",
	"user_ids.user_id",
}

func (*CreateUserAPIKeyRequest) FieldMaskPaths() []string {
	ret := make([]string, len(_CreateUserAPIKeyRequestFieldPaths))
	copy(ret, _CreateUserAPIKeyRequestFieldPaths[:])
	return ret
}

func (dst *CreateUserAPIKeyRequest) SetFields(src *CreateUserAPIKeyRequest, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "name":
			dst.Name = src.Name
		case "rights":
			dst.Rights = src.Rights
		case "user_ids":
			dst.UserIdentifiers = src.UserIdentifiers
		case "user_ids.email":
			dst.UserIdentifiers.SetFields(&src.UserIdentifiers, _pathsWithoutPrefix("user_ids", paths)...)
		case "user_ids.user_id":
			dst.UserIdentifiers.SetFields(&src.UserIdentifiers, _pathsWithoutPrefix("user_ids", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _UpdateUserAPIKeyRequestFieldPaths = [...]string{
	"api_key",
	"api_key.id",
	"api_key.key",
	"api_key.name",
	"api_key.rights",
	"user_ids",
	"user_ids.email",
	"user_ids.user_id",
}

func (*UpdateUserAPIKeyRequest) FieldMaskPaths() []string {
	ret := make([]string, len(_UpdateUserAPIKeyRequestFieldPaths))
	copy(ret, _UpdateUserAPIKeyRequestFieldPaths[:])
	return ret
}

func (dst *UpdateUserAPIKeyRequest) SetFields(src *UpdateUserAPIKeyRequest, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "api_key":
			dst.APIKey = src.APIKey
		case "api_key.id":
			dst.APIKey.SetFields(&src.APIKey, _pathsWithoutPrefix("api_key", paths)...)
		case "api_key.key":
			dst.APIKey.SetFields(&src.APIKey, _pathsWithoutPrefix("api_key", paths)...)
		case "api_key.name":
			dst.APIKey.SetFields(&src.APIKey, _pathsWithoutPrefix("api_key", paths)...)
		case "api_key.rights":
			dst.APIKey.SetFields(&src.APIKey, _pathsWithoutPrefix("api_key", paths)...)
		case "user_ids":
			dst.UserIdentifiers = src.UserIdentifiers
		case "user_ids.email":
			dst.UserIdentifiers.SetFields(&src.UserIdentifiers, _pathsWithoutPrefix("user_ids", paths)...)
		case "user_ids.user_id":
			dst.UserIdentifiers.SetFields(&src.UserIdentifiers, _pathsWithoutPrefix("user_ids", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _InvitationFieldPaths = [...]string{
	"accepted_at",
	"accepted_by",
	"accepted_by.email",
	"accepted_by.user_id",
	"created_at",
	"email",
	"expires_at",
	"token",
	"updated_at",
}

func (*Invitation) FieldMaskPaths() []string {
	ret := make([]string, len(_InvitationFieldPaths))
	copy(ret, _InvitationFieldPaths[:])
	return ret
}

func (dst *Invitation) SetFields(src *Invitation, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "accepted_at":
			dst.AcceptedAt = src.AcceptedAt
		case "accepted_by":
			dst.AcceptedBy = src.AcceptedBy
		case "accepted_by.email":
			if dst.AcceptedBy == nil {
				dst.AcceptedBy = &UserIdentifiers{}
			}
			dst.AcceptedBy.SetFields(src.AcceptedBy, _pathsWithoutPrefix("accepted_by", paths)...)
		case "accepted_by.user_id":
			if dst.AcceptedBy == nil {
				dst.AcceptedBy = &UserIdentifiers{}
			}
			dst.AcceptedBy.SetFields(src.AcceptedBy, _pathsWithoutPrefix("accepted_by", paths)...)
		case "created_at":
			dst.CreatedAt = src.CreatedAt
		case "email":
			dst.Email = src.Email
		case "expires_at":
			dst.ExpiresAt = src.ExpiresAt
		case "token":
			dst.Token = src.Token
		case "updated_at":
			dst.UpdatedAt = src.UpdatedAt
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _InvitationsFieldPaths = [...]string{
	"invitations",
}

func (*Invitations) FieldMaskPaths() []string {
	ret := make([]string, len(_InvitationsFieldPaths))
	copy(ret, _InvitationsFieldPaths[:])
	return ret
}

func (dst *Invitations) SetFields(src *Invitations, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "invitations":
			dst.Invitations = src.Invitations
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _SendInvitationRequestFieldPaths = [...]string{
	"email",
}

func (*SendInvitationRequest) FieldMaskPaths() []string {
	ret := make([]string, len(_SendInvitationRequestFieldPaths))
	copy(ret, _SendInvitationRequestFieldPaths[:])
	return ret
}

func (dst *SendInvitationRequest) SetFields(src *SendInvitationRequest, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "email":
			dst.Email = src.Email
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _DeleteInvitationRequestFieldPaths = [...]string{
	"email",
}

func (*DeleteInvitationRequest) FieldMaskPaths() []string {
	ret := make([]string, len(_DeleteInvitationRequestFieldPaths))
	copy(ret, _DeleteInvitationRequestFieldPaths[:])
	return ret
}

func (dst *DeleteInvitationRequest) SetFields(src *DeleteInvitationRequest, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "email":
			dst.Email = src.Email
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _UserSessionIdentifiersFieldPaths = [...]string{
	"session_id",
	"user_ids",
	"user_ids.email",
	"user_ids.user_id",
}

func (*UserSessionIdentifiers) FieldMaskPaths() []string {
	ret := make([]string, len(_UserSessionIdentifiersFieldPaths))
	copy(ret, _UserSessionIdentifiersFieldPaths[:])
	return ret
}

func (dst *UserSessionIdentifiers) SetFields(src *UserSessionIdentifiers, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "session_id":
			dst.SessionID = src.SessionID
		case "user_ids":
			dst.UserIdentifiers = src.UserIdentifiers
		case "user_ids.email":
			dst.UserIdentifiers.SetFields(&src.UserIdentifiers, _pathsWithoutPrefix("user_ids", paths)...)
		case "user_ids.user_id":
			dst.UserIdentifiers.SetFields(&src.UserIdentifiers, _pathsWithoutPrefix("user_ids", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _UserSessionFieldPaths = [...]string{
	"created_at",
	"expires_at",
	"ids",
	"ids.session_id",
	"ids.user_ids",
	"ids.user_ids.email",
	"ids.user_ids.user_id",
	"updated_at",
}

func (*UserSession) FieldMaskPaths() []string {
	ret := make([]string, len(_UserSessionFieldPaths))
	copy(ret, _UserSessionFieldPaths[:])
	return ret
}

func (dst *UserSession) SetFields(src *UserSession, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "created_at":
			dst.CreatedAt = src.CreatedAt
		case "expires_at":
			dst.ExpiresAt = src.ExpiresAt
		case "ids":
			dst.UserSessionIdentifiers = src.UserSessionIdentifiers
		case "ids.session_id":
			dst.UserSessionIdentifiers.SetFields(&src.UserSessionIdentifiers, _pathsWithoutPrefix("ids", paths)...)
		case "ids.user_ids":
			dst.UserSessionIdentifiers.SetFields(&src.UserSessionIdentifiers, _pathsWithoutPrefix("ids", paths)...)
		case "ids.user_ids.email":
			dst.UserSessionIdentifiers.SetFields(&src.UserSessionIdentifiers, _pathsWithoutPrefix("ids", paths)...)
		case "ids.user_ids.user_id":
			dst.UserSessionIdentifiers.SetFields(&src.UserSessionIdentifiers, _pathsWithoutPrefix("ids", paths)...)
		case "updated_at":
			dst.UpdatedAt = src.UpdatedAt
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _UserSessionsFieldPaths = [...]string{
	"sessions",
}

func (*UserSessions) FieldMaskPaths() []string {
	ret := make([]string, len(_UserSessionsFieldPaths))
	copy(ret, _UserSessionsFieldPaths[:])
	return ret
}

func (dst *UserSessions) SetFields(src *UserSessions, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "sessions":
			dst.Sessions = src.Sessions
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _ListUserSessionsRequestFieldPaths = [...]string{
	"limit",
	"order",
	"page",
	"user_ids",
	"user_ids.email",
	"user_ids.user_id",
}

func (*ListUserSessionsRequest) FieldMaskPaths() []string {
	ret := make([]string, len(_ListUserSessionsRequestFieldPaths))
	copy(ret, _ListUserSessionsRequestFieldPaths[:])
	return ret
}

func (dst *ListUserSessionsRequest) SetFields(src *ListUserSessionsRequest, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "limit":
			dst.Limit = src.Limit
		case "order":
			dst.Order = src.Order
		case "page":
			dst.Page = src.Page
		case "user_ids":
			dst.UserIdentifiers = src.UserIdentifiers
		case "user_ids.email":
			dst.UserIdentifiers.SetFields(&src.UserIdentifiers, _pathsWithoutPrefix("user_ids", paths)...)
		case "user_ids.user_id":
			dst.UserIdentifiers.SetFields(&src.UserIdentifiers, _pathsWithoutPrefix("user_ids", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}
