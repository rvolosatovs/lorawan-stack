// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/TheThingsNetwork/ttn/api/end_device_services.proto

package ttnpb

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf2 "github.com/gogo/protobuf/types"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NsDeviceRegistry service

type NsDeviceRegistryClient interface {
	// ListDevices returns the devices that match the given identifiers
	ListDevices(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*EndDevices, error)
	// GetDevice returns the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	GetDevice(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*EndDevice, error)
	// SetDevice creates or updates the device
	SetDevice(ctx context.Context, in *EndDevice, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// DeleteDevice deletes the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	DeleteDevice(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
}

type nsDeviceRegistryClient struct {
	cc *grpc.ClientConn
}

func NewNsDeviceRegistryClient(cc *grpc.ClientConn) NsDeviceRegistryClient {
	return &nsDeviceRegistryClient{cc}
}

func (c *nsDeviceRegistryClient) ListDevices(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*EndDevices, error) {
	out := new(EndDevices)
	err := grpc.Invoke(ctx, "/ttn.v3.NsDeviceRegistry/ListDevices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nsDeviceRegistryClient) GetDevice(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*EndDevice, error) {
	out := new(EndDevice)
	err := grpc.Invoke(ctx, "/ttn.v3.NsDeviceRegistry/GetDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nsDeviceRegistryClient) SetDevice(ctx context.Context, in *EndDevice, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.NsDeviceRegistry/SetDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nsDeviceRegistryClient) DeleteDevice(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.NsDeviceRegistry/DeleteDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NsDeviceRegistry service

type NsDeviceRegistryServer interface {
	// ListDevices returns the devices that match the given identifiers
	ListDevices(context.Context, *EndDeviceIdentifiers) (*EndDevices, error)
	// GetDevice returns the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	GetDevice(context.Context, *EndDeviceIdentifiers) (*EndDevice, error)
	// SetDevice creates or updates the device
	SetDevice(context.Context, *EndDevice) (*google_protobuf2.Empty, error)
	// DeleteDevice deletes the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	DeleteDevice(context.Context, *EndDeviceIdentifiers) (*google_protobuf2.Empty, error)
}

func RegisterNsDeviceRegistryServer(s *grpc.Server, srv NsDeviceRegistryServer) {
	s.RegisterService(&_NsDeviceRegistry_serviceDesc, srv)
}

func _NsDeviceRegistry_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDeviceIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NsDeviceRegistryServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.NsDeviceRegistry/ListDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NsDeviceRegistryServer).ListDevices(ctx, req.(*EndDeviceIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _NsDeviceRegistry_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDeviceIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NsDeviceRegistryServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.NsDeviceRegistry/GetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NsDeviceRegistryServer).GetDevice(ctx, req.(*EndDeviceIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _NsDeviceRegistry_SetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NsDeviceRegistryServer).SetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.NsDeviceRegistry/SetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NsDeviceRegistryServer).SetDevice(ctx, req.(*EndDevice))
	}
	return interceptor(ctx, in, info, handler)
}

func _NsDeviceRegistry_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDeviceIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NsDeviceRegistryServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.NsDeviceRegistry/DeleteDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NsDeviceRegistryServer).DeleteDevice(ctx, req.(*EndDeviceIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _NsDeviceRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.v3.NsDeviceRegistry",
	HandlerType: (*NsDeviceRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDevices",
			Handler:    _NsDeviceRegistry_ListDevices_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _NsDeviceRegistry_GetDevice_Handler,
		},
		{
			MethodName: "SetDevice",
			Handler:    _NsDeviceRegistry_SetDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _NsDeviceRegistry_DeleteDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/ttn/api/end_device_services.proto",
}

// Client API for AsDeviceRegistry service

type AsDeviceRegistryClient interface {
	// ListDevices returns the devices that match the given identifiers
	ListDevices(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*EndDevices, error)
	// GetDevice returns the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	GetDevice(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*EndDevice, error)
	// SetDevice creates or updates the device
	SetDevice(ctx context.Context, in *EndDevice, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// DeleteDevice deletes the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	DeleteDevice(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
}

type asDeviceRegistryClient struct {
	cc *grpc.ClientConn
}

func NewAsDeviceRegistryClient(cc *grpc.ClientConn) AsDeviceRegistryClient {
	return &asDeviceRegistryClient{cc}
}

func (c *asDeviceRegistryClient) ListDevices(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*EndDevices, error) {
	out := new(EndDevices)
	err := grpc.Invoke(ctx, "/ttn.v3.AsDeviceRegistry/ListDevices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asDeviceRegistryClient) GetDevice(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*EndDevice, error) {
	out := new(EndDevice)
	err := grpc.Invoke(ctx, "/ttn.v3.AsDeviceRegistry/GetDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asDeviceRegistryClient) SetDevice(ctx context.Context, in *EndDevice, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.AsDeviceRegistry/SetDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asDeviceRegistryClient) DeleteDevice(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.AsDeviceRegistry/DeleteDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AsDeviceRegistry service

type AsDeviceRegistryServer interface {
	// ListDevices returns the devices that match the given identifiers
	ListDevices(context.Context, *EndDeviceIdentifiers) (*EndDevices, error)
	// GetDevice returns the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	GetDevice(context.Context, *EndDeviceIdentifiers) (*EndDevice, error)
	// SetDevice creates or updates the device
	SetDevice(context.Context, *EndDevice) (*google_protobuf2.Empty, error)
	// DeleteDevice deletes the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	DeleteDevice(context.Context, *EndDeviceIdentifiers) (*google_protobuf2.Empty, error)
}

func RegisterAsDeviceRegistryServer(s *grpc.Server, srv AsDeviceRegistryServer) {
	s.RegisterService(&_AsDeviceRegistry_serviceDesc, srv)
}

func _AsDeviceRegistry_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDeviceIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsDeviceRegistryServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.AsDeviceRegistry/ListDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsDeviceRegistryServer).ListDevices(ctx, req.(*EndDeviceIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsDeviceRegistry_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDeviceIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsDeviceRegistryServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.AsDeviceRegistry/GetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsDeviceRegistryServer).GetDevice(ctx, req.(*EndDeviceIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsDeviceRegistry_SetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsDeviceRegistryServer).SetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.AsDeviceRegistry/SetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsDeviceRegistryServer).SetDevice(ctx, req.(*EndDevice))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsDeviceRegistry_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDeviceIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsDeviceRegistryServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.AsDeviceRegistry/DeleteDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsDeviceRegistryServer).DeleteDevice(ctx, req.(*EndDeviceIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _AsDeviceRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.v3.AsDeviceRegistry",
	HandlerType: (*AsDeviceRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDevices",
			Handler:    _AsDeviceRegistry_ListDevices_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _AsDeviceRegistry_GetDevice_Handler,
		},
		{
			MethodName: "SetDevice",
			Handler:    _AsDeviceRegistry_SetDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _AsDeviceRegistry_DeleteDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/ttn/api/end_device_services.proto",
}

// Client API for JsDeviceRegistry service

type JsDeviceRegistryClient interface {
	// ListDevices returns the devices that match the given identifiers
	ListDevices(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*EndDevices, error)
	// GetDevice returns the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	GetDevice(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*EndDevice, error)
	// SetDevice creates or updates the device
	SetDevice(ctx context.Context, in *EndDevice, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// DeleteDevice deletes the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	DeleteDevice(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
}

type jsDeviceRegistryClient struct {
	cc *grpc.ClientConn
}

func NewJsDeviceRegistryClient(cc *grpc.ClientConn) JsDeviceRegistryClient {
	return &jsDeviceRegistryClient{cc}
}

func (c *jsDeviceRegistryClient) ListDevices(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*EndDevices, error) {
	out := new(EndDevices)
	err := grpc.Invoke(ctx, "/ttn.v3.JsDeviceRegistry/ListDevices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jsDeviceRegistryClient) GetDevice(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*EndDevice, error) {
	out := new(EndDevice)
	err := grpc.Invoke(ctx, "/ttn.v3.JsDeviceRegistry/GetDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jsDeviceRegistryClient) SetDevice(ctx context.Context, in *EndDevice, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.JsDeviceRegistry/SetDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jsDeviceRegistryClient) DeleteDevice(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.JsDeviceRegistry/DeleteDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for JsDeviceRegistry service

type JsDeviceRegistryServer interface {
	// ListDevices returns the devices that match the given identifiers
	ListDevices(context.Context, *EndDeviceIdentifiers) (*EndDevices, error)
	// GetDevice returns the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	GetDevice(context.Context, *EndDeviceIdentifiers) (*EndDevice, error)
	// SetDevice creates or updates the device
	SetDevice(context.Context, *EndDevice) (*google_protobuf2.Empty, error)
	// DeleteDevice deletes the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	DeleteDevice(context.Context, *EndDeviceIdentifiers) (*google_protobuf2.Empty, error)
}

func RegisterJsDeviceRegistryServer(s *grpc.Server, srv JsDeviceRegistryServer) {
	s.RegisterService(&_JsDeviceRegistry_serviceDesc, srv)
}

func _JsDeviceRegistry_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDeviceIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JsDeviceRegistryServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.JsDeviceRegistry/ListDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JsDeviceRegistryServer).ListDevices(ctx, req.(*EndDeviceIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _JsDeviceRegistry_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDeviceIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JsDeviceRegistryServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.JsDeviceRegistry/GetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JsDeviceRegistryServer).GetDevice(ctx, req.(*EndDeviceIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _JsDeviceRegistry_SetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JsDeviceRegistryServer).SetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.JsDeviceRegistry/SetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JsDeviceRegistryServer).SetDevice(ctx, req.(*EndDevice))
	}
	return interceptor(ctx, in, info, handler)
}

func _JsDeviceRegistry_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDeviceIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JsDeviceRegistryServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.JsDeviceRegistry/DeleteDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JsDeviceRegistryServer).DeleteDevice(ctx, req.(*EndDeviceIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _JsDeviceRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.v3.JsDeviceRegistry",
	HandlerType: (*JsDeviceRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDevices",
			Handler:    _JsDeviceRegistry_ListDevices_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _JsDeviceRegistry_GetDevice_Handler,
		},
		{
			MethodName: "SetDevice",
			Handler:    _JsDeviceRegistry_SetDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _JsDeviceRegistry_DeleteDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/ttn/api/end_device_services.proto",
}

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/end_device_services.proto", fileDescriptorEndDeviceServices)
}
func init() {
	golang_proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/end_device_services.proto", fileDescriptorEndDeviceServices)
}

var fileDescriptorEndDeviceServices = []byte{
	// 536 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x95, 0x3f, 0x48, 0x1c, 0x4f,
	0x14, 0xc7, 0xe7, 0xfd, 0xf8, 0x21, 0xb8, 0x49, 0x91, 0x6c, 0x91, 0xe2, 0x22, 0xaf, 0xd8, 0xce,
	0x0b, 0xee, 0x10, 0x8d, 0x04, 0x84, 0x2b, 0x12, 0x94, 0x90, 0x10, 0x2c, 0x12, 0x2b, 0x9b, 0x63,
	0xef, 0x76, 0xdc, 0x9b, 0xf3, 0x9c, 0x59, 0x76, 0xc6, 0x0b, 0x72, 0x11, 0x24, 0x69, 0x2c, 0x03,
	0x69, 0xd2, 0x25, 0xa5, 0xa5, 0x45, 0x0a, 0xcb, 0x2b, 0x2d, 0x85, 0x34, 0x96, 0xee, 0x6c, 0x0a,
	0x4b, 0x4b, 0xcb, 0x70, 0xb3, 0xeb, 0x1f, 0x38, 0xc4, 0xf3, 0x50, 0xaf, 0x9a, 0x7d, 0xf3, 0x65,
	0xde, 0xf7, 0xcd, 0x77, 0x3f, 0x30, 0x4e, 0x25, 0xe2, 0xba, 0xb1, 0x5e, 0xf3, 0xeb, 0x72, 0x8d,
	0x2e, 0x35, 0xd8, 0x52, 0x83, 0x8b, 0x48, 0x2d, 0x32, 0xfd, 0x49, 0x26, 0xab, 0x54, 0x6b, 0x41,
	0x83, 0x98, 0x53, 0x26, 0xc2, 0x6a, 0xc8, 0xda, 0xbc, 0xce, 0xaa, 0x8a, 0x25, 0xbd, 0x55, 0xf9,
	0x71, 0x22, 0xb5, 0x74, 0xc7, 0xb4, 0x16, 0x7e, 0x7b, 0xa6, 0x34, 0x75, 0xa9, 0x4d, 0x24, 0x23,
	0x49, 0xad, 0x5c, 0x5b, 0x5f, 0xb1, 0x95, 0x2d, 0xec, 0x57, 0x7e, 0xac, 0x34, 0x3b, 0x88, 0x2b,
	0x0f, 0x99, 0xd0, 0x7c, 0x85, 0xb3, 0xa4, 0x70, 0x2b, 0xbd, 0xb8, 0xd9, 0xb0, 0xc5, 0xa9, 0x89,
	0x48, 0xca, 0xa8, 0xc5, 0xac, 0x18, 0x08, 0x21, 0x75, 0xa0, 0xb9, 0x14, 0x67, 0x3d, 0x9f, 0x16,
	0xea, 0xf9, 0xc0, 0x6c, 0x2d, 0xd6, 0x1b, 0xb9, 0x38, 0xdd, 0xfd, 0xdf, 0x79, 0xb4, 0xa8, 0xe6,
	0x6d, 0xb7, 0x0f, 0x2c, 0xe2, 0x4a, 0x27, 0x1b, 0x6e, 0xe2, 0x3c, 0x78, 0xcf, 0x95, 0xce, 0x77,
	0x95, 0x3b, 0xe1, 0xe7, 0x19, 0xf8, 0x0b, 0x22, 0xcc, 0xf7, 0xde, 0x5e, 0x0c, 0x5e, 0x72, 0xfb,
	0x54, 0xe5, 0x3d, 0xff, 0xf2, 0xe7, 0xef, 0xf7, 0xff, 0x9e, 0xb9, 0x93, 0x54, 0x28, 0x1a, 0xc4,
	0x71, 0x8b, 0xd7, 0xf3, 0x91, 0x68, 0xe7, 0x52, 0x55, 0xe5, 0xe1, 0x26, 0x0d, 0x0b, 0x93, 0x8e,
	0x33, 0xfe, 0x86, 0x15, 0x96, 0xd7, 0x38, 0x3e, 0xee, 0x53, 0xbd, 0x8a, 0x35, 0x7c, 0xe9, 0xce,
	0x0e, 0x6c, 0x48, 0x3b, 0xc5, 0xff, 0xe6, 0xe1, 0xa6, 0xfb, 0x1b, 0x9c, 0xf1, 0x8f, 0xe7, 0xee,
	0xfd, 0xfd, 0x4b, 0x4f, 0xfc, 0x3c, 0x44, 0xff, 0x2c, 0x44, 0x7f, 0xa1, 0x17, 0xa2, 0xf7, 0xd9,
	0xfa, 0xb6, 0xbd, 0x4a, 0xbf, 0x2f, 0x0f, 0x95, 0x7f, 0xa5, 0x77, 0x4f, 0xbc, 0xf0, 0x9f, 0x83,
	0xf2, 0xf2, 0xb4, 0x37, 0x75, 0xa3, 0x1e, 0x73, 0x50, 0x76, 0xbf, 0x82, 0xf3, 0x70, 0x9e, 0xb5,
	0x98, 0x66, 0x03, 0xe5, 0x76, 0xd5, 0x25, 0x8a, 0xf0, 0xca, 0xc3, 0x85, 0x67, 0x11, 0x7a, 0x75,
	0x87, 0x08, 0x05, 0xf7, 0x8d, 0x50, 0x30, 0x22, 0x84, 0x82, 0x5b, 0x40, 0x28, 0x18, 0x35, 0x42,
	0xc1, 0xb0, 0x08, 0xbd, 0xbb, 0x43, 0x84, 0x9a, 0xf7, 0x8d, 0x50, 0x73, 0x44, 0x08, 0x35, 0x6f,
	0x01, 0xa1, 0xe6, 0xa8, 0x11, 0x1a, 0x26, 0xbc, 0xd7, 0x3f, 0x61, 0x3f, 0x45, 0x38, 0x48, 0x11,
	0x0e, 0x53, 0x84, 0xa3, 0x14, 0xe1, 0x38, 0x45, 0x72, 0x92, 0x22, 0x39, 0x4d, 0x11, 0xb6, 0x0c,
	0x92, 0x6d, 0x83, 0x64, 0xc7, 0x20, 0xec, 0x1a, 0x24, 0x7b, 0x06, 0xa1, 0x6b, 0x10, 0xf6, 0x0d,
	0xc2, 0x81, 0x41, 0x38, 0x34, 0x48, 0x8e, 0x0c, 0xc2, 0xb1, 0x41, 0x72, 0x62, 0x10, 0x4e, 0x0d,
	0x92, 0xad, 0x0c, 0xc9, 0x76, 0x86, 0xf0, 0x2d, 0x43, 0xf2, 0x23, 0x43, 0xf8, 0x95, 0x21, 0xd9,
	0xc9, 0x90, 0xec, 0x66, 0x08, 0x7b, 0x19, 0x42, 0x37, 0x43, 0x58, 0x9e, 0xbc, 0xee, 0xc1, 0x8e,
	0x57, 0xa3, 0xde, 0x1a, 0xd7, 0x6a, 0x63, 0xf6, 0xc2, 0x33, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff,
	0xb5, 0x5d, 0x10, 0xf6, 0x91, 0x08, 0x00, 0x00,
}
