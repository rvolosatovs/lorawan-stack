// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/end_device_services.proto

package ttnpb // import "go.thethings.network/lorawan-stack/pkg/ttnpb"

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import types "github.com/gogo/protobuf/types"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EndDeviceRegistryClient is the client API for EndDeviceRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EndDeviceRegistryClient interface {
	// Create a new end device within an application.
	Create(ctx context.Context, in *CreateEndDeviceRequest, opts ...grpc.CallOption) (*EndDevice, error)
	// Get the end device with the given identifiers, selecting the fields given
	// by the field mask.
	Get(ctx context.Context, in *GetEndDeviceRequest, opts ...grpc.CallOption) (*EndDevice, error)
	// List applications. See request message for details.
	List(ctx context.Context, in *ListEndDevicesRequest, opts ...grpc.CallOption) (*EndDevices, error)
	Update(ctx context.Context, in *UpdateEndDeviceRequest, opts ...grpc.CallOption) (*EndDevice, error)
	Delete(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
}

type endDeviceRegistryClient struct {
	cc *grpc.ClientConn
}

func NewEndDeviceRegistryClient(cc *grpc.ClientConn) EndDeviceRegistryClient {
	return &endDeviceRegistryClient{cc}
}

func (c *endDeviceRegistryClient) Create(ctx context.Context, in *CreateEndDeviceRequest, opts ...grpc.CallOption) (*EndDevice, error) {
	out := new(EndDevice)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EndDeviceRegistry/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endDeviceRegistryClient) Get(ctx context.Context, in *GetEndDeviceRequest, opts ...grpc.CallOption) (*EndDevice, error) {
	out := new(EndDevice)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EndDeviceRegistry/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endDeviceRegistryClient) List(ctx context.Context, in *ListEndDevicesRequest, opts ...grpc.CallOption) (*EndDevices, error) {
	out := new(EndDevices)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EndDeviceRegistry/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endDeviceRegistryClient) Update(ctx context.Context, in *UpdateEndDeviceRequest, opts ...grpc.CallOption) (*EndDevice, error) {
	out := new(EndDevice)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EndDeviceRegistry/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endDeviceRegistryClient) Delete(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EndDeviceRegistry/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EndDeviceRegistryServer is the server API for EndDeviceRegistry service.
type EndDeviceRegistryServer interface {
	// Create a new end device within an application.
	Create(context.Context, *CreateEndDeviceRequest) (*EndDevice, error)
	// Get the end device with the given identifiers, selecting the fields given
	// by the field mask.
	Get(context.Context, *GetEndDeviceRequest) (*EndDevice, error)
	// List applications. See request message for details.
	List(context.Context, *ListEndDevicesRequest) (*EndDevices, error)
	Update(context.Context, *UpdateEndDeviceRequest) (*EndDevice, error)
	Delete(context.Context, *EndDeviceIdentifiers) (*types.Empty, error)
}

func RegisterEndDeviceRegistryServer(s *grpc.Server, srv EndDeviceRegistryServer) {
	s.RegisterService(&_EndDeviceRegistry_serviceDesc, srv)
}

func _EndDeviceRegistry_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndDeviceRegistryServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EndDeviceRegistry/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndDeviceRegistryServer).Create(ctx, req.(*CreateEndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndDeviceRegistry_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndDeviceRegistryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EndDeviceRegistry/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndDeviceRegistryServer).Get(ctx, req.(*GetEndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndDeviceRegistry_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEndDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndDeviceRegistryServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EndDeviceRegistry/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndDeviceRegistryServer).List(ctx, req.(*ListEndDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndDeviceRegistry_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndDeviceRegistryServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EndDeviceRegistry/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndDeviceRegistryServer).Update(ctx, req.(*UpdateEndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndDeviceRegistry_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDeviceIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndDeviceRegistryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EndDeviceRegistry/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndDeviceRegistryServer).Delete(ctx, req.(*EndDeviceIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _EndDeviceRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.EndDeviceRegistry",
	HandlerType: (*EndDeviceRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _EndDeviceRegistry_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _EndDeviceRegistry_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _EndDeviceRegistry_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _EndDeviceRegistry_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _EndDeviceRegistry_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/end_device_services.proto",
}

func init() {
	proto.RegisterFile("lorawan-stack/api/end_device_services.proto", fileDescriptor_end_device_services_89507d8adcb25d08)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/end_device_services.proto", fileDescriptor_end_device_services_89507d8adcb25d08)
}

var fileDescriptor_end_device_services_89507d8adcb25d08 = []byte{
	// 546 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0x31, 0x6c, 0xd3, 0x40,
	0x14, 0x86, 0xef, 0x00, 0x65, 0xf0, 0x80, 0x84, 0x07, 0x24, 0x0c, 0x7a, 0x43, 0x0a, 0x0c, 0x85,
	0x9e, 0x25, 0x2a, 0x21, 0xc4, 0xc0, 0x50, 0x12, 0x55, 0x54, 0x0c, 0x08, 0x89, 0x85, 0x25, 0x75,
	0xe2, 0xab, 0x73, 0x4a, 0x7a, 0x67, 0x7c, 0x2f, 0xad, 0xaa, 0xaa, 0x52, 0xc5, 0x54, 0x36, 0x04,
	0x0b, 0x0b, 0x12, 0x62, 0xea, 0x46, 0xc7, 0x8c, 0x65, 0xeb, 0x58, 0x89, 0xa5, 0x63, 0x7d, 0x66,
	0xe8, 0xd8, 0xb1, 0x23, 0xca, 0xd9, 0x4d, 0xd2, 0x84, 0x20, 0x82, 0x98, 0x7c, 0x77, 0xef, 0xff,
	0xef, 0x7d, 0xf7, 0x9e, 0x9f, 0x73, 0xaf, 0xad, 0x92, 0x60, 0x3d, 0x90, 0x73, 0x1a, 0x83, 0x46,
	0xcb, 0x0f, 0x62, 0xe1, 0x73, 0x19, 0xd6, 0x42, 0xbe, 0x26, 0x1a, 0xbc, 0xa6, 0x79, 0xd2, 0xfb,
	0x6a, 0x16, 0x27, 0x0a, 0x95, 0x7b, 0x15, 0x51, 0xb2, 0xc2, 0xc0, 0xd6, 0xe6, 0xbd, 0xb9, 0x48,
	0x60, 0xb3, 0x53, 0x67, 0x0d, 0xb5, 0xea, 0x47, 0x2a, 0x52, 0xbe, 0x95, 0xd5, 0x3b, 0x2b, 0x76,
	0x67, 0x37, 0x76, 0x95, 0xdb, 0xbd, 0x5b, 0x91, 0x52, 0x51, 0x9b, 0xdb, 0x24, 0x81, 0x94, 0x0a,
	0x03, 0x14, 0x4a, 0x16, 0x97, 0x7b, 0x37, 0x8b, 0x68, 0xff, 0x0e, 0xbe, 0x1a, 0xe3, 0x46, 0x11,
	0x2c, 0xff, 0x09, 0xb3, 0xd0, 0xcc, 0x8c, 0x6b, 0x44, 0xc8, 0x25, 0x8a, 0x15, 0xc1, 0x93, 0x22,
	0xcb, 0x83, 0xef, 0x25, 0xe7, 0x5a, 0x55, 0x86, 0x15, 0x6b, 0x7c, 0xc9, 0x23, 0xa1, 0x31, 0xd9,
	0x70, 0x3f, 0x53, 0xa7, 0xf4, 0x34, 0xe1, 0x01, 0x72, 0xf7, 0x2e, 0xbb, 0xf8, 0x48, 0x96, 0x9f,
	0x0f, 0x79, 0xde, 0x74, 0xb8, 0x46, 0xef, 0xc6, 0xa8, 0xae, 0xaf, 0x28, 0xbf, 0x78, 0xfb, 0xe3,
	0xe7, 0xc7, 0x4b, 0x4b, 0xe5, 0xaa, 0x1f, 0xc4, 0x71, 0x5b, 0x34, 0xf2, 0x67, 0xfa, 0x9b, 0x43,
	0xc4, 0x22, 0xd4, 0x6c, 0x28, 0x58, 0x1b, 0xdf, 0x6f, 0xf9, 0xb9, 0x54, 0x3f, 0xa6, 0xb3, 0xee,
	0x37, 0xea, 0x5c, 0x5e, 0xe4, 0xe8, 0xce, 0x8c, 0x26, 0x5d, 0xe4, 0x38, 0x0d, 0x59, 0xd3, 0x92,
	0xd5, 0xdd, 0xe5, 0x89, 0x64, 0xb5, 0x29, 0xc8, 0xc6, 0x7c, 0xfd, 0xe5, 0x96, 0xfb, 0x8e, 0x3a,
	0x57, 0x9e, 0x0b, 0x8d, 0xee, 0x9d, 0x51, 0x9a, 0xde, 0x69, 0x9f, 0x48, 0x9f, 0x43, 0x7b, 0x13,
	0xa1, 0x75, 0xf9, 0x89, 0xa5, 0x7e, 0xe4, 0x3e, 0x1c, 0xa1, 0xfe, 0x4b, 0x4c, 0xb7, 0x4b, 0x9d,
	0xd2, 0xab, 0x38, 0xfc, 0x6d, 0x77, 0xf3, 0xf3, 0x69, 0x6a, 0xd8, 0xb2, 0x34, 0xdc, 0x5b, 0xfe,
	0x2f, 0xdd, 0x1d, 0xf3, 0x0d, 0x6a, 0xd8, 0x6b, 0xfc, 0x07, 0xea, 0x94, 0x2a, 0xbc, 0xcd, 0x91,
	0xbb, 0xb7, 0x27, 0x22, 0x3d, 0x1b, 0xfc, 0xe5, 0xde, 0x75, 0x96, 0x8f, 0x11, 0x3b, 0x1f, 0x23,
	0x56, 0xed, 0x8d, 0x51, 0x79, 0xc9, 0x52, 0x57, 0x66, 0x17, 0xfe, 0xad, 0x86, 0xfe, 0xe6, 0x80,
	0x6b, 0xe1, 0x2b, 0x3d, 0x48, 0x81, 0x1e, 0xa6, 0x40, 0x8f, 0x52, 0x20, 0xc7, 0x29, 0x90, 0x93,
	0x14, 0xc8, 0x69, 0x0a, 0xe4, 0x2c, 0x05, 0xba, 0x6d, 0x80, 0xee, 0x18, 0x20, 0xbb, 0x06, 0xe8,
	0x9e, 0x01, 0xd2, 0x35, 0x40, 0xf6, 0x0d, 0x90, 0x03, 0x03, 0xf4, 0xd0, 0x00, 0x3d, 0x32, 0x40,
	0x8e, 0x0d, 0xd0, 0x13, 0x03, 0xe4, 0xd4, 0x00, 0x3d, 0x33, 0x40, 0xb6, 0x33, 0x20, 0x3b, 0x19,
	0xd0, 0xf7, 0x19, 0x90, 0x4f, 0x19, 0xd0, 0x2f, 0x19, 0x90, 0xdd, 0x0c, 0xc8, 0x5e, 0x06, 0xb4,
	0x9b, 0x01, 0xdd, 0xcf, 0x80, 0xbe, 0xbe, 0x1f, 0x29, 0x86, 0x4d, 0x8e, 0x4d, 0x21, 0x23, 0xcd,
	0x24, 0xc7, 0x75, 0x95, 0xb4, 0xfc, 0x8b, 0x43, 0x1f, 0xb7, 0x22, 0x1f, 0x51, 0xc6, 0xf5, 0x7a,
	0xc9, 0x16, 0x60, 0xfe, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe0, 0x26, 0x79, 0x11, 0xe1, 0x04,
	0x00, 0x00,
}
