// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/TheThingsNetwork/ttn/api/end_device_services.proto

package ttnpb

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf3 "github.com/gogo/protobuf/types"
import google_protobuf4 "github.com/gogo/protobuf/types"

import context "context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SetDeviceRequest struct {
	Device    EndDevice                   `protobuf:"bytes,1,opt,name=device" json:"device"`
	FieldMask *google_protobuf4.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask" json:"field_mask,omitempty"`
}

func (m *SetDeviceRequest) Reset()         { *m = SetDeviceRequest{} }
func (m *SetDeviceRequest) String() string { return proto.CompactTextString(m) }
func (*SetDeviceRequest) ProtoMessage()    {}
func (*SetDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorEndDeviceServices, []int{0}
}

func (m *SetDeviceRequest) GetDevice() EndDevice {
	if m != nil {
		return m.Device
	}
	return EndDevice{}
}

func (m *SetDeviceRequest) GetFieldMask() *google_protobuf4.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func init() {
	proto.RegisterType((*SetDeviceRequest)(nil), "ttn.v3.SetDeviceRequest")
	golang_proto.RegisterType((*SetDeviceRequest)(nil), "ttn.v3.SetDeviceRequest")
}
func (this *SetDeviceRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SetDeviceRequest)
	if !ok {
		that2, ok := that.(SetDeviceRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SetDeviceRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SetDeviceRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SetDeviceRequest but is not nil && this == nil")
	}
	if !this.Device.Equal(&that1.Device) {
		return fmt.Errorf("Device this(%v) Not Equal that(%v)", this.Device, that1.Device)
	}
	if !this.FieldMask.Equal(that1.FieldMask) {
		return fmt.Errorf("FieldMask this(%v) Not Equal that(%v)", this.FieldMask, that1.FieldMask)
	}
	return nil
}
func (this *SetDeviceRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetDeviceRequest)
	if !ok {
		that2, ok := that.(SetDeviceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Device.Equal(&that1.Device) {
		return false
	}
	if !this.FieldMask.Equal(that1.FieldMask) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NsDeviceRegistry service

type NsDeviceRegistryClient interface {
	// ListDevices returns the devices that match the given identifiers
	ListDevices(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*EndDevices, error)
	// GetDevice returns the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	GetDevice(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*EndDevice, error)
	// SetDevice creates or updates the device
	SetDevice(ctx context.Context, in *SetDeviceRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// DeleteDevice deletes the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	DeleteDevice(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
}

type nsDeviceRegistryClient struct {
	cc *grpc.ClientConn
}

func NewNsDeviceRegistryClient(cc *grpc.ClientConn) NsDeviceRegistryClient {
	return &nsDeviceRegistryClient{cc}
}

func (c *nsDeviceRegistryClient) ListDevices(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*EndDevices, error) {
	out := new(EndDevices)
	err := grpc.Invoke(ctx, "/ttn.v3.NsDeviceRegistry/ListDevices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nsDeviceRegistryClient) GetDevice(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*EndDevice, error) {
	out := new(EndDevice)
	err := grpc.Invoke(ctx, "/ttn.v3.NsDeviceRegistry/GetDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nsDeviceRegistryClient) SetDevice(ctx context.Context, in *SetDeviceRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.NsDeviceRegistry/SetDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nsDeviceRegistryClient) DeleteDevice(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.NsDeviceRegistry/DeleteDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NsDeviceRegistry service

type NsDeviceRegistryServer interface {
	// ListDevices returns the devices that match the given identifiers
	ListDevices(context.Context, *EndDeviceIdentifiers) (*EndDevices, error)
	// GetDevice returns the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	GetDevice(context.Context, *EndDeviceIdentifiers) (*EndDevice, error)
	// SetDevice creates or updates the device
	SetDevice(context.Context, *SetDeviceRequest) (*google_protobuf3.Empty, error)
	// DeleteDevice deletes the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	DeleteDevice(context.Context, *EndDeviceIdentifiers) (*google_protobuf3.Empty, error)
}

func RegisterNsDeviceRegistryServer(s *grpc.Server, srv NsDeviceRegistryServer) {
	s.RegisterService(&_NsDeviceRegistry_serviceDesc, srv)
}

func _NsDeviceRegistry_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDeviceIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NsDeviceRegistryServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.NsDeviceRegistry/ListDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NsDeviceRegistryServer).ListDevices(ctx, req.(*EndDeviceIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _NsDeviceRegistry_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDeviceIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NsDeviceRegistryServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.NsDeviceRegistry/GetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NsDeviceRegistryServer).GetDevice(ctx, req.(*EndDeviceIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _NsDeviceRegistry_SetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NsDeviceRegistryServer).SetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.NsDeviceRegistry/SetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NsDeviceRegistryServer).SetDevice(ctx, req.(*SetDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NsDeviceRegistry_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDeviceIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NsDeviceRegistryServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.NsDeviceRegistry/DeleteDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NsDeviceRegistryServer).DeleteDevice(ctx, req.(*EndDeviceIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _NsDeviceRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.v3.NsDeviceRegistry",
	HandlerType: (*NsDeviceRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDevices",
			Handler:    _NsDeviceRegistry_ListDevices_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _NsDeviceRegistry_GetDevice_Handler,
		},
		{
			MethodName: "SetDevice",
			Handler:    _NsDeviceRegistry_SetDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _NsDeviceRegistry_DeleteDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/ttn/api/end_device_services.proto",
}

// Client API for AsDeviceRegistry service

type AsDeviceRegistryClient interface {
	// ListDevices returns the devices that match the given identifiers
	ListDevices(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*EndDevices, error)
	// GetDevice returns the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	GetDevice(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*EndDevice, error)
	// SetDevice creates or updates the device
	SetDevice(ctx context.Context, in *SetDeviceRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// DeleteDevice deletes the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	DeleteDevice(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
}

type asDeviceRegistryClient struct {
	cc *grpc.ClientConn
}

func NewAsDeviceRegistryClient(cc *grpc.ClientConn) AsDeviceRegistryClient {
	return &asDeviceRegistryClient{cc}
}

func (c *asDeviceRegistryClient) ListDevices(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*EndDevices, error) {
	out := new(EndDevices)
	err := grpc.Invoke(ctx, "/ttn.v3.AsDeviceRegistry/ListDevices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asDeviceRegistryClient) GetDevice(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*EndDevice, error) {
	out := new(EndDevice)
	err := grpc.Invoke(ctx, "/ttn.v3.AsDeviceRegistry/GetDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asDeviceRegistryClient) SetDevice(ctx context.Context, in *SetDeviceRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.AsDeviceRegistry/SetDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asDeviceRegistryClient) DeleteDevice(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.AsDeviceRegistry/DeleteDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AsDeviceRegistry service

type AsDeviceRegistryServer interface {
	// ListDevices returns the devices that match the given identifiers
	ListDevices(context.Context, *EndDeviceIdentifiers) (*EndDevices, error)
	// GetDevice returns the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	GetDevice(context.Context, *EndDeviceIdentifiers) (*EndDevice, error)
	// SetDevice creates or updates the device
	SetDevice(context.Context, *SetDeviceRequest) (*google_protobuf3.Empty, error)
	// DeleteDevice deletes the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	DeleteDevice(context.Context, *EndDeviceIdentifiers) (*google_protobuf3.Empty, error)
}

func RegisterAsDeviceRegistryServer(s *grpc.Server, srv AsDeviceRegistryServer) {
	s.RegisterService(&_AsDeviceRegistry_serviceDesc, srv)
}

func _AsDeviceRegistry_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDeviceIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsDeviceRegistryServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.AsDeviceRegistry/ListDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsDeviceRegistryServer).ListDevices(ctx, req.(*EndDeviceIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsDeviceRegistry_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDeviceIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsDeviceRegistryServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.AsDeviceRegistry/GetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsDeviceRegistryServer).GetDevice(ctx, req.(*EndDeviceIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsDeviceRegistry_SetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsDeviceRegistryServer).SetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.AsDeviceRegistry/SetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsDeviceRegistryServer).SetDevice(ctx, req.(*SetDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsDeviceRegistry_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDeviceIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsDeviceRegistryServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.AsDeviceRegistry/DeleteDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsDeviceRegistryServer).DeleteDevice(ctx, req.(*EndDeviceIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _AsDeviceRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.v3.AsDeviceRegistry",
	HandlerType: (*AsDeviceRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDevices",
			Handler:    _AsDeviceRegistry_ListDevices_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _AsDeviceRegistry_GetDevice_Handler,
		},
		{
			MethodName: "SetDevice",
			Handler:    _AsDeviceRegistry_SetDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _AsDeviceRegistry_DeleteDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/ttn/api/end_device_services.proto",
}

// Client API for JsDeviceRegistry service

type JsDeviceRegistryClient interface {
	// ListDevices returns the devices that match the given identifiers
	ListDevices(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*EndDevices, error)
	// GetDevice returns the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	GetDevice(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*EndDevice, error)
	// SetDevice creates or updates the device
	SetDevice(ctx context.Context, in *SetDeviceRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// DeleteDevice deletes the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	DeleteDevice(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
}

type jsDeviceRegistryClient struct {
	cc *grpc.ClientConn
}

func NewJsDeviceRegistryClient(cc *grpc.ClientConn) JsDeviceRegistryClient {
	return &jsDeviceRegistryClient{cc}
}

func (c *jsDeviceRegistryClient) ListDevices(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*EndDevices, error) {
	out := new(EndDevices)
	err := grpc.Invoke(ctx, "/ttn.v3.JsDeviceRegistry/ListDevices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jsDeviceRegistryClient) GetDevice(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*EndDevice, error) {
	out := new(EndDevice)
	err := grpc.Invoke(ctx, "/ttn.v3.JsDeviceRegistry/GetDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jsDeviceRegistryClient) SetDevice(ctx context.Context, in *SetDeviceRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.JsDeviceRegistry/SetDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jsDeviceRegistryClient) DeleteDevice(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.JsDeviceRegistry/DeleteDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for JsDeviceRegistry service

type JsDeviceRegistryServer interface {
	// ListDevices returns the devices that match the given identifiers
	ListDevices(context.Context, *EndDeviceIdentifiers) (*EndDevices, error)
	// GetDevice returns the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	GetDevice(context.Context, *EndDeviceIdentifiers) (*EndDevice, error)
	// SetDevice creates or updates the device
	SetDevice(context.Context, *SetDeviceRequest) (*google_protobuf3.Empty, error)
	// DeleteDevice deletes the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	DeleteDevice(context.Context, *EndDeviceIdentifiers) (*google_protobuf3.Empty, error)
}

func RegisterJsDeviceRegistryServer(s *grpc.Server, srv JsDeviceRegistryServer) {
	s.RegisterService(&_JsDeviceRegistry_serviceDesc, srv)
}

func _JsDeviceRegistry_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDeviceIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JsDeviceRegistryServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.JsDeviceRegistry/ListDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JsDeviceRegistryServer).ListDevices(ctx, req.(*EndDeviceIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _JsDeviceRegistry_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDeviceIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JsDeviceRegistryServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.JsDeviceRegistry/GetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JsDeviceRegistryServer).GetDevice(ctx, req.(*EndDeviceIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _JsDeviceRegistry_SetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JsDeviceRegistryServer).SetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.JsDeviceRegistry/SetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JsDeviceRegistryServer).SetDevice(ctx, req.(*SetDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JsDeviceRegistry_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDeviceIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JsDeviceRegistryServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.JsDeviceRegistry/DeleteDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JsDeviceRegistryServer).DeleteDevice(ctx, req.(*EndDeviceIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _JsDeviceRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.v3.JsDeviceRegistry",
	HandlerType: (*JsDeviceRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDevices",
			Handler:    _JsDeviceRegistry_ListDevices_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _JsDeviceRegistry_GetDevice_Handler,
		},
		{
			MethodName: "SetDevice",
			Handler:    _JsDeviceRegistry_SetDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _JsDeviceRegistry_DeleteDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/ttn/api/end_device_services.proto",
}

func (m *SetDeviceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetDeviceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEndDeviceServices(dAtA, i, uint64(m.Device.Size()))
	n1, err := m.Device.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.FieldMask != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEndDeviceServices(dAtA, i, uint64(m.FieldMask.Size()))
		n2, err := m.FieldMask.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func encodeVarintEndDeviceServices(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedSetDeviceRequest(r randyEndDeviceServices, easy bool) *SetDeviceRequest {
	this := &SetDeviceRequest{}
	v1 := NewPopulatedEndDevice(r, easy)
	this.Device = *v1
	if r.Intn(10) != 0 {
		this.FieldMask = google_protobuf4.NewPopulatedFieldMask(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyEndDeviceServices interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneEndDeviceServices(r randyEndDeviceServices) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringEndDeviceServices(r randyEndDeviceServices) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneEndDeviceServices(r)
	}
	return string(tmps)
}
func randUnrecognizedEndDeviceServices(r randyEndDeviceServices, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldEndDeviceServices(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldEndDeviceServices(dAtA []byte, r randyEndDeviceServices, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateEndDeviceServices(dAtA, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		dAtA = encodeVarintPopulateEndDeviceServices(dAtA, uint64(v3))
	case 1:
		dAtA = encodeVarintPopulateEndDeviceServices(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateEndDeviceServices(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateEndDeviceServices(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateEndDeviceServices(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateEndDeviceServices(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *SetDeviceRequest) Size() (n int) {
	var l int
	_ = l
	l = m.Device.Size()
	n += 1 + l + sovEndDeviceServices(uint64(l))
	if m.FieldMask != nil {
		l = m.FieldMask.Size()
		n += 1 + l + sovEndDeviceServices(uint64(l))
	}
	return n
}

func sovEndDeviceServices(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEndDeviceServices(x uint64) (n int) {
	return sovEndDeviceServices((x << 1) ^ uint64((int64(x) >> 63)))
}
func (m *SetDeviceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndDeviceServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetDeviceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetDeviceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDeviceServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDeviceServices
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Device.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndDeviceServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndDeviceServices
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FieldMask == nil {
				m.FieldMask = &google_protobuf4.FieldMask{}
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndDeviceServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndDeviceServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEndDeviceServices(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEndDeviceServices
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEndDeviceServices
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEndDeviceServices
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEndDeviceServices
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEndDeviceServices
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEndDeviceServices(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEndDeviceServices = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEndDeviceServices   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/end_device_services.proto", fileDescriptorEndDeviceServices)
}
func init() {
	golang_proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/end_device_services.proto", fileDescriptorEndDeviceServices)
}

var fileDescriptorEndDeviceServices = []byte{
	// 652 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0x3d, 0x4c, 0x14, 0x41,
	0x14, 0x9e, 0x47, 0x94, 0x84, 0xc5, 0x02, 0xb7, 0x30, 0xe4, 0x24, 0x4f, 0x72, 0x95, 0x92, 0xb8,
	0x1b, 0x41, 0x0b, 0x30, 0x16, 0x10, 0x90, 0x60, 0x84, 0x02, 0xa9, 0xb0, 0xb8, 0xcc, 0xb1, 0x73,
	0xcb, 0xdc, 0xcf, 0xee, 0x7a, 0x33, 0x40, 0x08, 0xc1, 0x10, 0x2a, 0x12, 0x1b, 0x13, 0x1a, 0x3b,
	0x2d, 0x49, 0x6c, 0x88, 0x15, 0x25, 0x25, 0x25, 0x89, 0x0d, 0x95, 0x61, 0x67, 0x2d, 0x28, 0x89,
	0x15, 0xa5, 0xb9, 0xdd, 0x59, 0x40, 0x2e, 0x86, 0xd3, 0xdc, 0x85, 0xab, 0x76, 0xde, 0xbd, 0xf7,
	0xbd, 0xf7, 0xcd, 0xfb, 0xbe, 0x49, 0xce, 0x78, 0xe1, 0x72, 0xb9, 0xb8, 0x94, 0xb7, 0x16, 0xfc,
	0x8a, 0x3d, 0xb7, 0xc8, 0xe6, 0x16, 0xb9, 0xe7, 0x8a, 0x19, 0x26, 0x57, 0xfc, 0x6a, 0xc9, 0x96,
	0xd2, 0xb3, 0x69, 0xc0, 0x6d, 0xe6, 0x39, 0x39, 0x87, 0x2d, 0xf3, 0x05, 0x96, 0x13, 0xac, 0x5a,
	0xfb, 0x0a, 0x2b, 0xa8, 0xfa, 0xd2, 0x37, 0x3b, 0xa5, 0xf4, 0xac, 0xe5, 0xa1, 0xcc, 0xd3, 0x7f,
	0x6b, 0x93, 0xa0, 0x33, 0xcf, 0x1a, 0x41, 0x71, 0x87, 0x79, 0x92, 0x17, 0x38, 0xab, 0xea, 0xa1,
	0x99, 0x27, 0x8d, 0xc0, 0xca, 0x7e, 0x95, 0xae, 0x50, 0x4f, 0x43, 0x06, 0x1b, 0x81, 0x54, 0x98,
	0x10, 0xd4, 0x4d, 0xef, 0xd6, 0x28, 0x46, 0x52, 0x87, 0x4a, 0xaa, 0x31, 0x8f, 0x2f, 0x61, 0x5c,
	0xdf, 0xf5, 0xed, 0xf8, 0xe7, 0xfc, 0x52, 0x21, 0x8e, 0xe2, 0x20, 0x3e, 0xe9, 0xf2, 0x3e, 0xd7,
	0xf7, 0xdd, 0x32, 0x8b, 0x3b, 0x51, 0xcf, 0xf3, 0x25, 0x95, 0xdc, 0xf7, 0x52, 0x02, 0xf7, 0x75,
	0xf6, 0xbc, 0x07, 0xab, 0x04, 0x72, 0x55, 0x27, 0xfb, 0xaf, 0x26, 0x0b, 0x9c, 0x95, 0x9d, 0x5c,
	0x85, 0x8a, 0x52, 0x52, 0x91, 0x7d, 0x6f, 0xf4, 0xbc, 0x61, 0x72, 0x3c, 0x5e, 0xf8, 0x2c, 0x7b,
	0xb7, 0xc4, 0x84, 0x34, 0x6d, 0xa3, 0x33, 0x51, 0xa0, 0x17, 0xfa, 0xe1, 0x61, 0xf7, 0xe0, 0x5d,
	0x2b, 0x11, 0xd0, 0x9a, 0xf0, 0x9c, 0xa4, 0x72, 0xec, 0xd6, 0xc1, 0x8f, 0x07, 0x64, 0x56, 0x97,
	0x99, 0xc3, 0x86, 0x71, 0xd1, 0xb8, 0xb7, 0x23, 0x06, 0x65, 0xac, 0x64, 0xb6, 0x95, 0xce, 0xb6,
	0x5e, 0xd6, 0x4a, 0xa6, 0xa9, 0x28, 0xcd, 0x76, 0x15, 0xd2, 0xe3, 0xe0, 0xee, 0x6d, 0xa3, 0x67,
	0x46, 0xa4, 0xf3, 0x5d, 0x2e, 0x64, 0x75, 0xd5, 0xdc, 0x04, 0xa3, 0xfb, 0x35, 0x17, 0x9a, 0x96,
	0x30, 0xfb, 0xea, 0x08, 0x4c, 0x5d, 0xe8, 0x9d, 0x31, 0xeb, 0xb2, 0x22, 0x3b, 0xba, 0xf9, 0xfd,
	0xe7, 0x76, 0xc7, 0x73, 0x73, 0xd8, 0xf6, 0x84, 0x4d, 0x83, 0xa0, 0xcc, 0x17, 0x92, 0xad, 0xd9,
	0x6b, 0x97, 0xa2, 0x1c, 0x77, 0x84, 0xf5, 0x67, 0xbc, 0x6e, 0x3b, 0x7a, 0xe8, 0x07, 0x30, 0xba,
	0x26, 0xd3, 0xd5, 0x5c, 0x43, 0xa1, 0x7e, 0x43, 0xd9, 0xe9, 0x98, 0xc1, 0xa4, 0x39, 0xf1, 0xdf,
	0x0c, 0xec, 0x35, 0xfd, 0x9c, 0xb8, 0xb3, 0x6e, 0xfe, 0x02, 0xa3, 0xeb, 0x5c, 0x28, 0xb3, 0x37,
	0x9d, 0x77, 0x55, 0xbb, 0xcc, 0xbd, 0xba, 0xb5, 0x4f, 0xd4, 0xfc, 0x90, 0xfd, 0x06, 0x31, 0x9f,
	0xaf, 0x90, 0x7d, 0x5b, 0x4f, 0x48, 0xbf, 0xb7, 0x7a, 0x2e, 0xd7, 0x72, 0x8b, 0x31, 0x17, 0x34,
	0x47, 0x60, 0x60, 0x7e, 0x2a, 0x3b, 0xde, 0x8c, 0x09, 0x23, 0x30, 0x60, 0x6e, 0x83, 0x71, 0x67,
	0x9c, 0x95, 0x99, 0x64, 0x0d, 0xa9, 0xf0, 0xb7, 0xbb, 0x6b, 0x29, 0x06, 0x9a, 0x23, 0x45, 0x6c,
	0xd9, 0xd1, 0x56, 0x5a, 0x96, 0xde, 0xb8, 0x65, 0x69, 0xbb, 0x59, 0x96, 0xb6, 0xdc, 0xb2, 0xb4,
	0x4d, 0x2d, 0x4b, 0x9b, 0x65, 0xd9, 0x57, 0xad, 0xb4, 0x6c, 0xf1, 0xc6, 0x2d, 0x5b, 0x6c, 0x37,
	0xcb, 0x16, 0x5b, 0x6e, 0xd9, 0x62, 0x9b, 0x5a, 0xb6, 0x19, 0x52, 0x8c, 0x7d, 0x86, 0x83, 0x10,
	0xe1, 0x30, 0x44, 0x38, 0x0a, 0x11, 0x8e, 0x43, 0x84, 0x93, 0x10, 0xc9, 0x69, 0x88, 0xe4, 0x2c,
	0x44, 0xd8, 0x50, 0x48, 0xb6, 0x14, 0x92, 0x1d, 0x85, 0xb0, 0xab, 0x90, 0xec, 0x29, 0x84, 0x7d,
	0x85, 0x70, 0xa0, 0x10, 0x0e, 0x15, 0xc2, 0x91, 0x42, 0x72, 0xac, 0x10, 0x4e, 0x14, 0x92, 0x53,
	0x85, 0x70, 0xa6, 0x90, 0x6c, 0x44, 0x48, 0xb6, 0x22, 0x84, 0x8f, 0x11, 0x92, 0x4f, 0x11, 0xc2,
	0x97, 0x08, 0xc9, 0x4e, 0x84, 0x64, 0x37, 0x42, 0xd8, 0x8b, 0x10, 0xf6, 0x23, 0x84, 0xf9, 0x47,
	0xd7, 0xfd, 0x9f, 0x0b, 0x4a, 0x6e, 0xed, 0x1b, 0xe4, 0xf3, 0x9d, 0xf1, 0x02, 0x86, 0x7e, 0x07,
	0x00, 0x00, 0xff, 0xff, 0xe1, 0xc7, 0xd9, 0x02, 0x1e, 0x0b, 0x00, 0x00,
}
