// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/end_device_services.proto

package ttnpb // import "go.thethings.network/lorawan-stack/pkg/ttnpb"

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import types "github.com/gogo/protobuf/types"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import context "context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NsDeviceRegistry service

type NsDeviceRegistryClient interface {
	// GetDevice returns the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	Get(ctx context.Context, in *GetEndDeviceRequest, opts ...grpc.CallOption) (*EndDevice, error)
	// SetDevice creates or updates the device.
	Set(ctx context.Context, in *SetDeviceRequest, opts ...grpc.CallOption) (*EndDevice, error)
	// DeleteDevice deletes the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	Delete(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
}

type nsDeviceRegistryClient struct {
	cc *grpc.ClientConn
}

func NewNsDeviceRegistryClient(cc *grpc.ClientConn) NsDeviceRegistryClient {
	return &nsDeviceRegistryClient{cc}
}

func (c *nsDeviceRegistryClient) Get(ctx context.Context, in *GetEndDeviceRequest, opts ...grpc.CallOption) (*EndDevice, error) {
	out := new(EndDevice)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.NsDeviceRegistry/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nsDeviceRegistryClient) Set(ctx context.Context, in *SetDeviceRequest, opts ...grpc.CallOption) (*EndDevice, error) {
	out := new(EndDevice)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.NsDeviceRegistry/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nsDeviceRegistryClient) Delete(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.NsDeviceRegistry/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NsDeviceRegistry service

type NsDeviceRegistryServer interface {
	// GetDevice returns the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	Get(context.Context, *GetEndDeviceRequest) (*EndDevice, error)
	// SetDevice creates or updates the device.
	Set(context.Context, *SetDeviceRequest) (*EndDevice, error)
	// DeleteDevice deletes the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	Delete(context.Context, *EndDeviceIdentifiers) (*types.Empty, error)
}

func RegisterNsDeviceRegistryServer(s *grpc.Server, srv NsDeviceRegistryServer) {
	s.RegisterService(&_NsDeviceRegistry_serviceDesc, srv)
}

func _NsDeviceRegistry_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NsDeviceRegistryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.NsDeviceRegistry/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NsDeviceRegistryServer).Get(ctx, req.(*GetEndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NsDeviceRegistry_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NsDeviceRegistryServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.NsDeviceRegistry/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NsDeviceRegistryServer).Set(ctx, req.(*SetDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NsDeviceRegistry_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDeviceIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NsDeviceRegistryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.NsDeviceRegistry/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NsDeviceRegistryServer).Delete(ctx, req.(*EndDeviceIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _NsDeviceRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.NsDeviceRegistry",
	HandlerType: (*NsDeviceRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _NsDeviceRegistry_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _NsDeviceRegistry_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _NsDeviceRegistry_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/end_device_services.proto",
}

// Client API for AsDeviceRegistry service

type AsDeviceRegistryClient interface {
	// GetDevice returns the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	Get(ctx context.Context, in *GetEndDeviceRequest, opts ...grpc.CallOption) (*EndDevice, error)
	// SetDevice creates or updates the device.
	Set(ctx context.Context, in *SetDeviceRequest, opts ...grpc.CallOption) (*EndDevice, error)
	// DeleteDevice deletes the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	Delete(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
}

type asDeviceRegistryClient struct {
	cc *grpc.ClientConn
}

func NewAsDeviceRegistryClient(cc *grpc.ClientConn) AsDeviceRegistryClient {
	return &asDeviceRegistryClient{cc}
}

func (c *asDeviceRegistryClient) Get(ctx context.Context, in *GetEndDeviceRequest, opts ...grpc.CallOption) (*EndDevice, error) {
	out := new(EndDevice)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.AsDeviceRegistry/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asDeviceRegistryClient) Set(ctx context.Context, in *SetDeviceRequest, opts ...grpc.CallOption) (*EndDevice, error) {
	out := new(EndDevice)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.AsDeviceRegistry/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asDeviceRegistryClient) Delete(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.AsDeviceRegistry/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AsDeviceRegistry service

type AsDeviceRegistryServer interface {
	// GetDevice returns the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	Get(context.Context, *GetEndDeviceRequest) (*EndDevice, error)
	// SetDevice creates or updates the device.
	Set(context.Context, *SetDeviceRequest) (*EndDevice, error)
	// DeleteDevice deletes the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	Delete(context.Context, *EndDeviceIdentifiers) (*types.Empty, error)
}

func RegisterAsDeviceRegistryServer(s *grpc.Server, srv AsDeviceRegistryServer) {
	s.RegisterService(&_AsDeviceRegistry_serviceDesc, srv)
}

func _AsDeviceRegistry_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsDeviceRegistryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.AsDeviceRegistry/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsDeviceRegistryServer).Get(ctx, req.(*GetEndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsDeviceRegistry_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsDeviceRegistryServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.AsDeviceRegistry/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsDeviceRegistryServer).Set(ctx, req.(*SetDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsDeviceRegistry_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDeviceIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsDeviceRegistryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.AsDeviceRegistry/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsDeviceRegistryServer).Delete(ctx, req.(*EndDeviceIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _AsDeviceRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.AsDeviceRegistry",
	HandlerType: (*AsDeviceRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _AsDeviceRegistry_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _AsDeviceRegistry_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AsDeviceRegistry_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/end_device_services.proto",
}

// Client API for JsDeviceRegistry service

type JsDeviceRegistryClient interface {
	// GetDevice returns the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	Get(ctx context.Context, in *GetEndDeviceRequest, opts ...grpc.CallOption) (*EndDevice, error)
	// SetDevice creates or updates the device.
	Set(ctx context.Context, in *SetDeviceRequest, opts ...grpc.CallOption) (*EndDevice, error)
	// DeleteDevice deletes the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	Delete(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
}

type jsDeviceRegistryClient struct {
	cc *grpc.ClientConn
}

func NewJsDeviceRegistryClient(cc *grpc.ClientConn) JsDeviceRegistryClient {
	return &jsDeviceRegistryClient{cc}
}

func (c *jsDeviceRegistryClient) Get(ctx context.Context, in *GetEndDeviceRequest, opts ...grpc.CallOption) (*EndDevice, error) {
	out := new(EndDevice)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.JsDeviceRegistry/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jsDeviceRegistryClient) Set(ctx context.Context, in *SetDeviceRequest, opts ...grpc.CallOption) (*EndDevice, error) {
	out := new(EndDevice)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.JsDeviceRegistry/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jsDeviceRegistryClient) Delete(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.JsDeviceRegistry/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for JsDeviceRegistry service

type JsDeviceRegistryServer interface {
	// GetDevice returns the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	Get(context.Context, *GetEndDeviceRequest) (*EndDevice, error)
	// SetDevice creates or updates the device.
	Set(context.Context, *SetDeviceRequest) (*EndDevice, error)
	// DeleteDevice deletes the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	Delete(context.Context, *EndDeviceIdentifiers) (*types.Empty, error)
}

func RegisterJsDeviceRegistryServer(s *grpc.Server, srv JsDeviceRegistryServer) {
	s.RegisterService(&_JsDeviceRegistry_serviceDesc, srv)
}

func _JsDeviceRegistry_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JsDeviceRegistryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.JsDeviceRegistry/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JsDeviceRegistryServer).Get(ctx, req.(*GetEndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JsDeviceRegistry_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JsDeviceRegistryServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.JsDeviceRegistry/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JsDeviceRegistryServer).Set(ctx, req.(*SetDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JsDeviceRegistry_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDeviceIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JsDeviceRegistryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.JsDeviceRegistry/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JsDeviceRegistryServer).Delete(ctx, req.(*EndDeviceIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _JsDeviceRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.JsDeviceRegistry",
	HandlerType: (*JsDeviceRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _JsDeviceRegistry_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _JsDeviceRegistry_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _JsDeviceRegistry_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/end_device_services.proto",
}

func init() {
	proto.RegisterFile("lorawan-stack/api/end_device_services.proto", fileDescriptor_end_device_services_2d0bacecb6f671af)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/end_device_services.proto", fileDescriptor_end_device_services_2d0bacecb6f671af)
}

var fileDescriptor_end_device_services_2d0bacecb6f671af = []byte{
	// 544 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x95, 0x31, 0x68, 0x14, 0x4d,
	0x14, 0xc7, 0xe7, 0x7d, 0xf9, 0x48, 0x71, 0x85, 0xc8, 0x16, 0x82, 0xab, 0x3c, 0xe4, 0x62, 0x75,
	0x9a, 0x59, 0x30, 0x5d, 0x3a, 0xe5, 0x8e, 0x23, 0x82, 0x16, 0xa6, 0x8b, 0x45, 0x98, 0xbb, 0x9d,
	0xec, 0xcd, 0xdd, 0x65, 0x66, 0xdd, 0x7d, 0x97, 0x10, 0x24, 0x10, 0xac, 0x52, 0x0a, 0x22, 0x58,
	0x8a, 0x55, 0xc0, 0x26, 0xa4, 0x4a, 0x99, 0x32, 0x65, 0xc0, 0x26, 0x76, 0xd9, 0x59, 0x8b, 0x94,
	0xe9, 0x4c, 0x29, 0xb7, 0xb7, 0xb9, 0x5c, 0x72, 0x2a, 0x06, 0xee, 0x20, 0xa9, 0x76, 0xde, 0xbe,
	0xff, 0x9b, 0xf7, 0x7f, 0x6f, 0x7f, 0xb0, 0x85, 0x47, 0x6d, 0x13, 0x89, 0x55, 0xa1, 0xa7, 0x63,
	0x12, 0xf5, 0x96, 0x27, 0x42, 0xe5, 0x49, 0xed, 0x2f, 0xfa, 0x72, 0x45, 0xd5, 0xe5, 0x62, 0x2c,
	0xa3, 0xee, 0x33, 0xe6, 0x61, 0x64, 0xc8, 0x38, 0xb7, 0x88, 0x34, 0xcf, 0x0b, 0xf8, 0xca, 0x8c,
	0x3b, 0x1d, 0x28, 0x6a, 0x74, 0x6a, 0xbc, 0x6e, 0x96, 0xbd, 0xc0, 0x04, 0xc6, 0xcb, 0x64, 0xb5,
	0xce, 0x52, 0x16, 0x65, 0x41, 0x76, 0xea, 0x95, 0xbb, 0xf7, 0x03, 0x63, 0x82, 0xb6, 0xcc, 0x9a,
	0x08, 0xad, 0x0d, 0x09, 0x52, 0x46, 0xe7, 0x97, 0xbb, 0xf7, 0xf2, 0x6c, 0xff, 0x0e, 0xb9, 0x1c,
	0xd2, 0x5a, 0x9e, 0x2c, 0xfe, 0xcd, 0x66, 0xae, 0x99, 0x1a, 0xd6, 0x28, 0x5f, 0x6a, 0x52, 0x4b,
	0x4a, 0x46, 0x79, 0x97, 0x27, 0xdf, 0xff, 0x2f, 0xdc, 0x7e, 0x19, 0x97, 0xb3, 0xba, 0x57, 0x32,
	0x50, 0x31, 0x45, 0x6b, 0xce, 0x0e, 0x14, 0x26, 0xaa, 0x92, 0x9c, 0x29, 0x7e, 0x71, 0x40, 0x5e,
	0x95, 0x54, 0xd1, 0xfe, 0x99, 0xfa, 0x4d, 0x47, 0xc6, 0xe4, 0xde, 0xbd, 0x2c, 0xea, 0x2b, 0x8a,
	0xad, 0x77, 0xdf, 0x7e, 0x7c, 0xf8, 0x4f, 0x3a, 0x75, 0x4f, 0xc7, 0x9e, 0x08, 0xc3, 0xb6, 0xaa,
	0xf7, 0x46, 0xf4, 0xde, 0x0e, 0x2c, 0x55, 0xf9, 0x31, 0x1f, 0x48, 0xfe, 0x26, 0x5e, 0xf7, 0x7a,
	0xd2, 0xe1, 0xba, 0xfe, 0x71, 0xdd, 0xf9, 0x09, 0x85, 0x89, 0x79, 0x49, 0xce, 0x83, 0xcb, 0x7e,
	0xe6, 0x25, 0xfd, 0xb3, 0xe3, 0x1d, 0xc8, 0x2c, 0x7f, 0x05, 0xf7, 0xf5, 0xb0, 0xe7, 0x7c, 0xbb,
	0x57, 0xf2, 0x3b, 0x50, 0x73, 0xee, 0x75, 0x16, 0x4a, 0x0b, 0x73, 0xc5, 0xf2, 0x28, 0x3a, 0xcc,
	0x42, 0xc9, 0xf9, 0x08, 0x85, 0xc9, 0xb2, 0x6c, 0x4b, 0x92, 0xce, 0xc3, 0x3f, 0x8e, 0x36, 0x77,
	0xfe, 0xe9, 0xdd, 0x3b, 0xbc, 0xc7, 0x16, 0x3f, 0x63, 0x8b, 0x57, 0xba, 0x6c, 0x15, 0x5f, 0x64,
	0xc3, 0x57, 0x4b, 0x95, 0x61, 0x67, 0x57, 0x1c, 0xb8, 0xfb, 0x2e, 0x63, 0xeb, 0xe9, 0xf8, 0xd9,
	0x12, 0x37, 0x90, 0x2d, 0x31, 0x76, 0xb6, 0xc4, 0xb5, 0x65, 0x4b, 0x8c, 0x8a, 0xad, 0xe7, 0xe3,
	0x67, 0xab, 0x79, 0x03, 0xd9, 0x6a, 0x8e, 0x9d, 0xad, 0xe6, 0xb5, 0x65, 0xab, 0x39, 0x02, 0xb6,
	0x9e, 0x7d, 0x81, 0xfd, 0x04, 0xe1, 0x20, 0x41, 0x38, 0x4c, 0x90, 0x1d, 0x25, 0xc8, 0x8e, 0x13,
	0x64, 0x27, 0x09, 0xb2, 0xd3, 0x04, 0x61, 0xc3, 0x22, 0x6c, 0x5a, 0x64, 0x5b, 0x16, 0x61, 0xdb,
	0x22, 0xdb, 0xb5, 0xc8, 0xf6, 0x2c, 0xb2, 0x7d, 0x8b, 0x70, 0x60, 0x11, 0x0e, 0x2d, 0xb2, 0x23,
	0x8b, 0x70, 0x6c, 0x91, 0x9d, 0x58, 0x84, 0x53, 0x8b, 0x6c, 0x23, 0x45, 0xb6, 0x99, 0x22, 0xbc,
	0x4f, 0x91, 0x7d, 0x4a, 0x11, 0x3e, 0xa7, 0xc8, 0xb6, 0x52, 0x64, 0xdb, 0x29, 0xc2, 0x6e, 0x8a,
	0xb0, 0x97, 0x22, 0x2c, 0x3c, 0x0e, 0x0c, 0xa7, 0x86, 0xa4, 0x86, 0xd2, 0x41, 0xcc, 0xb5, 0xa4,
	0x55, 0x13, 0xb5, 0xbc, 0x8b, 0x3f, 0xf1, 0xb0, 0x15, 0x78, 0x44, 0x3a, 0xac, 0xd5, 0x26, 0xb3,
	0x1d, 0xcc, 0xfc, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x7d, 0xd3, 0x56, 0x10, 0xb1, 0x08, 0x00, 0x00,
}
