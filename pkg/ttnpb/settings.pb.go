// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/TheThingsNetwork/ttn/api/settings.proto

package ttnpb

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"

import time "time"

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

type IdentityServerSettings struct {
	// blacklisted_ids is the list of IDs that are not allowed to use in the network.
	BlacklistedIDs []string `protobuf:"bytes,1,rep,name=blacklisted_ids,json=blacklistedIds" json:"blacklisted_ids,omitempty"`
	// automatic_approval denotes if the users are approved automatically after
	// registration or they need to validate their account through email.
	AutomaticApproval bool `protobuf:"varint,2,opt,name=automatic_approval,json=automaticApproval,proto3" json:"automatic_approval,omitempty"`
	// closed_registration denotes whether people can freely register user accounts
	// or they need to be granted an invitation to do so.
	ClosedRegistration bool `protobuf:"varint,3,opt,name=closed_registration,json=closedRegistration,proto3" json:"closed_registration,omitempty"`
	// validation_token_ttl denotes the time an account validation token is valid
	// after being issued.
	ValidationTokenTTL time.Duration `protobuf:"bytes,4,opt,name=validation_token_ttl,json=validationTokenTtl,stdduration" json:"validation_token_ttl"`
	// allowed_emails is a list of globs to restrict emails to. If empty all emails are valid.
	AllowedEmails []string `protobuf:"bytes,5,rep,name=allowed_emails,json=allowedEmails" json:"allowed_emails,omitempty"`
}

func (m *IdentityServerSettings) Reset()                    { *m = IdentityServerSettings{} }
func (m *IdentityServerSettings) String() string            { return proto.CompactTextString(m) }
func (*IdentityServerSettings) ProtoMessage()               {}
func (*IdentityServerSettings) Descriptor() ([]byte, []int) { return fileDescriptorSettings, []int{0} }

func (m *IdentityServerSettings) GetBlacklistedIDs() []string {
	if m != nil {
		return m.BlacklistedIDs
	}
	return nil
}

func (m *IdentityServerSettings) GetAutomaticApproval() bool {
	if m != nil {
		return m.AutomaticApproval
	}
	return false
}

func (m *IdentityServerSettings) GetClosedRegistration() bool {
	if m != nil {
		return m.ClosedRegistration
	}
	return false
}

func (m *IdentityServerSettings) GetValidationTokenTTL() time.Duration {
	if m != nil {
		return m.ValidationTokenTTL
	}
	return 0
}

func (m *IdentityServerSettings) GetAllowedEmails() []string {
	if m != nil {
		return m.AllowedEmails
	}
	return nil
}

func init() {
	proto.RegisterType((*IdentityServerSettings)(nil), "ttn.v3.IdentityServerSettings")
	golang_proto.RegisterType((*IdentityServerSettings)(nil), "ttn.v3.IdentityServerSettings")
}
func (this *IdentityServerSettings) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*IdentityServerSettings)
	if !ok {
		that2, ok := that.(IdentityServerSettings)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *IdentityServerSettings")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *IdentityServerSettings but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *IdentityServerSettings but is not nil && this == nil")
	}
	if len(this.BlacklistedIDs) != len(that1.BlacklistedIDs) {
		return fmt.Errorf("BlacklistedIDs this(%v) Not Equal that(%v)", len(this.BlacklistedIDs), len(that1.BlacklistedIDs))
	}
	for i := range this.BlacklistedIDs {
		if this.BlacklistedIDs[i] != that1.BlacklistedIDs[i] {
			return fmt.Errorf("BlacklistedIDs this[%v](%v) Not Equal that[%v](%v)", i, this.BlacklistedIDs[i], i, that1.BlacklistedIDs[i])
		}
	}
	if this.AutomaticApproval != that1.AutomaticApproval {
		return fmt.Errorf("AutomaticApproval this(%v) Not Equal that(%v)", this.AutomaticApproval, that1.AutomaticApproval)
	}
	if this.ClosedRegistration != that1.ClosedRegistration {
		return fmt.Errorf("ClosedRegistration this(%v) Not Equal that(%v)", this.ClosedRegistration, that1.ClosedRegistration)
	}
	if this.ValidationTokenTTL != that1.ValidationTokenTTL {
		return fmt.Errorf("ValidationTokenTTL this(%v) Not Equal that(%v)", this.ValidationTokenTTL, that1.ValidationTokenTTL)
	}
	if len(this.AllowedEmails) != len(that1.AllowedEmails) {
		return fmt.Errorf("AllowedEmails this(%v) Not Equal that(%v)", len(this.AllowedEmails), len(that1.AllowedEmails))
	}
	for i := range this.AllowedEmails {
		if this.AllowedEmails[i] != that1.AllowedEmails[i] {
			return fmt.Errorf("AllowedEmails this[%v](%v) Not Equal that[%v](%v)", i, this.AllowedEmails[i], i, that1.AllowedEmails[i])
		}
	}
	return nil
}
func (this *IdentityServerSettings) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*IdentityServerSettings)
	if !ok {
		that2, ok := that.(IdentityServerSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.BlacklistedIDs) != len(that1.BlacklistedIDs) {
		return false
	}
	for i := range this.BlacklistedIDs {
		if this.BlacklistedIDs[i] != that1.BlacklistedIDs[i] {
			return false
		}
	}
	if this.AutomaticApproval != that1.AutomaticApproval {
		return false
	}
	if this.ClosedRegistration != that1.ClosedRegistration {
		return false
	}
	if this.ValidationTokenTTL != that1.ValidationTokenTTL {
		return false
	}
	if len(this.AllowedEmails) != len(that1.AllowedEmails) {
		return false
	}
	for i := range this.AllowedEmails {
		if this.AllowedEmails[i] != that1.AllowedEmails[i] {
			return false
		}
	}
	return true
}
func (m *IdentityServerSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IdentityServerSettings) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BlacklistedIDs) > 0 {
		for _, s := range m.BlacklistedIDs {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.AutomaticApproval {
		dAtA[i] = 0x10
		i++
		if m.AutomaticApproval {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ClosedRegistration {
		dAtA[i] = 0x18
		i++
		if m.ClosedRegistration {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintSettings(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdDuration(m.ValidationTokenTTL)))
	n1, err := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.ValidationTokenTTL, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.AllowedEmails) > 0 {
		for _, s := range m.AllowedEmails {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeVarintSettings(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedIdentityServerSettings(r randySettings, easy bool) *IdentityServerSettings {
	this := &IdentityServerSettings{}
	v1 := r.Intn(10)
	this.BlacklistedIDs = make([]string, v1)
	for i := 0; i < v1; i++ {
		this.BlacklistedIDs[i] = string(randStringSettings(r))
	}
	this.AutomaticApproval = bool(bool(r.Intn(2) == 0))
	this.ClosedRegistration = bool(bool(r.Intn(2) == 0))
	v2 := github_com_gogo_protobuf_types.NewPopulatedStdDuration(r, easy)
	this.ValidationTokenTTL = *v2
	v3 := r.Intn(10)
	this.AllowedEmails = make([]string, v3)
	for i := 0; i < v3; i++ {
		this.AllowedEmails[i] = string(randStringSettings(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randySettings interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneSettings(r randySettings) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringSettings(r randySettings) string {
	v4 := r.Intn(100)
	tmps := make([]rune, v4)
	for i := 0; i < v4; i++ {
		tmps[i] = randUTF8RuneSettings(r)
	}
	return string(tmps)
}
func randUnrecognizedSettings(r randySettings, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldSettings(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldSettings(dAtA []byte, r randySettings, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateSettings(dAtA, uint64(key))
		v5 := r.Int63()
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		dAtA = encodeVarintPopulateSettings(dAtA, uint64(v5))
	case 1:
		dAtA = encodeVarintPopulateSettings(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateSettings(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateSettings(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateSettings(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateSettings(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *IdentityServerSettings) Size() (n int) {
	var l int
	_ = l
	if len(m.BlacklistedIDs) > 0 {
		for _, s := range m.BlacklistedIDs {
			l = len(s)
			n += 1 + l + sovSettings(uint64(l))
		}
	}
	if m.AutomaticApproval {
		n += 2
	}
	if m.ClosedRegistration {
		n += 2
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.ValidationTokenTTL)
	n += 1 + l + sovSettings(uint64(l))
	if len(m.AllowedEmails) > 0 {
		for _, s := range m.AllowedEmails {
			l = len(s)
			n += 1 + l + sovSettings(uint64(l))
		}
	}
	return n
}

func sovSettings(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSettings(x uint64) (n int) {
	return sovSettings(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IdentityServerSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSettings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IdentityServerSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IdentityServerSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlacklistedIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlacklistedIDs = append(m.BlacklistedIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutomaticApproval", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutomaticApproval = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosedRegistration", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClosedRegistration = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationTokenTTL", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.ValidationTokenTTL, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedEmails", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedEmails = append(m.AllowedEmails, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSettings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSettings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSettings(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSettings
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSettings
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSettings
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSettings(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSettings = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSettings   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/settings.proto", fileDescriptorSettings)
}
func init() {
	golang_proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/settings.proto", fileDescriptorSettings)
}

var fileDescriptorSettings = []byte{
	// 461 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x31, 0x6c, 0xd3, 0x40,
	0x14, 0x86, 0xef, 0xb5, 0x50, 0x81, 0x11, 0x41, 0x1c, 0x08, 0x85, 0x0e, 0x2f, 0x11, 0x12, 0x52,
	0x18, 0x6a, 0x4b, 0xed, 0xc8, 0x44, 0x54, 0x86, 0x48, 0x88, 0x21, 0x8d, 0x18, 0x58, 0xac, 0x4b,
	0x7c, 0x38, 0x27, 0x5f, 0x7c, 0x96, 0xfd, 0xe2, 0x8a, 0xad, 0x63, 0x47, 0xc6, 0x6e, 0x30, 0x76,
	0xec, 0xd8, 0xb1, 0x63, 0xd8, 0x3a, 0x76, 0x0a, 0xf5, 0x79, 0xe9, 0xd8, 0xb1, 0x23, 0x8a, 0x1d,
	0xda, 0x88, 0xa5, 0x93, 0xfd, 0xfe, 0xef, 0xff, 0x75, 0xf7, 0x3f, 0x9d, 0xb3, 0x1d, 0x2a, 0x1a,
	0x4f, 0x87, 0xee, 0xc8, 0x4c, 0xbc, 0xc1, 0x58, 0x0e, 0xc6, 0x2a, 0x0e, 0xb3, 0xcf, 0x92, 0xf6,
	0x4d, 0x1a, 0x79, 0x44, 0xb1, 0x27, 0x12, 0xe5, 0x65, 0x92, 0x68, 0xa1, 0xbb, 0x49, 0x6a, 0xc8,
	0xf0, 0x0d, 0xa2, 0xd8, 0xcd, 0x77, 0x36, 0xb7, 0x56, 0xb2, 0xa1, 0x09, 0x8d, 0x57, 0xe1, 0xe1,
	0xf4, 0x5b, 0x35, 0x55, 0x43, 0xf5, 0x57, 0xc7, 0x36, 0x31, 0x34, 0x26, 0xd4, 0xf2, 0xce, 0x15,
	0x4c, 0x53, 0x41, 0xca, 0xc4, 0x35, 0x7f, 0xf3, 0x7b, 0xcd, 0x79, 0xd5, 0x0b, 0x64, 0x4c, 0x8a,
	0xbe, 0xef, 0xc9, 0x34, 0x97, 0xe9, 0xde, 0xf2, 0x5c, 0xfe, 0xde, 0x79, 0x36, 0xd4, 0x62, 0x14,
	0x69, 0x95, 0x91, 0x0c, 0x7c, 0x15, 0x64, 0x4d, 0x68, 0xaf, 0x77, 0x1e, 0x77, 0xb9, 0x9d, 0xb7,
	0x1a, 0xdd, 0x3b, 0xd4, 0xdb, 0xcd, 0xfa, 0x8d, 0x15, 0x6b, 0x2f, 0xc8, 0xf8, 0x96, 0xc3, 0xc5,
	0x94, 0xcc, 0x44, 0x90, 0x1a, 0xf9, 0x22, 0x49, 0x52, 0x93, 0x0b, 0xdd, 0x5c, 0x6b, 0x43, 0xe7,
	0x51, 0xff, 0xf9, 0x2d, 0xf9, 0xb0, 0x04, 0xdc, 0x73, 0x5e, 0x8c, 0xb4, 0xc9, 0x64, 0xe0, 0xa7,
	0x32, 0x54, 0x19, 0xd5, 0x77, 0x6c, 0xae, 0x57, 0x7e, 0x5e, 0xa3, 0xfe, 0x0a, 0xe1, 0x91, 0xf3,
	0x32, 0x17, 0x5a, 0x05, 0xd5, 0xe4, 0x93, 0x89, 0x64, 0xec, 0x13, 0xe9, 0xe6, 0x83, 0x36, 0x74,
	0x9e, 0x6c, 0xbf, 0x76, 0xeb, 0xda, 0xee, 0xbf, 0xda, 0xee, 0xee, 0xb2, 0x76, 0x17, 0x67, 0xf3,
	0x16, 0xb3, 0xf3, 0x16, 0xff, 0x72, 0x1b, 0x1f, 0x2c, 0xd2, 0x83, 0xc1, 0xa7, 0xa3, 0x3f, 0x2d,
	0xe8, 0xf3, 0xfc, 0x3f, 0x9d, 0x34, 0x7f, 0xeb, 0x34, 0x84, 0xd6, 0x66, 0x5f, 0x06, 0xbe, 0x9c,
	0x08, 0xa5, 0xb3, 0xe6, 0xc3, 0xc5, 0x22, 0xfa, 0x4f, 0x97, 0xea, 0xc7, 0x4a, 0xec, 0xfe, 0x84,
	0x59, 0x81, 0x70, 0x5e, 0x20, 0x5c, 0x14, 0x08, 0x97, 0x05, 0xc2, 0x55, 0x81, 0xec, 0xba, 0x40,
	0x76, 0x53, 0x20, 0x1c, 0x58, 0x64, 0x87, 0x16, 0xd9, 0xb1, 0x45, 0x38, 0xb1, 0xc8, 0x4e, 0x2d,
	0xc2, 0x99, 0x45, 0x98, 0x59, 0x84, 0x73, 0x8b, 0x70, 0x61, 0x91, 0x5d, 0x5a, 0x84, 0x2b, 0x8b,
	0xec, 0xda, 0x22, 0xdc, 0x58, 0x64, 0x07, 0x25, 0xb2, 0xc3, 0x12, 0xe1, 0x47, 0x89, 0xec, 0xa8,
	0x44, 0xf8, 0x55, 0x22, 0x3b, 0x2e, 0x91, 0x9d, 0x94, 0x08, 0xa7, 0x25, 0xc2, 0x59, 0x89, 0xf0,
	0xf5, 0xdd, 0x7d, 0xaf, 0x29, 0x89, 0xc2, 0xc5, 0x37, 0x19, 0x0e, 0x37, 0xaa, 0x7d, 0xec, 0xfc,
	0x0d, 0x00, 0x00, 0xff, 0xff, 0x2f, 0x17, 0x47, 0x45, 0x81, 0x02, 0x00, 0x00,
}
