// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/TheThingsNetwork/ttn/api/lorawan.proto

package ttnpb

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_TheThingsNetwork_ttn_pkg_types "github.com/TheThingsNetwork/ttn/pkg/types"

import strconv "strconv"

import bytes "bytes"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MType int32

const (
	MType_JOIN_REQUEST     MType = 0
	MType_JOIN_ACCEPT      MType = 1
	MType_UNCONFIRMED_UP   MType = 2
	MType_UNCONFIRMED_DOWN MType = 3
	MType_CONFIRMED_UP     MType = 4
	MType_CONFIRMED_DOWN   MType = 5
	MType_REJOIN_REQUEST   MType = 6
)

var MType_name = map[int32]string{
	0: "JOIN_REQUEST",
	1: "JOIN_ACCEPT",
	2: "UNCONFIRMED_UP",
	3: "UNCONFIRMED_DOWN",
	4: "CONFIRMED_UP",
	5: "CONFIRMED_DOWN",
	6: "REJOIN_REQUEST",
}
var MType_value = map[string]int32{
	"JOIN_REQUEST":     0,
	"JOIN_ACCEPT":      1,
	"UNCONFIRMED_UP":   2,
	"UNCONFIRMED_DOWN": 3,
	"CONFIRMED_UP":     4,
	"CONFIRMED_DOWN":   5,
	"REJOIN_REQUEST":   6,
}

func (MType) EnumDescriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{0} }

type Major int32

const (
	Major_LORAWAN_R1 Major = 0
)

var Major_name = map[int32]string{
	0: "LORAWAN_R1",
}
var Major_value = map[string]int32{
	"LORAWAN_R1": 0,
}

func (Major) EnumDescriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{1} }

type MACVersion int32

const (
	MAC_UNKNOWN MACVersion = 0
	MAC_V1_0    MACVersion = 1
	MAC_V1_0_1  MACVersion = 2
	MAC_V1_0_2  MACVersion = 3
	MAC_V1_1    MACVersion = 4
)

var MACVersion_name = map[int32]string{
	0: "MAC_UNKNOWN",
	1: "MAC_V1_0",
	2: "MAC_V1_0_1",
	3: "MAC_V1_0_2",
	4: "MAC_V1_1",
}
var MACVersion_value = map[string]int32{
	"MAC_UNKNOWN": 0,
	"MAC_V1_0":    1,
	"MAC_V1_0_1":  2,
	"MAC_V1_0_2":  3,
	"MAC_V1_1":    4,
}

func (MACVersion) EnumDescriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{2} }

type PHYVersion int32

const (
	PHY_UNKNOWN PHYVersion = 0
	PHY_V1_0    PHYVersion = 1
	PHY_V1_0_1  PHYVersion = 2
	PHY_V1_0_2  PHYVersion = 3
	PHY_V1_1    PHYVersion = 4
)

var PHYVersion_name = map[int32]string{
	0: "PHY_UNKNOWN",
	1: "PHY_V1_0",
	2: "PHY_V1_0_1",
	3: "PHY_V1_0_2",
	4: "PHY_V1_1",
}
var PHYVersion_value = map[string]int32{
	"PHY_UNKNOWN": 0,
	"PHY_V1_0":    1,
	"PHY_V1_0_1":  2,
	"PHY_V1_0_2":  3,
	"PHY_V1_1":    4,
}

func (PHYVersion) EnumDescriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{3} }

type RejoinType int32

const (
	RejoinType_CONTEXT RejoinType = 0
	RejoinType_SESSION RejoinType = 1
	RejoinType_KEYS    RejoinType = 2
)

var RejoinType_name = map[int32]string{
	0: "CONTEXT",
	1: "SESSION",
	2: "KEYS",
}
var RejoinType_value = map[string]int32{
	"CONTEXT": 0,
	"SESSION": 1,
	"KEYS":    2,
}

func (RejoinType) EnumDescriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{4} }

type Modulation int32

const (
	Modulation_LORA Modulation = 0
	Modulation_FSK  Modulation = 1
)

var Modulation_name = map[int32]string{
	0: "LORA",
	1: "FSK",
}
var Modulation_value = map[string]int32{
	"LORA": 0,
	"FSK":  1,
}

func (Modulation) EnumDescriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{5} }

type Class int32

const (
	CLASS_A Class = 0
	CLASS_B Class = 1
	CLASS_C Class = 2
)

var Class_name = map[int32]string{
	0: "CLASS_A",
	1: "CLASS_B",
	2: "CLASS_C",
}
var Class_value = map[string]int32{
	"CLASS_A": 0,
	"CLASS_B": 1,
	"CLASS_C": 2,
}

func (Class) EnumDescriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{6} }

type Message struct {
	MHDR `protobuf:"bytes,1,opt,name=m_hdr,json=mHdr,embedded=m_hdr" json:"m_hdr"`
	MIC  []byte `protobuf:"bytes,2,opt,name=mic,proto3" json:"mic,omitempty"`
	// Payload represents either MACPayload, RejoinRequestPayload, JoinRequestPayload or JoinAcceptPayload
	// - MACPayload length is in range [7:M] bytes, where M is region specific(see LoRaWAN spec).
	// - JoinRequestPayload length is 18 bytes.
	// - JoinAcceptPayload length is in range [12:28] bytes.
	// - RejoinRequestPayload length is 14 for Type 0 and 2, 19 for Type 1.
	//
	// Types that are valid to be assigned to Payload:
	//	*Message_MACPayload
	//	*Message_JoinRequestPayload
	//	*Message_JoinAcceptPayload
	//	*Message_RejoinRequestPayload
	Payload isMessage_Payload `protobuf_oneof:"Payload"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{0} }

type isMessage_Payload interface {
	isMessage_Payload()
	Equal(interface{}) bool
	VerboseEqual(interface{}) error
	MarshalTo([]byte) (int, error)
	Size() int
}

type Message_MACPayload struct {
	MACPayload *MACPayload `protobuf:"bytes,3,opt,name=mac_payload,json=macPayload,oneof"`
}
type Message_JoinRequestPayload struct {
	JoinRequestPayload *JoinRequestPayload `protobuf:"bytes,4,opt,name=join_request_payload,json=joinRequestPayload,oneof"`
}
type Message_JoinAcceptPayload struct {
	JoinAcceptPayload *JoinAcceptPayload `protobuf:"bytes,5,opt,name=join_accept_payload,json=joinAcceptPayload,oneof"`
}
type Message_RejoinRequestPayload struct {
	RejoinRequestPayload *RejoinRequestPayload `protobuf:"bytes,6,opt,name=rejoin_request_payload,json=rejoinRequestPayload,oneof"`
}

func (*Message_MACPayload) isMessage_Payload()           {}
func (*Message_JoinRequestPayload) isMessage_Payload()   {}
func (*Message_JoinAcceptPayload) isMessage_Payload()    {}
func (*Message_RejoinRequestPayload) isMessage_Payload() {}

func (m *Message) GetPayload() isMessage_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Message) GetMIC() []byte {
	if m != nil {
		return m.MIC
	}
	return nil
}

func (m *Message) GetMACPayload() *MACPayload {
	if x, ok := m.GetPayload().(*Message_MACPayload); ok {
		return x.MACPayload
	}
	return nil
}

func (m *Message) GetJoinRequestPayload() *JoinRequestPayload {
	if x, ok := m.GetPayload().(*Message_JoinRequestPayload); ok {
		return x.JoinRequestPayload
	}
	return nil
}

func (m *Message) GetJoinAcceptPayload() *JoinAcceptPayload {
	if x, ok := m.GetPayload().(*Message_JoinAcceptPayload); ok {
		return x.JoinAcceptPayload
	}
	return nil
}

func (m *Message) GetRejoinRequestPayload() *RejoinRequestPayload {
	if x, ok := m.GetPayload().(*Message_RejoinRequestPayload); ok {
		return x.RejoinRequestPayload
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Message) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Message_OneofMarshaler, _Message_OneofUnmarshaler, _Message_OneofSizer, []interface{}{
		(*Message_MACPayload)(nil),
		(*Message_JoinRequestPayload)(nil),
		(*Message_JoinAcceptPayload)(nil),
		(*Message_RejoinRequestPayload)(nil),
	}
}

func _Message_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Message)
	// Payload
	switch x := m.Payload.(type) {
	case *Message_MACPayload:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MACPayload); err != nil {
			return err
		}
	case *Message_JoinRequestPayload:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.JoinRequestPayload); err != nil {
			return err
		}
	case *Message_JoinAcceptPayload:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.JoinAcceptPayload); err != nil {
			return err
		}
	case *Message_RejoinRequestPayload:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RejoinRequestPayload); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Message.Payload has unexpected type %T", x)
	}
	return nil
}

func _Message_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Message)
	switch tag {
	case 3: // Payload.mac_payload
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACPayload)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_MACPayload{msg}
		return true, err
	case 4: // Payload.join_request_payload
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JoinRequestPayload)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_JoinRequestPayload{msg}
		return true, err
	case 5: // Payload.join_accept_payload
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JoinAcceptPayload)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_JoinAcceptPayload{msg}
		return true, err
	case 6: // Payload.rejoin_request_payload
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RejoinRequestPayload)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_RejoinRequestPayload{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Message_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Message)
	// Payload
	switch x := m.Payload.(type) {
	case *Message_MACPayload:
		s := proto.Size(x.MACPayload)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_JoinRequestPayload:
		s := proto.Size(x.JoinRequestPayload)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_JoinAcceptPayload:
		s := proto.Size(x.JoinAcceptPayload)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_RejoinRequestPayload:
		s := proto.Size(x.RejoinRequestPayload)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type MHDR struct {
	MType MType `protobuf:"varint,1,opt,name=m_type,json=mType,proto3,enum=ttn.v3.MType" json:"m_type,omitempty"`
	Major Major `protobuf:"varint,2,opt,name=major,proto3,enum=ttn.v3.Major" json:"major,omitempty"`
}

func (m *MHDR) Reset()                    { *m = MHDR{} }
func (m *MHDR) String() string            { return proto.CompactTextString(m) }
func (*MHDR) ProtoMessage()               {}
func (*MHDR) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{1} }

func (m *MHDR) GetMType() MType {
	if m != nil {
		return m.MType
	}
	return MType_JOIN_REQUEST
}

func (m *MHDR) GetMajor() Major {
	if m != nil {
		return m.Major
	}
	return Major_LORAWAN_R1
}

type MACPayload struct {
	FHDR       `protobuf:"bytes,1,opt,name=f_hdr,json=fHdr,embedded=f_hdr" json:"f_hdr"`
	FPort      uint32 `protobuf:"varint,2,opt,name=f_port,json=fPort,proto3" json:"f_port,omitempty"`
	FRMPayload []byte `protobuf:"bytes,3,opt,name=frm_payload,json=frmPayload,proto3" json:"frm_payload,omitempty"`
}

func (m *MACPayload) Reset()                    { *m = MACPayload{} }
func (m *MACPayload) String() string            { return proto.CompactTextString(m) }
func (*MACPayload) ProtoMessage()               {}
func (*MACPayload) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{2} }

func (m *MACPayload) GetFPort() uint32 {
	if m != nil {
		return m.FPort
	}
	return 0
}

func (m *MACPayload) GetFRMPayload() []byte {
	if m != nil {
		return m.FRMPayload
	}
	return nil
}

type FHDR struct {
	DevAddr github_com_TheThingsNetwork_ttn_pkg_types.DevAddr `protobuf:"bytes,1,opt,name=dev_addr,json=devAddr,proto3,customtype=github.com/TheThingsNetwork/ttn/pkg/types.DevAddr" json:"dev_addr"`
	FCtrl   `protobuf:"bytes,2,opt,name=f_ctrl,json=fCtrl,embedded=f_ctrl" json:"f_ctrl"`
	FCnt    uint32 `protobuf:"varint,3,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	FOpts   []byte `protobuf:"bytes,4,opt,name=f_opts,json=fOpts,proto3" json:"f_opts,omitempty"`
}

func (m *FHDR) Reset()                    { *m = FHDR{} }
func (m *FHDR) String() string            { return proto.CompactTextString(m) }
func (*FHDR) ProtoMessage()               {}
func (*FHDR) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{3} }

func (m *FHDR) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

func (m *FHDR) GetFOpts() []byte {
	if m != nil {
		return m.FOpts
	}
	return nil
}

type FCtrl struct {
	ADR       bool `protobuf:"varint,1,opt,name=adr,proto3" json:"adr,omitempty"`
	ADRAckReq bool `protobuf:"varint,2,opt,name=adr_ack_req,json=adrAckReq,proto3" json:"adr_ack_req,omitempty"`
	Ack       bool `protobuf:"varint,3,opt,name=ack,proto3" json:"ack,omitempty"`
	FPending  bool `protobuf:"varint,4,opt,name=f_pending,json=fPending,proto3" json:"f_pending,omitempty"`
	ClassB    bool `protobuf:"varint,5,opt,name=class_b,json=classB,proto3" json:"class_b,omitempty"`
}

func (m *FCtrl) Reset()                    { *m = FCtrl{} }
func (m *FCtrl) String() string            { return proto.CompactTextString(m) }
func (*FCtrl) ProtoMessage()               {}
func (*FCtrl) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{4} }

func (m *FCtrl) GetADR() bool {
	if m != nil {
		return m.ADR
	}
	return false
}

func (m *FCtrl) GetADRAckReq() bool {
	if m != nil {
		return m.ADRAckReq
	}
	return false
}

func (m *FCtrl) GetAck() bool {
	if m != nil {
		return m.Ack
	}
	return false
}

func (m *FCtrl) GetFPending() bool {
	if m != nil {
		return m.FPending
	}
	return false
}

func (m *FCtrl) GetClassB() bool {
	if m != nil {
		return m.ClassB
	}
	return false
}

type JoinRequestPayload struct {
	JoinEUI  github_com_TheThingsNetwork_ttn_pkg_types.EUI64    `protobuf:"bytes,1,opt,name=join_eui,json=joinEui,proto3,customtype=github.com/TheThingsNetwork/ttn/pkg/types.EUI64" json:"join_eui"`
	DevEUI   github_com_TheThingsNetwork_ttn_pkg_types.EUI64    `protobuf:"bytes,2,opt,name=dev_eui,json=devEui,proto3,customtype=github.com/TheThingsNetwork/ttn/pkg/types.EUI64" json:"dev_eui"`
	DevNonce github_com_TheThingsNetwork_ttn_pkg_types.DevNonce `protobuf:"bytes,3,opt,name=dev_nonce,json=devNonce,proto3,customtype=github.com/TheThingsNetwork/ttn/pkg/types.DevNonce" json:"dev_nonce"`
}

func (m *JoinRequestPayload) Reset()                    { *m = JoinRequestPayload{} }
func (m *JoinRequestPayload) String() string            { return proto.CompactTextString(m) }
func (*JoinRequestPayload) ProtoMessage()               {}
func (*JoinRequestPayload) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{5} }

type RejoinRequestPayload struct {
	RejoinType RejoinType                                      `protobuf:"varint,1,opt,name=rejoin_type,json=rejoinType,proto3,enum=ttn.v3.RejoinType" json:"rejoin_type,omitempty"`
	NetID      github_com_TheThingsNetwork_ttn_pkg_types.NetID `protobuf:"bytes,2,opt,name=net_id,json=netId,proto3,customtype=github.com/TheThingsNetwork/ttn/pkg/types.NetID" json:"net_id"`
	JoinEUI    github_com_TheThingsNetwork_ttn_pkg_types.EUI64 `protobuf:"bytes,3,opt,name=join_eui,json=joinEui,proto3,customtype=github.com/TheThingsNetwork/ttn/pkg/types.EUI64" json:"join_eui"`
	DevEUI     github_com_TheThingsNetwork_ttn_pkg_types.EUI64 `protobuf:"bytes,4,opt,name=dev_eui,json=devEui,proto3,customtype=github.com/TheThingsNetwork/ttn/pkg/types.EUI64" json:"dev_eui"`
	RejoinCnt  uint32                                          `protobuf:"varint,5,opt,name=rejoin_cnt,json=rejoinCnt,proto3" json:"rejoin_cnt,omitempty"`
}

func (m *RejoinRequestPayload) Reset()                    { *m = RejoinRequestPayload{} }
func (m *RejoinRequestPayload) String() string            { return proto.CompactTextString(m) }
func (*RejoinRequestPayload) ProtoMessage()               {}
func (*RejoinRequestPayload) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{6} }

func (m *RejoinRequestPayload) GetRejoinType() RejoinType {
	if m != nil {
		return m.RejoinType
	}
	return RejoinType_CONTEXT
}

func (m *RejoinRequestPayload) GetRejoinCnt() uint32 {
	if m != nil {
		return m.RejoinCnt
	}
	return 0
}

type JoinAcceptPayload struct {
	Encrypted  []byte                                              `protobuf:"bytes,1,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
	JoinNonce  github_com_TheThingsNetwork_ttn_pkg_types.JoinNonce `protobuf:"bytes,2,opt,name=join_nonce,json=joinNonce,proto3,customtype=github.com/TheThingsNetwork/ttn/pkg/types.JoinNonce" json:"join_nonce"`
	NetID      github_com_TheThingsNetwork_ttn_pkg_types.NetID     `protobuf:"bytes,3,opt,name=net_id,json=netId,proto3,customtype=github.com/TheThingsNetwork/ttn/pkg/types.NetID" json:"net_id"`
	DevAddr    github_com_TheThingsNetwork_ttn_pkg_types.DevAddr   `protobuf:"bytes,4,opt,name=dev_addr,json=devAddr,proto3,customtype=github.com/TheThingsNetwork/ttn/pkg/types.DevAddr" json:"dev_addr"`
	DLSettings `protobuf:"bytes,5,opt,name=dl_settings,json=dlSettings,embedded=dl_settings" json:"dl_settings"`
	RxDelay    uint32  `protobuf:"varint,6,opt,name=rx_delay,json=rxDelay,proto3" json:"rx_delay,omitempty"`
	CFList     *CFList `protobuf:"bytes,7,opt,name=cf_list,json=cfList" json:"cf_list,omitempty"`
}

func (m *JoinAcceptPayload) Reset()                    { *m = JoinAcceptPayload{} }
func (m *JoinAcceptPayload) String() string            { return proto.CompactTextString(m) }
func (*JoinAcceptPayload) ProtoMessage()               {}
func (*JoinAcceptPayload) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{7} }

func (m *JoinAcceptPayload) GetEncrypted() []byte {
	if m != nil {
		return m.Encrypted
	}
	return nil
}

func (m *JoinAcceptPayload) GetRxDelay() uint32 {
	if m != nil {
		return m.RxDelay
	}
	return 0
}

func (m *JoinAcceptPayload) GetCFList() *CFList {
	if m != nil {
		return m.CFList
	}
	return nil
}

type DLSettings struct {
	Rx1DROffset uint32 `protobuf:"varint,1,opt,name=rx1_dr_offset,json=rx1DrOffset,proto3" json:"rx1_dr_offset,omitempty"`
	Rx2DR       uint32 `protobuf:"varint,2,opt,name=rx2_dr,json=rx2Dr,proto3" json:"rx2_dr,omitempty"`
}

func (m *DLSettings) Reset()                    { *m = DLSettings{} }
func (m *DLSettings) String() string            { return proto.CompactTextString(m) }
func (*DLSettings) ProtoMessage()               {}
func (*DLSettings) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{8} }

func (m *DLSettings) GetRx1DROffset() uint32 {
	if m != nil {
		return m.Rx1DROffset
	}
	return 0
}

func (m *DLSettings) GetRx2DR() uint32 {
	if m != nil {
		return m.Rx2DR
	}
	return 0
}

type CFList struct {
	Freq []uint32 `protobuf:"varint,1,rep,packed,name=freq" json:"freq,omitempty"`
}

func (m *CFList) Reset()                    { *m = CFList{} }
func (m *CFList) String() string            { return proto.CompactTextString(m) }
func (*CFList) ProtoMessage()               {}
func (*CFList) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{9} }

func (m *CFList) GetFreq() []uint32 {
	if m != nil {
		return m.Freq
	}
	return nil
}

// TxSettings contains the LoRaWAN settings for a transmission.
// This message is used in both uplink and downlink
type TxSettings struct {
	Modulation Modulation `protobuf:"varint,1,opt,name=modulation,proto3,enum=ttn.v3.Modulation" json:"modulation,omitempty"`
	// LoRaWAN data rate index
	DataRateIndex int32 `protobuf:"varint,2,opt,name=data_rate_index,json=dataRateIndex,proto3" json:"data_rate_index,omitempty"`
	// Bandwidth in Hz (derived from data_rate_index)
	Bandwidth uint32 `protobuf:"varint,3,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	// LoRa spreading factor (derived from data_rate_index)
	SpreadingFactor uint32 `protobuf:"varint,4,opt,name=spreading_factor,json=spreadingFactor,proto3" json:"spreading_factor,omitempty"`
	// FSK bit rate (derived from data_rate_index)
	BitRate uint32 `protobuf:"varint,5,opt,name=bit_rate,json=bitRate,proto3" json:"bit_rate,omitempty"`
	// LoRa coding rate
	CodingRate string `protobuf:"bytes,6,opt,name=coding_rate,json=codingRate,proto3" json:"coding_rate,omitempty"`
	// Frequency in Hz
	Frequency uint64 `protobuf:"varint,7,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// Transmit power in dBm
	// - not set on uplink messages
	TxPower int32 `protobuf:"varint,8,opt,name=tx_power,json=txPower,proto3" json:"tx_power,omitempty"`
	// LoRa polarization inversion
	// - gateway to end device: true
	// - end device to gateway: false
	PolarizationInversion bool `protobuf:"varint,9,opt,name=polarization_inversion,json=polarizationInversion,proto3" json:"polarization_inversion,omitempty"`
}

func (m *TxSettings) Reset()                    { *m = TxSettings{} }
func (m *TxSettings) String() string            { return proto.CompactTextString(m) }
func (*TxSettings) ProtoMessage()               {}
func (*TxSettings) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{10} }

func (m *TxSettings) GetModulation() Modulation {
	if m != nil {
		return m.Modulation
	}
	return Modulation_LORA
}

func (m *TxSettings) GetDataRateIndex() int32 {
	if m != nil {
		return m.DataRateIndex
	}
	return 0
}

func (m *TxSettings) GetBandwidth() uint32 {
	if m != nil {
		return m.Bandwidth
	}
	return 0
}

func (m *TxSettings) GetSpreadingFactor() uint32 {
	if m != nil {
		return m.SpreadingFactor
	}
	return 0
}

func (m *TxSettings) GetBitRate() uint32 {
	if m != nil {
		return m.BitRate
	}
	return 0
}

func (m *TxSettings) GetCodingRate() string {
	if m != nil {
		return m.CodingRate
	}
	return ""
}

func (m *TxSettings) GetFrequency() uint64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *TxSettings) GetTxPower() int32 {
	if m != nil {
		return m.TxPower
	}
	return 0
}

func (m *TxSettings) GetPolarizationInversion() bool {
	if m != nil {
		return m.PolarizationInversion
	}
	return false
}

func init() {
	proto.RegisterType((*Message)(nil), "ttn.v3.Message")
	golang_proto.RegisterType((*Message)(nil), "ttn.v3.Message")
	proto.RegisterType((*MHDR)(nil), "ttn.v3.MHDR")
	golang_proto.RegisterType((*MHDR)(nil), "ttn.v3.MHDR")
	proto.RegisterType((*MACPayload)(nil), "ttn.v3.MACPayload")
	golang_proto.RegisterType((*MACPayload)(nil), "ttn.v3.MACPayload")
	proto.RegisterType((*FHDR)(nil), "ttn.v3.FHDR")
	golang_proto.RegisterType((*FHDR)(nil), "ttn.v3.FHDR")
	proto.RegisterType((*FCtrl)(nil), "ttn.v3.FCtrl")
	golang_proto.RegisterType((*FCtrl)(nil), "ttn.v3.FCtrl")
	proto.RegisterType((*JoinRequestPayload)(nil), "ttn.v3.JoinRequestPayload")
	golang_proto.RegisterType((*JoinRequestPayload)(nil), "ttn.v3.JoinRequestPayload")
	proto.RegisterType((*RejoinRequestPayload)(nil), "ttn.v3.RejoinRequestPayload")
	golang_proto.RegisterType((*RejoinRequestPayload)(nil), "ttn.v3.RejoinRequestPayload")
	proto.RegisterType((*JoinAcceptPayload)(nil), "ttn.v3.JoinAcceptPayload")
	golang_proto.RegisterType((*JoinAcceptPayload)(nil), "ttn.v3.JoinAcceptPayload")
	proto.RegisterType((*DLSettings)(nil), "ttn.v3.DLSettings")
	golang_proto.RegisterType((*DLSettings)(nil), "ttn.v3.DLSettings")
	proto.RegisterType((*CFList)(nil), "ttn.v3.CFList")
	golang_proto.RegisterType((*CFList)(nil), "ttn.v3.CFList")
	proto.RegisterType((*TxSettings)(nil), "ttn.v3.TxSettings")
	golang_proto.RegisterType((*TxSettings)(nil), "ttn.v3.TxSettings")
	proto.RegisterEnum("ttn.v3.MType", MType_name, MType_value)
	golang_proto.RegisterEnum("ttn.v3.MType", MType_name, MType_value)
	proto.RegisterEnum("ttn.v3.Major", Major_name, Major_value)
	golang_proto.RegisterEnum("ttn.v3.Major", Major_name, Major_value)
	proto.RegisterEnum("ttn.v3.MACVersion", MACVersion_name, MACVersion_value)
	golang_proto.RegisterEnum("ttn.v3.MACVersion", MACVersion_name, MACVersion_value)
	proto.RegisterEnum("ttn.v3.PHYVersion", PHYVersion_name, PHYVersion_value)
	golang_proto.RegisterEnum("ttn.v3.PHYVersion", PHYVersion_name, PHYVersion_value)
	proto.RegisterEnum("ttn.v3.RejoinType", RejoinType_name, RejoinType_value)
	golang_proto.RegisterEnum("ttn.v3.RejoinType", RejoinType_name, RejoinType_value)
	proto.RegisterEnum("ttn.v3.Modulation", Modulation_name, Modulation_value)
	golang_proto.RegisterEnum("ttn.v3.Modulation", Modulation_name, Modulation_value)
	proto.RegisterEnum("ttn.v3.Class", Class_name, Class_value)
	golang_proto.RegisterEnum("ttn.v3.Class", Class_name, Class_value)
}
func (x MType) String() string {
	s, ok := MType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Major) String() string {
	s, ok := Major_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x MACVersion) String() string {
	s, ok := MACVersion_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x PHYVersion) String() string {
	s, ok := PHYVersion_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x RejoinType) String() string {
	s, ok := RejoinType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Modulation) String() string {
	s, ok := Modulation_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Class) String() string {
	s, ok := Class_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Message) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Message)
	if !ok {
		that2, ok := that.(Message)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Message")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Message but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Message but is not nil && this == nil")
	}
	if !this.MHDR.Equal(&that1.MHDR) {
		return fmt.Errorf("MHDR this(%v) Not Equal that(%v)", this.MHDR, that1.MHDR)
	}
	if !bytes.Equal(this.MIC, that1.MIC) {
		return fmt.Errorf("MIC this(%v) Not Equal that(%v)", this.MIC, that1.MIC)
	}
	if that1.Payload == nil {
		if this.Payload != nil {
			return fmt.Errorf("this.Payload != nil && that1.Payload == nil")
		}
	} else if this.Payload == nil {
		return fmt.Errorf("this.Payload == nil && that1.Payload != nil")
	} else if err := this.Payload.VerboseEqual(that1.Payload); err != nil {
		return err
	}
	return nil
}
func (this *Message_MACPayload) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Message_MACPayload)
	if !ok {
		that2, ok := that.(Message_MACPayload)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Message_MACPayload")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Message_MACPayload but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Message_MACPayload but is not nil && this == nil")
	}
	if !this.MACPayload.Equal(that1.MACPayload) {
		return fmt.Errorf("MACPayload this(%v) Not Equal that(%v)", this.MACPayload, that1.MACPayload)
	}
	return nil
}
func (this *Message_JoinRequestPayload) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Message_JoinRequestPayload)
	if !ok {
		that2, ok := that.(Message_JoinRequestPayload)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Message_JoinRequestPayload")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Message_JoinRequestPayload but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Message_JoinRequestPayload but is not nil && this == nil")
	}
	if !this.JoinRequestPayload.Equal(that1.JoinRequestPayload) {
		return fmt.Errorf("JoinRequestPayload this(%v) Not Equal that(%v)", this.JoinRequestPayload, that1.JoinRequestPayload)
	}
	return nil
}
func (this *Message_JoinAcceptPayload) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Message_JoinAcceptPayload)
	if !ok {
		that2, ok := that.(Message_JoinAcceptPayload)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Message_JoinAcceptPayload")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Message_JoinAcceptPayload but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Message_JoinAcceptPayload but is not nil && this == nil")
	}
	if !this.JoinAcceptPayload.Equal(that1.JoinAcceptPayload) {
		return fmt.Errorf("JoinAcceptPayload this(%v) Not Equal that(%v)", this.JoinAcceptPayload, that1.JoinAcceptPayload)
	}
	return nil
}
func (this *Message_RejoinRequestPayload) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Message_RejoinRequestPayload)
	if !ok {
		that2, ok := that.(Message_RejoinRequestPayload)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Message_RejoinRequestPayload")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Message_RejoinRequestPayload but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Message_RejoinRequestPayload but is not nil && this == nil")
	}
	if !this.RejoinRequestPayload.Equal(that1.RejoinRequestPayload) {
		return fmt.Errorf("RejoinRequestPayload this(%v) Not Equal that(%v)", this.RejoinRequestPayload, that1.RejoinRequestPayload)
	}
	return nil
}
func (this *Message) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Message)
	if !ok {
		that2, ok := that.(Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.MHDR.Equal(&that1.MHDR) {
		return false
	}
	if !bytes.Equal(this.MIC, that1.MIC) {
		return false
	}
	if that1.Payload == nil {
		if this.Payload != nil {
			return false
		}
	} else if this.Payload == nil {
		return false
	} else if !this.Payload.Equal(that1.Payload) {
		return false
	}
	return true
}
func (this *Message_MACPayload) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Message_MACPayload)
	if !ok {
		that2, ok := that.(Message_MACPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.MACPayload.Equal(that1.MACPayload) {
		return false
	}
	return true
}
func (this *Message_JoinRequestPayload) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Message_JoinRequestPayload)
	if !ok {
		that2, ok := that.(Message_JoinRequestPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.JoinRequestPayload.Equal(that1.JoinRequestPayload) {
		return false
	}
	return true
}
func (this *Message_JoinAcceptPayload) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Message_JoinAcceptPayload)
	if !ok {
		that2, ok := that.(Message_JoinAcceptPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.JoinAcceptPayload.Equal(that1.JoinAcceptPayload) {
		return false
	}
	return true
}
func (this *Message_RejoinRequestPayload) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Message_RejoinRequestPayload)
	if !ok {
		that2, ok := that.(Message_RejoinRequestPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.RejoinRequestPayload.Equal(that1.RejoinRequestPayload) {
		return false
	}
	return true
}
func (this *MHDR) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MHDR)
	if !ok {
		that2, ok := that.(MHDR)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MHDR")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MHDR but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MHDR but is not nil && this == nil")
	}
	if this.MType != that1.MType {
		return fmt.Errorf("MType this(%v) Not Equal that(%v)", this.MType, that1.MType)
	}
	if this.Major != that1.Major {
		return fmt.Errorf("Major this(%v) Not Equal that(%v)", this.Major, that1.Major)
	}
	return nil
}
func (this *MHDR) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MHDR)
	if !ok {
		that2, ok := that.(MHDR)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.MType != that1.MType {
		return false
	}
	if this.Major != that1.Major {
		return false
	}
	return true
}
func (this *MACPayload) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACPayload)
	if !ok {
		that2, ok := that.(MACPayload)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACPayload")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACPayload but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACPayload but is not nil && this == nil")
	}
	if !this.FHDR.Equal(&that1.FHDR) {
		return fmt.Errorf("FHDR this(%v) Not Equal that(%v)", this.FHDR, that1.FHDR)
	}
	if this.FPort != that1.FPort {
		return fmt.Errorf("FPort this(%v) Not Equal that(%v)", this.FPort, that1.FPort)
	}
	if !bytes.Equal(this.FRMPayload, that1.FRMPayload) {
		return fmt.Errorf("FRMPayload this(%v) Not Equal that(%v)", this.FRMPayload, that1.FRMPayload)
	}
	return nil
}
func (this *MACPayload) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACPayload)
	if !ok {
		that2, ok := that.(MACPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.FHDR.Equal(&that1.FHDR) {
		return false
	}
	if this.FPort != that1.FPort {
		return false
	}
	if !bytes.Equal(this.FRMPayload, that1.FRMPayload) {
		return false
	}
	return true
}
func (this *FHDR) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FHDR)
	if !ok {
		that2, ok := that.(FHDR)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FHDR")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FHDR but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FHDR but is not nil && this == nil")
	}
	if !this.DevAddr.Equal(that1.DevAddr) {
		return fmt.Errorf("DevAddr this(%v) Not Equal that(%v)", this.DevAddr, that1.DevAddr)
	}
	if !this.FCtrl.Equal(&that1.FCtrl) {
		return fmt.Errorf("FCtrl this(%v) Not Equal that(%v)", this.FCtrl, that1.FCtrl)
	}
	if this.FCnt != that1.FCnt {
		return fmt.Errorf("FCnt this(%v) Not Equal that(%v)", this.FCnt, that1.FCnt)
	}
	if !bytes.Equal(this.FOpts, that1.FOpts) {
		return fmt.Errorf("FOpts this(%v) Not Equal that(%v)", this.FOpts, that1.FOpts)
	}
	return nil
}
func (this *FHDR) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*FHDR)
	if !ok {
		that2, ok := that.(FHDR)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.DevAddr.Equal(that1.DevAddr) {
		return false
	}
	if !this.FCtrl.Equal(&that1.FCtrl) {
		return false
	}
	if this.FCnt != that1.FCnt {
		return false
	}
	if !bytes.Equal(this.FOpts, that1.FOpts) {
		return false
	}
	return true
}
func (this *FCtrl) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FCtrl)
	if !ok {
		that2, ok := that.(FCtrl)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FCtrl")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FCtrl but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FCtrl but is not nil && this == nil")
	}
	if this.ADR != that1.ADR {
		return fmt.Errorf("ADR this(%v) Not Equal that(%v)", this.ADR, that1.ADR)
	}
	if this.ADRAckReq != that1.ADRAckReq {
		return fmt.Errorf("ADRAckReq this(%v) Not Equal that(%v)", this.ADRAckReq, that1.ADRAckReq)
	}
	if this.Ack != that1.Ack {
		return fmt.Errorf("Ack this(%v) Not Equal that(%v)", this.Ack, that1.Ack)
	}
	if this.FPending != that1.FPending {
		return fmt.Errorf("FPending this(%v) Not Equal that(%v)", this.FPending, that1.FPending)
	}
	if this.ClassB != that1.ClassB {
		return fmt.Errorf("ClassB this(%v) Not Equal that(%v)", this.ClassB, that1.ClassB)
	}
	return nil
}
func (this *FCtrl) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*FCtrl)
	if !ok {
		that2, ok := that.(FCtrl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ADR != that1.ADR {
		return false
	}
	if this.ADRAckReq != that1.ADRAckReq {
		return false
	}
	if this.Ack != that1.Ack {
		return false
	}
	if this.FPending != that1.FPending {
		return false
	}
	if this.ClassB != that1.ClassB {
		return false
	}
	return true
}
func (this *JoinRequestPayload) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*JoinRequestPayload)
	if !ok {
		that2, ok := that.(JoinRequestPayload)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *JoinRequestPayload")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *JoinRequestPayload but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *JoinRequestPayload but is not nil && this == nil")
	}
	if !this.JoinEUI.Equal(that1.JoinEUI) {
		return fmt.Errorf("JoinEUI this(%v) Not Equal that(%v)", this.JoinEUI, that1.JoinEUI)
	}
	if !this.DevEUI.Equal(that1.DevEUI) {
		return fmt.Errorf("DevEUI this(%v) Not Equal that(%v)", this.DevEUI, that1.DevEUI)
	}
	if !this.DevNonce.Equal(that1.DevNonce) {
		return fmt.Errorf("DevNonce this(%v) Not Equal that(%v)", this.DevNonce, that1.DevNonce)
	}
	return nil
}
func (this *JoinRequestPayload) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*JoinRequestPayload)
	if !ok {
		that2, ok := that.(JoinRequestPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.JoinEUI.Equal(that1.JoinEUI) {
		return false
	}
	if !this.DevEUI.Equal(that1.DevEUI) {
		return false
	}
	if !this.DevNonce.Equal(that1.DevNonce) {
		return false
	}
	return true
}
func (this *RejoinRequestPayload) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RejoinRequestPayload)
	if !ok {
		that2, ok := that.(RejoinRequestPayload)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RejoinRequestPayload")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RejoinRequestPayload but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RejoinRequestPayload but is not nil && this == nil")
	}
	if this.RejoinType != that1.RejoinType {
		return fmt.Errorf("RejoinType this(%v) Not Equal that(%v)", this.RejoinType, that1.RejoinType)
	}
	if !this.NetID.Equal(that1.NetID) {
		return fmt.Errorf("NetID this(%v) Not Equal that(%v)", this.NetID, that1.NetID)
	}
	if !this.JoinEUI.Equal(that1.JoinEUI) {
		return fmt.Errorf("JoinEUI this(%v) Not Equal that(%v)", this.JoinEUI, that1.JoinEUI)
	}
	if !this.DevEUI.Equal(that1.DevEUI) {
		return fmt.Errorf("DevEUI this(%v) Not Equal that(%v)", this.DevEUI, that1.DevEUI)
	}
	if this.RejoinCnt != that1.RejoinCnt {
		return fmt.Errorf("RejoinCnt this(%v) Not Equal that(%v)", this.RejoinCnt, that1.RejoinCnt)
	}
	return nil
}
func (this *RejoinRequestPayload) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RejoinRequestPayload)
	if !ok {
		that2, ok := that.(RejoinRequestPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.RejoinType != that1.RejoinType {
		return false
	}
	if !this.NetID.Equal(that1.NetID) {
		return false
	}
	if !this.JoinEUI.Equal(that1.JoinEUI) {
		return false
	}
	if !this.DevEUI.Equal(that1.DevEUI) {
		return false
	}
	if this.RejoinCnt != that1.RejoinCnt {
		return false
	}
	return true
}
func (this *JoinAcceptPayload) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*JoinAcceptPayload)
	if !ok {
		that2, ok := that.(JoinAcceptPayload)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *JoinAcceptPayload")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *JoinAcceptPayload but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *JoinAcceptPayload but is not nil && this == nil")
	}
	if !bytes.Equal(this.Encrypted, that1.Encrypted) {
		return fmt.Errorf("Encrypted this(%v) Not Equal that(%v)", this.Encrypted, that1.Encrypted)
	}
	if !this.JoinNonce.Equal(that1.JoinNonce) {
		return fmt.Errorf("JoinNonce this(%v) Not Equal that(%v)", this.JoinNonce, that1.JoinNonce)
	}
	if !this.NetID.Equal(that1.NetID) {
		return fmt.Errorf("NetID this(%v) Not Equal that(%v)", this.NetID, that1.NetID)
	}
	if !this.DevAddr.Equal(that1.DevAddr) {
		return fmt.Errorf("DevAddr this(%v) Not Equal that(%v)", this.DevAddr, that1.DevAddr)
	}
	if !this.DLSettings.Equal(&that1.DLSettings) {
		return fmt.Errorf("DLSettings this(%v) Not Equal that(%v)", this.DLSettings, that1.DLSettings)
	}
	if this.RxDelay != that1.RxDelay {
		return fmt.Errorf("RxDelay this(%v) Not Equal that(%v)", this.RxDelay, that1.RxDelay)
	}
	if !this.CFList.Equal(that1.CFList) {
		return fmt.Errorf("CFList this(%v) Not Equal that(%v)", this.CFList, that1.CFList)
	}
	return nil
}
func (this *JoinAcceptPayload) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*JoinAcceptPayload)
	if !ok {
		that2, ok := that.(JoinAcceptPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Encrypted, that1.Encrypted) {
		return false
	}
	if !this.JoinNonce.Equal(that1.JoinNonce) {
		return false
	}
	if !this.NetID.Equal(that1.NetID) {
		return false
	}
	if !this.DevAddr.Equal(that1.DevAddr) {
		return false
	}
	if !this.DLSettings.Equal(&that1.DLSettings) {
		return false
	}
	if this.RxDelay != that1.RxDelay {
		return false
	}
	if !this.CFList.Equal(that1.CFList) {
		return false
	}
	return true
}
func (this *DLSettings) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DLSettings)
	if !ok {
		that2, ok := that.(DLSettings)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DLSettings")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DLSettings but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DLSettings but is not nil && this == nil")
	}
	if this.Rx1DROffset != that1.Rx1DROffset {
		return fmt.Errorf("Rx1DROffset this(%v) Not Equal that(%v)", this.Rx1DROffset, that1.Rx1DROffset)
	}
	if this.Rx2DR != that1.Rx2DR {
		return fmt.Errorf("Rx2DR this(%v) Not Equal that(%v)", this.Rx2DR, that1.Rx2DR)
	}
	return nil
}
func (this *DLSettings) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DLSettings)
	if !ok {
		that2, ok := that.(DLSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Rx1DROffset != that1.Rx1DROffset {
		return false
	}
	if this.Rx2DR != that1.Rx2DR {
		return false
	}
	return true
}
func (this *CFList) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CFList)
	if !ok {
		that2, ok := that.(CFList)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CFList")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CFList but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CFList but is not nil && this == nil")
	}
	if len(this.Freq) != len(that1.Freq) {
		return fmt.Errorf("Freq this(%v) Not Equal that(%v)", len(this.Freq), len(that1.Freq))
	}
	for i := range this.Freq {
		if this.Freq[i] != that1.Freq[i] {
			return fmt.Errorf("Freq this[%v](%v) Not Equal that[%v](%v)", i, this.Freq[i], i, that1.Freq[i])
		}
	}
	return nil
}
func (this *CFList) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CFList)
	if !ok {
		that2, ok := that.(CFList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Freq) != len(that1.Freq) {
		return false
	}
	for i := range this.Freq {
		if this.Freq[i] != that1.Freq[i] {
			return false
		}
	}
	return true
}
func (this *TxSettings) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*TxSettings)
	if !ok {
		that2, ok := that.(TxSettings)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *TxSettings")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *TxSettings but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *TxSettings but is not nil && this == nil")
	}
	if this.Modulation != that1.Modulation {
		return fmt.Errorf("Modulation this(%v) Not Equal that(%v)", this.Modulation, that1.Modulation)
	}
	if this.DataRateIndex != that1.DataRateIndex {
		return fmt.Errorf("DataRateIndex this(%v) Not Equal that(%v)", this.DataRateIndex, that1.DataRateIndex)
	}
	if this.Bandwidth != that1.Bandwidth {
		return fmt.Errorf("Bandwidth this(%v) Not Equal that(%v)", this.Bandwidth, that1.Bandwidth)
	}
	if this.SpreadingFactor != that1.SpreadingFactor {
		return fmt.Errorf("SpreadingFactor this(%v) Not Equal that(%v)", this.SpreadingFactor, that1.SpreadingFactor)
	}
	if this.BitRate != that1.BitRate {
		return fmt.Errorf("BitRate this(%v) Not Equal that(%v)", this.BitRate, that1.BitRate)
	}
	if this.CodingRate != that1.CodingRate {
		return fmt.Errorf("CodingRate this(%v) Not Equal that(%v)", this.CodingRate, that1.CodingRate)
	}
	if this.Frequency != that1.Frequency {
		return fmt.Errorf("Frequency this(%v) Not Equal that(%v)", this.Frequency, that1.Frequency)
	}
	if this.TxPower != that1.TxPower {
		return fmt.Errorf("TxPower this(%v) Not Equal that(%v)", this.TxPower, that1.TxPower)
	}
	if this.PolarizationInversion != that1.PolarizationInversion {
		return fmt.Errorf("PolarizationInversion this(%v) Not Equal that(%v)", this.PolarizationInversion, that1.PolarizationInversion)
	}
	return nil
}
func (this *TxSettings) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TxSettings)
	if !ok {
		that2, ok := that.(TxSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Modulation != that1.Modulation {
		return false
	}
	if this.DataRateIndex != that1.DataRateIndex {
		return false
	}
	if this.Bandwidth != that1.Bandwidth {
		return false
	}
	if this.SpreadingFactor != that1.SpreadingFactor {
		return false
	}
	if this.BitRate != that1.BitRate {
		return false
	}
	if this.CodingRate != that1.CodingRate {
		return false
	}
	if this.Frequency != that1.Frequency {
		return false
	}
	if this.TxPower != that1.TxPower {
		return false
	}
	if this.PolarizationInversion != that1.PolarizationInversion {
		return false
	}
	return true
}
func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.MHDR.Size()))
	n1, err := m.MHDR.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.MIC) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.MIC)))
		i += copy(dAtA[i:], m.MIC)
	}
	if m.Payload != nil {
		nn2, err := m.Payload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	return i, nil
}

func (m *Message_MACPayload) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MACPayload != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.MACPayload.Size()))
		n3, err := m.MACPayload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *Message_JoinRequestPayload) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.JoinRequestPayload != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.JoinRequestPayload.Size()))
		n4, err := m.JoinRequestPayload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *Message_JoinAcceptPayload) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.JoinAcceptPayload != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.JoinAcceptPayload.Size()))
		n5, err := m.JoinAcceptPayload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *Message_RejoinRequestPayload) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RejoinRequestPayload != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.RejoinRequestPayload.Size()))
		n6, err := m.RejoinRequestPayload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *MHDR) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MHDR) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.MType))
	}
	if m.Major != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Major))
	}
	return i, nil
}

func (m *MACPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.FHDR.Size()))
	n7, err := m.FHDR.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	if m.FPort != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.FPort))
	}
	if len(m.FRMPayload) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.FRMPayload)))
		i += copy(dAtA[i:], m.FRMPayload)
	}
	return i, nil
}

func (m *FHDR) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FHDR) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.DevAddr.Size()))
	n8, err := m.DevAddr.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	dAtA[i] = 0x12
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.FCtrl.Size()))
	n9, err := m.FCtrl.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	if m.FCnt != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.FCnt))
	}
	if len(m.FOpts) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.FOpts)))
		i += copy(dAtA[i:], m.FOpts)
	}
	return i, nil
}

func (m *FCtrl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FCtrl) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ADR {
		dAtA[i] = 0x8
		i++
		if m.ADR {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ADRAckReq {
		dAtA[i] = 0x10
		i++
		if m.ADRAckReq {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Ack {
		dAtA[i] = 0x18
		i++
		if m.Ack {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.FPending {
		dAtA[i] = 0x20
		i++
		if m.FPending {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ClassB {
		dAtA[i] = 0x28
		i++
		if m.ClassB {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *JoinRequestPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinRequestPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.JoinEUI.Size()))
	n10, err := m.JoinEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	dAtA[i] = 0x12
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.DevEUI.Size()))
	n11, err := m.DevEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	dAtA[i] = 0x1a
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.DevNonce.Size()))
	n12, err := m.DevNonce.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	return i, nil
}

func (m *RejoinRequestPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RejoinRequestPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RejoinType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.RejoinType))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.NetID.Size()))
	n13, err := m.NetID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	dAtA[i] = 0x1a
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.JoinEUI.Size()))
	n14, err := m.JoinEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	dAtA[i] = 0x22
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.DevEUI.Size()))
	n15, err := m.DevEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	if m.RejoinCnt != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.RejoinCnt))
	}
	return i, nil
}

func (m *JoinAcceptPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinAcceptPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Encrypted) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.Encrypted)))
		i += copy(dAtA[i:], m.Encrypted)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.JoinNonce.Size()))
	n16, err := m.JoinNonce.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	dAtA[i] = 0x1a
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.NetID.Size()))
	n17, err := m.NetID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n17
	dAtA[i] = 0x22
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.DevAddr.Size()))
	n18, err := m.DevAddr.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n18
	dAtA[i] = 0x2a
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.DLSettings.Size()))
	n19, err := m.DLSettings.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n19
	if m.RxDelay != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.RxDelay))
	}
	if m.CFList != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.CFList.Size()))
		n20, err := m.CFList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}

func (m *DLSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DLSettings) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rx1DROffset != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Rx1DROffset))
	}
	if m.Rx2DR != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Rx2DR))
	}
	return i, nil
}

func (m *CFList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CFList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Freq) > 0 {
		dAtA22 := make([]byte, len(m.Freq)*10)
		var j21 int
		for _, num := range m.Freq {
			for num >= 1<<7 {
				dAtA22[j21] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j21++
			}
			dAtA22[j21] = uint8(num)
			j21++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(j21))
		i += copy(dAtA[i:], dAtA22[:j21])
	}
	return i, nil
}

func (m *TxSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxSettings) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Modulation != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Modulation))
	}
	if m.DataRateIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.DataRateIndex))
	}
	if m.Bandwidth != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Bandwidth))
	}
	if m.SpreadingFactor != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.SpreadingFactor))
	}
	if m.BitRate != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.BitRate))
	}
	if len(m.CodingRate) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.CodingRate)))
		i += copy(dAtA[i:], m.CodingRate)
	}
	if m.Frequency != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Frequency))
	}
	if m.TxPower != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.TxPower))
	}
	if m.PolarizationInversion {
		dAtA[i] = 0x48
		i++
		if m.PolarizationInversion {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintLorawan(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedMHDR(r randyLorawan, easy bool) *MHDR {
	this := &MHDR{}
	this.MType = MType([]int32{0, 1, 2, 3, 4, 5, 6}[r.Intn(7)])
	this.Major = Major([]int32{0}[r.Intn(1)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFCtrl(r randyLorawan, easy bool) *FCtrl {
	this := &FCtrl{}
	this.ADR = bool(bool(r.Intn(2) == 0))
	this.ADRAckReq = bool(bool(r.Intn(2) == 0))
	this.Ack = bool(bool(r.Intn(2) == 0))
	this.FPending = bool(bool(r.Intn(2) == 0))
	this.ClassB = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTxSettings(r randyLorawan, easy bool) *TxSettings {
	this := &TxSettings{}
	this.Modulation = Modulation([]int32{0, 1}[r.Intn(2)])
	this.DataRateIndex = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.DataRateIndex *= -1
	}
	this.Bandwidth = uint32(r.Uint32())
	this.SpreadingFactor = uint32(r.Uint32())
	this.BitRate = uint32(r.Uint32())
	this.CodingRate = string(randStringLorawan(r))
	this.Frequency = uint64(uint64(r.Uint32()))
	this.TxPower = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.TxPower *= -1
	}
	this.PolarizationInversion = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyLorawan interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneLorawan(r randyLorawan) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringLorawan(r randyLorawan) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneLorawan(r)
	}
	return string(tmps)
}
func randUnrecognizedLorawan(r randyLorawan, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldLorawan(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldLorawan(dAtA []byte, r randyLorawan, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateLorawan(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateLorawan(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateLorawan(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateLorawan(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateLorawan(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateLorawan(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateLorawan(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Message) Size() (n int) {
	var l int
	_ = l
	l = m.MHDR.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = len(m.MIC)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	return n
}

func (m *Message_MACPayload) Size() (n int) {
	var l int
	_ = l
	if m.MACPayload != nil {
		l = m.MACPayload.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *Message_JoinRequestPayload) Size() (n int) {
	var l int
	_ = l
	if m.JoinRequestPayload != nil {
		l = m.JoinRequestPayload.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *Message_JoinAcceptPayload) Size() (n int) {
	var l int
	_ = l
	if m.JoinAcceptPayload != nil {
		l = m.JoinAcceptPayload.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *Message_RejoinRequestPayload) Size() (n int) {
	var l int
	_ = l
	if m.RejoinRequestPayload != nil {
		l = m.RejoinRequestPayload.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MHDR) Size() (n int) {
	var l int
	_ = l
	if m.MType != 0 {
		n += 1 + sovLorawan(uint64(m.MType))
	}
	if m.Major != 0 {
		n += 1 + sovLorawan(uint64(m.Major))
	}
	return n
}

func (m *MACPayload) Size() (n int) {
	var l int
	_ = l
	l = m.FHDR.Size()
	n += 1 + l + sovLorawan(uint64(l))
	if m.FPort != 0 {
		n += 1 + sovLorawan(uint64(m.FPort))
	}
	l = len(m.FRMPayload)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}

func (m *FHDR) Size() (n int) {
	var l int
	_ = l
	l = m.DevAddr.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.FCtrl.Size()
	n += 1 + l + sovLorawan(uint64(l))
	if m.FCnt != 0 {
		n += 1 + sovLorawan(uint64(m.FCnt))
	}
	l = len(m.FOpts)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}

func (m *FCtrl) Size() (n int) {
	var l int
	_ = l
	if m.ADR {
		n += 2
	}
	if m.ADRAckReq {
		n += 2
	}
	if m.Ack {
		n += 2
	}
	if m.FPending {
		n += 2
	}
	if m.ClassB {
		n += 2
	}
	return n
}

func (m *JoinRequestPayload) Size() (n int) {
	var l int
	_ = l
	l = m.JoinEUI.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.DevEUI.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.DevNonce.Size()
	n += 1 + l + sovLorawan(uint64(l))
	return n
}

func (m *RejoinRequestPayload) Size() (n int) {
	var l int
	_ = l
	if m.RejoinType != 0 {
		n += 1 + sovLorawan(uint64(m.RejoinType))
	}
	l = m.NetID.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.JoinEUI.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.DevEUI.Size()
	n += 1 + l + sovLorawan(uint64(l))
	if m.RejoinCnt != 0 {
		n += 1 + sovLorawan(uint64(m.RejoinCnt))
	}
	return n
}

func (m *JoinAcceptPayload) Size() (n int) {
	var l int
	_ = l
	l = len(m.Encrypted)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	l = m.JoinNonce.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.NetID.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.DevAddr.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.DLSettings.Size()
	n += 1 + l + sovLorawan(uint64(l))
	if m.RxDelay != 0 {
		n += 1 + sovLorawan(uint64(m.RxDelay))
	}
	if m.CFList != nil {
		l = m.CFList.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}

func (m *DLSettings) Size() (n int) {
	var l int
	_ = l
	if m.Rx1DROffset != 0 {
		n += 1 + sovLorawan(uint64(m.Rx1DROffset))
	}
	if m.Rx2DR != 0 {
		n += 1 + sovLorawan(uint64(m.Rx2DR))
	}
	return n
}

func (m *CFList) Size() (n int) {
	var l int
	_ = l
	if len(m.Freq) > 0 {
		l = 0
		for _, e := range m.Freq {
			l += sovLorawan(uint64(e))
		}
		n += 1 + sovLorawan(uint64(l)) + l
	}
	return n
}

func (m *TxSettings) Size() (n int) {
	var l int
	_ = l
	if m.Modulation != 0 {
		n += 1 + sovLorawan(uint64(m.Modulation))
	}
	if m.DataRateIndex != 0 {
		n += 1 + sovLorawan(uint64(m.DataRateIndex))
	}
	if m.Bandwidth != 0 {
		n += 1 + sovLorawan(uint64(m.Bandwidth))
	}
	if m.SpreadingFactor != 0 {
		n += 1 + sovLorawan(uint64(m.SpreadingFactor))
	}
	if m.BitRate != 0 {
		n += 1 + sovLorawan(uint64(m.BitRate))
	}
	l = len(m.CodingRate)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.Frequency != 0 {
		n += 1 + sovLorawan(uint64(m.Frequency))
	}
	if m.TxPower != 0 {
		n += 1 + sovLorawan(uint64(m.TxPower))
	}
	if m.PolarizationInversion {
		n += 2
	}
	return n
}

func sovLorawan(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLorawan(x uint64) (n int) {
	return sovLorawan(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MHDR", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MHDR.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MIC", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MIC = append(m.MIC[:0], dAtA[iNdEx:postIndex]...)
			if m.MIC == nil {
				m.MIC = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MACPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACPayload{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Message_MACPayload{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinRequestPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JoinRequestPayload{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Message_JoinRequestPayload{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinAcceptPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JoinAcceptPayload{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Message_JoinAcceptPayload{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejoinRequestPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RejoinRequestPayload{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Message_RejoinRequestPayload{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MHDR) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MHDR: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MHDR: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MType", wireType)
			}
			m.MType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MType |= (MType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Major", wireType)
			}
			m.Major = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Major |= (Major(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MACPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MACPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FHDR", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FHDR.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FPort", wireType)
			}
			m.FPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FRMPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FRMPayload = append(m.FRMPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.FRMPayload == nil {
				m.FRMPayload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FHDR) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FHDR: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FHDR: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCtrl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FCtrl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCnt", wireType)
			}
			m.FCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FOpts", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FOpts = append(m.FOpts[:0], dAtA[iNdEx:postIndex]...)
			if m.FOpts == nil {
				m.FOpts = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FCtrl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FCtrl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FCtrl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ADR", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ADR = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ADRAckReq", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ADRAckReq = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ack", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ack = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FPending", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FPending = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassB", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClassB = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinRequestPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinRequestPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinRequestPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.JoinEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevNonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevNonce.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RejoinRequestPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RejoinRequestPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RejoinRequestPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejoinType", wireType)
			}
			m.RejoinType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RejoinType |= (RejoinType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NetID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.JoinEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejoinCnt", wireType)
			}
			m.RejoinCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RejoinCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinAcceptPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinAcceptPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinAcceptPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encrypted", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Encrypted = append(m.Encrypted[:0], dAtA[iNdEx:postIndex]...)
			if m.Encrypted == nil {
				m.Encrypted = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinNonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.JoinNonce.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NetID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DLSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DLSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxDelay", wireType)
			}
			m.RxDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxDelay |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CFList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CFList == nil {
				m.CFList = &CFList{}
			}
			if err := m.CFList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DLSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DLSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DLSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx1DROffset", wireType)
			}
			m.Rx1DROffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx1DROffset |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx2DR", wireType)
			}
			m.Rx2DR = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx2DR |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CFList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CFList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CFList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLorawan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Freq = append(m.Freq, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLorawan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLorawan
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLorawan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Freq = append(m.Freq, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Freq", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modulation", wireType)
			}
			m.Modulation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Modulation |= (Modulation(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRateIndex", wireType)
			}
			m.DataRateIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataRateIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bandwidth", wireType)
			}
			m.Bandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bandwidth |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpreadingFactor", wireType)
			}
			m.SpreadingFactor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpreadingFactor |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BitRate", wireType)
			}
			m.BitRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BitRate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodingRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodingRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			m.Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxPower", wireType)
			}
			m.TxPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxPower |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolarizationInversion", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PolarizationInversion = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLorawan(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLorawan
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLorawan
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLorawan(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLorawan = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLorawan   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/lorawan.proto", fileDescriptorLorawan)
}
func init() {
	golang_proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/lorawan.proto", fileDescriptorLorawan)
}

var fileDescriptorLorawan = []byte{
	// 1597 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x4d, 0x6c, 0x1b, 0xc7,
	0x15, 0xde, 0x11, 0x77, 0xb9, 0xcb, 0x47, 0x51, 0xde, 0x4c, 0x9c, 0x44, 0x76, 0xdd, 0xa5, 0xa1,
	0x16, 0x45, 0xa2, 0x22, 0x52, 0x24, 0xa5, 0x05, 0x9a, 0xa2, 0x40, 0xf9, 0x27, 0x88, 0xb6, 0x45,
	0x29, 0x43, 0x2a, 0xae, 0x0d, 0x14, 0x8b, 0xd5, 0xee, 0xac, 0xb4, 0x12, 0xb9, 0xbb, 0x1e, 0x8e,
	0x64, 0xaa, 0xa7, 0x1c, 0x0a, 0xd4, 0xa7, 0xa2, 0xc7, 0xf6, 0xd4, 0xa0, 0xbd, 0xe4, 0x54, 0xe4,
	0xe8, 0x53, 0x91, 0xa3, 0x8f, 0xee, 0x2d, 0x28, 0x50, 0x22, 0x5a, 0x5e, 0x72, 0xcc, 0x31, 0xc7,
	0x62, 0x66, 0x97, 0x3f, 0x92, 0x05, 0xd4, 0x2e, 0x9c, 0x13, 0xe7, 0x7d, 0x33, 0xfb, 0xbd, 0x37,
	0xef, 0x7b, 0x6f, 0x66, 0x08, 0x6b, 0x07, 0x01, 0x3f, 0x3c, 0xd9, 0x5f, 0x71, 0xa3, 0xde, 0x6a,
	0xe7, 0x90, 0x76, 0x0e, 0x83, 0xf0, 0xa0, 0xdf, 0xa2, 0xfc, 0x71, 0xc4, 0x8e, 0x57, 0x39, 0x0f,
	0x57, 0x9d, 0x38, 0x58, 0xed, 0x46, 0xcc, 0x79, 0xec, 0x84, 0x2b, 0x31, 0x8b, 0x78, 0x84, 0xf3,
	0x9c, 0x87, 0x2b, 0xa7, 0x1b, 0x37, 0xdf, 0x9f, 0xf9, 0xf4, 0x20, 0x3a, 0x88, 0x56, 0xe5, 0xf4,
	0xfe, 0x89, 0x2f, 0x2d, 0x69, 0xc8, 0x51, 0xfa, 0xd9, 0xd2, 0xdf, 0x72, 0xa0, 0x6f, 0xd3, 0x7e,
	0xdf, 0x39, 0xa0, 0xf8, 0xa7, 0xa0, 0xf5, 0xec, 0x43, 0x8f, 0x2d, 0xa2, 0xdb, 0xe8, 0xdd, 0xe2,
	0xfa, 0xfc, 0x4a, 0x4a, 0xb9, 0xb2, 0xbd, 0x55, 0x27, 0x55, 0xe3, 0xd9, 0xb0, 0xac, 0x3c, 0x1f,
	0x96, 0x11, 0x51, 0x7b, 0x5b, 0x1e, 0xc3, 0x37, 0x20, 0xd7, 0x0b, 0xdc, 0xc5, 0xb9, 0xdb, 0xe8,
	0xdd, 0xf9, 0xaa, 0x9e, 0x0c, 0xcb, 0xb9, 0xed, 0x66, 0x8d, 0x08, 0x0c, 0x37, 0xa0, 0xd8, 0x73,
	0x5c, 0x3b, 0x76, 0xce, 0xba, 0x91, 0xe3, 0x2d, 0xe6, 0x24, 0x1b, 0x9e, 0xb0, 0x55, 0x6a, 0xbb,
	0xe9, 0x4c, 0x75, 0x21, 0x19, 0x96, 0x61, 0x6a, 0x6f, 0x29, 0x04, 0x7a, 0x8e, 0x9b, 0x59, 0xb8,
	0x05, 0xd7, 0x8f, 0xa2, 0x20, 0xb4, 0x19, 0x7d, 0x74, 0x42, 0xfb, 0x7c, 0xc2, 0xa7, 0x4a, 0xbe,
	0x9b, 0x63, 0xbe, 0x3b, 0x51, 0x10, 0x92, 0x74, 0xc9, 0x94, 0x07, 0x1f, 0xbd, 0x80, 0xe2, 0xbb,
	0xf0, 0xa6, 0xe4, 0x73, 0x5c, 0x97, 0xc6, 0x53, 0x3a, 0x4d, 0xd2, 0xdd, 0x98, 0xa5, 0xab, 0xc8,
	0x15, 0x53, 0xb6, 0x37, 0x8e, 0x2e, 0x83, 0xb8, 0x03, 0x6f, 0x33, 0x7a, 0x65, 0x78, 0x79, 0xc9,
	0x77, 0x6b, 0xcc, 0x47, 0xe8, 0xd1, 0x55, 0x01, 0x5e, 0x67, 0x57, 0xe0, 0x1f, 0xa9, 0x4f, 0x3f,
	0x2b, 0x2b, 0xd5, 0x02, 0xe8, 0x19, 0x70, 0x47, 0x35, 0x74, 0xd3, 0x58, 0xfa, 0x18, 0x54, 0xa1,
	0x01, 0xfe, 0x31, 0xe4, 0x7b, 0x36, 0x3f, 0x8b, 0xa9, 0x54, 0x68, 0x61, 0xbd, 0x34, 0xc9, 0x69,
	0xe7, 0x2c, 0xa6, 0x44, 0xeb, 0x89, 0x1f, 0xfc, 0x23, 0xd0, 0x7a, 0xce, 0x51, 0xc4, 0xa4, 0x36,
	0xb3, 0x8b, 0x04, 0x48, 0xd2, 0xb9, 0xa5, 0x3f, 0x20, 0x98, 0xc9, 0xbc, 0x90, 0xde, 0xbf, 0x4a,
	0xfa, 0xcd, 0x4b, 0xd2, 0xfb, 0x42, 0xfa, 0xb7, 0x20, 0xef, 0xdb, 0x71, 0xc4, 0xb8, 0xf4, 0x50,
	0x22, 0x9a, 0xbf, 0x1b, 0x31, 0x8e, 0x57, 0xa1, 0xe8, 0xb3, 0xde, 0x05, 0xd9, 0xe7, 0x53, 0x89,
	0x37, 0xc9, 0x76, 0xe6, 0x88, 0x80, 0xcf, 0x7a, 0x17, 0x76, 0xbb, 0xf4, 0x4f, 0x04, 0xaa, 0x70,
	0x83, 0x3b, 0x60, 0x78, 0xf4, 0xd4, 0x76, 0xbc, 0x2c, 0x8c, 0xf9, 0xea, 0x2f, 0x84, 0xe3, 0x7f,
	0x0f, 0xcb, 0xff, 0xb3, 0x1d, 0xe2, 0xe3, 0x83, 0x55, 0x91, 0x97, 0xfe, 0x4a, 0x9d, 0x9e, 0x56,
	0x3c, 0x8f, 0x11, 0xdd, 0x4b, 0x07, 0x78, 0x45, 0x04, 0xeb, 0x72, 0xd6, 0x95, 0xc1, 0x16, 0xa7,
	0xe9, 0xd8, 0xac, 0x71, 0xd6, 0x9d, 0xd9, 0x9b, 0xe6, 0x0b, 0x00, 0xbf, 0x29, 0x32, 0xe1, 0x86,
	0x5c, 0xc6, 0x5f, 0x22, 0xaa, 0x5f, 0x0b, 0x79, 0xba, 0xe3, 0x28, 0xe6, 0x7d, 0x59, 0x7c, 0xf3,
	0x44, 0xf3, 0x77, 0x62, 0xde, 0xcf, 0x36, 0xf0, 0x17, 0x04, 0x9a, 0x24, 0x13, 0x3d, 0xe1, 0x64,
	0xc1, 0x1b, 0x69, 0x4f, 0x54, 0xea, 0x84, 0x08, 0x0c, 0xbf, 0x0f, 0x45, 0xc7, 0x63, 0xb6, 0xe3,
	0x1e, 0x8b, 0x82, 0x91, 0xb1, 0x18, 0xd5, 0x52, 0x32, 0x2c, 0x17, 0x2a, 0x75, 0x52, 0x71, 0x8f,
	0x09, 0x7d, 0x44, 0x0a, 0x8e, 0xc7, 0xd2, 0x21, 0x36, 0x21, 0xe7, 0xb8, 0xc7, 0x32, 0x06, 0x83,
	0x88, 0x21, 0xfe, 0x01, 0x14, 0x7c, 0x3b, 0xa6, 0xa1, 0x17, 0x84, 0x07, 0x32, 0x0a, 0x83, 0x18,
	0xfe, 0x6e, 0x6a, 0xe3, 0x77, 0x40, 0x77, 0xbb, 0x4e, 0xbf, 0x6f, 0xef, 0xcb, 0x72, 0x36, 0x48,
	0x5e, 0x9a, 0xd5, 0xa5, 0x7f, 0xcc, 0x01, 0x7e, 0xb1, 0x41, 0xf0, 0x6f, 0xc1, 0x90, 0xb5, 0x4b,
	0x4f, 0x82, 0x2c, 0xd5, 0xd5, 0x2c, 0xd5, 0xab, 0x2f, 0x9f, 0xea, 0xc6, 0x5e, 0xf3, 0xe7, 0x1f,
	0x26, 0xc3, 0xb2, 0x2e, 0x1c, 0x34, 0xf6, 0x9a, 0x44, 0x17, 0x9c, 0x8d, 0x93, 0x00, 0x3f, 0x04,
	0x91, 0x7e, 0xc9, 0x9e, 0x9e, 0x0f, 0x95, 0xff, 0x9f, 0x3d, 0x5f, 0xa7, 0xa7, 0x82, 0x3c, 0xef,
	0xd1, 0x53, 0xc1, 0x7d, 0x1f, 0x0a, 0x82, 0x3b, 0x8c, 0x42, 0x97, 0x66, 0x35, 0xf6, 0x51, 0xc6,
	0xbe, 0xfe, 0x4a, 0x65, 0xd2, 0x12, 0x0c, 0x44, 0x94, 0x9c, 0x1c, 0x65, 0x62, 0xfe, 0x3e, 0x07,
	0xd7, 0xaf, 0x6a, 0x59, 0xbc, 0x01, 0xc5, 0xac, 0xe1, 0x67, 0x1a, 0x10, 0x5f, 0xec, 0x72, 0xd9,
	0x85, 0xc0, 0x26, 0x63, 0x7c, 0x1f, 0xf2, 0x21, 0xe5, 0x76, 0xe0, 0x65, 0x79, 0xf8, 0xf5, 0xab,
	0xe7, 0xa1, 0x45, 0x79, 0xb3, 0x9e, 0x0c, 0xcb, 0x9a, 0x1c, 0x10, 0x2d, 0xa4, 0xbc, 0x79, 0x51,
	0xc0, 0xdc, 0xf7, 0x2a, 0xa0, 0xfa, 0xba, 0x05, 0xfc, 0x21, 0x64, 0x19, 0x92, 0x5d, 0xa6, 0xc9,
	0x2e, 0x2b, 0xa4, 0x48, 0x2d, 0xe4, 0x99, 0x0c, 0xff, 0xca, 0xc1, 0x1b, 0x2f, 0x9c, 0xc4, 0xf8,
	0x16, 0x14, 0x68, 0xe8, 0xb2, 0xb3, 0x98, 0x53, 0x2f, 0xad, 0x5b, 0x32, 0x05, 0xf0, 0x43, 0x00,
	0x49, 0x9b, 0x96, 0x46, 0x9a, 0xf0, 0x5f, 0x66, 0x71, 0x6f, 0xbc, 0x7c, 0xdc, 0xc2, 0x6d, 0x5a,
	0x1b, 0x85, 0xa3, 0xf1, 0x70, 0x46, 0xc8, 0xdc, 0xeb, 0x15, 0x72, 0xf6, 0xd0, 0x53, 0x5f, 0xdb,
	0xa1, 0xf7, 0x2b, 0x28, 0x7a, 0x5d, 0xbb, 0x4f, 0x39, 0x17, 0x1f, 0x65, 0x57, 0xdc, 0xa4, 0x58,
	0xeb, 0xf7, 0xda, 0xd9, 0xcc, 0xcc, 0xf1, 0x07, 0x5e, 0x77, 0x8c, 0xe2, 0x1b, 0x60, 0xb0, 0x81,
	0xed, 0xd1, 0xae, 0x73, 0x26, 0xaf, 0xb3, 0x12, 0xd1, 0xd9, 0xa0, 0x2e, 0x4c, 0xbc, 0x01, 0xba,
	0xeb, 0xdb, 0xdd, 0xa0, 0xcf, 0x17, 0x75, 0xc9, 0xba, 0x30, 0x66, 0xad, 0x6d, 0xde, 0x0b, 0xfa,
	0xbc, 0x0a, 0x42, 0xf2, 0x74, 0x4c, 0xf2, 0xae, 0x2f, 0x7e, 0x33, 0x4d, 0x23, 0x80, 0xa9, 0x67,
	0xbc, 0x01, 0x25, 0x36, 0x58, 0xb3, 0x3d, 0x66, 0x47, 0xbe, 0xdf, 0xa7, 0x5c, 0xea, 0x59, 0xaa,
	0x5e, 0x4b, 0x86, 0xe5, 0x22, 0x19, 0xac, 0xd5, 0xc9, 0x8e, 0x84, 0x49, 0x91, 0x0d, 0xd6, 0xea,
	0x2c, 0x35, 0xf0, 0x6d, 0xc8, 0xb3, 0xc1, 0xba, 0xed, 0xa5, 0x77, 0x5b, 0xa9, 0x5a, 0x10, 0xf9,
	0x24, 0x83, 0xf5, 0x3a, 0x21, 0x1a, 0x1b, 0xac, 0xd7, 0x59, 0xea, 0xea, 0x8e, 0x6a, 0xe4, 0x4c,
	0x75, 0x69, 0x09, 0xb2, 0x40, 0x30, 0x06, 0xd5, 0x17, 0xc7, 0x2e, 0xba, 0x9d, 0x93, 0x67, 0x3a,
	0xa3, 0x8f, 0xb2, 0xa0, 0xfe, 0x33, 0x07, 0xd0, 0x19, 0x4c, 0xa2, 0x5a, 0x07, 0xe8, 0x45, 0xde,
	0x49, 0xd7, 0xe1, 0x41, 0x14, 0x5e, 0x6e, 0xf2, 0xed, 0xc9, 0x0c, 0x99, 0x59, 0x85, 0x7f, 0x02,
	0xd7, 0x3c, 0x87, 0x3b, 0x36, 0x73, 0x38, 0xb5, 0x83, 0xd0, 0xa3, 0x03, 0x19, 0x9d, 0x46, 0x4a,
	0x02, 0x26, 0x0e, 0xa7, 0x4d, 0x01, 0x8a, 0xea, 0xdd, 0x77, 0x42, 0xef, 0x71, 0xe0, 0xf1, 0xc3,
	0xec, 0x76, 0x99, 0x02, 0xf8, 0x3d, 0x30, 0xfb, 0x31, 0xa3, 0x8e, 0x38, 0xcf, 0x6d, 0xdf, 0x71,
	0x79, 0x94, 0x16, 0x44, 0x89, 0x5c, 0x9b, 0xe0, 0x9b, 0x12, 0x16, 0xf2, 0xec, 0x07, 0x5c, 0xfa,
	0xcb, 0xfa, 0x47, 0xdf, 0x0f, 0xb8, 0x70, 0x84, 0xcb, 0x50, 0x74, 0x23, 0x49, 0x21, 0x67, 0x85,
	0x78, 0x05, 0x02, 0x29, 0x24, 0x17, 0xdc, 0x82, 0x82, 0x2f, 0x5f, 0x2c, 0xa1, 0x7b, 0x26, 0x15,
	0x54, 0xc9, 0x14, 0x10, 0xcc, 0x7c, 0x60, 0xc7, 0xd1, 0x63, 0xca, 0x16, 0x0d, 0xb9, 0x07, 0x9d,
	0x0f, 0x76, 0x85, 0x89, 0x7f, 0x06, 0x6f, 0xc7, 0x51, 0xd7, 0x61, 0xc1, 0xef, 0xe4, 0xae, 0xed,
	0x20, 0x3c, 0xa5, 0xac, 0x2f, 0xb2, 0x54, 0x90, 0x37, 0xce, 0x5b, 0xb3, 0xb3, 0xcd, 0xf1, 0xe4,
	0xf2, 0x1f, 0x11, 0x68, 0xf2, 0x75, 0x82, 0x4d, 0x98, 0xbf, 0xb3, 0xd3, 0x6c, 0xd9, 0xa4, 0xf1,
	0xf1, 0x5e, 0xa3, 0xdd, 0x31, 0x15, 0x7c, 0x0d, 0x8a, 0x12, 0xa9, 0xd4, 0x6a, 0x8d, 0xdd, 0x8e,
	0x89, 0x30, 0x86, 0x85, 0xbd, 0x56, 0x6d, 0xa7, 0xb5, 0xd9, 0x24, 0xdb, 0x8d, 0xba, 0xbd, 0xb7,
	0x6b, 0xce, 0xe1, 0xeb, 0x60, 0xce, 0x62, 0xf5, 0x9d, 0xfb, 0x2d, 0x33, 0x27, 0xc8, 0x2e, 0xac,
	0x53, 0xc5, 0xb7, 0x97, 0x56, 0x69, 0x02, 0x23, 0x8d, 0x0b, 0x4e, 0xf3, 0xcb, 0xef, 0x80, 0x26,
	0x1f, 0x42, 0x78, 0x01, 0xe0, 0xde, 0x0e, 0xa9, 0xdc, 0xaf, 0xb4, 0x6c, 0xb2, 0x66, 0x2a, 0xcb,
	0xb6, 0x7c, 0x10, 0x7d, 0x92, 0xc6, 0x2d, 0x62, 0xdb, 0xae, 0xd4, 0xec, 0xbd, 0xd6, 0xdd, 0x96,
	0xe0, 0x52, 0xf0, 0x3c, 0x18, 0x02, 0xf8, 0x64, 0xcd, 0xfe, 0xc0, 0x44, 0xe2, 0xe3, 0xb1, 0x65,
	0xaf, 0x99, 0x73, 0x17, 0xec, 0x75, 0x33, 0x37, 0xb3, 0x7a, 0xcd, 0x54, 0x6f, 0xaa, 0x4f, 0xfe,
	0x6e, 0x49, 0x07, 0xbb, 0x5b, 0x0f, 0x66, 0x1c, 0xec, 0x6e, 0x3d, 0xb8, 0xe8, 0x40, 0x00, 0x53,
	0x07, 0x63, 0x6b, 0xec, 0x60, 0x62, 0x67, 0x0e, 0x32, 0x7b, 0xea, 0xe0, 0x03, 0x80, 0xe9, 0x3d,
	0x84, 0x8b, 0xa0, 0xd7, 0x76, 0x5a, 0x9d, 0xc6, 0x6f, 0x44, 0xaa, 0x8b, 0xa0, 0xb7, 0x1b, 0xed,
	0x76, 0x73, 0xa7, 0x65, 0x22, 0x6c, 0x80, 0x7a, 0xb7, 0xf1, 0xa0, 0x6d, 0xce, 0x2d, 0x97, 0x01,
	0xa6, 0x45, 0x2d, 0x70, 0x91, 0x11, 0x53, 0xc1, 0x3a, 0xe4, 0x36, 0xdb, 0x77, 0x4d, 0xb4, 0xfc,
	0x21, 0x68, 0x35, 0xf1, 0x92, 0x90, 0x6c, 0xf7, 0x2a, 0xed, 0xb6, 0x5d, 0x49, 0xd9, 0x52, 0xa3,
	0x6a, 0xa2, 0xa9, 0x51, 0x33, 0xe7, 0xd2, 0x40, 0xaa, 0x7f, 0x45, 0xcf, 0xce, 0x2d, 0xf4, 0xfc,
	0xdc, 0x42, 0x5f, 0x9d, 0x5b, 0xe8, 0xeb, 0x73, 0x0b, 0x7d, 0x73, 0x6e, 0x29, 0xdf, 0x9e, 0x5b,
	0xca, 0x77, 0xe7, 0x16, 0xfa, 0x34, 0xb1, 0x94, 0x27, 0x89, 0xa5, 0x7c, 0x9e, 0x58, 0xe8, 0x8b,
	0xc4, 0x52, 0x9e, 0x26, 0x16, 0xfa, 0x32, 0xb1, 0xd0, 0xb3, 0xc4, 0x42, 0xcf, 0x13, 0x0b, 0x7d,
	0x95, 0x58, 0xca, 0xd7, 0x89, 0x85, 0xbe, 0x49, 0x2c, 0xe5, 0xdb, 0xc4, 0x42, 0xdf, 0x25, 0x96,
	0xf2, 0xe9, 0xc8, 0x52, 0x9e, 0x8c, 0x2c, 0xf4, 0xa7, 0x91, 0xa5, 0xfc, 0x79, 0x64, 0xa1, 0xcf,
	0x46, 0x96, 0xf2, 0xf9, 0xc8, 0x52, 0xbe, 0x18, 0x59, 0xe8, 0xe9, 0xc8, 0x42, 0x5f, 0x8e, 0x2c,
	0xf4, 0xf0, 0xbd, 0x97, 0x3a, 0x31, 0x79, 0x18, 0xef, 0xef, 0xe7, 0xe5, 0xbf, 0x9f, 0x8d, 0xff,
	0x06, 0x00, 0x00, 0xff, 0xff, 0xa3, 0xa4, 0xd6, 0xfa, 0x69, 0x0d, 0x00, 0x00,
}
