// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/TheThingsNetwork/ttn/api/lorawan.proto

package ttnpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_TheThingsNetwork_ttn_pkg_types "github.com/TheThingsNetwork/ttn/pkg/types"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MType int32

const (
	MType_JOIN_REQUEST     MType = 0
	MType_JOIN_ACCEPT      MType = 1
	MType_UNCONFIRMED_UP   MType = 2
	MType_UNCONFIRMED_DOWN MType = 3
	MType_CONFIRMED_UP     MType = 4
	MType_CONFIRMED_DOWN   MType = 5
	MType_REJOIN_REQUEST   MType = 6
)

var MType_name = map[int32]string{
	0: "JOIN_REQUEST",
	1: "JOIN_ACCEPT",
	2: "UNCONFIRMED_UP",
	3: "UNCONFIRMED_DOWN",
	4: "CONFIRMED_UP",
	5: "CONFIRMED_DOWN",
	6: "REJOIN_REQUEST",
}
var MType_value = map[string]int32{
	"JOIN_REQUEST":     0,
	"JOIN_ACCEPT":      1,
	"UNCONFIRMED_UP":   2,
	"UNCONFIRMED_DOWN": 3,
	"CONFIRMED_UP":     4,
	"CONFIRMED_DOWN":   5,
	"REJOIN_REQUEST":   6,
}

func (MType) EnumDescriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{0} }

type Major int32

const (
	Major_LORAWAN_R1 Major = 0
)

var Major_name = map[int32]string{
	0: "LORAWAN_R1",
}
var Major_value = map[string]int32{
	"LORAWAN_R1": 0,
}

func (Major) EnumDescriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{1} }

type CID int32

const (
	CID_RESERVED_0         CID = 0
	CID_RESET              CID = 1
	CID_LINK_CHECK         CID = 2
	CID_LINK_ADR           CID = 3
	CID_DUTY_CYCLE         CID = 4
	CID_RX_PARAM_SETUP     CID = 5
	CID_DEV_STATUS         CID = 6
	CID_NEW_CHANNEL        CID = 7
	CID_RX_TIMING_SETUP    CID = 8
	CID_TX_PARAM_SETUP     CID = 9
	CID_DL_CHANNEL         CID = 10
	CID_REKEY              CID = 11
	CID_ADR_PARAM_SETUP    CID = 12
	CID_DEVICE_TIME        CID = 13
	CID_FORCE_REJOIN       CID = 14
	CID_REJOIN_PARAM_SETUP CID = 15
)

var CID_name = map[int32]string{
	0:  "RESERVED_0",
	1:  "RESET",
	2:  "LINK_CHECK",
	3:  "LINK_ADR",
	4:  "DUTY_CYCLE",
	5:  "RX_PARAM_SETUP",
	6:  "DEV_STATUS",
	7:  "NEW_CHANNEL",
	8:  "RX_TIMING_SETUP",
	9:  "TX_PARAM_SETUP",
	10: "DL_CHANNEL",
	11: "REKEY",
	12: "ADR_PARAM_SETUP",
	13: "DEVICE_TIME",
	14: "FORCE_REJOIN",
	15: "REJOIN_PARAM_SETUP",
}
var CID_value = map[string]int32{
	"RESERVED_0":         0,
	"RESET":              1,
	"LINK_CHECK":         2,
	"LINK_ADR":           3,
	"DUTY_CYCLE":         4,
	"RX_PARAM_SETUP":     5,
	"DEV_STATUS":         6,
	"NEW_CHANNEL":        7,
	"RX_TIMING_SETUP":    8,
	"TX_PARAM_SETUP":     9,
	"DL_CHANNEL":         10,
	"REKEY":              11,
	"ADR_PARAM_SETUP":    12,
	"DEVICE_TIME":        13,
	"FORCE_REJOIN":       14,
	"REJOIN_PARAM_SETUP": 15,
}

func (CID) EnumDescriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{2} }

type RejoinType int32

const (
	RejoinType_CONTEXT RejoinType = 0
	RejoinType_SESSION RejoinType = 1
	RejoinType_KEYS    RejoinType = 2
)

var RejoinType_name = map[int32]string{
	0: "CONTEXT",
	1: "SESSION",
	2: "KEYS",
}
var RejoinType_value = map[string]int32{
	"CONTEXT": 0,
	"SESSION": 1,
	"KEYS":    2,
}

func (RejoinType) EnumDescriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{3} }

type Modulation int32

const (
	Modulation_LORA Modulation = 0
	Modulation_FSK  Modulation = 1
)

var Modulation_name = map[int32]string{
	0: "LORA",
	1: "FSK",
}
var Modulation_value = map[string]int32{
	"LORA": 0,
	"FSK":  1,
}

func (Modulation) EnumDescriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{4} }

type Message struct {
	MHDR `protobuf:"bytes,1,opt,name=m_hdr,json=mHdr,embedded=m_hdr" json:"m_hdr"`
	MIC  []byte `protobuf:"bytes,2,opt,name=mic,proto3" json:"mic,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*Message_MACPayload
	//	*Message_JoinRequestPayload
	//	*Message_JoinAcceptPayload
	//	*Message_RejoinRequestPayload
	Payload isMessage_Payload `protobuf_oneof:"Payload"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{0} }

type isMessage_Payload interface {
	isMessage_Payload()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Message_MACPayload struct {
	MACPayload *MACPayload `protobuf:"bytes,3,opt,name=mac_payload,json=macPayload,oneof"`
}
type Message_JoinRequestPayload struct {
	JoinRequestPayload *JoinRequestPayload `protobuf:"bytes,4,opt,name=join_request_payload,json=joinRequestPayload,oneof"`
}
type Message_JoinAcceptPayload struct {
	JoinAcceptPayload *JoinAcceptPayload `protobuf:"bytes,5,opt,name=join_accept_payload,json=joinAcceptPayload,oneof"`
}
type Message_RejoinRequestPayload struct {
	RejoinRequestPayload *RejoinRequestPayload `protobuf:"bytes,6,opt,name=rejoin_request_payload,json=rejoinRequestPayload,oneof"`
}

func (*Message_MACPayload) isMessage_Payload()           {}
func (*Message_JoinRequestPayload) isMessage_Payload()   {}
func (*Message_JoinAcceptPayload) isMessage_Payload()    {}
func (*Message_RejoinRequestPayload) isMessage_Payload() {}

func (m *Message) GetPayload() isMessage_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Message) GetMIC() []byte {
	if m != nil {
		return m.MIC
	}
	return nil
}

func (m *Message) GetMACPayload() *MACPayload {
	if x, ok := m.GetPayload().(*Message_MACPayload); ok {
		return x.MACPayload
	}
	return nil
}

func (m *Message) GetJoinRequestPayload() *JoinRequestPayload {
	if x, ok := m.GetPayload().(*Message_JoinRequestPayload); ok {
		return x.JoinRequestPayload
	}
	return nil
}

func (m *Message) GetJoinAcceptPayload() *JoinAcceptPayload {
	if x, ok := m.GetPayload().(*Message_JoinAcceptPayload); ok {
		return x.JoinAcceptPayload
	}
	return nil
}

func (m *Message) GetRejoinRequestPayload() *RejoinRequestPayload {
	if x, ok := m.GetPayload().(*Message_RejoinRequestPayload); ok {
		return x.RejoinRequestPayload
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Message) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Message_OneofMarshaler, _Message_OneofUnmarshaler, _Message_OneofSizer, []interface{}{
		(*Message_MACPayload)(nil),
		(*Message_JoinRequestPayload)(nil),
		(*Message_JoinAcceptPayload)(nil),
		(*Message_RejoinRequestPayload)(nil),
	}
}

func _Message_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Message)
	// Payload
	switch x := m.Payload.(type) {
	case *Message_MACPayload:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MACPayload); err != nil {
			return err
		}
	case *Message_JoinRequestPayload:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.JoinRequestPayload); err != nil {
			return err
		}
	case *Message_JoinAcceptPayload:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.JoinAcceptPayload); err != nil {
			return err
		}
	case *Message_RejoinRequestPayload:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RejoinRequestPayload); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Message.Payload has unexpected type %T", x)
	}
	return nil
}

func _Message_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Message)
	switch tag {
	case 3: // Payload.mac_payload
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACPayload)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_MACPayload{msg}
		return true, err
	case 4: // Payload.join_request_payload
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JoinRequestPayload)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_JoinRequestPayload{msg}
		return true, err
	case 5: // Payload.join_accept_payload
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JoinAcceptPayload)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_JoinAcceptPayload{msg}
		return true, err
	case 6: // Payload.rejoin_request_payload
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RejoinRequestPayload)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_RejoinRequestPayload{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Message_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Message)
	// Payload
	switch x := m.Payload.(type) {
	case *Message_MACPayload:
		s := proto.Size(x.MACPayload)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_JoinRequestPayload:
		s := proto.Size(x.JoinRequestPayload)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_JoinAcceptPayload:
		s := proto.Size(x.JoinAcceptPayload)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_RejoinRequestPayload:
		s := proto.Size(x.RejoinRequestPayload)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type MHDR struct {
	MType MType `protobuf:"varint,1,opt,name=m_type,json=mType,proto3,enum=ttn.v3.MType" json:"m_type,omitempty"`
	Major Major `protobuf:"varint,2,opt,name=major,proto3,enum=ttn.v3.Major" json:"major,omitempty"`
}

func (m *MHDR) Reset()                    { *m = MHDR{} }
func (*MHDR) ProtoMessage()               {}
func (*MHDR) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{1} }

func (m *MHDR) GetMType() MType {
	if m != nil {
		return m.MType
	}
	return MType_JOIN_REQUEST
}

func (m *MHDR) GetMajor() Major {
	if m != nil {
		return m.Major
	}
	return Major_LORAWAN_R1
}

type MACPayload struct {
	FHDR       `protobuf:"bytes,1,opt,name=f_hdr,json=fHdr,embedded=f_hdr" json:"f_hdr"`
	FPort      int32  `protobuf:"varint,2,opt,name=f_port,json=fPort,proto3" json:"f_port,omitempty"`
	FRMPayload []byte `protobuf:"bytes,3,opt,name=frm_payload,json=frmPayload,proto3" json:"frm_payload,omitempty"`
}

func (m *MACPayload) Reset()                    { *m = MACPayload{} }
func (*MACPayload) ProtoMessage()               {}
func (*MACPayload) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{2} }

func (m *MACPayload) GetFPort() int32 {
	if m != nil {
		return m.FPort
	}
	return 0
}

func (m *MACPayload) GetFRMPayload() []byte {
	if m != nil {
		return m.FRMPayload
	}
	return nil
}

type FHDR struct {
	DevAddr github_com_TheThingsNetwork_ttn_pkg_types.DevAddr `protobuf:"bytes,1,opt,name=dev_addr,json=devAddr,proto3,customtype=github.com/TheThingsNetwork/ttn/pkg/types.DevAddr" json:"dev_addr"`
	FCtrl   `protobuf:"bytes,2,opt,name=f_ctrl,json=fCtrl,embedded=f_ctrl" json:"f_ctrl"`
	FCnt    uint32       `protobuf:"varint,3,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	FOpts   []MACCommand `protobuf:"bytes,4,rep,name=f_opts,json=fOpts" json:"f_opts"`
}

func (m *FHDR) Reset()                    { *m = FHDR{} }
func (*FHDR) ProtoMessage()               {}
func (*FHDR) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{3} }

func (m *FHDR) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

func (m *FHDR) GetFOpts() []MACCommand {
	if m != nil {
		return m.FOpts
	}
	return nil
}

type FCtrl struct {
	ADR       bool `protobuf:"varint,1,opt,name=adr,proto3" json:"adr,omitempty"`
	ADRAckReq bool `protobuf:"varint,2,opt,name=adr_ack_req,json=adrAckReq,proto3" json:"adr_ack_req,omitempty"`
	Ack       bool `protobuf:"varint,3,opt,name=ack,proto3" json:"ack,omitempty"`
	FPending  bool `protobuf:"varint,4,opt,name=f_pending,json=fPending,proto3" json:"f_pending,omitempty"`
	ClassB    bool `protobuf:"varint,5,opt,name=class_b,json=classB,proto3" json:"class_b,omitempty"`
}

func (m *FCtrl) Reset()                    { *m = FCtrl{} }
func (*FCtrl) ProtoMessage()               {}
func (*FCtrl) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{4} }

func (m *FCtrl) GetADR() bool {
	if m != nil {
		return m.ADR
	}
	return false
}

func (m *FCtrl) GetADRAckReq() bool {
	if m != nil {
		return m.ADRAckReq
	}
	return false
}

func (m *FCtrl) GetAck() bool {
	if m != nil {
		return m.Ack
	}
	return false
}

func (m *FCtrl) GetFPending() bool {
	if m != nil {
		return m.FPending
	}
	return false
}

func (m *FCtrl) GetClassB() bool {
	if m != nil {
		return m.ClassB
	}
	return false
}

type MACCommand struct {
	CID     CID    `protobuf:"varint,1,opt,name=cid,proto3,enum=ttn.v3.CID" json:"cid,omitempty"`
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *MACCommand) Reset()                    { *m = MACCommand{} }
func (*MACCommand) ProtoMessage()               {}
func (*MACCommand) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{5} }

func (m *MACCommand) GetCID() CID {
	if m != nil {
		return m.CID
	}
	return CID_RESERVED_0
}

func (m *MACCommand) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type JoinRequestPayload struct {
	JoinEUI  github_com_TheThingsNetwork_ttn_pkg_types.EUI64    `protobuf:"bytes,1,opt,name=join_eui,json=joinEui,proto3,customtype=github.com/TheThingsNetwork/ttn/pkg/types.EUI64" json:"join_eui"`
	DevEUI   github_com_TheThingsNetwork_ttn_pkg_types.EUI64    `protobuf:"bytes,2,opt,name=dev_eui,json=devEui,proto3,customtype=github.com/TheThingsNetwork/ttn/pkg/types.EUI64" json:"dev_eui"`
	DevNonce github_com_TheThingsNetwork_ttn_pkg_types.DevNonce `protobuf:"bytes,3,opt,name=dev_nonce,json=devNonce,proto3,customtype=github.com/TheThingsNetwork/ttn/pkg/types.DevNonce" json:"dev_nonce"`
}

func (m *JoinRequestPayload) Reset()                    { *m = JoinRequestPayload{} }
func (*JoinRequestPayload) ProtoMessage()               {}
func (*JoinRequestPayload) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{6} }

type RejoinRequestPayload struct {
	RejoinType RejoinType                                      `protobuf:"varint,1,opt,name=rejoin_type,json=rejoinType,proto3,enum=ttn.v3.RejoinType" json:"rejoin_type,omitempty"`
	NetID      github_com_TheThingsNetwork_ttn_pkg_types.NetID `protobuf:"bytes,2,opt,name=net_id,json=netId,proto3,customtype=github.com/TheThingsNetwork/ttn/pkg/types.NetID" json:"net_id"`
	JoinEUI    github_com_TheThingsNetwork_ttn_pkg_types.EUI64 `protobuf:"bytes,3,opt,name=join_eui,json=joinEui,proto3,customtype=github.com/TheThingsNetwork/ttn/pkg/types.EUI64" json:"join_eui"`
	DevEUI     github_com_TheThingsNetwork_ttn_pkg_types.EUI64 `protobuf:"bytes,4,opt,name=dev_eui,json=devEui,proto3,customtype=github.com/TheThingsNetwork/ttn/pkg/types.EUI64" json:"dev_eui"`
	RejoinCnt  uint32                                          `protobuf:"varint,5,opt,name=rejoin_cnt,json=rejoinCnt,proto3" json:"rejoin_cnt,omitempty"`
}

func (m *RejoinRequestPayload) Reset()                    { *m = RejoinRequestPayload{} }
func (*RejoinRequestPayload) ProtoMessage()               {}
func (*RejoinRequestPayload) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{7} }

func (m *RejoinRequestPayload) GetRejoinType() RejoinType {
	if m != nil {
		return m.RejoinType
	}
	return RejoinType_CONTEXT
}

func (m *RejoinRequestPayload) GetRejoinCnt() uint32 {
	if m != nil {
		return m.RejoinCnt
	}
	return 0
}

type JoinAcceptPayload struct {
	Encrypted  []byte                                              `protobuf:"bytes,1,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
	JoinNonce  github_com_TheThingsNetwork_ttn_pkg_types.JoinNonce `protobuf:"bytes,2,opt,name=join_nonce,json=joinNonce,proto3,customtype=github.com/TheThingsNetwork/ttn/pkg/types.JoinNonce" json:"join_nonce"`
	NetID      github_com_TheThingsNetwork_ttn_pkg_types.NetID     `protobuf:"bytes,3,opt,name=net_id,json=netId,proto3,customtype=github.com/TheThingsNetwork/ttn/pkg/types.NetID" json:"net_id"`
	DevAddr    github_com_TheThingsNetwork_ttn_pkg_types.DevAddr   `protobuf:"bytes,4,opt,name=dev_addr,json=devAddr,proto3,customtype=github.com/TheThingsNetwork/ttn/pkg/types.DevAddr" json:"dev_addr"`
	DLSettings `protobuf:"bytes,5,opt,name=dl_settings,json=dlSettings,embedded=dl_settings" json:"dl_settings"`
	RxDelay    uint32  `protobuf:"varint,6,opt,name=rx_delay,json=rxDelay,proto3" json:"rx_delay,omitempty"`
	CFList     *CFList `protobuf:"bytes,7,opt,name=cf_list,json=cfList" json:"cf_list,omitempty"`
}

func (m *JoinAcceptPayload) Reset()                    { *m = JoinAcceptPayload{} }
func (*JoinAcceptPayload) ProtoMessage()               {}
func (*JoinAcceptPayload) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{8} }

func (m *JoinAcceptPayload) GetEncrypted() []byte {
	if m != nil {
		return m.Encrypted
	}
	return nil
}

func (m *JoinAcceptPayload) GetRxDelay() uint32 {
	if m != nil {
		return m.RxDelay
	}
	return 0
}

func (m *JoinAcceptPayload) GetCFList() *CFList {
	if m != nil {
		return m.CFList
	}
	return nil
}

type DLSettings struct {
	Rx1DROffset uint32 `protobuf:"varint,1,opt,name=rx1_dr_offset,json=rx1DrOffset,proto3" json:"rx1_dr_offset,omitempty"`
	Rx2DR       uint32 `protobuf:"varint,2,opt,name=rx2_dr,json=rx2Dr,proto3" json:"rx2_dr,omitempty"`
}

func (m *DLSettings) Reset()                    { *m = DLSettings{} }
func (*DLSettings) ProtoMessage()               {}
func (*DLSettings) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{9} }

func (m *DLSettings) GetRx1DROffset() uint32 {
	if m != nil {
		return m.Rx1DROffset
	}
	return 0
}

func (m *DLSettings) GetRx2DR() uint32 {
	if m != nil {
		return m.Rx2DR
	}
	return 0
}

type CFList struct {
	Freq []uint32 `protobuf:"varint,1,rep,packed,name=freq" json:"freq,omitempty"`
}

func (m *CFList) Reset()                    { *m = CFList{} }
func (*CFList) ProtoMessage()               {}
func (*CFList) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{10} }

func (m *CFList) GetFreq() []uint32 {
	if m != nil {
		return m.Freq
	}
	return nil
}

// TxSettings contains the LoRaWAN settings for a transmission.
// This message is used in both uplink and downlink
type TxSettings struct {
	Modulation Modulation `protobuf:"varint,1,opt,name=modulation,proto3,enum=ttn.v3.Modulation" json:"modulation,omitempty"`
	// LoRaWAN data rate index
	DataRateIndex int32 `protobuf:"varint,2,opt,name=data_rate_index,json=dataRateIndex,proto3" json:"data_rate_index,omitempty"`
	// Bandwidth in Hz (derived from data_rate_index)
	Bandwidth uint32 `protobuf:"varint,3,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	// LoRa spreading factor (derived from data_rate_index)
	SpreadingFactor uint32 `protobuf:"varint,4,opt,name=spreading_factor,json=spreadingFactor,proto3" json:"spreading_factor,omitempty"`
	// FSK bit rate (derived from data_rate_index)
	BitRate uint32 `protobuf:"varint,5,opt,name=bit_rate,json=bitRate,proto3" json:"bit_rate,omitempty"`
	// LoRa coding rate
	CodingRate string `protobuf:"bytes,6,opt,name=coding_rate,json=codingRate,proto3" json:"coding_rate,omitempty"`
	// Frequency in Hz
	Frequency uint64 `protobuf:"varint,7,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// Transmit power in dBm
	// - not set on uplink messages
	TxPower int32 `protobuf:"varint,8,opt,name=tx_power,json=txPower,proto3" json:"tx_power,omitempty"`
	// LoRa polarization inversion
	// - gateway to end device: true
	// - end device to gateway: false
	PolarizationInversion bool `protobuf:"varint,9,opt,name=polarization_inversion,json=polarizationInversion,proto3" json:"polarization_inversion,omitempty"`
}

func (m *TxSettings) Reset()                    { *m = TxSettings{} }
func (*TxSettings) ProtoMessage()               {}
func (*TxSettings) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{11} }

func (m *TxSettings) GetModulation() Modulation {
	if m != nil {
		return m.Modulation
	}
	return Modulation_LORA
}

func (m *TxSettings) GetDataRateIndex() int32 {
	if m != nil {
		return m.DataRateIndex
	}
	return 0
}

func (m *TxSettings) GetBandwidth() uint32 {
	if m != nil {
		return m.Bandwidth
	}
	return 0
}

func (m *TxSettings) GetSpreadingFactor() uint32 {
	if m != nil {
		return m.SpreadingFactor
	}
	return 0
}

func (m *TxSettings) GetBitRate() uint32 {
	if m != nil {
		return m.BitRate
	}
	return 0
}

func (m *TxSettings) GetCodingRate() string {
	if m != nil {
		return m.CodingRate
	}
	return ""
}

func (m *TxSettings) GetFrequency() uint64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *TxSettings) GetTxPower() int32 {
	if m != nil {
		return m.TxPower
	}
	return 0
}

func (m *TxSettings) GetPolarizationInversion() bool {
	if m != nil {
		return m.PolarizationInversion
	}
	return false
}

func init() {
	proto.RegisterType((*Message)(nil), "ttn.v3.Message")
	proto.RegisterType((*MHDR)(nil), "ttn.v3.MHDR")
	proto.RegisterType((*MACPayload)(nil), "ttn.v3.MACPayload")
	proto.RegisterType((*FHDR)(nil), "ttn.v3.FHDR")
	proto.RegisterType((*FCtrl)(nil), "ttn.v3.FCtrl")
	proto.RegisterType((*MACCommand)(nil), "ttn.v3.MACCommand")
	proto.RegisterType((*JoinRequestPayload)(nil), "ttn.v3.JoinRequestPayload")
	proto.RegisterType((*RejoinRequestPayload)(nil), "ttn.v3.RejoinRequestPayload")
	proto.RegisterType((*JoinAcceptPayload)(nil), "ttn.v3.JoinAcceptPayload")
	proto.RegisterType((*DLSettings)(nil), "ttn.v3.DLSettings")
	proto.RegisterType((*CFList)(nil), "ttn.v3.CFList")
	proto.RegisterType((*TxSettings)(nil), "ttn.v3.TxSettings")
	proto.RegisterEnum("ttn.v3.MType", MType_name, MType_value)
	proto.RegisterEnum("ttn.v3.Major", Major_name, Major_value)
	proto.RegisterEnum("ttn.v3.CID", CID_name, CID_value)
	proto.RegisterEnum("ttn.v3.RejoinType", RejoinType_name, RejoinType_value)
	proto.RegisterEnum("ttn.v3.Modulation", Modulation_name, Modulation_value)
}
func (x MType) String() string {
	s, ok := MType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Major) String() string {
	s, ok := Major_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x CID) String() string {
	s, ok := CID_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x RejoinType) String() string {
	s, ok := RejoinType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Modulation) String() string {
	s, ok := Modulation_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.MHDR.Size()))
	n1, err := m.MHDR.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.MIC) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.MIC)))
		i += copy(dAtA[i:], m.MIC)
	}
	if m.Payload != nil {
		nn2, err := m.Payload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	return i, nil
}

func (m *Message_MACPayload) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MACPayload != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.MACPayload.Size()))
		n3, err := m.MACPayload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *Message_JoinRequestPayload) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.JoinRequestPayload != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.JoinRequestPayload.Size()))
		n4, err := m.JoinRequestPayload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *Message_JoinAcceptPayload) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.JoinAcceptPayload != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.JoinAcceptPayload.Size()))
		n5, err := m.JoinAcceptPayload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *Message_RejoinRequestPayload) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RejoinRequestPayload != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.RejoinRequestPayload.Size()))
		n6, err := m.RejoinRequestPayload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *MHDR) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MHDR) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.MType))
	}
	if m.Major != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Major))
	}
	return i, nil
}

func (m *MACPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.FHDR.Size()))
	n7, err := m.FHDR.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	if m.FPort != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.FPort))
	}
	if len(m.FRMPayload) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.FRMPayload)))
		i += copy(dAtA[i:], m.FRMPayload)
	}
	return i, nil
}

func (m *FHDR) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FHDR) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.DevAddr.Size()))
	n8, err := m.DevAddr.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	dAtA[i] = 0x12
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.FCtrl.Size()))
	n9, err := m.FCtrl.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	if m.FCnt != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.FCnt))
	}
	if len(m.FOpts) > 0 {
		for _, msg := range m.FOpts {
			dAtA[i] = 0x22
			i++
			i = encodeVarintLorawan(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FCtrl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FCtrl) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ADR {
		dAtA[i] = 0x8
		i++
		if m.ADR {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ADRAckReq {
		dAtA[i] = 0x10
		i++
		if m.ADRAckReq {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Ack {
		dAtA[i] = 0x18
		i++
		if m.Ack {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.FPending {
		dAtA[i] = 0x20
		i++
		if m.FPending {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ClassB {
		dAtA[i] = 0x28
		i++
		if m.ClassB {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *MACCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.CID))
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	return i, nil
}

func (m *JoinRequestPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinRequestPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.JoinEUI.Size()))
	n10, err := m.JoinEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	dAtA[i] = 0x12
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.DevEUI.Size()))
	n11, err := m.DevEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	dAtA[i] = 0x1a
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.DevNonce.Size()))
	n12, err := m.DevNonce.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	return i, nil
}

func (m *RejoinRequestPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RejoinRequestPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RejoinType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.RejoinType))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.NetID.Size()))
	n13, err := m.NetID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	dAtA[i] = 0x1a
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.JoinEUI.Size()))
	n14, err := m.JoinEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	dAtA[i] = 0x22
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.DevEUI.Size()))
	n15, err := m.DevEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	if m.RejoinCnt != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.RejoinCnt))
	}
	return i, nil
}

func (m *JoinAcceptPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinAcceptPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Encrypted) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.Encrypted)))
		i += copy(dAtA[i:], m.Encrypted)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.JoinNonce.Size()))
	n16, err := m.JoinNonce.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	dAtA[i] = 0x1a
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.NetID.Size()))
	n17, err := m.NetID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n17
	dAtA[i] = 0x22
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.DevAddr.Size()))
	n18, err := m.DevAddr.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n18
	dAtA[i] = 0x2a
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.DLSettings.Size()))
	n19, err := m.DLSettings.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n19
	if m.RxDelay != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.RxDelay))
	}
	if m.CFList != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.CFList.Size()))
		n20, err := m.CFList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}

func (m *DLSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DLSettings) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rx1DROffset != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Rx1DROffset))
	}
	if m.Rx2DR != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Rx2DR))
	}
	return i, nil
}

func (m *CFList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CFList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Freq) > 0 {
		dAtA22 := make([]byte, len(m.Freq)*10)
		var j21 int
		for _, num := range m.Freq {
			for num >= 1<<7 {
				dAtA22[j21] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j21++
			}
			dAtA22[j21] = uint8(num)
			j21++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(j21))
		i += copy(dAtA[i:], dAtA22[:j21])
	}
	return i, nil
}

func (m *TxSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxSettings) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Modulation != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Modulation))
	}
	if m.DataRateIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.DataRateIndex))
	}
	if m.Bandwidth != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Bandwidth))
	}
	if m.SpreadingFactor != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.SpreadingFactor))
	}
	if m.BitRate != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.BitRate))
	}
	if len(m.CodingRate) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.CodingRate)))
		i += copy(dAtA[i:], m.CodingRate)
	}
	if m.Frequency != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Frequency))
	}
	if m.TxPower != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.TxPower))
	}
	if m.PolarizationInversion {
		dAtA[i] = 0x48
		i++
		if m.PolarizationInversion {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeFixed64Lorawan(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Lorawan(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintLorawan(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Message) Size() (n int) {
	var l int
	_ = l
	l = m.MHDR.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = len(m.MIC)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	return n
}

func (m *Message_MACPayload) Size() (n int) {
	var l int
	_ = l
	if m.MACPayload != nil {
		l = m.MACPayload.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *Message_JoinRequestPayload) Size() (n int) {
	var l int
	_ = l
	if m.JoinRequestPayload != nil {
		l = m.JoinRequestPayload.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *Message_JoinAcceptPayload) Size() (n int) {
	var l int
	_ = l
	if m.JoinAcceptPayload != nil {
		l = m.JoinAcceptPayload.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *Message_RejoinRequestPayload) Size() (n int) {
	var l int
	_ = l
	if m.RejoinRequestPayload != nil {
		l = m.RejoinRequestPayload.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MHDR) Size() (n int) {
	var l int
	_ = l
	if m.MType != 0 {
		n += 1 + sovLorawan(uint64(m.MType))
	}
	if m.Major != 0 {
		n += 1 + sovLorawan(uint64(m.Major))
	}
	return n
}

func (m *MACPayload) Size() (n int) {
	var l int
	_ = l
	l = m.FHDR.Size()
	n += 1 + l + sovLorawan(uint64(l))
	if m.FPort != 0 {
		n += 1 + sovLorawan(uint64(m.FPort))
	}
	l = len(m.FRMPayload)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}

func (m *FHDR) Size() (n int) {
	var l int
	_ = l
	l = m.DevAddr.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.FCtrl.Size()
	n += 1 + l + sovLorawan(uint64(l))
	if m.FCnt != 0 {
		n += 1 + sovLorawan(uint64(m.FCnt))
	}
	if len(m.FOpts) > 0 {
		for _, e := range m.FOpts {
			l = e.Size()
			n += 1 + l + sovLorawan(uint64(l))
		}
	}
	return n
}

func (m *FCtrl) Size() (n int) {
	var l int
	_ = l
	if m.ADR {
		n += 2
	}
	if m.ADRAckReq {
		n += 2
	}
	if m.Ack {
		n += 2
	}
	if m.FPending {
		n += 2
	}
	if m.ClassB {
		n += 2
	}
	return n
}

func (m *MACCommand) Size() (n int) {
	var l int
	_ = l
	if m.CID != 0 {
		n += 1 + sovLorawan(uint64(m.CID))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}

func (m *JoinRequestPayload) Size() (n int) {
	var l int
	_ = l
	l = m.JoinEUI.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.DevEUI.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.DevNonce.Size()
	n += 1 + l + sovLorawan(uint64(l))
	return n
}

func (m *RejoinRequestPayload) Size() (n int) {
	var l int
	_ = l
	if m.RejoinType != 0 {
		n += 1 + sovLorawan(uint64(m.RejoinType))
	}
	l = m.NetID.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.JoinEUI.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.DevEUI.Size()
	n += 1 + l + sovLorawan(uint64(l))
	if m.RejoinCnt != 0 {
		n += 1 + sovLorawan(uint64(m.RejoinCnt))
	}
	return n
}

func (m *JoinAcceptPayload) Size() (n int) {
	var l int
	_ = l
	l = len(m.Encrypted)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	l = m.JoinNonce.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.NetID.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.DevAddr.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.DLSettings.Size()
	n += 1 + l + sovLorawan(uint64(l))
	if m.RxDelay != 0 {
		n += 1 + sovLorawan(uint64(m.RxDelay))
	}
	if m.CFList != nil {
		l = m.CFList.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}

func (m *DLSettings) Size() (n int) {
	var l int
	_ = l
	if m.Rx1DROffset != 0 {
		n += 1 + sovLorawan(uint64(m.Rx1DROffset))
	}
	if m.Rx2DR != 0 {
		n += 1 + sovLorawan(uint64(m.Rx2DR))
	}
	return n
}

func (m *CFList) Size() (n int) {
	var l int
	_ = l
	if len(m.Freq) > 0 {
		l = 0
		for _, e := range m.Freq {
			l += sovLorawan(uint64(e))
		}
		n += 1 + sovLorawan(uint64(l)) + l
	}
	return n
}

func (m *TxSettings) Size() (n int) {
	var l int
	_ = l
	if m.Modulation != 0 {
		n += 1 + sovLorawan(uint64(m.Modulation))
	}
	if m.DataRateIndex != 0 {
		n += 1 + sovLorawan(uint64(m.DataRateIndex))
	}
	if m.Bandwidth != 0 {
		n += 1 + sovLorawan(uint64(m.Bandwidth))
	}
	if m.SpreadingFactor != 0 {
		n += 1 + sovLorawan(uint64(m.SpreadingFactor))
	}
	if m.BitRate != 0 {
		n += 1 + sovLorawan(uint64(m.BitRate))
	}
	l = len(m.CodingRate)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.Frequency != 0 {
		n += 1 + sovLorawan(uint64(m.Frequency))
	}
	if m.TxPower != 0 {
		n += 1 + sovLorawan(uint64(m.TxPower))
	}
	if m.PolarizationInversion {
		n += 2
	}
	return n
}

func sovLorawan(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLorawan(x uint64) (n int) {
	return sovLorawan(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Message) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message{`,
		`MHDR:` + strings.Replace(strings.Replace(this.MHDR.String(), "MHDR", "MHDR", 1), `&`, ``, 1) + `,`,
		`MIC:` + fmt.Sprintf("%v", this.MIC) + `,`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message_MACPayload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message_MACPayload{`,
		`MACPayload:` + strings.Replace(fmt.Sprintf("%v", this.MACPayload), "MACPayload", "MACPayload", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message_JoinRequestPayload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message_JoinRequestPayload{`,
		`JoinRequestPayload:` + strings.Replace(fmt.Sprintf("%v", this.JoinRequestPayload), "JoinRequestPayload", "JoinRequestPayload", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message_JoinAcceptPayload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message_JoinAcceptPayload{`,
		`JoinAcceptPayload:` + strings.Replace(fmt.Sprintf("%v", this.JoinAcceptPayload), "JoinAcceptPayload", "JoinAcceptPayload", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message_RejoinRequestPayload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message_RejoinRequestPayload{`,
		`RejoinRequestPayload:` + strings.Replace(fmt.Sprintf("%v", this.RejoinRequestPayload), "RejoinRequestPayload", "RejoinRequestPayload", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MHDR) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MHDR{`,
		`MType:` + fmt.Sprintf("%v", this.MType) + `,`,
		`Major:` + fmt.Sprintf("%v", this.Major) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACPayload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACPayload{`,
		`FHDR:` + strings.Replace(strings.Replace(this.FHDR.String(), "FHDR", "FHDR", 1), `&`, ``, 1) + `,`,
		`FPort:` + fmt.Sprintf("%v", this.FPort) + `,`,
		`FRMPayload:` + fmt.Sprintf("%v", this.FRMPayload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FHDR) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FHDR{`,
		`DevAddr:` + fmt.Sprintf("%v", this.DevAddr) + `,`,
		`FCtrl:` + strings.Replace(strings.Replace(this.FCtrl.String(), "FCtrl", "FCtrl", 1), `&`, ``, 1) + `,`,
		`FCnt:` + fmt.Sprintf("%v", this.FCnt) + `,`,
		`FOpts:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.FOpts), "MACCommand", "MACCommand", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FCtrl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FCtrl{`,
		`ADR:` + fmt.Sprintf("%v", this.ADR) + `,`,
		`ADRAckReq:` + fmt.Sprintf("%v", this.ADRAckReq) + `,`,
		`Ack:` + fmt.Sprintf("%v", this.Ack) + `,`,
		`FPending:` + fmt.Sprintf("%v", this.FPending) + `,`,
		`ClassB:` + fmt.Sprintf("%v", this.ClassB) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand{`,
		`CID:` + fmt.Sprintf("%v", this.CID) + `,`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JoinRequestPayload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JoinRequestPayload{`,
		`JoinEUI:` + fmt.Sprintf("%v", this.JoinEUI) + `,`,
		`DevEUI:` + fmt.Sprintf("%v", this.DevEUI) + `,`,
		`DevNonce:` + fmt.Sprintf("%v", this.DevNonce) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RejoinRequestPayload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RejoinRequestPayload{`,
		`RejoinType:` + fmt.Sprintf("%v", this.RejoinType) + `,`,
		`NetID:` + fmt.Sprintf("%v", this.NetID) + `,`,
		`JoinEUI:` + fmt.Sprintf("%v", this.JoinEUI) + `,`,
		`DevEUI:` + fmt.Sprintf("%v", this.DevEUI) + `,`,
		`RejoinCnt:` + fmt.Sprintf("%v", this.RejoinCnt) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JoinAcceptPayload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JoinAcceptPayload{`,
		`Encrypted:` + fmt.Sprintf("%v", this.Encrypted) + `,`,
		`JoinNonce:` + fmt.Sprintf("%v", this.JoinNonce) + `,`,
		`NetID:` + fmt.Sprintf("%v", this.NetID) + `,`,
		`DevAddr:` + fmt.Sprintf("%v", this.DevAddr) + `,`,
		`DLSettings:` + strings.Replace(strings.Replace(this.DLSettings.String(), "DLSettings", "DLSettings", 1), `&`, ``, 1) + `,`,
		`RxDelay:` + fmt.Sprintf("%v", this.RxDelay) + `,`,
		`CFList:` + strings.Replace(fmt.Sprintf("%v", this.CFList), "CFList", "CFList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DLSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DLSettings{`,
		`Rx1DROffset:` + fmt.Sprintf("%v", this.Rx1DROffset) + `,`,
		`Rx2DR:` + fmt.Sprintf("%v", this.Rx2DR) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CFList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CFList{`,
		`Freq:` + fmt.Sprintf("%v", this.Freq) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TxSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TxSettings{`,
		`Modulation:` + fmt.Sprintf("%v", this.Modulation) + `,`,
		`DataRateIndex:` + fmt.Sprintf("%v", this.DataRateIndex) + `,`,
		`Bandwidth:` + fmt.Sprintf("%v", this.Bandwidth) + `,`,
		`SpreadingFactor:` + fmt.Sprintf("%v", this.SpreadingFactor) + `,`,
		`BitRate:` + fmt.Sprintf("%v", this.BitRate) + `,`,
		`CodingRate:` + fmt.Sprintf("%v", this.CodingRate) + `,`,
		`Frequency:` + fmt.Sprintf("%v", this.Frequency) + `,`,
		`TxPower:` + fmt.Sprintf("%v", this.TxPower) + `,`,
		`PolarizationInversion:` + fmt.Sprintf("%v", this.PolarizationInversion) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringLorawan(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MHDR", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MHDR.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MIC", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MIC = append(m.MIC[:0], dAtA[iNdEx:postIndex]...)
			if m.MIC == nil {
				m.MIC = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MACPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACPayload{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Message_MACPayload{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinRequestPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JoinRequestPayload{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Message_JoinRequestPayload{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinAcceptPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JoinAcceptPayload{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Message_JoinAcceptPayload{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejoinRequestPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RejoinRequestPayload{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Message_RejoinRequestPayload{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MHDR) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MHDR: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MHDR: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MType", wireType)
			}
			m.MType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MType |= (MType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Major", wireType)
			}
			m.Major = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Major |= (Major(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MACPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MACPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FHDR", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FHDR.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FPort", wireType)
			}
			m.FPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FPort |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FRMPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FRMPayload = append(m.FRMPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.FRMPayload == nil {
				m.FRMPayload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FHDR) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FHDR: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FHDR: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCtrl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FCtrl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCnt", wireType)
			}
			m.FCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FOpts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FOpts = append(m.FOpts, MACCommand{})
			if err := m.FOpts[len(m.FOpts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FCtrl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FCtrl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FCtrl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ADR", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ADR = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ADRAckReq", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ADRAckReq = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ack", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ack = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FPending", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FPending = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassB", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClassB = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MACCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MACCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CID", wireType)
			}
			m.CID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CID |= (CID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinRequestPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinRequestPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinRequestPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.JoinEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevNonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevNonce.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RejoinRequestPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RejoinRequestPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RejoinRequestPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejoinType", wireType)
			}
			m.RejoinType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RejoinType |= (RejoinType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NetID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.JoinEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejoinCnt", wireType)
			}
			m.RejoinCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RejoinCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinAcceptPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinAcceptPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinAcceptPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encrypted", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Encrypted = append(m.Encrypted[:0], dAtA[iNdEx:postIndex]...)
			if m.Encrypted == nil {
				m.Encrypted = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinNonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.JoinNonce.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NetID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DLSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DLSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxDelay", wireType)
			}
			m.RxDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxDelay |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CFList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CFList == nil {
				m.CFList = &CFList{}
			}
			if err := m.CFList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DLSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DLSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DLSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx1DROffset", wireType)
			}
			m.Rx1DROffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx1DROffset |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx2DR", wireType)
			}
			m.Rx2DR = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx2DR |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CFList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CFList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CFList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLorawan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Freq = append(m.Freq, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLorawan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLorawan
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLorawan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Freq = append(m.Freq, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Freq", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modulation", wireType)
			}
			m.Modulation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Modulation |= (Modulation(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRateIndex", wireType)
			}
			m.DataRateIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataRateIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bandwidth", wireType)
			}
			m.Bandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bandwidth |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpreadingFactor", wireType)
			}
			m.SpreadingFactor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpreadingFactor |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BitRate", wireType)
			}
			m.BitRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BitRate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodingRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodingRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			m.Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxPower", wireType)
			}
			m.TxPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxPower |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolarizationInversion", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PolarizationInversion = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLorawan(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLorawan
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLorawan
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLorawan(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLorawan = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLorawan   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/lorawan.proto", fileDescriptorLorawan)
}

var fileDescriptorLorawan = []byte{
	// 1593 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xd1, 0x6f, 0xe3, 0x48,
	0x19, 0xaf, 0x9b, 0x38, 0x76, 0xbe, 0x34, 0xad, 0x6f, 0x76, 0x6f, 0xaf, 0x7b, 0x2c, 0x4d, 0x15,
	0xd0, 0xe9, 0xae, 0xe8, 0xda, 0x6b, 0x0b, 0x48, 0x80, 0x90, 0x70, 0x6c, 0xf7, 0xea, 0x6d, 0xeb,
	0xf4, 0x26, 0xe9, 0x76, 0x77, 0x25, 0x34, 0x72, 0xed, 0x71, 0xeb, 0x36, 0xb1, 0xbd, 0x93, 0x69,
	0x9b, 0xf2, 0x04, 0xff, 0x00, 0xaf, 0x08, 0x89, 0x3f, 0x80, 0x3f, 0xe5, 0x24, 0x5e, 0x4e, 0x3c,
	0x21, 0x24, 0x22, 0xc8, 0x13, 0x8f, 0xfc, 0x05, 0x08, 0xcd, 0xd8, 0x4d, 0xd2, 0x6e, 0x25, 0xf6,
	0xd0, 0xf2, 0x94, 0xf9, 0x7e, 0x33, 0xf3, 0xfb, 0xbe, 0xf9, 0x7e, 0xf3, 0x7d, 0xe3, 0xc0, 0xe6,
	0x69, 0xcc, 0xcf, 0x2e, 0x4f, 0xd6, 0x83, 0xb4, 0xbf, 0xd1, 0x3d, 0xa3, 0xdd, 0xb3, 0x38, 0x39,
	0x1d, 0x78, 0x94, 0x5f, 0xa7, 0xec, 0x62, 0x83, 0xf3, 0x64, 0xc3, 0xcf, 0xe2, 0x8d, 0x5e, 0xca,
	0xfc, 0x6b, 0x3f, 0x59, 0xcf, 0x58, 0xca, 0x53, 0x54, 0xe1, 0x3c, 0x59, 0xbf, 0xda, 0xfe, 0xf8,
	0xf3, 0x99, 0xad, 0xa7, 0xe9, 0x69, 0xba, 0x21, 0xa7, 0x4f, 0x2e, 0x23, 0x69, 0x49, 0x43, 0x8e,
	0xf2, 0x6d, 0xcd, 0x3f, 0x94, 0x40, 0x3b, 0xa0, 0x83, 0x81, 0x7f, 0x4a, 0xd1, 0x0f, 0x40, 0xed,
	0x93, 0xb3, 0x90, 0x2d, 0x2b, 0xab, 0xca, 0xa7, 0xb5, 0xad, 0x85, 0xf5, 0x9c, 0x72, 0xfd, 0x60,
	0xd7, 0xc6, 0x2d, 0xfd, 0xeb, 0x51, 0x63, 0xee, 0x9b, 0x51, 0x43, 0xc1, 0xe5, 0xfe, 0x6e, 0xc8,
	0xd0, 0x53, 0x28, 0xf5, 0xe3, 0x60, 0x79, 0x7e, 0x55, 0xf9, 0x74, 0xa1, 0xa5, 0x8d, 0x47, 0x8d,
	0xd2, 0x81, 0x6b, 0x61, 0x81, 0x21, 0x07, 0x6a, 0x7d, 0x3f, 0x20, 0x99, 0x7f, 0xd3, 0x4b, 0xfd,
	0x70, 0xb9, 0x24, 0xd9, 0xd0, 0x84, 0xcd, 0xb4, 0x0e, 0xf3, 0x99, 0xd6, 0xe2, 0x78, 0xd4, 0x80,
	0xa9, 0xbd, 0x3b, 0x87, 0xa1, 0xef, 0x07, 0x85, 0x85, 0x3c, 0x78, 0x7c, 0x9e, 0xc6, 0x09, 0x61,
	0xf4, 0xcd, 0x25, 0x1d, 0xf0, 0x09, 0x5f, 0x59, 0xf2, 0x7d, 0x7c, 0xcb, 0xf7, 0x3c, 0x8d, 0x13,
	0x9c, 0x2f, 0x99, 0xf2, 0xa0, 0xf3, 0xb7, 0x50, 0xb4, 0x07, 0x8f, 0x24, 0x9f, 0x1f, 0x04, 0x34,
	0x9b, 0xd2, 0xa9, 0x92, 0xee, 0xe9, 0x2c, 0x9d, 0x29, 0x57, 0x4c, 0xd9, 0x3e, 0x38, 0xbf, 0x0f,
	0xa2, 0x2e, 0x3c, 0x61, 0xf4, 0xc1, 0xf0, 0x2a, 0x92, 0xef, 0xd9, 0x2d, 0x1f, 0xa6, 0xe7, 0x0f,
	0x05, 0xf8, 0x98, 0x3d, 0x80, 0xb7, 0xaa, 0xa0, 0x15, 0xc3, 0xe7, 0x65, 0x5d, 0x33, 0xf4, 0xe6,
	0x57, 0x50, 0x16, 0xd9, 0x47, 0xdf, 0x87, 0x4a, 0x9f, 0xf0, 0x9b, 0x8c, 0x4a, 0x6d, 0x16, 0xb7,
	0xea, 0x93, 0x6c, 0x76, 0x6f, 0x32, 0x8a, 0xd5, 0xbe, 0xf8, 0x41, 0xdf, 0x03, 0xb5, 0xef, 0x9f,
	0xa7, 0x4c, 0xaa, 0x32, 0xbb, 0x48, 0x80, 0x38, 0x9f, 0x6b, 0xfe, 0x46, 0x81, 0x99, 0x9c, 0x0b,
	0xd1, 0xa3, 0x87, 0x44, 0xdf, 0xb9, 0x27, 0x7a, 0x24, 0x44, 0xff, 0x10, 0x2a, 0x11, 0xc9, 0x52,
	0xc6, 0xa5, 0x07, 0x15, 0xab, 0xd1, 0x61, 0xca, 0x38, 0xda, 0x80, 0x5a, 0xc4, 0xfa, 0x77, 0x04,
	0x5f, 0xc8, 0xc5, 0xdd, 0xc1, 0x07, 0x85, 0x23, 0x0c, 0x11, 0xeb, 0x17, 0xe3, 0xe6, 0x9f, 0x15,
	0x28, 0x0b, 0x07, 0xa8, 0x0b, 0x7a, 0x48, 0xaf, 0x88, 0x1f, 0x16, 0x01, 0x2c, 0xb4, 0x7e, 0x22,
	0x5c, 0xfe, 0x75, 0xd4, 0xf8, 0xaf, 0x25, 0x90, 0x5d, 0x9c, 0x6e, 0x88, 0x8c, 0x0c, 0xd6, 0x6d,
	0x7a, 0x65, 0x86, 0x21, 0xc3, 0x5a, 0x98, 0x0f, 0xd0, 0xba, 0x08, 0x33, 0xe0, 0xac, 0x27, 0xc3,
	0xac, 0x4d, 0x13, 0xb1, 0x63, 0x71, 0xd6, 0x9b, 0x39, 0x95, 0x1a, 0x09, 0x00, 0x3d, 0x12, 0x39,
	0x08, 0x12, 0x2e, 0x23, 0xaf, 0xe3, 0x72, 0x64, 0x25, 0xe2, 0x50, 0x95, 0x88, 0xa4, 0x19, 0x1f,
	0x2c, 0x97, 0x57, 0x4b, 0xf7, 0x2e, 0xb0, 0x95, 0xf6, 0xfb, 0x7e, 0x12, 0xb6, 0xca, 0x82, 0x09,
	0xab, 0x51, 0x3b, 0xe3, 0x83, 0xe6, 0xef, 0x15, 0x50, 0xa5, 0x03, 0x51, 0x1b, 0x7e, 0x71, 0x20,
	0x3d, 0xaf, 0x0d, 0xd3, 0xc6, 0x58, 0x60, 0xe8, 0x73, 0xa8, 0xf9, 0x21, 0x23, 0x7e, 0x70, 0x21,
	0x2e, 0x8e, 0x8c, 0x4f, 0x6f, 0xd5, 0xc7, 0xa3, 0x46, 0xd5, 0xb4, 0xb1, 0x19, 0x5c, 0x60, 0xfa,
	0x06, 0x57, 0xfd, 0x90, 0xe5, 0x43, 0x64, 0x40, 0xc9, 0x0f, 0x2e, 0x64, 0x5c, 0x3a, 0x16, 0x43,
	0xf4, 0x1d, 0xa8, 0x46, 0x24, 0xa3, 0x49, 0x18, 0x27, 0xa7, 0xb2, 0x14, 0x74, 0xac, 0x47, 0x87,
	0xb9, 0x8d, 0x3e, 0x02, 0x2d, 0xe8, 0xf9, 0x83, 0x01, 0x39, 0x91, 0xd7, 0x5a, 0xc7, 0x15, 0x69,
	0xb6, 0x9a, 0x9e, 0xd4, 0xbc, 0x08, 0x1b, 0x7d, 0x02, 0xa5, 0x20, 0x0e, 0x8b, 0xab, 0x54, 0xbb,
	0x3d, 0x97, 0xe5, 0xda, 0x79, 0xb0, 0x96, 0x6b, 0x63, 0xb1, 0x00, 0x2d, 0x83, 0x76, 0xab, 0xa9,
	0xac, 0x73, 0x7c, 0x6b, 0x36, 0xff, 0x38, 0x0f, 0xe8, 0xed, 0xc2, 0x43, 0xbf, 0x04, 0x5d, 0xd6,
	0x04, 0xbd, 0x8c, 0x0b, 0x39, 0x5b, 0x85, 0x9c, 0x1b, 0xef, 0x2e, 0xa7, 0x73, 0xe4, 0xfe, 0xf8,
	0x87, 0xe3, 0x51, 0x43, 0x13, 0x0e, 0x9c, 0x23, 0x17, 0x6b, 0x82, 0xd3, 0xb9, 0x8c, 0xd1, 0x6b,
	0x10, 0x12, 0x4b, 0xf6, 0xbc, 0xef, 0x98, 0xff, 0x3b, 0x7b, 0xc5, 0xa6, 0x57, 0x82, 0xbc, 0x12,
	0xd2, 0x2b, 0xc1, 0x7d, 0x0c, 0x55, 0xc1, 0x9d, 0xa4, 0x49, 0x40, 0x8b, 0x1b, 0xfc, 0xd3, 0x82,
	0x7d, 0xeb, 0x5b, 0x5d, 0x45, 0x4f, 0x30, 0x60, 0x71, 0xad, 0xe5, 0xa8, 0xf9, 0xef, 0x79, 0x78,
	0xfc, 0x50, 0x13, 0x40, 0xdb, 0x50, 0x2b, 0x5a, 0xc8, 0x4c, 0x61, 0xa3, 0xbb, 0x7d, 0x43, 0x56,
	0x37, 0xb0, 0xc9, 0x18, 0x1d, 0x43, 0x25, 0xa1, 0x9c, 0xc4, 0x85, 0x22, 0xad, 0x5f, 0x7c, 0xfb,
	0x0c, 0x78, 0x94, 0xbb, 0xf6, 0x78, 0xd4, 0x50, 0xe5, 0x00, 0xab, 0x09, 0xe5, 0xee, 0x5d, 0xe9,
	0x4a, 0xff, 0x57, 0xe9, 0xca, 0xef, 0x5b, 0xba, 0xef, 0x42, 0x91, 0x21, 0x59, 0xc3, 0xaa, 0xac,
	0xe1, 0x6a, 0x8e, 0x58, 0x09, 0x6f, 0xfe, 0xa9, 0x04, 0x1f, 0xbc, 0xd5, 0xd5, 0xd1, 0x33, 0xa8,
	0xd2, 0x24, 0x60, 0x37, 0x19, 0xa7, 0x79, 0x25, 0x2c, 0xe0, 0x29, 0x80, 0x5e, 0x03, 0x48, 0xc2,
	0xfc, 0x3a, 0xe4, 0xa9, 0xfe, 0x59, 0x11, 0xf1, 0xf6, 0xbb, 0x47, 0x2c, 0xdc, 0xe6, 0xf7, 0xa1,
	0x7a, 0x7e, 0x3b, 0x9c, 0x91, 0xb0, 0xf4, 0x7e, 0x25, 0x9c, 0x6d, 0xa6, 0xe5, 0xf7, 0xd6, 0x4c,
	0x7f, 0x0e, 0xb5, 0xb0, 0x47, 0x06, 0x94, 0x73, 0xb1, 0xa9, 0x78, 0x2e, 0x27, 0xd7, 0xd4, 0xde,
	0xef, 0x14, 0x33, 0x33, 0x6d, 0x15, 0xc2, 0xde, 0x2d, 0x8a, 0x9e, 0x82, 0xce, 0x86, 0x24, 0xa4,
	0x3d, 0xff, 0x46, 0x3e, 0x8d, 0x75, 0xac, 0xb1, 0xa1, 0x2d, 0x4c, 0xb4, 0x0d, 0x5a, 0x10, 0x91,
	0x5e, 0x3c, 0xe0, 0xcb, 0x9a, 0x64, 0x5d, 0x9c, 0xb4, 0xa2, 0x9d, 0xfd, 0x78, 0xc0, 0x5b, 0x20,
	0xc4, 0xce, 0xc7, 0xb8, 0x12, 0x44, 0xe2, 0xb7, 0x19, 0x00, 0x4c, 0x7d, 0xa2, 0x6d, 0xa8, 0xb3,
	0xe1, 0x26, 0x09, 0x19, 0x49, 0xa3, 0x68, 0x40, 0xb9, 0x54, 0xb2, 0xde, 0x5a, 0x1a, 0x8f, 0x1a,
	0x35, 0x3c, 0xdc, 0xb4, 0x71, 0x5b, 0xc2, 0xb8, 0xc6, 0x86, 0x9b, 0x36, 0xcb, 0x0d, 0xb4, 0x0a,
	0x15, 0x36, 0xdc, 0x22, 0x61, 0xfe, 0x4e, 0xd6, 0x5b, 0x55, 0x91, 0x49, 0x3c, 0xdc, 0xb2, 0x31,
	0x56, 0xd9, 0x70, 0xcb, 0x66, 0xcd, 0x67, 0x50, 0xb8, 0x45, 0x08, 0xca, 0x91, 0x68, 0xd4, 0xca,
	0x6a, 0x49, 0xbe, 0x0c, 0x8c, 0xbe, 0x69, 0xfe, 0x6d, 0x1e, 0xa0, 0x3b, 0x9c, 0xc4, 0xb0, 0x05,
	0xd0, 0x4f, 0xc3, 0xcb, 0x9e, 0xcf, 0xe3, 0x34, 0xb9, 0x5f, 0xc6, 0x07, 0x93, 0x19, 0x3c, 0xb3,
	0x0a, 0x7d, 0x02, 0x4b, 0xa1, 0xcf, 0x7d, 0xc2, 0x7c, 0x4e, 0x49, 0x9c, 0x84, 0x74, 0x58, 0xbc,
	0xa8, 0x75, 0x01, 0x63, 0x9f, 0x53, 0x57, 0x80, 0xe2, 0x96, 0x9e, 0xf8, 0x49, 0x78, 0x1d, 0x87,
	0xfc, 0xac, 0x78, 0x9d, 0xa6, 0x00, 0xfa, 0x0c, 0x8c, 0x41, 0xc6, 0xa8, 0x2f, 0x7a, 0x3f, 0x89,
	0xfc, 0x80, 0xa7, 0xb9, 0xf0, 0x75, 0xbc, 0x34, 0xc1, 0x77, 0x24, 0x2c, 0x64, 0x38, 0x89, 0xb9,
	0xf4, 0x57, 0x54, 0x88, 0x76, 0x12, 0x73, 0xe1, 0x08, 0x35, 0xa0, 0x16, 0xa4, 0x92, 0x42, 0xce,
	0x0a, 0x91, 0xaa, 0x18, 0x72, 0x48, 0x2e, 0x78, 0x06, 0xd5, 0x48, 0x7e, 0xe5, 0x24, 0xc1, 0x8d,
	0x54, 0xaa, 0x8c, 0xa7, 0x80, 0x60, 0xe6, 0x43, 0x92, 0xa5, 0xd7, 0x94, 0x2d, 0xeb, 0xf2, 0x0c,
	0x1a, 0x1f, 0x1e, 0x0a, 0x13, 0xfd, 0x08, 0x9e, 0x64, 0x69, 0xcf, 0x67, 0xf1, 0xaf, 0xe4, 0xa9,
	0x49, 0x9c, 0x5c, 0x51, 0x36, 0x10, 0x59, 0xaa, 0xca, 0xd7, 0xe9, 0xc3, 0xd9, 0x59, 0xf7, 0x76,
	0x72, 0xed, 0xb7, 0x0a, 0xa8, 0xf2, 0xbb, 0x06, 0x19, 0xb0, 0xf0, 0xbc, 0xed, 0x7a, 0x04, 0x3b,
	0x5f, 0x1d, 0x39, 0x9d, 0xae, 0x31, 0x87, 0x96, 0xa0, 0x26, 0x11, 0xd3, 0xb2, 0x9c, 0xc3, 0xae,
	0xa1, 0x20, 0x04, 0x8b, 0x47, 0x9e, 0xd5, 0xf6, 0x76, 0x5c, 0x7c, 0xe0, 0xd8, 0xe4, 0xe8, 0xd0,
	0x98, 0x47, 0x8f, 0xc1, 0x98, 0xc5, 0xec, 0xf6, 0xb1, 0x67, 0x94, 0x04, 0xd9, 0x9d, 0x75, 0x65,
	0xb1, 0xf7, 0xde, 0x2a, 0x55, 0x60, 0xd8, 0xb9, 0xe3, 0xb4, 0xb2, 0xf6, 0x11, 0xa8, 0xf2, 0x13,
	0x0a, 0x2d, 0x02, 0xec, 0xb7, 0xb1, 0x79, 0x6c, 0x7a, 0x04, 0x6f, 0x1a, 0x73, 0x6b, 0xbf, 0x9b,
	0x07, 0xf1, 0x5a, 0x0a, 0x1c, 0x3b, 0x1d, 0x07, 0xbf, 0x70, 0x6c, 0xf2, 0x85, 0x31, 0x87, 0xaa,
	0xa0, 0x0a, 0x5b, 0xc4, 0x27, 0xb6, 0xb8, 0xde, 0x1e, 0xb1, 0x76, 0x1d, 0x6b, 0xcf, 0x98, 0x47,
	0x0b, 0xa0, 0x4b, 0xdb, 0xb4, 0xb1, 0x51, 0x12, 0xb3, 0xf6, 0x51, 0xf7, 0x15, 0xb1, 0x5e, 0x59,
	0xfb, 0x4e, 0x1e, 0x11, 0x7e, 0x49, 0x0e, 0x4d, 0x6c, 0x1e, 0x90, 0x8e, 0xd3, 0x3d, 0x3a, 0x34,
	0x54, 0xb9, 0xc6, 0x79, 0x41, 0x3a, 0x5d, 0xb3, 0x7b, 0xd4, 0x31, 0x2a, 0x22, 0x05, 0x9e, 0x73,
	0x4c, 0xac, 0x5d, 0xd3, 0xf3, 0x9c, 0x7d, 0x43, 0x43, 0x8f, 0x60, 0x09, 0xbf, 0x24, 0x5d, 0xf7,
	0xc0, 0xf5, 0xbe, 0x2c, 0x76, 0xe9, 0x82, 0xa9, 0x7b, 0x97, 0xa9, 0x2a, 0x99, 0xf6, 0x27, 0x1b,
	0x21, 0x0f, 0x73, 0xcf, 0x79, 0x65, 0xd4, 0x04, 0x87, 0x69, 0xe3, 0x3b, 0xeb, 0x17, 0x84, 0x27,
	0xdb, 0x79, 0xe1, 0x5a, 0x8e, 0x20, 0x77, 0x8c, 0xba, 0x48, 0xe1, 0x4e, 0x1b, 0x5b, 0x0e, 0xc9,
	0x53, 0x64, 0x2c, 0xa2, 0x27, 0x80, 0x8a, 0x74, 0xcd, 0x6e, 0x5d, 0x5a, 0xfb, 0x02, 0x60, 0xfa,
	0x82, 0xa1, 0x1a, 0x68, 0x56, 0xdb, 0xeb, 0x3a, 0x2f, 0x85, 0x84, 0x35, 0xd0, 0x3a, 0x4e, 0xa7,
	0xe3, 0xb6, 0x3d, 0x43, 0x41, 0x3a, 0x94, 0xf7, 0x9c, 0x57, 0x1d, 0x63, 0x7e, 0xad, 0x01, 0x30,
	0x2d, 0x16, 0x81, 0x8b, 0x4c, 0x1b, 0x73, 0x48, 0x83, 0xd2, 0x4e, 0x67, 0xcf, 0x50, 0x5a, 0x5f,
	0xfe, 0xe5, 0x1f, 0x2b, 0x73, 0xbf, 0x1e, 0xaf, 0x28, 0x5f, 0x8f, 0x57, 0x94, 0x6f, 0xc6, 0x2b,
	0xca, 0xdf, 0xc7, 0x2b, 0xca, 0x3f, 0xc7, 0x2b, 0x73, 0xff, 0x1a, 0xaf, 0x28, 0xaf, 0x3f, 0x7b,
	0xa7, 0x16, 0xc7, 0x93, 0xec, 0xe4, 0xa4, 0x22, 0xff, 0xfa, 0x6c, 0xff, 0x27, 0x00, 0x00, 0xff,
	0xff, 0x86, 0x5e, 0xcb, 0x37, 0x66, 0x0d, 0x00, 0x00,
}
