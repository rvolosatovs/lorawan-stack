// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/lorawan.proto

package ttnpb // import "go.thethings.network/lorawan-stack/pkg/ttnpb"

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import types "github.com/gogo/protobuf/types"
import _ "github.com/mwitkow/go-proto-validators"

import go_thethings_network_lorawan_stack_pkg_types "go.thethings.network/lorawan-stack/pkg/types"
import time "time"

import strconv "strconv"

import bytes "bytes"

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MType int32

const (
	MType_JOIN_REQUEST     MType = 0
	MType_JOIN_ACCEPT      MType = 1
	MType_UNCONFIRMED_UP   MType = 2
	MType_UNCONFIRMED_DOWN MType = 3
	MType_CONFIRMED_UP     MType = 4
	MType_CONFIRMED_DOWN   MType = 5
	MType_REJOIN_REQUEST   MType = 6
	MType_PROPRIETARY      MType = 7
)

var MType_name = map[int32]string{
	0: "JOIN_REQUEST",
	1: "JOIN_ACCEPT",
	2: "UNCONFIRMED_UP",
	3: "UNCONFIRMED_DOWN",
	4: "CONFIRMED_UP",
	5: "CONFIRMED_DOWN",
	6: "REJOIN_REQUEST",
	7: "PROPRIETARY",
}
var MType_value = map[string]int32{
	"JOIN_REQUEST":     0,
	"JOIN_ACCEPT":      1,
	"UNCONFIRMED_UP":   2,
	"UNCONFIRMED_DOWN": 3,
	"CONFIRMED_UP":     4,
	"CONFIRMED_DOWN":   5,
	"REJOIN_REQUEST":   6,
	"PROPRIETARY":      7,
}

func (MType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{0}
}

type Major int32

const (
	Major_LORAWAN_R1 Major = 0
)

var Major_name = map[int32]string{
	0: "LORAWAN_R1",
}
var Major_value = map[string]int32{
	"LORAWAN_R1": 0,
}

func (Major) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{1}
}

type MACVersion int32

const (
	MAC_UNKNOWN MACVersion = 0
	MAC_V1_0    MACVersion = 1
	MAC_V1_0_1  MACVersion = 2
	MAC_V1_0_2  MACVersion = 3
	MAC_V1_1    MACVersion = 4
)

var MACVersion_name = map[int32]string{
	0: "MAC_UNKNOWN",
	1: "MAC_V1_0",
	2: "MAC_V1_0_1",
	3: "MAC_V1_0_2",
	4: "MAC_V1_1",
}
var MACVersion_value = map[string]int32{
	"MAC_UNKNOWN": 0,
	"MAC_V1_0":    1,
	"MAC_V1_0_1":  2,
	"MAC_V1_0_2":  3,
	"MAC_V1_1":    4,
}

func (MACVersion) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{2}
}

type PHYVersion int32

const (
	PHY_UNKNOWN      PHYVersion = 0
	PHY_V1_0         PHYVersion = 1
	PHY_V1_0_1       PHYVersion = 2
	PHY_V1_0_2_REV_A PHYVersion = 3
	PHY_V1_0_2_REV_B PHYVersion = 4
	PHY_V1_1_REV_A   PHYVersion = 5
	PHY_V1_1_REV_B   PHYVersion = 6
)

var PHYVersion_name = map[int32]string{
	0: "PHY_UNKNOWN",
	1: "PHY_V1_0",
	2: "PHY_V1_0_1",
	3: "PHY_V1_0_2_REV_A",
	4: "PHY_V1_0_2_REV_B",
	5: "PHY_V1_1_REV_A",
	6: "PHY_V1_1_REV_B",
}
var PHYVersion_value = map[string]int32{
	"PHY_UNKNOWN":      0,
	"PHY_V1_0":         1,
	"PHY_V1_0_1":       2,
	"PHY_V1_0_2_REV_A": 3,
	"PHY_V1_0_2_REV_B": 4,
	"PHY_V1_1_REV_A":   5,
	"PHY_V1_1_REV_B":   6,
}

func (PHYVersion) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{3}
}

type DataRateIndex int32

const (
	DATA_RATE_0  DataRateIndex = 0
	DATA_RATE_1  DataRateIndex = 1
	DATA_RATE_2  DataRateIndex = 2
	DATA_RATE_3  DataRateIndex = 3
	DATA_RATE_4  DataRateIndex = 4
	DATA_RATE_5  DataRateIndex = 5
	DATA_RATE_6  DataRateIndex = 6
	DATA_RATE_7  DataRateIndex = 7
	DATA_RATE_8  DataRateIndex = 8
	DATA_RATE_9  DataRateIndex = 9
	DATA_RATE_10 DataRateIndex = 10
	DATA_RATE_11 DataRateIndex = 11
	DATA_RATE_12 DataRateIndex = 12
	DATA_RATE_13 DataRateIndex = 13
	DATA_RATE_14 DataRateIndex = 14
	DATA_RATE_15 DataRateIndex = 15
)

var DataRateIndex_name = map[int32]string{
	0:  "DATA_RATE_0",
	1:  "DATA_RATE_1",
	2:  "DATA_RATE_2",
	3:  "DATA_RATE_3",
	4:  "DATA_RATE_4",
	5:  "DATA_RATE_5",
	6:  "DATA_RATE_6",
	7:  "DATA_RATE_7",
	8:  "DATA_RATE_8",
	9:  "DATA_RATE_9",
	10: "DATA_RATE_10",
	11: "DATA_RATE_11",
	12: "DATA_RATE_12",
	13: "DATA_RATE_13",
	14: "DATA_RATE_14",
	15: "DATA_RATE_15",
}
var DataRateIndex_value = map[string]int32{
	"DATA_RATE_0":  0,
	"DATA_RATE_1":  1,
	"DATA_RATE_2":  2,
	"DATA_RATE_3":  3,
	"DATA_RATE_4":  4,
	"DATA_RATE_5":  5,
	"DATA_RATE_6":  6,
	"DATA_RATE_7":  7,
	"DATA_RATE_8":  8,
	"DATA_RATE_9":  9,
	"DATA_RATE_10": 10,
	"DATA_RATE_11": 11,
	"DATA_RATE_12": 12,
	"DATA_RATE_13": 13,
	"DATA_RATE_14": 14,
	"DATA_RATE_15": 15,
}

func (DataRateIndex) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{4}
}

type RejoinType int32

const (
	RejoinType_CONTEXT RejoinType = 0
	RejoinType_SESSION RejoinType = 1
	RejoinType_KEYS    RejoinType = 2
)

var RejoinType_name = map[int32]string{
	0: "CONTEXT",
	1: "SESSION",
	2: "KEYS",
}
var RejoinType_value = map[string]int32{
	"CONTEXT": 0,
	"SESSION": 1,
	"KEYS":    2,
}

func (RejoinType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{5}
}

type CFListType int32

const (
	CFListType_FREQUENCIES   CFListType = 0
	CFListType_CHANNEL_MASKS CFListType = 1
)

var CFListType_name = map[int32]string{
	0: "FREQUENCIES",
	1: "CHANNEL_MASKS",
}
var CFListType_value = map[string]int32{
	"FREQUENCIES":   0,
	"CHANNEL_MASKS": 1,
}

func (CFListType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{6}
}

type Class int32

const (
	CLASS_A Class = 0
	CLASS_B Class = 1
	CLASS_C Class = 2
)

var Class_name = map[int32]string{
	0: "CLASS_A",
	1: "CLASS_B",
	2: "CLASS_C",
}
var Class_value = map[string]int32{
	"CLASS_A": 0,
	"CLASS_B": 1,
	"CLASS_C": 2,
}

func (Class) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{7}
}

type TxSchedulePriority int32

const (
	TxSchedulePriority_LOWEST       TxSchedulePriority = 0
	TxSchedulePriority_LOW          TxSchedulePriority = 1
	TxSchedulePriority_BELOW_NORMAL TxSchedulePriority = 2
	TxSchedulePriority_NORMAL       TxSchedulePriority = 3
	TxSchedulePriority_ABOVE_NORMAL TxSchedulePriority = 4
	TxSchedulePriority_HIGH         TxSchedulePriority = 5
	TxSchedulePriority_HIGHEST      TxSchedulePriority = 6
)

var TxSchedulePriority_name = map[int32]string{
	0: "LOWEST",
	1: "LOW",
	2: "BELOW_NORMAL",
	3: "NORMAL",
	4: "ABOVE_NORMAL",
	5: "HIGH",
	6: "HIGHEST",
}
var TxSchedulePriority_value = map[string]int32{
	"LOWEST":       0,
	"LOW":          1,
	"BELOW_NORMAL": 2,
	"NORMAL":       3,
	"ABOVE_NORMAL": 4,
	"HIGH":         5,
	"HIGHEST":      6,
}

func (TxSchedulePriority) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{8}
}

type MACCommandIdentifier int32

const (
	CID_RFU_0              MACCommandIdentifier = 0
	CID_RESET              MACCommandIdentifier = 1
	CID_LINK_CHECK         MACCommandIdentifier = 2
	CID_LINK_ADR           MACCommandIdentifier = 3
	CID_DUTY_CYCLE         MACCommandIdentifier = 4
	CID_RX_PARAM_SETUP     MACCommandIdentifier = 5
	CID_DEV_STATUS         MACCommandIdentifier = 6
	CID_NEW_CHANNEL        MACCommandIdentifier = 7
	CID_RX_TIMING_SETUP    MACCommandIdentifier = 8
	CID_TX_PARAM_SETUP     MACCommandIdentifier = 9
	CID_DL_CHANNEL         MACCommandIdentifier = 10
	CID_REKEY              MACCommandIdentifier = 11
	CID_ADR_PARAM_SETUP    MACCommandIdentifier = 12
	CID_DEVICE_TIME        MACCommandIdentifier = 13
	CID_FORCE_REJOIN       MACCommandIdentifier = 14
	CID_REJOIN_PARAM_SETUP MACCommandIdentifier = 15
	CID_PING_SLOT_INFO     MACCommandIdentifier = 16
	CID_PING_SLOT_CHANNEL  MACCommandIdentifier = 17
	CID_BEACON_TIMING      MACCommandIdentifier = 18
	CID_BEACON_FREQ        MACCommandIdentifier = 19
	CID_DEVICE_MODE        MACCommandIdentifier = 32
)

var MACCommandIdentifier_name = map[int32]string{
	0:  "CID_RFU_0",
	1:  "CID_RESET",
	2:  "CID_LINK_CHECK",
	3:  "CID_LINK_ADR",
	4:  "CID_DUTY_CYCLE",
	5:  "CID_RX_PARAM_SETUP",
	6:  "CID_DEV_STATUS",
	7:  "CID_NEW_CHANNEL",
	8:  "CID_RX_TIMING_SETUP",
	9:  "CID_TX_PARAM_SETUP",
	10: "CID_DL_CHANNEL",
	11: "CID_REKEY",
	12: "CID_ADR_PARAM_SETUP",
	13: "CID_DEVICE_TIME",
	14: "CID_FORCE_REJOIN",
	15: "CID_REJOIN_PARAM_SETUP",
	16: "CID_PING_SLOT_INFO",
	17: "CID_PING_SLOT_CHANNEL",
	18: "CID_BEACON_TIMING",
	19: "CID_BEACON_FREQ",
	32: "CID_DEVICE_MODE",
}
var MACCommandIdentifier_value = map[string]int32{
	"CID_RFU_0":              0,
	"CID_RESET":              1,
	"CID_LINK_CHECK":         2,
	"CID_LINK_ADR":           3,
	"CID_DUTY_CYCLE":         4,
	"CID_RX_PARAM_SETUP":     5,
	"CID_DEV_STATUS":         6,
	"CID_NEW_CHANNEL":        7,
	"CID_RX_TIMING_SETUP":    8,
	"CID_TX_PARAM_SETUP":     9,
	"CID_DL_CHANNEL":         10,
	"CID_REKEY":              11,
	"CID_ADR_PARAM_SETUP":    12,
	"CID_DEVICE_TIME":        13,
	"CID_FORCE_REJOIN":       14,
	"CID_REJOIN_PARAM_SETUP": 15,
	"CID_PING_SLOT_INFO":     16,
	"CID_PING_SLOT_CHANNEL":  17,
	"CID_BEACON_TIMING":      18,
	"CID_BEACON_FREQ":        19,
	"CID_DEVICE_MODE":        32,
}

func (MACCommandIdentifier) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{9}
}

type AggregatedDutyCycle int32

const (
	DUTY_CYCLE_1     AggregatedDutyCycle = 0
	DUTY_CYCLE_2     AggregatedDutyCycle = 1
	DUTY_CYCLE_4     AggregatedDutyCycle = 2
	DUTY_CYCLE_8     AggregatedDutyCycle = 3
	DUTY_CYCLE_16    AggregatedDutyCycle = 4
	DUTY_CYCLE_32    AggregatedDutyCycle = 5
	DUTY_CYCLE_64    AggregatedDutyCycle = 6
	DUTY_CYCLE_128   AggregatedDutyCycle = 7
	DUTY_CYCLE_256   AggregatedDutyCycle = 8
	DUTY_CYCLE_512   AggregatedDutyCycle = 9
	DUTY_CYCLE_1024  AggregatedDutyCycle = 10
	DUTY_CYCLE_2048  AggregatedDutyCycle = 11
	DUTY_CYCLE_4096  AggregatedDutyCycle = 12
	DUTY_CYCLE_8192  AggregatedDutyCycle = 13
	DUTY_CYCLE_16384 AggregatedDutyCycle = 14
	DUTY_CYCLE_32768 AggregatedDutyCycle = 15
)

var AggregatedDutyCycle_name = map[int32]string{
	0:  "DUTY_CYCLE_1",
	1:  "DUTY_CYCLE_2",
	2:  "DUTY_CYCLE_4",
	3:  "DUTY_CYCLE_8",
	4:  "DUTY_CYCLE_16",
	5:  "DUTY_CYCLE_32",
	6:  "DUTY_CYCLE_64",
	7:  "DUTY_CYCLE_128",
	8:  "DUTY_CYCLE_256",
	9:  "DUTY_CYCLE_512",
	10: "DUTY_CYCLE_1024",
	11: "DUTY_CYCLE_2048",
	12: "DUTY_CYCLE_4096",
	13: "DUTY_CYCLE_8192",
	14: "DUTY_CYCLE_16384",
	15: "DUTY_CYCLE_32768",
}
var AggregatedDutyCycle_value = map[string]int32{
	"DUTY_CYCLE_1":     0,
	"DUTY_CYCLE_2":     1,
	"DUTY_CYCLE_4":     2,
	"DUTY_CYCLE_8":     3,
	"DUTY_CYCLE_16":    4,
	"DUTY_CYCLE_32":    5,
	"DUTY_CYCLE_64":    6,
	"DUTY_CYCLE_128":   7,
	"DUTY_CYCLE_256":   8,
	"DUTY_CYCLE_512":   9,
	"DUTY_CYCLE_1024":  10,
	"DUTY_CYCLE_2048":  11,
	"DUTY_CYCLE_4096":  12,
	"DUTY_CYCLE_8192":  13,
	"DUTY_CYCLE_16384": 14,
	"DUTY_CYCLE_32768": 15,
}

func (AggregatedDutyCycle) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{10}
}

type PingSlotPeriod int32

const (
	PING_EVERY_1S   PingSlotPeriod = 0
	PING_EVERY_2S   PingSlotPeriod = 1
	PING_EVERY_4S   PingSlotPeriod = 2
	PING_EVERY_8S   PingSlotPeriod = 3
	PING_EVERY_16S  PingSlotPeriod = 4
	PING_EVERY_32S  PingSlotPeriod = 5
	PING_EVERY_64S  PingSlotPeriod = 6
	PING_EVERY_128S PingSlotPeriod = 7
)

var PingSlotPeriod_name = map[int32]string{
	0: "PING_EVERY_1S",
	1: "PING_EVERY_2S",
	2: "PING_EVERY_4S",
	3: "PING_EVERY_8S",
	4: "PING_EVERY_16S",
	5: "PING_EVERY_32S",
	6: "PING_EVERY_64S",
	7: "PING_EVERY_128S",
}
var PingSlotPeriod_value = map[string]int32{
	"PING_EVERY_1S":   0,
	"PING_EVERY_2S":   1,
	"PING_EVERY_4S":   2,
	"PING_EVERY_8S":   3,
	"PING_EVERY_16S":  4,
	"PING_EVERY_32S":  5,
	"PING_EVERY_64S":  6,
	"PING_EVERY_128S": 7,
}

func (PingSlotPeriod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{11}
}

type RejoinCountExponent int32

const (
	REJOIN_COUNT_16     RejoinCountExponent = 0
	REJOIN_COUNT_32     RejoinCountExponent = 1
	REJOIN_COUNT_64     RejoinCountExponent = 2
	REJOIN_COUNT_128    RejoinCountExponent = 3
	REJOIN_COUNT_256    RejoinCountExponent = 4
	REJOIN_COUNT_512    RejoinCountExponent = 5
	REJOIN_COUNT_1024   RejoinCountExponent = 6
	REJOIN_COUNT_2048   RejoinCountExponent = 7
	REJOIN_COUNT_4096   RejoinCountExponent = 8
	REJOIN_COUNT_8192   RejoinCountExponent = 9
	REJOIN_COUNT_16384  RejoinCountExponent = 10
	REJOIN_COUNT_32768  RejoinCountExponent = 11
	REJOIN_COUNT_65536  RejoinCountExponent = 12
	REJOIN_COUNT_131072 RejoinCountExponent = 13
	REJOIN_COUNT_262144 RejoinCountExponent = 14
	REJOIN_COUNT_524288 RejoinCountExponent = 15
)

var RejoinCountExponent_name = map[int32]string{
	0:  "REJOIN_COUNT_16",
	1:  "REJOIN_COUNT_32",
	2:  "REJOIN_COUNT_64",
	3:  "REJOIN_COUNT_128",
	4:  "REJOIN_COUNT_256",
	5:  "REJOIN_COUNT_512",
	6:  "REJOIN_COUNT_1024",
	7:  "REJOIN_COUNT_2048",
	8:  "REJOIN_COUNT_4096",
	9:  "REJOIN_COUNT_8192",
	10: "REJOIN_COUNT_16384",
	11: "REJOIN_COUNT_32768",
	12: "REJOIN_COUNT_65536",
	13: "REJOIN_COUNT_131072",
	14: "REJOIN_COUNT_262144",
	15: "REJOIN_COUNT_524288",
}
var RejoinCountExponent_value = map[string]int32{
	"REJOIN_COUNT_16":     0,
	"REJOIN_COUNT_32":     1,
	"REJOIN_COUNT_64":     2,
	"REJOIN_COUNT_128":    3,
	"REJOIN_COUNT_256":    4,
	"REJOIN_COUNT_512":    5,
	"REJOIN_COUNT_1024":   6,
	"REJOIN_COUNT_2048":   7,
	"REJOIN_COUNT_4096":   8,
	"REJOIN_COUNT_8192":   9,
	"REJOIN_COUNT_16384":  10,
	"REJOIN_COUNT_32768":  11,
	"REJOIN_COUNT_65536":  12,
	"REJOIN_COUNT_131072": 13,
	"REJOIN_COUNT_262144": 14,
	"REJOIN_COUNT_524288": 15,
}

func (RejoinCountExponent) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{12}
}

type RejoinTimeExponent int32

const (
	REJOIN_TIME_0  RejoinTimeExponent = 0
	REJOIN_TIME_1  RejoinTimeExponent = 1
	REJOIN_TIME_2  RejoinTimeExponent = 2
	REJOIN_TIME_3  RejoinTimeExponent = 3
	REJOIN_TIME_4  RejoinTimeExponent = 4
	REJOIN_TIME_5  RejoinTimeExponent = 5
	REJOIN_TIME_6  RejoinTimeExponent = 6
	REJOIN_TIME_7  RejoinTimeExponent = 7
	REJOIN_TIME_8  RejoinTimeExponent = 8
	REJOIN_TIME_9  RejoinTimeExponent = 9
	REJOIN_TIME_10 RejoinTimeExponent = 10
	REJOIN_TIME_11 RejoinTimeExponent = 11
	REJOIN_TIME_12 RejoinTimeExponent = 12
	REJOIN_TIME_13 RejoinTimeExponent = 13
	REJOIN_TIME_14 RejoinTimeExponent = 14
	REJOIN_TIME_15 RejoinTimeExponent = 15
)

var RejoinTimeExponent_name = map[int32]string{
	0:  "REJOIN_TIME_0",
	1:  "REJOIN_TIME_1",
	2:  "REJOIN_TIME_2",
	3:  "REJOIN_TIME_3",
	4:  "REJOIN_TIME_4",
	5:  "REJOIN_TIME_5",
	6:  "REJOIN_TIME_6",
	7:  "REJOIN_TIME_7",
	8:  "REJOIN_TIME_8",
	9:  "REJOIN_TIME_9",
	10: "REJOIN_TIME_10",
	11: "REJOIN_TIME_11",
	12: "REJOIN_TIME_12",
	13: "REJOIN_TIME_13",
	14: "REJOIN_TIME_14",
	15: "REJOIN_TIME_15",
}
var RejoinTimeExponent_value = map[string]int32{
	"REJOIN_TIME_0":  0,
	"REJOIN_TIME_1":  1,
	"REJOIN_TIME_2":  2,
	"REJOIN_TIME_3":  3,
	"REJOIN_TIME_4":  4,
	"REJOIN_TIME_5":  5,
	"REJOIN_TIME_6":  6,
	"REJOIN_TIME_7":  7,
	"REJOIN_TIME_8":  8,
	"REJOIN_TIME_9":  9,
	"REJOIN_TIME_10": 10,
	"REJOIN_TIME_11": 11,
	"REJOIN_TIME_12": 12,
	"REJOIN_TIME_13": 13,
	"REJOIN_TIME_14": 14,
	"REJOIN_TIME_15": 15,
}

func (RejoinTimeExponent) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{13}
}

type RejoinPeriodExponent int32

const (
	REJOIN_PERIOD_0 RejoinPeriodExponent = 0
	REJOIN_PERIOD_1 RejoinPeriodExponent = 1
	REJOIN_PERIOD_2 RejoinPeriodExponent = 2
	REJOIN_PERIOD_3 RejoinPeriodExponent = 3
	REJOIN_PERIOD_4 RejoinPeriodExponent = 4
	REJOIN_PERIOD_5 RejoinPeriodExponent = 5
	REJOIN_PERIOD_6 RejoinPeriodExponent = 6
	REJOIN_PERIOD_7 RejoinPeriodExponent = 7
)

var RejoinPeriodExponent_name = map[int32]string{
	0: "REJOIN_PERIOD_0",
	1: "REJOIN_PERIOD_1",
	2: "REJOIN_PERIOD_2",
	3: "REJOIN_PERIOD_3",
	4: "REJOIN_PERIOD_4",
	5: "REJOIN_PERIOD_5",
	6: "REJOIN_PERIOD_6",
	7: "REJOIN_PERIOD_7",
}
var RejoinPeriodExponent_value = map[string]int32{
	"REJOIN_PERIOD_0": 0,
	"REJOIN_PERIOD_1": 1,
	"REJOIN_PERIOD_2": 2,
	"REJOIN_PERIOD_3": 3,
	"REJOIN_PERIOD_4": 4,
	"REJOIN_PERIOD_5": 5,
	"REJOIN_PERIOD_6": 6,
	"REJOIN_PERIOD_7": 7,
}

func (RejoinPeriodExponent) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{14}
}

type DeviceEIRP int32

const (
	DEVICE_EIRP_8  DeviceEIRP = 0
	DEVICE_EIRP_10 DeviceEIRP = 1
	DEVICE_EIRP_12 DeviceEIRP = 2
	DEVICE_EIRP_13 DeviceEIRP = 3
	DEVICE_EIRP_14 DeviceEIRP = 4
	DEVICE_EIRP_16 DeviceEIRP = 5
	DEVICE_EIRP_18 DeviceEIRP = 6
	DEVICE_EIRP_20 DeviceEIRP = 7
	DEVICE_EIRP_21 DeviceEIRP = 8
	DEVICE_EIRP_24 DeviceEIRP = 9
	DEVICE_EIRP_26 DeviceEIRP = 10
	DEVICE_EIRP_27 DeviceEIRP = 11
	DEVICE_EIRP_29 DeviceEIRP = 12
	DEVICE_EIRP_30 DeviceEIRP = 13
	DEVICE_EIRP_33 DeviceEIRP = 14
	DEVICE_EIRP_36 DeviceEIRP = 15
)

var DeviceEIRP_name = map[int32]string{
	0:  "DEVICE_EIRP_8",
	1:  "DEVICE_EIRP_10",
	2:  "DEVICE_EIRP_12",
	3:  "DEVICE_EIRP_13",
	4:  "DEVICE_EIRP_14",
	5:  "DEVICE_EIRP_16",
	6:  "DEVICE_EIRP_18",
	7:  "DEVICE_EIRP_20",
	8:  "DEVICE_EIRP_21",
	9:  "DEVICE_EIRP_24",
	10: "DEVICE_EIRP_26",
	11: "DEVICE_EIRP_27",
	12: "DEVICE_EIRP_29",
	13: "DEVICE_EIRP_30",
	14: "DEVICE_EIRP_33",
	15: "DEVICE_EIRP_36",
}
var DeviceEIRP_value = map[string]int32{
	"DEVICE_EIRP_8":  0,
	"DEVICE_EIRP_10": 1,
	"DEVICE_EIRP_12": 2,
	"DEVICE_EIRP_13": 3,
	"DEVICE_EIRP_14": 4,
	"DEVICE_EIRP_16": 5,
	"DEVICE_EIRP_18": 6,
	"DEVICE_EIRP_20": 7,
	"DEVICE_EIRP_21": 8,
	"DEVICE_EIRP_24": 9,
	"DEVICE_EIRP_26": 10,
	"DEVICE_EIRP_27": 11,
	"DEVICE_EIRP_29": 12,
	"DEVICE_EIRP_30": 13,
	"DEVICE_EIRP_33": 14,
	"DEVICE_EIRP_36": 15,
}

func (DeviceEIRP) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{15}
}

type ADRAckLimitExponent int32

const (
	ADR_ACK_LIMIT_1     ADRAckLimitExponent = 0
	ADR_ACK_LIMIT_2     ADRAckLimitExponent = 1
	ADR_ACK_LIMIT_4     ADRAckLimitExponent = 2
	ADR_ACK_LIMIT_8     ADRAckLimitExponent = 3
	ADR_ACK_LIMIT_16    ADRAckLimitExponent = 4
	ADR_ACK_LIMIT_32    ADRAckLimitExponent = 5
	ADR_ACK_LIMIT_64    ADRAckLimitExponent = 6
	ADR_ACK_LIMIT_128   ADRAckLimitExponent = 7
	ADR_ACK_LIMIT_256   ADRAckLimitExponent = 8
	ADR_ACK_LIMIT_512   ADRAckLimitExponent = 9
	ADR_ACK_LIMIT_1024  ADRAckLimitExponent = 10
	ADR_ACK_LIMIT_2048  ADRAckLimitExponent = 11
	ADR_ACK_LIMIT_4096  ADRAckLimitExponent = 12
	ADR_ACK_LIMIT_8192  ADRAckLimitExponent = 13
	ADR_ACK_LIMIT_16384 ADRAckLimitExponent = 14
	ADR_ACK_LIMIT_32768 ADRAckLimitExponent = 15
)

var ADRAckLimitExponent_name = map[int32]string{
	0:  "ADR_ACK_LIMIT_1",
	1:  "ADR_ACK_LIMIT_2",
	2:  "ADR_ACK_LIMIT_4",
	3:  "ADR_ACK_LIMIT_8",
	4:  "ADR_ACK_LIMIT_16",
	5:  "ADR_ACK_LIMIT_32",
	6:  "ADR_ACK_LIMIT_64",
	7:  "ADR_ACK_LIMIT_128",
	8:  "ADR_ACK_LIMIT_256",
	9:  "ADR_ACK_LIMIT_512",
	10: "ADR_ACK_LIMIT_1024",
	11: "ADR_ACK_LIMIT_2048",
	12: "ADR_ACK_LIMIT_4096",
	13: "ADR_ACK_LIMIT_8192",
	14: "ADR_ACK_LIMIT_16384",
	15: "ADR_ACK_LIMIT_32768",
}
var ADRAckLimitExponent_value = map[string]int32{
	"ADR_ACK_LIMIT_1":     0,
	"ADR_ACK_LIMIT_2":     1,
	"ADR_ACK_LIMIT_4":     2,
	"ADR_ACK_LIMIT_8":     3,
	"ADR_ACK_LIMIT_16":    4,
	"ADR_ACK_LIMIT_32":    5,
	"ADR_ACK_LIMIT_64":    6,
	"ADR_ACK_LIMIT_128":   7,
	"ADR_ACK_LIMIT_256":   8,
	"ADR_ACK_LIMIT_512":   9,
	"ADR_ACK_LIMIT_1024":  10,
	"ADR_ACK_LIMIT_2048":  11,
	"ADR_ACK_LIMIT_4096":  12,
	"ADR_ACK_LIMIT_8192":  13,
	"ADR_ACK_LIMIT_16384": 14,
	"ADR_ACK_LIMIT_32768": 15,
}

func (ADRAckLimitExponent) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{16}
}

type ADRAckDelayExponent int32

const (
	ADR_ACK_DELAY_1     ADRAckDelayExponent = 0
	ADR_ACK_DELAY_2     ADRAckDelayExponent = 1
	ADR_ACK_DELAY_4     ADRAckDelayExponent = 2
	ADR_ACK_DELAY_8     ADRAckDelayExponent = 3
	ADR_ACK_DELAY_16    ADRAckDelayExponent = 4
	ADR_ACK_DELAY_32    ADRAckDelayExponent = 5
	ADR_ACK_DELAY_64    ADRAckDelayExponent = 6
	ADR_ACK_DELAY_128   ADRAckDelayExponent = 7
	ADR_ACK_DELAY_256   ADRAckDelayExponent = 8
	ADR_ACK_DELAY_512   ADRAckDelayExponent = 9
	ADR_ACK_DELAY_1024  ADRAckDelayExponent = 10
	ADR_ACK_DELAY_2048  ADRAckDelayExponent = 11
	ADR_ACK_DELAY_4096  ADRAckDelayExponent = 12
	ADR_ACK_DELAY_8192  ADRAckDelayExponent = 13
	ADR_ACK_DELAY_16384 ADRAckDelayExponent = 14
	ADR_ACK_DELAY_32768 ADRAckDelayExponent = 15
)

var ADRAckDelayExponent_name = map[int32]string{
	0:  "ADR_ACK_DELAY_1",
	1:  "ADR_ACK_DELAY_2",
	2:  "ADR_ACK_DELAY_4",
	3:  "ADR_ACK_DELAY_8",
	4:  "ADR_ACK_DELAY_16",
	5:  "ADR_ACK_DELAY_32",
	6:  "ADR_ACK_DELAY_64",
	7:  "ADR_ACK_DELAY_128",
	8:  "ADR_ACK_DELAY_256",
	9:  "ADR_ACK_DELAY_512",
	10: "ADR_ACK_DELAY_1024",
	11: "ADR_ACK_DELAY_2048",
	12: "ADR_ACK_DELAY_4096",
	13: "ADR_ACK_DELAY_8192",
	14: "ADR_ACK_DELAY_16384",
	15: "ADR_ACK_DELAY_32768",
}
var ADRAckDelayExponent_value = map[string]int32{
	"ADR_ACK_DELAY_1":     0,
	"ADR_ACK_DELAY_2":     1,
	"ADR_ACK_DELAY_4":     2,
	"ADR_ACK_DELAY_8":     3,
	"ADR_ACK_DELAY_16":    4,
	"ADR_ACK_DELAY_32":    5,
	"ADR_ACK_DELAY_64":    6,
	"ADR_ACK_DELAY_128":   7,
	"ADR_ACK_DELAY_256":   8,
	"ADR_ACK_DELAY_512":   9,
	"ADR_ACK_DELAY_1024":  10,
	"ADR_ACK_DELAY_2048":  11,
	"ADR_ACK_DELAY_4096":  12,
	"ADR_ACK_DELAY_8192":  13,
	"ADR_ACK_DELAY_16384": 14,
	"ADR_ACK_DELAY_32768": 15,
}

func (ADRAckDelayExponent) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{17}
}

type RxDelay int32

const (
	RX_DELAY_0  RxDelay = 0
	RX_DELAY_1  RxDelay = 1
	RX_DELAY_2  RxDelay = 2
	RX_DELAY_3  RxDelay = 3
	RX_DELAY_4  RxDelay = 4
	RX_DELAY_5  RxDelay = 5
	RX_DELAY_6  RxDelay = 6
	RX_DELAY_7  RxDelay = 7
	RX_DELAY_8  RxDelay = 8
	RX_DELAY_9  RxDelay = 9
	RX_DELAY_10 RxDelay = 10
	RX_DELAY_11 RxDelay = 11
	RX_DELAY_12 RxDelay = 12
	RX_DELAY_13 RxDelay = 13
	RX_DELAY_14 RxDelay = 14
	RX_DELAY_15 RxDelay = 15
)

var RxDelay_name = map[int32]string{
	0:  "RX_DELAY_0",
	1:  "RX_DELAY_1",
	2:  "RX_DELAY_2",
	3:  "RX_DELAY_3",
	4:  "RX_DELAY_4",
	5:  "RX_DELAY_5",
	6:  "RX_DELAY_6",
	7:  "RX_DELAY_7",
	8:  "RX_DELAY_8",
	9:  "RX_DELAY_9",
	10: "RX_DELAY_10",
	11: "RX_DELAY_11",
	12: "RX_DELAY_12",
	13: "RX_DELAY_13",
	14: "RX_DELAY_14",
	15: "RX_DELAY_15",
}
var RxDelay_value = map[string]int32{
	"RX_DELAY_0":  0,
	"RX_DELAY_1":  1,
	"RX_DELAY_2":  2,
	"RX_DELAY_3":  3,
	"RX_DELAY_4":  4,
	"RX_DELAY_5":  5,
	"RX_DELAY_6":  6,
	"RX_DELAY_7":  7,
	"RX_DELAY_8":  8,
	"RX_DELAY_9":  9,
	"RX_DELAY_10": 10,
	"RX_DELAY_11": 11,
	"RX_DELAY_12": 12,
	"RX_DELAY_13": 13,
	"RX_DELAY_14": 14,
	"RX_DELAY_15": 15,
}

func (RxDelay) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{18}
}

type Minor int32

const (
	MINOR_RFU_0  Minor = 0
	MINOR_1      Minor = 1
	MINOR_RFU_2  Minor = 2
	MINOR_RFU_3  Minor = 3
	MINOR_RFU_4  Minor = 4
	MINOR_RFU_5  Minor = 5
	MINOR_RFU_6  Minor = 6
	MINOR_RFU_7  Minor = 7
	MINOR_RFU_8  Minor = 8
	MINOR_RFU_9  Minor = 9
	MINOR_RFU_10 Minor = 10
	MINOR_RFU_11 Minor = 11
	MINOR_RFU_12 Minor = 12
	MINOR_RFU_13 Minor = 13
	MINOR_RFU_14 Minor = 14
	MINOR_RFU_15 Minor = 15
)

var Minor_name = map[int32]string{
	0:  "MINOR_RFU_0",
	1:  "MINOR_1",
	2:  "MINOR_RFU_2",
	3:  "MINOR_RFU_3",
	4:  "MINOR_RFU_4",
	5:  "MINOR_RFU_5",
	6:  "MINOR_RFU_6",
	7:  "MINOR_RFU_7",
	8:  "MINOR_RFU_8",
	9:  "MINOR_RFU_9",
	10: "MINOR_RFU_10",
	11: "MINOR_RFU_11",
	12: "MINOR_RFU_12",
	13: "MINOR_RFU_13",
	14: "MINOR_RFU_14",
	15: "MINOR_RFU_15",
}
var Minor_value = map[string]int32{
	"MINOR_RFU_0":  0,
	"MINOR_1":      1,
	"MINOR_RFU_2":  2,
	"MINOR_RFU_3":  3,
	"MINOR_RFU_4":  4,
	"MINOR_RFU_5":  5,
	"MINOR_RFU_6":  6,
	"MINOR_RFU_7":  7,
	"MINOR_RFU_8":  8,
	"MINOR_RFU_9":  9,
	"MINOR_RFU_10": 10,
	"MINOR_RFU_11": 11,
	"MINOR_RFU_12": 12,
	"MINOR_RFU_13": 13,
	"MINOR_RFU_14": 14,
	"MINOR_RFU_15": 15,
}

func (Minor) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{19}
}

type Message struct {
	MHDR `protobuf:"bytes,1,opt,name=m_hdr,json=mHdr,proto3,embedded=m_hdr" json:"m_hdr"`
	MIC  []byte `protobuf:"bytes,2,opt,name=mic,proto3" json:"mic,omitempty"`
	// Payload represents either MACPayload, RejoinRequestPayload, JoinRequestPayload or JoinAcceptPayload
	// - MACPayload length is in range [7:M] bytes, where M is PHY specific.
	// - JoinRequestPayload length is 18 bytes.
	// - JoinAcceptPayload length is either 12 or 28 bytes.
	// - RejoinRequestPayload length is 14 for Type 0 and 2, 19 for Type 1.
	//
	// Types that are valid to be assigned to Payload:
	//	*Message_MACPayload
	//	*Message_JoinRequestPayload
	//	*Message_JoinAcceptPayload
	//	*Message_RejoinRequestPayload
	Payload              isMessage_Payload `protobuf_oneof:"Payload"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Message) Reset()      { *m = Message{} }
func (*Message) ProtoMessage() {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(dst, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

type isMessage_Payload interface {
	isMessage_Payload()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Message_MACPayload struct {
	MACPayload *MACPayload `protobuf:"bytes,3,opt,name=mac_payload,json=macPayload,proto3,oneof"`
}
type Message_JoinRequestPayload struct {
	JoinRequestPayload *JoinRequestPayload `protobuf:"bytes,4,opt,name=join_request_payload,json=joinRequestPayload,proto3,oneof"`
}
type Message_JoinAcceptPayload struct {
	JoinAcceptPayload *JoinAcceptPayload `protobuf:"bytes,5,opt,name=join_accept_payload,json=joinAcceptPayload,proto3,oneof"`
}
type Message_RejoinRequestPayload struct {
	RejoinRequestPayload *RejoinRequestPayload `protobuf:"bytes,6,opt,name=rejoin_request_payload,json=rejoinRequestPayload,proto3,oneof"`
}

func (*Message_MACPayload) isMessage_Payload()           {}
func (*Message_JoinRequestPayload) isMessage_Payload()   {}
func (*Message_JoinAcceptPayload) isMessage_Payload()    {}
func (*Message_RejoinRequestPayload) isMessage_Payload() {}

func (m *Message) GetPayload() isMessage_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Message) GetMIC() []byte {
	if m != nil {
		return m.MIC
	}
	return nil
}

func (m *Message) GetMACPayload() *MACPayload {
	if x, ok := m.GetPayload().(*Message_MACPayload); ok {
		return x.MACPayload
	}
	return nil
}

func (m *Message) GetJoinRequestPayload() *JoinRequestPayload {
	if x, ok := m.GetPayload().(*Message_JoinRequestPayload); ok {
		return x.JoinRequestPayload
	}
	return nil
}

func (m *Message) GetJoinAcceptPayload() *JoinAcceptPayload {
	if x, ok := m.GetPayload().(*Message_JoinAcceptPayload); ok {
		return x.JoinAcceptPayload
	}
	return nil
}

func (m *Message) GetRejoinRequestPayload() *RejoinRequestPayload {
	if x, ok := m.GetPayload().(*Message_RejoinRequestPayload); ok {
		return x.RejoinRequestPayload
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Message) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Message_OneofMarshaler, _Message_OneofUnmarshaler, _Message_OneofSizer, []interface{}{
		(*Message_MACPayload)(nil),
		(*Message_JoinRequestPayload)(nil),
		(*Message_JoinAcceptPayload)(nil),
		(*Message_RejoinRequestPayload)(nil),
	}
}

func _Message_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Message)
	// Payload
	switch x := m.Payload.(type) {
	case *Message_MACPayload:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MACPayload); err != nil {
			return err
		}
	case *Message_JoinRequestPayload:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.JoinRequestPayload); err != nil {
			return err
		}
	case *Message_JoinAcceptPayload:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.JoinAcceptPayload); err != nil {
			return err
		}
	case *Message_RejoinRequestPayload:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RejoinRequestPayload); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Message.Payload has unexpected type %T", x)
	}
	return nil
}

func _Message_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Message)
	switch tag {
	case 3: // Payload.mac_payload
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACPayload)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_MACPayload{msg}
		return true, err
	case 4: // Payload.join_request_payload
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JoinRequestPayload)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_JoinRequestPayload{msg}
		return true, err
	case 5: // Payload.join_accept_payload
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JoinAcceptPayload)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_JoinAcceptPayload{msg}
		return true, err
	case 6: // Payload.rejoin_request_payload
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RejoinRequestPayload)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_RejoinRequestPayload{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Message_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Message)
	// Payload
	switch x := m.Payload.(type) {
	case *Message_MACPayload:
		s := proto.Size(x.MACPayload)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_JoinRequestPayload:
		s := proto.Size(x.JoinRequestPayload)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_JoinAcceptPayload:
		s := proto.Size(x.JoinAcceptPayload)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_RejoinRequestPayload:
		s := proto.Size(x.RejoinRequestPayload)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type MHDR struct {
	MType                MType    `protobuf:"varint,1,opt,name=m_type,json=mType,proto3,enum=ttn.lorawan.v3.MType" json:"m_type,omitempty"`
	Major                Major    `protobuf:"varint,2,opt,name=major,proto3,enum=ttn.lorawan.v3.Major" json:"major,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MHDR) Reset()      { *m = MHDR{} }
func (*MHDR) ProtoMessage() {}
func (*MHDR) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{1}
}
func (m *MHDR) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MHDR) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MHDR.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MHDR) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MHDR.Merge(dst, src)
}
func (m *MHDR) XXX_Size() int {
	return m.Size()
}
func (m *MHDR) XXX_DiscardUnknown() {
	xxx_messageInfo_MHDR.DiscardUnknown(m)
}

var xxx_messageInfo_MHDR proto.InternalMessageInfo

func (m *MHDR) GetMType() MType {
	if m != nil {
		return m.MType
	}
	return MType_JOIN_REQUEST
}

func (m *MHDR) GetMajor() Major {
	if m != nil {
		return m.Major
	}
	return Major_LORAWAN_R1
}

type MACPayload struct {
	FHDR                 `protobuf:"bytes,1,opt,name=f_hdr,json=fHdr,proto3,embedded=f_hdr" json:"f_hdr"`
	FPort                uint32        `protobuf:"varint,2,opt,name=f_port,json=fPort,proto3" json:"f_port,omitempty"`
	FRMPayload           []byte        `protobuf:"bytes,3,opt,name=frm_payload,json=frmPayload,proto3" json:"frm_payload,omitempty"`
	DecodedPayload       *types.Struct `protobuf:"bytes,4,opt,name=decoded_payload,json=decodedPayload,proto3" json:"decoded_payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *MACPayload) Reset()      { *m = MACPayload{} }
func (*MACPayload) ProtoMessage() {}
func (*MACPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{2}
}
func (m *MACPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACPayload.Merge(dst, src)
}
func (m *MACPayload) XXX_Size() int {
	return m.Size()
}
func (m *MACPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_MACPayload.DiscardUnknown(m)
}

var xxx_messageInfo_MACPayload proto.InternalMessageInfo

func (m *MACPayload) GetFPort() uint32 {
	if m != nil {
		return m.FPort
	}
	return 0
}

func (m *MACPayload) GetFRMPayload() []byte {
	if m != nil {
		return m.FRMPayload
	}
	return nil
}

func (m *MACPayload) GetDecodedPayload() *types.Struct {
	if m != nil {
		return m.DecodedPayload
	}
	return nil
}

type FHDR struct {
	DevAddr              go_thethings_network_lorawan_stack_pkg_types.DevAddr `protobuf:"bytes,1,opt,name=dev_addr,json=devAddr,proto3,customtype=go.thethings.network/lorawan-stack/pkg/types.DevAddr" json:"dev_addr"`
	FCtrl                `protobuf:"bytes,2,opt,name=f_ctrl,json=fCtrl,proto3,embedded=f_ctrl" json:"f_ctrl"`
	FCnt                 uint32   `protobuf:"varint,3,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	FOpts                []byte   `protobuf:"bytes,4,opt,name=f_opts,json=fOpts,proto3" json:"f_opts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FHDR) Reset()      { *m = FHDR{} }
func (*FHDR) ProtoMessage() {}
func (*FHDR) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{3}
}
func (m *FHDR) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FHDR) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FHDR.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FHDR) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FHDR.Merge(dst, src)
}
func (m *FHDR) XXX_Size() int {
	return m.Size()
}
func (m *FHDR) XXX_DiscardUnknown() {
	xxx_messageInfo_FHDR.DiscardUnknown(m)
}

var xxx_messageInfo_FHDR proto.InternalMessageInfo

func (m *FHDR) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

func (m *FHDR) GetFOpts() []byte {
	if m != nil {
		return m.FOpts
	}
	return nil
}

type FCtrl struct {
	ADR                  bool     `protobuf:"varint,1,opt,name=adr,proto3" json:"adr,omitempty"`
	ADRAckReq            bool     `protobuf:"varint,2,opt,name=adr_ack_req,json=adrAckReq,proto3" json:"adr_ack_req,omitempty"`
	Ack                  bool     `protobuf:"varint,3,opt,name=ack,proto3" json:"ack,omitempty"`
	FPending             bool     `protobuf:"varint,4,opt,name=f_pending,json=fPending,proto3" json:"f_pending,omitempty"`
	ClassB               bool     `protobuf:"varint,5,opt,name=class_b,json=classB,proto3" json:"class_b,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FCtrl) Reset()      { *m = FCtrl{} }
func (*FCtrl) ProtoMessage() {}
func (*FCtrl) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{4}
}
func (m *FCtrl) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FCtrl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FCtrl.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FCtrl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FCtrl.Merge(dst, src)
}
func (m *FCtrl) XXX_Size() int {
	return m.Size()
}
func (m *FCtrl) XXX_DiscardUnknown() {
	xxx_messageInfo_FCtrl.DiscardUnknown(m)
}

var xxx_messageInfo_FCtrl proto.InternalMessageInfo

func (m *FCtrl) GetADR() bool {
	if m != nil {
		return m.ADR
	}
	return false
}

func (m *FCtrl) GetADRAckReq() bool {
	if m != nil {
		return m.ADRAckReq
	}
	return false
}

func (m *FCtrl) GetAck() bool {
	if m != nil {
		return m.Ack
	}
	return false
}

func (m *FCtrl) GetFPending() bool {
	if m != nil {
		return m.FPending
	}
	return false
}

func (m *FCtrl) GetClassB() bool {
	if m != nil {
		return m.ClassB
	}
	return false
}

type JoinRequestPayload struct {
	JoinEUI              go_thethings_network_lorawan_stack_pkg_types.EUI64    `protobuf:"bytes,1,opt,name=join_eui,json=joinEui,proto3,customtype=go.thethings.network/lorawan-stack/pkg/types.EUI64" json:"join_eui"`
	DevEUI               go_thethings_network_lorawan_stack_pkg_types.EUI64    `protobuf:"bytes,2,opt,name=dev_eui,json=devEui,proto3,customtype=go.thethings.network/lorawan-stack/pkg/types.EUI64" json:"dev_eui"`
	DevNonce             go_thethings_network_lorawan_stack_pkg_types.DevNonce `protobuf:"bytes,3,opt,name=dev_nonce,json=devNonce,proto3,customtype=go.thethings.network/lorawan-stack/pkg/types.DevNonce" json:"dev_nonce"`
	XXX_NoUnkeyedLiteral struct{}                                              `json:"-"`
	XXX_sizecache        int32                                                 `json:"-"`
}

func (m *JoinRequestPayload) Reset()      { *m = JoinRequestPayload{} }
func (*JoinRequestPayload) ProtoMessage() {}
func (*JoinRequestPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{5}
}
func (m *JoinRequestPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JoinRequestPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JoinRequestPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *JoinRequestPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinRequestPayload.Merge(dst, src)
}
func (m *JoinRequestPayload) XXX_Size() int {
	return m.Size()
}
func (m *JoinRequestPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinRequestPayload.DiscardUnknown(m)
}

var xxx_messageInfo_JoinRequestPayload proto.InternalMessageInfo

type RejoinRequestPayload struct {
	RejoinType           RejoinType                                         `protobuf:"varint,1,opt,name=rejoin_type,json=rejoinType,proto3,enum=ttn.lorawan.v3.RejoinType" json:"rejoin_type,omitempty"`
	NetID                go_thethings_network_lorawan_stack_pkg_types.NetID `protobuf:"bytes,2,opt,name=net_id,json=netId,proto3,customtype=go.thethings.network/lorawan-stack/pkg/types.NetID" json:"net_id"`
	JoinEUI              go_thethings_network_lorawan_stack_pkg_types.EUI64 `protobuf:"bytes,3,opt,name=join_eui,json=joinEui,proto3,customtype=go.thethings.network/lorawan-stack/pkg/types.EUI64" json:"join_eui"`
	DevEUI               go_thethings_network_lorawan_stack_pkg_types.EUI64 `protobuf:"bytes,4,opt,name=dev_eui,json=devEui,proto3,customtype=go.thethings.network/lorawan-stack/pkg/types.EUI64" json:"dev_eui"`
	RejoinCnt            uint32                                             `protobuf:"varint,5,opt,name=rejoin_cnt,json=rejoinCnt,proto3" json:"rejoin_cnt,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                           `json:"-"`
	XXX_sizecache        int32                                              `json:"-"`
}

func (m *RejoinRequestPayload) Reset()      { *m = RejoinRequestPayload{} }
func (*RejoinRequestPayload) ProtoMessage() {}
func (*RejoinRequestPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{6}
}
func (m *RejoinRequestPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RejoinRequestPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RejoinRequestPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RejoinRequestPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RejoinRequestPayload.Merge(dst, src)
}
func (m *RejoinRequestPayload) XXX_Size() int {
	return m.Size()
}
func (m *RejoinRequestPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_RejoinRequestPayload.DiscardUnknown(m)
}

var xxx_messageInfo_RejoinRequestPayload proto.InternalMessageInfo

func (m *RejoinRequestPayload) GetRejoinType() RejoinType {
	if m != nil {
		return m.RejoinType
	}
	return RejoinType_CONTEXT
}

func (m *RejoinRequestPayload) GetRejoinCnt() uint32 {
	if m != nil {
		return m.RejoinCnt
	}
	return 0
}

type JoinAcceptPayload struct {
	Encrypted            []byte                                                 `protobuf:"bytes,1,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
	JoinNonce            go_thethings_network_lorawan_stack_pkg_types.JoinNonce `protobuf:"bytes,2,opt,name=join_nonce,json=joinNonce,proto3,customtype=go.thethings.network/lorawan-stack/pkg/types.JoinNonce" json:"join_nonce"`
	NetID                go_thethings_network_lorawan_stack_pkg_types.NetID     `protobuf:"bytes,3,opt,name=net_id,json=netId,proto3,customtype=go.thethings.network/lorawan-stack/pkg/types.NetID" json:"net_id"`
	DevAddr              go_thethings_network_lorawan_stack_pkg_types.DevAddr   `protobuf:"bytes,4,opt,name=dev_addr,json=devAddr,proto3,customtype=go.thethings.network/lorawan-stack/pkg/types.DevAddr" json:"dev_addr"`
	DLSettings           `protobuf:"bytes,5,opt,name=dl_settings,json=dlSettings,proto3,embedded=dl_settings" json:"dl_settings"`
	RxDelay              RxDelay  `protobuf:"varint,6,opt,name=rx_delay,json=rxDelay,proto3,enum=ttn.lorawan.v3.RxDelay" json:"rx_delay,omitempty"`
	CFList               *CFList  `protobuf:"bytes,7,opt,name=cf_list,json=cfList,proto3" json:"cf_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JoinAcceptPayload) Reset()      { *m = JoinAcceptPayload{} }
func (*JoinAcceptPayload) ProtoMessage() {}
func (*JoinAcceptPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{7}
}
func (m *JoinAcceptPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JoinAcceptPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JoinAcceptPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *JoinAcceptPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinAcceptPayload.Merge(dst, src)
}
func (m *JoinAcceptPayload) XXX_Size() int {
	return m.Size()
}
func (m *JoinAcceptPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinAcceptPayload.DiscardUnknown(m)
}

var xxx_messageInfo_JoinAcceptPayload proto.InternalMessageInfo

func (m *JoinAcceptPayload) GetEncrypted() []byte {
	if m != nil {
		return m.Encrypted
	}
	return nil
}

func (m *JoinAcceptPayload) GetRxDelay() RxDelay {
	if m != nil {
		return m.RxDelay
	}
	return RX_DELAY_0
}

func (m *JoinAcceptPayload) GetCFList() *CFList {
	if m != nil {
		return m.CFList
	}
	return nil
}

type DLSettings struct {
	Rx1DROffset uint32        `protobuf:"varint,1,opt,name=rx1_dr_offset,json=rx1DrOffset,proto3" json:"rx1_dr_offset,omitempty"`
	Rx2DR       DataRateIndex `protobuf:"varint,2,opt,name=rx2_dr,json=rx2Dr,proto3,enum=ttn.lorawan.v3.DataRateIndex" json:"rx2_dr,omitempty"`
	// OptNeg is set if Network Server implements LoRaWAN 1.1 or greater.
	OptNeg               bool     `protobuf:"varint,3,opt,name=opt_neg,json=optNeg,proto3" json:"opt_neg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DLSettings) Reset()      { *m = DLSettings{} }
func (*DLSettings) ProtoMessage() {}
func (*DLSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{8}
}
func (m *DLSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DLSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DLSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DLSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DLSettings.Merge(dst, src)
}
func (m *DLSettings) XXX_Size() int {
	return m.Size()
}
func (m *DLSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_DLSettings.DiscardUnknown(m)
}

var xxx_messageInfo_DLSettings proto.InternalMessageInfo

func (m *DLSettings) GetRx1DROffset() uint32 {
	if m != nil {
		return m.Rx1DROffset
	}
	return 0
}

func (m *DLSettings) GetRx2DR() DataRateIndex {
	if m != nil {
		return m.Rx2DR
	}
	return DATA_RATE_0
}

func (m *DLSettings) GetOptNeg() bool {
	if m != nil {
		return m.OptNeg
	}
	return false
}

type CFList struct {
	Type CFListType `protobuf:"varint,1,opt,name=type,proto3,enum=ttn.lorawan.v3.CFListType" json:"type,omitempty"`
	// Frequencies to be broadcasted, in hecto-Hz.
	// These values are broadcasted as 24 bits unsigned integers.
	// This field should not contain default values.
	Freq []uint32 `protobuf:"varint,2,rep,packed,name=freq,proto3" json:"freq,omitempty"`
	// ChMasks controlling the channels to be used.
	// Length of this field must be equal to the amount of uplink channels
	// defined by the selected frequency plan.
	ChMasks              []bool   `protobuf:"varint,3,rep,packed,name=ch_masks,json=chMasks,proto3" json:"ch_masks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CFList) Reset()      { *m = CFList{} }
func (*CFList) ProtoMessage() {}
func (*CFList) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{9}
}
func (m *CFList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CFList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CFList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CFList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CFList.Merge(dst, src)
}
func (m *CFList) XXX_Size() int {
	return m.Size()
}
func (m *CFList) XXX_DiscardUnknown() {
	xxx_messageInfo_CFList.DiscardUnknown(m)
}

var xxx_messageInfo_CFList proto.InternalMessageInfo

func (m *CFList) GetType() CFListType {
	if m != nil {
		return m.Type
	}
	return CFListType_FREQUENCIES
}

func (m *CFList) GetFreq() []uint32 {
	if m != nil {
		return m.Freq
	}
	return nil
}

func (m *CFList) GetChMasks() []bool {
	if m != nil {
		return m.ChMasks
	}
	return nil
}

type LoRaDataRate struct {
	// Bandwidth (Hz).
	Bandwidth            uint32   `protobuf:"varint,1,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	SpreadingFactor      uint32   `protobuf:"varint,2,opt,name=spreading_factor,json=spreadingFactor,proto3" json:"spreading_factor,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoRaDataRate) Reset()      { *m = LoRaDataRate{} }
func (*LoRaDataRate) ProtoMessage() {}
func (*LoRaDataRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{10}
}
func (m *LoRaDataRate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoRaDataRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoRaDataRate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LoRaDataRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoRaDataRate.Merge(dst, src)
}
func (m *LoRaDataRate) XXX_Size() int {
	return m.Size()
}
func (m *LoRaDataRate) XXX_DiscardUnknown() {
	xxx_messageInfo_LoRaDataRate.DiscardUnknown(m)
}

var xxx_messageInfo_LoRaDataRate proto.InternalMessageInfo

func (m *LoRaDataRate) GetBandwidth() uint32 {
	if m != nil {
		return m.Bandwidth
	}
	return 0
}

func (m *LoRaDataRate) GetSpreadingFactor() uint32 {
	if m != nil {
		return m.SpreadingFactor
	}
	return 0
}

type FSKDataRate struct {
	// Bit rate (bps).
	BitRate              uint32   `protobuf:"varint,1,opt,name=bit_rate,json=bitRate,proto3" json:"bit_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FSKDataRate) Reset()      { *m = FSKDataRate{} }
func (*FSKDataRate) ProtoMessage() {}
func (*FSKDataRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{11}
}
func (m *FSKDataRate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FSKDataRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FSKDataRate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FSKDataRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FSKDataRate.Merge(dst, src)
}
func (m *FSKDataRate) XXX_Size() int {
	return m.Size()
}
func (m *FSKDataRate) XXX_DiscardUnknown() {
	xxx_messageInfo_FSKDataRate.DiscardUnknown(m)
}

var xxx_messageInfo_FSKDataRate proto.InternalMessageInfo

func (m *FSKDataRate) GetBitRate() uint32 {
	if m != nil {
		return m.BitRate
	}
	return 0
}

type DataRate struct {
	// Types that are valid to be assigned to Modulation:
	//	*DataRate_LoRa
	//	*DataRate_FSK
	Modulation           isDataRate_Modulation `protobuf_oneof:"modulation"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *DataRate) Reset()      { *m = DataRate{} }
func (*DataRate) ProtoMessage() {}
func (*DataRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{12}
}
func (m *DataRate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataRate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DataRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataRate.Merge(dst, src)
}
func (m *DataRate) XXX_Size() int {
	return m.Size()
}
func (m *DataRate) XXX_DiscardUnknown() {
	xxx_messageInfo_DataRate.DiscardUnknown(m)
}

var xxx_messageInfo_DataRate proto.InternalMessageInfo

type isDataRate_Modulation interface {
	isDataRate_Modulation()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DataRate_LoRa struct {
	LoRa *LoRaDataRate `protobuf:"bytes,1,opt,name=lora,proto3,oneof"`
}
type DataRate_FSK struct {
	FSK *FSKDataRate `protobuf:"bytes,2,opt,name=fsk,proto3,oneof"`
}

func (*DataRate_LoRa) isDataRate_Modulation() {}
func (*DataRate_FSK) isDataRate_Modulation()  {}

func (m *DataRate) GetModulation() isDataRate_Modulation {
	if m != nil {
		return m.Modulation
	}
	return nil
}

func (m *DataRate) GetLoRa() *LoRaDataRate {
	if x, ok := m.GetModulation().(*DataRate_LoRa); ok {
		return x.LoRa
	}
	return nil
}

func (m *DataRate) GetFSK() *FSKDataRate {
	if x, ok := m.GetModulation().(*DataRate_FSK); ok {
		return x.FSK
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DataRate) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DataRate_OneofMarshaler, _DataRate_OneofUnmarshaler, _DataRate_OneofSizer, []interface{}{
		(*DataRate_LoRa)(nil),
		(*DataRate_FSK)(nil),
	}
}

func _DataRate_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DataRate)
	// modulation
	switch x := m.Modulation.(type) {
	case *DataRate_LoRa:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LoRa); err != nil {
			return err
		}
	case *DataRate_FSK:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FSK); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DataRate.Modulation has unexpected type %T", x)
	}
	return nil
}

func _DataRate_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DataRate)
	switch tag {
	case 1: // modulation.lora
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LoRaDataRate)
		err := b.DecodeMessage(msg)
		m.Modulation = &DataRate_LoRa{msg}
		return true, err
	case 2: // modulation.fsk
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FSKDataRate)
		err := b.DecodeMessage(msg)
		m.Modulation = &DataRate_FSK{msg}
		return true, err
	default:
		return false, nil
	}
}

func _DataRate_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DataRate)
	// modulation
	switch x := m.Modulation.(type) {
	case *DataRate_LoRa:
		s := proto.Size(x.LoRa)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DataRate_FSK:
		s := proto.Size(x.FSK)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// TxSettings contains the settings for a transmission.
// This message is used on both uplink and downlink.
// On downlink, this is a scheduled transmission.
type TxSettings struct {
	// Data rate.
	DataRate DataRate `protobuf:"bytes,1,opt,name=data_rate,json=dataRate,proto3" json:"data_rate"`
	// LoRaWAN data rate index.
	DataRateIndex DataRateIndex `protobuf:"varint,2,opt,name=data_rate_index,json=dataRateIndex,proto3,enum=ttn.lorawan.v3.DataRateIndex" json:"data_rate_index,omitempty"`
	// LoRa coding rate.
	CodingRate string `protobuf:"bytes,3,opt,name=coding_rate,json=codingRate,proto3" json:"coding_rate,omitempty"`
	// Frequency (Hz).
	Frequency uint64 `protobuf:"varint,4,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// Transmission power (dBm). Only on downlink.
	TxPower int32 `protobuf:"varint,5,opt,name=tx_power,json=txPower,proto3" json:"tx_power,omitempty"`
	// Invert LoRa polarization; false for LoRaWAN uplink, true for downlink.
	InvertPolarization bool `protobuf:"varint,6,opt,name=invert_polarization,json=invertPolarization,proto3" json:"invert_polarization,omitempty"`
	// Index of the gateway channel that received the message.
	// Set by Gateway Server.
	GatewayChannelIndex uint32 `protobuf:"varint,7,opt,name=gateway_channel_index,json=gatewayChannelIndex,proto3" json:"gateway_channel_index,omitempty"`
	// Index of the device channel that received the message.
	// Set by Network Server.
	DeviceChannelIndex uint32 `protobuf:"varint,8,opt,name=device_channel_index,json=deviceChannelIndex,proto3" json:"device_channel_index,omitempty"`
	// Send a CRC in the packet; only on uplink; on downlink, CRC should not be enabled.
	EnableCRC bool `protobuf:"varint,9,opt,name=enable_crc,json=enableCrc,proto3" json:"enable_crc,omitempty"`
	// Timestamp of the gateway concentrator when the uplink message was received, or when the downlink message should be transmitted (microseconds).
	// On downlink, set timestamp to 0 and time to null to use immediate scheduling.
	Timestamp uint32 `protobuf:"varint,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Time of the gateway when the uplink message was received, or when the downlink message should be transmitted.
	// For downlink, this requires the gateway to have GPS time synchronization.
	Time                 *time.Time `protobuf:"bytes,11,opt,name=time,proto3,stdtime" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *TxSettings) Reset()      { *m = TxSettings{} }
func (*TxSettings) ProtoMessage() {}
func (*TxSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{13}
}
func (m *TxSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TxSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxSettings.Merge(dst, src)
}
func (m *TxSettings) XXX_Size() int {
	return m.Size()
}
func (m *TxSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_TxSettings.DiscardUnknown(m)
}

var xxx_messageInfo_TxSettings proto.InternalMessageInfo

func (m *TxSettings) GetDataRate() DataRate {
	if m != nil {
		return m.DataRate
	}
	return DataRate{}
}

func (m *TxSettings) GetDataRateIndex() DataRateIndex {
	if m != nil {
		return m.DataRateIndex
	}
	return DATA_RATE_0
}

func (m *TxSettings) GetCodingRate() string {
	if m != nil {
		return m.CodingRate
	}
	return ""
}

func (m *TxSettings) GetFrequency() uint64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *TxSettings) GetTxPower() int32 {
	if m != nil {
		return m.TxPower
	}
	return 0
}

func (m *TxSettings) GetInvertPolarization() bool {
	if m != nil {
		return m.InvertPolarization
	}
	return false
}

func (m *TxSettings) GetGatewayChannelIndex() uint32 {
	if m != nil {
		return m.GatewayChannelIndex
	}
	return 0
}

func (m *TxSettings) GetDeviceChannelIndex() uint32 {
	if m != nil {
		return m.DeviceChannelIndex
	}
	return 0
}

func (m *TxSettings) GetEnableCRC() bool {
	if m != nil {
		return m.EnableCRC
	}
	return false
}

func (m *TxSettings) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *TxSettings) GetTime() *time.Time {
	if m != nil {
		return m.Time
	}
	return nil
}

type GatewayAntennaIdentifiers struct {
	GatewayIdentifiers   `protobuf:"bytes,1,opt,name=gateway_ids,json=gatewayIds,proto3,embedded=gateway_ids" json:"gateway_ids"`
	AntennaIndex         uint32   `protobuf:"varint,2,opt,name=antenna_index,json=antennaIndex,proto3" json:"antenna_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GatewayAntennaIdentifiers) Reset()      { *m = GatewayAntennaIdentifiers{} }
func (*GatewayAntennaIdentifiers) ProtoMessage() {}
func (*GatewayAntennaIdentifiers) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{14}
}
func (m *GatewayAntennaIdentifiers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayAntennaIdentifiers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayAntennaIdentifiers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GatewayAntennaIdentifiers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayAntennaIdentifiers.Merge(dst, src)
}
func (m *GatewayAntennaIdentifiers) XXX_Size() int {
	return m.Size()
}
func (m *GatewayAntennaIdentifiers) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayAntennaIdentifiers.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayAntennaIdentifiers proto.InternalMessageInfo

func (m *GatewayAntennaIdentifiers) GetAntennaIndex() uint32 {
	if m != nil {
		return m.AntennaIndex
	}
	return 0
}

type UplinkToken struct {
	GatewayAntennaIdentifiers `protobuf:"bytes,1,opt,name=ids,proto3,embedded=ids" json:"ids"`
	Timestamp                 uint32   `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *UplinkToken) Reset()      { *m = UplinkToken{} }
func (*UplinkToken) ProtoMessage() {}
func (*UplinkToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{15}
}
func (m *UplinkToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UplinkToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UplinkToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UplinkToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UplinkToken.Merge(dst, src)
}
func (m *UplinkToken) XXX_Size() int {
	return m.Size()
}
func (m *UplinkToken) XXX_DiscardUnknown() {
	xxx_messageInfo_UplinkToken.DiscardUnknown(m)
}

var xxx_messageInfo_UplinkToken proto.InternalMessageInfo

func (m *UplinkToken) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type DownlinkPath struct {
	// Set uplink token for class A, B or C downlink to the uplink token received from the corresponding RxMetadata. Uplink tokens are opaque to the Network Server.
	// Set fixed to force using the specified gateway antenna identifiers for downlink. This can only be used for class B or C downlinks.
	//
	// Types that are valid to be assigned to Path:
	//	*DownlinkPath_UplinkToken
	//	*DownlinkPath_Fixed
	Path                 isDownlinkPath_Path `protobuf_oneof:"path"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *DownlinkPath) Reset()      { *m = DownlinkPath{} }
func (*DownlinkPath) ProtoMessage() {}
func (*DownlinkPath) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{16}
}
func (m *DownlinkPath) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownlinkPath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownlinkPath.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DownlinkPath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownlinkPath.Merge(dst, src)
}
func (m *DownlinkPath) XXX_Size() int {
	return m.Size()
}
func (m *DownlinkPath) XXX_DiscardUnknown() {
	xxx_messageInfo_DownlinkPath.DiscardUnknown(m)
}

var xxx_messageInfo_DownlinkPath proto.InternalMessageInfo

type isDownlinkPath_Path interface {
	isDownlinkPath_Path()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DownlinkPath_UplinkToken struct {
	UplinkToken []byte `protobuf:"bytes,1,opt,name=uplink_token,json=uplinkToken,proto3,oneof"`
}
type DownlinkPath_Fixed struct {
	Fixed *GatewayAntennaIdentifiers `protobuf:"bytes,2,opt,name=fixed,proto3,oneof"`
}

func (*DownlinkPath_UplinkToken) isDownlinkPath_Path() {}
func (*DownlinkPath_Fixed) isDownlinkPath_Path()       {}

func (m *DownlinkPath) GetPath() isDownlinkPath_Path {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *DownlinkPath) GetUplinkToken() []byte {
	if x, ok := m.GetPath().(*DownlinkPath_UplinkToken); ok {
		return x.UplinkToken
	}
	return nil
}

func (m *DownlinkPath) GetFixed() *GatewayAntennaIdentifiers {
	if x, ok := m.GetPath().(*DownlinkPath_Fixed); ok {
		return x.Fixed
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DownlinkPath) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DownlinkPath_OneofMarshaler, _DownlinkPath_OneofUnmarshaler, _DownlinkPath_OneofSizer, []interface{}{
		(*DownlinkPath_UplinkToken)(nil),
		(*DownlinkPath_Fixed)(nil),
	}
}

func _DownlinkPath_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DownlinkPath)
	// path
	switch x := m.Path.(type) {
	case *DownlinkPath_UplinkToken:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.UplinkToken)
	case *DownlinkPath_Fixed:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Fixed); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DownlinkPath.Path has unexpected type %T", x)
	}
	return nil
}

func _DownlinkPath_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DownlinkPath)
	switch tag {
	case 1: // path.uplink_token
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Path = &DownlinkPath_UplinkToken{x}
		return true, err
	case 2: // path.fixed
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GatewayAntennaIdentifiers)
		err := b.DecodeMessage(msg)
		m.Path = &DownlinkPath_Fixed{msg}
		return true, err
	default:
		return false, nil
	}
}

func _DownlinkPath_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DownlinkPath)
	// path
	switch x := m.Path.(type) {
	case *DownlinkPath_UplinkToken:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.UplinkToken)))
		n += len(x.UplinkToken)
	case *DownlinkPath_Fixed:
		s := proto.Size(x.Fixed)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// TxRequest is a request for transmission.
// If sent to a roaming partner, this request is used to generate the DLMetadata Object (see Backend Interfaces 1.0, Table 22).
// If the gateway has a scheduler, this request is sent to the gateway, in the order of gateway_ids.
// Otherwise, the Gateway Server attempts to schedule the request and creates the TxSettings.
type TxRequest struct {
	Class Class `protobuf:"varint,1,opt,name=class,proto3,enum=ttn.lorawan.v3.Class" json:"class,omitempty"`
	// Downlink paths used to select a gateway for downlink.
	// In class A, the downlink paths are required to only contain uplink tokens.
	// In class B and C, the downlink paths may contain uplink tokens and fixed gateways antenna identifiers.
	DownlinkPaths []*DownlinkPath `protobuf:"bytes,2,rep,name=downlink_paths,json=downlinkPaths,proto3" json:"downlink_paths,omitempty"`
	// Rx1 delay (Rx2 delay is Rx1 delay + 1 second).
	Rx1Delay RxDelay `protobuf:"varint,3,opt,name=rx1_delay,json=rx1Delay,proto3,enum=ttn.lorawan.v3.RxDelay" json:"rx1_delay,omitempty"`
	// LoRaWAN data rate index for Rx1.
	Rx1DataRateIndex DataRateIndex `protobuf:"varint,4,opt,name=rx1_data_rate_index,json=rx1DataRateIndex,proto3,enum=ttn.lorawan.v3.DataRateIndex" json:"rx1_data_rate_index,omitempty"`
	// Frequency (Hz) for Rx1.
	Rx1Frequency uint64 `protobuf:"varint,5,opt,name=rx1_frequency,json=rx1Frequency,proto3" json:"rx1_frequency,omitempty"`
	// LoRaWAN data rate index for Rx2.
	Rx2DataRateIndex DataRateIndex `protobuf:"varint,6,opt,name=rx2_data_rate_index,json=rx2DataRateIndex,proto3,enum=ttn.lorawan.v3.DataRateIndex" json:"rx2_data_rate_index,omitempty"`
	// Frequency (Hz) for Rx2.
	Rx2Frequency uint64 `protobuf:"varint,7,opt,name=rx2_frequency,json=rx2Frequency,proto3" json:"rx2_frequency,omitempty"`
	// Priority for scheduling.
	// Requests with a higher priority are allocated more channel time than messages with a lower priority, in duty-cycle limited regions.
	// A priority of HIGH or higher sets the HiPriorityFlag in the DLMetadata Object.
	Priority TxSchedulePriority `protobuf:"varint,8,opt,name=priority,proto3,enum=ttn.lorawan.v3.TxSchedulePriority" json:"priority,omitempty"`
	// Time when the downlink message should be transmitted.
	// This value is only valid for class C downlink; class A downlink uses uplink tokens and class B downlink is scheduled on ping slots.
	// This requires the gateway to have GPS time sychronization.
	// If the absolute time is not set, the first available time will be used that does not conflict or violate regional limitations.
	AbsoluteTime *time.Time `protobuf:"bytes,9,opt,name=absolute_time,json=absoluteTime,proto3,stdtime" json:"absolute_time,omitempty"`
	// Advanced metadata fields
	// - can be used for advanced information or experimental features that are not yet formally defined in the API
	// - field names are written in snake_case
	Advanced             *types.Struct `protobuf:"bytes,99,opt,name=advanced,proto3" json:"advanced,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TxRequest) Reset()      { *m = TxRequest{} }
func (*TxRequest) ProtoMessage() {}
func (*TxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{17}
}
func (m *TxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxRequest.Merge(dst, src)
}
func (m *TxRequest) XXX_Size() int {
	return m.Size()
}
func (m *TxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TxRequest proto.InternalMessageInfo

func (m *TxRequest) GetClass() Class {
	if m != nil {
		return m.Class
	}
	return CLASS_A
}

func (m *TxRequest) GetDownlinkPaths() []*DownlinkPath {
	if m != nil {
		return m.DownlinkPaths
	}
	return nil
}

func (m *TxRequest) GetRx1Delay() RxDelay {
	if m != nil {
		return m.Rx1Delay
	}
	return RX_DELAY_0
}

func (m *TxRequest) GetRx1DataRateIndex() DataRateIndex {
	if m != nil {
		return m.Rx1DataRateIndex
	}
	return DATA_RATE_0
}

func (m *TxRequest) GetRx1Frequency() uint64 {
	if m != nil {
		return m.Rx1Frequency
	}
	return 0
}

func (m *TxRequest) GetRx2DataRateIndex() DataRateIndex {
	if m != nil {
		return m.Rx2DataRateIndex
	}
	return DATA_RATE_0
}

func (m *TxRequest) GetRx2Frequency() uint64 {
	if m != nil {
		return m.Rx2Frequency
	}
	return 0
}

func (m *TxRequest) GetPriority() TxSchedulePriority {
	if m != nil {
		return m.Priority
	}
	return TxSchedulePriority_LOWEST
}

func (m *TxRequest) GetAbsoluteTime() *time.Time {
	if m != nil {
		return m.AbsoluteTime
	}
	return nil
}

func (m *TxRequest) GetAdvanced() *types.Struct {
	if m != nil {
		return m.Advanced
	}
	return nil
}

type MACCommand struct {
	CID MACCommandIdentifier `protobuf:"varint,1,opt,name=cid,proto3,enum=ttn.lorawan.v3.MACCommandIdentifier" json:"cid,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*MACCommand_RawPayload
	//	*MACCommand_ResetInd_
	//	*MACCommand_ResetConf_
	//	*MACCommand_LinkCheckAns_
	//	*MACCommand_LinkADRReq_
	//	*MACCommand_LinkADRAns_
	//	*MACCommand_DutyCycleReq_
	//	*MACCommand_RxParamSetupReq_
	//	*MACCommand_RxParamSetupAns_
	//	*MACCommand_DevStatusAns_
	//	*MACCommand_NewChannelReq_
	//	*MACCommand_NewChannelAns_
	//	*MACCommand_DLChannelReq_
	//	*MACCommand_DLChannelAns_
	//	*MACCommand_RxTimingSetupReq_
	//	*MACCommand_TxParamSetupReq_
	//	*MACCommand_RekeyInd_
	//	*MACCommand_RekeyConf_
	//	*MACCommand_ADRParamSetupReq_
	//	*MACCommand_DeviceTimeAns_
	//	*MACCommand_ForceRejoinReq_
	//	*MACCommand_RejoinParamSetupReq_
	//	*MACCommand_RejoinParamSetupAns_
	//	*MACCommand_PingSlotInfoReq_
	//	*MACCommand_PingSlotChannelReq_
	//	*MACCommand_PingSlotChannelAns_
	//	*MACCommand_BeaconTimingAns_
	//	*MACCommand_BeaconFreqReq_
	//	*MACCommand_BeaconFreqAns_
	//	*MACCommand_DeviceModeInd_
	//	*MACCommand_DeviceModeConf_
	Payload              isMACCommand_Payload `protobuf_oneof:"payload"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *MACCommand) Reset()      { *m = MACCommand{} }
func (*MACCommand) ProtoMessage() {}
func (*MACCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{18}
}
func (m *MACCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACCommand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACCommand.Merge(dst, src)
}
func (m *MACCommand) XXX_Size() int {
	return m.Size()
}
func (m *MACCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_MACCommand.DiscardUnknown(m)
}

var xxx_messageInfo_MACCommand proto.InternalMessageInfo

type isMACCommand_Payload interface {
	isMACCommand_Payload()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type MACCommand_RawPayload struct {
	RawPayload []byte `protobuf:"bytes,2,opt,name=raw_payload,json=rawPayload,proto3,oneof"`
}
type MACCommand_ResetInd_ struct {
	ResetInd *MACCommand_ResetInd `protobuf:"bytes,3,opt,name=reset_ind,json=resetInd,proto3,oneof"`
}
type MACCommand_ResetConf_ struct {
	ResetConf *MACCommand_ResetConf `protobuf:"bytes,4,opt,name=reset_conf,json=resetConf,proto3,oneof"`
}
type MACCommand_LinkCheckAns_ struct {
	LinkCheckAns *MACCommand_LinkCheckAns `protobuf:"bytes,5,opt,name=link_check_ans,json=linkCheckAns,proto3,oneof"`
}
type MACCommand_LinkADRReq_ struct {
	LinkADRReq *MACCommand_LinkADRReq `protobuf:"bytes,6,opt,name=link_adr_req,json=linkAdrReq,proto3,oneof"`
}
type MACCommand_LinkADRAns_ struct {
	LinkADRAns *MACCommand_LinkADRAns `protobuf:"bytes,7,opt,name=link_adr_ans,json=linkAdrAns,proto3,oneof"`
}
type MACCommand_DutyCycleReq_ struct {
	DutyCycleReq *MACCommand_DutyCycleReq `protobuf:"bytes,8,opt,name=duty_cycle_req,json=dutyCycleReq,proto3,oneof"`
}
type MACCommand_RxParamSetupReq_ struct {
	RxParamSetupReq *MACCommand_RxParamSetupReq `protobuf:"bytes,9,opt,name=rx_param_setup_req,json=rxParamSetupReq,proto3,oneof"`
}
type MACCommand_RxParamSetupAns_ struct {
	RxParamSetupAns *MACCommand_RxParamSetupAns `protobuf:"bytes,10,opt,name=rx_param_setup_ans,json=rxParamSetupAns,proto3,oneof"`
}
type MACCommand_DevStatusAns_ struct {
	DevStatusAns *MACCommand_DevStatusAns `protobuf:"bytes,11,opt,name=dev_status_ans,json=devStatusAns,proto3,oneof"`
}
type MACCommand_NewChannelReq_ struct {
	NewChannelReq *MACCommand_NewChannelReq `protobuf:"bytes,12,opt,name=new_channel_req,json=newChannelReq,proto3,oneof"`
}
type MACCommand_NewChannelAns_ struct {
	NewChannelAns *MACCommand_NewChannelAns `protobuf:"bytes,13,opt,name=new_channel_ans,json=newChannelAns,proto3,oneof"`
}
type MACCommand_DLChannelReq_ struct {
	DLChannelReq *MACCommand_DLChannelReq `protobuf:"bytes,14,opt,name=dl_channel_req,json=dlChannelReq,proto3,oneof"`
}
type MACCommand_DLChannelAns_ struct {
	DLChannelAns *MACCommand_DLChannelAns `protobuf:"bytes,15,opt,name=dl_channel_ans,json=dlChannelAns,proto3,oneof"`
}
type MACCommand_RxTimingSetupReq_ struct {
	RxTimingSetupReq *MACCommand_RxTimingSetupReq `protobuf:"bytes,16,opt,name=rx_timing_setup_req,json=rxTimingSetupReq,proto3,oneof"`
}
type MACCommand_TxParamSetupReq_ struct {
	TxParamSetupReq *MACCommand_TxParamSetupReq `protobuf:"bytes,17,opt,name=tx_param_setup_req,json=txParamSetupReq,proto3,oneof"`
}
type MACCommand_RekeyInd_ struct {
	RekeyInd *MACCommand_RekeyInd `protobuf:"bytes,18,opt,name=rekey_ind,json=rekeyInd,proto3,oneof"`
}
type MACCommand_RekeyConf_ struct {
	RekeyConf *MACCommand_RekeyConf `protobuf:"bytes,19,opt,name=rekey_conf,json=rekeyConf,proto3,oneof"`
}
type MACCommand_ADRParamSetupReq_ struct {
	ADRParamSetupReq *MACCommand_ADRParamSetupReq `protobuf:"bytes,20,opt,name=adr_param_setup_req,json=adrParamSetupReq,proto3,oneof"`
}
type MACCommand_DeviceTimeAns_ struct {
	DeviceTimeAns *MACCommand_DeviceTimeAns `protobuf:"bytes,21,opt,name=device_time_ans,json=deviceTimeAns,proto3,oneof"`
}
type MACCommand_ForceRejoinReq_ struct {
	ForceRejoinReq *MACCommand_ForceRejoinReq `protobuf:"bytes,22,opt,name=force_rejoin_req,json=forceRejoinReq,proto3,oneof"`
}
type MACCommand_RejoinParamSetupReq_ struct {
	RejoinParamSetupReq *MACCommand_RejoinParamSetupReq `protobuf:"bytes,23,opt,name=rejoin_param_setup_req,json=rejoinParamSetupReq,proto3,oneof"`
}
type MACCommand_RejoinParamSetupAns_ struct {
	RejoinParamSetupAns *MACCommand_RejoinParamSetupAns `protobuf:"bytes,24,opt,name=rejoin_param_setup_ans,json=rejoinParamSetupAns,proto3,oneof"`
}
type MACCommand_PingSlotInfoReq_ struct {
	PingSlotInfoReq *MACCommand_PingSlotInfoReq `protobuf:"bytes,25,opt,name=ping_slot_info_req,json=pingSlotInfoReq,proto3,oneof"`
}
type MACCommand_PingSlotChannelReq_ struct {
	PingSlotChannelReq *MACCommand_PingSlotChannelReq `protobuf:"bytes,26,opt,name=ping_slot_channel_req,json=pingSlotChannelReq,proto3,oneof"`
}
type MACCommand_PingSlotChannelAns_ struct {
	PingSlotChannelAns *MACCommand_PingSlotChannelAns `protobuf:"bytes,27,opt,name=ping_slot_channel_ans,json=pingSlotChannelAns,proto3,oneof"`
}
type MACCommand_BeaconTimingAns_ struct {
	BeaconTimingAns *MACCommand_BeaconTimingAns `protobuf:"bytes,28,opt,name=beacon_timing_ans,json=beaconTimingAns,proto3,oneof"`
}
type MACCommand_BeaconFreqReq_ struct {
	BeaconFreqReq *MACCommand_BeaconFreqReq `protobuf:"bytes,29,opt,name=beacon_freq_req,json=beaconFreqReq,proto3,oneof"`
}
type MACCommand_BeaconFreqAns_ struct {
	BeaconFreqAns *MACCommand_BeaconFreqAns `protobuf:"bytes,30,opt,name=beacon_freq_ans,json=beaconFreqAns,proto3,oneof"`
}
type MACCommand_DeviceModeInd_ struct {
	DeviceModeInd *MACCommand_DeviceModeInd `protobuf:"bytes,31,opt,name=device_mode_ind,json=deviceModeInd,proto3,oneof"`
}
type MACCommand_DeviceModeConf_ struct {
	DeviceModeConf *MACCommand_DeviceModeConf `protobuf:"bytes,32,opt,name=device_mode_conf,json=deviceModeConf,proto3,oneof"`
}

func (*MACCommand_RawPayload) isMACCommand_Payload()           {}
func (*MACCommand_ResetInd_) isMACCommand_Payload()            {}
func (*MACCommand_ResetConf_) isMACCommand_Payload()           {}
func (*MACCommand_LinkCheckAns_) isMACCommand_Payload()        {}
func (*MACCommand_LinkADRReq_) isMACCommand_Payload()          {}
func (*MACCommand_LinkADRAns_) isMACCommand_Payload()          {}
func (*MACCommand_DutyCycleReq_) isMACCommand_Payload()        {}
func (*MACCommand_RxParamSetupReq_) isMACCommand_Payload()     {}
func (*MACCommand_RxParamSetupAns_) isMACCommand_Payload()     {}
func (*MACCommand_DevStatusAns_) isMACCommand_Payload()        {}
func (*MACCommand_NewChannelReq_) isMACCommand_Payload()       {}
func (*MACCommand_NewChannelAns_) isMACCommand_Payload()       {}
func (*MACCommand_DLChannelReq_) isMACCommand_Payload()        {}
func (*MACCommand_DLChannelAns_) isMACCommand_Payload()        {}
func (*MACCommand_RxTimingSetupReq_) isMACCommand_Payload()    {}
func (*MACCommand_TxParamSetupReq_) isMACCommand_Payload()     {}
func (*MACCommand_RekeyInd_) isMACCommand_Payload()            {}
func (*MACCommand_RekeyConf_) isMACCommand_Payload()           {}
func (*MACCommand_ADRParamSetupReq_) isMACCommand_Payload()    {}
func (*MACCommand_DeviceTimeAns_) isMACCommand_Payload()       {}
func (*MACCommand_ForceRejoinReq_) isMACCommand_Payload()      {}
func (*MACCommand_RejoinParamSetupReq_) isMACCommand_Payload() {}
func (*MACCommand_RejoinParamSetupAns_) isMACCommand_Payload() {}
func (*MACCommand_PingSlotInfoReq_) isMACCommand_Payload()     {}
func (*MACCommand_PingSlotChannelReq_) isMACCommand_Payload()  {}
func (*MACCommand_PingSlotChannelAns_) isMACCommand_Payload()  {}
func (*MACCommand_BeaconTimingAns_) isMACCommand_Payload()     {}
func (*MACCommand_BeaconFreqReq_) isMACCommand_Payload()       {}
func (*MACCommand_BeaconFreqAns_) isMACCommand_Payload()       {}
func (*MACCommand_DeviceModeInd_) isMACCommand_Payload()       {}
func (*MACCommand_DeviceModeConf_) isMACCommand_Payload()      {}

func (m *MACCommand) GetPayload() isMACCommand_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *MACCommand) GetCID() MACCommandIdentifier {
	if m != nil {
		return m.CID
	}
	return CID_RFU_0
}

func (m *MACCommand) GetRawPayload() []byte {
	if x, ok := m.GetPayload().(*MACCommand_RawPayload); ok {
		return x.RawPayload
	}
	return nil
}

func (m *MACCommand) GetResetInd() *MACCommand_ResetInd {
	if x, ok := m.GetPayload().(*MACCommand_ResetInd_); ok {
		return x.ResetInd
	}
	return nil
}

func (m *MACCommand) GetResetConf() *MACCommand_ResetConf {
	if x, ok := m.GetPayload().(*MACCommand_ResetConf_); ok {
		return x.ResetConf
	}
	return nil
}

func (m *MACCommand) GetLinkCheckAns() *MACCommand_LinkCheckAns {
	if x, ok := m.GetPayload().(*MACCommand_LinkCheckAns_); ok {
		return x.LinkCheckAns
	}
	return nil
}

func (m *MACCommand) GetLinkADRReq() *MACCommand_LinkADRReq {
	if x, ok := m.GetPayload().(*MACCommand_LinkADRReq_); ok {
		return x.LinkADRReq
	}
	return nil
}

func (m *MACCommand) GetLinkADRAns() *MACCommand_LinkADRAns {
	if x, ok := m.GetPayload().(*MACCommand_LinkADRAns_); ok {
		return x.LinkADRAns
	}
	return nil
}

func (m *MACCommand) GetDutyCycleReq() *MACCommand_DutyCycleReq {
	if x, ok := m.GetPayload().(*MACCommand_DutyCycleReq_); ok {
		return x.DutyCycleReq
	}
	return nil
}

func (m *MACCommand) GetRxParamSetupReq() *MACCommand_RxParamSetupReq {
	if x, ok := m.GetPayload().(*MACCommand_RxParamSetupReq_); ok {
		return x.RxParamSetupReq
	}
	return nil
}

func (m *MACCommand) GetRxParamSetupAns() *MACCommand_RxParamSetupAns {
	if x, ok := m.GetPayload().(*MACCommand_RxParamSetupAns_); ok {
		return x.RxParamSetupAns
	}
	return nil
}

func (m *MACCommand) GetDevStatusAns() *MACCommand_DevStatusAns {
	if x, ok := m.GetPayload().(*MACCommand_DevStatusAns_); ok {
		return x.DevStatusAns
	}
	return nil
}

func (m *MACCommand) GetNewChannelReq() *MACCommand_NewChannelReq {
	if x, ok := m.GetPayload().(*MACCommand_NewChannelReq_); ok {
		return x.NewChannelReq
	}
	return nil
}

func (m *MACCommand) GetNewChannelAns() *MACCommand_NewChannelAns {
	if x, ok := m.GetPayload().(*MACCommand_NewChannelAns_); ok {
		return x.NewChannelAns
	}
	return nil
}

func (m *MACCommand) GetDLChannelReq() *MACCommand_DLChannelReq {
	if x, ok := m.GetPayload().(*MACCommand_DLChannelReq_); ok {
		return x.DLChannelReq
	}
	return nil
}

func (m *MACCommand) GetDLChannelAns() *MACCommand_DLChannelAns {
	if x, ok := m.GetPayload().(*MACCommand_DLChannelAns_); ok {
		return x.DLChannelAns
	}
	return nil
}

func (m *MACCommand) GetRxTimingSetupReq() *MACCommand_RxTimingSetupReq {
	if x, ok := m.GetPayload().(*MACCommand_RxTimingSetupReq_); ok {
		return x.RxTimingSetupReq
	}
	return nil
}

func (m *MACCommand) GetTxParamSetupReq() *MACCommand_TxParamSetupReq {
	if x, ok := m.GetPayload().(*MACCommand_TxParamSetupReq_); ok {
		return x.TxParamSetupReq
	}
	return nil
}

func (m *MACCommand) GetRekeyInd() *MACCommand_RekeyInd {
	if x, ok := m.GetPayload().(*MACCommand_RekeyInd_); ok {
		return x.RekeyInd
	}
	return nil
}

func (m *MACCommand) GetRekeyConf() *MACCommand_RekeyConf {
	if x, ok := m.GetPayload().(*MACCommand_RekeyConf_); ok {
		return x.RekeyConf
	}
	return nil
}

func (m *MACCommand) GetADRParamSetupReq() *MACCommand_ADRParamSetupReq {
	if x, ok := m.GetPayload().(*MACCommand_ADRParamSetupReq_); ok {
		return x.ADRParamSetupReq
	}
	return nil
}

func (m *MACCommand) GetDeviceTimeAns() *MACCommand_DeviceTimeAns {
	if x, ok := m.GetPayload().(*MACCommand_DeviceTimeAns_); ok {
		return x.DeviceTimeAns
	}
	return nil
}

func (m *MACCommand) GetForceRejoinReq() *MACCommand_ForceRejoinReq {
	if x, ok := m.GetPayload().(*MACCommand_ForceRejoinReq_); ok {
		return x.ForceRejoinReq
	}
	return nil
}

func (m *MACCommand) GetRejoinParamSetupReq() *MACCommand_RejoinParamSetupReq {
	if x, ok := m.GetPayload().(*MACCommand_RejoinParamSetupReq_); ok {
		return x.RejoinParamSetupReq
	}
	return nil
}

func (m *MACCommand) GetRejoinParamSetupAns() *MACCommand_RejoinParamSetupAns {
	if x, ok := m.GetPayload().(*MACCommand_RejoinParamSetupAns_); ok {
		return x.RejoinParamSetupAns
	}
	return nil
}

func (m *MACCommand) GetPingSlotInfoReq() *MACCommand_PingSlotInfoReq {
	if x, ok := m.GetPayload().(*MACCommand_PingSlotInfoReq_); ok {
		return x.PingSlotInfoReq
	}
	return nil
}

func (m *MACCommand) GetPingSlotChannelReq() *MACCommand_PingSlotChannelReq {
	if x, ok := m.GetPayload().(*MACCommand_PingSlotChannelReq_); ok {
		return x.PingSlotChannelReq
	}
	return nil
}

func (m *MACCommand) GetPingSlotChannelAns() *MACCommand_PingSlotChannelAns {
	if x, ok := m.GetPayload().(*MACCommand_PingSlotChannelAns_); ok {
		return x.PingSlotChannelAns
	}
	return nil
}

func (m *MACCommand) GetBeaconTimingAns() *MACCommand_BeaconTimingAns {
	if x, ok := m.GetPayload().(*MACCommand_BeaconTimingAns_); ok {
		return x.BeaconTimingAns
	}
	return nil
}

func (m *MACCommand) GetBeaconFreqReq() *MACCommand_BeaconFreqReq {
	if x, ok := m.GetPayload().(*MACCommand_BeaconFreqReq_); ok {
		return x.BeaconFreqReq
	}
	return nil
}

func (m *MACCommand) GetBeaconFreqAns() *MACCommand_BeaconFreqAns {
	if x, ok := m.GetPayload().(*MACCommand_BeaconFreqAns_); ok {
		return x.BeaconFreqAns
	}
	return nil
}

func (m *MACCommand) GetDeviceModeInd() *MACCommand_DeviceModeInd {
	if x, ok := m.GetPayload().(*MACCommand_DeviceModeInd_); ok {
		return x.DeviceModeInd
	}
	return nil
}

func (m *MACCommand) GetDeviceModeConf() *MACCommand_DeviceModeConf {
	if x, ok := m.GetPayload().(*MACCommand_DeviceModeConf_); ok {
		return x.DeviceModeConf
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*MACCommand) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _MACCommand_OneofMarshaler, _MACCommand_OneofUnmarshaler, _MACCommand_OneofSizer, []interface{}{
		(*MACCommand_RawPayload)(nil),
		(*MACCommand_ResetInd_)(nil),
		(*MACCommand_ResetConf_)(nil),
		(*MACCommand_LinkCheckAns_)(nil),
		(*MACCommand_LinkADRReq_)(nil),
		(*MACCommand_LinkADRAns_)(nil),
		(*MACCommand_DutyCycleReq_)(nil),
		(*MACCommand_RxParamSetupReq_)(nil),
		(*MACCommand_RxParamSetupAns_)(nil),
		(*MACCommand_DevStatusAns_)(nil),
		(*MACCommand_NewChannelReq_)(nil),
		(*MACCommand_NewChannelAns_)(nil),
		(*MACCommand_DLChannelReq_)(nil),
		(*MACCommand_DLChannelAns_)(nil),
		(*MACCommand_RxTimingSetupReq_)(nil),
		(*MACCommand_TxParamSetupReq_)(nil),
		(*MACCommand_RekeyInd_)(nil),
		(*MACCommand_RekeyConf_)(nil),
		(*MACCommand_ADRParamSetupReq_)(nil),
		(*MACCommand_DeviceTimeAns_)(nil),
		(*MACCommand_ForceRejoinReq_)(nil),
		(*MACCommand_RejoinParamSetupReq_)(nil),
		(*MACCommand_RejoinParamSetupAns_)(nil),
		(*MACCommand_PingSlotInfoReq_)(nil),
		(*MACCommand_PingSlotChannelReq_)(nil),
		(*MACCommand_PingSlotChannelAns_)(nil),
		(*MACCommand_BeaconTimingAns_)(nil),
		(*MACCommand_BeaconFreqReq_)(nil),
		(*MACCommand_BeaconFreqAns_)(nil),
		(*MACCommand_DeviceModeInd_)(nil),
		(*MACCommand_DeviceModeConf_)(nil),
	}
}

func _MACCommand_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*MACCommand)
	// payload
	switch x := m.Payload.(type) {
	case *MACCommand_RawPayload:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.RawPayload)
	case *MACCommand_ResetInd_:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ResetInd); err != nil {
			return err
		}
	case *MACCommand_ResetConf_:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ResetConf); err != nil {
			return err
		}
	case *MACCommand_LinkCheckAns_:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LinkCheckAns); err != nil {
			return err
		}
	case *MACCommand_LinkADRReq_:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LinkADRReq); err != nil {
			return err
		}
	case *MACCommand_LinkADRAns_:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LinkADRAns); err != nil {
			return err
		}
	case *MACCommand_DutyCycleReq_:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DutyCycleReq); err != nil {
			return err
		}
	case *MACCommand_RxParamSetupReq_:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RxParamSetupReq); err != nil {
			return err
		}
	case *MACCommand_RxParamSetupAns_:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RxParamSetupAns); err != nil {
			return err
		}
	case *MACCommand_DevStatusAns_:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DevStatusAns); err != nil {
			return err
		}
	case *MACCommand_NewChannelReq_:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NewChannelReq); err != nil {
			return err
		}
	case *MACCommand_NewChannelAns_:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NewChannelAns); err != nil {
			return err
		}
	case *MACCommand_DLChannelReq_:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DLChannelReq); err != nil {
			return err
		}
	case *MACCommand_DLChannelAns_:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DLChannelAns); err != nil {
			return err
		}
	case *MACCommand_RxTimingSetupReq_:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RxTimingSetupReq); err != nil {
			return err
		}
	case *MACCommand_TxParamSetupReq_:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TxParamSetupReq); err != nil {
			return err
		}
	case *MACCommand_RekeyInd_:
		_ = b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RekeyInd); err != nil {
			return err
		}
	case *MACCommand_RekeyConf_:
		_ = b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RekeyConf); err != nil {
			return err
		}
	case *MACCommand_ADRParamSetupReq_:
		_ = b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ADRParamSetupReq); err != nil {
			return err
		}
	case *MACCommand_DeviceTimeAns_:
		_ = b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeviceTimeAns); err != nil {
			return err
		}
	case *MACCommand_ForceRejoinReq_:
		_ = b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ForceRejoinReq); err != nil {
			return err
		}
	case *MACCommand_RejoinParamSetupReq_:
		_ = b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RejoinParamSetupReq); err != nil {
			return err
		}
	case *MACCommand_RejoinParamSetupAns_:
		_ = b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RejoinParamSetupAns); err != nil {
			return err
		}
	case *MACCommand_PingSlotInfoReq_:
		_ = b.EncodeVarint(25<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PingSlotInfoReq); err != nil {
			return err
		}
	case *MACCommand_PingSlotChannelReq_:
		_ = b.EncodeVarint(26<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PingSlotChannelReq); err != nil {
			return err
		}
	case *MACCommand_PingSlotChannelAns_:
		_ = b.EncodeVarint(27<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PingSlotChannelAns); err != nil {
			return err
		}
	case *MACCommand_BeaconTimingAns_:
		_ = b.EncodeVarint(28<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BeaconTimingAns); err != nil {
			return err
		}
	case *MACCommand_BeaconFreqReq_:
		_ = b.EncodeVarint(29<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BeaconFreqReq); err != nil {
			return err
		}
	case *MACCommand_BeaconFreqAns_:
		_ = b.EncodeVarint(30<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BeaconFreqAns); err != nil {
			return err
		}
	case *MACCommand_DeviceModeInd_:
		_ = b.EncodeVarint(31<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeviceModeInd); err != nil {
			return err
		}
	case *MACCommand_DeviceModeConf_:
		_ = b.EncodeVarint(32<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeviceModeConf); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("MACCommand.Payload has unexpected type %T", x)
	}
	return nil
}

func _MACCommand_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*MACCommand)
	switch tag {
	case 2: // payload.raw_payload
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Payload = &MACCommand_RawPayload{x}
		return true, err
	case 3: // payload.reset_ind
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_ResetInd)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_ResetInd_{msg}
		return true, err
	case 4: // payload.reset_conf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_ResetConf)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_ResetConf_{msg}
		return true, err
	case 5: // payload.link_check_ans
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_LinkCheckAns)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_LinkCheckAns_{msg}
		return true, err
	case 6: // payload.link_adr_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_LinkADRReq)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_LinkADRReq_{msg}
		return true, err
	case 7: // payload.link_adr_ans
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_LinkADRAns)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_LinkADRAns_{msg}
		return true, err
	case 8: // payload.duty_cycle_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_DutyCycleReq)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_DutyCycleReq_{msg}
		return true, err
	case 9: // payload.rx_param_setup_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_RxParamSetupReq)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_RxParamSetupReq_{msg}
		return true, err
	case 10: // payload.rx_param_setup_ans
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_RxParamSetupAns)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_RxParamSetupAns_{msg}
		return true, err
	case 11: // payload.dev_status_ans
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_DevStatusAns)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_DevStatusAns_{msg}
		return true, err
	case 12: // payload.new_channel_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_NewChannelReq)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_NewChannelReq_{msg}
		return true, err
	case 13: // payload.new_channel_ans
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_NewChannelAns)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_NewChannelAns_{msg}
		return true, err
	case 14: // payload.dl_channel_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_DLChannelReq)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_DLChannelReq_{msg}
		return true, err
	case 15: // payload.dl_channel_ans
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_DLChannelAns)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_DLChannelAns_{msg}
		return true, err
	case 16: // payload.rx_timing_setup_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_RxTimingSetupReq)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_RxTimingSetupReq_{msg}
		return true, err
	case 17: // payload.tx_param_setup_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_TxParamSetupReq)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_TxParamSetupReq_{msg}
		return true, err
	case 18: // payload.rekey_ind
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_RekeyInd)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_RekeyInd_{msg}
		return true, err
	case 19: // payload.rekey_conf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_RekeyConf)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_RekeyConf_{msg}
		return true, err
	case 20: // payload.adr_param_setup_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_ADRParamSetupReq)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_ADRParamSetupReq_{msg}
		return true, err
	case 21: // payload.device_time_ans
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_DeviceTimeAns)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_DeviceTimeAns_{msg}
		return true, err
	case 22: // payload.force_rejoin_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_ForceRejoinReq)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_ForceRejoinReq_{msg}
		return true, err
	case 23: // payload.rejoin_param_setup_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_RejoinParamSetupReq)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_RejoinParamSetupReq_{msg}
		return true, err
	case 24: // payload.rejoin_param_setup_ans
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_RejoinParamSetupAns)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_RejoinParamSetupAns_{msg}
		return true, err
	case 25: // payload.ping_slot_info_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_PingSlotInfoReq)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_PingSlotInfoReq_{msg}
		return true, err
	case 26: // payload.ping_slot_channel_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_PingSlotChannelReq)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_PingSlotChannelReq_{msg}
		return true, err
	case 27: // payload.ping_slot_channel_ans
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_PingSlotChannelAns)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_PingSlotChannelAns_{msg}
		return true, err
	case 28: // payload.beacon_timing_ans
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_BeaconTimingAns)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_BeaconTimingAns_{msg}
		return true, err
	case 29: // payload.beacon_freq_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_BeaconFreqReq)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_BeaconFreqReq_{msg}
		return true, err
	case 30: // payload.beacon_freq_ans
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_BeaconFreqAns)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_BeaconFreqAns_{msg}
		return true, err
	case 31: // payload.device_mode_ind
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_DeviceModeInd)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_DeviceModeInd_{msg}
		return true, err
	case 32: // payload.device_mode_conf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_DeviceModeConf)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_DeviceModeConf_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _MACCommand_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*MACCommand)
	// payload
	switch x := m.Payload.(type) {
	case *MACCommand_RawPayload:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.RawPayload)))
		n += len(x.RawPayload)
	case *MACCommand_ResetInd_:
		s := proto.Size(x.ResetInd)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_ResetConf_:
		s := proto.Size(x.ResetConf)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_LinkCheckAns_:
		s := proto.Size(x.LinkCheckAns)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_LinkADRReq_:
		s := proto.Size(x.LinkADRReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_LinkADRAns_:
		s := proto.Size(x.LinkADRAns)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_DutyCycleReq_:
		s := proto.Size(x.DutyCycleReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_RxParamSetupReq_:
		s := proto.Size(x.RxParamSetupReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_RxParamSetupAns_:
		s := proto.Size(x.RxParamSetupAns)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_DevStatusAns_:
		s := proto.Size(x.DevStatusAns)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_NewChannelReq_:
		s := proto.Size(x.NewChannelReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_NewChannelAns_:
		s := proto.Size(x.NewChannelAns)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_DLChannelReq_:
		s := proto.Size(x.DLChannelReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_DLChannelAns_:
		s := proto.Size(x.DLChannelAns)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_RxTimingSetupReq_:
		s := proto.Size(x.RxTimingSetupReq)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_TxParamSetupReq_:
		s := proto.Size(x.TxParamSetupReq)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_RekeyInd_:
		s := proto.Size(x.RekeyInd)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_RekeyConf_:
		s := proto.Size(x.RekeyConf)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_ADRParamSetupReq_:
		s := proto.Size(x.ADRParamSetupReq)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_DeviceTimeAns_:
		s := proto.Size(x.DeviceTimeAns)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_ForceRejoinReq_:
		s := proto.Size(x.ForceRejoinReq)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_RejoinParamSetupReq_:
		s := proto.Size(x.RejoinParamSetupReq)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_RejoinParamSetupAns_:
		s := proto.Size(x.RejoinParamSetupAns)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_PingSlotInfoReq_:
		s := proto.Size(x.PingSlotInfoReq)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_PingSlotChannelReq_:
		s := proto.Size(x.PingSlotChannelReq)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_PingSlotChannelAns_:
		s := proto.Size(x.PingSlotChannelAns)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_BeaconTimingAns_:
		s := proto.Size(x.BeaconTimingAns)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_BeaconFreqReq_:
		s := proto.Size(x.BeaconFreqReq)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_BeaconFreqAns_:
		s := proto.Size(x.BeaconFreqAns)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_DeviceModeInd_:
		s := proto.Size(x.DeviceModeInd)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_DeviceModeConf_:
		s := proto.Size(x.DeviceModeConf)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type MACCommand_ResetInd struct {
	MinorVersion         Minor    `protobuf:"varint,1,opt,name=minor_version,json=minorVersion,proto3,enum=ttn.lorawan.v3.Minor" json:"minor_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MACCommand_ResetInd) Reset()      { *m = MACCommand_ResetInd{} }
func (*MACCommand_ResetInd) ProtoMessage() {}
func (*MACCommand_ResetInd) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{18, 0}
}
func (m *MACCommand_ResetInd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACCommand_ResetInd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACCommand_ResetInd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACCommand_ResetInd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACCommand_ResetInd.Merge(dst, src)
}
func (m *MACCommand_ResetInd) XXX_Size() int {
	return m.Size()
}
func (m *MACCommand_ResetInd) XXX_DiscardUnknown() {
	xxx_messageInfo_MACCommand_ResetInd.DiscardUnknown(m)
}

var xxx_messageInfo_MACCommand_ResetInd proto.InternalMessageInfo

func (m *MACCommand_ResetInd) GetMinorVersion() Minor {
	if m != nil {
		return m.MinorVersion
	}
	return MINOR_RFU_0
}

type MACCommand_ResetConf struct {
	MinorVersion         Minor    `protobuf:"varint,1,opt,name=minor_version,json=minorVersion,proto3,enum=ttn.lorawan.v3.Minor" json:"minor_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MACCommand_ResetConf) Reset()      { *m = MACCommand_ResetConf{} }
func (*MACCommand_ResetConf) ProtoMessage() {}
func (*MACCommand_ResetConf) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{18, 1}
}
func (m *MACCommand_ResetConf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACCommand_ResetConf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACCommand_ResetConf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACCommand_ResetConf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACCommand_ResetConf.Merge(dst, src)
}
func (m *MACCommand_ResetConf) XXX_Size() int {
	return m.Size()
}
func (m *MACCommand_ResetConf) XXX_DiscardUnknown() {
	xxx_messageInfo_MACCommand_ResetConf.DiscardUnknown(m)
}

var xxx_messageInfo_MACCommand_ResetConf proto.InternalMessageInfo

func (m *MACCommand_ResetConf) GetMinorVersion() Minor {
	if m != nil {
		return m.MinorVersion
	}
	return MINOR_RFU_0
}

type MACCommand_LinkCheckAns struct {
	// Indicates the link margin in dB of the received LinkCheckReq, relative to the demodulation floor.
	Margin               uint32   `protobuf:"varint,1,opt,name=margin,proto3" json:"margin,omitempty"`
	GatewayCount         uint32   `protobuf:"varint,2,opt,name=gateway_count,json=gatewayCount,proto3" json:"gateway_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MACCommand_LinkCheckAns) Reset()      { *m = MACCommand_LinkCheckAns{} }
func (*MACCommand_LinkCheckAns) ProtoMessage() {}
func (*MACCommand_LinkCheckAns) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{18, 2}
}
func (m *MACCommand_LinkCheckAns) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACCommand_LinkCheckAns) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACCommand_LinkCheckAns.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACCommand_LinkCheckAns) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACCommand_LinkCheckAns.Merge(dst, src)
}
func (m *MACCommand_LinkCheckAns) XXX_Size() int {
	return m.Size()
}
func (m *MACCommand_LinkCheckAns) XXX_DiscardUnknown() {
	xxx_messageInfo_MACCommand_LinkCheckAns.DiscardUnknown(m)
}

var xxx_messageInfo_MACCommand_LinkCheckAns proto.InternalMessageInfo

func (m *MACCommand_LinkCheckAns) GetMargin() uint32 {
	if m != nil {
		return m.Margin
	}
	return 0
}

func (m *MACCommand_LinkCheckAns) GetGatewayCount() uint32 {
	if m != nil {
		return m.GatewayCount
	}
	return 0
}

type MACCommand_LinkADRReq struct {
	DataRateIndex        DataRateIndex `protobuf:"varint,1,opt,name=data_rate_index,json=dataRateIndex,proto3,enum=ttn.lorawan.v3.DataRateIndex" json:"data_rate_index,omitempty"`
	TxPowerIndex         uint32        `protobuf:"varint,2,opt,name=tx_power_index,json=txPowerIndex,proto3" json:"tx_power_index,omitempty"`
	ChannelMask          []bool        `protobuf:"varint,3,rep,packed,name=channel_mask,json=channelMask,proto3" json:"channel_mask,omitempty"`
	ChannelMaskControl   uint32        `protobuf:"varint,5,opt,name=channel_mask_control,json=channelMaskControl,proto3" json:"channel_mask_control,omitempty"`
	NbTrans              uint32        `protobuf:"varint,6,opt,name=nb_trans,json=nbTrans,proto3" json:"nb_trans,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *MACCommand_LinkADRReq) Reset()      { *m = MACCommand_LinkADRReq{} }
func (*MACCommand_LinkADRReq) ProtoMessage() {}
func (*MACCommand_LinkADRReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{18, 3}
}
func (m *MACCommand_LinkADRReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACCommand_LinkADRReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACCommand_LinkADRReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACCommand_LinkADRReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACCommand_LinkADRReq.Merge(dst, src)
}
func (m *MACCommand_LinkADRReq) XXX_Size() int {
	return m.Size()
}
func (m *MACCommand_LinkADRReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MACCommand_LinkADRReq.DiscardUnknown(m)
}

var xxx_messageInfo_MACCommand_LinkADRReq proto.InternalMessageInfo

func (m *MACCommand_LinkADRReq) GetDataRateIndex() DataRateIndex {
	if m != nil {
		return m.DataRateIndex
	}
	return DATA_RATE_0
}

func (m *MACCommand_LinkADRReq) GetTxPowerIndex() uint32 {
	if m != nil {
		return m.TxPowerIndex
	}
	return 0
}

func (m *MACCommand_LinkADRReq) GetChannelMask() []bool {
	if m != nil {
		return m.ChannelMask
	}
	return nil
}

func (m *MACCommand_LinkADRReq) GetChannelMaskControl() uint32 {
	if m != nil {
		return m.ChannelMaskControl
	}
	return 0
}

func (m *MACCommand_LinkADRReq) GetNbTrans() uint32 {
	if m != nil {
		return m.NbTrans
	}
	return 0
}

type MACCommand_LinkADRAns struct {
	ChannelMaskAck       bool     `protobuf:"varint,1,opt,name=channel_mask_ack,json=channelMaskAck,proto3" json:"channel_mask_ack,omitempty"`
	DataRateIndexAck     bool     `protobuf:"varint,2,opt,name=data_rate_index_ack,json=dataRateIndexAck,proto3" json:"data_rate_index_ack,omitempty"`
	TxPowerIndexAck      bool     `protobuf:"varint,3,opt,name=tx_power_index_ack,json=txPowerIndexAck,proto3" json:"tx_power_index_ack,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MACCommand_LinkADRAns) Reset()      { *m = MACCommand_LinkADRAns{} }
func (*MACCommand_LinkADRAns) ProtoMessage() {}
func (*MACCommand_LinkADRAns) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{18, 4}
}
func (m *MACCommand_LinkADRAns) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACCommand_LinkADRAns) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACCommand_LinkADRAns.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACCommand_LinkADRAns) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACCommand_LinkADRAns.Merge(dst, src)
}
func (m *MACCommand_LinkADRAns) XXX_Size() int {
	return m.Size()
}
func (m *MACCommand_LinkADRAns) XXX_DiscardUnknown() {
	xxx_messageInfo_MACCommand_LinkADRAns.DiscardUnknown(m)
}

var xxx_messageInfo_MACCommand_LinkADRAns proto.InternalMessageInfo

func (m *MACCommand_LinkADRAns) GetChannelMaskAck() bool {
	if m != nil {
		return m.ChannelMaskAck
	}
	return false
}

func (m *MACCommand_LinkADRAns) GetDataRateIndexAck() bool {
	if m != nil {
		return m.DataRateIndexAck
	}
	return false
}

func (m *MACCommand_LinkADRAns) GetTxPowerIndexAck() bool {
	if m != nil {
		return m.TxPowerIndexAck
	}
	return false
}

type MACCommand_DutyCycleReq struct {
	MaxDutyCycle         AggregatedDutyCycle `protobuf:"varint,1,opt,name=max_duty_cycle,json=maxDutyCycle,proto3,enum=ttn.lorawan.v3.AggregatedDutyCycle" json:"max_duty_cycle,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *MACCommand_DutyCycleReq) Reset()      { *m = MACCommand_DutyCycleReq{} }
func (*MACCommand_DutyCycleReq) ProtoMessage() {}
func (*MACCommand_DutyCycleReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{18, 5}
}
func (m *MACCommand_DutyCycleReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACCommand_DutyCycleReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACCommand_DutyCycleReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACCommand_DutyCycleReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACCommand_DutyCycleReq.Merge(dst, src)
}
func (m *MACCommand_DutyCycleReq) XXX_Size() int {
	return m.Size()
}
func (m *MACCommand_DutyCycleReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MACCommand_DutyCycleReq.DiscardUnknown(m)
}

var xxx_messageInfo_MACCommand_DutyCycleReq proto.InternalMessageInfo

func (m *MACCommand_DutyCycleReq) GetMaxDutyCycle() AggregatedDutyCycle {
	if m != nil {
		return m.MaxDutyCycle
	}
	return DUTY_CYCLE_1
}

type MACCommand_RxParamSetupReq struct {
	Rx2DataRateIndex     DataRateIndex `protobuf:"varint,1,opt,name=rx2_data_rate_index,json=rx2DataRateIndex,proto3,enum=ttn.lorawan.v3.DataRateIndex" json:"rx2_data_rate_index,omitempty"`
	Rx1DataRateOffset    uint32        `protobuf:"varint,2,opt,name=rx1_data_rate_offset,json=rx1DataRateOffset,proto3" json:"rx1_data_rate_offset,omitempty"`
	Rx2Frequency         uint64        `protobuf:"varint,3,opt,name=rx2_frequency,json=rx2Frequency,proto3" json:"rx2_frequency,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *MACCommand_RxParamSetupReq) Reset()      { *m = MACCommand_RxParamSetupReq{} }
func (*MACCommand_RxParamSetupReq) ProtoMessage() {}
func (*MACCommand_RxParamSetupReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{18, 6}
}
func (m *MACCommand_RxParamSetupReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACCommand_RxParamSetupReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACCommand_RxParamSetupReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACCommand_RxParamSetupReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACCommand_RxParamSetupReq.Merge(dst, src)
}
func (m *MACCommand_RxParamSetupReq) XXX_Size() int {
	return m.Size()
}
func (m *MACCommand_RxParamSetupReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MACCommand_RxParamSetupReq.DiscardUnknown(m)
}

var xxx_messageInfo_MACCommand_RxParamSetupReq proto.InternalMessageInfo

func (m *MACCommand_RxParamSetupReq) GetRx2DataRateIndex() DataRateIndex {
	if m != nil {
		return m.Rx2DataRateIndex
	}
	return DATA_RATE_0
}

func (m *MACCommand_RxParamSetupReq) GetRx1DataRateOffset() uint32 {
	if m != nil {
		return m.Rx1DataRateOffset
	}
	return 0
}

func (m *MACCommand_RxParamSetupReq) GetRx2Frequency() uint64 {
	if m != nil {
		return m.Rx2Frequency
	}
	return 0
}

type MACCommand_RxParamSetupAns struct {
	Rx2DataRateIndexAck  bool     `protobuf:"varint,1,opt,name=rx2_data_rate_index_ack,json=rx2DataRateIndexAck,proto3" json:"rx2_data_rate_index_ack,omitempty"`
	Rx1DataRateOffsetAck bool     `protobuf:"varint,2,opt,name=rx1_data_rate_offset_ack,json=rx1DataRateOffsetAck,proto3" json:"rx1_data_rate_offset_ack,omitempty"`
	Rx2FrequencyAck      bool     `protobuf:"varint,3,opt,name=rx2_frequency_ack,json=rx2FrequencyAck,proto3" json:"rx2_frequency_ack,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MACCommand_RxParamSetupAns) Reset()      { *m = MACCommand_RxParamSetupAns{} }
func (*MACCommand_RxParamSetupAns) ProtoMessage() {}
func (*MACCommand_RxParamSetupAns) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{18, 7}
}
func (m *MACCommand_RxParamSetupAns) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACCommand_RxParamSetupAns) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACCommand_RxParamSetupAns.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACCommand_RxParamSetupAns) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACCommand_RxParamSetupAns.Merge(dst, src)
}
func (m *MACCommand_RxParamSetupAns) XXX_Size() int {
	return m.Size()
}
func (m *MACCommand_RxParamSetupAns) XXX_DiscardUnknown() {
	xxx_messageInfo_MACCommand_RxParamSetupAns.DiscardUnknown(m)
}

var xxx_messageInfo_MACCommand_RxParamSetupAns proto.InternalMessageInfo

func (m *MACCommand_RxParamSetupAns) GetRx2DataRateIndexAck() bool {
	if m != nil {
		return m.Rx2DataRateIndexAck
	}
	return false
}

func (m *MACCommand_RxParamSetupAns) GetRx1DataRateOffsetAck() bool {
	if m != nil {
		return m.Rx1DataRateOffsetAck
	}
	return false
}

func (m *MACCommand_RxParamSetupAns) GetRx2FrequencyAck() bool {
	if m != nil {
		return m.Rx2FrequencyAck
	}
	return false
}

type MACCommand_DevStatusAns struct {
	// Device battery status.
	// 0 indicates that the device is connected to an external power source.
	// 1..254 indicates a battery level.
	// 255 indicates that the device was not able to measure the battery level.
	Battery uint32 `protobuf:"varint,1,opt,name=battery,proto3" json:"battery,omitempty"`
	// SNR of the last downlink (dB; [-32, +31]).
	Margin               int32    `protobuf:"varint,2,opt,name=margin,proto3" json:"margin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MACCommand_DevStatusAns) Reset()      { *m = MACCommand_DevStatusAns{} }
func (*MACCommand_DevStatusAns) ProtoMessage() {}
func (*MACCommand_DevStatusAns) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{18, 8}
}
func (m *MACCommand_DevStatusAns) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACCommand_DevStatusAns) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACCommand_DevStatusAns.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACCommand_DevStatusAns) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACCommand_DevStatusAns.Merge(dst, src)
}
func (m *MACCommand_DevStatusAns) XXX_Size() int {
	return m.Size()
}
func (m *MACCommand_DevStatusAns) XXX_DiscardUnknown() {
	xxx_messageInfo_MACCommand_DevStatusAns.DiscardUnknown(m)
}

var xxx_messageInfo_MACCommand_DevStatusAns proto.InternalMessageInfo

func (m *MACCommand_DevStatusAns) GetBattery() uint32 {
	if m != nil {
		return m.Battery
	}
	return 0
}

func (m *MACCommand_DevStatusAns) GetMargin() int32 {
	if m != nil {
		return m.Margin
	}
	return 0
}

type MACCommand_NewChannelReq struct {
	ChannelIndex         uint32        `protobuf:"varint,1,opt,name=channel_index,json=channelIndex,proto3" json:"channel_index,omitempty"`
	Frequency            uint64        `protobuf:"varint,2,opt,name=frequency,proto3" json:"frequency,omitempty"`
	MinDataRateIndex     DataRateIndex `protobuf:"varint,3,opt,name=min_data_rate_index,json=minDataRateIndex,proto3,enum=ttn.lorawan.v3.DataRateIndex" json:"min_data_rate_index,omitempty"`
	MaxDataRateIndex     DataRateIndex `protobuf:"varint,4,opt,name=max_data_rate_index,json=maxDataRateIndex,proto3,enum=ttn.lorawan.v3.DataRateIndex" json:"max_data_rate_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *MACCommand_NewChannelReq) Reset()      { *m = MACCommand_NewChannelReq{} }
func (*MACCommand_NewChannelReq) ProtoMessage() {}
func (*MACCommand_NewChannelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{18, 9}
}
func (m *MACCommand_NewChannelReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACCommand_NewChannelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACCommand_NewChannelReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACCommand_NewChannelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACCommand_NewChannelReq.Merge(dst, src)
}
func (m *MACCommand_NewChannelReq) XXX_Size() int {
	return m.Size()
}
func (m *MACCommand_NewChannelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MACCommand_NewChannelReq.DiscardUnknown(m)
}

var xxx_messageInfo_MACCommand_NewChannelReq proto.InternalMessageInfo

func (m *MACCommand_NewChannelReq) GetChannelIndex() uint32 {
	if m != nil {
		return m.ChannelIndex
	}
	return 0
}

func (m *MACCommand_NewChannelReq) GetFrequency() uint64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *MACCommand_NewChannelReq) GetMinDataRateIndex() DataRateIndex {
	if m != nil {
		return m.MinDataRateIndex
	}
	return DATA_RATE_0
}

func (m *MACCommand_NewChannelReq) GetMaxDataRateIndex() DataRateIndex {
	if m != nil {
		return m.MaxDataRateIndex
	}
	return DATA_RATE_0
}

type MACCommand_NewChannelAns struct {
	FrequencyAck         bool     `protobuf:"varint,1,opt,name=frequency_ack,json=frequencyAck,proto3" json:"frequency_ack,omitempty"`
	DataRateAck          bool     `protobuf:"varint,2,opt,name=data_rate_ack,json=dataRateAck,proto3" json:"data_rate_ack,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MACCommand_NewChannelAns) Reset()      { *m = MACCommand_NewChannelAns{} }
func (*MACCommand_NewChannelAns) ProtoMessage() {}
func (*MACCommand_NewChannelAns) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{18, 10}
}
func (m *MACCommand_NewChannelAns) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACCommand_NewChannelAns) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACCommand_NewChannelAns.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACCommand_NewChannelAns) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACCommand_NewChannelAns.Merge(dst, src)
}
func (m *MACCommand_NewChannelAns) XXX_Size() int {
	return m.Size()
}
func (m *MACCommand_NewChannelAns) XXX_DiscardUnknown() {
	xxx_messageInfo_MACCommand_NewChannelAns.DiscardUnknown(m)
}

var xxx_messageInfo_MACCommand_NewChannelAns proto.InternalMessageInfo

func (m *MACCommand_NewChannelAns) GetFrequencyAck() bool {
	if m != nil {
		return m.FrequencyAck
	}
	return false
}

func (m *MACCommand_NewChannelAns) GetDataRateAck() bool {
	if m != nil {
		return m.DataRateAck
	}
	return false
}

type MACCommand_DLChannelReq struct {
	ChannelIndex         uint32   `protobuf:"varint,1,opt,name=channel_index,json=channelIndex,proto3" json:"channel_index,omitempty"`
	Frequency            uint64   `protobuf:"varint,2,opt,name=frequency,proto3" json:"frequency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MACCommand_DLChannelReq) Reset()      { *m = MACCommand_DLChannelReq{} }
func (*MACCommand_DLChannelReq) ProtoMessage() {}
func (*MACCommand_DLChannelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{18, 11}
}
func (m *MACCommand_DLChannelReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACCommand_DLChannelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACCommand_DLChannelReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACCommand_DLChannelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACCommand_DLChannelReq.Merge(dst, src)
}
func (m *MACCommand_DLChannelReq) XXX_Size() int {
	return m.Size()
}
func (m *MACCommand_DLChannelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MACCommand_DLChannelReq.DiscardUnknown(m)
}

var xxx_messageInfo_MACCommand_DLChannelReq proto.InternalMessageInfo

func (m *MACCommand_DLChannelReq) GetChannelIndex() uint32 {
	if m != nil {
		return m.ChannelIndex
	}
	return 0
}

func (m *MACCommand_DLChannelReq) GetFrequency() uint64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

type MACCommand_DLChannelAns struct {
	ChannelIndexAck      bool     `protobuf:"varint,1,opt,name=channel_index_ack,json=channelIndexAck,proto3" json:"channel_index_ack,omitempty"`
	FrequencyAck         bool     `protobuf:"varint,2,opt,name=frequency_ack,json=frequencyAck,proto3" json:"frequency_ack,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MACCommand_DLChannelAns) Reset()      { *m = MACCommand_DLChannelAns{} }
func (*MACCommand_DLChannelAns) ProtoMessage() {}
func (*MACCommand_DLChannelAns) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{18, 12}
}
func (m *MACCommand_DLChannelAns) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACCommand_DLChannelAns) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACCommand_DLChannelAns.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACCommand_DLChannelAns) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACCommand_DLChannelAns.Merge(dst, src)
}
func (m *MACCommand_DLChannelAns) XXX_Size() int {
	return m.Size()
}
func (m *MACCommand_DLChannelAns) XXX_DiscardUnknown() {
	xxx_messageInfo_MACCommand_DLChannelAns.DiscardUnknown(m)
}

var xxx_messageInfo_MACCommand_DLChannelAns proto.InternalMessageInfo

func (m *MACCommand_DLChannelAns) GetChannelIndexAck() bool {
	if m != nil {
		return m.ChannelIndexAck
	}
	return false
}

func (m *MACCommand_DLChannelAns) GetFrequencyAck() bool {
	if m != nil {
		return m.FrequencyAck
	}
	return false
}

type MACCommand_RxTimingSetupReq struct {
	Delay                RxDelay  `protobuf:"varint,1,opt,name=delay,proto3,enum=ttn.lorawan.v3.RxDelay" json:"delay,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MACCommand_RxTimingSetupReq) Reset()      { *m = MACCommand_RxTimingSetupReq{} }
func (*MACCommand_RxTimingSetupReq) ProtoMessage() {}
func (*MACCommand_RxTimingSetupReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{18, 13}
}
func (m *MACCommand_RxTimingSetupReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACCommand_RxTimingSetupReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACCommand_RxTimingSetupReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACCommand_RxTimingSetupReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACCommand_RxTimingSetupReq.Merge(dst, src)
}
func (m *MACCommand_RxTimingSetupReq) XXX_Size() int {
	return m.Size()
}
func (m *MACCommand_RxTimingSetupReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MACCommand_RxTimingSetupReq.DiscardUnknown(m)
}

var xxx_messageInfo_MACCommand_RxTimingSetupReq proto.InternalMessageInfo

func (m *MACCommand_RxTimingSetupReq) GetDelay() RxDelay {
	if m != nil {
		return m.Delay
	}
	return RX_DELAY_0
}

type MACCommand_TxParamSetupReq struct {
	// Indicates the maximum EIRP value in dBm, indexed by the following vector:
	// [ 8 10 12 13 14 16 18 20 21 24 26 27 29 30 33 36 ]
	MaxEIRPIndex         DeviceEIRP `protobuf:"varint,1,opt,name=max_eirp_index,json=maxEirpIndex,proto3,enum=ttn.lorawan.v3.DeviceEIRP" json:"max_eirp_index,omitempty"`
	UplinkDwellTime      bool       `protobuf:"varint,2,opt,name=uplink_dwell_time,json=uplinkDwellTime,proto3" json:"uplink_dwell_time,omitempty"`
	DownlinkDwellTime    bool       `protobuf:"varint,3,opt,name=downlink_dwell_time,json=downlinkDwellTime,proto3" json:"downlink_dwell_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *MACCommand_TxParamSetupReq) Reset()      { *m = MACCommand_TxParamSetupReq{} }
func (*MACCommand_TxParamSetupReq) ProtoMessage() {}
func (*MACCommand_TxParamSetupReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{18, 14}
}
func (m *MACCommand_TxParamSetupReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACCommand_TxParamSetupReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACCommand_TxParamSetupReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACCommand_TxParamSetupReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACCommand_TxParamSetupReq.Merge(dst, src)
}
func (m *MACCommand_TxParamSetupReq) XXX_Size() int {
	return m.Size()
}
func (m *MACCommand_TxParamSetupReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MACCommand_TxParamSetupReq.DiscardUnknown(m)
}

var xxx_messageInfo_MACCommand_TxParamSetupReq proto.InternalMessageInfo

func (m *MACCommand_TxParamSetupReq) GetMaxEIRPIndex() DeviceEIRP {
	if m != nil {
		return m.MaxEIRPIndex
	}
	return DEVICE_EIRP_8
}

func (m *MACCommand_TxParamSetupReq) GetUplinkDwellTime() bool {
	if m != nil {
		return m.UplinkDwellTime
	}
	return false
}

func (m *MACCommand_TxParamSetupReq) GetDownlinkDwellTime() bool {
	if m != nil {
		return m.DownlinkDwellTime
	}
	return false
}

type MACCommand_RekeyInd struct {
	MinorVersion         Minor    `protobuf:"varint,1,opt,name=minor_version,json=minorVersion,proto3,enum=ttn.lorawan.v3.Minor" json:"minor_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MACCommand_RekeyInd) Reset()      { *m = MACCommand_RekeyInd{} }
func (*MACCommand_RekeyInd) ProtoMessage() {}
func (*MACCommand_RekeyInd) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{18, 15}
}
func (m *MACCommand_RekeyInd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACCommand_RekeyInd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACCommand_RekeyInd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACCommand_RekeyInd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACCommand_RekeyInd.Merge(dst, src)
}
func (m *MACCommand_RekeyInd) XXX_Size() int {
	return m.Size()
}
func (m *MACCommand_RekeyInd) XXX_DiscardUnknown() {
	xxx_messageInfo_MACCommand_RekeyInd.DiscardUnknown(m)
}

var xxx_messageInfo_MACCommand_RekeyInd proto.InternalMessageInfo

func (m *MACCommand_RekeyInd) GetMinorVersion() Minor {
	if m != nil {
		return m.MinorVersion
	}
	return MINOR_RFU_0
}

type MACCommand_RekeyConf struct {
	MinorVersion         Minor    `protobuf:"varint,1,opt,name=minor_version,json=minorVersion,proto3,enum=ttn.lorawan.v3.Minor" json:"minor_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MACCommand_RekeyConf) Reset()      { *m = MACCommand_RekeyConf{} }
func (*MACCommand_RekeyConf) ProtoMessage() {}
func (*MACCommand_RekeyConf) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{18, 16}
}
func (m *MACCommand_RekeyConf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACCommand_RekeyConf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACCommand_RekeyConf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACCommand_RekeyConf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACCommand_RekeyConf.Merge(dst, src)
}
func (m *MACCommand_RekeyConf) XXX_Size() int {
	return m.Size()
}
func (m *MACCommand_RekeyConf) XXX_DiscardUnknown() {
	xxx_messageInfo_MACCommand_RekeyConf.DiscardUnknown(m)
}

var xxx_messageInfo_MACCommand_RekeyConf proto.InternalMessageInfo

func (m *MACCommand_RekeyConf) GetMinorVersion() Minor {
	if m != nil {
		return m.MinorVersion
	}
	return MINOR_RFU_0
}

type MACCommand_ADRParamSetupReq struct {
	// Exponent e that configures the ADR_ACK_LIMIT = 2^e messages.
	ADRAckLimitExponent ADRAckLimitExponent `protobuf:"varint,1,opt,name=adr_ack_limit_exponent,json=adrAckLimitExponent,proto3,enum=ttn.lorawan.v3.ADRAckLimitExponent" json:"adr_ack_limit_exponent,omitempty"`
	// Exponent e that configures the ADR_ACK_DELAY = 2^e messages.
	ADRAckDelayExponent  ADRAckDelayExponent `protobuf:"varint,2,opt,name=adr_ack_delay_exponent,json=adrAckDelayExponent,proto3,enum=ttn.lorawan.v3.ADRAckDelayExponent" json:"adr_ack_delay_exponent,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *MACCommand_ADRParamSetupReq) Reset()      { *m = MACCommand_ADRParamSetupReq{} }
func (*MACCommand_ADRParamSetupReq) ProtoMessage() {}
func (*MACCommand_ADRParamSetupReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{18, 17}
}
func (m *MACCommand_ADRParamSetupReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACCommand_ADRParamSetupReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACCommand_ADRParamSetupReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACCommand_ADRParamSetupReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACCommand_ADRParamSetupReq.Merge(dst, src)
}
func (m *MACCommand_ADRParamSetupReq) XXX_Size() int {
	return m.Size()
}
func (m *MACCommand_ADRParamSetupReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MACCommand_ADRParamSetupReq.DiscardUnknown(m)
}

var xxx_messageInfo_MACCommand_ADRParamSetupReq proto.InternalMessageInfo

func (m *MACCommand_ADRParamSetupReq) GetADRAckLimitExponent() ADRAckLimitExponent {
	if m != nil {
		return m.ADRAckLimitExponent
	}
	return ADR_ACK_LIMIT_1
}

func (m *MACCommand_ADRParamSetupReq) GetADRAckDelayExponent() ADRAckDelayExponent {
	if m != nil {
		return m.ADRAckDelayExponent
	}
	return ADR_ACK_DELAY_1
}

type MACCommand_DeviceTimeAns struct {
	Time                 time.Time `protobuf:"bytes,7,opt,name=time,proto3,stdtime" json:"time"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *MACCommand_DeviceTimeAns) Reset()      { *m = MACCommand_DeviceTimeAns{} }
func (*MACCommand_DeviceTimeAns) ProtoMessage() {}
func (*MACCommand_DeviceTimeAns) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{18, 18}
}
func (m *MACCommand_DeviceTimeAns) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACCommand_DeviceTimeAns) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACCommand_DeviceTimeAns.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACCommand_DeviceTimeAns) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACCommand_DeviceTimeAns.Merge(dst, src)
}
func (m *MACCommand_DeviceTimeAns) XXX_Size() int {
	return m.Size()
}
func (m *MACCommand_DeviceTimeAns) XXX_DiscardUnknown() {
	xxx_messageInfo_MACCommand_DeviceTimeAns.DiscardUnknown(m)
}

var xxx_messageInfo_MACCommand_DeviceTimeAns proto.InternalMessageInfo

func (m *MACCommand_DeviceTimeAns) GetTime() time.Time {
	if m != nil {
		return m.Time
	}
	return time.Time{}
}

type MACCommand_ForceRejoinReq struct {
	RejoinType    uint32        `protobuf:"varint,1,opt,name=rejoin_type,json=rejoinType,proto3" json:"rejoin_type,omitempty"`
	DataRateIndex DataRateIndex `protobuf:"varint,2,opt,name=data_rate_index,json=dataRateIndex,proto3,enum=ttn.lorawan.v3.DataRateIndex" json:"data_rate_index,omitempty"`
	MaxRetries    uint32        `protobuf:"varint,3,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty"`
	// Exponent e that configures the rejoin period = 32 * 2^e + rand(0,32) seconds.
	PeriodExponent       RejoinPeriodExponent `protobuf:"varint,4,opt,name=period_exponent,json=periodExponent,proto3,enum=ttn.lorawan.v3.RejoinPeriodExponent" json:"period_exponent,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *MACCommand_ForceRejoinReq) Reset()      { *m = MACCommand_ForceRejoinReq{} }
func (*MACCommand_ForceRejoinReq) ProtoMessage() {}
func (*MACCommand_ForceRejoinReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{18, 19}
}
func (m *MACCommand_ForceRejoinReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACCommand_ForceRejoinReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACCommand_ForceRejoinReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACCommand_ForceRejoinReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACCommand_ForceRejoinReq.Merge(dst, src)
}
func (m *MACCommand_ForceRejoinReq) XXX_Size() int {
	return m.Size()
}
func (m *MACCommand_ForceRejoinReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MACCommand_ForceRejoinReq.DiscardUnknown(m)
}

var xxx_messageInfo_MACCommand_ForceRejoinReq proto.InternalMessageInfo

func (m *MACCommand_ForceRejoinReq) GetRejoinType() uint32 {
	if m != nil {
		return m.RejoinType
	}
	return 0
}

func (m *MACCommand_ForceRejoinReq) GetDataRateIndex() DataRateIndex {
	if m != nil {
		return m.DataRateIndex
	}
	return DATA_RATE_0
}

func (m *MACCommand_ForceRejoinReq) GetMaxRetries() uint32 {
	if m != nil {
		return m.MaxRetries
	}
	return 0
}

func (m *MACCommand_ForceRejoinReq) GetPeriodExponent() RejoinPeriodExponent {
	if m != nil {
		return m.PeriodExponent
	}
	return REJOIN_PERIOD_0
}

type MACCommand_RejoinParamSetupReq struct {
	// Exponent e that configures the rejoin counter = 2^(e+4) messages.
	MaxCountExponent RejoinCountExponent `protobuf:"varint,1,opt,name=max_count_exponent,json=maxCountExponent,proto3,enum=ttn.lorawan.v3.RejoinCountExponent" json:"max_count_exponent,omitempty"`
	// Exponent e that configures the rejoin timer = 2^(e+10) seconds.
	MaxTimeExponent      RejoinTimeExponent `protobuf:"varint,2,opt,name=max_time_exponent,json=maxTimeExponent,proto3,enum=ttn.lorawan.v3.RejoinTimeExponent" json:"max_time_exponent,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *MACCommand_RejoinParamSetupReq) Reset()      { *m = MACCommand_RejoinParamSetupReq{} }
func (*MACCommand_RejoinParamSetupReq) ProtoMessage() {}
func (*MACCommand_RejoinParamSetupReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{18, 20}
}
func (m *MACCommand_RejoinParamSetupReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACCommand_RejoinParamSetupReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACCommand_RejoinParamSetupReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACCommand_RejoinParamSetupReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACCommand_RejoinParamSetupReq.Merge(dst, src)
}
func (m *MACCommand_RejoinParamSetupReq) XXX_Size() int {
	return m.Size()
}
func (m *MACCommand_RejoinParamSetupReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MACCommand_RejoinParamSetupReq.DiscardUnknown(m)
}

var xxx_messageInfo_MACCommand_RejoinParamSetupReq proto.InternalMessageInfo

func (m *MACCommand_RejoinParamSetupReq) GetMaxCountExponent() RejoinCountExponent {
	if m != nil {
		return m.MaxCountExponent
	}
	return REJOIN_COUNT_16
}

func (m *MACCommand_RejoinParamSetupReq) GetMaxTimeExponent() RejoinTimeExponent {
	if m != nil {
		return m.MaxTimeExponent
	}
	return REJOIN_TIME_0
}

type MACCommand_RejoinParamSetupAns struct {
	MaxTimeExponentAck   bool     `protobuf:"varint,1,opt,name=max_time_exponent_ack,json=maxTimeExponentAck,proto3" json:"max_time_exponent_ack,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MACCommand_RejoinParamSetupAns) Reset()      { *m = MACCommand_RejoinParamSetupAns{} }
func (*MACCommand_RejoinParamSetupAns) ProtoMessage() {}
func (*MACCommand_RejoinParamSetupAns) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{18, 21}
}
func (m *MACCommand_RejoinParamSetupAns) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACCommand_RejoinParamSetupAns) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACCommand_RejoinParamSetupAns.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACCommand_RejoinParamSetupAns) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACCommand_RejoinParamSetupAns.Merge(dst, src)
}
func (m *MACCommand_RejoinParamSetupAns) XXX_Size() int {
	return m.Size()
}
func (m *MACCommand_RejoinParamSetupAns) XXX_DiscardUnknown() {
	xxx_messageInfo_MACCommand_RejoinParamSetupAns.DiscardUnknown(m)
}

var xxx_messageInfo_MACCommand_RejoinParamSetupAns proto.InternalMessageInfo

func (m *MACCommand_RejoinParamSetupAns) GetMaxTimeExponentAck() bool {
	if m != nil {
		return m.MaxTimeExponentAck
	}
	return false
}

type MACCommand_PingSlotInfoReq struct {
	Period               PingSlotPeriod `protobuf:"varint,1,opt,name=period,proto3,enum=ttn.lorawan.v3.PingSlotPeriod" json:"period,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *MACCommand_PingSlotInfoReq) Reset()      { *m = MACCommand_PingSlotInfoReq{} }
func (*MACCommand_PingSlotInfoReq) ProtoMessage() {}
func (*MACCommand_PingSlotInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{18, 22}
}
func (m *MACCommand_PingSlotInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACCommand_PingSlotInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACCommand_PingSlotInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACCommand_PingSlotInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACCommand_PingSlotInfoReq.Merge(dst, src)
}
func (m *MACCommand_PingSlotInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *MACCommand_PingSlotInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MACCommand_PingSlotInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_MACCommand_PingSlotInfoReq proto.InternalMessageInfo

func (m *MACCommand_PingSlotInfoReq) GetPeriod() PingSlotPeriod {
	if m != nil {
		return m.Period
	}
	return PING_EVERY_1S
}

type MACCommand_PingSlotChannelReq struct {
	Frequency            uint64        `protobuf:"varint,1,opt,name=frequency,proto3" json:"frequency,omitempty"`
	DataRateIndex        DataRateIndex `protobuf:"varint,2,opt,name=data_rate_index,json=dataRateIndex,proto3,enum=ttn.lorawan.v3.DataRateIndex" json:"data_rate_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *MACCommand_PingSlotChannelReq) Reset()      { *m = MACCommand_PingSlotChannelReq{} }
func (*MACCommand_PingSlotChannelReq) ProtoMessage() {}
func (*MACCommand_PingSlotChannelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{18, 23}
}
func (m *MACCommand_PingSlotChannelReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACCommand_PingSlotChannelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACCommand_PingSlotChannelReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACCommand_PingSlotChannelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACCommand_PingSlotChannelReq.Merge(dst, src)
}
func (m *MACCommand_PingSlotChannelReq) XXX_Size() int {
	return m.Size()
}
func (m *MACCommand_PingSlotChannelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MACCommand_PingSlotChannelReq.DiscardUnknown(m)
}

var xxx_messageInfo_MACCommand_PingSlotChannelReq proto.InternalMessageInfo

func (m *MACCommand_PingSlotChannelReq) GetFrequency() uint64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *MACCommand_PingSlotChannelReq) GetDataRateIndex() DataRateIndex {
	if m != nil {
		return m.DataRateIndex
	}
	return DATA_RATE_0
}

type MACCommand_PingSlotChannelAns struct {
	FrequencyAck         bool     `protobuf:"varint,1,opt,name=frequency_ack,json=frequencyAck,proto3" json:"frequency_ack,omitempty"`
	DataRateIndexAck     bool     `protobuf:"varint,2,opt,name=data_rate_index_ack,json=dataRateIndexAck,proto3" json:"data_rate_index_ack,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MACCommand_PingSlotChannelAns) Reset()      { *m = MACCommand_PingSlotChannelAns{} }
func (*MACCommand_PingSlotChannelAns) ProtoMessage() {}
func (*MACCommand_PingSlotChannelAns) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{18, 24}
}
func (m *MACCommand_PingSlotChannelAns) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACCommand_PingSlotChannelAns) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACCommand_PingSlotChannelAns.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACCommand_PingSlotChannelAns) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACCommand_PingSlotChannelAns.Merge(dst, src)
}
func (m *MACCommand_PingSlotChannelAns) XXX_Size() int {
	return m.Size()
}
func (m *MACCommand_PingSlotChannelAns) XXX_DiscardUnknown() {
	xxx_messageInfo_MACCommand_PingSlotChannelAns.DiscardUnknown(m)
}

var xxx_messageInfo_MACCommand_PingSlotChannelAns proto.InternalMessageInfo

func (m *MACCommand_PingSlotChannelAns) GetFrequencyAck() bool {
	if m != nil {
		return m.FrequencyAck
	}
	return false
}

func (m *MACCommand_PingSlotChannelAns) GetDataRateIndexAck() bool {
	if m != nil {
		return m.DataRateIndexAck
	}
	return false
}

type MACCommand_BeaconTimingAns struct {
	Delay                uint32   `protobuf:"varint,1,opt,name=delay,proto3" json:"delay,omitempty"`
	ChannelIndex         uint32   `protobuf:"varint,2,opt,name=channel_index,json=channelIndex,proto3" json:"channel_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MACCommand_BeaconTimingAns) Reset()      { *m = MACCommand_BeaconTimingAns{} }
func (*MACCommand_BeaconTimingAns) ProtoMessage() {}
func (*MACCommand_BeaconTimingAns) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{18, 25}
}
func (m *MACCommand_BeaconTimingAns) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACCommand_BeaconTimingAns) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACCommand_BeaconTimingAns.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACCommand_BeaconTimingAns) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACCommand_BeaconTimingAns.Merge(dst, src)
}
func (m *MACCommand_BeaconTimingAns) XXX_Size() int {
	return m.Size()
}
func (m *MACCommand_BeaconTimingAns) XXX_DiscardUnknown() {
	xxx_messageInfo_MACCommand_BeaconTimingAns.DiscardUnknown(m)
}

var xxx_messageInfo_MACCommand_BeaconTimingAns proto.InternalMessageInfo

func (m *MACCommand_BeaconTimingAns) GetDelay() uint32 {
	if m != nil {
		return m.Delay
	}
	return 0
}

func (m *MACCommand_BeaconTimingAns) GetChannelIndex() uint32 {
	if m != nil {
		return m.ChannelIndex
	}
	return 0
}

type MACCommand_BeaconFreqReq struct {
	Frequency            uint64   `protobuf:"varint,1,opt,name=frequency,proto3" json:"frequency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MACCommand_BeaconFreqReq) Reset()      { *m = MACCommand_BeaconFreqReq{} }
func (*MACCommand_BeaconFreqReq) ProtoMessage() {}
func (*MACCommand_BeaconFreqReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{18, 26}
}
func (m *MACCommand_BeaconFreqReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACCommand_BeaconFreqReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACCommand_BeaconFreqReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACCommand_BeaconFreqReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACCommand_BeaconFreqReq.Merge(dst, src)
}
func (m *MACCommand_BeaconFreqReq) XXX_Size() int {
	return m.Size()
}
func (m *MACCommand_BeaconFreqReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MACCommand_BeaconFreqReq.DiscardUnknown(m)
}

var xxx_messageInfo_MACCommand_BeaconFreqReq proto.InternalMessageInfo

func (m *MACCommand_BeaconFreqReq) GetFrequency() uint64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

type MACCommand_BeaconFreqAns struct {
	FrequencyAck         bool     `protobuf:"varint,1,opt,name=frequency_ack,json=frequencyAck,proto3" json:"frequency_ack,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MACCommand_BeaconFreqAns) Reset()      { *m = MACCommand_BeaconFreqAns{} }
func (*MACCommand_BeaconFreqAns) ProtoMessage() {}
func (*MACCommand_BeaconFreqAns) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{18, 27}
}
func (m *MACCommand_BeaconFreqAns) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACCommand_BeaconFreqAns) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACCommand_BeaconFreqAns.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACCommand_BeaconFreqAns) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACCommand_BeaconFreqAns.Merge(dst, src)
}
func (m *MACCommand_BeaconFreqAns) XXX_Size() int {
	return m.Size()
}
func (m *MACCommand_BeaconFreqAns) XXX_DiscardUnknown() {
	xxx_messageInfo_MACCommand_BeaconFreqAns.DiscardUnknown(m)
}

var xxx_messageInfo_MACCommand_BeaconFreqAns proto.InternalMessageInfo

func (m *MACCommand_BeaconFreqAns) GetFrequencyAck() bool {
	if m != nil {
		return m.FrequencyAck
	}
	return false
}

type MACCommand_DeviceModeInd struct {
	Class                Class    `protobuf:"varint,1,opt,name=class,proto3,enum=ttn.lorawan.v3.Class" json:"class,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MACCommand_DeviceModeInd) Reset()      { *m = MACCommand_DeviceModeInd{} }
func (*MACCommand_DeviceModeInd) ProtoMessage() {}
func (*MACCommand_DeviceModeInd) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{18, 28}
}
func (m *MACCommand_DeviceModeInd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACCommand_DeviceModeInd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACCommand_DeviceModeInd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACCommand_DeviceModeInd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACCommand_DeviceModeInd.Merge(dst, src)
}
func (m *MACCommand_DeviceModeInd) XXX_Size() int {
	return m.Size()
}
func (m *MACCommand_DeviceModeInd) XXX_DiscardUnknown() {
	xxx_messageInfo_MACCommand_DeviceModeInd.DiscardUnknown(m)
}

var xxx_messageInfo_MACCommand_DeviceModeInd proto.InternalMessageInfo

func (m *MACCommand_DeviceModeInd) GetClass() Class {
	if m != nil {
		return m.Class
	}
	return CLASS_A
}

type MACCommand_DeviceModeConf struct {
	Class                Class    `protobuf:"varint,1,opt,name=class,proto3,enum=ttn.lorawan.v3.Class" json:"class,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MACCommand_DeviceModeConf) Reset()      { *m = MACCommand_DeviceModeConf{} }
func (*MACCommand_DeviceModeConf) ProtoMessage() {}
func (*MACCommand_DeviceModeConf) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_58aef822c5219cad, []int{18, 29}
}
func (m *MACCommand_DeviceModeConf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACCommand_DeviceModeConf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACCommand_DeviceModeConf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACCommand_DeviceModeConf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACCommand_DeviceModeConf.Merge(dst, src)
}
func (m *MACCommand_DeviceModeConf) XXX_Size() int {
	return m.Size()
}
func (m *MACCommand_DeviceModeConf) XXX_DiscardUnknown() {
	xxx_messageInfo_MACCommand_DeviceModeConf.DiscardUnknown(m)
}

var xxx_messageInfo_MACCommand_DeviceModeConf proto.InternalMessageInfo

func (m *MACCommand_DeviceModeConf) GetClass() Class {
	if m != nil {
		return m.Class
	}
	return CLASS_A
}

func init() {
	proto.RegisterType((*Message)(nil), "ttn.lorawan.v3.Message")
	golang_proto.RegisterType((*Message)(nil), "ttn.lorawan.v3.Message")
	proto.RegisterType((*MHDR)(nil), "ttn.lorawan.v3.MHDR")
	golang_proto.RegisterType((*MHDR)(nil), "ttn.lorawan.v3.MHDR")
	proto.RegisterType((*MACPayload)(nil), "ttn.lorawan.v3.MACPayload")
	golang_proto.RegisterType((*MACPayload)(nil), "ttn.lorawan.v3.MACPayload")
	proto.RegisterType((*FHDR)(nil), "ttn.lorawan.v3.FHDR")
	golang_proto.RegisterType((*FHDR)(nil), "ttn.lorawan.v3.FHDR")
	proto.RegisterType((*FCtrl)(nil), "ttn.lorawan.v3.FCtrl")
	golang_proto.RegisterType((*FCtrl)(nil), "ttn.lorawan.v3.FCtrl")
	proto.RegisterType((*JoinRequestPayload)(nil), "ttn.lorawan.v3.JoinRequestPayload")
	golang_proto.RegisterType((*JoinRequestPayload)(nil), "ttn.lorawan.v3.JoinRequestPayload")
	proto.RegisterType((*RejoinRequestPayload)(nil), "ttn.lorawan.v3.RejoinRequestPayload")
	golang_proto.RegisterType((*RejoinRequestPayload)(nil), "ttn.lorawan.v3.RejoinRequestPayload")
	proto.RegisterType((*JoinAcceptPayload)(nil), "ttn.lorawan.v3.JoinAcceptPayload")
	golang_proto.RegisterType((*JoinAcceptPayload)(nil), "ttn.lorawan.v3.JoinAcceptPayload")
	proto.RegisterType((*DLSettings)(nil), "ttn.lorawan.v3.DLSettings")
	golang_proto.RegisterType((*DLSettings)(nil), "ttn.lorawan.v3.DLSettings")
	proto.RegisterType((*CFList)(nil), "ttn.lorawan.v3.CFList")
	golang_proto.RegisterType((*CFList)(nil), "ttn.lorawan.v3.CFList")
	proto.RegisterType((*LoRaDataRate)(nil), "ttn.lorawan.v3.LoRaDataRate")
	golang_proto.RegisterType((*LoRaDataRate)(nil), "ttn.lorawan.v3.LoRaDataRate")
	proto.RegisterType((*FSKDataRate)(nil), "ttn.lorawan.v3.FSKDataRate")
	golang_proto.RegisterType((*FSKDataRate)(nil), "ttn.lorawan.v3.FSKDataRate")
	proto.RegisterType((*DataRate)(nil), "ttn.lorawan.v3.DataRate")
	golang_proto.RegisterType((*DataRate)(nil), "ttn.lorawan.v3.DataRate")
	proto.RegisterType((*TxSettings)(nil), "ttn.lorawan.v3.TxSettings")
	golang_proto.RegisterType((*TxSettings)(nil), "ttn.lorawan.v3.TxSettings")
	proto.RegisterType((*GatewayAntennaIdentifiers)(nil), "ttn.lorawan.v3.GatewayAntennaIdentifiers")
	golang_proto.RegisterType((*GatewayAntennaIdentifiers)(nil), "ttn.lorawan.v3.GatewayAntennaIdentifiers")
	proto.RegisterType((*UplinkToken)(nil), "ttn.lorawan.v3.UplinkToken")
	golang_proto.RegisterType((*UplinkToken)(nil), "ttn.lorawan.v3.UplinkToken")
	proto.RegisterType((*DownlinkPath)(nil), "ttn.lorawan.v3.DownlinkPath")
	golang_proto.RegisterType((*DownlinkPath)(nil), "ttn.lorawan.v3.DownlinkPath")
	proto.RegisterType((*TxRequest)(nil), "ttn.lorawan.v3.TxRequest")
	golang_proto.RegisterType((*TxRequest)(nil), "ttn.lorawan.v3.TxRequest")
	proto.RegisterType((*MACCommand)(nil), "ttn.lorawan.v3.MACCommand")
	golang_proto.RegisterType((*MACCommand)(nil), "ttn.lorawan.v3.MACCommand")
	proto.RegisterType((*MACCommand_ResetInd)(nil), "ttn.lorawan.v3.MACCommand.ResetInd")
	golang_proto.RegisterType((*MACCommand_ResetInd)(nil), "ttn.lorawan.v3.MACCommand.ResetInd")
	proto.RegisterType((*MACCommand_ResetConf)(nil), "ttn.lorawan.v3.MACCommand.ResetConf")
	golang_proto.RegisterType((*MACCommand_ResetConf)(nil), "ttn.lorawan.v3.MACCommand.ResetConf")
	proto.RegisterType((*MACCommand_LinkCheckAns)(nil), "ttn.lorawan.v3.MACCommand.LinkCheckAns")
	golang_proto.RegisterType((*MACCommand_LinkCheckAns)(nil), "ttn.lorawan.v3.MACCommand.LinkCheckAns")
	proto.RegisterType((*MACCommand_LinkADRReq)(nil), "ttn.lorawan.v3.MACCommand.LinkADRReq")
	golang_proto.RegisterType((*MACCommand_LinkADRReq)(nil), "ttn.lorawan.v3.MACCommand.LinkADRReq")
	proto.RegisterType((*MACCommand_LinkADRAns)(nil), "ttn.lorawan.v3.MACCommand.LinkADRAns")
	golang_proto.RegisterType((*MACCommand_LinkADRAns)(nil), "ttn.lorawan.v3.MACCommand.LinkADRAns")
	proto.RegisterType((*MACCommand_DutyCycleReq)(nil), "ttn.lorawan.v3.MACCommand.DutyCycleReq")
	golang_proto.RegisterType((*MACCommand_DutyCycleReq)(nil), "ttn.lorawan.v3.MACCommand.DutyCycleReq")
	proto.RegisterType((*MACCommand_RxParamSetupReq)(nil), "ttn.lorawan.v3.MACCommand.RxParamSetupReq")
	golang_proto.RegisterType((*MACCommand_RxParamSetupReq)(nil), "ttn.lorawan.v3.MACCommand.RxParamSetupReq")
	proto.RegisterType((*MACCommand_RxParamSetupAns)(nil), "ttn.lorawan.v3.MACCommand.RxParamSetupAns")
	golang_proto.RegisterType((*MACCommand_RxParamSetupAns)(nil), "ttn.lorawan.v3.MACCommand.RxParamSetupAns")
	proto.RegisterType((*MACCommand_DevStatusAns)(nil), "ttn.lorawan.v3.MACCommand.DevStatusAns")
	golang_proto.RegisterType((*MACCommand_DevStatusAns)(nil), "ttn.lorawan.v3.MACCommand.DevStatusAns")
	proto.RegisterType((*MACCommand_NewChannelReq)(nil), "ttn.lorawan.v3.MACCommand.NewChannelReq")
	golang_proto.RegisterType((*MACCommand_NewChannelReq)(nil), "ttn.lorawan.v3.MACCommand.NewChannelReq")
	proto.RegisterType((*MACCommand_NewChannelAns)(nil), "ttn.lorawan.v3.MACCommand.NewChannelAns")
	golang_proto.RegisterType((*MACCommand_NewChannelAns)(nil), "ttn.lorawan.v3.MACCommand.NewChannelAns")
	proto.RegisterType((*MACCommand_DLChannelReq)(nil), "ttn.lorawan.v3.MACCommand.DLChannelReq")
	golang_proto.RegisterType((*MACCommand_DLChannelReq)(nil), "ttn.lorawan.v3.MACCommand.DLChannelReq")
	proto.RegisterType((*MACCommand_DLChannelAns)(nil), "ttn.lorawan.v3.MACCommand.DLChannelAns")
	golang_proto.RegisterType((*MACCommand_DLChannelAns)(nil), "ttn.lorawan.v3.MACCommand.DLChannelAns")
	proto.RegisterType((*MACCommand_RxTimingSetupReq)(nil), "ttn.lorawan.v3.MACCommand.RxTimingSetupReq")
	golang_proto.RegisterType((*MACCommand_RxTimingSetupReq)(nil), "ttn.lorawan.v3.MACCommand.RxTimingSetupReq")
	proto.RegisterType((*MACCommand_TxParamSetupReq)(nil), "ttn.lorawan.v3.MACCommand.TxParamSetupReq")
	golang_proto.RegisterType((*MACCommand_TxParamSetupReq)(nil), "ttn.lorawan.v3.MACCommand.TxParamSetupReq")
	proto.RegisterType((*MACCommand_RekeyInd)(nil), "ttn.lorawan.v3.MACCommand.RekeyInd")
	golang_proto.RegisterType((*MACCommand_RekeyInd)(nil), "ttn.lorawan.v3.MACCommand.RekeyInd")
	proto.RegisterType((*MACCommand_RekeyConf)(nil), "ttn.lorawan.v3.MACCommand.RekeyConf")
	golang_proto.RegisterType((*MACCommand_RekeyConf)(nil), "ttn.lorawan.v3.MACCommand.RekeyConf")
	proto.RegisterType((*MACCommand_ADRParamSetupReq)(nil), "ttn.lorawan.v3.MACCommand.ADRParamSetupReq")
	golang_proto.RegisterType((*MACCommand_ADRParamSetupReq)(nil), "ttn.lorawan.v3.MACCommand.ADRParamSetupReq")
	proto.RegisterType((*MACCommand_DeviceTimeAns)(nil), "ttn.lorawan.v3.MACCommand.DeviceTimeAns")
	golang_proto.RegisterType((*MACCommand_DeviceTimeAns)(nil), "ttn.lorawan.v3.MACCommand.DeviceTimeAns")
	proto.RegisterType((*MACCommand_ForceRejoinReq)(nil), "ttn.lorawan.v3.MACCommand.ForceRejoinReq")
	golang_proto.RegisterType((*MACCommand_ForceRejoinReq)(nil), "ttn.lorawan.v3.MACCommand.ForceRejoinReq")
	proto.RegisterType((*MACCommand_RejoinParamSetupReq)(nil), "ttn.lorawan.v3.MACCommand.RejoinParamSetupReq")
	golang_proto.RegisterType((*MACCommand_RejoinParamSetupReq)(nil), "ttn.lorawan.v3.MACCommand.RejoinParamSetupReq")
	proto.RegisterType((*MACCommand_RejoinParamSetupAns)(nil), "ttn.lorawan.v3.MACCommand.RejoinParamSetupAns")
	golang_proto.RegisterType((*MACCommand_RejoinParamSetupAns)(nil), "ttn.lorawan.v3.MACCommand.RejoinParamSetupAns")
	proto.RegisterType((*MACCommand_PingSlotInfoReq)(nil), "ttn.lorawan.v3.MACCommand.PingSlotInfoReq")
	golang_proto.RegisterType((*MACCommand_PingSlotInfoReq)(nil), "ttn.lorawan.v3.MACCommand.PingSlotInfoReq")
	proto.RegisterType((*MACCommand_PingSlotChannelReq)(nil), "ttn.lorawan.v3.MACCommand.PingSlotChannelReq")
	golang_proto.RegisterType((*MACCommand_PingSlotChannelReq)(nil), "ttn.lorawan.v3.MACCommand.PingSlotChannelReq")
	proto.RegisterType((*MACCommand_PingSlotChannelAns)(nil), "ttn.lorawan.v3.MACCommand.PingSlotChannelAns")
	golang_proto.RegisterType((*MACCommand_PingSlotChannelAns)(nil), "ttn.lorawan.v3.MACCommand.PingSlotChannelAns")
	proto.RegisterType((*MACCommand_BeaconTimingAns)(nil), "ttn.lorawan.v3.MACCommand.BeaconTimingAns")
	golang_proto.RegisterType((*MACCommand_BeaconTimingAns)(nil), "ttn.lorawan.v3.MACCommand.BeaconTimingAns")
	proto.RegisterType((*MACCommand_BeaconFreqReq)(nil), "ttn.lorawan.v3.MACCommand.BeaconFreqReq")
	golang_proto.RegisterType((*MACCommand_BeaconFreqReq)(nil), "ttn.lorawan.v3.MACCommand.BeaconFreqReq")
	proto.RegisterType((*MACCommand_BeaconFreqAns)(nil), "ttn.lorawan.v3.MACCommand.BeaconFreqAns")
	golang_proto.RegisterType((*MACCommand_BeaconFreqAns)(nil), "ttn.lorawan.v3.MACCommand.BeaconFreqAns")
	proto.RegisterType((*MACCommand_DeviceModeInd)(nil), "ttn.lorawan.v3.MACCommand.DeviceModeInd")
	golang_proto.RegisterType((*MACCommand_DeviceModeInd)(nil), "ttn.lorawan.v3.MACCommand.DeviceModeInd")
	proto.RegisterType((*MACCommand_DeviceModeConf)(nil), "ttn.lorawan.v3.MACCommand.DeviceModeConf")
	golang_proto.RegisterType((*MACCommand_DeviceModeConf)(nil), "ttn.lorawan.v3.MACCommand.DeviceModeConf")
	proto.RegisterEnum("ttn.lorawan.v3.MType", MType_name, MType_value)
	golang_proto.RegisterEnum("ttn.lorawan.v3.MType", MType_name, MType_value)
	proto.RegisterEnum("ttn.lorawan.v3.Major", Major_name, Major_value)
	golang_proto.RegisterEnum("ttn.lorawan.v3.Major", Major_name, Major_value)
	proto.RegisterEnum("ttn.lorawan.v3.MACVersion", MACVersion_name, MACVersion_value)
	golang_proto.RegisterEnum("ttn.lorawan.v3.MACVersion", MACVersion_name, MACVersion_value)
	proto.RegisterEnum("ttn.lorawan.v3.PHYVersion", PHYVersion_name, PHYVersion_value)
	golang_proto.RegisterEnum("ttn.lorawan.v3.PHYVersion", PHYVersion_name, PHYVersion_value)
	proto.RegisterEnum("ttn.lorawan.v3.DataRateIndex", DataRateIndex_name, DataRateIndex_value)
	golang_proto.RegisterEnum("ttn.lorawan.v3.DataRateIndex", DataRateIndex_name, DataRateIndex_value)
	proto.RegisterEnum("ttn.lorawan.v3.RejoinType", RejoinType_name, RejoinType_value)
	golang_proto.RegisterEnum("ttn.lorawan.v3.RejoinType", RejoinType_name, RejoinType_value)
	proto.RegisterEnum("ttn.lorawan.v3.CFListType", CFListType_name, CFListType_value)
	golang_proto.RegisterEnum("ttn.lorawan.v3.CFListType", CFListType_name, CFListType_value)
	proto.RegisterEnum("ttn.lorawan.v3.Class", Class_name, Class_value)
	golang_proto.RegisterEnum("ttn.lorawan.v3.Class", Class_name, Class_value)
	proto.RegisterEnum("ttn.lorawan.v3.TxSchedulePriority", TxSchedulePriority_name, TxSchedulePriority_value)
	golang_proto.RegisterEnum("ttn.lorawan.v3.TxSchedulePriority", TxSchedulePriority_name, TxSchedulePriority_value)
	proto.RegisterEnum("ttn.lorawan.v3.MACCommandIdentifier", MACCommandIdentifier_name, MACCommandIdentifier_value)
	golang_proto.RegisterEnum("ttn.lorawan.v3.MACCommandIdentifier", MACCommandIdentifier_name, MACCommandIdentifier_value)
	proto.RegisterEnum("ttn.lorawan.v3.AggregatedDutyCycle", AggregatedDutyCycle_name, AggregatedDutyCycle_value)
	golang_proto.RegisterEnum("ttn.lorawan.v3.AggregatedDutyCycle", AggregatedDutyCycle_name, AggregatedDutyCycle_value)
	proto.RegisterEnum("ttn.lorawan.v3.PingSlotPeriod", PingSlotPeriod_name, PingSlotPeriod_value)
	golang_proto.RegisterEnum("ttn.lorawan.v3.PingSlotPeriod", PingSlotPeriod_name, PingSlotPeriod_value)
	proto.RegisterEnum("ttn.lorawan.v3.RejoinCountExponent", RejoinCountExponent_name, RejoinCountExponent_value)
	golang_proto.RegisterEnum("ttn.lorawan.v3.RejoinCountExponent", RejoinCountExponent_name, RejoinCountExponent_value)
	proto.RegisterEnum("ttn.lorawan.v3.RejoinTimeExponent", RejoinTimeExponent_name, RejoinTimeExponent_value)
	golang_proto.RegisterEnum("ttn.lorawan.v3.RejoinTimeExponent", RejoinTimeExponent_name, RejoinTimeExponent_value)
	proto.RegisterEnum("ttn.lorawan.v3.RejoinPeriodExponent", RejoinPeriodExponent_name, RejoinPeriodExponent_value)
	golang_proto.RegisterEnum("ttn.lorawan.v3.RejoinPeriodExponent", RejoinPeriodExponent_name, RejoinPeriodExponent_value)
	proto.RegisterEnum("ttn.lorawan.v3.DeviceEIRP", DeviceEIRP_name, DeviceEIRP_value)
	golang_proto.RegisterEnum("ttn.lorawan.v3.DeviceEIRP", DeviceEIRP_name, DeviceEIRP_value)
	proto.RegisterEnum("ttn.lorawan.v3.ADRAckLimitExponent", ADRAckLimitExponent_name, ADRAckLimitExponent_value)
	golang_proto.RegisterEnum("ttn.lorawan.v3.ADRAckLimitExponent", ADRAckLimitExponent_name, ADRAckLimitExponent_value)
	proto.RegisterEnum("ttn.lorawan.v3.ADRAckDelayExponent", ADRAckDelayExponent_name, ADRAckDelayExponent_value)
	golang_proto.RegisterEnum("ttn.lorawan.v3.ADRAckDelayExponent", ADRAckDelayExponent_name, ADRAckDelayExponent_value)
	proto.RegisterEnum("ttn.lorawan.v3.RxDelay", RxDelay_name, RxDelay_value)
	golang_proto.RegisterEnum("ttn.lorawan.v3.RxDelay", RxDelay_name, RxDelay_value)
	proto.RegisterEnum("ttn.lorawan.v3.Minor", Minor_name, Minor_value)
	golang_proto.RegisterEnum("ttn.lorawan.v3.Minor", Minor_name, Minor_value)
}
func (x MType) String() string {
	s, ok := MType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Major) String() string {
	s, ok := Major_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x RejoinType) String() string {
	s, ok := RejoinType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x CFListType) String() string {
	s, ok := CFListType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Class) String() string {
	s, ok := Class_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x TxSchedulePriority) String() string {
	s, ok := TxSchedulePriority_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x MACCommandIdentifier) String() string {
	s, ok := MACCommandIdentifier_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x AggregatedDutyCycle) String() string {
	s, ok := AggregatedDutyCycle_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x PingSlotPeriod) String() string {
	s, ok := PingSlotPeriod_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x RejoinCountExponent) String() string {
	s, ok := RejoinCountExponent_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x RejoinTimeExponent) String() string {
	s, ok := RejoinTimeExponent_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x RejoinPeriodExponent) String() string {
	s, ok := RejoinPeriodExponent_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DeviceEIRP) String() string {
	s, ok := DeviceEIRP_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ADRAckLimitExponent) String() string {
	s, ok := ADRAckLimitExponent_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ADRAckDelayExponent) String() string {
	s, ok := ADRAckDelayExponent_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Minor) String() string {
	s, ok := Minor_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Message) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message)
	if !ok {
		that2, ok := that.(Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MHDR.Equal(&that1.MHDR) {
		return false
	}
	if !bytes.Equal(this.MIC, that1.MIC) {
		return false
	}
	if that1.Payload == nil {
		if this.Payload != nil {
			return false
		}
	} else if this.Payload == nil {
		return false
	} else if !this.Payload.Equal(that1.Payload) {
		return false
	}
	return true
}
func (this *Message_MACPayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message_MACPayload)
	if !ok {
		that2, ok := that.(Message_MACPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MACPayload.Equal(that1.MACPayload) {
		return false
	}
	return true
}
func (this *Message_JoinRequestPayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message_JoinRequestPayload)
	if !ok {
		that2, ok := that.(Message_JoinRequestPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JoinRequestPayload.Equal(that1.JoinRequestPayload) {
		return false
	}
	return true
}
func (this *Message_JoinAcceptPayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message_JoinAcceptPayload)
	if !ok {
		that2, ok := that.(Message_JoinAcceptPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JoinAcceptPayload.Equal(that1.JoinAcceptPayload) {
		return false
	}
	return true
}
func (this *Message_RejoinRequestPayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message_RejoinRequestPayload)
	if !ok {
		that2, ok := that.(Message_RejoinRequestPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RejoinRequestPayload.Equal(that1.RejoinRequestPayload) {
		return false
	}
	return true
}
func (this *MHDR) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MHDR)
	if !ok {
		that2, ok := that.(MHDR)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MType != that1.MType {
		return false
	}
	if this.Major != that1.Major {
		return false
	}
	return true
}
func (this *MACPayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACPayload)
	if !ok {
		that2, ok := that.(MACPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FHDR.Equal(&that1.FHDR) {
		return false
	}
	if this.FPort != that1.FPort {
		return false
	}
	if !bytes.Equal(this.FRMPayload, that1.FRMPayload) {
		return false
	}
	if !this.DecodedPayload.Equal(that1.DecodedPayload) {
		return false
	}
	return true
}
func (this *FHDR) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FHDR)
	if !ok {
		that2, ok := that.(FHDR)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DevAddr.Equal(that1.DevAddr) {
		return false
	}
	if !this.FCtrl.Equal(&that1.FCtrl) {
		return false
	}
	if this.FCnt != that1.FCnt {
		return false
	}
	if !bytes.Equal(this.FOpts, that1.FOpts) {
		return false
	}
	return true
}
func (this *FCtrl) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FCtrl)
	if !ok {
		that2, ok := that.(FCtrl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ADR != that1.ADR {
		return false
	}
	if this.ADRAckReq != that1.ADRAckReq {
		return false
	}
	if this.Ack != that1.Ack {
		return false
	}
	if this.FPending != that1.FPending {
		return false
	}
	if this.ClassB != that1.ClassB {
		return false
	}
	return true
}
func (this *JoinRequestPayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JoinRequestPayload)
	if !ok {
		that2, ok := that.(JoinRequestPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JoinEUI.Equal(that1.JoinEUI) {
		return false
	}
	if !this.DevEUI.Equal(that1.DevEUI) {
		return false
	}
	if !this.DevNonce.Equal(that1.DevNonce) {
		return false
	}
	return true
}
func (this *RejoinRequestPayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RejoinRequestPayload)
	if !ok {
		that2, ok := that.(RejoinRequestPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RejoinType != that1.RejoinType {
		return false
	}
	if !this.NetID.Equal(that1.NetID) {
		return false
	}
	if !this.JoinEUI.Equal(that1.JoinEUI) {
		return false
	}
	if !this.DevEUI.Equal(that1.DevEUI) {
		return false
	}
	if this.RejoinCnt != that1.RejoinCnt {
		return false
	}
	return true
}
func (this *JoinAcceptPayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JoinAcceptPayload)
	if !ok {
		that2, ok := that.(JoinAcceptPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Encrypted, that1.Encrypted) {
		return false
	}
	if !this.JoinNonce.Equal(that1.JoinNonce) {
		return false
	}
	if !this.NetID.Equal(that1.NetID) {
		return false
	}
	if !this.DevAddr.Equal(that1.DevAddr) {
		return false
	}
	if !this.DLSettings.Equal(&that1.DLSettings) {
		return false
	}
	if this.RxDelay != that1.RxDelay {
		return false
	}
	if !this.CFList.Equal(that1.CFList) {
		return false
	}
	return true
}
func (this *DLSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DLSettings)
	if !ok {
		that2, ok := that.(DLSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rx1DROffset != that1.Rx1DROffset {
		return false
	}
	if this.Rx2DR != that1.Rx2DR {
		return false
	}
	if this.OptNeg != that1.OptNeg {
		return false
	}
	return true
}
func (this *CFList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CFList)
	if !ok {
		that2, ok := that.(CFList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if len(this.Freq) != len(that1.Freq) {
		return false
	}
	for i := range this.Freq {
		if this.Freq[i] != that1.Freq[i] {
			return false
		}
	}
	if len(this.ChMasks) != len(that1.ChMasks) {
		return false
	}
	for i := range this.ChMasks {
		if this.ChMasks[i] != that1.ChMasks[i] {
			return false
		}
	}
	return true
}
func (this *LoRaDataRate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoRaDataRate)
	if !ok {
		that2, ok := that.(LoRaDataRate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Bandwidth != that1.Bandwidth {
		return false
	}
	if this.SpreadingFactor != that1.SpreadingFactor {
		return false
	}
	return true
}
func (this *FSKDataRate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FSKDataRate)
	if !ok {
		that2, ok := that.(FSKDataRate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BitRate != that1.BitRate {
		return false
	}
	return true
}
func (this *DataRate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DataRate)
	if !ok {
		that2, ok := that.(DataRate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Modulation == nil {
		if this.Modulation != nil {
			return false
		}
	} else if this.Modulation == nil {
		return false
	} else if !this.Modulation.Equal(that1.Modulation) {
		return false
	}
	return true
}
func (this *DataRate_LoRa) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DataRate_LoRa)
	if !ok {
		that2, ok := that.(DataRate_LoRa)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LoRa.Equal(that1.LoRa) {
		return false
	}
	return true
}
func (this *DataRate_FSK) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DataRate_FSK)
	if !ok {
		that2, ok := that.(DataRate_FSK)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FSK.Equal(that1.FSK) {
		return false
	}
	return true
}
func (this *TxSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TxSettings)
	if !ok {
		that2, ok := that.(TxSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DataRate.Equal(&that1.DataRate) {
		return false
	}
	if this.DataRateIndex != that1.DataRateIndex {
		return false
	}
	if this.CodingRate != that1.CodingRate {
		return false
	}
	if this.Frequency != that1.Frequency {
		return false
	}
	if this.TxPower != that1.TxPower {
		return false
	}
	if this.InvertPolarization != that1.InvertPolarization {
		return false
	}
	if this.GatewayChannelIndex != that1.GatewayChannelIndex {
		return false
	}
	if this.DeviceChannelIndex != that1.DeviceChannelIndex {
		return false
	}
	if this.EnableCRC != that1.EnableCRC {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if that1.Time == nil {
		if this.Time != nil {
			return false
		}
	} else if !this.Time.Equal(*that1.Time) {
		return false
	}
	return true
}
func (this *GatewayAntennaIdentifiers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayAntennaIdentifiers)
	if !ok {
		that2, ok := that.(GatewayAntennaIdentifiers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GatewayIdentifiers.Equal(&that1.GatewayIdentifiers) {
		return false
	}
	if this.AntennaIndex != that1.AntennaIndex {
		return false
	}
	return true
}
func (this *UplinkToken) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UplinkToken)
	if !ok {
		that2, ok := that.(UplinkToken)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GatewayAntennaIdentifiers.Equal(&that1.GatewayAntennaIdentifiers) {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	return true
}
func (this *DownlinkPath) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownlinkPath)
	if !ok {
		that2, ok := that.(DownlinkPath)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Path == nil {
		if this.Path != nil {
			return false
		}
	} else if this.Path == nil {
		return false
	} else if !this.Path.Equal(that1.Path) {
		return false
	}
	return true
}
func (this *DownlinkPath_UplinkToken) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownlinkPath_UplinkToken)
	if !ok {
		that2, ok := that.(DownlinkPath_UplinkToken)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.UplinkToken, that1.UplinkToken) {
		return false
	}
	return true
}
func (this *DownlinkPath_Fixed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownlinkPath_Fixed)
	if !ok {
		that2, ok := that.(DownlinkPath_Fixed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Fixed.Equal(that1.Fixed) {
		return false
	}
	return true
}
func (this *TxRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TxRequest)
	if !ok {
		that2, ok := that.(TxRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Class != that1.Class {
		return false
	}
	if len(this.DownlinkPaths) != len(that1.DownlinkPaths) {
		return false
	}
	for i := range this.DownlinkPaths {
		if !this.DownlinkPaths[i].Equal(that1.DownlinkPaths[i]) {
			return false
		}
	}
	if this.Rx1Delay != that1.Rx1Delay {
		return false
	}
	if this.Rx1DataRateIndex != that1.Rx1DataRateIndex {
		return false
	}
	if this.Rx1Frequency != that1.Rx1Frequency {
		return false
	}
	if this.Rx2DataRateIndex != that1.Rx2DataRateIndex {
		return false
	}
	if this.Rx2Frequency != that1.Rx2Frequency {
		return false
	}
	if this.Priority != that1.Priority {
		return false
	}
	if that1.AbsoluteTime == nil {
		if this.AbsoluteTime != nil {
			return false
		}
	} else if !this.AbsoluteTime.Equal(*that1.AbsoluteTime) {
		return false
	}
	if !this.Advanced.Equal(that1.Advanced) {
		return false
	}
	return true
}
func (this *MACCommand) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand)
	if !ok {
		that2, ok := that.(MACCommand)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CID != that1.CID {
		return false
	}
	if that1.Payload == nil {
		if this.Payload != nil {
			return false
		}
	} else if this.Payload == nil {
		return false
	} else if !this.Payload.Equal(that1.Payload) {
		return false
	}
	return true
}
func (this *MACCommand_RawPayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_RawPayload)
	if !ok {
		that2, ok := that.(MACCommand_RawPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.RawPayload, that1.RawPayload) {
		return false
	}
	return true
}
func (this *MACCommand_ResetInd_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_ResetInd_)
	if !ok {
		that2, ok := that.(MACCommand_ResetInd_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ResetInd.Equal(that1.ResetInd) {
		return false
	}
	return true
}
func (this *MACCommand_ResetConf_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_ResetConf_)
	if !ok {
		that2, ok := that.(MACCommand_ResetConf_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ResetConf.Equal(that1.ResetConf) {
		return false
	}
	return true
}
func (this *MACCommand_LinkCheckAns_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_LinkCheckAns_)
	if !ok {
		that2, ok := that.(MACCommand_LinkCheckAns_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LinkCheckAns.Equal(that1.LinkCheckAns) {
		return false
	}
	return true
}
func (this *MACCommand_LinkADRReq_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_LinkADRReq_)
	if !ok {
		that2, ok := that.(MACCommand_LinkADRReq_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LinkADRReq.Equal(that1.LinkADRReq) {
		return false
	}
	return true
}
func (this *MACCommand_LinkADRAns_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_LinkADRAns_)
	if !ok {
		that2, ok := that.(MACCommand_LinkADRAns_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LinkADRAns.Equal(that1.LinkADRAns) {
		return false
	}
	return true
}
func (this *MACCommand_DutyCycleReq_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_DutyCycleReq_)
	if !ok {
		that2, ok := that.(MACCommand_DutyCycleReq_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DutyCycleReq.Equal(that1.DutyCycleReq) {
		return false
	}
	return true
}
func (this *MACCommand_RxParamSetupReq_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_RxParamSetupReq_)
	if !ok {
		that2, ok := that.(MACCommand_RxParamSetupReq_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RxParamSetupReq.Equal(that1.RxParamSetupReq) {
		return false
	}
	return true
}
func (this *MACCommand_RxParamSetupAns_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_RxParamSetupAns_)
	if !ok {
		that2, ok := that.(MACCommand_RxParamSetupAns_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RxParamSetupAns.Equal(that1.RxParamSetupAns) {
		return false
	}
	return true
}
func (this *MACCommand_DevStatusAns_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_DevStatusAns_)
	if !ok {
		that2, ok := that.(MACCommand_DevStatusAns_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DevStatusAns.Equal(that1.DevStatusAns) {
		return false
	}
	return true
}
func (this *MACCommand_NewChannelReq_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_NewChannelReq_)
	if !ok {
		that2, ok := that.(MACCommand_NewChannelReq_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NewChannelReq.Equal(that1.NewChannelReq) {
		return false
	}
	return true
}
func (this *MACCommand_NewChannelAns_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_NewChannelAns_)
	if !ok {
		that2, ok := that.(MACCommand_NewChannelAns_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NewChannelAns.Equal(that1.NewChannelAns) {
		return false
	}
	return true
}
func (this *MACCommand_DLChannelReq_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_DLChannelReq_)
	if !ok {
		that2, ok := that.(MACCommand_DLChannelReq_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DLChannelReq.Equal(that1.DLChannelReq) {
		return false
	}
	return true
}
func (this *MACCommand_DLChannelAns_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_DLChannelAns_)
	if !ok {
		that2, ok := that.(MACCommand_DLChannelAns_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DLChannelAns.Equal(that1.DLChannelAns) {
		return false
	}
	return true
}
func (this *MACCommand_RxTimingSetupReq_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_RxTimingSetupReq_)
	if !ok {
		that2, ok := that.(MACCommand_RxTimingSetupReq_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RxTimingSetupReq.Equal(that1.RxTimingSetupReq) {
		return false
	}
	return true
}
func (this *MACCommand_TxParamSetupReq_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_TxParamSetupReq_)
	if !ok {
		that2, ok := that.(MACCommand_TxParamSetupReq_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TxParamSetupReq.Equal(that1.TxParamSetupReq) {
		return false
	}
	return true
}
func (this *MACCommand_RekeyInd_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_RekeyInd_)
	if !ok {
		that2, ok := that.(MACCommand_RekeyInd_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RekeyInd.Equal(that1.RekeyInd) {
		return false
	}
	return true
}
func (this *MACCommand_RekeyConf_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_RekeyConf_)
	if !ok {
		that2, ok := that.(MACCommand_RekeyConf_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RekeyConf.Equal(that1.RekeyConf) {
		return false
	}
	return true
}
func (this *MACCommand_ADRParamSetupReq_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_ADRParamSetupReq_)
	if !ok {
		that2, ok := that.(MACCommand_ADRParamSetupReq_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ADRParamSetupReq.Equal(that1.ADRParamSetupReq) {
		return false
	}
	return true
}
func (this *MACCommand_DeviceTimeAns_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_DeviceTimeAns_)
	if !ok {
		that2, ok := that.(MACCommand_DeviceTimeAns_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DeviceTimeAns.Equal(that1.DeviceTimeAns) {
		return false
	}
	return true
}
func (this *MACCommand_ForceRejoinReq_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_ForceRejoinReq_)
	if !ok {
		that2, ok := that.(MACCommand_ForceRejoinReq_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ForceRejoinReq.Equal(that1.ForceRejoinReq) {
		return false
	}
	return true
}
func (this *MACCommand_RejoinParamSetupReq_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_RejoinParamSetupReq_)
	if !ok {
		that2, ok := that.(MACCommand_RejoinParamSetupReq_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RejoinParamSetupReq.Equal(that1.RejoinParamSetupReq) {
		return false
	}
	return true
}
func (this *MACCommand_RejoinParamSetupAns_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_RejoinParamSetupAns_)
	if !ok {
		that2, ok := that.(MACCommand_RejoinParamSetupAns_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RejoinParamSetupAns.Equal(that1.RejoinParamSetupAns) {
		return false
	}
	return true
}
func (this *MACCommand_PingSlotInfoReq_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_PingSlotInfoReq_)
	if !ok {
		that2, ok := that.(MACCommand_PingSlotInfoReq_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PingSlotInfoReq.Equal(that1.PingSlotInfoReq) {
		return false
	}
	return true
}
func (this *MACCommand_PingSlotChannelReq_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_PingSlotChannelReq_)
	if !ok {
		that2, ok := that.(MACCommand_PingSlotChannelReq_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PingSlotChannelReq.Equal(that1.PingSlotChannelReq) {
		return false
	}
	return true
}
func (this *MACCommand_PingSlotChannelAns_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_PingSlotChannelAns_)
	if !ok {
		that2, ok := that.(MACCommand_PingSlotChannelAns_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PingSlotChannelAns.Equal(that1.PingSlotChannelAns) {
		return false
	}
	return true
}
func (this *MACCommand_BeaconTimingAns_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_BeaconTimingAns_)
	if !ok {
		that2, ok := that.(MACCommand_BeaconTimingAns_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BeaconTimingAns.Equal(that1.BeaconTimingAns) {
		return false
	}
	return true
}
func (this *MACCommand_BeaconFreqReq_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_BeaconFreqReq_)
	if !ok {
		that2, ok := that.(MACCommand_BeaconFreqReq_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BeaconFreqReq.Equal(that1.BeaconFreqReq) {
		return false
	}
	return true
}
func (this *MACCommand_BeaconFreqAns_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_BeaconFreqAns_)
	if !ok {
		that2, ok := that.(MACCommand_BeaconFreqAns_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BeaconFreqAns.Equal(that1.BeaconFreqAns) {
		return false
	}
	return true
}
func (this *MACCommand_DeviceModeInd_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_DeviceModeInd_)
	if !ok {
		that2, ok := that.(MACCommand_DeviceModeInd_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DeviceModeInd.Equal(that1.DeviceModeInd) {
		return false
	}
	return true
}
func (this *MACCommand_DeviceModeConf_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_DeviceModeConf_)
	if !ok {
		that2, ok := that.(MACCommand_DeviceModeConf_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DeviceModeConf.Equal(that1.DeviceModeConf) {
		return false
	}
	return true
}
func (this *MACCommand_ResetInd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_ResetInd)
	if !ok {
		that2, ok := that.(MACCommand_ResetInd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MinorVersion != that1.MinorVersion {
		return false
	}
	return true
}
func (this *MACCommand_ResetConf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_ResetConf)
	if !ok {
		that2, ok := that.(MACCommand_ResetConf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MinorVersion != that1.MinorVersion {
		return false
	}
	return true
}
func (this *MACCommand_LinkCheckAns) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_LinkCheckAns)
	if !ok {
		that2, ok := that.(MACCommand_LinkCheckAns)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Margin != that1.Margin {
		return false
	}
	if this.GatewayCount != that1.GatewayCount {
		return false
	}
	return true
}
func (this *MACCommand_LinkADRReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_LinkADRReq)
	if !ok {
		that2, ok := that.(MACCommand_LinkADRReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DataRateIndex != that1.DataRateIndex {
		return false
	}
	if this.TxPowerIndex != that1.TxPowerIndex {
		return false
	}
	if len(this.ChannelMask) != len(that1.ChannelMask) {
		return false
	}
	for i := range this.ChannelMask {
		if this.ChannelMask[i] != that1.ChannelMask[i] {
			return false
		}
	}
	if this.ChannelMaskControl != that1.ChannelMaskControl {
		return false
	}
	if this.NbTrans != that1.NbTrans {
		return false
	}
	return true
}
func (this *MACCommand_LinkADRAns) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_LinkADRAns)
	if !ok {
		that2, ok := that.(MACCommand_LinkADRAns)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ChannelMaskAck != that1.ChannelMaskAck {
		return false
	}
	if this.DataRateIndexAck != that1.DataRateIndexAck {
		return false
	}
	if this.TxPowerIndexAck != that1.TxPowerIndexAck {
		return false
	}
	return true
}
func (this *MACCommand_DutyCycleReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_DutyCycleReq)
	if !ok {
		that2, ok := that.(MACCommand_DutyCycleReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxDutyCycle != that1.MaxDutyCycle {
		return false
	}
	return true
}
func (this *MACCommand_RxParamSetupReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_RxParamSetupReq)
	if !ok {
		that2, ok := that.(MACCommand_RxParamSetupReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rx2DataRateIndex != that1.Rx2DataRateIndex {
		return false
	}
	if this.Rx1DataRateOffset != that1.Rx1DataRateOffset {
		return false
	}
	if this.Rx2Frequency != that1.Rx2Frequency {
		return false
	}
	return true
}
func (this *MACCommand_RxParamSetupAns) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_RxParamSetupAns)
	if !ok {
		that2, ok := that.(MACCommand_RxParamSetupAns)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rx2DataRateIndexAck != that1.Rx2DataRateIndexAck {
		return false
	}
	if this.Rx1DataRateOffsetAck != that1.Rx1DataRateOffsetAck {
		return false
	}
	if this.Rx2FrequencyAck != that1.Rx2FrequencyAck {
		return false
	}
	return true
}
func (this *MACCommand_DevStatusAns) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_DevStatusAns)
	if !ok {
		that2, ok := that.(MACCommand_DevStatusAns)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Battery != that1.Battery {
		return false
	}
	if this.Margin != that1.Margin {
		return false
	}
	return true
}
func (this *MACCommand_NewChannelReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_NewChannelReq)
	if !ok {
		that2, ok := that.(MACCommand_NewChannelReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ChannelIndex != that1.ChannelIndex {
		return false
	}
	if this.Frequency != that1.Frequency {
		return false
	}
	if this.MinDataRateIndex != that1.MinDataRateIndex {
		return false
	}
	if this.MaxDataRateIndex != that1.MaxDataRateIndex {
		return false
	}
	return true
}
func (this *MACCommand_NewChannelAns) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_NewChannelAns)
	if !ok {
		that2, ok := that.(MACCommand_NewChannelAns)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FrequencyAck != that1.FrequencyAck {
		return false
	}
	if this.DataRateAck != that1.DataRateAck {
		return false
	}
	return true
}
func (this *MACCommand_DLChannelReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_DLChannelReq)
	if !ok {
		that2, ok := that.(MACCommand_DLChannelReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ChannelIndex != that1.ChannelIndex {
		return false
	}
	if this.Frequency != that1.Frequency {
		return false
	}
	return true
}
func (this *MACCommand_DLChannelAns) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_DLChannelAns)
	if !ok {
		that2, ok := that.(MACCommand_DLChannelAns)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ChannelIndexAck != that1.ChannelIndexAck {
		return false
	}
	if this.FrequencyAck != that1.FrequencyAck {
		return false
	}
	return true
}
func (this *MACCommand_RxTimingSetupReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_RxTimingSetupReq)
	if !ok {
		that2, ok := that.(MACCommand_RxTimingSetupReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Delay != that1.Delay {
		return false
	}
	return true
}
func (this *MACCommand_TxParamSetupReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_TxParamSetupReq)
	if !ok {
		that2, ok := that.(MACCommand_TxParamSetupReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxEIRPIndex != that1.MaxEIRPIndex {
		return false
	}
	if this.UplinkDwellTime != that1.UplinkDwellTime {
		return false
	}
	if this.DownlinkDwellTime != that1.DownlinkDwellTime {
		return false
	}
	return true
}
func (this *MACCommand_RekeyInd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_RekeyInd)
	if !ok {
		that2, ok := that.(MACCommand_RekeyInd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MinorVersion != that1.MinorVersion {
		return false
	}
	return true
}
func (this *MACCommand_RekeyConf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_RekeyConf)
	if !ok {
		that2, ok := that.(MACCommand_RekeyConf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MinorVersion != that1.MinorVersion {
		return false
	}
	return true
}
func (this *MACCommand_ADRParamSetupReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_ADRParamSetupReq)
	if !ok {
		that2, ok := that.(MACCommand_ADRParamSetupReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ADRAckLimitExponent != that1.ADRAckLimitExponent {
		return false
	}
	if this.ADRAckDelayExponent != that1.ADRAckDelayExponent {
		return false
	}
	return true
}
func (this *MACCommand_DeviceTimeAns) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_DeviceTimeAns)
	if !ok {
		that2, ok := that.(MACCommand_DeviceTimeAns)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Time.Equal(that1.Time) {
		return false
	}
	return true
}
func (this *MACCommand_ForceRejoinReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_ForceRejoinReq)
	if !ok {
		that2, ok := that.(MACCommand_ForceRejoinReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RejoinType != that1.RejoinType {
		return false
	}
	if this.DataRateIndex != that1.DataRateIndex {
		return false
	}
	if this.MaxRetries != that1.MaxRetries {
		return false
	}
	if this.PeriodExponent != that1.PeriodExponent {
		return false
	}
	return true
}
func (this *MACCommand_RejoinParamSetupReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_RejoinParamSetupReq)
	if !ok {
		that2, ok := that.(MACCommand_RejoinParamSetupReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxCountExponent != that1.MaxCountExponent {
		return false
	}
	if this.MaxTimeExponent != that1.MaxTimeExponent {
		return false
	}
	return true
}
func (this *MACCommand_RejoinParamSetupAns) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_RejoinParamSetupAns)
	if !ok {
		that2, ok := that.(MACCommand_RejoinParamSetupAns)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxTimeExponentAck != that1.MaxTimeExponentAck {
		return false
	}
	return true
}
func (this *MACCommand_PingSlotInfoReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_PingSlotInfoReq)
	if !ok {
		that2, ok := that.(MACCommand_PingSlotInfoReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Period != that1.Period {
		return false
	}
	return true
}
func (this *MACCommand_PingSlotChannelReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_PingSlotChannelReq)
	if !ok {
		that2, ok := that.(MACCommand_PingSlotChannelReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Frequency != that1.Frequency {
		return false
	}
	if this.DataRateIndex != that1.DataRateIndex {
		return false
	}
	return true
}
func (this *MACCommand_PingSlotChannelAns) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_PingSlotChannelAns)
	if !ok {
		that2, ok := that.(MACCommand_PingSlotChannelAns)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FrequencyAck != that1.FrequencyAck {
		return false
	}
	if this.DataRateIndexAck != that1.DataRateIndexAck {
		return false
	}
	return true
}
func (this *MACCommand_BeaconTimingAns) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_BeaconTimingAns)
	if !ok {
		that2, ok := that.(MACCommand_BeaconTimingAns)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Delay != that1.Delay {
		return false
	}
	if this.ChannelIndex != that1.ChannelIndex {
		return false
	}
	return true
}
func (this *MACCommand_BeaconFreqReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_BeaconFreqReq)
	if !ok {
		that2, ok := that.(MACCommand_BeaconFreqReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Frequency != that1.Frequency {
		return false
	}
	return true
}
func (this *MACCommand_BeaconFreqAns) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_BeaconFreqAns)
	if !ok {
		that2, ok := that.(MACCommand_BeaconFreqAns)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FrequencyAck != that1.FrequencyAck {
		return false
	}
	return true
}
func (this *MACCommand_DeviceModeInd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_DeviceModeInd)
	if !ok {
		that2, ok := that.(MACCommand_DeviceModeInd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Class != that1.Class {
		return false
	}
	return true
}
func (this *MACCommand_DeviceModeConf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand_DeviceModeConf)
	if !ok {
		that2, ok := that.(MACCommand_DeviceModeConf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Class != that1.Class {
		return false
	}
	return true
}
func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.MHDR.Size()))
	n1, err := m.MHDR.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.MIC) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.MIC)))
		i += copy(dAtA[i:], m.MIC)
	}
	if m.Payload != nil {
		nn2, err := m.Payload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	return i, nil
}

func (m *Message_MACPayload) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MACPayload != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.MACPayload.Size()))
		n3, err := m.MACPayload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *Message_JoinRequestPayload) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.JoinRequestPayload != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.JoinRequestPayload.Size()))
		n4, err := m.JoinRequestPayload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *Message_JoinAcceptPayload) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.JoinAcceptPayload != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.JoinAcceptPayload.Size()))
		n5, err := m.JoinAcceptPayload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *Message_RejoinRequestPayload) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RejoinRequestPayload != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.RejoinRequestPayload.Size()))
		n6, err := m.RejoinRequestPayload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *MHDR) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MHDR) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.MType))
	}
	if m.Major != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Major))
	}
	return i, nil
}

func (m *MACPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.FHDR.Size()))
	n7, err := m.FHDR.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	if m.FPort != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.FPort))
	}
	if len(m.FRMPayload) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.FRMPayload)))
		i += copy(dAtA[i:], m.FRMPayload)
	}
	if m.DecodedPayload != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.DecodedPayload.Size()))
		n8, err := m.DecodedPayload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *FHDR) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FHDR) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.DevAddr.Size()))
	n9, err := m.DevAddr.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	dAtA[i] = 0x12
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.FCtrl.Size()))
	n10, err := m.FCtrl.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	if m.FCnt != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.FCnt))
	}
	if len(m.FOpts) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.FOpts)))
		i += copy(dAtA[i:], m.FOpts)
	}
	return i, nil
}

func (m *FCtrl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FCtrl) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ADR {
		dAtA[i] = 0x8
		i++
		if m.ADR {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ADRAckReq {
		dAtA[i] = 0x10
		i++
		if m.ADRAckReq {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Ack {
		dAtA[i] = 0x18
		i++
		if m.Ack {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.FPending {
		dAtA[i] = 0x20
		i++
		if m.FPending {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ClassB {
		dAtA[i] = 0x28
		i++
		if m.ClassB {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *JoinRequestPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinRequestPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.JoinEUI.Size()))
	n11, err := m.JoinEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	dAtA[i] = 0x12
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.DevEUI.Size()))
	n12, err := m.DevEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	dAtA[i] = 0x1a
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.DevNonce.Size()))
	n13, err := m.DevNonce.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	return i, nil
}

func (m *RejoinRequestPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RejoinRequestPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RejoinType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.RejoinType))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.NetID.Size()))
	n14, err := m.NetID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	dAtA[i] = 0x1a
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.JoinEUI.Size()))
	n15, err := m.JoinEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	dAtA[i] = 0x22
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.DevEUI.Size()))
	n16, err := m.DevEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	if m.RejoinCnt != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.RejoinCnt))
	}
	return i, nil
}

func (m *JoinAcceptPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinAcceptPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Encrypted) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.Encrypted)))
		i += copy(dAtA[i:], m.Encrypted)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.JoinNonce.Size()))
	n17, err := m.JoinNonce.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n17
	dAtA[i] = 0x1a
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.NetID.Size()))
	n18, err := m.NetID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n18
	dAtA[i] = 0x22
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.DevAddr.Size()))
	n19, err := m.DevAddr.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n19
	dAtA[i] = 0x2a
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.DLSettings.Size()))
	n20, err := m.DLSettings.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n20
	if m.RxDelay != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.RxDelay))
	}
	if m.CFList != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.CFList.Size()))
		n21, err := m.CFList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}

func (m *DLSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DLSettings) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rx1DROffset != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Rx1DROffset))
	}
	if m.Rx2DR != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Rx2DR))
	}
	if m.OptNeg {
		dAtA[i] = 0x18
		i++
		if m.OptNeg {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CFList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CFList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Type))
	}
	if len(m.Freq) > 0 {
		dAtA23 := make([]byte, len(m.Freq)*10)
		var j22 int
		for _, num := range m.Freq {
			for num >= 1<<7 {
				dAtA23[j22] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j22++
			}
			dAtA23[j22] = uint8(num)
			j22++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(j22))
		i += copy(dAtA[i:], dAtA23[:j22])
	}
	if len(m.ChMasks) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.ChMasks)))
		for _, b := range m.ChMasks {
			if b {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	return i, nil
}

func (m *LoRaDataRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoRaDataRate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Bandwidth != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Bandwidth))
	}
	if m.SpreadingFactor != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.SpreadingFactor))
	}
	return i, nil
}

func (m *FSKDataRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FSKDataRate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BitRate != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.BitRate))
	}
	return i, nil
}

func (m *DataRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataRate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Modulation != nil {
		nn24, err := m.Modulation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn24
	}
	return i, nil
}

func (m *DataRate_LoRa) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LoRa != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.LoRa.Size()))
		n25, err := m.LoRa.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}
func (m *DataRate_FSK) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.FSK != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.FSK.Size()))
		n26, err := m.FSK.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}
func (m *TxSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxSettings) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.DataRate.Size()))
	n27, err := m.DataRate.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n27
	if m.DataRateIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.DataRateIndex))
	}
	if len(m.CodingRate) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.CodingRate)))
		i += copy(dAtA[i:], m.CodingRate)
	}
	if m.Frequency != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintLorawan(dAtA, i, m.Frequency)
	}
	if m.TxPower != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.TxPower))
	}
	if m.InvertPolarization {
		dAtA[i] = 0x30
		i++
		if m.InvertPolarization {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.GatewayChannelIndex != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.GatewayChannelIndex))
	}
	if m.DeviceChannelIndex != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.DeviceChannelIndex))
	}
	if m.EnableCRC {
		dAtA[i] = 0x48
		i++
		if m.EnableCRC {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Timestamp))
	}
	if m.Time != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.Time)))
		n28, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.Time, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}

func (m *GatewayAntennaIdentifiers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayAntennaIdentifiers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.GatewayIdentifiers.Size()))
	n29, err := m.GatewayIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n29
	if m.AntennaIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.AntennaIndex))
	}
	return i, nil
}

func (m *UplinkToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UplinkToken) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.GatewayAntennaIdentifiers.Size()))
	n30, err := m.GatewayAntennaIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n30
	if m.Timestamp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Timestamp))
	}
	return i, nil
}

func (m *DownlinkPath) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownlinkPath) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Path != nil {
		nn31, err := m.Path.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn31
	}
	return i, nil
}

func (m *DownlinkPath_UplinkToken) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UplinkToken != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.UplinkToken)))
		i += copy(dAtA[i:], m.UplinkToken)
	}
	return i, nil
}
func (m *DownlinkPath_Fixed) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Fixed != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Fixed.Size()))
		n32, err := m.Fixed.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}
func (m *TxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Class != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Class))
	}
	if len(m.DownlinkPaths) > 0 {
		for _, msg := range m.DownlinkPaths {
			dAtA[i] = 0x12
			i++
			i = encodeVarintLorawan(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Rx1Delay != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Rx1Delay))
	}
	if m.Rx1DataRateIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Rx1DataRateIndex))
	}
	if m.Rx1Frequency != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintLorawan(dAtA, i, m.Rx1Frequency)
	}
	if m.Rx2DataRateIndex != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Rx2DataRateIndex))
	}
	if m.Rx2Frequency != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintLorawan(dAtA, i, m.Rx2Frequency)
	}
	if m.Priority != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Priority))
	}
	if m.AbsoluteTime != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.AbsoluteTime)))
		n33, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.AbsoluteTime, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	if m.Advanced != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Advanced.Size()))
		n34, err := m.Advanced.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	return i, nil
}

func (m *MACCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.CID))
	}
	if m.Payload != nil {
		nn35, err := m.Payload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn35
	}
	return i, nil
}

func (m *MACCommand_RawPayload) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RawPayload != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.RawPayload)))
		i += copy(dAtA[i:], m.RawPayload)
	}
	return i, nil
}
func (m *MACCommand_ResetInd_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ResetInd != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.ResetInd.Size()))
		n36, err := m.ResetInd.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	return i, nil
}
func (m *MACCommand_ResetConf_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ResetConf != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.ResetConf.Size()))
		n37, err := m.ResetConf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	return i, nil
}
func (m *MACCommand_LinkCheckAns_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LinkCheckAns != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.LinkCheckAns.Size()))
		n38, err := m.LinkCheckAns.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	return i, nil
}
func (m *MACCommand_LinkADRReq_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LinkADRReq != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.LinkADRReq.Size()))
		n39, err := m.LinkADRReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	return i, nil
}
func (m *MACCommand_LinkADRAns_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LinkADRAns != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.LinkADRAns.Size()))
		n40, err := m.LinkADRAns.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	return i, nil
}
func (m *MACCommand_DutyCycleReq_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DutyCycleReq != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.DutyCycleReq.Size()))
		n41, err := m.DutyCycleReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	return i, nil
}
func (m *MACCommand_RxParamSetupReq_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RxParamSetupReq != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.RxParamSetupReq.Size()))
		n42, err := m.RxParamSetupReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	return i, nil
}
func (m *MACCommand_RxParamSetupAns_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RxParamSetupAns != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.RxParamSetupAns.Size()))
		n43, err := m.RxParamSetupAns.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	return i, nil
}
func (m *MACCommand_DevStatusAns_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DevStatusAns != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.DevStatusAns.Size()))
		n44, err := m.DevStatusAns.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	return i, nil
}
func (m *MACCommand_NewChannelReq_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NewChannelReq != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.NewChannelReq.Size()))
		n45, err := m.NewChannelReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	return i, nil
}
func (m *MACCommand_NewChannelAns_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NewChannelAns != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.NewChannelAns.Size()))
		n46, err := m.NewChannelAns.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	return i, nil
}
func (m *MACCommand_DLChannelReq_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DLChannelReq != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.DLChannelReq.Size()))
		n47, err := m.DLChannelReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	return i, nil
}
func (m *MACCommand_DLChannelAns_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DLChannelAns != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.DLChannelAns.Size()))
		n48, err := m.DLChannelAns.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	return i, nil
}
func (m *MACCommand_RxTimingSetupReq_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RxTimingSetupReq != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.RxTimingSetupReq.Size()))
		n49, err := m.RxTimingSetupReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n49
	}
	return i, nil
}
func (m *MACCommand_TxParamSetupReq_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TxParamSetupReq != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.TxParamSetupReq.Size()))
		n50, err := m.TxParamSetupReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n50
	}
	return i, nil
}
func (m *MACCommand_RekeyInd_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RekeyInd != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.RekeyInd.Size()))
		n51, err := m.RekeyInd.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n51
	}
	return i, nil
}
func (m *MACCommand_RekeyConf_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RekeyConf != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.RekeyConf.Size()))
		n52, err := m.RekeyConf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n52
	}
	return i, nil
}
func (m *MACCommand_ADRParamSetupReq_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ADRParamSetupReq != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.ADRParamSetupReq.Size()))
		n53, err := m.ADRParamSetupReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n53
	}
	return i, nil
}
func (m *MACCommand_DeviceTimeAns_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DeviceTimeAns != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.DeviceTimeAns.Size()))
		n54, err := m.DeviceTimeAns.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n54
	}
	return i, nil
}
func (m *MACCommand_ForceRejoinReq_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ForceRejoinReq != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.ForceRejoinReq.Size()))
		n55, err := m.ForceRejoinReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n55
	}
	return i, nil
}
func (m *MACCommand_RejoinParamSetupReq_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RejoinParamSetupReq != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.RejoinParamSetupReq.Size()))
		n56, err := m.RejoinParamSetupReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n56
	}
	return i, nil
}
func (m *MACCommand_RejoinParamSetupAns_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RejoinParamSetupAns != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.RejoinParamSetupAns.Size()))
		n57, err := m.RejoinParamSetupAns.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n57
	}
	return i, nil
}
func (m *MACCommand_PingSlotInfoReq_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PingSlotInfoReq != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.PingSlotInfoReq.Size()))
		n58, err := m.PingSlotInfoReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n58
	}
	return i, nil
}
func (m *MACCommand_PingSlotChannelReq_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PingSlotChannelReq != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.PingSlotChannelReq.Size()))
		n59, err := m.PingSlotChannelReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n59
	}
	return i, nil
}
func (m *MACCommand_PingSlotChannelAns_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PingSlotChannelAns != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.PingSlotChannelAns.Size()))
		n60, err := m.PingSlotChannelAns.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n60
	}
	return i, nil
}
func (m *MACCommand_BeaconTimingAns_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BeaconTimingAns != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.BeaconTimingAns.Size()))
		n61, err := m.BeaconTimingAns.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n61
	}
	return i, nil
}
func (m *MACCommand_BeaconFreqReq_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BeaconFreqReq != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.BeaconFreqReq.Size()))
		n62, err := m.BeaconFreqReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n62
	}
	return i, nil
}
func (m *MACCommand_BeaconFreqAns_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BeaconFreqAns != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.BeaconFreqAns.Size()))
		n63, err := m.BeaconFreqAns.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n63
	}
	return i, nil
}
func (m *MACCommand_DeviceModeInd_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DeviceModeInd != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.DeviceModeInd.Size()))
		n64, err := m.DeviceModeInd.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n64
	}
	return i, nil
}
func (m *MACCommand_DeviceModeConf_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DeviceModeConf != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.DeviceModeConf.Size()))
		n65, err := m.DeviceModeConf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n65
	}
	return i, nil
}
func (m *MACCommand_ResetInd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_ResetInd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MinorVersion != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.MinorVersion))
	}
	return i, nil
}

func (m *MACCommand_ResetConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_ResetConf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MinorVersion != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.MinorVersion))
	}
	return i, nil
}

func (m *MACCommand_LinkCheckAns) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_LinkCheckAns) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Margin != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Margin))
	}
	if m.GatewayCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.GatewayCount))
	}
	return i, nil
}

func (m *MACCommand_LinkADRReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_LinkADRReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DataRateIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.DataRateIndex))
	}
	if m.TxPowerIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.TxPowerIndex))
	}
	if len(m.ChannelMask) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.ChannelMask)))
		for _, b := range m.ChannelMask {
			if b {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	if m.ChannelMaskControl != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.ChannelMaskControl))
	}
	if m.NbTrans != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.NbTrans))
	}
	return i, nil
}

func (m *MACCommand_LinkADRAns) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_LinkADRAns) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelMaskAck {
		dAtA[i] = 0x8
		i++
		if m.ChannelMaskAck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DataRateIndexAck {
		dAtA[i] = 0x10
		i++
		if m.DataRateIndexAck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TxPowerIndexAck {
		dAtA[i] = 0x18
		i++
		if m.TxPowerIndexAck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *MACCommand_DutyCycleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_DutyCycleReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxDutyCycle != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.MaxDutyCycle))
	}
	return i, nil
}

func (m *MACCommand_RxParamSetupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_RxParamSetupReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rx2DataRateIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Rx2DataRateIndex))
	}
	if m.Rx1DataRateOffset != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Rx1DataRateOffset))
	}
	if m.Rx2Frequency != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLorawan(dAtA, i, m.Rx2Frequency)
	}
	return i, nil
}

func (m *MACCommand_RxParamSetupAns) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_RxParamSetupAns) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rx2DataRateIndexAck {
		dAtA[i] = 0x8
		i++
		if m.Rx2DataRateIndexAck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Rx1DataRateOffsetAck {
		dAtA[i] = 0x10
		i++
		if m.Rx1DataRateOffsetAck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Rx2FrequencyAck {
		dAtA[i] = 0x18
		i++
		if m.Rx2FrequencyAck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *MACCommand_DevStatusAns) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_DevStatusAns) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Battery != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Battery))
	}
	if m.Margin != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Margin))
	}
	return i, nil
}

func (m *MACCommand_NewChannelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_NewChannelReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.ChannelIndex))
	}
	if m.Frequency != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, m.Frequency)
	}
	if m.MinDataRateIndex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.MinDataRateIndex))
	}
	if m.MaxDataRateIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.MaxDataRateIndex))
	}
	return i, nil
}

func (m *MACCommand_NewChannelAns) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_NewChannelAns) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FrequencyAck {
		dAtA[i] = 0x8
		i++
		if m.FrequencyAck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DataRateAck {
		dAtA[i] = 0x10
		i++
		if m.DataRateAck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *MACCommand_DLChannelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_DLChannelReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.ChannelIndex))
	}
	if m.Frequency != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, m.Frequency)
	}
	return i, nil
}

func (m *MACCommand_DLChannelAns) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_DLChannelAns) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelIndexAck {
		dAtA[i] = 0x8
		i++
		if m.ChannelIndexAck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.FrequencyAck {
		dAtA[i] = 0x10
		i++
		if m.FrequencyAck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *MACCommand_RxTimingSetupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_RxTimingSetupReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Delay != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Delay))
	}
	return i, nil
}

func (m *MACCommand_TxParamSetupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_TxParamSetupReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxEIRPIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.MaxEIRPIndex))
	}
	if m.UplinkDwellTime {
		dAtA[i] = 0x10
		i++
		if m.UplinkDwellTime {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DownlinkDwellTime {
		dAtA[i] = 0x18
		i++
		if m.DownlinkDwellTime {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *MACCommand_RekeyInd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_RekeyInd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MinorVersion != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.MinorVersion))
	}
	return i, nil
}

func (m *MACCommand_RekeyConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_RekeyConf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MinorVersion != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.MinorVersion))
	}
	return i, nil
}

func (m *MACCommand_ADRParamSetupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_ADRParamSetupReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ADRAckLimitExponent != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.ADRAckLimitExponent))
	}
	if m.ADRAckDelayExponent != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.ADRAckDelayExponent))
	}
	return i, nil
}

func (m *MACCommand_DeviceTimeAns) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_DeviceTimeAns) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x3a
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Time)))
	n66, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Time, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n66
	return i, nil
}

func (m *MACCommand_ForceRejoinReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_ForceRejoinReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RejoinType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.RejoinType))
	}
	if m.DataRateIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.DataRateIndex))
	}
	if m.MaxRetries != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.MaxRetries))
	}
	if m.PeriodExponent != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.PeriodExponent))
	}
	return i, nil
}

func (m *MACCommand_RejoinParamSetupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_RejoinParamSetupReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxCountExponent != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.MaxCountExponent))
	}
	if m.MaxTimeExponent != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.MaxTimeExponent))
	}
	return i, nil
}

func (m *MACCommand_RejoinParamSetupAns) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_RejoinParamSetupAns) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxTimeExponentAck {
		dAtA[i] = 0x8
		i++
		if m.MaxTimeExponentAck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *MACCommand_PingSlotInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_PingSlotInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Period != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Period))
	}
	return i, nil
}

func (m *MACCommand_PingSlotChannelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_PingSlotChannelReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Frequency != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, m.Frequency)
	}
	if m.DataRateIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.DataRateIndex))
	}
	return i, nil
}

func (m *MACCommand_PingSlotChannelAns) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_PingSlotChannelAns) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FrequencyAck {
		dAtA[i] = 0x8
		i++
		if m.FrequencyAck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DataRateIndexAck {
		dAtA[i] = 0x10
		i++
		if m.DataRateIndexAck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *MACCommand_BeaconTimingAns) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_BeaconTimingAns) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Delay != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Delay))
	}
	if m.ChannelIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.ChannelIndex))
	}
	return i, nil
}

func (m *MACCommand_BeaconFreqReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_BeaconFreqReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Frequency != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, m.Frequency)
	}
	return i, nil
}

func (m *MACCommand_BeaconFreqAns) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_BeaconFreqAns) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FrequencyAck {
		dAtA[i] = 0x8
		i++
		if m.FrequencyAck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *MACCommand_DeviceModeInd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_DeviceModeInd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Class != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Class))
	}
	return i, nil
}

func (m *MACCommand_DeviceModeConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_DeviceModeConf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Class != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Class))
	}
	return i, nil
}

func encodeVarintLorawan(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedMHDR(r randyLorawan, easy bool) *MHDR {
	this := &MHDR{}
	this.MType = MType([]int32{0, 1, 2, 3, 4, 5, 6, 7}[r.Intn(8)])
	this.Major = Major([]int32{0}[r.Intn(1)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFCtrl(r randyLorawan, easy bool) *FCtrl {
	this := &FCtrl{}
	this.ADR = bool(r.Intn(2) == 0)
	this.ADRAckReq = bool(r.Intn(2) == 0)
	this.Ack = bool(r.Intn(2) == 0)
	this.FPending = bool(r.Intn(2) == 0)
	this.ClassB = bool(r.Intn(2) == 0)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLoRaDataRate(r randyLorawan, easy bool) *LoRaDataRate {
	this := &LoRaDataRate{}
	this.Bandwidth = r.Uint32()
	this.SpreadingFactor = r.Uint32()
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFSKDataRate(r randyLorawan, easy bool) *FSKDataRate {
	this := &FSKDataRate{}
	this.BitRate = r.Uint32()
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDataRate(r randyLorawan, easy bool) *DataRate {
	this := &DataRate{}
	oneofNumber_Modulation := []int32{1, 2}[r.Intn(2)]
	switch oneofNumber_Modulation {
	case 1:
		this.Modulation = NewPopulatedDataRate_LoRa(r, easy)
	case 2:
		this.Modulation = NewPopulatedDataRate_FSK(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDataRate_LoRa(r randyLorawan, easy bool) *DataRate_LoRa {
	this := &DataRate_LoRa{}
	this.LoRa = NewPopulatedLoRaDataRate(r, easy)
	return this
}
func NewPopulatedDataRate_FSK(r randyLorawan, easy bool) *DataRate_FSK {
	this := &DataRate_FSK{}
	this.FSK = NewPopulatedFSKDataRate(r, easy)
	return this
}
func NewPopulatedGatewayAntennaIdentifiers(r randyLorawan, easy bool) *GatewayAntennaIdentifiers {
	this := &GatewayAntennaIdentifiers{}
	v1 := NewPopulatedGatewayIdentifiers(r, easy)
	this.GatewayIdentifiers = *v1
	this.AntennaIndex = r.Uint32()
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUplinkToken(r randyLorawan, easy bool) *UplinkToken {
	this := &UplinkToken{}
	v2 := NewPopulatedGatewayAntennaIdentifiers(r, easy)
	this.GatewayAntennaIdentifiers = *v2
	this.Timestamp = r.Uint32()
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDownlinkPath(r randyLorawan, easy bool) *DownlinkPath {
	this := &DownlinkPath{}
	oneofNumber_Path := []int32{1, 2}[r.Intn(2)]
	switch oneofNumber_Path {
	case 1:
		this.Path = NewPopulatedDownlinkPath_UplinkToken(r, easy)
	case 2:
		this.Path = NewPopulatedDownlinkPath_Fixed(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDownlinkPath_UplinkToken(r randyLorawan, easy bool) *DownlinkPath_UplinkToken {
	this := &DownlinkPath_UplinkToken{}
	v3 := r.Intn(100)
	this.UplinkToken = make([]byte, v3)
	for i := 0; i < v3; i++ {
		this.UplinkToken[i] = byte(r.Intn(256))
	}
	return this
}
func NewPopulatedDownlinkPath_Fixed(r randyLorawan, easy bool) *DownlinkPath_Fixed {
	this := &DownlinkPath_Fixed{}
	this.Fixed = NewPopulatedGatewayAntennaIdentifiers(r, easy)
	return this
}
func NewPopulatedMACCommand(r randyLorawan, easy bool) *MACCommand {
	this := &MACCommand{}
	this.CID = MACCommandIdentifier([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 32}[r.Intn(21)])
	oneofNumber_Payload := []int32{2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32}[r.Intn(31)]
	switch oneofNumber_Payload {
	case 2:
		this.Payload = NewPopulatedMACCommand_RawPayload(r, easy)
	case 3:
		this.Payload = NewPopulatedMACCommand_ResetInd_(r, easy)
	case 4:
		this.Payload = NewPopulatedMACCommand_ResetConf_(r, easy)
	case 5:
		this.Payload = NewPopulatedMACCommand_LinkCheckAns_(r, easy)
	case 6:
		this.Payload = NewPopulatedMACCommand_LinkADRReq_(r, easy)
	case 7:
		this.Payload = NewPopulatedMACCommand_LinkADRAns_(r, easy)
	case 8:
		this.Payload = NewPopulatedMACCommand_DutyCycleReq_(r, easy)
	case 9:
		this.Payload = NewPopulatedMACCommand_RxParamSetupReq_(r, easy)
	case 10:
		this.Payload = NewPopulatedMACCommand_RxParamSetupAns_(r, easy)
	case 11:
		this.Payload = NewPopulatedMACCommand_DevStatusAns_(r, easy)
	case 12:
		this.Payload = NewPopulatedMACCommand_NewChannelReq_(r, easy)
	case 13:
		this.Payload = NewPopulatedMACCommand_NewChannelAns_(r, easy)
	case 14:
		this.Payload = NewPopulatedMACCommand_DLChannelReq_(r, easy)
	case 15:
		this.Payload = NewPopulatedMACCommand_DLChannelAns_(r, easy)
	case 16:
		this.Payload = NewPopulatedMACCommand_RxTimingSetupReq_(r, easy)
	case 17:
		this.Payload = NewPopulatedMACCommand_TxParamSetupReq_(r, easy)
	case 18:
		this.Payload = NewPopulatedMACCommand_RekeyInd_(r, easy)
	case 19:
		this.Payload = NewPopulatedMACCommand_RekeyConf_(r, easy)
	case 20:
		this.Payload = NewPopulatedMACCommand_ADRParamSetupReq_(r, easy)
	case 21:
		this.Payload = NewPopulatedMACCommand_DeviceTimeAns_(r, easy)
	case 22:
		this.Payload = NewPopulatedMACCommand_ForceRejoinReq_(r, easy)
	case 23:
		this.Payload = NewPopulatedMACCommand_RejoinParamSetupReq_(r, easy)
	case 24:
		this.Payload = NewPopulatedMACCommand_RejoinParamSetupAns_(r, easy)
	case 25:
		this.Payload = NewPopulatedMACCommand_PingSlotInfoReq_(r, easy)
	case 26:
		this.Payload = NewPopulatedMACCommand_PingSlotChannelReq_(r, easy)
	case 27:
		this.Payload = NewPopulatedMACCommand_PingSlotChannelAns_(r, easy)
	case 28:
		this.Payload = NewPopulatedMACCommand_BeaconTimingAns_(r, easy)
	case 29:
		this.Payload = NewPopulatedMACCommand_BeaconFreqReq_(r, easy)
	case 30:
		this.Payload = NewPopulatedMACCommand_BeaconFreqAns_(r, easy)
	case 31:
		this.Payload = NewPopulatedMACCommand_DeviceModeInd_(r, easy)
	case 32:
		this.Payload = NewPopulatedMACCommand_DeviceModeConf_(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_RawPayload(r randyLorawan, easy bool) *MACCommand_RawPayload {
	this := &MACCommand_RawPayload{}
	v4 := r.Intn(100)
	this.RawPayload = make([]byte, v4)
	for i := 0; i < v4; i++ {
		this.RawPayload[i] = byte(r.Intn(256))
	}
	return this
}
func NewPopulatedMACCommand_ResetInd_(r randyLorawan, easy bool) *MACCommand_ResetInd_ {
	this := &MACCommand_ResetInd_{}
	this.ResetInd = NewPopulatedMACCommand_ResetInd(r, easy)
	return this
}
func NewPopulatedMACCommand_ResetConf_(r randyLorawan, easy bool) *MACCommand_ResetConf_ {
	this := &MACCommand_ResetConf_{}
	this.ResetConf = NewPopulatedMACCommand_ResetConf(r, easy)
	return this
}
func NewPopulatedMACCommand_LinkCheckAns_(r randyLorawan, easy bool) *MACCommand_LinkCheckAns_ {
	this := &MACCommand_LinkCheckAns_{}
	this.LinkCheckAns = NewPopulatedMACCommand_LinkCheckAns(r, easy)
	return this
}
func NewPopulatedMACCommand_LinkADRReq_(r randyLorawan, easy bool) *MACCommand_LinkADRReq_ {
	this := &MACCommand_LinkADRReq_{}
	this.LinkADRReq = NewPopulatedMACCommand_LinkADRReq(r, easy)
	return this
}
func NewPopulatedMACCommand_LinkADRAns_(r randyLorawan, easy bool) *MACCommand_LinkADRAns_ {
	this := &MACCommand_LinkADRAns_{}
	this.LinkADRAns = NewPopulatedMACCommand_LinkADRAns(r, easy)
	return this
}
func NewPopulatedMACCommand_DutyCycleReq_(r randyLorawan, easy bool) *MACCommand_DutyCycleReq_ {
	this := &MACCommand_DutyCycleReq_{}
	this.DutyCycleReq = NewPopulatedMACCommand_DutyCycleReq(r, easy)
	return this
}
func NewPopulatedMACCommand_RxParamSetupReq_(r randyLorawan, easy bool) *MACCommand_RxParamSetupReq_ {
	this := &MACCommand_RxParamSetupReq_{}
	this.RxParamSetupReq = NewPopulatedMACCommand_RxParamSetupReq(r, easy)
	return this
}
func NewPopulatedMACCommand_RxParamSetupAns_(r randyLorawan, easy bool) *MACCommand_RxParamSetupAns_ {
	this := &MACCommand_RxParamSetupAns_{}
	this.RxParamSetupAns = NewPopulatedMACCommand_RxParamSetupAns(r, easy)
	return this
}
func NewPopulatedMACCommand_DevStatusAns_(r randyLorawan, easy bool) *MACCommand_DevStatusAns_ {
	this := &MACCommand_DevStatusAns_{}
	this.DevStatusAns = NewPopulatedMACCommand_DevStatusAns(r, easy)
	return this
}
func NewPopulatedMACCommand_NewChannelReq_(r randyLorawan, easy bool) *MACCommand_NewChannelReq_ {
	this := &MACCommand_NewChannelReq_{}
	this.NewChannelReq = NewPopulatedMACCommand_NewChannelReq(r, easy)
	return this
}
func NewPopulatedMACCommand_NewChannelAns_(r randyLorawan, easy bool) *MACCommand_NewChannelAns_ {
	this := &MACCommand_NewChannelAns_{}
	this.NewChannelAns = NewPopulatedMACCommand_NewChannelAns(r, easy)
	return this
}
func NewPopulatedMACCommand_DLChannelReq_(r randyLorawan, easy bool) *MACCommand_DLChannelReq_ {
	this := &MACCommand_DLChannelReq_{}
	this.DLChannelReq = NewPopulatedMACCommand_DLChannelReq(r, easy)
	return this
}
func NewPopulatedMACCommand_DLChannelAns_(r randyLorawan, easy bool) *MACCommand_DLChannelAns_ {
	this := &MACCommand_DLChannelAns_{}
	this.DLChannelAns = NewPopulatedMACCommand_DLChannelAns(r, easy)
	return this
}
func NewPopulatedMACCommand_RxTimingSetupReq_(r randyLorawan, easy bool) *MACCommand_RxTimingSetupReq_ {
	this := &MACCommand_RxTimingSetupReq_{}
	this.RxTimingSetupReq = NewPopulatedMACCommand_RxTimingSetupReq(r, easy)
	return this
}
func NewPopulatedMACCommand_TxParamSetupReq_(r randyLorawan, easy bool) *MACCommand_TxParamSetupReq_ {
	this := &MACCommand_TxParamSetupReq_{}
	this.TxParamSetupReq = NewPopulatedMACCommand_TxParamSetupReq(r, easy)
	return this
}
func NewPopulatedMACCommand_RekeyInd_(r randyLorawan, easy bool) *MACCommand_RekeyInd_ {
	this := &MACCommand_RekeyInd_{}
	this.RekeyInd = NewPopulatedMACCommand_RekeyInd(r, easy)
	return this
}
func NewPopulatedMACCommand_RekeyConf_(r randyLorawan, easy bool) *MACCommand_RekeyConf_ {
	this := &MACCommand_RekeyConf_{}
	this.RekeyConf = NewPopulatedMACCommand_RekeyConf(r, easy)
	return this
}
func NewPopulatedMACCommand_ADRParamSetupReq_(r randyLorawan, easy bool) *MACCommand_ADRParamSetupReq_ {
	this := &MACCommand_ADRParamSetupReq_{}
	this.ADRParamSetupReq = NewPopulatedMACCommand_ADRParamSetupReq(r, easy)
	return this
}
func NewPopulatedMACCommand_DeviceTimeAns_(r randyLorawan, easy bool) *MACCommand_DeviceTimeAns_ {
	this := &MACCommand_DeviceTimeAns_{}
	this.DeviceTimeAns = NewPopulatedMACCommand_DeviceTimeAns(r, easy)
	return this
}
func NewPopulatedMACCommand_ForceRejoinReq_(r randyLorawan, easy bool) *MACCommand_ForceRejoinReq_ {
	this := &MACCommand_ForceRejoinReq_{}
	this.ForceRejoinReq = NewPopulatedMACCommand_ForceRejoinReq(r, easy)
	return this
}
func NewPopulatedMACCommand_RejoinParamSetupReq_(r randyLorawan, easy bool) *MACCommand_RejoinParamSetupReq_ {
	this := &MACCommand_RejoinParamSetupReq_{}
	this.RejoinParamSetupReq = NewPopulatedMACCommand_RejoinParamSetupReq(r, easy)
	return this
}
func NewPopulatedMACCommand_RejoinParamSetupAns_(r randyLorawan, easy bool) *MACCommand_RejoinParamSetupAns_ {
	this := &MACCommand_RejoinParamSetupAns_{}
	this.RejoinParamSetupAns = NewPopulatedMACCommand_RejoinParamSetupAns(r, easy)
	return this
}
func NewPopulatedMACCommand_PingSlotInfoReq_(r randyLorawan, easy bool) *MACCommand_PingSlotInfoReq_ {
	this := &MACCommand_PingSlotInfoReq_{}
	this.PingSlotInfoReq = NewPopulatedMACCommand_PingSlotInfoReq(r, easy)
	return this
}
func NewPopulatedMACCommand_PingSlotChannelReq_(r randyLorawan, easy bool) *MACCommand_PingSlotChannelReq_ {
	this := &MACCommand_PingSlotChannelReq_{}
	this.PingSlotChannelReq = NewPopulatedMACCommand_PingSlotChannelReq(r, easy)
	return this
}
func NewPopulatedMACCommand_PingSlotChannelAns_(r randyLorawan, easy bool) *MACCommand_PingSlotChannelAns_ {
	this := &MACCommand_PingSlotChannelAns_{}
	this.PingSlotChannelAns = NewPopulatedMACCommand_PingSlotChannelAns(r, easy)
	return this
}
func NewPopulatedMACCommand_BeaconTimingAns_(r randyLorawan, easy bool) *MACCommand_BeaconTimingAns_ {
	this := &MACCommand_BeaconTimingAns_{}
	this.BeaconTimingAns = NewPopulatedMACCommand_BeaconTimingAns(r, easy)
	return this
}
func NewPopulatedMACCommand_BeaconFreqReq_(r randyLorawan, easy bool) *MACCommand_BeaconFreqReq_ {
	this := &MACCommand_BeaconFreqReq_{}
	this.BeaconFreqReq = NewPopulatedMACCommand_BeaconFreqReq(r, easy)
	return this
}
func NewPopulatedMACCommand_BeaconFreqAns_(r randyLorawan, easy bool) *MACCommand_BeaconFreqAns_ {
	this := &MACCommand_BeaconFreqAns_{}
	this.BeaconFreqAns = NewPopulatedMACCommand_BeaconFreqAns(r, easy)
	return this
}
func NewPopulatedMACCommand_DeviceModeInd_(r randyLorawan, easy bool) *MACCommand_DeviceModeInd_ {
	this := &MACCommand_DeviceModeInd_{}
	this.DeviceModeInd = NewPopulatedMACCommand_DeviceModeInd(r, easy)
	return this
}
func NewPopulatedMACCommand_DeviceModeConf_(r randyLorawan, easy bool) *MACCommand_DeviceModeConf_ {
	this := &MACCommand_DeviceModeConf_{}
	this.DeviceModeConf = NewPopulatedMACCommand_DeviceModeConf(r, easy)
	return this
}
func NewPopulatedMACCommand_ResetInd(r randyLorawan, easy bool) *MACCommand_ResetInd {
	this := &MACCommand_ResetInd{}
	this.MinorVersion = Minor([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}[r.Intn(16)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_ResetConf(r randyLorawan, easy bool) *MACCommand_ResetConf {
	this := &MACCommand_ResetConf{}
	this.MinorVersion = Minor([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}[r.Intn(16)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_LinkCheckAns(r randyLorawan, easy bool) *MACCommand_LinkCheckAns {
	this := &MACCommand_LinkCheckAns{}
	this.Margin = r.Uint32()
	this.GatewayCount = r.Uint32()
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_LinkADRReq(r randyLorawan, easy bool) *MACCommand_LinkADRReq {
	this := &MACCommand_LinkADRReq{}
	this.DataRateIndex = DataRateIndex([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}[r.Intn(16)])
	this.TxPowerIndex = r.Uint32()
	v5 := r.Intn(10)
	this.ChannelMask = make([]bool, v5)
	for i := 0; i < v5; i++ {
		this.ChannelMask[i] = bool(r.Intn(2) == 0)
	}
	this.ChannelMaskControl = r.Uint32()
	this.NbTrans = r.Uint32()
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_LinkADRAns(r randyLorawan, easy bool) *MACCommand_LinkADRAns {
	this := &MACCommand_LinkADRAns{}
	this.ChannelMaskAck = bool(r.Intn(2) == 0)
	this.DataRateIndexAck = bool(r.Intn(2) == 0)
	this.TxPowerIndexAck = bool(r.Intn(2) == 0)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_DutyCycleReq(r randyLorawan, easy bool) *MACCommand_DutyCycleReq {
	this := &MACCommand_DutyCycleReq{}
	this.MaxDutyCycle = AggregatedDutyCycle([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}[r.Intn(16)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_RxParamSetupReq(r randyLorawan, easy bool) *MACCommand_RxParamSetupReq {
	this := &MACCommand_RxParamSetupReq{}
	this.Rx2DataRateIndex = DataRateIndex([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}[r.Intn(16)])
	this.Rx1DataRateOffset = r.Uint32()
	this.Rx2Frequency = uint64(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_RxParamSetupAns(r randyLorawan, easy bool) *MACCommand_RxParamSetupAns {
	this := &MACCommand_RxParamSetupAns{}
	this.Rx2DataRateIndexAck = bool(r.Intn(2) == 0)
	this.Rx1DataRateOffsetAck = bool(r.Intn(2) == 0)
	this.Rx2FrequencyAck = bool(r.Intn(2) == 0)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_DevStatusAns(r randyLorawan, easy bool) *MACCommand_DevStatusAns {
	this := &MACCommand_DevStatusAns{}
	this.Battery = r.Uint32()
	this.Margin = r.Int31()
	if r.Intn(2) == 0 {
		this.Margin *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_NewChannelReq(r randyLorawan, easy bool) *MACCommand_NewChannelReq {
	this := &MACCommand_NewChannelReq{}
	this.ChannelIndex = r.Uint32()
	this.Frequency = uint64(r.Uint32())
	this.MinDataRateIndex = DataRateIndex([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}[r.Intn(16)])
	this.MaxDataRateIndex = DataRateIndex([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}[r.Intn(16)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_NewChannelAns(r randyLorawan, easy bool) *MACCommand_NewChannelAns {
	this := &MACCommand_NewChannelAns{}
	this.FrequencyAck = bool(r.Intn(2) == 0)
	this.DataRateAck = bool(r.Intn(2) == 0)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_DLChannelReq(r randyLorawan, easy bool) *MACCommand_DLChannelReq {
	this := &MACCommand_DLChannelReq{}
	this.ChannelIndex = r.Uint32()
	this.Frequency = uint64(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_DLChannelAns(r randyLorawan, easy bool) *MACCommand_DLChannelAns {
	this := &MACCommand_DLChannelAns{}
	this.ChannelIndexAck = bool(r.Intn(2) == 0)
	this.FrequencyAck = bool(r.Intn(2) == 0)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_RxTimingSetupReq(r randyLorawan, easy bool) *MACCommand_RxTimingSetupReq {
	this := &MACCommand_RxTimingSetupReq{}
	this.Delay = RxDelay([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}[r.Intn(16)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_TxParamSetupReq(r randyLorawan, easy bool) *MACCommand_TxParamSetupReq {
	this := &MACCommand_TxParamSetupReq{}
	this.MaxEIRPIndex = DeviceEIRP([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}[r.Intn(16)])
	this.UplinkDwellTime = bool(r.Intn(2) == 0)
	this.DownlinkDwellTime = bool(r.Intn(2) == 0)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_RekeyInd(r randyLorawan, easy bool) *MACCommand_RekeyInd {
	this := &MACCommand_RekeyInd{}
	this.MinorVersion = Minor([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}[r.Intn(16)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_RekeyConf(r randyLorawan, easy bool) *MACCommand_RekeyConf {
	this := &MACCommand_RekeyConf{}
	this.MinorVersion = Minor([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}[r.Intn(16)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_ADRParamSetupReq(r randyLorawan, easy bool) *MACCommand_ADRParamSetupReq {
	this := &MACCommand_ADRParamSetupReq{}
	this.ADRAckLimitExponent = ADRAckLimitExponent([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}[r.Intn(16)])
	this.ADRAckDelayExponent = ADRAckDelayExponent([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}[r.Intn(16)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_DeviceTimeAns(r randyLorawan, easy bool) *MACCommand_DeviceTimeAns {
	this := &MACCommand_DeviceTimeAns{}
	v6 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.Time = *v6
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_ForceRejoinReq(r randyLorawan, easy bool) *MACCommand_ForceRejoinReq {
	this := &MACCommand_ForceRejoinReq{}
	this.RejoinType = r.Uint32()
	this.DataRateIndex = DataRateIndex([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}[r.Intn(16)])
	this.MaxRetries = r.Uint32()
	this.PeriodExponent = RejoinPeriodExponent([]int32{0, 1, 2, 3, 4, 5, 6, 7}[r.Intn(8)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_RejoinParamSetupReq(r randyLorawan, easy bool) *MACCommand_RejoinParamSetupReq {
	this := &MACCommand_RejoinParamSetupReq{}
	this.MaxCountExponent = RejoinCountExponent([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}[r.Intn(16)])
	this.MaxTimeExponent = RejoinTimeExponent([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}[r.Intn(16)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_RejoinParamSetupAns(r randyLorawan, easy bool) *MACCommand_RejoinParamSetupAns {
	this := &MACCommand_RejoinParamSetupAns{}
	this.MaxTimeExponentAck = bool(r.Intn(2) == 0)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_PingSlotInfoReq(r randyLorawan, easy bool) *MACCommand_PingSlotInfoReq {
	this := &MACCommand_PingSlotInfoReq{}
	this.Period = PingSlotPeriod([]int32{0, 1, 2, 3, 4, 5, 6, 7}[r.Intn(8)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_PingSlotChannelReq(r randyLorawan, easy bool) *MACCommand_PingSlotChannelReq {
	this := &MACCommand_PingSlotChannelReq{}
	this.Frequency = uint64(r.Uint32())
	this.DataRateIndex = DataRateIndex([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}[r.Intn(16)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_PingSlotChannelAns(r randyLorawan, easy bool) *MACCommand_PingSlotChannelAns {
	this := &MACCommand_PingSlotChannelAns{}
	this.FrequencyAck = bool(r.Intn(2) == 0)
	this.DataRateIndexAck = bool(r.Intn(2) == 0)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_BeaconTimingAns(r randyLorawan, easy bool) *MACCommand_BeaconTimingAns {
	this := &MACCommand_BeaconTimingAns{}
	this.Delay = r.Uint32()
	this.ChannelIndex = r.Uint32()
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_BeaconFreqReq(r randyLorawan, easy bool) *MACCommand_BeaconFreqReq {
	this := &MACCommand_BeaconFreqReq{}
	this.Frequency = uint64(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_BeaconFreqAns(r randyLorawan, easy bool) *MACCommand_BeaconFreqAns {
	this := &MACCommand_BeaconFreqAns{}
	this.FrequencyAck = bool(r.Intn(2) == 0)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_DeviceModeInd(r randyLorawan, easy bool) *MACCommand_DeviceModeInd {
	this := &MACCommand_DeviceModeInd{}
	this.Class = Class([]int32{0, 1, 2}[r.Intn(3)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_DeviceModeConf(r randyLorawan, easy bool) *MACCommand_DeviceModeConf {
	this := &MACCommand_DeviceModeConf{}
	this.Class = Class([]int32{0, 1, 2}[r.Intn(3)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyLorawan interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneLorawan(r randyLorawan) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringLorawan(r randyLorawan) string {
	v7 := r.Intn(100)
	tmps := make([]rune, v7)
	for i := 0; i < v7; i++ {
		tmps[i] = randUTF8RuneLorawan(r)
	}
	return string(tmps)
}
func randUnrecognizedLorawan(r randyLorawan, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldLorawan(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldLorawan(dAtA []byte, r randyLorawan, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateLorawan(dAtA, uint64(key))
		v8 := r.Int63()
		if r.Intn(2) == 0 {
			v8 *= -1
		}
		dAtA = encodeVarintPopulateLorawan(dAtA, uint64(v8))
	case 1:
		dAtA = encodeVarintPopulateLorawan(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateLorawan(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateLorawan(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateLorawan(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateLorawan(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MHDR.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = len(m.MIC)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	return n
}

func (m *Message_MACPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MACPayload != nil {
		l = m.MACPayload.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *Message_JoinRequestPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JoinRequestPayload != nil {
		l = m.JoinRequestPayload.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *Message_JoinAcceptPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JoinAcceptPayload != nil {
		l = m.JoinAcceptPayload.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *Message_RejoinRequestPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RejoinRequestPayload != nil {
		l = m.RejoinRequestPayload.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MHDR) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MType != 0 {
		n += 1 + sovLorawan(uint64(m.MType))
	}
	if m.Major != 0 {
		n += 1 + sovLorawan(uint64(m.Major))
	}
	return n
}

func (m *MACPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FHDR.Size()
	n += 1 + l + sovLorawan(uint64(l))
	if m.FPort != 0 {
		n += 1 + sovLorawan(uint64(m.FPort))
	}
	l = len(m.FRMPayload)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.DecodedPayload != nil {
		l = m.DecodedPayload.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}

func (m *FHDR) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DevAddr.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.FCtrl.Size()
	n += 1 + l + sovLorawan(uint64(l))
	if m.FCnt != 0 {
		n += 1 + sovLorawan(uint64(m.FCnt))
	}
	l = len(m.FOpts)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}

func (m *FCtrl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ADR {
		n += 2
	}
	if m.ADRAckReq {
		n += 2
	}
	if m.Ack {
		n += 2
	}
	if m.FPending {
		n += 2
	}
	if m.ClassB {
		n += 2
	}
	return n
}

func (m *JoinRequestPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.JoinEUI.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.DevEUI.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.DevNonce.Size()
	n += 1 + l + sovLorawan(uint64(l))
	return n
}

func (m *RejoinRequestPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RejoinType != 0 {
		n += 1 + sovLorawan(uint64(m.RejoinType))
	}
	l = m.NetID.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.JoinEUI.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.DevEUI.Size()
	n += 1 + l + sovLorawan(uint64(l))
	if m.RejoinCnt != 0 {
		n += 1 + sovLorawan(uint64(m.RejoinCnt))
	}
	return n
}

func (m *JoinAcceptPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Encrypted)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	l = m.JoinNonce.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.NetID.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.DevAddr.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.DLSettings.Size()
	n += 1 + l + sovLorawan(uint64(l))
	if m.RxDelay != 0 {
		n += 1 + sovLorawan(uint64(m.RxDelay))
	}
	if m.CFList != nil {
		l = m.CFList.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}

func (m *DLSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rx1DROffset != 0 {
		n += 1 + sovLorawan(uint64(m.Rx1DROffset))
	}
	if m.Rx2DR != 0 {
		n += 1 + sovLorawan(uint64(m.Rx2DR))
	}
	if m.OptNeg {
		n += 2
	}
	return n
}

func (m *CFList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovLorawan(uint64(m.Type))
	}
	if len(m.Freq) > 0 {
		l = 0
		for _, e := range m.Freq {
			l += sovLorawan(uint64(e))
		}
		n += 1 + sovLorawan(uint64(l)) + l
	}
	if len(m.ChMasks) > 0 {
		n += 1 + sovLorawan(uint64(len(m.ChMasks))) + len(m.ChMasks)*1
	}
	return n
}

func (m *LoRaDataRate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bandwidth != 0 {
		n += 1 + sovLorawan(uint64(m.Bandwidth))
	}
	if m.SpreadingFactor != 0 {
		n += 1 + sovLorawan(uint64(m.SpreadingFactor))
	}
	return n
}

func (m *FSKDataRate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BitRate != 0 {
		n += 1 + sovLorawan(uint64(m.BitRate))
	}
	return n
}

func (m *DataRate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Modulation != nil {
		n += m.Modulation.Size()
	}
	return n
}

func (m *DataRate_LoRa) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LoRa != nil {
		l = m.LoRa.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *DataRate_FSK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FSK != nil {
		l = m.FSK.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *TxSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DataRate.Size()
	n += 1 + l + sovLorawan(uint64(l))
	if m.DataRateIndex != 0 {
		n += 1 + sovLorawan(uint64(m.DataRateIndex))
	}
	l = len(m.CodingRate)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.Frequency != 0 {
		n += 1 + sovLorawan(m.Frequency)
	}
	if m.TxPower != 0 {
		n += 1 + sovLorawan(uint64(m.TxPower))
	}
	if m.InvertPolarization {
		n += 2
	}
	if m.GatewayChannelIndex != 0 {
		n += 1 + sovLorawan(uint64(m.GatewayChannelIndex))
	}
	if m.DeviceChannelIndex != 0 {
		n += 1 + sovLorawan(uint64(m.DeviceChannelIndex))
	}
	if m.EnableCRC {
		n += 2
	}
	if m.Timestamp != 0 {
		n += 1 + sovLorawan(uint64(m.Timestamp))
	}
	if m.Time != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.Time)
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}

func (m *GatewayAntennaIdentifiers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GatewayIdentifiers.Size()
	n += 1 + l + sovLorawan(uint64(l))
	if m.AntennaIndex != 0 {
		n += 1 + sovLorawan(uint64(m.AntennaIndex))
	}
	return n
}

func (m *UplinkToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GatewayAntennaIdentifiers.Size()
	n += 1 + l + sovLorawan(uint64(l))
	if m.Timestamp != 0 {
		n += 1 + sovLorawan(uint64(m.Timestamp))
	}
	return n
}

func (m *DownlinkPath) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Path != nil {
		n += m.Path.Size()
	}
	return n
}

func (m *DownlinkPath_UplinkToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UplinkToken != nil {
		l = len(m.UplinkToken)
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *DownlinkPath_Fixed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fixed != nil {
		l = m.Fixed.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *TxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Class != 0 {
		n += 1 + sovLorawan(uint64(m.Class))
	}
	if len(m.DownlinkPaths) > 0 {
		for _, e := range m.DownlinkPaths {
			l = e.Size()
			n += 1 + l + sovLorawan(uint64(l))
		}
	}
	if m.Rx1Delay != 0 {
		n += 1 + sovLorawan(uint64(m.Rx1Delay))
	}
	if m.Rx1DataRateIndex != 0 {
		n += 1 + sovLorawan(uint64(m.Rx1DataRateIndex))
	}
	if m.Rx1Frequency != 0 {
		n += 1 + sovLorawan(m.Rx1Frequency)
	}
	if m.Rx2DataRateIndex != 0 {
		n += 1 + sovLorawan(uint64(m.Rx2DataRateIndex))
	}
	if m.Rx2Frequency != 0 {
		n += 1 + sovLorawan(m.Rx2Frequency)
	}
	if m.Priority != 0 {
		n += 1 + sovLorawan(uint64(m.Priority))
	}
	if m.AbsoluteTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.AbsoluteTime)
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.Advanced != nil {
		l = m.Advanced.Size()
		n += 2 + l + sovLorawan(uint64(l))
	}
	return n
}

func (m *MACCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CID != 0 {
		n += 1 + sovLorawan(uint64(m.CID))
	}
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	return n
}

func (m *MACCommand_RawPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RawPayload != nil {
		l = len(m.RawPayload)
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_ResetInd_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResetInd != nil {
		l = m.ResetInd.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_ResetConf_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResetConf != nil {
		l = m.ResetConf.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_LinkCheckAns_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LinkCheckAns != nil {
		l = m.LinkCheckAns.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_LinkADRReq_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LinkADRReq != nil {
		l = m.LinkADRReq.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_LinkADRAns_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LinkADRAns != nil {
		l = m.LinkADRAns.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_DutyCycleReq_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DutyCycleReq != nil {
		l = m.DutyCycleReq.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_RxParamSetupReq_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RxParamSetupReq != nil {
		l = m.RxParamSetupReq.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_RxParamSetupAns_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RxParamSetupAns != nil {
		l = m.RxParamSetupAns.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_DevStatusAns_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DevStatusAns != nil {
		l = m.DevStatusAns.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_NewChannelReq_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewChannelReq != nil {
		l = m.NewChannelReq.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_NewChannelAns_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewChannelAns != nil {
		l = m.NewChannelAns.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_DLChannelReq_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DLChannelReq != nil {
		l = m.DLChannelReq.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_DLChannelAns_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DLChannelAns != nil {
		l = m.DLChannelAns.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_RxTimingSetupReq_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RxTimingSetupReq != nil {
		l = m.RxTimingSetupReq.Size()
		n += 2 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_TxParamSetupReq_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxParamSetupReq != nil {
		l = m.TxParamSetupReq.Size()
		n += 2 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_RekeyInd_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RekeyInd != nil {
		l = m.RekeyInd.Size()
		n += 2 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_RekeyConf_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RekeyConf != nil {
		l = m.RekeyConf.Size()
		n += 2 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_ADRParamSetupReq_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ADRParamSetupReq != nil {
		l = m.ADRParamSetupReq.Size()
		n += 2 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_DeviceTimeAns_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeviceTimeAns != nil {
		l = m.DeviceTimeAns.Size()
		n += 2 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_ForceRejoinReq_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForceRejoinReq != nil {
		l = m.ForceRejoinReq.Size()
		n += 2 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_RejoinParamSetupReq_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RejoinParamSetupReq != nil {
		l = m.RejoinParamSetupReq.Size()
		n += 2 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_RejoinParamSetupAns_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RejoinParamSetupAns != nil {
		l = m.RejoinParamSetupAns.Size()
		n += 2 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_PingSlotInfoReq_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PingSlotInfoReq != nil {
		l = m.PingSlotInfoReq.Size()
		n += 2 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_PingSlotChannelReq_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PingSlotChannelReq != nil {
		l = m.PingSlotChannelReq.Size()
		n += 2 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_PingSlotChannelAns_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PingSlotChannelAns != nil {
		l = m.PingSlotChannelAns.Size()
		n += 2 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_BeaconTimingAns_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BeaconTimingAns != nil {
		l = m.BeaconTimingAns.Size()
		n += 2 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_BeaconFreqReq_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BeaconFreqReq != nil {
		l = m.BeaconFreqReq.Size()
		n += 2 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_BeaconFreqAns_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BeaconFreqAns != nil {
		l = m.BeaconFreqAns.Size()
		n += 2 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_DeviceModeInd_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeviceModeInd != nil {
		l = m.DeviceModeInd.Size()
		n += 2 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_DeviceModeConf_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeviceModeConf != nil {
		l = m.DeviceModeConf.Size()
		n += 2 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_ResetInd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinorVersion != 0 {
		n += 1 + sovLorawan(uint64(m.MinorVersion))
	}
	return n
}

func (m *MACCommand_ResetConf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinorVersion != 0 {
		n += 1 + sovLorawan(uint64(m.MinorVersion))
	}
	return n
}

func (m *MACCommand_LinkCheckAns) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Margin != 0 {
		n += 1 + sovLorawan(uint64(m.Margin))
	}
	if m.GatewayCount != 0 {
		n += 1 + sovLorawan(uint64(m.GatewayCount))
	}
	return n
}

func (m *MACCommand_LinkADRReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataRateIndex != 0 {
		n += 1 + sovLorawan(uint64(m.DataRateIndex))
	}
	if m.TxPowerIndex != 0 {
		n += 1 + sovLorawan(uint64(m.TxPowerIndex))
	}
	if len(m.ChannelMask) > 0 {
		n += 1 + sovLorawan(uint64(len(m.ChannelMask))) + len(m.ChannelMask)*1
	}
	if m.ChannelMaskControl != 0 {
		n += 1 + sovLorawan(uint64(m.ChannelMaskControl))
	}
	if m.NbTrans != 0 {
		n += 1 + sovLorawan(uint64(m.NbTrans))
	}
	return n
}

func (m *MACCommand_LinkADRAns) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChannelMaskAck {
		n += 2
	}
	if m.DataRateIndexAck {
		n += 2
	}
	if m.TxPowerIndexAck {
		n += 2
	}
	return n
}

func (m *MACCommand_DutyCycleReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxDutyCycle != 0 {
		n += 1 + sovLorawan(uint64(m.MaxDutyCycle))
	}
	return n
}

func (m *MACCommand_RxParamSetupReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rx2DataRateIndex != 0 {
		n += 1 + sovLorawan(uint64(m.Rx2DataRateIndex))
	}
	if m.Rx1DataRateOffset != 0 {
		n += 1 + sovLorawan(uint64(m.Rx1DataRateOffset))
	}
	if m.Rx2Frequency != 0 {
		n += 1 + sovLorawan(m.Rx2Frequency)
	}
	return n
}

func (m *MACCommand_RxParamSetupAns) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rx2DataRateIndexAck {
		n += 2
	}
	if m.Rx1DataRateOffsetAck {
		n += 2
	}
	if m.Rx2FrequencyAck {
		n += 2
	}
	return n
}

func (m *MACCommand_DevStatusAns) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Battery != 0 {
		n += 1 + sovLorawan(uint64(m.Battery))
	}
	if m.Margin != 0 {
		n += 1 + sovLorawan(uint64(m.Margin))
	}
	return n
}

func (m *MACCommand_NewChannelReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChannelIndex != 0 {
		n += 1 + sovLorawan(uint64(m.ChannelIndex))
	}
	if m.Frequency != 0 {
		n += 1 + sovLorawan(m.Frequency)
	}
	if m.MinDataRateIndex != 0 {
		n += 1 + sovLorawan(uint64(m.MinDataRateIndex))
	}
	if m.MaxDataRateIndex != 0 {
		n += 1 + sovLorawan(uint64(m.MaxDataRateIndex))
	}
	return n
}

func (m *MACCommand_NewChannelAns) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FrequencyAck {
		n += 2
	}
	if m.DataRateAck {
		n += 2
	}
	return n
}

func (m *MACCommand_DLChannelReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChannelIndex != 0 {
		n += 1 + sovLorawan(uint64(m.ChannelIndex))
	}
	if m.Frequency != 0 {
		n += 1 + sovLorawan(m.Frequency)
	}
	return n
}

func (m *MACCommand_DLChannelAns) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChannelIndexAck {
		n += 2
	}
	if m.FrequencyAck {
		n += 2
	}
	return n
}

func (m *MACCommand_RxTimingSetupReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Delay != 0 {
		n += 1 + sovLorawan(uint64(m.Delay))
	}
	return n
}

func (m *MACCommand_TxParamSetupReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxEIRPIndex != 0 {
		n += 1 + sovLorawan(uint64(m.MaxEIRPIndex))
	}
	if m.UplinkDwellTime {
		n += 2
	}
	if m.DownlinkDwellTime {
		n += 2
	}
	return n
}

func (m *MACCommand_RekeyInd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinorVersion != 0 {
		n += 1 + sovLorawan(uint64(m.MinorVersion))
	}
	return n
}

func (m *MACCommand_RekeyConf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinorVersion != 0 {
		n += 1 + sovLorawan(uint64(m.MinorVersion))
	}
	return n
}

func (m *MACCommand_ADRParamSetupReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ADRAckLimitExponent != 0 {
		n += 1 + sovLorawan(uint64(m.ADRAckLimitExponent))
	}
	if m.ADRAckDelayExponent != 0 {
		n += 1 + sovLorawan(uint64(m.ADRAckDelayExponent))
	}
	return n
}

func (m *MACCommand_DeviceTimeAns) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Time)
	n += 1 + l + sovLorawan(uint64(l))
	return n
}

func (m *MACCommand_ForceRejoinReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RejoinType != 0 {
		n += 1 + sovLorawan(uint64(m.RejoinType))
	}
	if m.DataRateIndex != 0 {
		n += 1 + sovLorawan(uint64(m.DataRateIndex))
	}
	if m.MaxRetries != 0 {
		n += 1 + sovLorawan(uint64(m.MaxRetries))
	}
	if m.PeriodExponent != 0 {
		n += 1 + sovLorawan(uint64(m.PeriodExponent))
	}
	return n
}

func (m *MACCommand_RejoinParamSetupReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxCountExponent != 0 {
		n += 1 + sovLorawan(uint64(m.MaxCountExponent))
	}
	if m.MaxTimeExponent != 0 {
		n += 1 + sovLorawan(uint64(m.MaxTimeExponent))
	}
	return n
}

func (m *MACCommand_RejoinParamSetupAns) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxTimeExponentAck {
		n += 2
	}
	return n
}

func (m *MACCommand_PingSlotInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Period != 0 {
		n += 1 + sovLorawan(uint64(m.Period))
	}
	return n
}

func (m *MACCommand_PingSlotChannelReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Frequency != 0 {
		n += 1 + sovLorawan(m.Frequency)
	}
	if m.DataRateIndex != 0 {
		n += 1 + sovLorawan(uint64(m.DataRateIndex))
	}
	return n
}

func (m *MACCommand_PingSlotChannelAns) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FrequencyAck {
		n += 2
	}
	if m.DataRateIndexAck {
		n += 2
	}
	return n
}

func (m *MACCommand_BeaconTimingAns) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Delay != 0 {
		n += 1 + sovLorawan(uint64(m.Delay))
	}
	if m.ChannelIndex != 0 {
		n += 1 + sovLorawan(uint64(m.ChannelIndex))
	}
	return n
}

func (m *MACCommand_BeaconFreqReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Frequency != 0 {
		n += 1 + sovLorawan(m.Frequency)
	}
	return n
}

func (m *MACCommand_BeaconFreqAns) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FrequencyAck {
		n += 2
	}
	return n
}

func (m *MACCommand_DeviceModeInd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Class != 0 {
		n += 1 + sovLorawan(uint64(m.Class))
	}
	return n
}

func (m *MACCommand_DeviceModeConf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Class != 0 {
		n += 1 + sovLorawan(uint64(m.Class))
	}
	return n
}

func sovLorawan(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLorawan(x uint64) (n int) {
	return sovLorawan((x << 1) ^ uint64((int64(x) >> 63)))
}
func (this *Message) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message{`,
		`MHDR:` + strings.Replace(strings.Replace(this.MHDR.String(), "MHDR", "MHDR", 1), `&`, ``, 1) + `,`,
		`MIC:` + fmt.Sprintf("%v", this.MIC) + `,`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message_MACPayload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message_MACPayload{`,
		`MACPayload:` + strings.Replace(fmt.Sprintf("%v", this.MACPayload), "MACPayload", "MACPayload", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message_JoinRequestPayload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message_JoinRequestPayload{`,
		`JoinRequestPayload:` + strings.Replace(fmt.Sprintf("%v", this.JoinRequestPayload), "JoinRequestPayload", "JoinRequestPayload", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message_JoinAcceptPayload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message_JoinAcceptPayload{`,
		`JoinAcceptPayload:` + strings.Replace(fmt.Sprintf("%v", this.JoinAcceptPayload), "JoinAcceptPayload", "JoinAcceptPayload", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message_RejoinRequestPayload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message_RejoinRequestPayload{`,
		`RejoinRequestPayload:` + strings.Replace(fmt.Sprintf("%v", this.RejoinRequestPayload), "RejoinRequestPayload", "RejoinRequestPayload", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MHDR) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MHDR{`,
		`MType:` + fmt.Sprintf("%v", this.MType) + `,`,
		`Major:` + fmt.Sprintf("%v", this.Major) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACPayload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACPayload{`,
		`FHDR:` + strings.Replace(strings.Replace(this.FHDR.String(), "FHDR", "FHDR", 1), `&`, ``, 1) + `,`,
		`FPort:` + fmt.Sprintf("%v", this.FPort) + `,`,
		`FRMPayload:` + fmt.Sprintf("%v", this.FRMPayload) + `,`,
		`DecodedPayload:` + strings.Replace(fmt.Sprintf("%v", this.DecodedPayload), "Struct", "types.Struct", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FHDR) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FHDR{`,
		`DevAddr:` + fmt.Sprintf("%v", this.DevAddr) + `,`,
		`FCtrl:` + strings.Replace(strings.Replace(this.FCtrl.String(), "FCtrl", "FCtrl", 1), `&`, ``, 1) + `,`,
		`FCnt:` + fmt.Sprintf("%v", this.FCnt) + `,`,
		`FOpts:` + fmt.Sprintf("%v", this.FOpts) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FCtrl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FCtrl{`,
		`ADR:` + fmt.Sprintf("%v", this.ADR) + `,`,
		`ADRAckReq:` + fmt.Sprintf("%v", this.ADRAckReq) + `,`,
		`Ack:` + fmt.Sprintf("%v", this.Ack) + `,`,
		`FPending:` + fmt.Sprintf("%v", this.FPending) + `,`,
		`ClassB:` + fmt.Sprintf("%v", this.ClassB) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JoinRequestPayload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JoinRequestPayload{`,
		`JoinEUI:` + fmt.Sprintf("%v", this.JoinEUI) + `,`,
		`DevEUI:` + fmt.Sprintf("%v", this.DevEUI) + `,`,
		`DevNonce:` + fmt.Sprintf("%v", this.DevNonce) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RejoinRequestPayload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RejoinRequestPayload{`,
		`RejoinType:` + fmt.Sprintf("%v", this.RejoinType) + `,`,
		`NetID:` + fmt.Sprintf("%v", this.NetID) + `,`,
		`JoinEUI:` + fmt.Sprintf("%v", this.JoinEUI) + `,`,
		`DevEUI:` + fmt.Sprintf("%v", this.DevEUI) + `,`,
		`RejoinCnt:` + fmt.Sprintf("%v", this.RejoinCnt) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JoinAcceptPayload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JoinAcceptPayload{`,
		`Encrypted:` + fmt.Sprintf("%v", this.Encrypted) + `,`,
		`JoinNonce:` + fmt.Sprintf("%v", this.JoinNonce) + `,`,
		`NetID:` + fmt.Sprintf("%v", this.NetID) + `,`,
		`DevAddr:` + fmt.Sprintf("%v", this.DevAddr) + `,`,
		`DLSettings:` + strings.Replace(strings.Replace(this.DLSettings.String(), "DLSettings", "DLSettings", 1), `&`, ``, 1) + `,`,
		`RxDelay:` + fmt.Sprintf("%v", this.RxDelay) + `,`,
		`CFList:` + strings.Replace(fmt.Sprintf("%v", this.CFList), "CFList", "CFList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DLSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DLSettings{`,
		`Rx1DROffset:` + fmt.Sprintf("%v", this.Rx1DROffset) + `,`,
		`Rx2DR:` + fmt.Sprintf("%v", this.Rx2DR) + `,`,
		`OptNeg:` + fmt.Sprintf("%v", this.OptNeg) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CFList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CFList{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Freq:` + fmt.Sprintf("%v", this.Freq) + `,`,
		`ChMasks:` + fmt.Sprintf("%v", this.ChMasks) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoRaDataRate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoRaDataRate{`,
		`Bandwidth:` + fmt.Sprintf("%v", this.Bandwidth) + `,`,
		`SpreadingFactor:` + fmt.Sprintf("%v", this.SpreadingFactor) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FSKDataRate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FSKDataRate{`,
		`BitRate:` + fmt.Sprintf("%v", this.BitRate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DataRate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DataRate{`,
		`Modulation:` + fmt.Sprintf("%v", this.Modulation) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DataRate_LoRa) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DataRate_LoRa{`,
		`LoRa:` + strings.Replace(fmt.Sprintf("%v", this.LoRa), "LoRaDataRate", "LoRaDataRate", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DataRate_FSK) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DataRate_FSK{`,
		`FSK:` + strings.Replace(fmt.Sprintf("%v", this.FSK), "FSKDataRate", "FSKDataRate", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TxSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TxSettings{`,
		`DataRate:` + strings.Replace(strings.Replace(this.DataRate.String(), "DataRate", "DataRate", 1), `&`, ``, 1) + `,`,
		`DataRateIndex:` + fmt.Sprintf("%v", this.DataRateIndex) + `,`,
		`CodingRate:` + fmt.Sprintf("%v", this.CodingRate) + `,`,
		`Frequency:` + fmt.Sprintf("%v", this.Frequency) + `,`,
		`TxPower:` + fmt.Sprintf("%v", this.TxPower) + `,`,
		`InvertPolarization:` + fmt.Sprintf("%v", this.InvertPolarization) + `,`,
		`GatewayChannelIndex:` + fmt.Sprintf("%v", this.GatewayChannelIndex) + `,`,
		`DeviceChannelIndex:` + fmt.Sprintf("%v", this.DeviceChannelIndex) + `,`,
		`EnableCRC:` + fmt.Sprintf("%v", this.EnableCRC) + `,`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`Time:` + strings.Replace(fmt.Sprintf("%v", this.Time), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayAntennaIdentifiers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayAntennaIdentifiers{`,
		`GatewayIdentifiers:` + strings.Replace(strings.Replace(this.GatewayIdentifiers.String(), "GatewayIdentifiers", "GatewayIdentifiers", 1), `&`, ``, 1) + `,`,
		`AntennaIndex:` + fmt.Sprintf("%v", this.AntennaIndex) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UplinkToken) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UplinkToken{`,
		`GatewayAntennaIdentifiers:` + strings.Replace(strings.Replace(this.GatewayAntennaIdentifiers.String(), "GatewayAntennaIdentifiers", "GatewayAntennaIdentifiers", 1), `&`, ``, 1) + `,`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownlinkPath) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownlinkPath{`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownlinkPath_UplinkToken) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownlinkPath_UplinkToken{`,
		`UplinkToken:` + fmt.Sprintf("%v", this.UplinkToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownlinkPath_Fixed) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownlinkPath_Fixed{`,
		`Fixed:` + strings.Replace(fmt.Sprintf("%v", this.Fixed), "GatewayAntennaIdentifiers", "GatewayAntennaIdentifiers", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TxRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TxRequest{`,
		`Class:` + fmt.Sprintf("%v", this.Class) + `,`,
		`DownlinkPaths:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkPaths), "DownlinkPath", "DownlinkPath", 1) + `,`,
		`Rx1Delay:` + fmt.Sprintf("%v", this.Rx1Delay) + `,`,
		`Rx1DataRateIndex:` + fmt.Sprintf("%v", this.Rx1DataRateIndex) + `,`,
		`Rx1Frequency:` + fmt.Sprintf("%v", this.Rx1Frequency) + `,`,
		`Rx2DataRateIndex:` + fmt.Sprintf("%v", this.Rx2DataRateIndex) + `,`,
		`Rx2Frequency:` + fmt.Sprintf("%v", this.Rx2Frequency) + `,`,
		`Priority:` + fmt.Sprintf("%v", this.Priority) + `,`,
		`AbsoluteTime:` + strings.Replace(fmt.Sprintf("%v", this.AbsoluteTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`Advanced:` + strings.Replace(fmt.Sprintf("%v", this.Advanced), "Struct", "types.Struct", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand{`,
		`CID:` + fmt.Sprintf("%v", this.CID) + `,`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_RawPayload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_RawPayload{`,
		`RawPayload:` + fmt.Sprintf("%v", this.RawPayload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_ResetInd_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_ResetInd_{`,
		`ResetInd:` + strings.Replace(fmt.Sprintf("%v", this.ResetInd), "MACCommand_ResetInd", "MACCommand_ResetInd", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_ResetConf_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_ResetConf_{`,
		`ResetConf:` + strings.Replace(fmt.Sprintf("%v", this.ResetConf), "MACCommand_ResetConf", "MACCommand_ResetConf", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_LinkCheckAns_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_LinkCheckAns_{`,
		`LinkCheckAns:` + strings.Replace(fmt.Sprintf("%v", this.LinkCheckAns), "MACCommand_LinkCheckAns", "MACCommand_LinkCheckAns", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_LinkADRReq_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_LinkADRReq_{`,
		`LinkADRReq:` + strings.Replace(fmt.Sprintf("%v", this.LinkADRReq), "MACCommand_LinkADRReq", "MACCommand_LinkADRReq", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_LinkADRAns_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_LinkADRAns_{`,
		`LinkADRAns:` + strings.Replace(fmt.Sprintf("%v", this.LinkADRAns), "MACCommand_LinkADRAns", "MACCommand_LinkADRAns", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_DutyCycleReq_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_DutyCycleReq_{`,
		`DutyCycleReq:` + strings.Replace(fmt.Sprintf("%v", this.DutyCycleReq), "MACCommand_DutyCycleReq", "MACCommand_DutyCycleReq", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_RxParamSetupReq_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_RxParamSetupReq_{`,
		`RxParamSetupReq:` + strings.Replace(fmt.Sprintf("%v", this.RxParamSetupReq), "MACCommand_RxParamSetupReq", "MACCommand_RxParamSetupReq", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_RxParamSetupAns_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_RxParamSetupAns_{`,
		`RxParamSetupAns:` + strings.Replace(fmt.Sprintf("%v", this.RxParamSetupAns), "MACCommand_RxParamSetupAns", "MACCommand_RxParamSetupAns", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_DevStatusAns_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_DevStatusAns_{`,
		`DevStatusAns:` + strings.Replace(fmt.Sprintf("%v", this.DevStatusAns), "MACCommand_DevStatusAns", "MACCommand_DevStatusAns", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_NewChannelReq_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_NewChannelReq_{`,
		`NewChannelReq:` + strings.Replace(fmt.Sprintf("%v", this.NewChannelReq), "MACCommand_NewChannelReq", "MACCommand_NewChannelReq", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_NewChannelAns_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_NewChannelAns_{`,
		`NewChannelAns:` + strings.Replace(fmt.Sprintf("%v", this.NewChannelAns), "MACCommand_NewChannelAns", "MACCommand_NewChannelAns", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_DLChannelReq_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_DLChannelReq_{`,
		`DLChannelReq:` + strings.Replace(fmt.Sprintf("%v", this.DLChannelReq), "MACCommand_DLChannelReq", "MACCommand_DLChannelReq", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_DLChannelAns_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_DLChannelAns_{`,
		`DLChannelAns:` + strings.Replace(fmt.Sprintf("%v", this.DLChannelAns), "MACCommand_DLChannelAns", "MACCommand_DLChannelAns", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_RxTimingSetupReq_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_RxTimingSetupReq_{`,
		`RxTimingSetupReq:` + strings.Replace(fmt.Sprintf("%v", this.RxTimingSetupReq), "MACCommand_RxTimingSetupReq", "MACCommand_RxTimingSetupReq", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_TxParamSetupReq_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_TxParamSetupReq_{`,
		`TxParamSetupReq:` + strings.Replace(fmt.Sprintf("%v", this.TxParamSetupReq), "MACCommand_TxParamSetupReq", "MACCommand_TxParamSetupReq", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_RekeyInd_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_RekeyInd_{`,
		`RekeyInd:` + strings.Replace(fmt.Sprintf("%v", this.RekeyInd), "MACCommand_RekeyInd", "MACCommand_RekeyInd", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_RekeyConf_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_RekeyConf_{`,
		`RekeyConf:` + strings.Replace(fmt.Sprintf("%v", this.RekeyConf), "MACCommand_RekeyConf", "MACCommand_RekeyConf", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_ADRParamSetupReq_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_ADRParamSetupReq_{`,
		`ADRParamSetupReq:` + strings.Replace(fmt.Sprintf("%v", this.ADRParamSetupReq), "MACCommand_ADRParamSetupReq", "MACCommand_ADRParamSetupReq", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_DeviceTimeAns_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_DeviceTimeAns_{`,
		`DeviceTimeAns:` + strings.Replace(fmt.Sprintf("%v", this.DeviceTimeAns), "MACCommand_DeviceTimeAns", "MACCommand_DeviceTimeAns", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_ForceRejoinReq_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_ForceRejoinReq_{`,
		`ForceRejoinReq:` + strings.Replace(fmt.Sprintf("%v", this.ForceRejoinReq), "MACCommand_ForceRejoinReq", "MACCommand_ForceRejoinReq", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_RejoinParamSetupReq_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_RejoinParamSetupReq_{`,
		`RejoinParamSetupReq:` + strings.Replace(fmt.Sprintf("%v", this.RejoinParamSetupReq), "MACCommand_RejoinParamSetupReq", "MACCommand_RejoinParamSetupReq", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_RejoinParamSetupAns_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_RejoinParamSetupAns_{`,
		`RejoinParamSetupAns:` + strings.Replace(fmt.Sprintf("%v", this.RejoinParamSetupAns), "MACCommand_RejoinParamSetupAns", "MACCommand_RejoinParamSetupAns", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_PingSlotInfoReq_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_PingSlotInfoReq_{`,
		`PingSlotInfoReq:` + strings.Replace(fmt.Sprintf("%v", this.PingSlotInfoReq), "MACCommand_PingSlotInfoReq", "MACCommand_PingSlotInfoReq", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_PingSlotChannelReq_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_PingSlotChannelReq_{`,
		`PingSlotChannelReq:` + strings.Replace(fmt.Sprintf("%v", this.PingSlotChannelReq), "MACCommand_PingSlotChannelReq", "MACCommand_PingSlotChannelReq", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_PingSlotChannelAns_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_PingSlotChannelAns_{`,
		`PingSlotChannelAns:` + strings.Replace(fmt.Sprintf("%v", this.PingSlotChannelAns), "MACCommand_PingSlotChannelAns", "MACCommand_PingSlotChannelAns", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_BeaconTimingAns_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_BeaconTimingAns_{`,
		`BeaconTimingAns:` + strings.Replace(fmt.Sprintf("%v", this.BeaconTimingAns), "MACCommand_BeaconTimingAns", "MACCommand_BeaconTimingAns", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_BeaconFreqReq_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_BeaconFreqReq_{`,
		`BeaconFreqReq:` + strings.Replace(fmt.Sprintf("%v", this.BeaconFreqReq), "MACCommand_BeaconFreqReq", "MACCommand_BeaconFreqReq", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_BeaconFreqAns_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_BeaconFreqAns_{`,
		`BeaconFreqAns:` + strings.Replace(fmt.Sprintf("%v", this.BeaconFreqAns), "MACCommand_BeaconFreqAns", "MACCommand_BeaconFreqAns", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_DeviceModeInd_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_DeviceModeInd_{`,
		`DeviceModeInd:` + strings.Replace(fmt.Sprintf("%v", this.DeviceModeInd), "MACCommand_DeviceModeInd", "MACCommand_DeviceModeInd", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_DeviceModeConf_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_DeviceModeConf_{`,
		`DeviceModeConf:` + strings.Replace(fmt.Sprintf("%v", this.DeviceModeConf), "MACCommand_DeviceModeConf", "MACCommand_DeviceModeConf", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_ResetInd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_ResetInd{`,
		`MinorVersion:` + fmt.Sprintf("%v", this.MinorVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_ResetConf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_ResetConf{`,
		`MinorVersion:` + fmt.Sprintf("%v", this.MinorVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_LinkCheckAns) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_LinkCheckAns{`,
		`Margin:` + fmt.Sprintf("%v", this.Margin) + `,`,
		`GatewayCount:` + fmt.Sprintf("%v", this.GatewayCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_LinkADRReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_LinkADRReq{`,
		`DataRateIndex:` + fmt.Sprintf("%v", this.DataRateIndex) + `,`,
		`TxPowerIndex:` + fmt.Sprintf("%v", this.TxPowerIndex) + `,`,
		`ChannelMask:` + fmt.Sprintf("%v", this.ChannelMask) + `,`,
		`ChannelMaskControl:` + fmt.Sprintf("%v", this.ChannelMaskControl) + `,`,
		`NbTrans:` + fmt.Sprintf("%v", this.NbTrans) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_LinkADRAns) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_LinkADRAns{`,
		`ChannelMaskAck:` + fmt.Sprintf("%v", this.ChannelMaskAck) + `,`,
		`DataRateIndexAck:` + fmt.Sprintf("%v", this.DataRateIndexAck) + `,`,
		`TxPowerIndexAck:` + fmt.Sprintf("%v", this.TxPowerIndexAck) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_DutyCycleReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_DutyCycleReq{`,
		`MaxDutyCycle:` + fmt.Sprintf("%v", this.MaxDutyCycle) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_RxParamSetupReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_RxParamSetupReq{`,
		`Rx2DataRateIndex:` + fmt.Sprintf("%v", this.Rx2DataRateIndex) + `,`,
		`Rx1DataRateOffset:` + fmt.Sprintf("%v", this.Rx1DataRateOffset) + `,`,
		`Rx2Frequency:` + fmt.Sprintf("%v", this.Rx2Frequency) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_RxParamSetupAns) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_RxParamSetupAns{`,
		`Rx2DataRateIndexAck:` + fmt.Sprintf("%v", this.Rx2DataRateIndexAck) + `,`,
		`Rx1DataRateOffsetAck:` + fmt.Sprintf("%v", this.Rx1DataRateOffsetAck) + `,`,
		`Rx2FrequencyAck:` + fmt.Sprintf("%v", this.Rx2FrequencyAck) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_DevStatusAns) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_DevStatusAns{`,
		`Battery:` + fmt.Sprintf("%v", this.Battery) + `,`,
		`Margin:` + fmt.Sprintf("%v", this.Margin) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_NewChannelReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_NewChannelReq{`,
		`ChannelIndex:` + fmt.Sprintf("%v", this.ChannelIndex) + `,`,
		`Frequency:` + fmt.Sprintf("%v", this.Frequency) + `,`,
		`MinDataRateIndex:` + fmt.Sprintf("%v", this.MinDataRateIndex) + `,`,
		`MaxDataRateIndex:` + fmt.Sprintf("%v", this.MaxDataRateIndex) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_NewChannelAns) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_NewChannelAns{`,
		`FrequencyAck:` + fmt.Sprintf("%v", this.FrequencyAck) + `,`,
		`DataRateAck:` + fmt.Sprintf("%v", this.DataRateAck) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_DLChannelReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_DLChannelReq{`,
		`ChannelIndex:` + fmt.Sprintf("%v", this.ChannelIndex) + `,`,
		`Frequency:` + fmt.Sprintf("%v", this.Frequency) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_DLChannelAns) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_DLChannelAns{`,
		`ChannelIndexAck:` + fmt.Sprintf("%v", this.ChannelIndexAck) + `,`,
		`FrequencyAck:` + fmt.Sprintf("%v", this.FrequencyAck) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_RxTimingSetupReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_RxTimingSetupReq{`,
		`Delay:` + fmt.Sprintf("%v", this.Delay) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_TxParamSetupReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_TxParamSetupReq{`,
		`MaxEIRPIndex:` + fmt.Sprintf("%v", this.MaxEIRPIndex) + `,`,
		`UplinkDwellTime:` + fmt.Sprintf("%v", this.UplinkDwellTime) + `,`,
		`DownlinkDwellTime:` + fmt.Sprintf("%v", this.DownlinkDwellTime) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_RekeyInd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_RekeyInd{`,
		`MinorVersion:` + fmt.Sprintf("%v", this.MinorVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_RekeyConf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_RekeyConf{`,
		`MinorVersion:` + fmt.Sprintf("%v", this.MinorVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_ADRParamSetupReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_ADRParamSetupReq{`,
		`ADRAckLimitExponent:` + fmt.Sprintf("%v", this.ADRAckLimitExponent) + `,`,
		`ADRAckDelayExponent:` + fmt.Sprintf("%v", this.ADRAckDelayExponent) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_DeviceTimeAns) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_DeviceTimeAns{`,
		`Time:` + strings.Replace(strings.Replace(this.Time.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_ForceRejoinReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_ForceRejoinReq{`,
		`RejoinType:` + fmt.Sprintf("%v", this.RejoinType) + `,`,
		`DataRateIndex:` + fmt.Sprintf("%v", this.DataRateIndex) + `,`,
		`MaxRetries:` + fmt.Sprintf("%v", this.MaxRetries) + `,`,
		`PeriodExponent:` + fmt.Sprintf("%v", this.PeriodExponent) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_RejoinParamSetupReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_RejoinParamSetupReq{`,
		`MaxCountExponent:` + fmt.Sprintf("%v", this.MaxCountExponent) + `,`,
		`MaxTimeExponent:` + fmt.Sprintf("%v", this.MaxTimeExponent) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_RejoinParamSetupAns) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_RejoinParamSetupAns{`,
		`MaxTimeExponentAck:` + fmt.Sprintf("%v", this.MaxTimeExponentAck) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_PingSlotInfoReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_PingSlotInfoReq{`,
		`Period:` + fmt.Sprintf("%v", this.Period) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_PingSlotChannelReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_PingSlotChannelReq{`,
		`Frequency:` + fmt.Sprintf("%v", this.Frequency) + `,`,
		`DataRateIndex:` + fmt.Sprintf("%v", this.DataRateIndex) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_PingSlotChannelAns) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_PingSlotChannelAns{`,
		`FrequencyAck:` + fmt.Sprintf("%v", this.FrequencyAck) + `,`,
		`DataRateIndexAck:` + fmt.Sprintf("%v", this.DataRateIndexAck) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_BeaconTimingAns) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_BeaconTimingAns{`,
		`Delay:` + fmt.Sprintf("%v", this.Delay) + `,`,
		`ChannelIndex:` + fmt.Sprintf("%v", this.ChannelIndex) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_BeaconFreqReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_BeaconFreqReq{`,
		`Frequency:` + fmt.Sprintf("%v", this.Frequency) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_BeaconFreqAns) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_BeaconFreqAns{`,
		`FrequencyAck:` + fmt.Sprintf("%v", this.FrequencyAck) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_DeviceModeInd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_DeviceModeInd{`,
		`Class:` + fmt.Sprintf("%v", this.Class) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand_DeviceModeConf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand_DeviceModeConf{`,
		`Class:` + fmt.Sprintf("%v", this.Class) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringLorawan(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MHDR", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MHDR.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MIC", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MIC = append(m.MIC[:0], dAtA[iNdEx:postIndex]...)
			if m.MIC == nil {
				m.MIC = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MACPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACPayload{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Message_MACPayload{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinRequestPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JoinRequestPayload{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Message_JoinRequestPayload{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinAcceptPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JoinAcceptPayload{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Message_JoinAcceptPayload{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejoinRequestPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RejoinRequestPayload{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Message_RejoinRequestPayload{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MHDR) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MHDR: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MHDR: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MType", wireType)
			}
			m.MType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MType |= (MType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Major", wireType)
			}
			m.Major = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Major |= (Major(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MACPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MACPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FHDR", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FHDR.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FPort", wireType)
			}
			m.FPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FRMPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FRMPayload = append(m.FRMPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.FRMPayload == nil {
				m.FRMPayload = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecodedPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DecodedPayload == nil {
				m.DecodedPayload = &types.Struct{}
			}
			if err := m.DecodedPayload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FHDR) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FHDR: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FHDR: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCtrl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FCtrl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCnt", wireType)
			}
			m.FCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FOpts", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FOpts = append(m.FOpts[:0], dAtA[iNdEx:postIndex]...)
			if m.FOpts == nil {
				m.FOpts = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FCtrl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FCtrl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FCtrl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ADR", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ADR = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ADRAckReq", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ADRAckReq = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ack", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ack = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FPending", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FPending = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassB", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClassB = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinRequestPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinRequestPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinRequestPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.JoinEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevNonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevNonce.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RejoinRequestPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RejoinRequestPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RejoinRequestPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejoinType", wireType)
			}
			m.RejoinType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RejoinType |= (RejoinType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NetID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.JoinEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejoinCnt", wireType)
			}
			m.RejoinCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RejoinCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinAcceptPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinAcceptPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinAcceptPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encrypted", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Encrypted = append(m.Encrypted[:0], dAtA[iNdEx:postIndex]...)
			if m.Encrypted == nil {
				m.Encrypted = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinNonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.JoinNonce.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NetID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DLSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DLSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxDelay", wireType)
			}
			m.RxDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxDelay |= (RxDelay(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CFList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CFList == nil {
				m.CFList = &CFList{}
			}
			if err := m.CFList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DLSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DLSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DLSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx1DROffset", wireType)
			}
			m.Rx1DROffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx1DROffset |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx2DR", wireType)
			}
			m.Rx2DR = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx2DR |= (DataRateIndex(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptNeg", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptNeg = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CFList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CFList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CFList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (CFListType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLorawan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Freq = append(m.Freq, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLorawan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLorawan
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Freq) == 0 {
					m.Freq = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLorawan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Freq = append(m.Freq, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Freq", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLorawan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChMasks = append(m.ChMasks, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLorawan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLorawan
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.ChMasks) == 0 {
					m.ChMasks = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLorawan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChMasks = append(m.ChMasks, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChMasks", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoRaDataRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoRaDataRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoRaDataRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bandwidth", wireType)
			}
			m.Bandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bandwidth |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpreadingFactor", wireType)
			}
			m.SpreadingFactor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpreadingFactor |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FSKDataRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FSKDataRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FSKDataRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BitRate", wireType)
			}
			m.BitRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BitRate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoRa", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LoRaDataRate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Modulation = &DataRate_LoRa{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FSK", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FSKDataRate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Modulation = &DataRate_FSK{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DataRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRateIndex", wireType)
			}
			m.DataRateIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataRateIndex |= (DataRateIndex(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodingRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodingRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			m.Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxPower", wireType)
			}
			m.TxPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxPower |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvertPolarization", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InvertPolarization = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayChannelIndex", wireType)
			}
			m.GatewayChannelIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GatewayChannelIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceChannelIndex", wireType)
			}
			m.DeviceChannelIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceChannelIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableCRC", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableCRC = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Time == nil {
				m.Time = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayAntennaIdentifiers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayAntennaIdentifiers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayAntennaIdentifiers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GatewayIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AntennaIndex", wireType)
			}
			m.AntennaIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AntennaIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UplinkToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UplinkToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UplinkToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayAntennaIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GatewayAntennaIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownlinkPath) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownlinkPath: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownlinkPath: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplinkToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Path = &DownlinkPath_UplinkToken{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fixed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GatewayAntennaIdentifiers{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Path = &DownlinkPath_Fixed{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Class", wireType)
			}
			m.Class = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Class |= (Class(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkPaths", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownlinkPaths = append(m.DownlinkPaths, &DownlinkPath{})
			if err := m.DownlinkPaths[len(m.DownlinkPaths)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx1Delay", wireType)
			}
			m.Rx1Delay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx1Delay |= (RxDelay(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx1DataRateIndex", wireType)
			}
			m.Rx1DataRateIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx1DataRateIndex |= (DataRateIndex(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx1Frequency", wireType)
			}
			m.Rx1Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx1Frequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx2DataRateIndex", wireType)
			}
			m.Rx2DataRateIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx2DataRateIndex |= (DataRateIndex(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx2Frequency", wireType)
			}
			m.Rx2Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx2Frequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= (TxSchedulePriority(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbsoluteTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AbsoluteTime == nil {
				m.AbsoluteTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.AbsoluteTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Advanced", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Advanced == nil {
				m.Advanced = &types.Struct{}
			}
			if err := m.Advanced.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MACCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MACCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CID", wireType)
			}
			m.CID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CID |= (MACCommandIdentifier(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Payload = &MACCommand_RawPayload{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetInd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_ResetInd{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_ResetInd_{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_ResetConf{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_ResetConf_{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkCheckAns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_LinkCheckAns{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_LinkCheckAns_{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkADRReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_LinkADRReq{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_LinkADRReq_{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkADRAns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_LinkADRAns{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_LinkADRAns_{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DutyCycleReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_DutyCycleReq{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_DutyCycleReq_{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxParamSetupReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_RxParamSetupReq{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_RxParamSetupReq_{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxParamSetupAns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_RxParamSetupAns{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_RxParamSetupAns_{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevStatusAns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_DevStatusAns{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_DevStatusAns_{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewChannelReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_NewChannelReq{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_NewChannelReq_{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewChannelAns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_NewChannelAns{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_NewChannelAns_{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DLChannelReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_DLChannelReq{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_DLChannelReq_{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DLChannelAns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_DLChannelAns{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_DLChannelAns_{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxTimingSetupReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_RxTimingSetupReq{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_RxTimingSetupReq_{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxParamSetupReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_TxParamSetupReq{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_TxParamSetupReq_{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RekeyInd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_RekeyInd{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_RekeyInd_{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RekeyConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_RekeyConf{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_RekeyConf_{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ADRParamSetupReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_ADRParamSetupReq{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_ADRParamSetupReq_{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceTimeAns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_DeviceTimeAns{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_DeviceTimeAns_{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceRejoinReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_ForceRejoinReq{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_ForceRejoinReq_{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejoinParamSetupReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_RejoinParamSetupReq{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_RejoinParamSetupReq_{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejoinParamSetupAns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_RejoinParamSetupAns{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_RejoinParamSetupAns_{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingSlotInfoReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_PingSlotInfoReq{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_PingSlotInfoReq_{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingSlotChannelReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_PingSlotChannelReq{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_PingSlotChannelReq_{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingSlotChannelAns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_PingSlotChannelAns{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_PingSlotChannelAns_{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeaconTimingAns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_BeaconTimingAns{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_BeaconTimingAns_{v}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeaconFreqReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_BeaconFreqReq{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_BeaconFreqReq_{v}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeaconFreqAns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_BeaconFreqAns{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_BeaconFreqAns_{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceModeInd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_DeviceModeInd{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_DeviceModeInd_{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceModeConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_DeviceModeConf{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_DeviceModeConf_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_ResetInd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetInd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetInd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinorVersion", wireType)
			}
			m.MinorVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinorVersion |= (Minor(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_ResetConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinorVersion", wireType)
			}
			m.MinorVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinorVersion |= (Minor(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_LinkCheckAns) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LinkCheckAns: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LinkCheckAns: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Margin", wireType)
			}
			m.Margin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Margin |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayCount", wireType)
			}
			m.GatewayCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GatewayCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_LinkADRReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LinkADRReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LinkADRReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRateIndex", wireType)
			}
			m.DataRateIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataRateIndex |= (DataRateIndex(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxPowerIndex", wireType)
			}
			m.TxPowerIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxPowerIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLorawan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChannelMask = append(m.ChannelMask, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLorawan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLorawan
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.ChannelMask) == 0 {
					m.ChannelMask = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLorawan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChannelMask = append(m.ChannelMask, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelMask", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelMaskControl", wireType)
			}
			m.ChannelMaskControl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelMaskControl |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NbTrans", wireType)
			}
			m.NbTrans = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NbTrans |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_LinkADRAns) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LinkADRAns: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LinkADRAns: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelMaskAck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChannelMaskAck = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRateIndexAck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DataRateIndexAck = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxPowerIndexAck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TxPowerIndexAck = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_DutyCycleReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DutyCycleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DutyCycleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDutyCycle", wireType)
			}
			m.MaxDutyCycle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDutyCycle |= (AggregatedDutyCycle(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_RxParamSetupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RxParamSetupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RxParamSetupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx2DataRateIndex", wireType)
			}
			m.Rx2DataRateIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx2DataRateIndex |= (DataRateIndex(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx1DataRateOffset", wireType)
			}
			m.Rx1DataRateOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx1DataRateOffset |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx2Frequency", wireType)
			}
			m.Rx2Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx2Frequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_RxParamSetupAns) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RxParamSetupAns: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RxParamSetupAns: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx2DataRateIndexAck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Rx2DataRateIndexAck = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx1DataRateOffsetAck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Rx1DataRateOffsetAck = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx2FrequencyAck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Rx2FrequencyAck = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_DevStatusAns) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DevStatusAns: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DevStatusAns: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Battery", wireType)
			}
			m.Battery = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Battery |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Margin", wireType)
			}
			m.Margin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Margin |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_NewChannelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewChannelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewChannelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelIndex", wireType)
			}
			m.ChannelIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			m.Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDataRateIndex", wireType)
			}
			m.MinDataRateIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinDataRateIndex |= (DataRateIndex(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDataRateIndex", wireType)
			}
			m.MaxDataRateIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDataRateIndex |= (DataRateIndex(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_NewChannelAns) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewChannelAns: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewChannelAns: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyAck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FrequencyAck = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRateAck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DataRateAck = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_DLChannelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DLChannelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DLChannelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelIndex", wireType)
			}
			m.ChannelIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			m.Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_DLChannelAns) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DLChannelAns: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DLChannelAns: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelIndexAck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChannelIndexAck = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyAck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FrequencyAck = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_RxTimingSetupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RxTimingSetupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RxTimingSetupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delay", wireType)
			}
			m.Delay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Delay |= (RxDelay(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_TxParamSetupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxParamSetupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxParamSetupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxEIRPIndex", wireType)
			}
			m.MaxEIRPIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxEIRPIndex |= (DeviceEIRP(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplinkDwellTime", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UplinkDwellTime = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkDwellTime", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DownlinkDwellTime = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_RekeyInd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RekeyInd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RekeyInd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinorVersion", wireType)
			}
			m.MinorVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinorVersion |= (Minor(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_RekeyConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RekeyConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RekeyConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinorVersion", wireType)
			}
			m.MinorVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinorVersion |= (Minor(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_ADRParamSetupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ADRParamSetupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ADRParamSetupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ADRAckLimitExponent", wireType)
			}
			m.ADRAckLimitExponent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ADRAckLimitExponent |= (ADRAckLimitExponent(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ADRAckDelayExponent", wireType)
			}
			m.ADRAckDelayExponent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ADRAckDelayExponent |= (ADRAckDelayExponent(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_DeviceTimeAns) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceTimeAns: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceTimeAns: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_ForceRejoinReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForceRejoinReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForceRejoinReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejoinType", wireType)
			}
			m.RejoinType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RejoinType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRateIndex", wireType)
			}
			m.DataRateIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataRateIndex |= (DataRateIndex(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRetries", wireType)
			}
			m.MaxRetries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRetries |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodExponent", wireType)
			}
			m.PeriodExponent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeriodExponent |= (RejoinPeriodExponent(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_RejoinParamSetupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RejoinParamSetupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RejoinParamSetupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCountExponent", wireType)
			}
			m.MaxCountExponent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxCountExponent |= (RejoinCountExponent(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTimeExponent", wireType)
			}
			m.MaxTimeExponent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTimeExponent |= (RejoinTimeExponent(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_RejoinParamSetupAns) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RejoinParamSetupAns: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RejoinParamSetupAns: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTimeExponentAck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxTimeExponentAck = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_PingSlotInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingSlotInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingSlotInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= (PingSlotPeriod(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_PingSlotChannelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingSlotChannelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingSlotChannelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			m.Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRateIndex", wireType)
			}
			m.DataRateIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataRateIndex |= (DataRateIndex(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_PingSlotChannelAns) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingSlotChannelAns: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingSlotChannelAns: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyAck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FrequencyAck = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRateIndexAck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DataRateIndexAck = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_BeaconTimingAns) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeaconTimingAns: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeaconTimingAns: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delay", wireType)
			}
			m.Delay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Delay |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelIndex", wireType)
			}
			m.ChannelIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_BeaconFreqReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeaconFreqReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeaconFreqReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			m.Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_BeaconFreqAns) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeaconFreqAns: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeaconFreqAns: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyAck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FrequencyAck = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_DeviceModeInd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceModeInd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceModeInd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Class", wireType)
			}
			m.Class = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Class |= (Class(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_DeviceModeConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceModeConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceModeConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Class", wireType)
			}
			m.Class = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Class |= (Class(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLorawan(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLorawan
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLorawan
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLorawan(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLorawan = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLorawan   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("lorawan-stack/api/lorawan.proto", fileDescriptor_lorawan_58aef822c5219cad)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/lorawan.proto", fileDescriptor_lorawan_58aef822c5219cad)
}

var fileDescriptor_lorawan_58aef822c5219cad = []byte{
	// 5197 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x7b, 0x4f, 0x6c, 0x23, 0xc9,
	0x75, 0x37, 0x29, 0x92, 0x22, 0xf5, 0x48, 0x8a, 0x3d, 0x25, 0xcd, 0x8c, 0x86, 0xde, 0xa5, 0xd6,
	0x9a, 0xfd, 0xf0, 0x8d, 0xc7, 0x1e, 0x8d, 0x44, 0x69, 0xb4, 0x5a, 0xaf, 0xff, 0xf1, 0x9f, 0x56,
	0xdc, 0x91, 0x48, 0xb9, 0x29, 0xcd, 0xec, 0x18, 0x36, 0xfa, 0x6b, 0xb1, 0x9b, 0x12, 0x57, 0x64,
	0x37, 0xb7, 0xd9, 0x1a, 0x49, 0xdf, 0x21, 0x58, 0x20, 0x97, 0x05, 0x72, 0x88, 0x11, 0x20, 0x40,
	0x8c, 0x1c, 0x6c, 0x24, 0x39, 0x18, 0x08, 0x82, 0x18, 0x08, 0x82, 0xec, 0xd1, 0x01, 0x72, 0x30,
	0x72, 0xda, 0x20, 0x17, 0xc3, 0x41, 0x64, 0x0f, 0xe7, 0xe2, 0x5c, 0x12, 0x1f, 0x7d, 0x0c, 0x5e,
	0x55, 0x35, 0xbb, 0xaa, 0x5b, 0x33, 0xd2, 0xec, 0xae, 0x4f, 0xea, 0xfa, 0xf5, 0xab, 0x57, 0xaf,
	0xde, 0xdf, 0x7a, 0xd5, 0x14, 0xcc, 0xf7, 0x6c, 0x47, 0x3f, 0xd1, 0xad, 0x7b, 0x43, 0x57, 0x6f,
	0x1f, 0xdd, 0xd7, 0x07, 0xdd, 0xfb, 0x1c, 0x59, 0x1c, 0x38, 0xb6, 0x6b, 0x93, 0x69, 0xd7, 0xb5,
	0x16, 0x3d, 0xe8, 0xe9, 0x4a, 0xfe, 0xde, 0x41, 0xd7, 0x3d, 0x3c, 0xde, 0x5f, 0x6c, 0xdb, 0xfd,
	0xfb, 0x07, 0xf6, 0x81, 0x7d, 0x9f, 0x92, 0xed, 0x1f, 0x77, 0xe8, 0x88, 0x0e, 0xe8, 0x13, 0x9b,
	0x9e, 0x5f, 0x13, 0xc8, 0xfb, 0x27, 0x5d, 0xf7, 0xc8, 0x3e, 0xb9, 0x7f, 0x60, 0xdf, 0xa3, 0x2f,
	0xef, 0x3d, 0xd5, 0x7b, 0x5d, 0x43, 0x77, 0x6d, 0x67, 0x78, 0x7f, 0xfc, 0xc8, 0xe7, 0xbd, 0x76,
	0x60, 0xdb, 0x07, 0x3d, 0xd3, 0xe7, 0x3e, 0x74, 0x9d, 0xe3, 0xb6, 0xcb, 0xdf, 0xce, 0x07, 0xdf,
	0xba, 0xdd, 0xbe, 0x39, 0x74, 0xf5, 0xfe, 0x80, 0x13, 0xdc, 0x0e, 0x6f, 0xab, 0x6b, 0x98, 0x96,
	0xdb, 0xed, 0x74, 0x4d, 0x67, 0xc8, 0x88, 0x16, 0xfe, 0x35, 0x06, 0xc9, 0x6d, 0x73, 0x38, 0xd4,
	0x0f, 0x4c, 0xb2, 0x02, 0x89, 0xbe, 0x76, 0x68, 0x38, 0x73, 0xd1, 0x37, 0xa2, 0x77, 0xd2, 0xc5,
	0xd9, 0x45, 0x79, 0xdb, 0x8b, 0xdb, 0x9b, 0x55, 0xb5, 0x9c, 0xfa, 0xc5, 0xf9, 0x7c, 0xe4, 0xd3,
	0xf3, 0xf9, 0xa8, 0x1a, 0xef, 0x6f, 0x1a, 0x0e, 0xb9, 0x05, 0xb1, 0x7e, 0xb7, 0x3d, 0x37, 0xf1,
	0x46, 0xf4, 0x4e, 0xa6, 0x9c, 0x1c, 0x9d, 0xcf, 0xc7, 0xb6, 0xeb, 0x15, 0x15, 0x31, 0xb2, 0x0d,
	0xe9, 0xbe, 0xde, 0xd6, 0x06, 0xfa, 0x59, 0xcf, 0xd6, 0x8d, 0xb9, 0x18, 0xe5, 0x9a, 0x0f, 0x71,
	0x2d, 0x55, 0x76, 0x18, 0x45, 0x79, 0x7a, 0x74, 0x3e, 0x0f, 0xfe, 0x78, 0x33, 0xa2, 0x42, 0x5f,
	0x6f, 0xf3, 0x11, 0x79, 0x04, 0xb3, 0x1f, 0xd8, 0x5d, 0x4b, 0x73, 0xcc, 0x0f, 0x8f, 0xcd, 0xa1,
	0x3b, 0xe6, 0x1b, 0xa7, 0x7c, 0x17, 0x82, 0x7c, 0xdf, 0xb3, 0xbb, 0x96, 0xca, 0x48, 0x7d, 0x7e,
	0xe4, 0x83, 0x10, 0x4a, 0x5a, 0x30, 0x43, 0xf9, 0xea, 0xed, 0xb6, 0x39, 0xf0, 0xd9, 0x26, 0x28,
	0xdb, 0x2f, 0x5f, 0xc4, 0xb6, 0x44, 0x29, 0x7d, 0xae, 0xd7, 0x3e, 0x08, 0x82, 0xe4, 0xfb, 0x70,
	0xc3, 0x31, 0x2f, 0x14, 0x77, 0x92, 0xf2, 0x7d, 0x33, 0xc8, 0x57, 0x35, 0x3f, 0xb8, 0x48, 0xe0,
	0x59, 0xe7, 0x02, 0xfc, 0xeb, 0xf1, 0x4f, 0x7e, 0x32, 0x1f, 0x29, 0x4f, 0x41, 0x92, 0x03, 0xef,
	0xc5, 0x53, 0x49, 0x25, 0xb5, 0xa0, 0x43, 0x1c, 0x6d, 0x44, 0xbe, 0x06, 0x93, 0x7d, 0xcd, 0x3d,
	0x1b, 0x98, 0xd4, 0x92, 0xd3, 0xc5, 0xeb, 0x21, 0x9d, 0xef, 0x9e, 0x0d, 0x4c, 0x35, 0xd1, 0xc7,
	0x3f, 0xe4, 0xab, 0x90, 0xe8, 0xeb, 0x1f, 0xd8, 0x0e, 0xb5, 0xe1, 0x45, 0xc4, 0xf8, 0x52, 0x65,
	0x34, 0x0b, 0xbf, 0x8a, 0x82, 0x60, 0x21, 0x74, 0x99, 0xce, 0xcb, 0x5c, 0x66, 0x23, 0xe0, 0x32,
	0x1d, 0x74, 0x99, 0x02, 0x4c, 0x76, 0xb4, 0x81, 0xed, 0xb8, 0x74, 0xc5, 0x6c, 0x39, 0x39, 0xfa,
	0xf5, 0x7c, 0x6c, 0xee, 0xa3, 0x09, 0x35, 0xd1, 0xd9, 0xb1, 0x1d, 0x97, 0xdc, 0x87, 0x74, 0xc7,
	0xe9, 0x4b, 0x7e, 0x93, 0x61, 0xbe, 0xb1, 0xa1, 0x6e, 0xf3, 0x95, 0x55, 0xe8, 0x38, 0x7d, 0x4f,
	0x8a, 0xef, 0x40, 0xce, 0x30, 0xdb, 0xb6, 0x61, 0x1a, 0x01, 0xa7, 0xb8, 0xb9, 0xc8, 0x82, 0x64,
	0xd1, 0x0b, 0x92, 0xc5, 0x16, 0x0d, 0x21, 0x75, 0x9a, 0xd3, 0x4b, 0x0a, 0x5d, 0xf8, 0xf7, 0x28,
	0xc4, 0x51, 0x62, 0xf2, 0x18, 0x52, 0x86, 0xf9, 0x54, 0xd3, 0x0d, 0xbe, 0xb3, 0x4c, 0xf9, 0x1b,
	0xb8, 0x87, 0x5f, 0x9d, 0xcf, 0xaf, 0x1e, 0xd8, 0x8b, 0xee, 0xa1, 0xe9, 0x1e, 0x76, 0xad, 0x83,
	0xe1, 0xa2, 0x65, 0xba, 0x27, 0xb6, 0x73, 0x74, 0x5f, 0x8e, 0xb4, 0xc1, 0xd1, 0xc1, 0x7d, 0xd4,
	0xfe, 0x70, 0xb1, 0x6a, 0x3e, 0x2d, 0x19, 0x86, 0xa3, 0x26, 0x0d, 0xf6, 0x40, 0xd6, 0x70, 0xeb,
	0x6d, 0xd7, 0xe9, 0xd1, 0xad, 0xa7, 0xc3, 0xca, 0xde, 0xa8, 0xb8, 0x4e, 0x4f, 0xd0, 0x58, 0xa2,
	0x83, 0x00, 0x79, 0x1d, 0xf5, 0xdc, 0xb6, 0x5c, 0xaa, 0x8c, 0x6c, 0x39, 0x35, 0xfa, 0xf5, 0x7c,
	0x7c, 0xee, 0xa3, 0x8f, 0xe2, 0x6a, 0xbc, 0x53, 0xb1, 0x5c, 0x72, 0x1d, 0xd9, 0xda, 0x03, 0x77,
	0x48, 0xf7, 0x9d, 0x51, 0x13, 0x9d, 0xe6, 0xc0, 0x1d, 0xf2, 0x5d, 0xfd, 0x28, 0x0a, 0x09, 0xca,
	0x16, 0x63, 0x55, 0xe7, 0x3b, 0x4a, 0xb1, 0x58, 0x2d, 0x55, 0x55, 0x15, 0x31, 0x72, 0x0f, 0xd2,
	0xba, 0xe1, 0x68, 0x7a, 0xfb, 0x08, 0x1d, 0x96, 0x4a, 0x97, 0x2a, 0x67, 0x47, 0xe7, 0xf3, 0x53,
	0xa5, 0xaa, 0x5a, 0x6a, 0x1f, 0xa9, 0xe6, 0x87, 0xea, 0x94, 0x6e, 0x38, 0xec, 0x91, 0x28, 0x10,
	0xd3, 0xdb, 0x47, 0x54, 0x9a, 0x94, 0x8a, 0x8f, 0xe4, 0x4b, 0x30, 0xd5, 0xd1, 0x06, 0xa6, 0x65,
	0x74, 0xad, 0x03, 0x2a, 0x45, 0x4a, 0x4d, 0x75, 0x76, 0xd8, 0x98, 0xdc, 0x84, 0x64, 0xbb, 0xa7,
	0x0f, 0x87, 0xda, 0x3e, 0x0d, 0xab, 0x94, 0x3a, 0x49, 0x87, 0xe5, 0x85, 0x7f, 0x9a, 0x00, 0x12,
	0x0e, 0x54, 0xf2, 0xff, 0x20, 0x45, 0x63, 0xc7, 0x3c, 0xee, 0x72, 0xfd, 0xd7, 0xb8, 0xfe, 0x8b,
	0xaf, 0xa4, 0xff, 0xda, 0x5e, 0x7d, 0x6d, 0x75, 0x74, 0x3e, 0x9f, 0xc4, 0x35, 0x6a, 0x7b, 0x75,
	0x35, 0x89, 0x6c, 0x6b, 0xc7, 0x5d, 0xf2, 0x03, 0x40, 0x9b, 0xd0, 0x05, 0x58, 0xea, 0xaa, 0x7e,
	0xae, 0x05, 0x26, 0xab, 0xe6, 0x53, 0xe4, 0x3f, 0x69, 0x98, 0x4f, 0x91, 0xfd, 0xf7, 0x60, 0x0a,
	0xd9, 0x5b, 0xb6, 0xd5, 0x36, 0xb9, 0x03, 0x7f, 0x93, 0x2f, 0xf0, 0xe0, 0x55, 0x3d, 0xa8, 0x81,
	0x4c, 0x54, 0x74, 0x48, 0xfa, 0xc4, 0xad, 0xfa, 0xe7, 0x31, 0x98, 0xbd, 0x28, 0x67, 0x90, 0x77,
	0x20, 0xcd, 0x33, 0x8f, 0x90, 0x01, 0xf2, 0x17, 0xa7, 0x1b, 0x9a, 0x06, 0xc0, 0x19, 0x3f, 0x93,
	0xef, 0xc1, 0xa4, 0x65, 0xba, 0x5a, 0xd7, 0xe0, 0x5a, 0xa9, 0x7c, 0x26, 0xad, 0x34, 0x4c, 0xb7,
	0x5e, 0x1d, 0x9d, 0xcf, 0x27, 0xe8, 0x83, 0x9a, 0xb0, 0x4c, 0xb7, 0x2e, 0x1b, 0x35, 0xf6, 0x87,
	0x36, 0x6a, 0xfc, 0x0f, 0x60, 0xd4, 0xd7, 0x81, 0xab, 0x8a, 0x46, 0x22, 0x3a, 0x72, 0x56, 0x9d,
	0x62, 0x48, 0xc5, 0x72, 0xb9, 0x5d, 0xfe, 0x38, 0x0e, 0xd7, 0x42, 0x35, 0x82, 0xbc, 0x06, 0x53,
	0xa6, 0xd5, 0x76, 0xce, 0x06, 0xae, 0x69, 0x30, 0x8f, 0x56, 0x7d, 0x80, 0xfc, 0x00, 0x80, 0xb2,
	0x65, 0xee, 0xc2, 0x34, 0xff, 0x2d, 0x2e, 0xfa, 0xda, 0x2b, 0x89, 0x8e, 0x2b, 0x33, 0x7f, 0x99,
	0xfa, 0xc0, 0x7b, 0x14, 0x8c, 0x1a, 0xfb, 0xc2, 0x8d, 0x2a, 0x66, 0xca, 0xf8, 0x17, 0x99, 0x29,
	0x6b, 0x90, 0x36, 0x7a, 0xda, 0xd0, 0x74, 0x5d, 0x9c, 0xcf, 0xab, 0x71, 0xc8, 0x8d, 0xab, 0x5b,
	0x2d, 0x4e, 0x21, 0xe4, 0x4c, 0x30, 0x7a, 0x1e, 0x4a, 0x8a, 0x90, 0x72, 0x4e, 0x35, 0xc3, 0xec,
	0xe9, 0x67, 0xb4, 0xf2, 0x4e, 0x17, 0x6f, 0x86, 0x42, 0xe1, 0xb4, 0x8a, 0xaf, 0xd5, 0xa4, 0xc3,
	0x1e, 0xc8, 0x3b, 0x90, 0x6c, 0x77, 0xb4, 0x5e, 0x77, 0xe8, 0xce, 0x25, 0xe9, 0xb2, 0x37, 0x82,
	0x53, 0x2a, 0x1b, 0x5b, 0xdd, 0xa1, 0x5b, 0x06, 0x74, 0x12, 0xf6, 0xac, 0x4e, 0xb6, 0x3b, 0xf8,
	0x97, 0x7b, 0xc1, 0xdf, 0x45, 0x01, 0x7c, 0xd9, 0xc8, 0x0a, 0x64, 0x9d, 0xd3, 0x65, 0xcd, 0x70,
	0x34, 0xbb, 0xd3, 0x19, 0x9a, 0x2e, 0x75, 0x81, 0x6c, 0x39, 0x37, 0x3a, 0x9f, 0x4f, 0xab, 0xa7,
	0xcb, 0x55, 0xb5, 0x49, 0x61, 0x35, 0xed, 0x9c, 0x2e, 0x57, 0x1d, 0x36, 0x20, 0xdf, 0x86, 0x49,
	0xe7, 0xb4, 0xa8, 0x19, 0x5e, 0x61, 0x7e, 0x3d, 0xb4, 0x79, 0xdd, 0xd5, 0x55, 0xdd, 0x35, 0xeb,
	0x96, 0x61, 0x9e, 0x96, 0xa7, 0xd0, 0x36, 0xea, 0x69, 0xb1, 0xaa, 0xaa, 0x09, 0xe7, 0xb4, 0x58,
	0x75, 0xc8, 0x6d, 0x48, 0xda, 0x03, 0x57, 0xb3, 0xcc, 0x03, 0x96, 0xa8, 0x99, 0xbc, 0xcd, 0x81,
	0xdb, 0x30, 0x0f, 0xd4, 0x49, 0x9b, 0xfe, 0xe5, 0xf2, 0xf6, 0x81, 0xef, 0x83, 0x2c, 0x42, 0xfc,
	0x65, 0x79, 0x83, 0x51, 0xd1, 0xbc, 0x41, 0xe9, 0x08, 0x81, 0x78, 0x87, 0x55, 0x8c, 0xd8, 0x9d,
	0xac, 0x4a, 0x9f, 0xc9, 0x2d, 0x48, 0xb5, 0x0f, 0xb5, 0xbe, 0x3e, 0x3c, 0x1a, 0xce, 0xc5, 0xde,
	0x88, 0xdd, 0x49, 0xa9, 0xc9, 0xf6, 0xe1, 0x36, 0x0e, 0xf9, 0x72, 0x8f, 0x21, 0xb3, 0x65, 0xab,
	0xba, 0xb7, 0x01, 0x0c, 0x8f, 0x7d, 0xdd, 0x32, 0x4e, 0xba, 0x86, 0x7b, 0xc8, 0x74, 0xa3, 0xfa,
	0x00, 0xf9, 0x0a, 0x28, 0xc3, 0x81, 0x63, 0xea, 0x58, 0x4a, 0xb4, 0x8e, 0xde, 0x76, 0xf9, 0x59,
	0x25, 0xab, 0xe6, 0xc6, 0xf8, 0x06, 0x85, 0x17, 0xee, 0x40, 0x7a, 0xa3, 0xf5, 0x70, 0xcc, 0xf7,
	0x16, 0xa4, 0xf6, 0xbb, 0xae, 0xe6, 0xe8, 0xae, 0xc9, 0xd9, 0x26, 0xf7, 0xbb, 0x2e, 0xbe, 0x5a,
	0xf8, 0x61, 0x14, 0x52, 0x63, 0xba, 0x6f, 0x40, 0x1c, 0xf7, 0xc8, 0x4f, 0x31, 0xaf, 0x05, 0x37,
	0x2d, 0xca, 0x5a, 0x4e, 0x8d, 0xce, 0xe7, 0xe3, 0x88, 0x6c, 0x46, 0x54, 0x3a, 0x8b, 0xac, 0x43,
	0xac, 0x33, 0x3c, 0xe2, 0x15, 0xfd, 0x4b, 0xa1, 0x8a, 0xee, 0xcb, 0xc3, 0x6a, 0xee, 0x46, 0xeb,
	0xe1, 0x66, 0x44, 0xc5, 0x29, 0xe5, 0x0c, 0x40, 0xdf, 0x36, 0x8e, 0x7b, 0xba, 0xdb, 0xb5, 0xad,
	0x85, 0xbf, 0x8c, 0x03, 0xec, 0x9e, 0x8e, 0x9d, 0xe6, 0x1d, 0x98, 0x32, 0x74, 0x57, 0xf7, 0xa5,
	0x4f, 0x17, 0xe7, 0x5e, 0xe4, 0x02, 0xe5, 0x38, 0x7a, 0xbf, 0x9a, 0x32, 0xbc, 0x1d, 0xd5, 0x20,
	0x37, 0x9e, 0xac, 0x75, 0xd1, 0x41, 0xae, 0xe4, 0x45, 0x6a, 0xd6, 0x10, 0x87, 0x64, 0x1e, 0xd2,
	0x6d, 0x9b, 0xea, 0x9d, 0x4a, 0x81, 0x6e, 0x34, 0xa5, 0x02, 0x83, 0x3c, 0xcb, 0x75, 0xe8, 0x09,
	0xd7, 0x6a, 0x9f, 0xd1, 0x04, 0x10, 0x57, 0x7d, 0x00, 0xf5, 0xef, 0x9e, 0x6a, 0x03, 0xfb, 0xc4,
	0x74, 0x68, 0x04, 0x27, 0xd4, 0xa4, 0x7b, 0xba, 0x83, 0x43, 0x72, 0x1f, 0x66, 0xba, 0xd6, 0x53,
	0xd3, 0x71, 0xb5, 0x81, 0xdd, 0xd3, 0x9d, 0xee, 0xff, 0xa7, 0x3a, 0xa0, 0x31, 0x9a, 0x52, 0x09,
	0x7b, 0xb5, 0x23, 0xbc, 0x21, 0xef, 0xc0, 0xf5, 0x03, 0xdd, 0x35, 0x4f, 0xf4, 0x33, 0xad, 0x7d,
	0xa8, 0x5b, 0x96, 0xd9, 0xe3, 0xfb, 0x4a, 0xca, 0x87, 0xc8, 0x19, 0x4e, 0x55, 0x61, 0x44, 0x6c,
	0x1f, 0x6f, 0xc3, 0xac, 0x61, 0x3e, 0xed, 0xb6, 0xcd, 0xc0, 0xdc, 0x94, 0x3c, 0x97, 0x30, 0x22,
	0x69, 0xea, 0xd7, 0x00, 0x4c, 0x4b, 0xdf, 0xef, 0x99, 0x5a, 0xdb, 0x69, 0xcf, 0x4d, 0xf9, 0x07,
	0xa3, 0x1a, 0x45, 0x2b, 0x6a, 0x05, 0x53, 0x39, 0x7d, 0x74, 0xda, 0xa8, 0x8f, 0x71, 0x1f, 0x36,
	0x07, 0xcc, 0x93, 0xc7, 0x00, 0x59, 0x85, 0x38, 0x0e, 0xe6, 0xd2, 0x3c, 0x9b, 0x05, 0x4f, 0xa7,
	0xbb, 0x1e, 0x65, 0x39, 0xfe, 0xc3, 0x5f, 0xe3, 0x79, 0x19, 0xa9, 0x79, 0xcc, 0xfc, 0x69, 0x14,
	0x6e, 0xbd, 0xcb, 0xb6, 0x56, 0xb2, 0x5c, 0xd3, 0xb2, 0xf4, 0xba, 0xdf, 0xcd, 0x61, 0xaf, 0xe5,
	0x69, 0xa7, 0x6b, 0x0c, 0xb9, 0xbb, 0x84, 0x7a, 0x22, 0x3e, 0x5f, 0x98, 0x28, 0xa6, 0xcd, 0x03,
	0xef, 0xed, 0x90, 0xdc, 0x86, 0xac, 0xce, 0x16, 0x11, 0x9c, 0x27, 0xab, 0x66, 0x38, 0x48, 0x35,
	0xb3, 0xe0, 0x40, 0x7a, 0x6f, 0xd0, 0xeb, 0x5a, 0x47, 0xbb, 0xf6, 0x91, 0x69, 0x91, 0x1a, 0xc4,
	0xfc, 0xa5, 0xbf, 0xf2, 0x82, 0xa5, 0xc3, 0xa2, 0x0b, 0x12, 0xe0, 0x7c, 0x59, 0x83, 0x13, 0x01,
	0x0d, 0x2e, 0xfc, 0x11, 0x64, 0xaa, 0xf6, 0x89, 0x85, 0xab, 0xee, 0xe8, 0xee, 0x21, 0xb9, 0x0d,
	0x99, 0x63, 0x2a, 0x83, 0xe6, 0xa2, 0x10, 0xac, 0xb6, 0x6e, 0x46, 0xd4, 0xf4, 0xb1, 0x20, 0x59,
	0x09, 0x12, 0x9d, 0xee, 0xa9, 0x69, 0xf0, 0x10, 0xbd, 0xba, 0x6c, 0x9b, 0x11, 0x95, 0xcd, 0x2c,
	0x4f, 0x42, 0x7c, 0xa0, 0xbb, 0x87, 0x0b, 0xff, 0x11, 0x87, 0xa9, 0xdd, 0x53, 0x7e, 0xe4, 0xc2,
	0xd6, 0x89, 0x1e, 0x64, 0x5f, 0xd4, 0x67, 0x55, 0xf0, 0xa5, 0xca, 0x68, 0x48, 0x05, 0xa6, 0x0d,
	0x2e, 0xba, 0x86, 0xbc, 0x86, 0x34, 0x67, 0x5e, 0x90, 0x6e, 0xc4, 0x0d, 0xaa, 0x59, 0x43, 0x18,
	0x0d, 0xc9, 0x2a, 0x4c, 0xd1, 0x4a, 0x42, 0x0b, 0x5a, 0xec, 0xe5, 0x05, 0x2d, 0x85, 0xd5, 0x84,
	0x56, 0xb4, 0x2d, 0x98, 0xa1, 0xb3, 0x02, 0x19, 0x21, 0x7e, 0x95, 0x8c, 0xa0, 0x20, 0x17, 0x29,
	0x29, 0xdc, 0x66, 0xd5, 0xcc, 0x8f, 0xfb, 0x04, 0x8d, 0xfb, 0x8c, 0x73, 0xba, 0xbc, 0x31, 0x0e,
	0x7d, 0xba, 0x64, 0x31, 0xb4, 0xe4, 0xe4, 0x15, 0x97, 0x2c, 0x5e, 0xb0, 0x64, 0x51, 0x58, 0x32,
	0xe9, 0x2d, 0x59, 0xf4, 0x97, 0xfc, 0x16, 0xa4, 0x06, 0x4e, 0xd7, 0x76, 0xba, 0xee, 0x19, 0x0d,
	0xec, 0xe9, 0x70, 0x00, 0xec, 0x9e, 0xb6, 0xda, 0x87, 0xa6, 0x71, 0xdc, 0x33, 0x77, 0x38, 0xa5,
	0x3a, 0x9e, 0x43, 0x6a, 0x90, 0xd5, 0xf7, 0x87, 0x76, 0xef, 0xd8, 0x35, 0x35, 0x1a, 0xa6, 0x53,
	0x57, 0x0c, 0xd3, 0x8c, 0x37, 0x0d, 0x5f, 0x90, 0x15, 0x48, 0xe9, 0xc6, 0x53, 0xdd, 0x6a, 0x9b,
	0xc6, 0x5c, 0xfb, 0xe5, 0x6d, 0xe8, 0x98, 0x90, 0xc7, 0xf8, 0x7f, 0x2d, 0xd1, 0xee, 0xba, 0x62,
	0xf7, 0xfb, 0xba, 0x65, 0x90, 0x6f, 0x43, 0xac, 0xdd, 0x35, 0xb8, 0x73, 0xbd, 0x79, 0xc1, 0xc5,
	0x09, 0x27, 0xf4, 0x3d, 0x96, 0x55, 0x98, 0x4a, 0xbd, 0xaa, 0xe2, 0x4c, 0xf2, 0x65, 0x48, 0x3b,
	0xfa, 0xc9, 0xb8, 0x29, 0x9e, 0xe0, 0xc1, 0x01, 0x8e, 0x7e, 0xe2, 0x9d, 0x4c, 0xcb, 0x30, 0xe5,
	0x98, 0x43, 0x3c, 0x1e, 0x5a, 0xde, 0x15, 0xcd, 0xed, 0x17, 0xaf, 0xb4, 0xa8, 0x22, 0x6d, 0xdd,
	0x32, 0x36, 0x23, 0x6a, 0xca, 0xe1, 0xcf, 0xa4, 0x86, 0x07, 0x63, 0xe4, 0xd1, 0xb6, 0xad, 0x0e,
	0x6f, 0xbd, 0xdf, 0xbc, 0x8c, 0x49, 0xc5, 0xb6, 0x3a, 0x9b, 0x11, 0x95, 0xad, 0x8e, 0x03, 0xd2,
	0x84, 0x69, 0x1a, 0x1c, 0xed, 0x43, 0xb3, 0x7d, 0xa4, 0xe9, 0x96, 0x77, 0xea, 0xfb, 0xbf, 0x2f,
	0x61, 0xb5, 0xd5, 0xb5, 0x8e, 0x2a, 0x48, 0x5f, 0xb2, 0x30, 0x5a, 0x33, 0x3d, 0x61, 0x4c, 0x9e,
	0x00, 0x1d, 0x6b, 0xd8, 0xd9, 0xe2, 0x19, 0x85, 0x5d, 0xbd, 0xfc, 0x9f, 0x4b, 0xd8, 0x61, 0x4f,
	0x6c, 0x7e, 0xc8, 0x2e, 0x1c, 0xfc, 0x31, 0xaa, 0x0d, 0x99, 0x95, 0x0c, 0x07, 0x1b, 0x60, 0x91,
	0x35, 0x4a, 0x9a, 0xbc, 0x2a, 0xeb, 0x92, 0x35, 0x94, 0x58, 0x33, 0xb9, 0x3d, 0xd6, 0x28, 0x75,
	0x13, 0xa6, 0x8d, 0x63, 0xf7, 0x4c, 0x6b, 0x9f, 0xb5, 0x7b, 0x26, 0x95, 0x3b, 0x75, 0xa9, 0x1a,
	0xaa, 0xc7, 0xee, 0x59, 0x05, 0xe9, 0x99, 0xa4, 0x19, 0x43, 0x18, 0x93, 0x27, 0x40, 0x9c, 0x53,
	0x6d, 0xa0, 0x3b, 0x7a, 0x1f, 0x0f, 0xd4, 0xc7, 0x03, 0xca, 0x94, 0x39, 0xf7, 0xdd, 0x97, 0x99,
	0xe9, 0x74, 0x07, 0xe7, 0xb4, 0x70, 0x0a, 0xe3, 0x9b, 0x73, 0x64, 0xe8, 0x02, 0xd6, 0xa8, 0x0c,
	0x78, 0x25, 0xd6, 0x4c, 0x03, 0x12, 0x6b, 0x4f, 0x0d, 0xe6, 0x53, 0x6d, 0xe8, 0xea, 0xee, 0xf1,
	0x90, 0xb2, 0x4d, 0x5f, 0xae, 0x06, 0xf3, 0x69, 0x8b, 0xd2, 0x73, 0x6f, 0x30, 0x84, 0x31, 0x51,
	0x21, 0x67, 0x99, 0x27, 0xe3, 0x03, 0x00, 0xea, 0x20, 0x43, 0x39, 0xde, 0x79, 0x09, 0xc7, 0x86,
	0x79, 0xc2, 0x4f, 0x03, 0x4c, 0x03, 0x59, 0x4b, 0x04, 0x82, 0x3c, 0x51, 0xca, 0xec, 0x2b, 0xf0,
	0x64, 0x62, 0x0a, 0x3c, 0x51, 0x4e, 0x1d, 0xa6, 0x8d, 0x9e, 0x24, 0xe6, 0xf4, 0xe5, 0x1b, 0xdf,
	0xf2, 0x85, 0x2a, 0x2b, 0xa3, 0xf3, 0xf9, 0x8c, 0x88, 0x50, 0x55, 0xf4, 0x04, 0xb1, 0xe5, 0x25,
	0x50, 0xea, 0xdc, 0xd5, 0x97, 0x40, 0x0f, 0x96, 0x97, 0xf0, 0xb4, 0xdd, 0x13, 0x76, 0xf1, 0x7d,
	0xcc, 0xff, 0x98, 0x46, 0xf1, 0xf0, 0xe8, 0x7b, 0x9d, 0x42, 0xd7, 0xf9, 0xea, 0x4b, 0x5d, 0x63,
	0x97, 0x4e, 0x12, 0xdc, 0x4e, 0x71, 0x02, 0x18, 0xfa, 0x9d, 0x1b, 0x76, 0xe9, 0x6b, 0x97, 0xfa,
	0xdd, 0x6e, 0xd8, 0xa5, 0xdd, 0x80, 0x4b, 0xd3, 0x84, 0x78, 0x64, 0x9e, 0xd1, 0x84, 0x48, 0xae,
	0x90, 0x10, 0x8f, 0xcc, 0xb3, 0x71, 0x42, 0x64, 0xcf, 0x2c, 0x21, 0x22, 0x0f, 0x9a, 0x10, 0x67,
	0xae, 0x90, 0x10, 0x8f, 0xcc, 0x33, 0x3f, 0x21, 0xf2, 0x01, 0x71, 0x60, 0x06, 0xf3, 0x4b, 0x70,
	0x9b, 0xb3, 0x97, 0xea, 0xb0, 0x54, 0x55, 0xa5, 0x4d, 0x95, 0x67, 0x47, 0xe7, 0xf3, 0x4a, 0x10,
	0x45, 0xcd, 0xea, 0x86, 0x23, 0x6f, 0x5f, 0x85, 0x1c, 0x3f, 0x29, 0x63, 0x09, 0xa4, 0xbe, 0x71,
	0xfd, 0x52, 0x8f, 0xae, 0xd2, 0x19, 0x58, 0xfd, 0xb8, 0x47, 0x1b, 0x22, 0x40, 0xf6, 0x40, 0xe9,
	0xd8, 0x4e, 0x1b, 0x93, 0x99, 0x77, 0x25, 0x3e, 0x77, 0xe3, 0xe2, 0xa3, 0x98, 0xc0, 0x74, 0x03,
	0xa7, 0x8c, 0xaf, 0xb8, 0x36, 0x23, 0xea, 0x74, 0x47, 0x42, 0x88, 0x39, 0xbe, 0x63, 0x0f, 0x6a,
	0xe8, 0x26, 0x65, 0xbe, 0xf8, 0x52, 0x8d, 0xe3, 0xc4, 0xa0, 0x3a, 0x66, 0x9c, 0x30, 0xfc, 0x82,
	0x65, 0x50, 0x31, 0x73, 0xaf, 0xbc, 0x0c, 0x53, 0x4f, 0x68, 0x19, 0x56, 0xac, 0xc8, 0x80, 0xc6,
	0x4a, 0xcf, 0xc6, 0x62, 0xdc, 0xb1, 0xe9, 0x4e, 0x6e, 0x5d, 0xea, 0xd2, 0x3b, 0x18, 0x17, 0x3d,
	0xdb, 0xad, 0x5b, 0x1d, 0x9b, 0xbb, 0xf4, 0x40, 0x86, 0xc8, 0x3e, 0x5c, 0xf7, 0x59, 0x8b, 0x89,
	0x25, 0x4f, 0xb9, 0xdf, 0xbb, 0x02, 0x77, 0x29, 0x99, 0x90, 0x41, 0x08, 0xbd, 0x78, 0x0d, 0x54,
	0xd2, 0x97, 0x5e, 0x75, 0x0d, 0xa6, 0xa3, 0xe0, 0x1a, 0xa8, 0xa2, 0xf7, 0xe1, 0xda, 0xbe, 0xa9,
	0xb7, 0x6d, 0xcb, 0xcb, 0x2b, 0xc8, 0xff, 0xb5, 0x4b, 0x35, 0x54, 0xa6, 0x73, 0x58, 0x06, 0xe1,
	0xc5, 0x66, 0x5f, 0x86, 0xd0, 0xeb, 0x39, 0x67, 0x3c, 0x62, 0x52, 0xdd, 0xbc, 0x7e, 0xa9, 0xd7,
	0x33, 0xbe, 0x78, 0xfe, 0xe4, 0xb5, 0x61, 0x5f, 0x04, 0x82, 0x3c, 0x51, 0xd6, 0xc2, 0x2b, 0xf0,
	0xe4, 0x91, 0xb4, 0x2f, 0x02, 0x42, 0x74, 0xf6, 0x6d, 0x83, 0x9e, 0xa9, 0xe7, 0xe6, 0xaf, 0x18,
	0x9d, 0xdb, 0xb6, 0x61, 0xb2, 0x3c, 0xc5, 0xa3, 0x93, 0x03, 0x18, 0x9d, 0x22, 0x4f, 0x9a, 0xb2,
	0xde, 0xb8, 0x34, 0x3a, 0x7d, 0xa6, 0x3c, 0x6f, 0x4d, 0x1b, 0x12, 0x92, 0xdf, 0x80, 0x94, 0x77,
	0x58, 0x24, 0x5f, 0x87, 0x6c, 0xbf, 0x6b, 0xd9, 0x8e, 0xf6, 0xd4, 0x74, 0x86, 0xd8, 0xe6, 0xbf,
	0xe8, 0xbb, 0x14, 0x12, 0xa9, 0x19, 0x4a, 0xfb, 0x88, 0x91, 0xe6, 0xdf, 0x85, 0xa9, 0xf1, 0x79,
	0xf1, 0x73, 0x31, 0x7a, 0x08, 0x19, 0xf1, 0xb4, 0x48, 0x6e, 0xc0, 0x64, 0x5f, 0x77, 0x0e, 0xba,
	0x16, 0xbf, 0x1a, 0xe2, 0x23, 0xec, 0x35, 0xc6, 0x17, 0x0d, 0xf6, 0xb1, 0xe5, 0x7a, 0xbd, 0xaf,
	0x77, 0xaf, 0x80, 0x58, 0xfe, 0x7f, 0xa2, 0x20, 0x1c, 0x0e, 0x2f, 0xba, 0x6e, 0x89, 0x7e, 0x86,
	0xeb, 0x96, 0x37, 0x61, 0xda, 0xbb, 0x2f, 0x91, 0xfb, 0x6e, 0x7e, 0x6b, 0xc2, 0xa8, 0xbe, 0x0c,
	0x19, 0x2f, 0xc0, 0xfa, 0xfa, 0xf0, 0x88, 0x5f, 0xb1, 0xa5, 0x39, 0xb6, 0xad, 0x0f, 0x8f, 0xc8,
	0x12, 0xcc, 0x8a, 0x24, 0x68, 0x54, 0xd7, 0xb1, 0x7b, 0xfc, 0xd2, 0x9a, 0x08, 0xa4, 0x15, 0xf6,
	0x86, 0xdc, 0x82, 0x94, 0xb5, 0xaf, 0xb9, 0x0e, 0xba, 0xe9, 0x24, 0xbb, 0x2a, 0xb3, 0xf6, 0x77,
	0x71, 0xf8, 0x5e, 0x3c, 0x15, 0x57, 0x12, 0xf9, 0x3f, 0xf3, 0x77, 0x8c, 0xda, 0xbb, 0x03, 0x8a,
	0xb4, 0x82, 0xde, 0x3e, 0x62, 0x1f, 0x96, 0xd4, 0x69, 0x81, 0x7b, 0xa9, 0x7d, 0x44, 0xee, 0xc1,
	0x4c, 0x40, 0x37, 0x94, 0x98, 0x7e, 0x62, 0x52, 0x15, 0x49, 0x01, 0x48, 0xfe, 0x55, 0x56, 0xda,
	0x7d, 0x1d, 0x68, 0xfe, 0x97, 0xa6, 0x9c, 0xa8, 0x87, 0x52, 0xfb, 0x28, 0xff, 0x04, 0x32, 0xe2,
	0xd1, 0x97, 0xd4, 0x61, 0xba, 0xaf, 0x9f, 0x6a, 0xfe, 0xf9, 0x99, 0x9b, 0x21, 0x54, 0xc1, 0x4b,
	0x07, 0x07, 0x8e, 0x89, 0x16, 0x35, 0xfc, 0xf9, 0x99, 0xbe, 0x7e, 0x3a, 0x1e, 0xe5, 0xff, 0x31,
	0x0a, 0xb9, 0xc0, 0x09, 0xf8, 0x45, 0x4d, 0x6d, 0xf4, 0xb3, 0x35, 0xb5, 0xf7, 0x61, 0x56, 0xee,
	0xca, 0xf9, 0xe5, 0x30, 0xb3, 0xf9, 0x35, 0xa1, 0xef, 0xe6, 0x37, 0xc2, 0xa1, 0x2e, 0x38, 0x16,
	0xee, 0x82, 0xf3, 0x7f, 0x1b, 0x90, 0x1b, 0x8d, 0xb5, 0x0a, 0x37, 0x2f, 0x90, 0x5b, 0xb0, 0xd9,
	0x4c, 0x50, 0x38, 0xb4, 0xc4, 0x1a, 0xcc, 0x5d, 0x24, 0x9f, 0x60, 0xbd, 0xd9, 0x90, 0x8c, 0x38,
	0xef, 0x2e, 0x5c, 0x93, 0xc4, 0x14, 0x0d, 0x28, 0x8a, 0x8a, 0x06, 0xfc, 0x0e, 0x64, 0xc4, 0x43,
	0x3b, 0x99, 0x83, 0xe4, 0xbe, 0xee, 0xba, 0xa6, 0x73, 0x36, 0xbe, 0xb0, 0x65, 0x43, 0x21, 0x5c,
	0x27, 0xe8, 0x4d, 0x22, 0x1f, 0xe5, 0xff, 0x3b, 0x0a, 0x59, 0xe9, 0x94, 0x8e, 0x6a, 0x92, 0x6f,
	0xf9, 0x18, 0x27, 0x2f, 0x68, 0x98, 0xf2, 0xa5, 0x8b, 0xcb, 0x89, 0xe0, 0xc5, 0xe5, 0x16, 0xcc,
	0xf4, 0xbb, 0x56, 0xc8, 0xd0, 0xb1, 0x2b, 0x19, 0xba, 0xdf, 0xb5, 0x64, 0x43, 0x23, 0x37, 0xf4,
	0xca, 0xcf, 0x74, 0xfd, 0x82, 0x4e, 0x29, 0x22, 0xf9, 0xf7, 0xc5, 0xfd, 0xa2, 0xce, 0x6e, 0x43,
	0x56, 0xd6, 0x35, 0xb3, 0x69, 0xa6, 0x23, 0x28, 0x9a, 0x2c, 0x40, 0xd6, 0x5f, 0xdf, 0xb7, 0x60,
	0xda, 0x8b, 0x3f, 0x34, 0xc6, 0x77, 0x41, 0x6a, 0x1b, 0xbe, 0x00, 0x45, 0xe6, 0x35, 0x90, 0xda,
	0x04, 0xf4, 0x0d, 0x89, 0xa5, 0x20, 0x6f, 0x4e, 0x64, 0x8b, 0x22, 0x87, 0xf6, 0x35, 0x11, 0xde,
	0x57, 0xbe, 0x04, 0x4a, 0xb0, 0x63, 0x20, 0xf7, 0x20, 0xc1, 0x2e, 0xc8, 0xa2, 0x2f, 0xbf, 0x20,
	0x63, 0x54, 0xf9, 0x7f, 0x8e, 0x42, 0x2e, 0xd0, 0x18, 0x10, 0x95, 0x25, 0x12, 0xb3, 0xeb, 0x0c,
	0xa4, 0x20, 0x0f, 0x7f, 0x81, 0xa2, 0x55, 0xaf, 0x56, 0x57, 0x77, 0x58, 0x53, 0xb4, 0xad, 0x9f,
	0xe2, 0x80, 0x19, 0x0f, 0x33, 0x4a, 0xad, 0xeb, 0x0c, 0x98, 0xa6, 0xee, 0xc2, 0x35, 0x7e, 0x57,
	0x69, 0x9c, 0x98, 0xbd, 0x1e, 0xbb, 0x63, 0x62, 0x7b, 0xca, 0xb1, 0x17, 0x55, 0xc4, 0xe9, 0x25,
	0xd2, 0x22, 0xcc, 0x8c, 0x2f, 0x0b, 0x05, 0x6a, 0x16, 0x45, 0xd7, 0xbc, 0x57, 0x63, 0x7a, 0x56,
	0x6d, 0x79, 0xf7, 0xf1, 0xb9, 0xab, 0xad, 0xd7, 0x7f, 0x7c, 0x1e, 0x46, 0xbf, 0x8f, 0x42, 0xa8,
	0xe1, 0x20, 0x1f, 0xc2, 0x0d, 0xef, 0x57, 0x06, 0xbd, 0x6e, 0xbf, 0xeb, 0x6a, 0xe6, 0xe9, 0xc0,
	0xb6, 0x4c, 0xcb, 0x7d, 0x61, 0x9a, 0xa6, 0x3f, 0x3e, 0xd8, 0x42, 0xda, 0x1a, 0x27, 0x2d, 0xdf,
	0x1c, 0x9d, 0xcf, 0xcf, 0x5c, 0xf0, 0x42, 0x9d, 0x61, 0xbf, 0x4f, 0x90, 0x40, 0x71, 0x49, 0x6a,
	0x6d, 0x7f, 0xc9, 0x89, 0x97, 0x2d, 0x49, 0x1d, 0xe4, 0xa2, 0x25, 0xa5, 0x17, 0xde, 0x92, 0x12,
	0x98, 0xaf, 0x43, 0x56, 0x6a, 0x88, 0xc8, 0x3a, 0xbf, 0xf6, 0x4f, 0x5e, 0x7a, 0x9f, 0x48, 0xef,
	0xc2, 0xfd, 0xab, 0xff, 0xfc, 0x6f, 0xa3, 0x30, 0x2d, 0xf7, 0x41, 0x64, 0x3e, 0xfc, 0x7d, 0x3f,
	0x2b, 0x7d, 0xc3, 0xff, 0xe2, 0x3e, 0xfd, 0x60, 0x04, 0x38, 0xa6, 0xeb, 0x74, 0xcd, 0x21, 0xfb,
	0xe1, 0x89, 0x0a, 0x7d, 0xfd, 0x54, 0x65, 0x08, 0xd9, 0x86, 0xdc, 0xc0, 0x74, 0xba, 0xb6, 0xe1,
	0xab, 0x34, 0x7e, 0xf1, 0x4d, 0x25, 0xef, 0x82, 0x28, 0xf1, 0x58, 0x75, 0xd3, 0x03, 0x69, 0x9c,
	0xff, 0x24, 0x0a, 0x33, 0x17, 0x74, 0x65, 0xe4, 0xbb, 0x40, 0x50, 0x0e, 0x7a, 0x14, 0xbb, 0xd4,
	0x5f, 0x18, 0x03, 0x7a, 0x44, 0x1b, 0x2f, 0x84, 0x19, 0x54, 0x42, 0x48, 0x03, 0xae, 0x21, 0x4b,
	0xda, 0xe0, 0x06, 0xdc, 0x61, 0xe1, 0x05, 0x3f, 0x94, 0xe8, 0xf6, 0xcd, 0x31, 0xc3, 0x5c, 0x5f,
	0x3f, 0x15, 0x81, 0xfc, 0x66, 0x58, 0x72, 0x34, 0xfb, 0x32, 0x5c, 0x0f, 0x2d, 0x23, 0xe4, 0x3b,
	0x12, 0x60, 0x83, 0xd9, 0xac, 0x0e, 0xb9, 0x40, 0x3f, 0x47, 0xd6, 0x60, 0x92, 0x69, 0x8a, 0xef,
	0xb9, 0x10, 0x94, 0xd0, 0x9b, 0xc0, 0xf4, 0xab, 0x72, 0xea, 0xfc, 0x19, 0x90, 0x70, 0xf3, 0x26,
	0x67, 0xeb, 0x68, 0xb0, 0xec, 0x7d, 0x31, 0xae, 0x93, 0x3f, 0x0c, 0x2d, 0x7d, 0xe5, 0x32, 0xf5,
	0x6a, 0x87, 0xc5, 0xfc, 0x16, 0xe4, 0x02, 0xdd, 0x1d, 0x99, 0x15, 0x93, 0x7f, 0x96, 0xe7, 0xf8,
	0x70, 0x29, 0x9b, 0x08, 0x97, 0xb2, 0xfc, 0x3d, 0xc8, 0x4a, 0x3d, 0xdd, 0xcb, 0xb5, 0x95, 0x5f,
	0x15, 0xc9, 0xaf, 0xba, 0xc3, 0xfc, 0x37, 0xbc, 0xec, 0xe0, 0xf5, 0x5f, 0xaf, 0xf2, 0x11, 0x29,
	0xff, 0x4d, 0x98, 0x96, 0x3b, 0xaf, 0x57, 0x9a, 0x5e, 0x9e, 0x82, 0x24, 0xff, 0x18, 0x70, 0xf7,
	0xc7, 0x51, 0x48, 0xd0, 0xdf, 0x01, 0x12, 0x05, 0x32, 0xef, 0x35, 0xeb, 0x0d, 0x4d, 0xad, 0x7d,
	0x77, 0xaf, 0xd6, 0xda, 0x55, 0x22, 0x24, 0x07, 0x69, 0x8a, 0x94, 0x2a, 0x95, 0xda, 0xce, 0xae,
	0x12, 0x25, 0x04, 0xa6, 0xf7, 0x1a, 0x95, 0x66, 0x63, 0xa3, 0xae, 0x6e, 0xd7, 0xaa, 0xda, 0xde,
	0x8e, 0x32, 0x41, 0x66, 0x41, 0x11, 0xb1, 0x6a, 0xf3, 0x71, 0x43, 0x89, 0x21, 0x33, 0x89, 0x2e,
	0x8e, 0x73, 0x03, 0x54, 0x09, 0xc4, 0xd4, 0x9a, 0xb4, 0xe8, 0x24, 0x2e, 0xba, 0xa3, 0x36, 0x77,
	0xd4, 0x7a, 0x6d, 0xb7, 0xa4, 0x3e, 0x51, 0x92, 0x77, 0x6f, 0x42, 0x82, 0xfe, 0xf6, 0x90, 0x4c,
	0x03, 0x6c, 0x35, 0xd5, 0xd2, 0xe3, 0x52, 0x43, 0x53, 0x97, 0x95, 0xc8, 0xdd, 0x36, 0xfd, 0x4a,
	0xc2, 0x2b, 0x0d, 0xce, 0xdb, 0x2e, 0x55, 0xb4, 0xbd, 0xc6, 0xc3, 0x06, 0x32, 0x8f, 0x90, 0x0c,
	0xa4, 0x10, 0x78, 0xb4, 0xac, 0x2d, 0x29, 0x51, 0x9c, 0xec, 0x8d, 0xb4, 0x65, 0x65, 0x42, 0x1a,
	0x17, 0x95, 0x98, 0x40, 0xbd, 0xac, 0xc4, 0xf3, 0xa9, 0x8f, 0xff, 0xba, 0x10, 0xf9, 0xd9, 0xdf,
	0x14, 0x22, 0x77, 0x7f, 0x14, 0x05, 0xd8, 0xd9, 0x7c, 0x22, 0xac, 0xb2, 0xb3, 0xf9, 0x44, 0x5e,
	0x05, 0x01, 0x7f, 0x15, 0x6f, 0x44, 0x57, 0x99, 0x05, 0x65, 0x3c, 0x2e, 0x6a, 0x6a, 0xed, 0x91,
	0x56, 0x52, 0x62, 0x17, 0xa0, 0x65, 0xa6, 0x20, 0x8e, 0x2e, 0x73, 0xca, 0x44, 0x08, 0x2b, 0x2b,
	0x93, 0x82, 0x6c, 0x7f, 0x3f, 0x01, 0x59, 0xf9, 0x88, 0x99, 0x83, 0x74, 0xb5, 0xb4, 0x5b, 0xd2,
	0xd4, 0xd2, 0x6e, 0x4d, 0x5b, 0x62, 0x26, 0xf4, 0x81, 0x65, 0x25, 0x2a, 0x03, 0x45, 0x65, 0x42,
	0x06, 0x56, 0x94, 0x98, 0x0c, 0xac, 0x2a, 0x71, 0x19, 0x78, 0xa0, 0x24, 0x64, 0x60, 0x8d, 0xd9,
	0xcc, 0x07, 0xde, 0x52, 0x92, 0x32, 0xb0, 0xae, 0xa4, 0x64, 0xe0, 0x6d, 0x65, 0x0a, 0x1d, 0x44,
	0x10, 0x6c, 0x49, 0x81, 0x00, 0xb2, 0xac, 0xa4, 0x03, 0x48, 0x51, 0xc9, 0x04, 0x90, 0x15, 0x25,
	0x1b, 0x40, 0x56, 0x95, 0xe9, 0x00, 0xf2, 0x40, 0xc9, 0x09, 0x1a, 0x5b, 0x02, 0xf0, 0x7f, 0xf2,
	0x46, 0xd2, 0x90, 0xac, 0x34, 0x1b, 0xbb, 0xb5, 0xf7, 0xd1, 0xd9, 0xd3, 0x90, 0x6c, 0xd5, 0x5a,
	0xad, 0x7a, 0xb3, 0xa1, 0x44, 0x49, 0x0a, 0xe2, 0x0f, 0x6b, 0x4f, 0x5a, 0xca, 0x04, 0xce, 0xf0,
	0x7f, 0xec, 0x82, 0xdb, 0xd8, 0xa0, 0xae, 0xda, 0xa8, 0xd4, 0x6b, 0x2d, 0x25, 0x42, 0xae, 0x41,
	0xb6, 0xb2, 0x59, 0x6a, 0x34, 0x6a, 0x5b, 0xda, 0x76, 0xa9, 0xf5, 0xb0, 0xa5, 0x44, 0xef, 0xae,
	0x42, 0x82, 0x06, 0x1b, 0x65, 0xbf, 0x55, 0x6a, 0xb5, 0xb4, 0x12, 0x63, 0xcf, 0x06, 0x65, 0x25,
	0xea, 0x0f, 0x2a, 0xca, 0x44, 0x3e, 0x8e, 0xd2, 0xdd, 0x1d, 0x00, 0x09, 0x7f, 0x95, 0x24, 0x00,
	0x93, 0x5b, 0xcd, 0xc7, 0x2c, 0x1a, 0x93, 0x10, 0xdb, 0x6a, 0x3e, 0x56, 0xa2, 0xb8, 0xc1, 0x72,
	0x6d, 0xab, 0xf9, 0x58, 0x6b, 0x34, 0xd5, 0xed, 0xd2, 0x96, 0x32, 0x81, 0x64, 0xfc, 0x99, 0x46,
	0x5e, 0xa9, 0xdc, 0x7c, 0x54, 0xf3, 0xde, 0xc6, 0x71, 0x33, 0x9b, 0xf5, 0x77, 0x37, 0x95, 0x04,
	0xae, 0x8b, 0x4f, 0x34, 0xd0, 0xee, 0xfe, 0x67, 0x0c, 0x66, 0x2f, 0xfa, 0x78, 0x48, 0xb2, 0x30,
	0x55, 0xa9, 0x57, 0x35, 0x75, 0x63, 0x8f, 0xba, 0x90, 0x37, 0xac, 0xb5, 0x6a, 0x3c, 0x07, 0xe0,
	0x70, 0xab, 0xde, 0x78, 0xa8, 0x55, 0x36, 0x6b, 0x95, 0x87, 0xca, 0x04, 0x8d, 0x76, 0x0f, 0x2b,
	0x55, 0x55, 0x25, 0xe6, 0x51, 0x55, 0xf7, 0x76, 0x9f, 0x68, 0x95, 0x27, 0x95, 0xad, 0x9a, 0x12,
	0x27, 0x37, 0x80, 0x50, 0x46, 0xef, 0x6b, 0x3b, 0x25, 0xb5, 0xb4, 0xad, 0xb5, 0x6a, 0xbb, 0x7b,
	0x3b, 0xcc, 0xc9, 0x29, 0x6d, 0xed, 0x91, 0xd6, 0xda, 0x2d, 0xed, 0xee, 0xb5, 0x94, 0x49, 0x32,
	0x03, 0x39, 0xc4, 0x1a, 0xb5, 0xc7, 0x1a, 0xd7, 0xaf, 0x92, 0x24, 0x37, 0x61, 0x86, 0x33, 0xd8,
	0xad, 0x6f, 0xd7, 0x1b, 0xef, 0x72, 0x0e, 0x29, 0x8f, 0xf3, 0xae, 0xcc, 0x79, 0x6a, 0xcc, 0x79,
	0x6b, 0xcc, 0x04, 0xfc, 0xed, 0x3c, 0xac, 0x3d, 0x51, 0xd2, 0x1e, 0xcf, 0x52, 0x55, 0x95, 0xe6,
	0x66, 0x3c, 0x09, 0xaa, 0xb5, 0x47, 0xf5, 0x4a, 0x0d, 0x17, 0xac, 0x29, 0x59, 0x8c, 0x5c, 0x04,
	0x37, 0x9a, 0x6a, 0xa5, 0xa6, 0xb1, 0xd4, 0xa5, 0x4c, 0x93, 0x3c, 0xdc, 0x60, 0x2c, 0x69, 0x2a,
	0x13, 0xd9, 0xe4, 0x3c, 0xd1, 0x76, 0xa8, 0xb8, 0x5b, 0xcd, 0x5d, 0xad, 0xde, 0xd8, 0x68, 0x2a,
	0x0a, 0xb9, 0x05, 0xd7, 0x65, 0xdc, 0x93, 0xf0, 0x1a, 0xb9, 0x0e, 0xd7, 0xf0, 0x55, 0xb9, 0x56,
	0xaa, 0x34, 0x1b, 0x7c, 0xab, 0x0a, 0xf1, 0x04, 0xe2, 0x30, 0xba, 0xa1, 0x32, 0x13, 0x90, 0x72,
	0xbb, 0x59, 0xad, 0x29, 0x6f, 0x70, 0x8f, 0xfa, 0xe5, 0x04, 0xcc, 0x5c, 0x70, 0xbf, 0x41, 0xe3,
	0x63, 0x6c, 0x16, 0x6d, 0x59, 0x89, 0x04, 0x90, 0x22, 0x73, 0x31, 0x01, 0x59, 0x65, 0x26, 0x16,
	0x90, 0x75, 0x25, 0x86, 0xae, 0x2f, 0xf2, 0x59, 0x53, 0xe2, 0x01, 0x68, 0xa5, 0xa8, 0x24, 0x02,
	0xd0, 0xda, 0xaa, 0x32, 0x89, 0x56, 0x11, 0x27, 0x16, 0xd7, 0x95, 0x64, 0x00, 0x2b, 0x3e, 0x58,
	0x53, 0x52, 0x01, 0xec, 0xc1, 0x72, 0x51, 0x99, 0xc2, 0xfd, 0x8a, 0x73, 0x97, 0x8a, 0xab, 0x0a,
	0x04, 0xc0, 0xe2, 0xd2, 0xea, 0xba, 0x92, 0x0e, 0x80, 0xab, 0x4b, 0x6f, 0xaf, 0x31, 0xa3, 0x8a,
	0xbb, 0x58, 0x7e, 0xbb, 0xc8, 0x8c, 0x2a, 0x6d, 0x64, 0x65, 0x1d, 0xd3, 0x88, 0x8c, 0xae, 0x14,
	0xdf, 0x5a, 0x5b, 0x57, 0x72, 0x5c, 0xb5, 0xff, 0x10, 0x85, 0x69, 0xf9, 0xbc, 0x85, 0xfb, 0xa4,
	0xb6, 0xac, 0x3d, 0xaa, 0xa9, 0x4f, 0xb4, 0x65, 0x9e, 0x1b, 0x04, 0xa8, 0xd8, 0x52, 0xa2, 0x01,
	0x68, 0xb5, 0xa5, 0x4c, 0x04, 0xa0, 0xf5, 0x16, 0x0b, 0x1e, 0x91, 0xd7, 0x5a, 0x8b, 0x57, 0x07,
	0x1f, 0x5b, 0x29, 0xb6, 0x78, 0x75, 0xf0, 0xb1, 0xb5, 0x55, 0x1e, 0x38, 0xe2, 0xdc, 0xe2, 0x7a,
	0x4b, 0x49, 0x72, 0xa9, 0xff, 0x24, 0xe6, 0x1d, 0x50, 0xe5, 0x73, 0xf0, 0x0c, 0xe4, 0xb8, 0xeb,
	0x56, 0x9a, 0x7b, 0x8d, 0x5d, 0x34, 0x65, 0x24, 0x04, 0xae, 0xa0, 0x5b, 0x04, 0xc1, 0xb5, 0x55,
	0x56, 0xe3, 0xe4, 0xe9, 0xc5, 0x75, 0x56, 0xe3, 0x24, 0x14, 0x4d, 0x1a, 0x0f, 0xa1, 0x68, 0xd4,
	0x04, 0x3a, 0xbc, 0xcc, 0x01, 0xcd, 0x3a, 0x19, 0x82, 0xa9, 0x61, 0x93, 0x21, 0x98, 0x9a, 0x36,
	0x15, 0x82, 0xa9, 0x71, 0xa7, 0x30, 0xfe, 0x02, 0x9b, 0x43, 0xf3, 0x42, 0x08, 0x67, 0x06, 0x4e,
	0x87, 0xf0, 0xb5, 0x07, 0x0f, 0x56, 0xd0, 0x73, 0x6e, 0xc2, 0x8c, 0xcc, 0x67, 0x65, 0x79, 0xe9,
	0x2d, 0xf4, 0x9e, 0xe0, 0x8b, 0xe2, 0x5a, 0x71, 0x79, 0x15, 0x1d, 0x28, 0xf8, 0xe2, 0x41, 0x71,
	0xb5, 0xb8, 0xee, 0xfb, 0xd0, 0xa7, 0x13, 0x40, 0xc2, 0x5d, 0x05, 0xba, 0x03, 0x9f, 0x85, 0x29,
	0x87, 0x26, 0xe0, 0x00, 0xb4, 0xcc, 0xfc, 0x48, 0x84, 0x8a, 0xcc, 0x8f, 0x44, 0x68, 0x85, 0x45,
	0xa8, 0x08, 0xad, 0xb2, 0x08, 0x15, 0xa1, 0x07, 0x2c, 0x42, 0x45, 0x08, 0xeb, 0x79, 0x00, 0xc2,
	0x8a, 0x1e, 0x80, 0xb0, 0xa6, 0x07, 0xa0, 0xb7, 0x59, 0xc2, 0x95, 0x44, 0xc5, 0xba, 0x1e, 0xc4,
	0xb0, 0xb2, 0x07, 0x31, 0xac, 0xed, 0x41, 0x0c, 0xab, 0x7b, 0x10, 0x43, 0xbd, 0x06, 0xb1, 0x07,
	0x63, 0x95, 0xfe, 0x4b, 0xd4, 0xfb, 0x31, 0xbc, 0xdc, 0x64, 0x0a, 0x7e, 0xbb, 0x53, 0x53, 0xeb,
	0xcd, 0x2a, 0x55, 0x6b, 0x08, 0x5c, 0x96, 0x3c, 0x9c, 0x83, 0xa8, 0xda, 0x10, 0x88, 0xca, 0x0d,
	0x81, 0xa8, 0xde, 0x10, 0x88, 0x0a, 0x0e, 0x81, 0x6b, 0x2c, 0x4e, 0x65, 0xf0, 0xad, 0x71, 0x9c,
	0xfe, 0xdb, 0x04, 0x80, 0x7f, 0x9f, 0x44, 0x33, 0x28, 0x4b, 0xef, 0x38, 0xd4, 0xd6, 0x95, 0x08,
	0xcd, 0x8c, 0x02, 0xb4, 0xbc, 0xc4, 0xea, 0xb2, 0x84, 0xa1, 0xe0, 0x41, 0x6c, 0x85, 0x25, 0x17,
	0x09, 0x5b, 0x65, 0xc9, 0x45, 0xc2, 0xd6, 0x58, 0x72, 0x91, 0xb0, 0x75, 0x9e, 0xb9, 0x05, 0xac,
	0xb8, 0xc4, 0x33, 0xb7, 0x88, 0x2d, 0xf3, 0xcc, 0x2d, 0x62, 0xab, 0xcc, 0x35, 0x24, 0x6c, 0x8d,
	0xb9, 0x86, 0x84, 0xbd, 0xc5, 0x5c, 0x43, 0xc2, 0xde, 0x66, 0xae, 0x21, 0x62, 0x2b, 0x4b, 0xcc,
	0x35, 0x24, 0x6c, 0x85, 0xb9, 0x86, 0x84, 0xad, 0x8d, 0x5d, 0xe3, 0xe3, 0x18, 0x5c, 0x74, 0x59,
	0x84, 0x66, 0xc0, 0xd2, 0x5f, 0xaa, 0x3c, 0xd4, 0xb6, 0xea, 0xdb, 0xf5, 0x5d, 0x5a, 0x0f, 0x43,
	0x20, 0xcf, 0x7d, 0x32, 0xb8, 0xca, 0x3c, 0x43, 0x06, 0x79, 0xea, 0x0b, 0xf0, 0xe4, 0xa9, 0x4f,
	0x46, 0x69, 0x79, 0x0c, 0xa1, 0x6b, 0x3c, 0xf3, 0x05, 0x38, 0x14, 0x79, 0xe6, 0x0b, 0xc8, 0xf5,
	0x80, 0x67, 0x3e, 0x19, 0x66, 0xa5, 0xf2, 0x06, 0x90, 0x00, 0x13, 0x56, 0x2d, 0x43, 0x38, 0x2f,
	0x98, 0x21, 0x9c, 0xd7, 0xcc, 0x10, 0xce, 0xcb, 0xe6, 0x4d, 0xaa, 0x51, 0x69, 0x9b, 0xac, 0x72,
	0x86, 0x5e, 0xc8, 0xc5, 0xd3, 0x37, 0x85, 0x74, 0x5f, 0x26, 0xea, 0xb2, 0x5a, 0xdb, 0x2a, 0x3d,
	0x09, 0x9a, 0x82, 0x81, 0x01, 0x53, 0x30, 0x30, 0x60, 0x0a, 0x06, 0x06, 0x4c, 0xc1, 0x79, 0x06,
	0x4c, 0xc1, 0xd0, 0xa0, 0x29, 0x18, 0x1a, 0x34, 0x05, 0xe7, 0x10, 0x34, 0x05, 0x97, 0x2b, 0x68,
	0x0a, 0x06, 0x87, 0x4c, 0xc1, 0x99, 0x84, 0x4c, 0xc1, 0xb9, 0x84, 0x4c, 0xc1, 0x37, 0x18, 0x32,
	0x05, 0xdf, 0x63, 0xc8, 0x14, 0xde, 0x36, 0x43, 0xa6, 0xf0, 0x76, 0x2a, 0x9a, 0xe2, 0x47, 0x13,
	0x90, 0xe4, 0xb7, 0xe0, 0xd8, 0xba, 0xaa, 0xef, 0x73, 0x2a, 0x4c, 0x8f, 0xe2, 0x78, 0x99, 0xb5,
	0xb6, 0xe3, 0x71, 0x91, 0x35, 0xd0, 0xe3, 0x31, 0xe6, 0x15, 0x71, 0x8c, 0x39, 0x45, 0x1c, 0x63,
	0x16, 0x14, 0xc7, 0x98, 0x00, 0xc5, 0x31, 0x16, 0x18, 0x71, 0x8c, 0xd5, 0x45, 0x1c, 0x63, 0x69,
	0xc9, 0x41, 0xda, 0x97, 0x07, 0xeb, 0x8a, 0x04, 0x60, 0x51, 0x91, 0x00, 0xac, 0x28, 0x12, 0x80,
	0xe5, 0x44, 0x02, 0x50, 0x3f, 0x12, 0x20, 0xb7, 0x8a, 0x3f, 0x9e, 0x80, 0x04, 0xbd, 0xd1, 0xa6,
	0x37, 0x0b, 0xf5, 0x46, 0x53, 0x1d, 0x77, 0x44, 0x69, 0x48, 0x32, 0x80, 0x37, 0xd4, 0xfe, 0x5b,
	0xde, 0x50, 0xfb, 0x00, 0x6f, 0xa8, 0x7d, 0x80, 0x37, 0xd4, 0x3e, 0xc0, 0x1b, 0x6a, 0x1f, 0xe0,
	0x0d, 0xb5, 0x0f, 0xf0, 0x86, 0xda, 0x07, 0x78, 0x43, 0xed, 0x03, 0xbc, 0xa1, 0xf6, 0x01, 0xaf,
	0xa1, 0x16, 0x10, 0xde, 0x50, 0x0b, 0x08, 0x6f, 0xa8, 0x05, 0x84, 0x37, 0xd4, 0x02, 0xc2, 0x1b,
	0x6a, 0x01, 0x19, 0x97, 0xdb, 0xf2, 0x5f, 0x45, 0x7f, 0xf1, 0xac, 0x10, 0xfd, 0xf4, 0x59, 0x21,
	0xfa, 0xcb, 0x67, 0x85, 0xc8, 0x6f, 0x9e, 0x15, 0x22, 0xbf, 0x7d, 0x56, 0x88, 0xfc, 0xee, 0x59,
	0x21, 0xf2, 0xfb, 0x67, 0x85, 0xe8, 0x47, 0xa3, 0x42, 0xf4, 0xe3, 0x51, 0x21, 0xf2, 0xd3, 0x51,
	0x21, 0xfa, 0xb3, 0x51, 0x21, 0xf2, 0xc9, 0xa8, 0x10, 0xf9, 0xf9, 0xa8, 0x10, 0xf9, 0xc5, 0xa8,
	0x10, 0xfd, 0x74, 0x54, 0x88, 0xfe, 0x72, 0x54, 0x88, 0xfc, 0x66, 0x54, 0x88, 0xfe, 0x76, 0x54,
	0x88, 0xfc, 0x6e, 0x54, 0x88, 0xfe, 0x7e, 0x54, 0x88, 0x7c, 0xf4, 0xbc, 0x10, 0xf9, 0xf8, 0x79,
	0x21, 0xfa, 0xc3, 0xe7, 0x85, 0xc8, 0x5f, 0x3c, 0x2f, 0x44, 0x7f, 0xf2, 0xbc, 0x10, 0xf9, 0xe9,
	0xf3, 0x42, 0xe4, 0x67, 0xcf, 0x0b, 0xd1, 0x4f, 0x9e, 0x17, 0xa2, 0x3f, 0x7f, 0x5e, 0x88, 0x7e,
	0xef, 0x6b, 0x57, 0xfd, 0x8f, 0x22, 0xd7, 0x1a, 0xec, 0xef, 0x4f, 0xd2, 0xeb, 0xf5, 0x95, 0xff,
	0x0d, 0x00, 0x00, 0xff, 0xff, 0xb2, 0x38, 0x26, 0xbd, 0xde, 0x3d, 0x00, 0x00,
}
