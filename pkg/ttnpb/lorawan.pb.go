// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/TheThingsNetwork/ttn/api/lorawan.proto

package ttnpb

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"

import github_com_TheThingsNetwork_ttn_pkg_types "github.com/TheThingsNetwork/ttn/pkg/types"
import time "time"

import strconv "strconv"

import bytes "bytes"

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

type MType int32

const (
	MType_JOIN_REQUEST     MType = 0
	MType_JOIN_ACCEPT      MType = 1
	MType_UNCONFIRMED_UP   MType = 2
	MType_UNCONFIRMED_DOWN MType = 3
	MType_CONFIRMED_UP     MType = 4
	MType_CONFIRMED_DOWN   MType = 5
	MType_REJOIN_REQUEST   MType = 6
)

var MType_name = map[int32]string{
	0: "JOIN_REQUEST",
	1: "JOIN_ACCEPT",
	2: "UNCONFIRMED_UP",
	3: "UNCONFIRMED_DOWN",
	4: "CONFIRMED_UP",
	5: "CONFIRMED_DOWN",
	6: "REJOIN_REQUEST",
}
var MType_value = map[string]int32{
	"JOIN_REQUEST":     0,
	"JOIN_ACCEPT":      1,
	"UNCONFIRMED_UP":   2,
	"UNCONFIRMED_DOWN": 3,
	"CONFIRMED_UP":     4,
	"CONFIRMED_DOWN":   5,
	"REJOIN_REQUEST":   6,
}

func (MType) EnumDescriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{0} }

type Major int32

const (
	Major_LORAWAN_R1 Major = 0
)

var Major_name = map[int32]string{
	0: "LORAWAN_R1",
}
var Major_value = map[string]int32{
	"LORAWAN_R1": 0,
}

func (Major) EnumDescriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{1} }

type MACVersion int32

const (
	MAC_UNKNOWN MACVersion = 0
	MAC_V1_0    MACVersion = 1
	MAC_V1_0_1  MACVersion = 2
	MAC_V1_0_2  MACVersion = 3
	MAC_V1_1    MACVersion = 4
)

var MACVersion_name = map[int32]string{
	0: "MAC_UNKNOWN",
	1: "MAC_V1_0",
	2: "MAC_V1_0_1",
	3: "MAC_V1_0_2",
	4: "MAC_V1_1",
}
var MACVersion_value = map[string]int32{
	"MAC_UNKNOWN": 0,
	"MAC_V1_0":    1,
	"MAC_V1_0_1":  2,
	"MAC_V1_0_2":  3,
	"MAC_V1_1":    4,
}

func (MACVersion) EnumDescriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{2} }

type PHYVersion int32

const (
	PHY_UNKNOWN PHYVersion = 0
	PHY_V1_0    PHYVersion = 1
	PHY_V1_0_1  PHYVersion = 2
	PHY_V1_0_2  PHYVersion = 3
	PHY_V1_1    PHYVersion = 4
)

var PHYVersion_name = map[int32]string{
	0: "PHY_UNKNOWN",
	1: "PHY_V1_0",
	2: "PHY_V1_0_1",
	3: "PHY_V1_0_2",
	4: "PHY_V1_1",
}
var PHYVersion_value = map[string]int32{
	"PHY_UNKNOWN": 0,
	"PHY_V1_0":    1,
	"PHY_V1_0_1":  2,
	"PHY_V1_0_2":  3,
	"PHY_V1_1":    4,
}

func (PHYVersion) EnumDescriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{3} }

type RejoinType int32

const (
	RejoinType_CONTEXT RejoinType = 0
	RejoinType_SESSION RejoinType = 1
	RejoinType_KEYS    RejoinType = 2
)

var RejoinType_name = map[int32]string{
	0: "CONTEXT",
	1: "SESSION",
	2: "KEYS",
}
var RejoinType_value = map[string]int32{
	"CONTEXT": 0,
	"SESSION": 1,
	"KEYS":    2,
}

func (RejoinType) EnumDescriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{4} }

type CFListType int32

const (
	CFListType_FREQUENCIES   CFListType = 0
	CFListType_CHANNEL_MASKS CFListType = 1
)

var CFListType_name = map[int32]string{
	0: "FREQUENCIES",
	1: "CHANNEL_MASKS",
}
var CFListType_value = map[string]int32{
	"FREQUENCIES":   0,
	"CHANNEL_MASKS": 1,
}

func (CFListType) EnumDescriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{5} }

type Modulation int32

const (
	Modulation_LORA Modulation = 0
	Modulation_FSK  Modulation = 1
)

var Modulation_name = map[int32]string{
	0: "LORA",
	1: "FSK",
}
var Modulation_value = map[string]int32{
	"LORA": 0,
	"FSK":  1,
}

func (Modulation) EnumDescriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{6} }

type Class int32

const (
	CLASS_A Class = 0
	CLASS_B Class = 1
	CLASS_C Class = 2
)

var Class_name = map[int32]string{
	0: "CLASS_A",
	1: "CLASS_B",
	2: "CLASS_C",
}
var Class_value = map[string]int32{
	"CLASS_A": 0,
	"CLASS_B": 1,
	"CLASS_C": 2,
}

func (Class) EnumDescriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{7} }

type MACCommandIdentifier int32

const (
	cid_rfu_0              MACCommandIdentifier = 0
	CID_RESET              MACCommandIdentifier = 1
	CID_LINK_CHECK         MACCommandIdentifier = 2
	CID_LINK_ADR           MACCommandIdentifier = 3
	CID_DUTY_CYCLE         MACCommandIdentifier = 4
	CID_RX_PARAM_SETUP     MACCommandIdentifier = 5
	CID_DEV_STATUS         MACCommandIdentifier = 6
	CID_NEW_CHANNEL        MACCommandIdentifier = 7
	CID_RX_TIMING_SETUP    MACCommandIdentifier = 8
	CID_TX_PARAM_SETUP     MACCommandIdentifier = 9
	CID_DL_CHANNEL         MACCommandIdentifier = 10
	CID_REKEY              MACCommandIdentifier = 11
	CID_ADR_PARAM_SETUP    MACCommandIdentifier = 12
	CID_DEVICE_TIME        MACCommandIdentifier = 13
	CID_FORCE_REJOIN       MACCommandIdentifier = 14
	CID_REJOIN_PARAM_SETUP MACCommandIdentifier = 15
	CID_PING_SLOT_INFO     MACCommandIdentifier = 16
	CID_PING_SLOT_CHANNEL  MACCommandIdentifier = 17
	CID_BEACON_TIMING      MACCommandIdentifier = 18
	CID_BEACON_FREQ        MACCommandIdentifier = 19
	CID_DEVICE_MODE        MACCommandIdentifier = 32
)

var MACCommandIdentifier_name = map[int32]string{
	0:  "cid_rfu_0",
	1:  "CID_RESET",
	2:  "CID_LINK_CHECK",
	3:  "CID_LINK_ADR",
	4:  "CID_DUTY_CYCLE",
	5:  "CID_RX_PARAM_SETUP",
	6:  "CID_DEV_STATUS",
	7:  "CID_NEW_CHANNEL",
	8:  "CID_RX_TIMING_SETUP",
	9:  "CID_TX_PARAM_SETUP",
	10: "CID_DL_CHANNEL",
	11: "CID_REKEY",
	12: "CID_ADR_PARAM_SETUP",
	13: "CID_DEVICE_TIME",
	14: "CID_FORCE_REJOIN",
	15: "CID_REJOIN_PARAM_SETUP",
	16: "CID_PING_SLOT_INFO",
	17: "CID_PING_SLOT_CHANNEL",
	18: "CID_BEACON_TIMING",
	19: "CID_BEACON_FREQ",
	32: "CID_DEVICE_MODE",
}
var MACCommandIdentifier_value = map[string]int32{
	"cid_rfu_0":              0,
	"CID_RESET":              1,
	"CID_LINK_CHECK":         2,
	"CID_LINK_ADR":           3,
	"CID_DUTY_CYCLE":         4,
	"CID_RX_PARAM_SETUP":     5,
	"CID_DEV_STATUS":         6,
	"CID_NEW_CHANNEL":        7,
	"CID_RX_TIMING_SETUP":    8,
	"CID_TX_PARAM_SETUP":     9,
	"CID_DL_CHANNEL":         10,
	"CID_REKEY":              11,
	"CID_ADR_PARAM_SETUP":    12,
	"CID_DEVICE_TIME":        13,
	"CID_FORCE_REJOIN":       14,
	"CID_REJOIN_PARAM_SETUP": 15,
	"CID_PING_SLOT_INFO":     16,
	"CID_PING_SLOT_CHANNEL":  17,
	"CID_BEACON_TIMING":      18,
	"CID_BEACON_FREQ":        19,
	"CID_DEVICE_MODE":        32,
}

func (MACCommandIdentifier) EnumDescriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{8} }

type AggregatedDutyCycle int32

const (
	// 100%
	DUTY_CYCLE_1 AggregatedDutyCycle = 0
	// 50%
	DUTY_CYCLE_2 AggregatedDutyCycle = 1
	// 25%
	DUTY_CYCLE_4 AggregatedDutyCycle = 2
	// 12.5%
	DUTY_CYCLE_8 AggregatedDutyCycle = 3
	// 6.25%
	DUTY_CYCLE_16 AggregatedDutyCycle = 4
	// 3.125%
	DUTY_CYCLE_32 AggregatedDutyCycle = 5
	// 1.5625%
	DUTY_CYCLE_64 AggregatedDutyCycle = 6
	// Roughly 0.781%
	DUTY_CYCLE_128 AggregatedDutyCycle = 7
	// Roughly 0.390%
	DUTY_CYCLE_256 AggregatedDutyCycle = 8
	// Roughly 0.195%
	DUTY_CYCLE_512 AggregatedDutyCycle = 9
	// Roughly 0.098%
	DUTY_CYCLE_1024 AggregatedDutyCycle = 10
	// Roughly 0.049%
	DUTY_CYCLE_2048 AggregatedDutyCycle = 11
	// Roughly 0.024%
	DUTY_CYCLE_4096 AggregatedDutyCycle = 12
	// Roughly 0.012%
	DUTY_CYCLE_8192 AggregatedDutyCycle = 13
	// Roughly 0.006%
	DUTY_CYCLE_16384 AggregatedDutyCycle = 14
	// Roughly 0.003%
	DUTY_CYCLE_32768 AggregatedDutyCycle = 15
)

var AggregatedDutyCycle_name = map[int32]string{
	0:  "DUTY_CYCLE_1",
	1:  "DUTY_CYCLE_2",
	2:  "DUTY_CYCLE_4",
	3:  "DUTY_CYCLE_8",
	4:  "DUTY_CYCLE_16",
	5:  "DUTY_CYCLE_32",
	6:  "DUTY_CYCLE_64",
	7:  "DUTY_CYCLE_128",
	8:  "DUTY_CYCLE_256",
	9:  "DUTY_CYCLE_512",
	10: "DUTY_CYCLE_1024",
	11: "DUTY_CYCLE_2048",
	12: "DUTY_CYCLE_4096",
	13: "DUTY_CYCLE_8192",
	14: "DUTY_CYCLE_16384",
	15: "DUTY_CYCLE_32768",
}
var AggregatedDutyCycle_value = map[string]int32{
	"DUTY_CYCLE_1":     0,
	"DUTY_CYCLE_2":     1,
	"DUTY_CYCLE_4":     2,
	"DUTY_CYCLE_8":     3,
	"DUTY_CYCLE_16":    4,
	"DUTY_CYCLE_32":    5,
	"DUTY_CYCLE_64":    6,
	"DUTY_CYCLE_128":   7,
	"DUTY_CYCLE_256":   8,
	"DUTY_CYCLE_512":   9,
	"DUTY_CYCLE_1024":  10,
	"DUTY_CYCLE_2048":  11,
	"DUTY_CYCLE_4096":  12,
	"DUTY_CYCLE_8192":  13,
	"DUTY_CYCLE_16384": 14,
	"DUTY_CYCLE_32768": 15,
}

func (AggregatedDutyCycle) EnumDescriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{9} }

type PingSlotPeriod int32

const (
	// Every second
	PING_EVERY_1S PingSlotPeriod = 0
	// Every 2 seconds
	PING_EVERY_2S PingSlotPeriod = 1
	// Every 4 seconds
	PING_EVERY_4S PingSlotPeriod = 2
	// Every 8 seconds
	PING_EVERY_8S PingSlotPeriod = 3
	// Every 16 seconds
	PING_EVERY_16S PingSlotPeriod = 4
	// Every 32 seconds
	PING_EVERY_32S PingSlotPeriod = 5
	// Every 64 seconds
	PING_EVERY_64S PingSlotPeriod = 6
	// Every 128 seconds
	PING_EVERY_128S PingSlotPeriod = 7
)

var PingSlotPeriod_name = map[int32]string{
	0: "PING_EVERY_1S",
	1: "PING_EVERY_2S",
	2: "PING_EVERY_4S",
	3: "PING_EVERY_8S",
	4: "PING_EVERY_16S",
	5: "PING_EVERY_32S",
	6: "PING_EVERY_64S",
	7: "PING_EVERY_128S",
}
var PingSlotPeriod_value = map[string]int32{
	"PING_EVERY_1S":   0,
	"PING_EVERY_2S":   1,
	"PING_EVERY_4S":   2,
	"PING_EVERY_8S":   3,
	"PING_EVERY_16S":  4,
	"PING_EVERY_32S":  5,
	"PING_EVERY_64S":  6,
	"PING_EVERY_128S": 7,
}

func (PingSlotPeriod) EnumDescriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{10} }

type Message struct {
	MHDR `protobuf:"bytes,1,opt,name=m_hdr,json=mHdr,embedded=m_hdr" json:"m_hdr"`
	MIC  []byte `protobuf:"bytes,2,opt,name=mic,proto3" json:"mic,omitempty"`
	// Payload represents either MACPayload, RejoinRequestPayload, JoinRequestPayload or JoinAcceptPayload
	// - MACPayload length is in range [7:M] bytes, where M is region specific(see LoRaWAN spec).
	// - JoinRequestPayload length is 18 bytes.
	// - JoinAcceptPayload length is either 12 or 28 bytes.
	// - RejoinRequestPayload length is 14 for Type 0 and 2, 19 for Type 1.
	//
	// Types that are valid to be assigned to Payload:
	//	*Message_MACPayload
	//	*Message_JoinRequestPayload
	//	*Message_JoinAcceptPayload
	//	*Message_RejoinRequestPayload
	Payload isMessage_Payload `protobuf_oneof:"Payload"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{0} }

type isMessage_Payload interface {
	isMessage_Payload()
	Equal(interface{}) bool
	VerboseEqual(interface{}) error
	MarshalTo([]byte) (int, error)
	Size() int
}

type Message_MACPayload struct {
	MACPayload *MACPayload `protobuf:"bytes,3,opt,name=mac_payload,json=macPayload,oneof"`
}
type Message_JoinRequestPayload struct {
	JoinRequestPayload *JoinRequestPayload `protobuf:"bytes,4,opt,name=join_request_payload,json=joinRequestPayload,oneof"`
}
type Message_JoinAcceptPayload struct {
	JoinAcceptPayload *JoinAcceptPayload `protobuf:"bytes,5,opt,name=join_accept_payload,json=joinAcceptPayload,oneof"`
}
type Message_RejoinRequestPayload struct {
	RejoinRequestPayload *RejoinRequestPayload `protobuf:"bytes,6,opt,name=rejoin_request_payload,json=rejoinRequestPayload,oneof"`
}

func (*Message_MACPayload) isMessage_Payload()           {}
func (*Message_JoinRequestPayload) isMessage_Payload()   {}
func (*Message_JoinAcceptPayload) isMessage_Payload()    {}
func (*Message_RejoinRequestPayload) isMessage_Payload() {}

func (m *Message) GetPayload() isMessage_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Message) GetMIC() []byte {
	if m != nil {
		return m.MIC
	}
	return nil
}

func (m *Message) GetMACPayload() *MACPayload {
	if x, ok := m.GetPayload().(*Message_MACPayload); ok {
		return x.MACPayload
	}
	return nil
}

func (m *Message) GetJoinRequestPayload() *JoinRequestPayload {
	if x, ok := m.GetPayload().(*Message_JoinRequestPayload); ok {
		return x.JoinRequestPayload
	}
	return nil
}

func (m *Message) GetJoinAcceptPayload() *JoinAcceptPayload {
	if x, ok := m.GetPayload().(*Message_JoinAcceptPayload); ok {
		return x.JoinAcceptPayload
	}
	return nil
}

func (m *Message) GetRejoinRequestPayload() *RejoinRequestPayload {
	if x, ok := m.GetPayload().(*Message_RejoinRequestPayload); ok {
		return x.RejoinRequestPayload
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Message) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Message_OneofMarshaler, _Message_OneofUnmarshaler, _Message_OneofSizer, []interface{}{
		(*Message_MACPayload)(nil),
		(*Message_JoinRequestPayload)(nil),
		(*Message_JoinAcceptPayload)(nil),
		(*Message_RejoinRequestPayload)(nil),
	}
}

func _Message_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Message)
	// Payload
	switch x := m.Payload.(type) {
	case *Message_MACPayload:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MACPayload); err != nil {
			return err
		}
	case *Message_JoinRequestPayload:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.JoinRequestPayload); err != nil {
			return err
		}
	case *Message_JoinAcceptPayload:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.JoinAcceptPayload); err != nil {
			return err
		}
	case *Message_RejoinRequestPayload:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RejoinRequestPayload); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Message.Payload has unexpected type %T", x)
	}
	return nil
}

func _Message_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Message)
	switch tag {
	case 3: // Payload.mac_payload
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACPayload)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_MACPayload{msg}
		return true, err
	case 4: // Payload.join_request_payload
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JoinRequestPayload)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_JoinRequestPayload{msg}
		return true, err
	case 5: // Payload.join_accept_payload
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JoinAcceptPayload)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_JoinAcceptPayload{msg}
		return true, err
	case 6: // Payload.rejoin_request_payload
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RejoinRequestPayload)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_RejoinRequestPayload{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Message_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Message)
	// Payload
	switch x := m.Payload.(type) {
	case *Message_MACPayload:
		s := proto.Size(x.MACPayload)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_JoinRequestPayload:
		s := proto.Size(x.JoinRequestPayload)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_JoinAcceptPayload:
		s := proto.Size(x.JoinAcceptPayload)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_RejoinRequestPayload:
		s := proto.Size(x.RejoinRequestPayload)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type MHDR struct {
	MType MType `protobuf:"varint,1,opt,name=m_type,json=mType,proto3,enum=ttn.v3.MType" json:"m_type,omitempty"`
	Major Major `protobuf:"varint,2,opt,name=major,proto3,enum=ttn.v3.Major" json:"major,omitempty"`
}

func (m *MHDR) Reset()                    { *m = MHDR{} }
func (m *MHDR) String() string            { return proto.CompactTextString(m) }
func (*MHDR) ProtoMessage()               {}
func (*MHDR) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{1} }

func (m *MHDR) GetMType() MType {
	if m != nil {
		return m.MType
	}
	return MType_JOIN_REQUEST
}

func (m *MHDR) GetMajor() Major {
	if m != nil {
		return m.Major
	}
	return Major_LORAWAN_R1
}

type MACPayload struct {
	FHDR       `protobuf:"bytes,1,opt,name=f_hdr,json=fHdr,embedded=f_hdr" json:"f_hdr"`
	FPort      uint32 `protobuf:"varint,2,opt,name=f_port,json=fPort,proto3" json:"f_port,omitempty"`
	FRMPayload []byte `protobuf:"bytes,3,opt,name=frm_payload,json=frmPayload,proto3" json:"frm_payload,omitempty"`
}

func (m *MACPayload) Reset()                    { *m = MACPayload{} }
func (m *MACPayload) String() string            { return proto.CompactTextString(m) }
func (*MACPayload) ProtoMessage()               {}
func (*MACPayload) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{2} }

func (m *MACPayload) GetFPort() uint32 {
	if m != nil {
		return m.FPort
	}
	return 0
}

func (m *MACPayload) GetFRMPayload() []byte {
	if m != nil {
		return m.FRMPayload
	}
	return nil
}

type FHDR struct {
	DevAddr github_com_TheThingsNetwork_ttn_pkg_types.DevAddr `protobuf:"bytes,1,opt,name=dev_addr,json=devAddr,proto3,customtype=github.com/TheThingsNetwork/ttn/pkg/types.DevAddr" json:"dev_addr"`
	FCtrl   `protobuf:"bytes,2,opt,name=f_ctrl,json=fCtrl,embedded=f_ctrl" json:"f_ctrl"`
	FCnt    uint32 `protobuf:"varint,3,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	FOpts   []byte `protobuf:"bytes,4,opt,name=f_opts,json=fOpts,proto3" json:"f_opts,omitempty"`
}

func (m *FHDR) Reset()                    { *m = FHDR{} }
func (m *FHDR) String() string            { return proto.CompactTextString(m) }
func (*FHDR) ProtoMessage()               {}
func (*FHDR) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{3} }

func (m *FHDR) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

func (m *FHDR) GetFOpts() []byte {
	if m != nil {
		return m.FOpts
	}
	return nil
}

type FCtrl struct {
	ADR       bool `protobuf:"varint,1,opt,name=adr,proto3" json:"adr,omitempty"`
	ADRAckReq bool `protobuf:"varint,2,opt,name=adr_ack_req,json=adrAckReq,proto3" json:"adr_ack_req,omitempty"`
	Ack       bool `protobuf:"varint,3,opt,name=ack,proto3" json:"ack,omitempty"`
	FPending  bool `protobuf:"varint,4,opt,name=f_pending,json=fPending,proto3" json:"f_pending,omitempty"`
	ClassB    bool `protobuf:"varint,5,opt,name=class_b,json=classB,proto3" json:"class_b,omitempty"`
}

func (m *FCtrl) Reset()                    { *m = FCtrl{} }
func (m *FCtrl) String() string            { return proto.CompactTextString(m) }
func (*FCtrl) ProtoMessage()               {}
func (*FCtrl) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{4} }

func (m *FCtrl) GetADR() bool {
	if m != nil {
		return m.ADR
	}
	return false
}

func (m *FCtrl) GetADRAckReq() bool {
	if m != nil {
		return m.ADRAckReq
	}
	return false
}

func (m *FCtrl) GetAck() bool {
	if m != nil {
		return m.Ack
	}
	return false
}

func (m *FCtrl) GetFPending() bool {
	if m != nil {
		return m.FPending
	}
	return false
}

func (m *FCtrl) GetClassB() bool {
	if m != nil {
		return m.ClassB
	}
	return false
}

type JoinRequestPayload struct {
	JoinEUI  github_com_TheThingsNetwork_ttn_pkg_types.EUI64    `protobuf:"bytes,1,opt,name=join_eui,json=joinEui,proto3,customtype=github.com/TheThingsNetwork/ttn/pkg/types.EUI64" json:"join_eui"`
	DevEUI   github_com_TheThingsNetwork_ttn_pkg_types.EUI64    `protobuf:"bytes,2,opt,name=dev_eui,json=devEui,proto3,customtype=github.com/TheThingsNetwork/ttn/pkg/types.EUI64" json:"dev_eui"`
	DevNonce github_com_TheThingsNetwork_ttn_pkg_types.DevNonce `protobuf:"bytes,3,opt,name=dev_nonce,json=devNonce,proto3,customtype=github.com/TheThingsNetwork/ttn/pkg/types.DevNonce" json:"dev_nonce"`
}

func (m *JoinRequestPayload) Reset()                    { *m = JoinRequestPayload{} }
func (m *JoinRequestPayload) String() string            { return proto.CompactTextString(m) }
func (*JoinRequestPayload) ProtoMessage()               {}
func (*JoinRequestPayload) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{5} }

type RejoinRequestPayload struct {
	RejoinType RejoinType                                      `protobuf:"varint,1,opt,name=rejoin_type,json=rejoinType,proto3,enum=ttn.v3.RejoinType" json:"rejoin_type,omitempty"`
	NetID      github_com_TheThingsNetwork_ttn_pkg_types.NetID `protobuf:"bytes,2,opt,name=net_id,json=netId,proto3,customtype=github.com/TheThingsNetwork/ttn/pkg/types.NetID" json:"net_id"`
	JoinEUI    github_com_TheThingsNetwork_ttn_pkg_types.EUI64 `protobuf:"bytes,3,opt,name=join_eui,json=joinEui,proto3,customtype=github.com/TheThingsNetwork/ttn/pkg/types.EUI64" json:"join_eui"`
	DevEUI     github_com_TheThingsNetwork_ttn_pkg_types.EUI64 `protobuf:"bytes,4,opt,name=dev_eui,json=devEui,proto3,customtype=github.com/TheThingsNetwork/ttn/pkg/types.EUI64" json:"dev_eui"`
	RejoinCnt  uint32                                          `protobuf:"varint,5,opt,name=rejoin_cnt,json=rejoinCnt,proto3" json:"rejoin_cnt,omitempty"`
}

func (m *RejoinRequestPayload) Reset()                    { *m = RejoinRequestPayload{} }
func (m *RejoinRequestPayload) String() string            { return proto.CompactTextString(m) }
func (*RejoinRequestPayload) ProtoMessage()               {}
func (*RejoinRequestPayload) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{6} }

func (m *RejoinRequestPayload) GetRejoinType() RejoinType {
	if m != nil {
		return m.RejoinType
	}
	return RejoinType_CONTEXT
}

func (m *RejoinRequestPayload) GetRejoinCnt() uint32 {
	if m != nil {
		return m.RejoinCnt
	}
	return 0
}

type JoinAcceptPayload struct {
	Encrypted  []byte                                              `protobuf:"bytes,1,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
	JoinNonce  github_com_TheThingsNetwork_ttn_pkg_types.JoinNonce `protobuf:"bytes,2,opt,name=join_nonce,json=joinNonce,proto3,customtype=github.com/TheThingsNetwork/ttn/pkg/types.JoinNonce" json:"join_nonce"`
	NetID      github_com_TheThingsNetwork_ttn_pkg_types.NetID     `protobuf:"bytes,3,opt,name=net_id,json=netId,proto3,customtype=github.com/TheThingsNetwork/ttn/pkg/types.NetID" json:"net_id"`
	DevAddr    github_com_TheThingsNetwork_ttn_pkg_types.DevAddr   `protobuf:"bytes,4,opt,name=dev_addr,json=devAddr,proto3,customtype=github.com/TheThingsNetwork/ttn/pkg/types.DevAddr" json:"dev_addr"`
	DLSettings `protobuf:"bytes,5,opt,name=dl_settings,json=dlSettings,embedded=dl_settings" json:"dl_settings"`
	RxDelay    uint32  `protobuf:"varint,6,opt,name=rx_delay,json=rxDelay,proto3" json:"rx_delay,omitempty"`
	CFList     *CFList `protobuf:"bytes,7,opt,name=cf_list,json=cfList" json:"cf_list,omitempty"`
}

func (m *JoinAcceptPayload) Reset()                    { *m = JoinAcceptPayload{} }
func (m *JoinAcceptPayload) String() string            { return proto.CompactTextString(m) }
func (*JoinAcceptPayload) ProtoMessage()               {}
func (*JoinAcceptPayload) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{7} }

func (m *JoinAcceptPayload) GetEncrypted() []byte {
	if m != nil {
		return m.Encrypted
	}
	return nil
}

func (m *JoinAcceptPayload) GetRxDelay() uint32 {
	if m != nil {
		return m.RxDelay
	}
	return 0
}

func (m *JoinAcceptPayload) GetCFList() *CFList {
	if m != nil {
		return m.CFList
	}
	return nil
}

type DLSettings struct {
	Rx1DROffset uint32 `protobuf:"varint,1,opt,name=rx1_dr_offset,json=rx1DrOffset,proto3" json:"rx1_dr_offset,omitempty"`
	Rx2DR       uint32 `protobuf:"varint,2,opt,name=rx2_dr,json=rx2Dr,proto3" json:"rx2_dr,omitempty"`
	OptNeg      bool   `protobuf:"varint,3,opt,name=opt_neg,json=optNeg,proto3" json:"opt_neg,omitempty"`
}

func (m *DLSettings) Reset()                    { *m = DLSettings{} }
func (m *DLSettings) String() string            { return proto.CompactTextString(m) }
func (*DLSettings) ProtoMessage()               {}
func (*DLSettings) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{8} }

func (m *DLSettings) GetRx1DROffset() uint32 {
	if m != nil {
		return m.Rx1DROffset
	}
	return 0
}

func (m *DLSettings) GetRx2DR() uint32 {
	if m != nil {
		return m.Rx2DR
	}
	return 0
}

func (m *DLSettings) GetOptNeg() bool {
	if m != nil {
		return m.OptNeg
	}
	return false
}

type CFList struct {
	Type    CFListType `protobuf:"varint,1,opt,name=type,proto3,enum=ttn.v3.CFListType" json:"type,omitempty"`
	Freq    []uint32   `protobuf:"varint,2,rep,packed,name=freq" json:"freq,omitempty"`
	ChMasks []bool     `protobuf:"varint,3,rep,packed,name=ch_masks,json=chMasks" json:"ch_masks,omitempty"`
}

func (m *CFList) Reset()                    { *m = CFList{} }
func (m *CFList) String() string            { return proto.CompactTextString(m) }
func (*CFList) ProtoMessage()               {}
func (*CFList) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{9} }

func (m *CFList) GetType() CFListType {
	if m != nil {
		return m.Type
	}
	return CFListType_FREQUENCIES
}

func (m *CFList) GetFreq() []uint32 {
	if m != nil {
		return m.Freq
	}
	return nil
}

func (m *CFList) GetChMasks() []bool {
	if m != nil {
		return m.ChMasks
	}
	return nil
}

// TxSettings contains the LoRaWAN settings for a transmission.
// This message is used in both uplink and downlink
type TxSettings struct {
	Modulation Modulation `protobuf:"varint,1,opt,name=modulation,proto3,enum=ttn.v3.Modulation" json:"modulation,omitempty"`
	// LoRaWAN data rate index
	DataRateIndex int32 `protobuf:"varint,2,opt,name=data_rate_index,json=dataRateIndex,proto3" json:"data_rate_index,omitempty"`
	// Bandwidth in Hz (derived from data_rate_index)
	Bandwidth uint32 `protobuf:"varint,3,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	// LoRa spreading factor (derived from data_rate_index)
	SpreadingFactor uint32 `protobuf:"varint,4,opt,name=spreading_factor,json=spreadingFactor,proto3" json:"spreading_factor,omitempty"`
	// FSK bit rate (derived from data_rate_index)
	BitRate uint32 `protobuf:"varint,5,opt,name=bit_rate,json=bitRate,proto3" json:"bit_rate,omitempty"`
	// LoRa coding rate
	CodingRate string `protobuf:"bytes,6,opt,name=coding_rate,json=codingRate,proto3" json:"coding_rate,omitempty"`
	// Frequency in Hz
	Frequency uint64 `protobuf:"varint,7,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// Transmit power in dBm
	// - not set on uplink messages
	TxPower int32 `protobuf:"varint,8,opt,name=tx_power,json=txPower,proto3" json:"tx_power,omitempty"`
	// LoRa polarization inversion
	// - gateway to end device: true
	// - end device to gateway: false
	PolarizationInversion bool `protobuf:"varint,9,opt,name=polarization_inversion,json=polarizationInversion,proto3" json:"polarization_inversion,omitempty"`
}

func (m *TxSettings) Reset()                    { *m = TxSettings{} }
func (m *TxSettings) String() string            { return proto.CompactTextString(m) }
func (*TxSettings) ProtoMessage()               {}
func (*TxSettings) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{10} }

func (m *TxSettings) GetModulation() Modulation {
	if m != nil {
		return m.Modulation
	}
	return Modulation_LORA
}

func (m *TxSettings) GetDataRateIndex() int32 {
	if m != nil {
		return m.DataRateIndex
	}
	return 0
}

func (m *TxSettings) GetBandwidth() uint32 {
	if m != nil {
		return m.Bandwidth
	}
	return 0
}

func (m *TxSettings) GetSpreadingFactor() uint32 {
	if m != nil {
		return m.SpreadingFactor
	}
	return 0
}

func (m *TxSettings) GetBitRate() uint32 {
	if m != nil {
		return m.BitRate
	}
	return 0
}

func (m *TxSettings) GetCodingRate() string {
	if m != nil {
		return m.CodingRate
	}
	return ""
}

func (m *TxSettings) GetFrequency() uint64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *TxSettings) GetTxPower() int32 {
	if m != nil {
		return m.TxPower
	}
	return 0
}

func (m *TxSettings) GetPolarizationInversion() bool {
	if m != nil {
		return m.PolarizationInversion
	}
	return false
}

type MACCommand struct {
	// Types that are valid to be assigned to Payload:
	//	*MACCommand_CID
	//	*MACCommand_Proprietary_
	//	*MACCommand_ResetInd_
	//	*MACCommand_ResetConf_
	//	*MACCommand_LinkCheckAns_
	//	*MACCommand_LinkAdrReq
	//	*MACCommand_LinkAdrAns
	//	*MACCommand_DutyCycleReq_
	//	*MACCommand_RxParamSetupReq_
	//	*MACCommand_RxParamSetupAns_
	//	*MACCommand_DevStatusAns_
	//	*MACCommand_NewChannelReq_
	//	*MACCommand_NewChannelAns_
	//	*MACCommand_DlChannelReq
	//	*MACCommand_DlChannelAns
	//	*MACCommand_RxTimingSetupReq_
	//	*MACCommand_TxParamSetupReq_
	//	*MACCommand_RekeyInd_
	//	*MACCommand_RekeyConf_
	//	*MACCommand_AdrParamSetupReq
	//	*MACCommand_DeviceTimeAns_
	//	*MACCommand_ForceRejoinReq_
	//	*MACCommand_RejoinParamSetupReq_
	//	*MACCommand_RejoinParamSetupAns_
	//	*MACCommand_PingSlotInfoReq_
	//	*MACCommand_PingSlotChannelReq_
	//	*MACCommand_PingSlotChannelAns_
	//	*MACCommand_BeaconTimingAns_
	//	*MACCommand_BeaconFreqReq_
	//	*MACCommand_BeaconFreqAns_
	//	*MACCommand_DeviceModeInd_
	//	*MACCommand_DeviceModeConf_
	Payload isMACCommand_Payload `protobuf_oneof:"payload"`
}

func (m *MACCommand) Reset()                    { *m = MACCommand{} }
func (m *MACCommand) String() string            { return proto.CompactTextString(m) }
func (*MACCommand) ProtoMessage()               {}
func (*MACCommand) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{11} }

type isMACCommand_Payload interface {
	isMACCommand_Payload()
	Equal(interface{}) bool
	VerboseEqual(interface{}) error
	MarshalTo([]byte) (int, error)
	Size() int
}

type MACCommand_CID struct {
	CID MACCommandIdentifier `protobuf:"varint,1,opt,name=cid,proto3,enum=ttn.v3.MACCommandIdentifier,oneof"`
}
type MACCommand_Proprietary_ struct {
	Proprietary *MACCommand_Proprietary `protobuf:"bytes,2,opt,name=proprietary,oneof"`
}
type MACCommand_ResetInd_ struct {
	ResetInd *MACCommand_ResetInd `protobuf:"bytes,3,opt,name=reset_ind,json=resetInd,oneof"`
}
type MACCommand_ResetConf_ struct {
	ResetConf *MACCommand_ResetConf `protobuf:"bytes,4,opt,name=reset_conf,json=resetConf,oneof"`
}
type MACCommand_LinkCheckAns_ struct {
	LinkCheckAns *MACCommand_LinkCheckAns `protobuf:"bytes,5,opt,name=link_check_ans,json=linkCheckAns,oneof"`
}
type MACCommand_LinkAdrReq struct {
	LinkAdrReq *MACCommand_LinkADRReq `protobuf:"bytes,6,opt,name=link_adr_req,json=linkAdrReq,oneof"`
}
type MACCommand_LinkAdrAns struct {
	LinkAdrAns *MACCommand_LinkADRAns `protobuf:"bytes,7,opt,name=link_adr_ans,json=linkAdrAns,oneof"`
}
type MACCommand_DutyCycleReq_ struct {
	DutyCycleReq *MACCommand_DutyCycleReq `protobuf:"bytes,8,opt,name=duty_cycle_req,json=dutyCycleReq,oneof"`
}
type MACCommand_RxParamSetupReq_ struct {
	RxParamSetupReq *MACCommand_RxParamSetupReq `protobuf:"bytes,9,opt,name=rx_param_setup_req,json=rxParamSetupReq,oneof"`
}
type MACCommand_RxParamSetupAns_ struct {
	RxParamSetupAns *MACCommand_RxParamSetupAns `protobuf:"bytes,10,opt,name=rx_param_setup_ans,json=rxParamSetupAns,oneof"`
}
type MACCommand_DevStatusAns_ struct {
	DevStatusAns *MACCommand_DevStatusAns `protobuf:"bytes,11,opt,name=dev_status_ans,json=devStatusAns,oneof"`
}
type MACCommand_NewChannelReq_ struct {
	NewChannelReq *MACCommand_NewChannelReq `protobuf:"bytes,12,opt,name=new_channel_req,json=newChannelReq,oneof"`
}
type MACCommand_NewChannelAns_ struct {
	NewChannelAns *MACCommand_NewChannelAns `protobuf:"bytes,13,opt,name=new_channel_ans,json=newChannelAns,oneof"`
}
type MACCommand_DlChannelReq struct {
	DlChannelReq *MACCommand_DLChannelReq `protobuf:"bytes,14,opt,name=dl_channel_req,json=dlChannelReq,oneof"`
}
type MACCommand_DlChannelAns struct {
	DlChannelAns *MACCommand_DLChannelAns `protobuf:"bytes,15,opt,name=dl_channel_ans,json=dlChannelAns,oneof"`
}
type MACCommand_RxTimingSetupReq_ struct {
	RxTimingSetupReq *MACCommand_RxTimingSetupReq `protobuf:"bytes,16,opt,name=rx_timing_setup_req,json=rxTimingSetupReq,oneof"`
}
type MACCommand_TxParamSetupReq_ struct {
	TxParamSetupReq *MACCommand_TxParamSetupReq `protobuf:"bytes,17,opt,name=tx_param_setup_req,json=txParamSetupReq,oneof"`
}
type MACCommand_RekeyInd_ struct {
	RekeyInd *MACCommand_RekeyInd `protobuf:"bytes,18,opt,name=rekey_ind,json=rekeyInd,oneof"`
}
type MACCommand_RekeyConf_ struct {
	RekeyConf *MACCommand_RekeyConf `protobuf:"bytes,19,opt,name=rekey_conf,json=rekeyConf,oneof"`
}
type MACCommand_AdrParamSetupReq struct {
	AdrParamSetupReq *MACCommand_ADRParamSetupReq `protobuf:"bytes,20,opt,name=adr_param_setup_req,json=adrParamSetupReq,oneof"`
}
type MACCommand_DeviceTimeAns_ struct {
	DeviceTimeAns *MACCommand_DeviceTimeAns `protobuf:"bytes,21,opt,name=device_time_ans,json=deviceTimeAns,oneof"`
}
type MACCommand_ForceRejoinReq_ struct {
	ForceRejoinReq *MACCommand_ForceRejoinReq `protobuf:"bytes,22,opt,name=force_rejoin_req,json=forceRejoinReq,oneof"`
}
type MACCommand_RejoinParamSetupReq_ struct {
	RejoinParamSetupReq *MACCommand_RejoinParamSetupReq `protobuf:"bytes,23,opt,name=rejoin_param_setup_req,json=rejoinParamSetupReq,oneof"`
}
type MACCommand_RejoinParamSetupAns_ struct {
	RejoinParamSetupAns *MACCommand_RejoinParamSetupAns `protobuf:"bytes,24,opt,name=rejoin_param_setup_ans,json=rejoinParamSetupAns,oneof"`
}
type MACCommand_PingSlotInfoReq_ struct {
	PingSlotInfoReq *MACCommand_PingSlotInfoReq `protobuf:"bytes,25,opt,name=ping_slot_info_req,json=pingSlotInfoReq,oneof"`
}
type MACCommand_PingSlotChannelReq_ struct {
	PingSlotChannelReq *MACCommand_PingSlotChannelReq `protobuf:"bytes,26,opt,name=ping_slot_channel_req,json=pingSlotChannelReq,oneof"`
}
type MACCommand_PingSlotChannelAns_ struct {
	PingSlotChannelAns *MACCommand_PingSlotChannelAns `protobuf:"bytes,27,opt,name=ping_slot_channel_ans,json=pingSlotChannelAns,oneof"`
}
type MACCommand_BeaconTimingAns_ struct {
	BeaconTimingAns *MACCommand_BeaconTimingAns `protobuf:"bytes,28,opt,name=beacon_timing_ans,json=beaconTimingAns,oneof"`
}
type MACCommand_BeaconFreqReq_ struct {
	BeaconFreqReq *MACCommand_BeaconFreqReq `protobuf:"bytes,29,opt,name=beacon_freq_req,json=beaconFreqReq,oneof"`
}
type MACCommand_BeaconFreqAns_ struct {
	BeaconFreqAns *MACCommand_BeaconFreqAns `protobuf:"bytes,30,opt,name=beacon_freq_ans,json=beaconFreqAns,oneof"`
}
type MACCommand_DeviceModeInd_ struct {
	DeviceModeInd *MACCommand_DeviceModeInd `protobuf:"bytes,31,opt,name=device_mode_ind,json=deviceModeInd,oneof"`
}
type MACCommand_DeviceModeConf_ struct {
	DeviceModeConf *MACCommand_DeviceModeConf `protobuf:"bytes,32,opt,name=device_mode_conf,json=deviceModeConf,oneof"`
}

func (*MACCommand_CID) isMACCommand_Payload()                  {}
func (*MACCommand_Proprietary_) isMACCommand_Payload()         {}
func (*MACCommand_ResetInd_) isMACCommand_Payload()            {}
func (*MACCommand_ResetConf_) isMACCommand_Payload()           {}
func (*MACCommand_LinkCheckAns_) isMACCommand_Payload()        {}
func (*MACCommand_LinkAdrReq) isMACCommand_Payload()           {}
func (*MACCommand_LinkAdrAns) isMACCommand_Payload()           {}
func (*MACCommand_DutyCycleReq_) isMACCommand_Payload()        {}
func (*MACCommand_RxParamSetupReq_) isMACCommand_Payload()     {}
func (*MACCommand_RxParamSetupAns_) isMACCommand_Payload()     {}
func (*MACCommand_DevStatusAns_) isMACCommand_Payload()        {}
func (*MACCommand_NewChannelReq_) isMACCommand_Payload()       {}
func (*MACCommand_NewChannelAns_) isMACCommand_Payload()       {}
func (*MACCommand_DlChannelReq) isMACCommand_Payload()         {}
func (*MACCommand_DlChannelAns) isMACCommand_Payload()         {}
func (*MACCommand_RxTimingSetupReq_) isMACCommand_Payload()    {}
func (*MACCommand_TxParamSetupReq_) isMACCommand_Payload()     {}
func (*MACCommand_RekeyInd_) isMACCommand_Payload()            {}
func (*MACCommand_RekeyConf_) isMACCommand_Payload()           {}
func (*MACCommand_AdrParamSetupReq) isMACCommand_Payload()     {}
func (*MACCommand_DeviceTimeAns_) isMACCommand_Payload()       {}
func (*MACCommand_ForceRejoinReq_) isMACCommand_Payload()      {}
func (*MACCommand_RejoinParamSetupReq_) isMACCommand_Payload() {}
func (*MACCommand_RejoinParamSetupAns_) isMACCommand_Payload() {}
func (*MACCommand_PingSlotInfoReq_) isMACCommand_Payload()     {}
func (*MACCommand_PingSlotChannelReq_) isMACCommand_Payload()  {}
func (*MACCommand_PingSlotChannelAns_) isMACCommand_Payload()  {}
func (*MACCommand_BeaconTimingAns_) isMACCommand_Payload()     {}
func (*MACCommand_BeaconFreqReq_) isMACCommand_Payload()       {}
func (*MACCommand_BeaconFreqAns_) isMACCommand_Payload()       {}
func (*MACCommand_DeviceModeInd_) isMACCommand_Payload()       {}
func (*MACCommand_DeviceModeConf_) isMACCommand_Payload()      {}

func (m *MACCommand) GetPayload() isMACCommand_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *MACCommand) GetCID() MACCommandIdentifier {
	if x, ok := m.GetPayload().(*MACCommand_CID); ok {
		return x.CID
	}
	return cid_rfu_0
}

func (m *MACCommand) GetProprietary() *MACCommand_Proprietary {
	if x, ok := m.GetPayload().(*MACCommand_Proprietary_); ok {
		return x.Proprietary
	}
	return nil
}

func (m *MACCommand) GetResetInd() *MACCommand_ResetInd {
	if x, ok := m.GetPayload().(*MACCommand_ResetInd_); ok {
		return x.ResetInd
	}
	return nil
}

func (m *MACCommand) GetResetConf() *MACCommand_ResetConf {
	if x, ok := m.GetPayload().(*MACCommand_ResetConf_); ok {
		return x.ResetConf
	}
	return nil
}

func (m *MACCommand) GetLinkCheckAns() *MACCommand_LinkCheckAns {
	if x, ok := m.GetPayload().(*MACCommand_LinkCheckAns_); ok {
		return x.LinkCheckAns
	}
	return nil
}

func (m *MACCommand) GetLinkAdrReq() *MACCommand_LinkADRReq {
	if x, ok := m.GetPayload().(*MACCommand_LinkAdrReq); ok {
		return x.LinkAdrReq
	}
	return nil
}

func (m *MACCommand) GetLinkAdrAns() *MACCommand_LinkADRAns {
	if x, ok := m.GetPayload().(*MACCommand_LinkAdrAns); ok {
		return x.LinkAdrAns
	}
	return nil
}

func (m *MACCommand) GetDutyCycleReq() *MACCommand_DutyCycleReq {
	if x, ok := m.GetPayload().(*MACCommand_DutyCycleReq_); ok {
		return x.DutyCycleReq
	}
	return nil
}

func (m *MACCommand) GetRxParamSetupReq() *MACCommand_RxParamSetupReq {
	if x, ok := m.GetPayload().(*MACCommand_RxParamSetupReq_); ok {
		return x.RxParamSetupReq
	}
	return nil
}

func (m *MACCommand) GetRxParamSetupAns() *MACCommand_RxParamSetupAns {
	if x, ok := m.GetPayload().(*MACCommand_RxParamSetupAns_); ok {
		return x.RxParamSetupAns
	}
	return nil
}

func (m *MACCommand) GetDevStatusAns() *MACCommand_DevStatusAns {
	if x, ok := m.GetPayload().(*MACCommand_DevStatusAns_); ok {
		return x.DevStatusAns
	}
	return nil
}

func (m *MACCommand) GetNewChannelReq() *MACCommand_NewChannelReq {
	if x, ok := m.GetPayload().(*MACCommand_NewChannelReq_); ok {
		return x.NewChannelReq
	}
	return nil
}

func (m *MACCommand) GetNewChannelAns() *MACCommand_NewChannelAns {
	if x, ok := m.GetPayload().(*MACCommand_NewChannelAns_); ok {
		return x.NewChannelAns
	}
	return nil
}

func (m *MACCommand) GetDlChannelReq() *MACCommand_DLChannelReq {
	if x, ok := m.GetPayload().(*MACCommand_DlChannelReq); ok {
		return x.DlChannelReq
	}
	return nil
}

func (m *MACCommand) GetDlChannelAns() *MACCommand_DLChannelAns {
	if x, ok := m.GetPayload().(*MACCommand_DlChannelAns); ok {
		return x.DlChannelAns
	}
	return nil
}

func (m *MACCommand) GetRxTimingSetupReq() *MACCommand_RxTimingSetupReq {
	if x, ok := m.GetPayload().(*MACCommand_RxTimingSetupReq_); ok {
		return x.RxTimingSetupReq
	}
	return nil
}

func (m *MACCommand) GetTxParamSetupReq() *MACCommand_TxParamSetupReq {
	if x, ok := m.GetPayload().(*MACCommand_TxParamSetupReq_); ok {
		return x.TxParamSetupReq
	}
	return nil
}

func (m *MACCommand) GetRekeyInd() *MACCommand_RekeyInd {
	if x, ok := m.GetPayload().(*MACCommand_RekeyInd_); ok {
		return x.RekeyInd
	}
	return nil
}

func (m *MACCommand) GetRekeyConf() *MACCommand_RekeyConf {
	if x, ok := m.GetPayload().(*MACCommand_RekeyConf_); ok {
		return x.RekeyConf
	}
	return nil
}

func (m *MACCommand) GetAdrParamSetupReq() *MACCommand_ADRParamSetupReq {
	if x, ok := m.GetPayload().(*MACCommand_AdrParamSetupReq); ok {
		return x.AdrParamSetupReq
	}
	return nil
}

func (m *MACCommand) GetDeviceTimeAns() *MACCommand_DeviceTimeAns {
	if x, ok := m.GetPayload().(*MACCommand_DeviceTimeAns_); ok {
		return x.DeviceTimeAns
	}
	return nil
}

func (m *MACCommand) GetForceRejoinReq() *MACCommand_ForceRejoinReq {
	if x, ok := m.GetPayload().(*MACCommand_ForceRejoinReq_); ok {
		return x.ForceRejoinReq
	}
	return nil
}

func (m *MACCommand) GetRejoinParamSetupReq() *MACCommand_RejoinParamSetupReq {
	if x, ok := m.GetPayload().(*MACCommand_RejoinParamSetupReq_); ok {
		return x.RejoinParamSetupReq
	}
	return nil
}

func (m *MACCommand) GetRejoinParamSetupAns() *MACCommand_RejoinParamSetupAns {
	if x, ok := m.GetPayload().(*MACCommand_RejoinParamSetupAns_); ok {
		return x.RejoinParamSetupAns
	}
	return nil
}

func (m *MACCommand) GetPingSlotInfoReq() *MACCommand_PingSlotInfoReq {
	if x, ok := m.GetPayload().(*MACCommand_PingSlotInfoReq_); ok {
		return x.PingSlotInfoReq
	}
	return nil
}

func (m *MACCommand) GetPingSlotChannelReq() *MACCommand_PingSlotChannelReq {
	if x, ok := m.GetPayload().(*MACCommand_PingSlotChannelReq_); ok {
		return x.PingSlotChannelReq
	}
	return nil
}

func (m *MACCommand) GetPingSlotChannelAns() *MACCommand_PingSlotChannelAns {
	if x, ok := m.GetPayload().(*MACCommand_PingSlotChannelAns_); ok {
		return x.PingSlotChannelAns
	}
	return nil
}

func (m *MACCommand) GetBeaconTimingAns() *MACCommand_BeaconTimingAns {
	if x, ok := m.GetPayload().(*MACCommand_BeaconTimingAns_); ok {
		return x.BeaconTimingAns
	}
	return nil
}

func (m *MACCommand) GetBeaconFreqReq() *MACCommand_BeaconFreqReq {
	if x, ok := m.GetPayload().(*MACCommand_BeaconFreqReq_); ok {
		return x.BeaconFreqReq
	}
	return nil
}

func (m *MACCommand) GetBeaconFreqAns() *MACCommand_BeaconFreqAns {
	if x, ok := m.GetPayload().(*MACCommand_BeaconFreqAns_); ok {
		return x.BeaconFreqAns
	}
	return nil
}

func (m *MACCommand) GetDeviceModeInd() *MACCommand_DeviceModeInd {
	if x, ok := m.GetPayload().(*MACCommand_DeviceModeInd_); ok {
		return x.DeviceModeInd
	}
	return nil
}

func (m *MACCommand) GetDeviceModeConf() *MACCommand_DeviceModeConf {
	if x, ok := m.GetPayload().(*MACCommand_DeviceModeConf_); ok {
		return x.DeviceModeConf
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*MACCommand) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _MACCommand_OneofMarshaler, _MACCommand_OneofUnmarshaler, _MACCommand_OneofSizer, []interface{}{
		(*MACCommand_CID)(nil),
		(*MACCommand_Proprietary_)(nil),
		(*MACCommand_ResetInd_)(nil),
		(*MACCommand_ResetConf_)(nil),
		(*MACCommand_LinkCheckAns_)(nil),
		(*MACCommand_LinkAdrReq)(nil),
		(*MACCommand_LinkAdrAns)(nil),
		(*MACCommand_DutyCycleReq_)(nil),
		(*MACCommand_RxParamSetupReq_)(nil),
		(*MACCommand_RxParamSetupAns_)(nil),
		(*MACCommand_DevStatusAns_)(nil),
		(*MACCommand_NewChannelReq_)(nil),
		(*MACCommand_NewChannelAns_)(nil),
		(*MACCommand_DlChannelReq)(nil),
		(*MACCommand_DlChannelAns)(nil),
		(*MACCommand_RxTimingSetupReq_)(nil),
		(*MACCommand_TxParamSetupReq_)(nil),
		(*MACCommand_RekeyInd_)(nil),
		(*MACCommand_RekeyConf_)(nil),
		(*MACCommand_AdrParamSetupReq)(nil),
		(*MACCommand_DeviceTimeAns_)(nil),
		(*MACCommand_ForceRejoinReq_)(nil),
		(*MACCommand_RejoinParamSetupReq_)(nil),
		(*MACCommand_RejoinParamSetupAns_)(nil),
		(*MACCommand_PingSlotInfoReq_)(nil),
		(*MACCommand_PingSlotChannelReq_)(nil),
		(*MACCommand_PingSlotChannelAns_)(nil),
		(*MACCommand_BeaconTimingAns_)(nil),
		(*MACCommand_BeaconFreqReq_)(nil),
		(*MACCommand_BeaconFreqAns_)(nil),
		(*MACCommand_DeviceModeInd_)(nil),
		(*MACCommand_DeviceModeConf_)(nil),
	}
}

func _MACCommand_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*MACCommand)
	// payload
	switch x := m.Payload.(type) {
	case *MACCommand_CID:
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.CID))
	case *MACCommand_Proprietary_:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Proprietary); err != nil {
			return err
		}
	case *MACCommand_ResetInd_:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ResetInd); err != nil {
			return err
		}
	case *MACCommand_ResetConf_:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ResetConf); err != nil {
			return err
		}
	case *MACCommand_LinkCheckAns_:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LinkCheckAns); err != nil {
			return err
		}
	case *MACCommand_LinkAdrReq:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LinkAdrReq); err != nil {
			return err
		}
	case *MACCommand_LinkAdrAns:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LinkAdrAns); err != nil {
			return err
		}
	case *MACCommand_DutyCycleReq_:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DutyCycleReq); err != nil {
			return err
		}
	case *MACCommand_RxParamSetupReq_:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RxParamSetupReq); err != nil {
			return err
		}
	case *MACCommand_RxParamSetupAns_:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RxParamSetupAns); err != nil {
			return err
		}
	case *MACCommand_DevStatusAns_:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DevStatusAns); err != nil {
			return err
		}
	case *MACCommand_NewChannelReq_:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NewChannelReq); err != nil {
			return err
		}
	case *MACCommand_NewChannelAns_:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NewChannelAns); err != nil {
			return err
		}
	case *MACCommand_DlChannelReq:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DlChannelReq); err != nil {
			return err
		}
	case *MACCommand_DlChannelAns:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DlChannelAns); err != nil {
			return err
		}
	case *MACCommand_RxTimingSetupReq_:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RxTimingSetupReq); err != nil {
			return err
		}
	case *MACCommand_TxParamSetupReq_:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TxParamSetupReq); err != nil {
			return err
		}
	case *MACCommand_RekeyInd_:
		_ = b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RekeyInd); err != nil {
			return err
		}
	case *MACCommand_RekeyConf_:
		_ = b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RekeyConf); err != nil {
			return err
		}
	case *MACCommand_AdrParamSetupReq:
		_ = b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdrParamSetupReq); err != nil {
			return err
		}
	case *MACCommand_DeviceTimeAns_:
		_ = b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeviceTimeAns); err != nil {
			return err
		}
	case *MACCommand_ForceRejoinReq_:
		_ = b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ForceRejoinReq); err != nil {
			return err
		}
	case *MACCommand_RejoinParamSetupReq_:
		_ = b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RejoinParamSetupReq); err != nil {
			return err
		}
	case *MACCommand_RejoinParamSetupAns_:
		_ = b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RejoinParamSetupAns); err != nil {
			return err
		}
	case *MACCommand_PingSlotInfoReq_:
		_ = b.EncodeVarint(25<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PingSlotInfoReq); err != nil {
			return err
		}
	case *MACCommand_PingSlotChannelReq_:
		_ = b.EncodeVarint(26<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PingSlotChannelReq); err != nil {
			return err
		}
	case *MACCommand_PingSlotChannelAns_:
		_ = b.EncodeVarint(27<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PingSlotChannelAns); err != nil {
			return err
		}
	case *MACCommand_BeaconTimingAns_:
		_ = b.EncodeVarint(28<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BeaconTimingAns); err != nil {
			return err
		}
	case *MACCommand_BeaconFreqReq_:
		_ = b.EncodeVarint(29<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BeaconFreqReq); err != nil {
			return err
		}
	case *MACCommand_BeaconFreqAns_:
		_ = b.EncodeVarint(30<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BeaconFreqAns); err != nil {
			return err
		}
	case *MACCommand_DeviceModeInd_:
		_ = b.EncodeVarint(31<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeviceModeInd); err != nil {
			return err
		}
	case *MACCommand_DeviceModeConf_:
		_ = b.EncodeVarint(32<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeviceModeConf); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("MACCommand.Payload has unexpected type %T", x)
	}
	return nil
}

func _MACCommand_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*MACCommand)
	switch tag {
	case 1: // payload.cid
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Payload = &MACCommand_CID{MACCommandIdentifier(x)}
		return true, err
	case 2: // payload.proprietary
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_Proprietary)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_Proprietary_{msg}
		return true, err
	case 3: // payload.reset_ind
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_ResetInd)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_ResetInd_{msg}
		return true, err
	case 4: // payload.reset_conf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_ResetConf)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_ResetConf_{msg}
		return true, err
	case 5: // payload.link_check_ans
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_LinkCheckAns)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_LinkCheckAns_{msg}
		return true, err
	case 6: // payload.link_adr_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_LinkADRReq)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_LinkAdrReq{msg}
		return true, err
	case 7: // payload.link_adr_ans
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_LinkADRAns)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_LinkAdrAns{msg}
		return true, err
	case 8: // payload.duty_cycle_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_DutyCycleReq)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_DutyCycleReq_{msg}
		return true, err
	case 9: // payload.rx_param_setup_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_RxParamSetupReq)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_RxParamSetupReq_{msg}
		return true, err
	case 10: // payload.rx_param_setup_ans
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_RxParamSetupAns)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_RxParamSetupAns_{msg}
		return true, err
	case 11: // payload.dev_status_ans
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_DevStatusAns)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_DevStatusAns_{msg}
		return true, err
	case 12: // payload.new_channel_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_NewChannelReq)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_NewChannelReq_{msg}
		return true, err
	case 13: // payload.new_channel_ans
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_NewChannelAns)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_NewChannelAns_{msg}
		return true, err
	case 14: // payload.dl_channel_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_DLChannelReq)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_DlChannelReq{msg}
		return true, err
	case 15: // payload.dl_channel_ans
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_DLChannelAns)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_DlChannelAns{msg}
		return true, err
	case 16: // payload.rx_timing_setup_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_RxTimingSetupReq)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_RxTimingSetupReq_{msg}
		return true, err
	case 17: // payload.tx_param_setup_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_TxParamSetupReq)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_TxParamSetupReq_{msg}
		return true, err
	case 18: // payload.rekey_ind
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_RekeyInd)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_RekeyInd_{msg}
		return true, err
	case 19: // payload.rekey_conf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_RekeyConf)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_RekeyConf_{msg}
		return true, err
	case 20: // payload.adr_param_setup_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_ADRParamSetupReq)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_AdrParamSetupReq{msg}
		return true, err
	case 21: // payload.device_time_ans
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_DeviceTimeAns)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_DeviceTimeAns_{msg}
		return true, err
	case 22: // payload.force_rejoin_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_ForceRejoinReq)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_ForceRejoinReq_{msg}
		return true, err
	case 23: // payload.rejoin_param_setup_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_RejoinParamSetupReq)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_RejoinParamSetupReq_{msg}
		return true, err
	case 24: // payload.rejoin_param_setup_ans
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_RejoinParamSetupAns)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_RejoinParamSetupAns_{msg}
		return true, err
	case 25: // payload.ping_slot_info_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_PingSlotInfoReq)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_PingSlotInfoReq_{msg}
		return true, err
	case 26: // payload.ping_slot_channel_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_PingSlotChannelReq)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_PingSlotChannelReq_{msg}
		return true, err
	case 27: // payload.ping_slot_channel_ans
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_PingSlotChannelAns)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_PingSlotChannelAns_{msg}
		return true, err
	case 28: // payload.beacon_timing_ans
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_BeaconTimingAns)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_BeaconTimingAns_{msg}
		return true, err
	case 29: // payload.beacon_freq_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_BeaconFreqReq)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_BeaconFreqReq_{msg}
		return true, err
	case 30: // payload.beacon_freq_ans
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_BeaconFreqAns)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_BeaconFreqAns_{msg}
		return true, err
	case 31: // payload.device_mode_ind
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_DeviceModeInd)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_DeviceModeInd_{msg}
		return true, err
	case 32: // payload.device_mode_conf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACCommand_DeviceModeConf)
		err := b.DecodeMessage(msg)
		m.Payload = &MACCommand_DeviceModeConf_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _MACCommand_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*MACCommand)
	// payload
	switch x := m.Payload.(type) {
	case *MACCommand_CID:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.CID))
	case *MACCommand_Proprietary_:
		s := proto.Size(x.Proprietary)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_ResetInd_:
		s := proto.Size(x.ResetInd)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_ResetConf_:
		s := proto.Size(x.ResetConf)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_LinkCheckAns_:
		s := proto.Size(x.LinkCheckAns)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_LinkAdrReq:
		s := proto.Size(x.LinkAdrReq)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_LinkAdrAns:
		s := proto.Size(x.LinkAdrAns)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_DutyCycleReq_:
		s := proto.Size(x.DutyCycleReq)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_RxParamSetupReq_:
		s := proto.Size(x.RxParamSetupReq)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_RxParamSetupAns_:
		s := proto.Size(x.RxParamSetupAns)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_DevStatusAns_:
		s := proto.Size(x.DevStatusAns)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_NewChannelReq_:
		s := proto.Size(x.NewChannelReq)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_NewChannelAns_:
		s := proto.Size(x.NewChannelAns)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_DlChannelReq:
		s := proto.Size(x.DlChannelReq)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_DlChannelAns:
		s := proto.Size(x.DlChannelAns)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_RxTimingSetupReq_:
		s := proto.Size(x.RxTimingSetupReq)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_TxParamSetupReq_:
		s := proto.Size(x.TxParamSetupReq)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_RekeyInd_:
		s := proto.Size(x.RekeyInd)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_RekeyConf_:
		s := proto.Size(x.RekeyConf)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_AdrParamSetupReq:
		s := proto.Size(x.AdrParamSetupReq)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_DeviceTimeAns_:
		s := proto.Size(x.DeviceTimeAns)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_ForceRejoinReq_:
		s := proto.Size(x.ForceRejoinReq)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_RejoinParamSetupReq_:
		s := proto.Size(x.RejoinParamSetupReq)
		n += proto.SizeVarint(23<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_RejoinParamSetupAns_:
		s := proto.Size(x.RejoinParamSetupAns)
		n += proto.SizeVarint(24<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_PingSlotInfoReq_:
		s := proto.Size(x.PingSlotInfoReq)
		n += proto.SizeVarint(25<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_PingSlotChannelReq_:
		s := proto.Size(x.PingSlotChannelReq)
		n += proto.SizeVarint(26<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_PingSlotChannelAns_:
		s := proto.Size(x.PingSlotChannelAns)
		n += proto.SizeVarint(27<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_BeaconTimingAns_:
		s := proto.Size(x.BeaconTimingAns)
		n += proto.SizeVarint(28<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_BeaconFreqReq_:
		s := proto.Size(x.BeaconFreqReq)
		n += proto.SizeVarint(29<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_BeaconFreqAns_:
		s := proto.Size(x.BeaconFreqAns)
		n += proto.SizeVarint(30<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_DeviceModeInd_:
		s := proto.Size(x.DeviceModeInd)
		n += proto.SizeVarint(31<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MACCommand_DeviceModeConf_:
		s := proto.Size(x.DeviceModeConf)
		n += proto.SizeVarint(32<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type MACCommand_Proprietary struct {
	CID        MACCommandIdentifier `protobuf:"varint,1,opt,name=cid,proto3,enum=ttn.v3.MACCommandIdentifier" json:"cid,omitempty"`
	RawPayload []byte               `protobuf:"bytes,2,opt,name=raw_payload,json=rawPayload,proto3" json:"raw_payload,omitempty"`
}

func (m *MACCommand_Proprietary) Reset()         { *m = MACCommand_Proprietary{} }
func (m *MACCommand_Proprietary) String() string { return proto.CompactTextString(m) }
func (*MACCommand_Proprietary) ProtoMessage()    {}
func (*MACCommand_Proprietary) Descriptor() ([]byte, []int) {
	return fileDescriptorLorawan, []int{11, 0}
}

func (m *MACCommand_Proprietary) GetCID() MACCommandIdentifier {
	if m != nil {
		return m.CID
	}
	return cid_rfu_0
}

func (m *MACCommand_Proprietary) GetRawPayload() []byte {
	if m != nil {
		return m.RawPayload
	}
	return nil
}

type MACCommand_ResetInd struct {
	MinorVersion uint32 `protobuf:"varint,1,opt,name=minor_version,json=minorVersion,proto3" json:"minor_version,omitempty"`
}

func (m *MACCommand_ResetInd) Reset()                    { *m = MACCommand_ResetInd{} }
func (m *MACCommand_ResetInd) String() string            { return proto.CompactTextString(m) }
func (*MACCommand_ResetInd) ProtoMessage()               {}
func (*MACCommand_ResetInd) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{11, 1} }

func (m *MACCommand_ResetInd) GetMinorVersion() uint32 {
	if m != nil {
		return m.MinorVersion
	}
	return 0
}

type MACCommand_ResetConf struct {
	MinorVersion uint32 `protobuf:"varint,1,opt,name=minor_version,json=minorVersion,proto3" json:"minor_version,omitempty"`
}

func (m *MACCommand_ResetConf) Reset()                    { *m = MACCommand_ResetConf{} }
func (m *MACCommand_ResetConf) String() string            { return proto.CompactTextString(m) }
func (*MACCommand_ResetConf) ProtoMessage()               {}
func (*MACCommand_ResetConf) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{11, 2} }

func (m *MACCommand_ResetConf) GetMinorVersion() uint32 {
	if m != nil {
		return m.MinorVersion
	}
	return 0
}

type MACCommand_LinkCheckAns struct {
	// Margin indicates the link margin in dB of the received LinkCheckReq, relative to the demodulation floor.
	Margin       uint32 `protobuf:"varint,1,opt,name=margin,proto3" json:"margin,omitempty"`
	GatewayCount uint32 `protobuf:"varint,2,opt,name=gateway_count,json=gatewayCount,proto3" json:"gateway_count,omitempty"`
}

func (m *MACCommand_LinkCheckAns) Reset()         { *m = MACCommand_LinkCheckAns{} }
func (m *MACCommand_LinkCheckAns) String() string { return proto.CompactTextString(m) }
func (*MACCommand_LinkCheckAns) ProtoMessage()    {}
func (*MACCommand_LinkCheckAns) Descriptor() ([]byte, []int) {
	return fileDescriptorLorawan, []int{11, 3}
}

func (m *MACCommand_LinkCheckAns) GetMargin() uint32 {
	if m != nil {
		return m.Margin
	}
	return 0
}

func (m *MACCommand_LinkCheckAns) GetGatewayCount() uint32 {
	if m != nil {
		return m.GatewayCount
	}
	return 0
}

type MACCommand_LinkADRReq struct {
	DataRateIndex      uint32 `protobuf:"varint,1,opt,name=data_rate_index,json=dataRateIndex,proto3" json:"data_rate_index,omitempty"`
	TxPowerIndex       uint32 `protobuf:"varint,2,opt,name=tx_power_index,json=txPowerIndex,proto3" json:"tx_power_index,omitempty"`
	ChannelMask        []bool `protobuf:"varint,3,rep,packed,name=channel_mask,json=channelMask" json:"channel_mask,omitempty"`
	ChannelMaskControl uint32 `protobuf:"varint,5,opt,name=channel_mask_control,json=channelMaskControl,proto3" json:"channel_mask_control,omitempty"`
	NbTrans            uint32 `protobuf:"varint,6,opt,name=nb_trans,json=nbTrans,proto3" json:"nb_trans,omitempty"`
}

func (m *MACCommand_LinkADRReq) Reset()                    { *m = MACCommand_LinkADRReq{} }
func (m *MACCommand_LinkADRReq) String() string            { return proto.CompactTextString(m) }
func (*MACCommand_LinkADRReq) ProtoMessage()               {}
func (*MACCommand_LinkADRReq) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{11, 4} }

func (m *MACCommand_LinkADRReq) GetDataRateIndex() uint32 {
	if m != nil {
		return m.DataRateIndex
	}
	return 0
}

func (m *MACCommand_LinkADRReq) GetTxPowerIndex() uint32 {
	if m != nil {
		return m.TxPowerIndex
	}
	return 0
}

func (m *MACCommand_LinkADRReq) GetChannelMask() []bool {
	if m != nil {
		return m.ChannelMask
	}
	return nil
}

func (m *MACCommand_LinkADRReq) GetChannelMaskControl() uint32 {
	if m != nil {
		return m.ChannelMaskControl
	}
	return 0
}

func (m *MACCommand_LinkADRReq) GetNbTrans() uint32 {
	if m != nil {
		return m.NbTrans
	}
	return 0
}

type MACCommand_LinkADRAns struct {
	ChannelMaskAck   bool `protobuf:"varint,1,opt,name=channel_mask_ack,json=channelMaskAck,proto3" json:"channel_mask_ack,omitempty"`
	DataRateIndexAck bool `protobuf:"varint,2,opt,name=data_rate_index_ack,json=dataRateIndexAck,proto3" json:"data_rate_index_ack,omitempty"`
	TxPowerIndexAck  bool `protobuf:"varint,3,opt,name=tx_power_index_ack,json=txPowerIndexAck,proto3" json:"tx_power_index_ack,omitempty"`
}

func (m *MACCommand_LinkADRAns) Reset()                    { *m = MACCommand_LinkADRAns{} }
func (m *MACCommand_LinkADRAns) String() string            { return proto.CompactTextString(m) }
func (*MACCommand_LinkADRAns) ProtoMessage()               {}
func (*MACCommand_LinkADRAns) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{11, 5} }

func (m *MACCommand_LinkADRAns) GetChannelMaskAck() bool {
	if m != nil {
		return m.ChannelMaskAck
	}
	return false
}

func (m *MACCommand_LinkADRAns) GetDataRateIndexAck() bool {
	if m != nil {
		return m.DataRateIndexAck
	}
	return false
}

func (m *MACCommand_LinkADRAns) GetTxPowerIndexAck() bool {
	if m != nil {
		return m.TxPowerIndexAck
	}
	return false
}

type MACCommand_DutyCycleReq struct {
	MaxDutyCycle AggregatedDutyCycle `protobuf:"varint,1,opt,name=max_duty_cycle,json=maxDutyCycle,proto3,enum=ttn.v3.AggregatedDutyCycle" json:"max_duty_cycle,omitempty"`
}

func (m *MACCommand_DutyCycleReq) Reset()         { *m = MACCommand_DutyCycleReq{} }
func (m *MACCommand_DutyCycleReq) String() string { return proto.CompactTextString(m) }
func (*MACCommand_DutyCycleReq) ProtoMessage()    {}
func (*MACCommand_DutyCycleReq) Descriptor() ([]byte, []int) {
	return fileDescriptorLorawan, []int{11, 6}
}

func (m *MACCommand_DutyCycleReq) GetMaxDutyCycle() AggregatedDutyCycle {
	if m != nil {
		return m.MaxDutyCycle
	}
	return DUTY_CYCLE_1
}

type MACCommand_RxParamSetupReq struct {
	Rx2DataRateIndex  uint32 `protobuf:"varint,1,opt,name=rx2_data_rate_index,json=rx2DataRateIndex,proto3" json:"rx2_data_rate_index,omitempty"`
	Rx1DataRateOffset uint32 `protobuf:"varint,2,opt,name=rx1_data_rate_offset,json=rx1DataRateOffset,proto3" json:"rx1_data_rate_offset,omitempty"`
	Rx2Frequency      uint64 `protobuf:"varint,3,opt,name=rx2_frequency,json=rx2Frequency,proto3" json:"rx2_frequency,omitempty"`
}

func (m *MACCommand_RxParamSetupReq) Reset()         { *m = MACCommand_RxParamSetupReq{} }
func (m *MACCommand_RxParamSetupReq) String() string { return proto.CompactTextString(m) }
func (*MACCommand_RxParamSetupReq) ProtoMessage()    {}
func (*MACCommand_RxParamSetupReq) Descriptor() ([]byte, []int) {
	return fileDescriptorLorawan, []int{11, 7}
}

func (m *MACCommand_RxParamSetupReq) GetRx2DataRateIndex() uint32 {
	if m != nil {
		return m.Rx2DataRateIndex
	}
	return 0
}

func (m *MACCommand_RxParamSetupReq) GetRx1DataRateOffset() uint32 {
	if m != nil {
		return m.Rx1DataRateOffset
	}
	return 0
}

func (m *MACCommand_RxParamSetupReq) GetRx2Frequency() uint64 {
	if m != nil {
		return m.Rx2Frequency
	}
	return 0
}

type MACCommand_RxParamSetupAns struct {
	Rx2DataRateIndexAck  bool `protobuf:"varint,1,opt,name=rx2_data_rate_index_ack,json=rx2DataRateIndexAck,proto3" json:"rx2_data_rate_index_ack,omitempty"`
	Rx1DataRateOffsetAck bool `protobuf:"varint,2,opt,name=rx1_data_rate_offset_ack,json=rx1DataRateOffsetAck,proto3" json:"rx1_data_rate_offset_ack,omitempty"`
	Rx2FrequencyAck      bool `protobuf:"varint,3,opt,name=rx2_frequency_ack,json=rx2FrequencyAck,proto3" json:"rx2_frequency_ack,omitempty"`
}

func (m *MACCommand_RxParamSetupAns) Reset()         { *m = MACCommand_RxParamSetupAns{} }
func (m *MACCommand_RxParamSetupAns) String() string { return proto.CompactTextString(m) }
func (*MACCommand_RxParamSetupAns) ProtoMessage()    {}
func (*MACCommand_RxParamSetupAns) Descriptor() ([]byte, []int) {
	return fileDescriptorLorawan, []int{11, 8}
}

func (m *MACCommand_RxParamSetupAns) GetRx2DataRateIndexAck() bool {
	if m != nil {
		return m.Rx2DataRateIndexAck
	}
	return false
}

func (m *MACCommand_RxParamSetupAns) GetRx1DataRateOffsetAck() bool {
	if m != nil {
		return m.Rx1DataRateOffsetAck
	}
	return false
}

func (m *MACCommand_RxParamSetupAns) GetRx2FrequencyAck() bool {
	if m != nil {
		return m.Rx2FrequencyAck
	}
	return false
}

type MACCommand_DevStatusAns struct {
	// Battery indicates the device battery status.
	// 0 indicates that the device is connected to an external power source.
	// 1..254 indicates a battery level.
	// 255 indicates that the device was not able to measure the battery level.
	Battery uint32 `protobuf:"varint,1,opt,name=battery,proto3" json:"battery,omitempty"`
	// Margin indicates the demodulation SNR in dB in the range [-32, +31].
	Margin int32 `protobuf:"varint,2,opt,name=margin,proto3" json:"margin,omitempty"`
}

func (m *MACCommand_DevStatusAns) Reset()         { *m = MACCommand_DevStatusAns{} }
func (m *MACCommand_DevStatusAns) String() string { return proto.CompactTextString(m) }
func (*MACCommand_DevStatusAns) ProtoMessage()    {}
func (*MACCommand_DevStatusAns) Descriptor() ([]byte, []int) {
	return fileDescriptorLorawan, []int{11, 9}
}

func (m *MACCommand_DevStatusAns) GetBattery() uint32 {
	if m != nil {
		return m.Battery
	}
	return 0
}

func (m *MACCommand_DevStatusAns) GetMargin() int32 {
	if m != nil {
		return m.Margin
	}
	return 0
}

type MACCommand_NewChannelReq struct {
	ChannelIndex     uint32 `protobuf:"varint,1,opt,name=channel_index,json=channelIndex,proto3" json:"channel_index,omitempty"`
	Frequency        uint64 `protobuf:"varint,2,opt,name=frequency,proto3" json:"frequency,omitempty"`
	MinDataRateIndex uint32 `protobuf:"varint,3,opt,name=min_data_rate_index,json=minDataRateIndex,proto3" json:"min_data_rate_index,omitempty"`
	MaxDataRateIndex uint32 `protobuf:"varint,4,opt,name=max_data_rate_index,json=maxDataRateIndex,proto3" json:"max_data_rate_index,omitempty"`
}

func (m *MACCommand_NewChannelReq) Reset()         { *m = MACCommand_NewChannelReq{} }
func (m *MACCommand_NewChannelReq) String() string { return proto.CompactTextString(m) }
func (*MACCommand_NewChannelReq) ProtoMessage()    {}
func (*MACCommand_NewChannelReq) Descriptor() ([]byte, []int) {
	return fileDescriptorLorawan, []int{11, 10}
}

func (m *MACCommand_NewChannelReq) GetChannelIndex() uint32 {
	if m != nil {
		return m.ChannelIndex
	}
	return 0
}

func (m *MACCommand_NewChannelReq) GetFrequency() uint64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *MACCommand_NewChannelReq) GetMinDataRateIndex() uint32 {
	if m != nil {
		return m.MinDataRateIndex
	}
	return 0
}

func (m *MACCommand_NewChannelReq) GetMaxDataRateIndex() uint32 {
	if m != nil {
		return m.MaxDataRateIndex
	}
	return 0
}

type MACCommand_NewChannelAns struct {
	FrequencyAck bool `protobuf:"varint,1,opt,name=frequency_ack,json=frequencyAck,proto3" json:"frequency_ack,omitempty"`
	DataRateAck  bool `protobuf:"varint,2,opt,name=data_rate_ack,json=dataRateAck,proto3" json:"data_rate_ack,omitempty"`
}

func (m *MACCommand_NewChannelAns) Reset()         { *m = MACCommand_NewChannelAns{} }
func (m *MACCommand_NewChannelAns) String() string { return proto.CompactTextString(m) }
func (*MACCommand_NewChannelAns) ProtoMessage()    {}
func (*MACCommand_NewChannelAns) Descriptor() ([]byte, []int) {
	return fileDescriptorLorawan, []int{11, 11}
}

func (m *MACCommand_NewChannelAns) GetFrequencyAck() bool {
	if m != nil {
		return m.FrequencyAck
	}
	return false
}

func (m *MACCommand_NewChannelAns) GetDataRateAck() bool {
	if m != nil {
		return m.DataRateAck
	}
	return false
}

type MACCommand_DLChannelReq struct {
	ChannelIndex uint32 `protobuf:"varint,1,opt,name=channel_index,json=channelIndex,proto3" json:"channel_index,omitempty"`
	Frequency    uint64 `protobuf:"varint,2,opt,name=frequency,proto3" json:"frequency,omitempty"`
}

func (m *MACCommand_DLChannelReq) Reset()         { *m = MACCommand_DLChannelReq{} }
func (m *MACCommand_DLChannelReq) String() string { return proto.CompactTextString(m) }
func (*MACCommand_DLChannelReq) ProtoMessage()    {}
func (*MACCommand_DLChannelReq) Descriptor() ([]byte, []int) {
	return fileDescriptorLorawan, []int{11, 12}
}

func (m *MACCommand_DLChannelReq) GetChannelIndex() uint32 {
	if m != nil {
		return m.ChannelIndex
	}
	return 0
}

func (m *MACCommand_DLChannelReq) GetFrequency() uint64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

type MACCommand_DLChannelAns struct {
	ChannelIndexAck bool `protobuf:"varint,1,opt,name=channel_index_ack,json=channelIndexAck,proto3" json:"channel_index_ack,omitempty"`
	FrequencyAck    bool `protobuf:"varint,2,opt,name=frequency_ack,json=frequencyAck,proto3" json:"frequency_ack,omitempty"`
}

func (m *MACCommand_DLChannelAns) Reset()         { *m = MACCommand_DLChannelAns{} }
func (m *MACCommand_DLChannelAns) String() string { return proto.CompactTextString(m) }
func (*MACCommand_DLChannelAns) ProtoMessage()    {}
func (*MACCommand_DLChannelAns) Descriptor() ([]byte, []int) {
	return fileDescriptorLorawan, []int{11, 13}
}

func (m *MACCommand_DLChannelAns) GetChannelIndexAck() bool {
	if m != nil {
		return m.ChannelIndexAck
	}
	return false
}

func (m *MACCommand_DLChannelAns) GetFrequencyAck() bool {
	if m != nil {
		return m.FrequencyAck
	}
	return false
}

type MACCommand_RxTimingSetupReq struct {
	Delay uint32 `protobuf:"varint,1,opt,name=delay,proto3" json:"delay,omitempty"`
}

func (m *MACCommand_RxTimingSetupReq) Reset()         { *m = MACCommand_RxTimingSetupReq{} }
func (m *MACCommand_RxTimingSetupReq) String() string { return proto.CompactTextString(m) }
func (*MACCommand_RxTimingSetupReq) ProtoMessage()    {}
func (*MACCommand_RxTimingSetupReq) Descriptor() ([]byte, []int) {
	return fileDescriptorLorawan, []int{11, 14}
}

func (m *MACCommand_RxTimingSetupReq) GetDelay() uint32 {
	if m != nil {
		return m.Delay
	}
	return 0
}

type MACCommand_TxParamSetupReq struct {
	// MaxEIRPIndex indicates the maximum EIRP value in dBm, indexed by the following table:
	// [ 8 10 12 13 14 16 18 20 21 24 26 27 29 30 33 36 ]
	MaxEIRPIndex      uint32 `protobuf:"varint,1,opt,name=max_eirp_index,json=maxEirpIndex,proto3" json:"max_eirp_index,omitempty"`
	UplinkDwellTime   bool   `protobuf:"varint,2,opt,name=uplink_dwell_time,json=uplinkDwellTime,proto3" json:"uplink_dwell_time,omitempty"`
	DownlinkDwellTime bool   `protobuf:"varint,3,opt,name=downlink_dwell_time,json=downlinkDwellTime,proto3" json:"downlink_dwell_time,omitempty"`
}

func (m *MACCommand_TxParamSetupReq) Reset()         { *m = MACCommand_TxParamSetupReq{} }
func (m *MACCommand_TxParamSetupReq) String() string { return proto.CompactTextString(m) }
func (*MACCommand_TxParamSetupReq) ProtoMessage()    {}
func (*MACCommand_TxParamSetupReq) Descriptor() ([]byte, []int) {
	return fileDescriptorLorawan, []int{11, 15}
}

func (m *MACCommand_TxParamSetupReq) GetMaxEIRPIndex() uint32 {
	if m != nil {
		return m.MaxEIRPIndex
	}
	return 0
}

func (m *MACCommand_TxParamSetupReq) GetUplinkDwellTime() bool {
	if m != nil {
		return m.UplinkDwellTime
	}
	return false
}

func (m *MACCommand_TxParamSetupReq) GetDownlinkDwellTime() bool {
	if m != nil {
		return m.DownlinkDwellTime
	}
	return false
}

type MACCommand_RekeyInd struct {
	MinorVersion uint32 `protobuf:"varint,1,opt,name=minor_version,json=minorVersion,proto3" json:"minor_version,omitempty"`
}

func (m *MACCommand_RekeyInd) Reset()                    { *m = MACCommand_RekeyInd{} }
func (m *MACCommand_RekeyInd) String() string            { return proto.CompactTextString(m) }
func (*MACCommand_RekeyInd) ProtoMessage()               {}
func (*MACCommand_RekeyInd) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{11, 16} }

func (m *MACCommand_RekeyInd) GetMinorVersion() uint32 {
	if m != nil {
		return m.MinorVersion
	}
	return 0
}

type MACCommand_RekeyConf struct {
	MinorVersion uint32 `protobuf:"varint,1,opt,name=minor_version,json=minorVersion,proto3" json:"minor_version,omitempty"`
}

func (m *MACCommand_RekeyConf) Reset()                    { *m = MACCommand_RekeyConf{} }
func (m *MACCommand_RekeyConf) String() string            { return proto.CompactTextString(m) }
func (*MACCommand_RekeyConf) ProtoMessage()               {}
func (*MACCommand_RekeyConf) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{11, 17} }

func (m *MACCommand_RekeyConf) GetMinorVersion() uint32 {
	if m != nil {
		return m.MinorVersion
	}
	return 0
}

type MACCommand_ADRParamSetupReq struct {
	// ADRAckLimitExponent is the exponent e that configures the ADR_ACK_LIMIT = 2^e messages
	ADRAckLimitExponent uint32 `protobuf:"varint,1,opt,name=adr_ack_limit_exponent,json=adrAckLimitExponent,proto3" json:"adr_ack_limit_exponent,omitempty"`
	// ADRAckDelayExponent is the exponent e that configures the ADR_ACK_DELAY = 2^e messages
	ADRAckDelayExponent uint32 `protobuf:"varint,2,opt,name=adr_ack_delay_exponent,json=adrAckDelayExponent,proto3" json:"adr_ack_delay_exponent,omitempty"`
}

func (m *MACCommand_ADRParamSetupReq) Reset()         { *m = MACCommand_ADRParamSetupReq{} }
func (m *MACCommand_ADRParamSetupReq) String() string { return proto.CompactTextString(m) }
func (*MACCommand_ADRParamSetupReq) ProtoMessage()    {}
func (*MACCommand_ADRParamSetupReq) Descriptor() ([]byte, []int) {
	return fileDescriptorLorawan, []int{11, 18}
}

func (m *MACCommand_ADRParamSetupReq) GetADRAckLimitExponent() uint32 {
	if m != nil {
		return m.ADRAckLimitExponent
	}
	return 0
}

func (m *MACCommand_ADRParamSetupReq) GetADRAckDelayExponent() uint32 {
	if m != nil {
		return m.ADRAckDelayExponent
	}
	return 0
}

type MACCommand_DeviceTimeAns struct {
	Time *time.Time `protobuf:"bytes,7,opt,name=time,stdtime" json:"time,omitempty"`
}

func (m *MACCommand_DeviceTimeAns) Reset()         { *m = MACCommand_DeviceTimeAns{} }
func (m *MACCommand_DeviceTimeAns) String() string { return proto.CompactTextString(m) }
func (*MACCommand_DeviceTimeAns) ProtoMessage()    {}
func (*MACCommand_DeviceTimeAns) Descriptor() ([]byte, []int) {
	return fileDescriptorLorawan, []int{11, 19}
}

func (m *MACCommand_DeviceTimeAns) GetTime() *time.Time {
	if m != nil {
		return m.Time
	}
	return nil
}

type MACCommand_ForceRejoinReq struct {
	RejoinType    uint32 `protobuf:"varint,1,opt,name=rejoin_type,json=rejoinType,proto3" json:"rejoin_type,omitempty"`
	DataRateIndex uint32 `protobuf:"varint,2,opt,name=data_rate_index,json=dataRateIndex,proto3" json:"data_rate_index,omitempty"`
	MaxRetries    uint32 `protobuf:"varint,3,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty"`
	// PeriodExponent is the exponent e that configures the rejoin period = 32 * 2^e + rand(0,32) seconds
	PeriodExponent uint32 `protobuf:"varint,4,opt,name=period_exponent,json=periodExponent,proto3" json:"period_exponent,omitempty"`
}

func (m *MACCommand_ForceRejoinReq) Reset()         { *m = MACCommand_ForceRejoinReq{} }
func (m *MACCommand_ForceRejoinReq) String() string { return proto.CompactTextString(m) }
func (*MACCommand_ForceRejoinReq) ProtoMessage()    {}
func (*MACCommand_ForceRejoinReq) Descriptor() ([]byte, []int) {
	return fileDescriptorLorawan, []int{11, 20}
}

func (m *MACCommand_ForceRejoinReq) GetRejoinType() uint32 {
	if m != nil {
		return m.RejoinType
	}
	return 0
}

func (m *MACCommand_ForceRejoinReq) GetDataRateIndex() uint32 {
	if m != nil {
		return m.DataRateIndex
	}
	return 0
}

func (m *MACCommand_ForceRejoinReq) GetMaxRetries() uint32 {
	if m != nil {
		return m.MaxRetries
	}
	return 0
}

func (m *MACCommand_ForceRejoinReq) GetPeriodExponent() uint32 {
	if m != nil {
		return m.PeriodExponent
	}
	return 0
}

type MACCommand_RejoinParamSetupReq struct {
	// MaxCountExponent is the exponent e that configures the rejoin counter = 2^(e+4) messages
	MaxCountExponent uint32 `protobuf:"varint,1,opt,name=max_count_exponent,json=maxCountExponent,proto3" json:"max_count_exponent,omitempty"`
	// MaxTimeExponent is the exponent e that configures the rejoin timer = 2^(e+10) seconds
	MaxTimeExponent uint32 `protobuf:"varint,2,opt,name=max_time_exponent,json=maxTimeExponent,proto3" json:"max_time_exponent,omitempty"`
}

func (m *MACCommand_RejoinParamSetupReq) Reset()         { *m = MACCommand_RejoinParamSetupReq{} }
func (m *MACCommand_RejoinParamSetupReq) String() string { return proto.CompactTextString(m) }
func (*MACCommand_RejoinParamSetupReq) ProtoMessage()    {}
func (*MACCommand_RejoinParamSetupReq) Descriptor() ([]byte, []int) {
	return fileDescriptorLorawan, []int{11, 21}
}

func (m *MACCommand_RejoinParamSetupReq) GetMaxCountExponent() uint32 {
	if m != nil {
		return m.MaxCountExponent
	}
	return 0
}

func (m *MACCommand_RejoinParamSetupReq) GetMaxTimeExponent() uint32 {
	if m != nil {
		return m.MaxTimeExponent
	}
	return 0
}

type MACCommand_RejoinParamSetupAns struct {
	MaxTimeExponentAck bool `protobuf:"varint,1,opt,name=max_time_exponent_ack,json=maxTimeExponentAck,proto3" json:"max_time_exponent_ack,omitempty"`
}

func (m *MACCommand_RejoinParamSetupAns) Reset()         { *m = MACCommand_RejoinParamSetupAns{} }
func (m *MACCommand_RejoinParamSetupAns) String() string { return proto.CompactTextString(m) }
func (*MACCommand_RejoinParamSetupAns) ProtoMessage()    {}
func (*MACCommand_RejoinParamSetupAns) Descriptor() ([]byte, []int) {
	return fileDescriptorLorawan, []int{11, 22}
}

func (m *MACCommand_RejoinParamSetupAns) GetMaxTimeExponentAck() bool {
	if m != nil {
		return m.MaxTimeExponentAck
	}
	return false
}

type MACCommand_PingSlotInfoReq struct {
	Period PingSlotPeriod `protobuf:"varint,1,opt,name=period,proto3,enum=ttn.v3.PingSlotPeriod" json:"period,omitempty"`
}

func (m *MACCommand_PingSlotInfoReq) Reset()         { *m = MACCommand_PingSlotInfoReq{} }
func (m *MACCommand_PingSlotInfoReq) String() string { return proto.CompactTextString(m) }
func (*MACCommand_PingSlotInfoReq) ProtoMessage()    {}
func (*MACCommand_PingSlotInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptorLorawan, []int{11, 23}
}

func (m *MACCommand_PingSlotInfoReq) GetPeriod() PingSlotPeriod {
	if m != nil {
		return m.Period
	}
	return PING_EVERY_1S
}

type MACCommand_PingSlotChannelReq struct {
	Frequency     uint64 `protobuf:"varint,1,opt,name=frequency,proto3" json:"frequency,omitempty"`
	DataRateIndex uint32 `protobuf:"varint,2,opt,name=data_rate_index,json=dataRateIndex,proto3" json:"data_rate_index,omitempty"`
}

func (m *MACCommand_PingSlotChannelReq) Reset()         { *m = MACCommand_PingSlotChannelReq{} }
func (m *MACCommand_PingSlotChannelReq) String() string { return proto.CompactTextString(m) }
func (*MACCommand_PingSlotChannelReq) ProtoMessage()    {}
func (*MACCommand_PingSlotChannelReq) Descriptor() ([]byte, []int) {
	return fileDescriptorLorawan, []int{11, 24}
}

func (m *MACCommand_PingSlotChannelReq) GetFrequency() uint64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *MACCommand_PingSlotChannelReq) GetDataRateIndex() uint32 {
	if m != nil {
		return m.DataRateIndex
	}
	return 0
}

type MACCommand_PingSlotChannelAns struct {
	FrequencyAck     bool `protobuf:"varint,1,opt,name=frequency_ack,json=frequencyAck,proto3" json:"frequency_ack,omitempty"`
	DataRateIndexAck bool `protobuf:"varint,2,opt,name=data_rate_index_ack,json=dataRateIndexAck,proto3" json:"data_rate_index_ack,omitempty"`
}

func (m *MACCommand_PingSlotChannelAns) Reset()         { *m = MACCommand_PingSlotChannelAns{} }
func (m *MACCommand_PingSlotChannelAns) String() string { return proto.CompactTextString(m) }
func (*MACCommand_PingSlotChannelAns) ProtoMessage()    {}
func (*MACCommand_PingSlotChannelAns) Descriptor() ([]byte, []int) {
	return fileDescriptorLorawan, []int{11, 25}
}

func (m *MACCommand_PingSlotChannelAns) GetFrequencyAck() bool {
	if m != nil {
		return m.FrequencyAck
	}
	return false
}

func (m *MACCommand_PingSlotChannelAns) GetDataRateIndexAck() bool {
	if m != nil {
		return m.DataRateIndexAck
	}
	return false
}

type MACCommand_BeaconTimingAns struct {
	Delay        uint32 `protobuf:"varint,1,opt,name=delay,proto3" json:"delay,omitempty"`
	ChannelIndex uint32 `protobuf:"varint,2,opt,name=channel_index,json=channelIndex,proto3" json:"channel_index,omitempty"`
}

func (m *MACCommand_BeaconTimingAns) Reset()         { *m = MACCommand_BeaconTimingAns{} }
func (m *MACCommand_BeaconTimingAns) String() string { return proto.CompactTextString(m) }
func (*MACCommand_BeaconTimingAns) ProtoMessage()    {}
func (*MACCommand_BeaconTimingAns) Descriptor() ([]byte, []int) {
	return fileDescriptorLorawan, []int{11, 26}
}

func (m *MACCommand_BeaconTimingAns) GetDelay() uint32 {
	if m != nil {
		return m.Delay
	}
	return 0
}

func (m *MACCommand_BeaconTimingAns) GetChannelIndex() uint32 {
	if m != nil {
		return m.ChannelIndex
	}
	return 0
}

type MACCommand_BeaconFreqReq struct {
	Frequency uint64 `protobuf:"varint,1,opt,name=frequency,proto3" json:"frequency,omitempty"`
}

func (m *MACCommand_BeaconFreqReq) Reset()         { *m = MACCommand_BeaconFreqReq{} }
func (m *MACCommand_BeaconFreqReq) String() string { return proto.CompactTextString(m) }
func (*MACCommand_BeaconFreqReq) ProtoMessage()    {}
func (*MACCommand_BeaconFreqReq) Descriptor() ([]byte, []int) {
	return fileDescriptorLorawan, []int{11, 27}
}

func (m *MACCommand_BeaconFreqReq) GetFrequency() uint64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

type MACCommand_BeaconFreqAns struct {
	FrequencyAck bool `protobuf:"varint,1,opt,name=frequency_ack,json=frequencyAck,proto3" json:"frequency_ack,omitempty"`
}

func (m *MACCommand_BeaconFreqAns) Reset()         { *m = MACCommand_BeaconFreqAns{} }
func (m *MACCommand_BeaconFreqAns) String() string { return proto.CompactTextString(m) }
func (*MACCommand_BeaconFreqAns) ProtoMessage()    {}
func (*MACCommand_BeaconFreqAns) Descriptor() ([]byte, []int) {
	return fileDescriptorLorawan, []int{11, 28}
}

func (m *MACCommand_BeaconFreqAns) GetFrequencyAck() bool {
	if m != nil {
		return m.FrequencyAck
	}
	return false
}

type MACCommand_DeviceModeInd struct {
	Class Class `protobuf:"varint,1,opt,name=class,proto3,enum=ttn.v3.Class" json:"class,omitempty"`
}

func (m *MACCommand_DeviceModeInd) Reset()         { *m = MACCommand_DeviceModeInd{} }
func (m *MACCommand_DeviceModeInd) String() string { return proto.CompactTextString(m) }
func (*MACCommand_DeviceModeInd) ProtoMessage()    {}
func (*MACCommand_DeviceModeInd) Descriptor() ([]byte, []int) {
	return fileDescriptorLorawan, []int{11, 29}
}

func (m *MACCommand_DeviceModeInd) GetClass() Class {
	if m != nil {
		return m.Class
	}
	return CLASS_A
}

type MACCommand_DeviceModeConf struct {
	Class Class `protobuf:"varint,1,opt,name=class,proto3,enum=ttn.v3.Class" json:"class,omitempty"`
}

func (m *MACCommand_DeviceModeConf) Reset()         { *m = MACCommand_DeviceModeConf{} }
func (m *MACCommand_DeviceModeConf) String() string { return proto.CompactTextString(m) }
func (*MACCommand_DeviceModeConf) ProtoMessage()    {}
func (*MACCommand_DeviceModeConf) Descriptor() ([]byte, []int) {
	return fileDescriptorLorawan, []int{11, 30}
}

func (m *MACCommand_DeviceModeConf) GetClass() Class {
	if m != nil {
		return m.Class
	}
	return CLASS_A
}

func init() {
	proto.RegisterType((*Message)(nil), "ttn.v3.Message")
	golang_proto.RegisterType((*Message)(nil), "ttn.v3.Message")
	proto.RegisterType((*MHDR)(nil), "ttn.v3.MHDR")
	golang_proto.RegisterType((*MHDR)(nil), "ttn.v3.MHDR")
	proto.RegisterType((*MACPayload)(nil), "ttn.v3.MACPayload")
	golang_proto.RegisterType((*MACPayload)(nil), "ttn.v3.MACPayload")
	proto.RegisterType((*FHDR)(nil), "ttn.v3.FHDR")
	golang_proto.RegisterType((*FHDR)(nil), "ttn.v3.FHDR")
	proto.RegisterType((*FCtrl)(nil), "ttn.v3.FCtrl")
	golang_proto.RegisterType((*FCtrl)(nil), "ttn.v3.FCtrl")
	proto.RegisterType((*JoinRequestPayload)(nil), "ttn.v3.JoinRequestPayload")
	golang_proto.RegisterType((*JoinRequestPayload)(nil), "ttn.v3.JoinRequestPayload")
	proto.RegisterType((*RejoinRequestPayload)(nil), "ttn.v3.RejoinRequestPayload")
	golang_proto.RegisterType((*RejoinRequestPayload)(nil), "ttn.v3.RejoinRequestPayload")
	proto.RegisterType((*JoinAcceptPayload)(nil), "ttn.v3.JoinAcceptPayload")
	golang_proto.RegisterType((*JoinAcceptPayload)(nil), "ttn.v3.JoinAcceptPayload")
	proto.RegisterType((*DLSettings)(nil), "ttn.v3.DLSettings")
	golang_proto.RegisterType((*DLSettings)(nil), "ttn.v3.DLSettings")
	proto.RegisterType((*CFList)(nil), "ttn.v3.CFList")
	golang_proto.RegisterType((*CFList)(nil), "ttn.v3.CFList")
	proto.RegisterType((*TxSettings)(nil), "ttn.v3.TxSettings")
	golang_proto.RegisterType((*TxSettings)(nil), "ttn.v3.TxSettings")
	proto.RegisterType((*MACCommand)(nil), "ttn.v3.MACCommand")
	golang_proto.RegisterType((*MACCommand)(nil), "ttn.v3.MACCommand")
	proto.RegisterType((*MACCommand_Proprietary)(nil), "ttn.v3.MACCommand.Proprietary")
	golang_proto.RegisterType((*MACCommand_Proprietary)(nil), "ttn.v3.MACCommand.Proprietary")
	proto.RegisterType((*MACCommand_ResetInd)(nil), "ttn.v3.MACCommand.ResetInd")
	golang_proto.RegisterType((*MACCommand_ResetInd)(nil), "ttn.v3.MACCommand.ResetInd")
	proto.RegisterType((*MACCommand_ResetConf)(nil), "ttn.v3.MACCommand.ResetConf")
	golang_proto.RegisterType((*MACCommand_ResetConf)(nil), "ttn.v3.MACCommand.ResetConf")
	proto.RegisterType((*MACCommand_LinkCheckAns)(nil), "ttn.v3.MACCommand.LinkCheckAns")
	golang_proto.RegisterType((*MACCommand_LinkCheckAns)(nil), "ttn.v3.MACCommand.LinkCheckAns")
	proto.RegisterType((*MACCommand_LinkADRReq)(nil), "ttn.v3.MACCommand.LinkADRReq")
	golang_proto.RegisterType((*MACCommand_LinkADRReq)(nil), "ttn.v3.MACCommand.LinkADRReq")
	proto.RegisterType((*MACCommand_LinkADRAns)(nil), "ttn.v3.MACCommand.LinkADRAns")
	golang_proto.RegisterType((*MACCommand_LinkADRAns)(nil), "ttn.v3.MACCommand.LinkADRAns")
	proto.RegisterType((*MACCommand_DutyCycleReq)(nil), "ttn.v3.MACCommand.DutyCycleReq")
	golang_proto.RegisterType((*MACCommand_DutyCycleReq)(nil), "ttn.v3.MACCommand.DutyCycleReq")
	proto.RegisterType((*MACCommand_RxParamSetupReq)(nil), "ttn.v3.MACCommand.RxParamSetupReq")
	golang_proto.RegisterType((*MACCommand_RxParamSetupReq)(nil), "ttn.v3.MACCommand.RxParamSetupReq")
	proto.RegisterType((*MACCommand_RxParamSetupAns)(nil), "ttn.v3.MACCommand.RxParamSetupAns")
	golang_proto.RegisterType((*MACCommand_RxParamSetupAns)(nil), "ttn.v3.MACCommand.RxParamSetupAns")
	proto.RegisterType((*MACCommand_DevStatusAns)(nil), "ttn.v3.MACCommand.DevStatusAns")
	golang_proto.RegisterType((*MACCommand_DevStatusAns)(nil), "ttn.v3.MACCommand.DevStatusAns")
	proto.RegisterType((*MACCommand_NewChannelReq)(nil), "ttn.v3.MACCommand.NewChannelReq")
	golang_proto.RegisterType((*MACCommand_NewChannelReq)(nil), "ttn.v3.MACCommand.NewChannelReq")
	proto.RegisterType((*MACCommand_NewChannelAns)(nil), "ttn.v3.MACCommand.NewChannelAns")
	golang_proto.RegisterType((*MACCommand_NewChannelAns)(nil), "ttn.v3.MACCommand.NewChannelAns")
	proto.RegisterType((*MACCommand_DLChannelReq)(nil), "ttn.v3.MACCommand.DLChannelReq")
	golang_proto.RegisterType((*MACCommand_DLChannelReq)(nil), "ttn.v3.MACCommand.DLChannelReq")
	proto.RegisterType((*MACCommand_DLChannelAns)(nil), "ttn.v3.MACCommand.DLChannelAns")
	golang_proto.RegisterType((*MACCommand_DLChannelAns)(nil), "ttn.v3.MACCommand.DLChannelAns")
	proto.RegisterType((*MACCommand_RxTimingSetupReq)(nil), "ttn.v3.MACCommand.RxTimingSetupReq")
	golang_proto.RegisterType((*MACCommand_RxTimingSetupReq)(nil), "ttn.v3.MACCommand.RxTimingSetupReq")
	proto.RegisterType((*MACCommand_TxParamSetupReq)(nil), "ttn.v3.MACCommand.TxParamSetupReq")
	golang_proto.RegisterType((*MACCommand_TxParamSetupReq)(nil), "ttn.v3.MACCommand.TxParamSetupReq")
	proto.RegisterType((*MACCommand_RekeyInd)(nil), "ttn.v3.MACCommand.RekeyInd")
	golang_proto.RegisterType((*MACCommand_RekeyInd)(nil), "ttn.v3.MACCommand.RekeyInd")
	proto.RegisterType((*MACCommand_RekeyConf)(nil), "ttn.v3.MACCommand.RekeyConf")
	golang_proto.RegisterType((*MACCommand_RekeyConf)(nil), "ttn.v3.MACCommand.RekeyConf")
	proto.RegisterType((*MACCommand_ADRParamSetupReq)(nil), "ttn.v3.MACCommand.ADRParamSetupReq")
	golang_proto.RegisterType((*MACCommand_ADRParamSetupReq)(nil), "ttn.v3.MACCommand.ADRParamSetupReq")
	proto.RegisterType((*MACCommand_DeviceTimeAns)(nil), "ttn.v3.MACCommand.DeviceTimeAns")
	golang_proto.RegisterType((*MACCommand_DeviceTimeAns)(nil), "ttn.v3.MACCommand.DeviceTimeAns")
	proto.RegisterType((*MACCommand_ForceRejoinReq)(nil), "ttn.v3.MACCommand.ForceRejoinReq")
	golang_proto.RegisterType((*MACCommand_ForceRejoinReq)(nil), "ttn.v3.MACCommand.ForceRejoinReq")
	proto.RegisterType((*MACCommand_RejoinParamSetupReq)(nil), "ttn.v3.MACCommand.RejoinParamSetupReq")
	golang_proto.RegisterType((*MACCommand_RejoinParamSetupReq)(nil), "ttn.v3.MACCommand.RejoinParamSetupReq")
	proto.RegisterType((*MACCommand_RejoinParamSetupAns)(nil), "ttn.v3.MACCommand.RejoinParamSetupAns")
	golang_proto.RegisterType((*MACCommand_RejoinParamSetupAns)(nil), "ttn.v3.MACCommand.RejoinParamSetupAns")
	proto.RegisterType((*MACCommand_PingSlotInfoReq)(nil), "ttn.v3.MACCommand.PingSlotInfoReq")
	golang_proto.RegisterType((*MACCommand_PingSlotInfoReq)(nil), "ttn.v3.MACCommand.PingSlotInfoReq")
	proto.RegisterType((*MACCommand_PingSlotChannelReq)(nil), "ttn.v3.MACCommand.PingSlotChannelReq")
	golang_proto.RegisterType((*MACCommand_PingSlotChannelReq)(nil), "ttn.v3.MACCommand.PingSlotChannelReq")
	proto.RegisterType((*MACCommand_PingSlotChannelAns)(nil), "ttn.v3.MACCommand.PingSlotChannelAns")
	golang_proto.RegisterType((*MACCommand_PingSlotChannelAns)(nil), "ttn.v3.MACCommand.PingSlotChannelAns")
	proto.RegisterType((*MACCommand_BeaconTimingAns)(nil), "ttn.v3.MACCommand.BeaconTimingAns")
	golang_proto.RegisterType((*MACCommand_BeaconTimingAns)(nil), "ttn.v3.MACCommand.BeaconTimingAns")
	proto.RegisterType((*MACCommand_BeaconFreqReq)(nil), "ttn.v3.MACCommand.BeaconFreqReq")
	golang_proto.RegisterType((*MACCommand_BeaconFreqReq)(nil), "ttn.v3.MACCommand.BeaconFreqReq")
	proto.RegisterType((*MACCommand_BeaconFreqAns)(nil), "ttn.v3.MACCommand.BeaconFreqAns")
	golang_proto.RegisterType((*MACCommand_BeaconFreqAns)(nil), "ttn.v3.MACCommand.BeaconFreqAns")
	proto.RegisterType((*MACCommand_DeviceModeInd)(nil), "ttn.v3.MACCommand.DeviceModeInd")
	golang_proto.RegisterType((*MACCommand_DeviceModeInd)(nil), "ttn.v3.MACCommand.DeviceModeInd")
	proto.RegisterType((*MACCommand_DeviceModeConf)(nil), "ttn.v3.MACCommand.DeviceModeConf")
	golang_proto.RegisterType((*MACCommand_DeviceModeConf)(nil), "ttn.v3.MACCommand.DeviceModeConf")
	proto.RegisterEnum("ttn.v3.MType", MType_name, MType_value)
	golang_proto.RegisterEnum("ttn.v3.MType", MType_name, MType_value)
	proto.RegisterEnum("ttn.v3.Major", Major_name, Major_value)
	golang_proto.RegisterEnum("ttn.v3.Major", Major_name, Major_value)
	proto.RegisterEnum("ttn.v3.MACVersion", MACVersion_name, MACVersion_value)
	golang_proto.RegisterEnum("ttn.v3.MACVersion", MACVersion_name, MACVersion_value)
	proto.RegisterEnum("ttn.v3.PHYVersion", PHYVersion_name, PHYVersion_value)
	golang_proto.RegisterEnum("ttn.v3.PHYVersion", PHYVersion_name, PHYVersion_value)
	proto.RegisterEnum("ttn.v3.RejoinType", RejoinType_name, RejoinType_value)
	golang_proto.RegisterEnum("ttn.v3.RejoinType", RejoinType_name, RejoinType_value)
	proto.RegisterEnum("ttn.v3.CFListType", CFListType_name, CFListType_value)
	golang_proto.RegisterEnum("ttn.v3.CFListType", CFListType_name, CFListType_value)
	proto.RegisterEnum("ttn.v3.Modulation", Modulation_name, Modulation_value)
	golang_proto.RegisterEnum("ttn.v3.Modulation", Modulation_name, Modulation_value)
	proto.RegisterEnum("ttn.v3.Class", Class_name, Class_value)
	golang_proto.RegisterEnum("ttn.v3.Class", Class_name, Class_value)
	proto.RegisterEnum("ttn.v3.MACCommandIdentifier", MACCommandIdentifier_name, MACCommandIdentifier_value)
	golang_proto.RegisterEnum("ttn.v3.MACCommandIdentifier", MACCommandIdentifier_name, MACCommandIdentifier_value)
	proto.RegisterEnum("ttn.v3.AggregatedDutyCycle", AggregatedDutyCycle_name, AggregatedDutyCycle_value)
	golang_proto.RegisterEnum("ttn.v3.AggregatedDutyCycle", AggregatedDutyCycle_name, AggregatedDutyCycle_value)
	proto.RegisterEnum("ttn.v3.PingSlotPeriod", PingSlotPeriod_name, PingSlotPeriod_value)
	golang_proto.RegisterEnum("ttn.v3.PingSlotPeriod", PingSlotPeriod_name, PingSlotPeriod_value)
}
func (x MType) String() string {
	s, ok := MType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Major) String() string {
	s, ok := Major_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x MACVersion) String() string {
	s, ok := MACVersion_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x PHYVersion) String() string {
	s, ok := PHYVersion_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x RejoinType) String() string {
	s, ok := RejoinType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x CFListType) String() string {
	s, ok := CFListType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Modulation) String() string {
	s, ok := Modulation_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Class) String() string {
	s, ok := Class_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x MACCommandIdentifier) String() string {
	s, ok := MACCommandIdentifier_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x AggregatedDutyCycle) String() string {
	s, ok := AggregatedDutyCycle_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x PingSlotPeriod) String() string {
	s, ok := PingSlotPeriod_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Message) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Message)
	if !ok {
		that2, ok := that.(Message)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Message")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Message but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Message but is not nil && this == nil")
	}
	if !this.MHDR.Equal(&that1.MHDR) {
		return fmt.Errorf("MHDR this(%v) Not Equal that(%v)", this.MHDR, that1.MHDR)
	}
	if !bytes.Equal(this.MIC, that1.MIC) {
		return fmt.Errorf("MIC this(%v) Not Equal that(%v)", this.MIC, that1.MIC)
	}
	if that1.Payload == nil {
		if this.Payload != nil {
			return fmt.Errorf("this.Payload != nil && that1.Payload == nil")
		}
	} else if this.Payload == nil {
		return fmt.Errorf("this.Payload == nil && that1.Payload != nil")
	} else if err := this.Payload.VerboseEqual(that1.Payload); err != nil {
		return err
	}
	return nil
}
func (this *Message_MACPayload) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Message_MACPayload)
	if !ok {
		that2, ok := that.(Message_MACPayload)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Message_MACPayload")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Message_MACPayload but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Message_MACPayload but is not nil && this == nil")
	}
	if !this.MACPayload.Equal(that1.MACPayload) {
		return fmt.Errorf("MACPayload this(%v) Not Equal that(%v)", this.MACPayload, that1.MACPayload)
	}
	return nil
}
func (this *Message_JoinRequestPayload) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Message_JoinRequestPayload)
	if !ok {
		that2, ok := that.(Message_JoinRequestPayload)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Message_JoinRequestPayload")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Message_JoinRequestPayload but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Message_JoinRequestPayload but is not nil && this == nil")
	}
	if !this.JoinRequestPayload.Equal(that1.JoinRequestPayload) {
		return fmt.Errorf("JoinRequestPayload this(%v) Not Equal that(%v)", this.JoinRequestPayload, that1.JoinRequestPayload)
	}
	return nil
}
func (this *Message_JoinAcceptPayload) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Message_JoinAcceptPayload)
	if !ok {
		that2, ok := that.(Message_JoinAcceptPayload)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Message_JoinAcceptPayload")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Message_JoinAcceptPayload but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Message_JoinAcceptPayload but is not nil && this == nil")
	}
	if !this.JoinAcceptPayload.Equal(that1.JoinAcceptPayload) {
		return fmt.Errorf("JoinAcceptPayload this(%v) Not Equal that(%v)", this.JoinAcceptPayload, that1.JoinAcceptPayload)
	}
	return nil
}
func (this *Message_RejoinRequestPayload) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Message_RejoinRequestPayload)
	if !ok {
		that2, ok := that.(Message_RejoinRequestPayload)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Message_RejoinRequestPayload")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Message_RejoinRequestPayload but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Message_RejoinRequestPayload but is not nil && this == nil")
	}
	if !this.RejoinRequestPayload.Equal(that1.RejoinRequestPayload) {
		return fmt.Errorf("RejoinRequestPayload this(%v) Not Equal that(%v)", this.RejoinRequestPayload, that1.RejoinRequestPayload)
	}
	return nil
}
func (this *Message) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Message)
	if !ok {
		that2, ok := that.(Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.MHDR.Equal(&that1.MHDR) {
		return false
	}
	if !bytes.Equal(this.MIC, that1.MIC) {
		return false
	}
	if that1.Payload == nil {
		if this.Payload != nil {
			return false
		}
	} else if this.Payload == nil {
		return false
	} else if !this.Payload.Equal(that1.Payload) {
		return false
	}
	return true
}
func (this *Message_MACPayload) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Message_MACPayload)
	if !ok {
		that2, ok := that.(Message_MACPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.MACPayload.Equal(that1.MACPayload) {
		return false
	}
	return true
}
func (this *Message_JoinRequestPayload) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Message_JoinRequestPayload)
	if !ok {
		that2, ok := that.(Message_JoinRequestPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.JoinRequestPayload.Equal(that1.JoinRequestPayload) {
		return false
	}
	return true
}
func (this *Message_JoinAcceptPayload) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Message_JoinAcceptPayload)
	if !ok {
		that2, ok := that.(Message_JoinAcceptPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.JoinAcceptPayload.Equal(that1.JoinAcceptPayload) {
		return false
	}
	return true
}
func (this *Message_RejoinRequestPayload) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Message_RejoinRequestPayload)
	if !ok {
		that2, ok := that.(Message_RejoinRequestPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.RejoinRequestPayload.Equal(that1.RejoinRequestPayload) {
		return false
	}
	return true
}
func (this *MHDR) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MHDR)
	if !ok {
		that2, ok := that.(MHDR)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MHDR")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MHDR but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MHDR but is not nil && this == nil")
	}
	if this.MType != that1.MType {
		return fmt.Errorf("MType this(%v) Not Equal that(%v)", this.MType, that1.MType)
	}
	if this.Major != that1.Major {
		return fmt.Errorf("Major this(%v) Not Equal that(%v)", this.Major, that1.Major)
	}
	return nil
}
func (this *MHDR) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MHDR)
	if !ok {
		that2, ok := that.(MHDR)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.MType != that1.MType {
		return false
	}
	if this.Major != that1.Major {
		return false
	}
	return true
}
func (this *MACPayload) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACPayload)
	if !ok {
		that2, ok := that.(MACPayload)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACPayload")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACPayload but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACPayload but is not nil && this == nil")
	}
	if !this.FHDR.Equal(&that1.FHDR) {
		return fmt.Errorf("FHDR this(%v) Not Equal that(%v)", this.FHDR, that1.FHDR)
	}
	if this.FPort != that1.FPort {
		return fmt.Errorf("FPort this(%v) Not Equal that(%v)", this.FPort, that1.FPort)
	}
	if !bytes.Equal(this.FRMPayload, that1.FRMPayload) {
		return fmt.Errorf("FRMPayload this(%v) Not Equal that(%v)", this.FRMPayload, that1.FRMPayload)
	}
	return nil
}
func (this *MACPayload) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACPayload)
	if !ok {
		that2, ok := that.(MACPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.FHDR.Equal(&that1.FHDR) {
		return false
	}
	if this.FPort != that1.FPort {
		return false
	}
	if !bytes.Equal(this.FRMPayload, that1.FRMPayload) {
		return false
	}
	return true
}
func (this *FHDR) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FHDR)
	if !ok {
		that2, ok := that.(FHDR)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FHDR")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FHDR but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FHDR but is not nil && this == nil")
	}
	if !this.DevAddr.Equal(that1.DevAddr) {
		return fmt.Errorf("DevAddr this(%v) Not Equal that(%v)", this.DevAddr, that1.DevAddr)
	}
	if !this.FCtrl.Equal(&that1.FCtrl) {
		return fmt.Errorf("FCtrl this(%v) Not Equal that(%v)", this.FCtrl, that1.FCtrl)
	}
	if this.FCnt != that1.FCnt {
		return fmt.Errorf("FCnt this(%v) Not Equal that(%v)", this.FCnt, that1.FCnt)
	}
	if !bytes.Equal(this.FOpts, that1.FOpts) {
		return fmt.Errorf("FOpts this(%v) Not Equal that(%v)", this.FOpts, that1.FOpts)
	}
	return nil
}
func (this *FHDR) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*FHDR)
	if !ok {
		that2, ok := that.(FHDR)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.DevAddr.Equal(that1.DevAddr) {
		return false
	}
	if !this.FCtrl.Equal(&that1.FCtrl) {
		return false
	}
	if this.FCnt != that1.FCnt {
		return false
	}
	if !bytes.Equal(this.FOpts, that1.FOpts) {
		return false
	}
	return true
}
func (this *FCtrl) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FCtrl)
	if !ok {
		that2, ok := that.(FCtrl)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FCtrl")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FCtrl but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FCtrl but is not nil && this == nil")
	}
	if this.ADR != that1.ADR {
		return fmt.Errorf("ADR this(%v) Not Equal that(%v)", this.ADR, that1.ADR)
	}
	if this.ADRAckReq != that1.ADRAckReq {
		return fmt.Errorf("ADRAckReq this(%v) Not Equal that(%v)", this.ADRAckReq, that1.ADRAckReq)
	}
	if this.Ack != that1.Ack {
		return fmt.Errorf("Ack this(%v) Not Equal that(%v)", this.Ack, that1.Ack)
	}
	if this.FPending != that1.FPending {
		return fmt.Errorf("FPending this(%v) Not Equal that(%v)", this.FPending, that1.FPending)
	}
	if this.ClassB != that1.ClassB {
		return fmt.Errorf("ClassB this(%v) Not Equal that(%v)", this.ClassB, that1.ClassB)
	}
	return nil
}
func (this *FCtrl) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*FCtrl)
	if !ok {
		that2, ok := that.(FCtrl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ADR != that1.ADR {
		return false
	}
	if this.ADRAckReq != that1.ADRAckReq {
		return false
	}
	if this.Ack != that1.Ack {
		return false
	}
	if this.FPending != that1.FPending {
		return false
	}
	if this.ClassB != that1.ClassB {
		return false
	}
	return true
}
func (this *JoinRequestPayload) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*JoinRequestPayload)
	if !ok {
		that2, ok := that.(JoinRequestPayload)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *JoinRequestPayload")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *JoinRequestPayload but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *JoinRequestPayload but is not nil && this == nil")
	}
	if !this.JoinEUI.Equal(that1.JoinEUI) {
		return fmt.Errorf("JoinEUI this(%v) Not Equal that(%v)", this.JoinEUI, that1.JoinEUI)
	}
	if !this.DevEUI.Equal(that1.DevEUI) {
		return fmt.Errorf("DevEUI this(%v) Not Equal that(%v)", this.DevEUI, that1.DevEUI)
	}
	if !this.DevNonce.Equal(that1.DevNonce) {
		return fmt.Errorf("DevNonce this(%v) Not Equal that(%v)", this.DevNonce, that1.DevNonce)
	}
	return nil
}
func (this *JoinRequestPayload) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*JoinRequestPayload)
	if !ok {
		that2, ok := that.(JoinRequestPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.JoinEUI.Equal(that1.JoinEUI) {
		return false
	}
	if !this.DevEUI.Equal(that1.DevEUI) {
		return false
	}
	if !this.DevNonce.Equal(that1.DevNonce) {
		return false
	}
	return true
}
func (this *RejoinRequestPayload) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RejoinRequestPayload)
	if !ok {
		that2, ok := that.(RejoinRequestPayload)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RejoinRequestPayload")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RejoinRequestPayload but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RejoinRequestPayload but is not nil && this == nil")
	}
	if this.RejoinType != that1.RejoinType {
		return fmt.Errorf("RejoinType this(%v) Not Equal that(%v)", this.RejoinType, that1.RejoinType)
	}
	if !this.NetID.Equal(that1.NetID) {
		return fmt.Errorf("NetID this(%v) Not Equal that(%v)", this.NetID, that1.NetID)
	}
	if !this.JoinEUI.Equal(that1.JoinEUI) {
		return fmt.Errorf("JoinEUI this(%v) Not Equal that(%v)", this.JoinEUI, that1.JoinEUI)
	}
	if !this.DevEUI.Equal(that1.DevEUI) {
		return fmt.Errorf("DevEUI this(%v) Not Equal that(%v)", this.DevEUI, that1.DevEUI)
	}
	if this.RejoinCnt != that1.RejoinCnt {
		return fmt.Errorf("RejoinCnt this(%v) Not Equal that(%v)", this.RejoinCnt, that1.RejoinCnt)
	}
	return nil
}
func (this *RejoinRequestPayload) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RejoinRequestPayload)
	if !ok {
		that2, ok := that.(RejoinRequestPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.RejoinType != that1.RejoinType {
		return false
	}
	if !this.NetID.Equal(that1.NetID) {
		return false
	}
	if !this.JoinEUI.Equal(that1.JoinEUI) {
		return false
	}
	if !this.DevEUI.Equal(that1.DevEUI) {
		return false
	}
	if this.RejoinCnt != that1.RejoinCnt {
		return false
	}
	return true
}
func (this *JoinAcceptPayload) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*JoinAcceptPayload)
	if !ok {
		that2, ok := that.(JoinAcceptPayload)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *JoinAcceptPayload")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *JoinAcceptPayload but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *JoinAcceptPayload but is not nil && this == nil")
	}
	if !bytes.Equal(this.Encrypted, that1.Encrypted) {
		return fmt.Errorf("Encrypted this(%v) Not Equal that(%v)", this.Encrypted, that1.Encrypted)
	}
	if !this.JoinNonce.Equal(that1.JoinNonce) {
		return fmt.Errorf("JoinNonce this(%v) Not Equal that(%v)", this.JoinNonce, that1.JoinNonce)
	}
	if !this.NetID.Equal(that1.NetID) {
		return fmt.Errorf("NetID this(%v) Not Equal that(%v)", this.NetID, that1.NetID)
	}
	if !this.DevAddr.Equal(that1.DevAddr) {
		return fmt.Errorf("DevAddr this(%v) Not Equal that(%v)", this.DevAddr, that1.DevAddr)
	}
	if !this.DLSettings.Equal(&that1.DLSettings) {
		return fmt.Errorf("DLSettings this(%v) Not Equal that(%v)", this.DLSettings, that1.DLSettings)
	}
	if this.RxDelay != that1.RxDelay {
		return fmt.Errorf("RxDelay this(%v) Not Equal that(%v)", this.RxDelay, that1.RxDelay)
	}
	if !this.CFList.Equal(that1.CFList) {
		return fmt.Errorf("CFList this(%v) Not Equal that(%v)", this.CFList, that1.CFList)
	}
	return nil
}
func (this *JoinAcceptPayload) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*JoinAcceptPayload)
	if !ok {
		that2, ok := that.(JoinAcceptPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Encrypted, that1.Encrypted) {
		return false
	}
	if !this.JoinNonce.Equal(that1.JoinNonce) {
		return false
	}
	if !this.NetID.Equal(that1.NetID) {
		return false
	}
	if !this.DevAddr.Equal(that1.DevAddr) {
		return false
	}
	if !this.DLSettings.Equal(&that1.DLSettings) {
		return false
	}
	if this.RxDelay != that1.RxDelay {
		return false
	}
	if !this.CFList.Equal(that1.CFList) {
		return false
	}
	return true
}
func (this *DLSettings) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DLSettings)
	if !ok {
		that2, ok := that.(DLSettings)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DLSettings")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DLSettings but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DLSettings but is not nil && this == nil")
	}
	if this.Rx1DROffset != that1.Rx1DROffset {
		return fmt.Errorf("Rx1DROffset this(%v) Not Equal that(%v)", this.Rx1DROffset, that1.Rx1DROffset)
	}
	if this.Rx2DR != that1.Rx2DR {
		return fmt.Errorf("Rx2DR this(%v) Not Equal that(%v)", this.Rx2DR, that1.Rx2DR)
	}
	if this.OptNeg != that1.OptNeg {
		return fmt.Errorf("OptNeg this(%v) Not Equal that(%v)", this.OptNeg, that1.OptNeg)
	}
	return nil
}
func (this *DLSettings) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DLSettings)
	if !ok {
		that2, ok := that.(DLSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Rx1DROffset != that1.Rx1DROffset {
		return false
	}
	if this.Rx2DR != that1.Rx2DR {
		return false
	}
	if this.OptNeg != that1.OptNeg {
		return false
	}
	return true
}
func (this *CFList) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CFList)
	if !ok {
		that2, ok := that.(CFList)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CFList")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CFList but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CFList but is not nil && this == nil")
	}
	if this.Type != that1.Type {
		return fmt.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	if len(this.Freq) != len(that1.Freq) {
		return fmt.Errorf("Freq this(%v) Not Equal that(%v)", len(this.Freq), len(that1.Freq))
	}
	for i := range this.Freq {
		if this.Freq[i] != that1.Freq[i] {
			return fmt.Errorf("Freq this[%v](%v) Not Equal that[%v](%v)", i, this.Freq[i], i, that1.Freq[i])
		}
	}
	if len(this.ChMasks) != len(that1.ChMasks) {
		return fmt.Errorf("ChMasks this(%v) Not Equal that(%v)", len(this.ChMasks), len(that1.ChMasks))
	}
	for i := range this.ChMasks {
		if this.ChMasks[i] != that1.ChMasks[i] {
			return fmt.Errorf("ChMasks this[%v](%v) Not Equal that[%v](%v)", i, this.ChMasks[i], i, that1.ChMasks[i])
		}
	}
	return nil
}
func (this *CFList) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CFList)
	if !ok {
		that2, ok := that.(CFList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if len(this.Freq) != len(that1.Freq) {
		return false
	}
	for i := range this.Freq {
		if this.Freq[i] != that1.Freq[i] {
			return false
		}
	}
	if len(this.ChMasks) != len(that1.ChMasks) {
		return false
	}
	for i := range this.ChMasks {
		if this.ChMasks[i] != that1.ChMasks[i] {
			return false
		}
	}
	return true
}
func (this *TxSettings) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*TxSettings)
	if !ok {
		that2, ok := that.(TxSettings)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *TxSettings")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *TxSettings but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *TxSettings but is not nil && this == nil")
	}
	if this.Modulation != that1.Modulation {
		return fmt.Errorf("Modulation this(%v) Not Equal that(%v)", this.Modulation, that1.Modulation)
	}
	if this.DataRateIndex != that1.DataRateIndex {
		return fmt.Errorf("DataRateIndex this(%v) Not Equal that(%v)", this.DataRateIndex, that1.DataRateIndex)
	}
	if this.Bandwidth != that1.Bandwidth {
		return fmt.Errorf("Bandwidth this(%v) Not Equal that(%v)", this.Bandwidth, that1.Bandwidth)
	}
	if this.SpreadingFactor != that1.SpreadingFactor {
		return fmt.Errorf("SpreadingFactor this(%v) Not Equal that(%v)", this.SpreadingFactor, that1.SpreadingFactor)
	}
	if this.BitRate != that1.BitRate {
		return fmt.Errorf("BitRate this(%v) Not Equal that(%v)", this.BitRate, that1.BitRate)
	}
	if this.CodingRate != that1.CodingRate {
		return fmt.Errorf("CodingRate this(%v) Not Equal that(%v)", this.CodingRate, that1.CodingRate)
	}
	if this.Frequency != that1.Frequency {
		return fmt.Errorf("Frequency this(%v) Not Equal that(%v)", this.Frequency, that1.Frequency)
	}
	if this.TxPower != that1.TxPower {
		return fmt.Errorf("TxPower this(%v) Not Equal that(%v)", this.TxPower, that1.TxPower)
	}
	if this.PolarizationInversion != that1.PolarizationInversion {
		return fmt.Errorf("PolarizationInversion this(%v) Not Equal that(%v)", this.PolarizationInversion, that1.PolarizationInversion)
	}
	return nil
}
func (this *TxSettings) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TxSettings)
	if !ok {
		that2, ok := that.(TxSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Modulation != that1.Modulation {
		return false
	}
	if this.DataRateIndex != that1.DataRateIndex {
		return false
	}
	if this.Bandwidth != that1.Bandwidth {
		return false
	}
	if this.SpreadingFactor != that1.SpreadingFactor {
		return false
	}
	if this.BitRate != that1.BitRate {
		return false
	}
	if this.CodingRate != that1.CodingRate {
		return false
	}
	if this.Frequency != that1.Frequency {
		return false
	}
	if this.TxPower != that1.TxPower {
		return false
	}
	if this.PolarizationInversion != that1.PolarizationInversion {
		return false
	}
	return true
}
func (this *MACCommand) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand)
	if !ok {
		that2, ok := that.(MACCommand)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand but is not nil && this == nil")
	}
	if that1.Payload == nil {
		if this.Payload != nil {
			return fmt.Errorf("this.Payload != nil && that1.Payload == nil")
		}
	} else if this.Payload == nil {
		return fmt.Errorf("this.Payload == nil && that1.Payload != nil")
	} else if err := this.Payload.VerboseEqual(that1.Payload); err != nil {
		return err
	}
	return nil
}
func (this *MACCommand_CID) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_CID)
	if !ok {
		that2, ok := that.(MACCommand_CID)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_CID")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_CID but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_CID but is not nil && this == nil")
	}
	if this.CID != that1.CID {
		return fmt.Errorf("CID this(%v) Not Equal that(%v)", this.CID, that1.CID)
	}
	return nil
}
func (this *MACCommand_Proprietary_) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_Proprietary_)
	if !ok {
		that2, ok := that.(MACCommand_Proprietary_)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_Proprietary_")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_Proprietary_ but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_Proprietary_ but is not nil && this == nil")
	}
	if !this.Proprietary.Equal(that1.Proprietary) {
		return fmt.Errorf("Proprietary this(%v) Not Equal that(%v)", this.Proprietary, that1.Proprietary)
	}
	return nil
}
func (this *MACCommand_ResetInd_) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_ResetInd_)
	if !ok {
		that2, ok := that.(MACCommand_ResetInd_)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_ResetInd_")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_ResetInd_ but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_ResetInd_ but is not nil && this == nil")
	}
	if !this.ResetInd.Equal(that1.ResetInd) {
		return fmt.Errorf("ResetInd this(%v) Not Equal that(%v)", this.ResetInd, that1.ResetInd)
	}
	return nil
}
func (this *MACCommand_ResetConf_) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_ResetConf_)
	if !ok {
		that2, ok := that.(MACCommand_ResetConf_)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_ResetConf_")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_ResetConf_ but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_ResetConf_ but is not nil && this == nil")
	}
	if !this.ResetConf.Equal(that1.ResetConf) {
		return fmt.Errorf("ResetConf this(%v) Not Equal that(%v)", this.ResetConf, that1.ResetConf)
	}
	return nil
}
func (this *MACCommand_LinkCheckAns_) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_LinkCheckAns_)
	if !ok {
		that2, ok := that.(MACCommand_LinkCheckAns_)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_LinkCheckAns_")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_LinkCheckAns_ but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_LinkCheckAns_ but is not nil && this == nil")
	}
	if !this.LinkCheckAns.Equal(that1.LinkCheckAns) {
		return fmt.Errorf("LinkCheckAns this(%v) Not Equal that(%v)", this.LinkCheckAns, that1.LinkCheckAns)
	}
	return nil
}
func (this *MACCommand_LinkAdrReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_LinkAdrReq)
	if !ok {
		that2, ok := that.(MACCommand_LinkAdrReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_LinkAdrReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_LinkAdrReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_LinkAdrReq but is not nil && this == nil")
	}
	if !this.LinkAdrReq.Equal(that1.LinkAdrReq) {
		return fmt.Errorf("LinkAdrReq this(%v) Not Equal that(%v)", this.LinkAdrReq, that1.LinkAdrReq)
	}
	return nil
}
func (this *MACCommand_LinkAdrAns) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_LinkAdrAns)
	if !ok {
		that2, ok := that.(MACCommand_LinkAdrAns)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_LinkAdrAns")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_LinkAdrAns but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_LinkAdrAns but is not nil && this == nil")
	}
	if !this.LinkAdrAns.Equal(that1.LinkAdrAns) {
		return fmt.Errorf("LinkAdrAns this(%v) Not Equal that(%v)", this.LinkAdrAns, that1.LinkAdrAns)
	}
	return nil
}
func (this *MACCommand_DutyCycleReq_) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_DutyCycleReq_)
	if !ok {
		that2, ok := that.(MACCommand_DutyCycleReq_)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_DutyCycleReq_")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_DutyCycleReq_ but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_DutyCycleReq_ but is not nil && this == nil")
	}
	if !this.DutyCycleReq.Equal(that1.DutyCycleReq) {
		return fmt.Errorf("DutyCycleReq this(%v) Not Equal that(%v)", this.DutyCycleReq, that1.DutyCycleReq)
	}
	return nil
}
func (this *MACCommand_RxParamSetupReq_) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_RxParamSetupReq_)
	if !ok {
		that2, ok := that.(MACCommand_RxParamSetupReq_)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_RxParamSetupReq_")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_RxParamSetupReq_ but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_RxParamSetupReq_ but is not nil && this == nil")
	}
	if !this.RxParamSetupReq.Equal(that1.RxParamSetupReq) {
		return fmt.Errorf("RxParamSetupReq this(%v) Not Equal that(%v)", this.RxParamSetupReq, that1.RxParamSetupReq)
	}
	return nil
}
func (this *MACCommand_RxParamSetupAns_) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_RxParamSetupAns_)
	if !ok {
		that2, ok := that.(MACCommand_RxParamSetupAns_)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_RxParamSetupAns_")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_RxParamSetupAns_ but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_RxParamSetupAns_ but is not nil && this == nil")
	}
	if !this.RxParamSetupAns.Equal(that1.RxParamSetupAns) {
		return fmt.Errorf("RxParamSetupAns this(%v) Not Equal that(%v)", this.RxParamSetupAns, that1.RxParamSetupAns)
	}
	return nil
}
func (this *MACCommand_DevStatusAns_) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_DevStatusAns_)
	if !ok {
		that2, ok := that.(MACCommand_DevStatusAns_)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_DevStatusAns_")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_DevStatusAns_ but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_DevStatusAns_ but is not nil && this == nil")
	}
	if !this.DevStatusAns.Equal(that1.DevStatusAns) {
		return fmt.Errorf("DevStatusAns this(%v) Not Equal that(%v)", this.DevStatusAns, that1.DevStatusAns)
	}
	return nil
}
func (this *MACCommand_NewChannelReq_) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_NewChannelReq_)
	if !ok {
		that2, ok := that.(MACCommand_NewChannelReq_)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_NewChannelReq_")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_NewChannelReq_ but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_NewChannelReq_ but is not nil && this == nil")
	}
	if !this.NewChannelReq.Equal(that1.NewChannelReq) {
		return fmt.Errorf("NewChannelReq this(%v) Not Equal that(%v)", this.NewChannelReq, that1.NewChannelReq)
	}
	return nil
}
func (this *MACCommand_NewChannelAns_) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_NewChannelAns_)
	if !ok {
		that2, ok := that.(MACCommand_NewChannelAns_)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_NewChannelAns_")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_NewChannelAns_ but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_NewChannelAns_ but is not nil && this == nil")
	}
	if !this.NewChannelAns.Equal(that1.NewChannelAns) {
		return fmt.Errorf("NewChannelAns this(%v) Not Equal that(%v)", this.NewChannelAns, that1.NewChannelAns)
	}
	return nil
}
func (this *MACCommand_DlChannelReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_DlChannelReq)
	if !ok {
		that2, ok := that.(MACCommand_DlChannelReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_DlChannelReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_DlChannelReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_DlChannelReq but is not nil && this == nil")
	}
	if !this.DlChannelReq.Equal(that1.DlChannelReq) {
		return fmt.Errorf("DlChannelReq this(%v) Not Equal that(%v)", this.DlChannelReq, that1.DlChannelReq)
	}
	return nil
}
func (this *MACCommand_DlChannelAns) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_DlChannelAns)
	if !ok {
		that2, ok := that.(MACCommand_DlChannelAns)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_DlChannelAns")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_DlChannelAns but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_DlChannelAns but is not nil && this == nil")
	}
	if !this.DlChannelAns.Equal(that1.DlChannelAns) {
		return fmt.Errorf("DlChannelAns this(%v) Not Equal that(%v)", this.DlChannelAns, that1.DlChannelAns)
	}
	return nil
}
func (this *MACCommand_RxTimingSetupReq_) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_RxTimingSetupReq_)
	if !ok {
		that2, ok := that.(MACCommand_RxTimingSetupReq_)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_RxTimingSetupReq_")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_RxTimingSetupReq_ but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_RxTimingSetupReq_ but is not nil && this == nil")
	}
	if !this.RxTimingSetupReq.Equal(that1.RxTimingSetupReq) {
		return fmt.Errorf("RxTimingSetupReq this(%v) Not Equal that(%v)", this.RxTimingSetupReq, that1.RxTimingSetupReq)
	}
	return nil
}
func (this *MACCommand_TxParamSetupReq_) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_TxParamSetupReq_)
	if !ok {
		that2, ok := that.(MACCommand_TxParamSetupReq_)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_TxParamSetupReq_")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_TxParamSetupReq_ but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_TxParamSetupReq_ but is not nil && this == nil")
	}
	if !this.TxParamSetupReq.Equal(that1.TxParamSetupReq) {
		return fmt.Errorf("TxParamSetupReq this(%v) Not Equal that(%v)", this.TxParamSetupReq, that1.TxParamSetupReq)
	}
	return nil
}
func (this *MACCommand_RekeyInd_) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_RekeyInd_)
	if !ok {
		that2, ok := that.(MACCommand_RekeyInd_)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_RekeyInd_")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_RekeyInd_ but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_RekeyInd_ but is not nil && this == nil")
	}
	if !this.RekeyInd.Equal(that1.RekeyInd) {
		return fmt.Errorf("RekeyInd this(%v) Not Equal that(%v)", this.RekeyInd, that1.RekeyInd)
	}
	return nil
}
func (this *MACCommand_RekeyConf_) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_RekeyConf_)
	if !ok {
		that2, ok := that.(MACCommand_RekeyConf_)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_RekeyConf_")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_RekeyConf_ but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_RekeyConf_ but is not nil && this == nil")
	}
	if !this.RekeyConf.Equal(that1.RekeyConf) {
		return fmt.Errorf("RekeyConf this(%v) Not Equal that(%v)", this.RekeyConf, that1.RekeyConf)
	}
	return nil
}
func (this *MACCommand_AdrParamSetupReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_AdrParamSetupReq)
	if !ok {
		that2, ok := that.(MACCommand_AdrParamSetupReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_AdrParamSetupReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_AdrParamSetupReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_AdrParamSetupReq but is not nil && this == nil")
	}
	if !this.AdrParamSetupReq.Equal(that1.AdrParamSetupReq) {
		return fmt.Errorf("AdrParamSetupReq this(%v) Not Equal that(%v)", this.AdrParamSetupReq, that1.AdrParamSetupReq)
	}
	return nil
}
func (this *MACCommand_DeviceTimeAns_) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_DeviceTimeAns_)
	if !ok {
		that2, ok := that.(MACCommand_DeviceTimeAns_)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_DeviceTimeAns_")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_DeviceTimeAns_ but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_DeviceTimeAns_ but is not nil && this == nil")
	}
	if !this.DeviceTimeAns.Equal(that1.DeviceTimeAns) {
		return fmt.Errorf("DeviceTimeAns this(%v) Not Equal that(%v)", this.DeviceTimeAns, that1.DeviceTimeAns)
	}
	return nil
}
func (this *MACCommand_ForceRejoinReq_) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_ForceRejoinReq_)
	if !ok {
		that2, ok := that.(MACCommand_ForceRejoinReq_)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_ForceRejoinReq_")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_ForceRejoinReq_ but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_ForceRejoinReq_ but is not nil && this == nil")
	}
	if !this.ForceRejoinReq.Equal(that1.ForceRejoinReq) {
		return fmt.Errorf("ForceRejoinReq this(%v) Not Equal that(%v)", this.ForceRejoinReq, that1.ForceRejoinReq)
	}
	return nil
}
func (this *MACCommand_RejoinParamSetupReq_) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_RejoinParamSetupReq_)
	if !ok {
		that2, ok := that.(MACCommand_RejoinParamSetupReq_)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_RejoinParamSetupReq_")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_RejoinParamSetupReq_ but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_RejoinParamSetupReq_ but is not nil && this == nil")
	}
	if !this.RejoinParamSetupReq.Equal(that1.RejoinParamSetupReq) {
		return fmt.Errorf("RejoinParamSetupReq this(%v) Not Equal that(%v)", this.RejoinParamSetupReq, that1.RejoinParamSetupReq)
	}
	return nil
}
func (this *MACCommand_RejoinParamSetupAns_) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_RejoinParamSetupAns_)
	if !ok {
		that2, ok := that.(MACCommand_RejoinParamSetupAns_)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_RejoinParamSetupAns_")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_RejoinParamSetupAns_ but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_RejoinParamSetupAns_ but is not nil && this == nil")
	}
	if !this.RejoinParamSetupAns.Equal(that1.RejoinParamSetupAns) {
		return fmt.Errorf("RejoinParamSetupAns this(%v) Not Equal that(%v)", this.RejoinParamSetupAns, that1.RejoinParamSetupAns)
	}
	return nil
}
func (this *MACCommand_PingSlotInfoReq_) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_PingSlotInfoReq_)
	if !ok {
		that2, ok := that.(MACCommand_PingSlotInfoReq_)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_PingSlotInfoReq_")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_PingSlotInfoReq_ but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_PingSlotInfoReq_ but is not nil && this == nil")
	}
	if !this.PingSlotInfoReq.Equal(that1.PingSlotInfoReq) {
		return fmt.Errorf("PingSlotInfoReq this(%v) Not Equal that(%v)", this.PingSlotInfoReq, that1.PingSlotInfoReq)
	}
	return nil
}
func (this *MACCommand_PingSlotChannelReq_) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_PingSlotChannelReq_)
	if !ok {
		that2, ok := that.(MACCommand_PingSlotChannelReq_)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_PingSlotChannelReq_")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_PingSlotChannelReq_ but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_PingSlotChannelReq_ but is not nil && this == nil")
	}
	if !this.PingSlotChannelReq.Equal(that1.PingSlotChannelReq) {
		return fmt.Errorf("PingSlotChannelReq this(%v) Not Equal that(%v)", this.PingSlotChannelReq, that1.PingSlotChannelReq)
	}
	return nil
}
func (this *MACCommand_PingSlotChannelAns_) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_PingSlotChannelAns_)
	if !ok {
		that2, ok := that.(MACCommand_PingSlotChannelAns_)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_PingSlotChannelAns_")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_PingSlotChannelAns_ but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_PingSlotChannelAns_ but is not nil && this == nil")
	}
	if !this.PingSlotChannelAns.Equal(that1.PingSlotChannelAns) {
		return fmt.Errorf("PingSlotChannelAns this(%v) Not Equal that(%v)", this.PingSlotChannelAns, that1.PingSlotChannelAns)
	}
	return nil
}
func (this *MACCommand_BeaconTimingAns_) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_BeaconTimingAns_)
	if !ok {
		that2, ok := that.(MACCommand_BeaconTimingAns_)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_BeaconTimingAns_")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_BeaconTimingAns_ but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_BeaconTimingAns_ but is not nil && this == nil")
	}
	if !this.BeaconTimingAns.Equal(that1.BeaconTimingAns) {
		return fmt.Errorf("BeaconTimingAns this(%v) Not Equal that(%v)", this.BeaconTimingAns, that1.BeaconTimingAns)
	}
	return nil
}
func (this *MACCommand_BeaconFreqReq_) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_BeaconFreqReq_)
	if !ok {
		that2, ok := that.(MACCommand_BeaconFreqReq_)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_BeaconFreqReq_")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_BeaconFreqReq_ but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_BeaconFreqReq_ but is not nil && this == nil")
	}
	if !this.BeaconFreqReq.Equal(that1.BeaconFreqReq) {
		return fmt.Errorf("BeaconFreqReq this(%v) Not Equal that(%v)", this.BeaconFreqReq, that1.BeaconFreqReq)
	}
	return nil
}
func (this *MACCommand_BeaconFreqAns_) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_BeaconFreqAns_)
	if !ok {
		that2, ok := that.(MACCommand_BeaconFreqAns_)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_BeaconFreqAns_")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_BeaconFreqAns_ but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_BeaconFreqAns_ but is not nil && this == nil")
	}
	if !this.BeaconFreqAns.Equal(that1.BeaconFreqAns) {
		return fmt.Errorf("BeaconFreqAns this(%v) Not Equal that(%v)", this.BeaconFreqAns, that1.BeaconFreqAns)
	}
	return nil
}
func (this *MACCommand_DeviceModeInd_) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_DeviceModeInd_)
	if !ok {
		that2, ok := that.(MACCommand_DeviceModeInd_)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_DeviceModeInd_")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_DeviceModeInd_ but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_DeviceModeInd_ but is not nil && this == nil")
	}
	if !this.DeviceModeInd.Equal(that1.DeviceModeInd) {
		return fmt.Errorf("DeviceModeInd this(%v) Not Equal that(%v)", this.DeviceModeInd, that1.DeviceModeInd)
	}
	return nil
}
func (this *MACCommand_DeviceModeConf_) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_DeviceModeConf_)
	if !ok {
		that2, ok := that.(MACCommand_DeviceModeConf_)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_DeviceModeConf_")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_DeviceModeConf_ but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_DeviceModeConf_ but is not nil && this == nil")
	}
	if !this.DeviceModeConf.Equal(that1.DeviceModeConf) {
		return fmt.Errorf("DeviceModeConf this(%v) Not Equal that(%v)", this.DeviceModeConf, that1.DeviceModeConf)
	}
	return nil
}
func (this *MACCommand) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand)
	if !ok {
		that2, ok := that.(MACCommand)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if that1.Payload == nil {
		if this.Payload != nil {
			return false
		}
	} else if this.Payload == nil {
		return false
	} else if !this.Payload.Equal(that1.Payload) {
		return false
	}
	return true
}
func (this *MACCommand_CID) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_CID)
	if !ok {
		that2, ok := that.(MACCommand_CID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.CID != that1.CID {
		return false
	}
	return true
}
func (this *MACCommand_Proprietary_) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_Proprietary_)
	if !ok {
		that2, ok := that.(MACCommand_Proprietary_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Proprietary.Equal(that1.Proprietary) {
		return false
	}
	return true
}
func (this *MACCommand_ResetInd_) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_ResetInd_)
	if !ok {
		that2, ok := that.(MACCommand_ResetInd_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ResetInd.Equal(that1.ResetInd) {
		return false
	}
	return true
}
func (this *MACCommand_ResetConf_) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_ResetConf_)
	if !ok {
		that2, ok := that.(MACCommand_ResetConf_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ResetConf.Equal(that1.ResetConf) {
		return false
	}
	return true
}
func (this *MACCommand_LinkCheckAns_) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_LinkCheckAns_)
	if !ok {
		that2, ok := that.(MACCommand_LinkCheckAns_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.LinkCheckAns.Equal(that1.LinkCheckAns) {
		return false
	}
	return true
}
func (this *MACCommand_LinkAdrReq) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_LinkAdrReq)
	if !ok {
		that2, ok := that.(MACCommand_LinkAdrReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.LinkAdrReq.Equal(that1.LinkAdrReq) {
		return false
	}
	return true
}
func (this *MACCommand_LinkAdrAns) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_LinkAdrAns)
	if !ok {
		that2, ok := that.(MACCommand_LinkAdrAns)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.LinkAdrAns.Equal(that1.LinkAdrAns) {
		return false
	}
	return true
}
func (this *MACCommand_DutyCycleReq_) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_DutyCycleReq_)
	if !ok {
		that2, ok := that.(MACCommand_DutyCycleReq_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.DutyCycleReq.Equal(that1.DutyCycleReq) {
		return false
	}
	return true
}
func (this *MACCommand_RxParamSetupReq_) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_RxParamSetupReq_)
	if !ok {
		that2, ok := that.(MACCommand_RxParamSetupReq_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.RxParamSetupReq.Equal(that1.RxParamSetupReq) {
		return false
	}
	return true
}
func (this *MACCommand_RxParamSetupAns_) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_RxParamSetupAns_)
	if !ok {
		that2, ok := that.(MACCommand_RxParamSetupAns_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.RxParamSetupAns.Equal(that1.RxParamSetupAns) {
		return false
	}
	return true
}
func (this *MACCommand_DevStatusAns_) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_DevStatusAns_)
	if !ok {
		that2, ok := that.(MACCommand_DevStatusAns_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.DevStatusAns.Equal(that1.DevStatusAns) {
		return false
	}
	return true
}
func (this *MACCommand_NewChannelReq_) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_NewChannelReq_)
	if !ok {
		that2, ok := that.(MACCommand_NewChannelReq_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.NewChannelReq.Equal(that1.NewChannelReq) {
		return false
	}
	return true
}
func (this *MACCommand_NewChannelAns_) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_NewChannelAns_)
	if !ok {
		that2, ok := that.(MACCommand_NewChannelAns_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.NewChannelAns.Equal(that1.NewChannelAns) {
		return false
	}
	return true
}
func (this *MACCommand_DlChannelReq) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_DlChannelReq)
	if !ok {
		that2, ok := that.(MACCommand_DlChannelReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.DlChannelReq.Equal(that1.DlChannelReq) {
		return false
	}
	return true
}
func (this *MACCommand_DlChannelAns) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_DlChannelAns)
	if !ok {
		that2, ok := that.(MACCommand_DlChannelAns)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.DlChannelAns.Equal(that1.DlChannelAns) {
		return false
	}
	return true
}
func (this *MACCommand_RxTimingSetupReq_) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_RxTimingSetupReq_)
	if !ok {
		that2, ok := that.(MACCommand_RxTimingSetupReq_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.RxTimingSetupReq.Equal(that1.RxTimingSetupReq) {
		return false
	}
	return true
}
func (this *MACCommand_TxParamSetupReq_) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_TxParamSetupReq_)
	if !ok {
		that2, ok := that.(MACCommand_TxParamSetupReq_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.TxParamSetupReq.Equal(that1.TxParamSetupReq) {
		return false
	}
	return true
}
func (this *MACCommand_RekeyInd_) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_RekeyInd_)
	if !ok {
		that2, ok := that.(MACCommand_RekeyInd_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.RekeyInd.Equal(that1.RekeyInd) {
		return false
	}
	return true
}
func (this *MACCommand_RekeyConf_) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_RekeyConf_)
	if !ok {
		that2, ok := that.(MACCommand_RekeyConf_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.RekeyConf.Equal(that1.RekeyConf) {
		return false
	}
	return true
}
func (this *MACCommand_AdrParamSetupReq) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_AdrParamSetupReq)
	if !ok {
		that2, ok := that.(MACCommand_AdrParamSetupReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.AdrParamSetupReq.Equal(that1.AdrParamSetupReq) {
		return false
	}
	return true
}
func (this *MACCommand_DeviceTimeAns_) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_DeviceTimeAns_)
	if !ok {
		that2, ok := that.(MACCommand_DeviceTimeAns_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.DeviceTimeAns.Equal(that1.DeviceTimeAns) {
		return false
	}
	return true
}
func (this *MACCommand_ForceRejoinReq_) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_ForceRejoinReq_)
	if !ok {
		that2, ok := that.(MACCommand_ForceRejoinReq_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ForceRejoinReq.Equal(that1.ForceRejoinReq) {
		return false
	}
	return true
}
func (this *MACCommand_RejoinParamSetupReq_) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_RejoinParamSetupReq_)
	if !ok {
		that2, ok := that.(MACCommand_RejoinParamSetupReq_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.RejoinParamSetupReq.Equal(that1.RejoinParamSetupReq) {
		return false
	}
	return true
}
func (this *MACCommand_RejoinParamSetupAns_) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_RejoinParamSetupAns_)
	if !ok {
		that2, ok := that.(MACCommand_RejoinParamSetupAns_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.RejoinParamSetupAns.Equal(that1.RejoinParamSetupAns) {
		return false
	}
	return true
}
func (this *MACCommand_PingSlotInfoReq_) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_PingSlotInfoReq_)
	if !ok {
		that2, ok := that.(MACCommand_PingSlotInfoReq_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.PingSlotInfoReq.Equal(that1.PingSlotInfoReq) {
		return false
	}
	return true
}
func (this *MACCommand_PingSlotChannelReq_) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_PingSlotChannelReq_)
	if !ok {
		that2, ok := that.(MACCommand_PingSlotChannelReq_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.PingSlotChannelReq.Equal(that1.PingSlotChannelReq) {
		return false
	}
	return true
}
func (this *MACCommand_PingSlotChannelAns_) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_PingSlotChannelAns_)
	if !ok {
		that2, ok := that.(MACCommand_PingSlotChannelAns_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.PingSlotChannelAns.Equal(that1.PingSlotChannelAns) {
		return false
	}
	return true
}
func (this *MACCommand_BeaconTimingAns_) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_BeaconTimingAns_)
	if !ok {
		that2, ok := that.(MACCommand_BeaconTimingAns_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.BeaconTimingAns.Equal(that1.BeaconTimingAns) {
		return false
	}
	return true
}
func (this *MACCommand_BeaconFreqReq_) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_BeaconFreqReq_)
	if !ok {
		that2, ok := that.(MACCommand_BeaconFreqReq_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.BeaconFreqReq.Equal(that1.BeaconFreqReq) {
		return false
	}
	return true
}
func (this *MACCommand_BeaconFreqAns_) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_BeaconFreqAns_)
	if !ok {
		that2, ok := that.(MACCommand_BeaconFreqAns_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.BeaconFreqAns.Equal(that1.BeaconFreqAns) {
		return false
	}
	return true
}
func (this *MACCommand_DeviceModeInd_) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_DeviceModeInd_)
	if !ok {
		that2, ok := that.(MACCommand_DeviceModeInd_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.DeviceModeInd.Equal(that1.DeviceModeInd) {
		return false
	}
	return true
}
func (this *MACCommand_DeviceModeConf_) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_DeviceModeConf_)
	if !ok {
		that2, ok := that.(MACCommand_DeviceModeConf_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.DeviceModeConf.Equal(that1.DeviceModeConf) {
		return false
	}
	return true
}
func (this *MACCommand_Proprietary) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_Proprietary)
	if !ok {
		that2, ok := that.(MACCommand_Proprietary)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_Proprietary")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_Proprietary but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_Proprietary but is not nil && this == nil")
	}
	if this.CID != that1.CID {
		return fmt.Errorf("CID this(%v) Not Equal that(%v)", this.CID, that1.CID)
	}
	if !bytes.Equal(this.RawPayload, that1.RawPayload) {
		return fmt.Errorf("RawPayload this(%v) Not Equal that(%v)", this.RawPayload, that1.RawPayload)
	}
	return nil
}
func (this *MACCommand_Proprietary) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_Proprietary)
	if !ok {
		that2, ok := that.(MACCommand_Proprietary)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.CID != that1.CID {
		return false
	}
	if !bytes.Equal(this.RawPayload, that1.RawPayload) {
		return false
	}
	return true
}
func (this *MACCommand_ResetInd) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_ResetInd)
	if !ok {
		that2, ok := that.(MACCommand_ResetInd)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_ResetInd")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_ResetInd but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_ResetInd but is not nil && this == nil")
	}
	if this.MinorVersion != that1.MinorVersion {
		return fmt.Errorf("MinorVersion this(%v) Not Equal that(%v)", this.MinorVersion, that1.MinorVersion)
	}
	return nil
}
func (this *MACCommand_ResetInd) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_ResetInd)
	if !ok {
		that2, ok := that.(MACCommand_ResetInd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.MinorVersion != that1.MinorVersion {
		return false
	}
	return true
}
func (this *MACCommand_ResetConf) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_ResetConf)
	if !ok {
		that2, ok := that.(MACCommand_ResetConf)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_ResetConf")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_ResetConf but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_ResetConf but is not nil && this == nil")
	}
	if this.MinorVersion != that1.MinorVersion {
		return fmt.Errorf("MinorVersion this(%v) Not Equal that(%v)", this.MinorVersion, that1.MinorVersion)
	}
	return nil
}
func (this *MACCommand_ResetConf) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_ResetConf)
	if !ok {
		that2, ok := that.(MACCommand_ResetConf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.MinorVersion != that1.MinorVersion {
		return false
	}
	return true
}
func (this *MACCommand_LinkCheckAns) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_LinkCheckAns)
	if !ok {
		that2, ok := that.(MACCommand_LinkCheckAns)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_LinkCheckAns")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_LinkCheckAns but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_LinkCheckAns but is not nil && this == nil")
	}
	if this.Margin != that1.Margin {
		return fmt.Errorf("Margin this(%v) Not Equal that(%v)", this.Margin, that1.Margin)
	}
	if this.GatewayCount != that1.GatewayCount {
		return fmt.Errorf("GatewayCount this(%v) Not Equal that(%v)", this.GatewayCount, that1.GatewayCount)
	}
	return nil
}
func (this *MACCommand_LinkCheckAns) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_LinkCheckAns)
	if !ok {
		that2, ok := that.(MACCommand_LinkCheckAns)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Margin != that1.Margin {
		return false
	}
	if this.GatewayCount != that1.GatewayCount {
		return false
	}
	return true
}
func (this *MACCommand_LinkADRReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_LinkADRReq)
	if !ok {
		that2, ok := that.(MACCommand_LinkADRReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_LinkADRReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_LinkADRReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_LinkADRReq but is not nil && this == nil")
	}
	if this.DataRateIndex != that1.DataRateIndex {
		return fmt.Errorf("DataRateIndex this(%v) Not Equal that(%v)", this.DataRateIndex, that1.DataRateIndex)
	}
	if this.TxPowerIndex != that1.TxPowerIndex {
		return fmt.Errorf("TxPowerIndex this(%v) Not Equal that(%v)", this.TxPowerIndex, that1.TxPowerIndex)
	}
	if len(this.ChannelMask) != len(that1.ChannelMask) {
		return fmt.Errorf("ChannelMask this(%v) Not Equal that(%v)", len(this.ChannelMask), len(that1.ChannelMask))
	}
	for i := range this.ChannelMask {
		if this.ChannelMask[i] != that1.ChannelMask[i] {
			return fmt.Errorf("ChannelMask this[%v](%v) Not Equal that[%v](%v)", i, this.ChannelMask[i], i, that1.ChannelMask[i])
		}
	}
	if this.ChannelMaskControl != that1.ChannelMaskControl {
		return fmt.Errorf("ChannelMaskControl this(%v) Not Equal that(%v)", this.ChannelMaskControl, that1.ChannelMaskControl)
	}
	if this.NbTrans != that1.NbTrans {
		return fmt.Errorf("NbTrans this(%v) Not Equal that(%v)", this.NbTrans, that1.NbTrans)
	}
	return nil
}
func (this *MACCommand_LinkADRReq) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_LinkADRReq)
	if !ok {
		that2, ok := that.(MACCommand_LinkADRReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.DataRateIndex != that1.DataRateIndex {
		return false
	}
	if this.TxPowerIndex != that1.TxPowerIndex {
		return false
	}
	if len(this.ChannelMask) != len(that1.ChannelMask) {
		return false
	}
	for i := range this.ChannelMask {
		if this.ChannelMask[i] != that1.ChannelMask[i] {
			return false
		}
	}
	if this.ChannelMaskControl != that1.ChannelMaskControl {
		return false
	}
	if this.NbTrans != that1.NbTrans {
		return false
	}
	return true
}
func (this *MACCommand_LinkADRAns) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_LinkADRAns)
	if !ok {
		that2, ok := that.(MACCommand_LinkADRAns)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_LinkADRAns")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_LinkADRAns but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_LinkADRAns but is not nil && this == nil")
	}
	if this.ChannelMaskAck != that1.ChannelMaskAck {
		return fmt.Errorf("ChannelMaskAck this(%v) Not Equal that(%v)", this.ChannelMaskAck, that1.ChannelMaskAck)
	}
	if this.DataRateIndexAck != that1.DataRateIndexAck {
		return fmt.Errorf("DataRateIndexAck this(%v) Not Equal that(%v)", this.DataRateIndexAck, that1.DataRateIndexAck)
	}
	if this.TxPowerIndexAck != that1.TxPowerIndexAck {
		return fmt.Errorf("TxPowerIndexAck this(%v) Not Equal that(%v)", this.TxPowerIndexAck, that1.TxPowerIndexAck)
	}
	return nil
}
func (this *MACCommand_LinkADRAns) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_LinkADRAns)
	if !ok {
		that2, ok := that.(MACCommand_LinkADRAns)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ChannelMaskAck != that1.ChannelMaskAck {
		return false
	}
	if this.DataRateIndexAck != that1.DataRateIndexAck {
		return false
	}
	if this.TxPowerIndexAck != that1.TxPowerIndexAck {
		return false
	}
	return true
}
func (this *MACCommand_DutyCycleReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_DutyCycleReq)
	if !ok {
		that2, ok := that.(MACCommand_DutyCycleReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_DutyCycleReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_DutyCycleReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_DutyCycleReq but is not nil && this == nil")
	}
	if this.MaxDutyCycle != that1.MaxDutyCycle {
		return fmt.Errorf("MaxDutyCycle this(%v) Not Equal that(%v)", this.MaxDutyCycle, that1.MaxDutyCycle)
	}
	return nil
}
func (this *MACCommand_DutyCycleReq) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_DutyCycleReq)
	if !ok {
		that2, ok := that.(MACCommand_DutyCycleReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.MaxDutyCycle != that1.MaxDutyCycle {
		return false
	}
	return true
}
func (this *MACCommand_RxParamSetupReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_RxParamSetupReq)
	if !ok {
		that2, ok := that.(MACCommand_RxParamSetupReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_RxParamSetupReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_RxParamSetupReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_RxParamSetupReq but is not nil && this == nil")
	}
	if this.Rx2DataRateIndex != that1.Rx2DataRateIndex {
		return fmt.Errorf("Rx2DataRateIndex this(%v) Not Equal that(%v)", this.Rx2DataRateIndex, that1.Rx2DataRateIndex)
	}
	if this.Rx1DataRateOffset != that1.Rx1DataRateOffset {
		return fmt.Errorf("Rx1DataRateOffset this(%v) Not Equal that(%v)", this.Rx1DataRateOffset, that1.Rx1DataRateOffset)
	}
	if this.Rx2Frequency != that1.Rx2Frequency {
		return fmt.Errorf("Rx2Frequency this(%v) Not Equal that(%v)", this.Rx2Frequency, that1.Rx2Frequency)
	}
	return nil
}
func (this *MACCommand_RxParamSetupReq) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_RxParamSetupReq)
	if !ok {
		that2, ok := that.(MACCommand_RxParamSetupReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Rx2DataRateIndex != that1.Rx2DataRateIndex {
		return false
	}
	if this.Rx1DataRateOffset != that1.Rx1DataRateOffset {
		return false
	}
	if this.Rx2Frequency != that1.Rx2Frequency {
		return false
	}
	return true
}
func (this *MACCommand_RxParamSetupAns) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_RxParamSetupAns)
	if !ok {
		that2, ok := that.(MACCommand_RxParamSetupAns)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_RxParamSetupAns")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_RxParamSetupAns but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_RxParamSetupAns but is not nil && this == nil")
	}
	if this.Rx2DataRateIndexAck != that1.Rx2DataRateIndexAck {
		return fmt.Errorf("Rx2DataRateIndexAck this(%v) Not Equal that(%v)", this.Rx2DataRateIndexAck, that1.Rx2DataRateIndexAck)
	}
	if this.Rx1DataRateOffsetAck != that1.Rx1DataRateOffsetAck {
		return fmt.Errorf("Rx1DataRateOffsetAck this(%v) Not Equal that(%v)", this.Rx1DataRateOffsetAck, that1.Rx1DataRateOffsetAck)
	}
	if this.Rx2FrequencyAck != that1.Rx2FrequencyAck {
		return fmt.Errorf("Rx2FrequencyAck this(%v) Not Equal that(%v)", this.Rx2FrequencyAck, that1.Rx2FrequencyAck)
	}
	return nil
}
func (this *MACCommand_RxParamSetupAns) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_RxParamSetupAns)
	if !ok {
		that2, ok := that.(MACCommand_RxParamSetupAns)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Rx2DataRateIndexAck != that1.Rx2DataRateIndexAck {
		return false
	}
	if this.Rx1DataRateOffsetAck != that1.Rx1DataRateOffsetAck {
		return false
	}
	if this.Rx2FrequencyAck != that1.Rx2FrequencyAck {
		return false
	}
	return true
}
func (this *MACCommand_DevStatusAns) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_DevStatusAns)
	if !ok {
		that2, ok := that.(MACCommand_DevStatusAns)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_DevStatusAns")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_DevStatusAns but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_DevStatusAns but is not nil && this == nil")
	}
	if this.Battery != that1.Battery {
		return fmt.Errorf("Battery this(%v) Not Equal that(%v)", this.Battery, that1.Battery)
	}
	if this.Margin != that1.Margin {
		return fmt.Errorf("Margin this(%v) Not Equal that(%v)", this.Margin, that1.Margin)
	}
	return nil
}
func (this *MACCommand_DevStatusAns) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_DevStatusAns)
	if !ok {
		that2, ok := that.(MACCommand_DevStatusAns)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Battery != that1.Battery {
		return false
	}
	if this.Margin != that1.Margin {
		return false
	}
	return true
}
func (this *MACCommand_NewChannelReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_NewChannelReq)
	if !ok {
		that2, ok := that.(MACCommand_NewChannelReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_NewChannelReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_NewChannelReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_NewChannelReq but is not nil && this == nil")
	}
	if this.ChannelIndex != that1.ChannelIndex {
		return fmt.Errorf("ChannelIndex this(%v) Not Equal that(%v)", this.ChannelIndex, that1.ChannelIndex)
	}
	if this.Frequency != that1.Frequency {
		return fmt.Errorf("Frequency this(%v) Not Equal that(%v)", this.Frequency, that1.Frequency)
	}
	if this.MinDataRateIndex != that1.MinDataRateIndex {
		return fmt.Errorf("MinDataRateIndex this(%v) Not Equal that(%v)", this.MinDataRateIndex, that1.MinDataRateIndex)
	}
	if this.MaxDataRateIndex != that1.MaxDataRateIndex {
		return fmt.Errorf("MaxDataRateIndex this(%v) Not Equal that(%v)", this.MaxDataRateIndex, that1.MaxDataRateIndex)
	}
	return nil
}
func (this *MACCommand_NewChannelReq) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_NewChannelReq)
	if !ok {
		that2, ok := that.(MACCommand_NewChannelReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ChannelIndex != that1.ChannelIndex {
		return false
	}
	if this.Frequency != that1.Frequency {
		return false
	}
	if this.MinDataRateIndex != that1.MinDataRateIndex {
		return false
	}
	if this.MaxDataRateIndex != that1.MaxDataRateIndex {
		return false
	}
	return true
}
func (this *MACCommand_NewChannelAns) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_NewChannelAns)
	if !ok {
		that2, ok := that.(MACCommand_NewChannelAns)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_NewChannelAns")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_NewChannelAns but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_NewChannelAns but is not nil && this == nil")
	}
	if this.FrequencyAck != that1.FrequencyAck {
		return fmt.Errorf("FrequencyAck this(%v) Not Equal that(%v)", this.FrequencyAck, that1.FrequencyAck)
	}
	if this.DataRateAck != that1.DataRateAck {
		return fmt.Errorf("DataRateAck this(%v) Not Equal that(%v)", this.DataRateAck, that1.DataRateAck)
	}
	return nil
}
func (this *MACCommand_NewChannelAns) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_NewChannelAns)
	if !ok {
		that2, ok := that.(MACCommand_NewChannelAns)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.FrequencyAck != that1.FrequencyAck {
		return false
	}
	if this.DataRateAck != that1.DataRateAck {
		return false
	}
	return true
}
func (this *MACCommand_DLChannelReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_DLChannelReq)
	if !ok {
		that2, ok := that.(MACCommand_DLChannelReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_DLChannelReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_DLChannelReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_DLChannelReq but is not nil && this == nil")
	}
	if this.ChannelIndex != that1.ChannelIndex {
		return fmt.Errorf("ChannelIndex this(%v) Not Equal that(%v)", this.ChannelIndex, that1.ChannelIndex)
	}
	if this.Frequency != that1.Frequency {
		return fmt.Errorf("Frequency this(%v) Not Equal that(%v)", this.Frequency, that1.Frequency)
	}
	return nil
}
func (this *MACCommand_DLChannelReq) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_DLChannelReq)
	if !ok {
		that2, ok := that.(MACCommand_DLChannelReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ChannelIndex != that1.ChannelIndex {
		return false
	}
	if this.Frequency != that1.Frequency {
		return false
	}
	return true
}
func (this *MACCommand_DLChannelAns) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_DLChannelAns)
	if !ok {
		that2, ok := that.(MACCommand_DLChannelAns)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_DLChannelAns")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_DLChannelAns but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_DLChannelAns but is not nil && this == nil")
	}
	if this.ChannelIndexAck != that1.ChannelIndexAck {
		return fmt.Errorf("ChannelIndexAck this(%v) Not Equal that(%v)", this.ChannelIndexAck, that1.ChannelIndexAck)
	}
	if this.FrequencyAck != that1.FrequencyAck {
		return fmt.Errorf("FrequencyAck this(%v) Not Equal that(%v)", this.FrequencyAck, that1.FrequencyAck)
	}
	return nil
}
func (this *MACCommand_DLChannelAns) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_DLChannelAns)
	if !ok {
		that2, ok := that.(MACCommand_DLChannelAns)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ChannelIndexAck != that1.ChannelIndexAck {
		return false
	}
	if this.FrequencyAck != that1.FrequencyAck {
		return false
	}
	return true
}
func (this *MACCommand_RxTimingSetupReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_RxTimingSetupReq)
	if !ok {
		that2, ok := that.(MACCommand_RxTimingSetupReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_RxTimingSetupReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_RxTimingSetupReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_RxTimingSetupReq but is not nil && this == nil")
	}
	if this.Delay != that1.Delay {
		return fmt.Errorf("Delay this(%v) Not Equal that(%v)", this.Delay, that1.Delay)
	}
	return nil
}
func (this *MACCommand_RxTimingSetupReq) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_RxTimingSetupReq)
	if !ok {
		that2, ok := that.(MACCommand_RxTimingSetupReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Delay != that1.Delay {
		return false
	}
	return true
}
func (this *MACCommand_TxParamSetupReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_TxParamSetupReq)
	if !ok {
		that2, ok := that.(MACCommand_TxParamSetupReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_TxParamSetupReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_TxParamSetupReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_TxParamSetupReq but is not nil && this == nil")
	}
	if this.MaxEIRPIndex != that1.MaxEIRPIndex {
		return fmt.Errorf("MaxEIRPIndex this(%v) Not Equal that(%v)", this.MaxEIRPIndex, that1.MaxEIRPIndex)
	}
	if this.UplinkDwellTime != that1.UplinkDwellTime {
		return fmt.Errorf("UplinkDwellTime this(%v) Not Equal that(%v)", this.UplinkDwellTime, that1.UplinkDwellTime)
	}
	if this.DownlinkDwellTime != that1.DownlinkDwellTime {
		return fmt.Errorf("DownlinkDwellTime this(%v) Not Equal that(%v)", this.DownlinkDwellTime, that1.DownlinkDwellTime)
	}
	return nil
}
func (this *MACCommand_TxParamSetupReq) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_TxParamSetupReq)
	if !ok {
		that2, ok := that.(MACCommand_TxParamSetupReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.MaxEIRPIndex != that1.MaxEIRPIndex {
		return false
	}
	if this.UplinkDwellTime != that1.UplinkDwellTime {
		return false
	}
	if this.DownlinkDwellTime != that1.DownlinkDwellTime {
		return false
	}
	return true
}
func (this *MACCommand_RekeyInd) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_RekeyInd)
	if !ok {
		that2, ok := that.(MACCommand_RekeyInd)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_RekeyInd")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_RekeyInd but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_RekeyInd but is not nil && this == nil")
	}
	if this.MinorVersion != that1.MinorVersion {
		return fmt.Errorf("MinorVersion this(%v) Not Equal that(%v)", this.MinorVersion, that1.MinorVersion)
	}
	return nil
}
func (this *MACCommand_RekeyInd) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_RekeyInd)
	if !ok {
		that2, ok := that.(MACCommand_RekeyInd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.MinorVersion != that1.MinorVersion {
		return false
	}
	return true
}
func (this *MACCommand_RekeyConf) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_RekeyConf)
	if !ok {
		that2, ok := that.(MACCommand_RekeyConf)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_RekeyConf")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_RekeyConf but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_RekeyConf but is not nil && this == nil")
	}
	if this.MinorVersion != that1.MinorVersion {
		return fmt.Errorf("MinorVersion this(%v) Not Equal that(%v)", this.MinorVersion, that1.MinorVersion)
	}
	return nil
}
func (this *MACCommand_RekeyConf) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_RekeyConf)
	if !ok {
		that2, ok := that.(MACCommand_RekeyConf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.MinorVersion != that1.MinorVersion {
		return false
	}
	return true
}
func (this *MACCommand_ADRParamSetupReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_ADRParamSetupReq)
	if !ok {
		that2, ok := that.(MACCommand_ADRParamSetupReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_ADRParamSetupReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_ADRParamSetupReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_ADRParamSetupReq but is not nil && this == nil")
	}
	if this.ADRAckLimitExponent != that1.ADRAckLimitExponent {
		return fmt.Errorf("ADRAckLimitExponent this(%v) Not Equal that(%v)", this.ADRAckLimitExponent, that1.ADRAckLimitExponent)
	}
	if this.ADRAckDelayExponent != that1.ADRAckDelayExponent {
		return fmt.Errorf("ADRAckDelayExponent this(%v) Not Equal that(%v)", this.ADRAckDelayExponent, that1.ADRAckDelayExponent)
	}
	return nil
}
func (this *MACCommand_ADRParamSetupReq) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_ADRParamSetupReq)
	if !ok {
		that2, ok := that.(MACCommand_ADRParamSetupReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ADRAckLimitExponent != that1.ADRAckLimitExponent {
		return false
	}
	if this.ADRAckDelayExponent != that1.ADRAckDelayExponent {
		return false
	}
	return true
}
func (this *MACCommand_DeviceTimeAns) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_DeviceTimeAns)
	if !ok {
		that2, ok := that.(MACCommand_DeviceTimeAns)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_DeviceTimeAns")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_DeviceTimeAns but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_DeviceTimeAns but is not nil && this == nil")
	}
	if that1.Time == nil {
		if this.Time != nil {
			return fmt.Errorf("this.Time != nil && that1.Time == nil")
		}
	} else if !this.Time.Equal(*that1.Time) {
		return fmt.Errorf("Time this(%v) Not Equal that(%v)", this.Time, that1.Time)
	}
	return nil
}
func (this *MACCommand_DeviceTimeAns) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_DeviceTimeAns)
	if !ok {
		that2, ok := that.(MACCommand_DeviceTimeAns)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if that1.Time == nil {
		if this.Time != nil {
			return false
		}
	} else if !this.Time.Equal(*that1.Time) {
		return false
	}
	return true
}
func (this *MACCommand_ForceRejoinReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_ForceRejoinReq)
	if !ok {
		that2, ok := that.(MACCommand_ForceRejoinReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_ForceRejoinReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_ForceRejoinReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_ForceRejoinReq but is not nil && this == nil")
	}
	if this.RejoinType != that1.RejoinType {
		return fmt.Errorf("RejoinType this(%v) Not Equal that(%v)", this.RejoinType, that1.RejoinType)
	}
	if this.DataRateIndex != that1.DataRateIndex {
		return fmt.Errorf("DataRateIndex this(%v) Not Equal that(%v)", this.DataRateIndex, that1.DataRateIndex)
	}
	if this.MaxRetries != that1.MaxRetries {
		return fmt.Errorf("MaxRetries this(%v) Not Equal that(%v)", this.MaxRetries, that1.MaxRetries)
	}
	if this.PeriodExponent != that1.PeriodExponent {
		return fmt.Errorf("PeriodExponent this(%v) Not Equal that(%v)", this.PeriodExponent, that1.PeriodExponent)
	}
	return nil
}
func (this *MACCommand_ForceRejoinReq) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_ForceRejoinReq)
	if !ok {
		that2, ok := that.(MACCommand_ForceRejoinReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.RejoinType != that1.RejoinType {
		return false
	}
	if this.DataRateIndex != that1.DataRateIndex {
		return false
	}
	if this.MaxRetries != that1.MaxRetries {
		return false
	}
	if this.PeriodExponent != that1.PeriodExponent {
		return false
	}
	return true
}
func (this *MACCommand_RejoinParamSetupReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_RejoinParamSetupReq)
	if !ok {
		that2, ok := that.(MACCommand_RejoinParamSetupReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_RejoinParamSetupReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_RejoinParamSetupReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_RejoinParamSetupReq but is not nil && this == nil")
	}
	if this.MaxCountExponent != that1.MaxCountExponent {
		return fmt.Errorf("MaxCountExponent this(%v) Not Equal that(%v)", this.MaxCountExponent, that1.MaxCountExponent)
	}
	if this.MaxTimeExponent != that1.MaxTimeExponent {
		return fmt.Errorf("MaxTimeExponent this(%v) Not Equal that(%v)", this.MaxTimeExponent, that1.MaxTimeExponent)
	}
	return nil
}
func (this *MACCommand_RejoinParamSetupReq) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_RejoinParamSetupReq)
	if !ok {
		that2, ok := that.(MACCommand_RejoinParamSetupReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.MaxCountExponent != that1.MaxCountExponent {
		return false
	}
	if this.MaxTimeExponent != that1.MaxTimeExponent {
		return false
	}
	return true
}
func (this *MACCommand_RejoinParamSetupAns) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_RejoinParamSetupAns)
	if !ok {
		that2, ok := that.(MACCommand_RejoinParamSetupAns)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_RejoinParamSetupAns")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_RejoinParamSetupAns but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_RejoinParamSetupAns but is not nil && this == nil")
	}
	if this.MaxTimeExponentAck != that1.MaxTimeExponentAck {
		return fmt.Errorf("MaxTimeExponentAck this(%v) Not Equal that(%v)", this.MaxTimeExponentAck, that1.MaxTimeExponentAck)
	}
	return nil
}
func (this *MACCommand_RejoinParamSetupAns) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_RejoinParamSetupAns)
	if !ok {
		that2, ok := that.(MACCommand_RejoinParamSetupAns)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.MaxTimeExponentAck != that1.MaxTimeExponentAck {
		return false
	}
	return true
}
func (this *MACCommand_PingSlotInfoReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_PingSlotInfoReq)
	if !ok {
		that2, ok := that.(MACCommand_PingSlotInfoReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_PingSlotInfoReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_PingSlotInfoReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_PingSlotInfoReq but is not nil && this == nil")
	}
	if this.Period != that1.Period {
		return fmt.Errorf("Period this(%v) Not Equal that(%v)", this.Period, that1.Period)
	}
	return nil
}
func (this *MACCommand_PingSlotInfoReq) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_PingSlotInfoReq)
	if !ok {
		that2, ok := that.(MACCommand_PingSlotInfoReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Period != that1.Period {
		return false
	}
	return true
}
func (this *MACCommand_PingSlotChannelReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_PingSlotChannelReq)
	if !ok {
		that2, ok := that.(MACCommand_PingSlotChannelReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_PingSlotChannelReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_PingSlotChannelReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_PingSlotChannelReq but is not nil && this == nil")
	}
	if this.Frequency != that1.Frequency {
		return fmt.Errorf("Frequency this(%v) Not Equal that(%v)", this.Frequency, that1.Frequency)
	}
	if this.DataRateIndex != that1.DataRateIndex {
		return fmt.Errorf("DataRateIndex this(%v) Not Equal that(%v)", this.DataRateIndex, that1.DataRateIndex)
	}
	return nil
}
func (this *MACCommand_PingSlotChannelReq) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_PingSlotChannelReq)
	if !ok {
		that2, ok := that.(MACCommand_PingSlotChannelReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Frequency != that1.Frequency {
		return false
	}
	if this.DataRateIndex != that1.DataRateIndex {
		return false
	}
	return true
}
func (this *MACCommand_PingSlotChannelAns) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_PingSlotChannelAns)
	if !ok {
		that2, ok := that.(MACCommand_PingSlotChannelAns)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_PingSlotChannelAns")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_PingSlotChannelAns but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_PingSlotChannelAns but is not nil && this == nil")
	}
	if this.FrequencyAck != that1.FrequencyAck {
		return fmt.Errorf("FrequencyAck this(%v) Not Equal that(%v)", this.FrequencyAck, that1.FrequencyAck)
	}
	if this.DataRateIndexAck != that1.DataRateIndexAck {
		return fmt.Errorf("DataRateIndexAck this(%v) Not Equal that(%v)", this.DataRateIndexAck, that1.DataRateIndexAck)
	}
	return nil
}
func (this *MACCommand_PingSlotChannelAns) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_PingSlotChannelAns)
	if !ok {
		that2, ok := that.(MACCommand_PingSlotChannelAns)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.FrequencyAck != that1.FrequencyAck {
		return false
	}
	if this.DataRateIndexAck != that1.DataRateIndexAck {
		return false
	}
	return true
}
func (this *MACCommand_BeaconTimingAns) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_BeaconTimingAns)
	if !ok {
		that2, ok := that.(MACCommand_BeaconTimingAns)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_BeaconTimingAns")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_BeaconTimingAns but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_BeaconTimingAns but is not nil && this == nil")
	}
	if this.Delay != that1.Delay {
		return fmt.Errorf("Delay this(%v) Not Equal that(%v)", this.Delay, that1.Delay)
	}
	if this.ChannelIndex != that1.ChannelIndex {
		return fmt.Errorf("ChannelIndex this(%v) Not Equal that(%v)", this.ChannelIndex, that1.ChannelIndex)
	}
	return nil
}
func (this *MACCommand_BeaconTimingAns) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_BeaconTimingAns)
	if !ok {
		that2, ok := that.(MACCommand_BeaconTimingAns)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Delay != that1.Delay {
		return false
	}
	if this.ChannelIndex != that1.ChannelIndex {
		return false
	}
	return true
}
func (this *MACCommand_BeaconFreqReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_BeaconFreqReq)
	if !ok {
		that2, ok := that.(MACCommand_BeaconFreqReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_BeaconFreqReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_BeaconFreqReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_BeaconFreqReq but is not nil && this == nil")
	}
	if this.Frequency != that1.Frequency {
		return fmt.Errorf("Frequency this(%v) Not Equal that(%v)", this.Frequency, that1.Frequency)
	}
	return nil
}
func (this *MACCommand_BeaconFreqReq) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_BeaconFreqReq)
	if !ok {
		that2, ok := that.(MACCommand_BeaconFreqReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Frequency != that1.Frequency {
		return false
	}
	return true
}
func (this *MACCommand_BeaconFreqAns) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_BeaconFreqAns)
	if !ok {
		that2, ok := that.(MACCommand_BeaconFreqAns)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_BeaconFreqAns")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_BeaconFreqAns but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_BeaconFreqAns but is not nil && this == nil")
	}
	if this.FrequencyAck != that1.FrequencyAck {
		return fmt.Errorf("FrequencyAck this(%v) Not Equal that(%v)", this.FrequencyAck, that1.FrequencyAck)
	}
	return nil
}
func (this *MACCommand_BeaconFreqAns) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_BeaconFreqAns)
	if !ok {
		that2, ok := that.(MACCommand_BeaconFreqAns)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.FrequencyAck != that1.FrequencyAck {
		return false
	}
	return true
}
func (this *MACCommand_DeviceModeInd) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_DeviceModeInd)
	if !ok {
		that2, ok := that.(MACCommand_DeviceModeInd)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_DeviceModeInd")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_DeviceModeInd but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_DeviceModeInd but is not nil && this == nil")
	}
	if this.Class != that1.Class {
		return fmt.Errorf("Class this(%v) Not Equal that(%v)", this.Class, that1.Class)
	}
	return nil
}
func (this *MACCommand_DeviceModeInd) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_DeviceModeInd)
	if !ok {
		that2, ok := that.(MACCommand_DeviceModeInd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Class != that1.Class {
		return false
	}
	return true
}
func (this *MACCommand_DeviceModeConf) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand_DeviceModeConf)
	if !ok {
		that2, ok := that.(MACCommand_DeviceModeConf)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand_DeviceModeConf")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand_DeviceModeConf but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand_DeviceModeConf but is not nil && this == nil")
	}
	if this.Class != that1.Class {
		return fmt.Errorf("Class this(%v) Not Equal that(%v)", this.Class, that1.Class)
	}
	return nil
}
func (this *MACCommand_DeviceModeConf) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MACCommand_DeviceModeConf)
	if !ok {
		that2, ok := that.(MACCommand_DeviceModeConf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Class != that1.Class {
		return false
	}
	return true
}
func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.MHDR.Size()))
	n1, err := m.MHDR.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.MIC) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.MIC)))
		i += copy(dAtA[i:], m.MIC)
	}
	if m.Payload != nil {
		nn2, err := m.Payload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	return i, nil
}

func (m *Message_MACPayload) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MACPayload != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.MACPayload.Size()))
		n3, err := m.MACPayload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *Message_JoinRequestPayload) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.JoinRequestPayload != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.JoinRequestPayload.Size()))
		n4, err := m.JoinRequestPayload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *Message_JoinAcceptPayload) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.JoinAcceptPayload != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.JoinAcceptPayload.Size()))
		n5, err := m.JoinAcceptPayload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *Message_RejoinRequestPayload) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RejoinRequestPayload != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.RejoinRequestPayload.Size()))
		n6, err := m.RejoinRequestPayload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *MHDR) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MHDR) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.MType))
	}
	if m.Major != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Major))
	}
	return i, nil
}

func (m *MACPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.FHDR.Size()))
	n7, err := m.FHDR.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	if m.FPort != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.FPort))
	}
	if len(m.FRMPayload) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.FRMPayload)))
		i += copy(dAtA[i:], m.FRMPayload)
	}
	return i, nil
}

func (m *FHDR) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FHDR) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.DevAddr.Size()))
	n8, err := m.DevAddr.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	dAtA[i] = 0x12
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.FCtrl.Size()))
	n9, err := m.FCtrl.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	if m.FCnt != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.FCnt))
	}
	if len(m.FOpts) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.FOpts)))
		i += copy(dAtA[i:], m.FOpts)
	}
	return i, nil
}

func (m *FCtrl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FCtrl) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ADR {
		dAtA[i] = 0x8
		i++
		if m.ADR {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ADRAckReq {
		dAtA[i] = 0x10
		i++
		if m.ADRAckReq {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Ack {
		dAtA[i] = 0x18
		i++
		if m.Ack {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.FPending {
		dAtA[i] = 0x20
		i++
		if m.FPending {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ClassB {
		dAtA[i] = 0x28
		i++
		if m.ClassB {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *JoinRequestPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinRequestPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.JoinEUI.Size()))
	n10, err := m.JoinEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	dAtA[i] = 0x12
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.DevEUI.Size()))
	n11, err := m.DevEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	dAtA[i] = 0x1a
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.DevNonce.Size()))
	n12, err := m.DevNonce.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	return i, nil
}

func (m *RejoinRequestPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RejoinRequestPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RejoinType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.RejoinType))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.NetID.Size()))
	n13, err := m.NetID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	dAtA[i] = 0x1a
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.JoinEUI.Size()))
	n14, err := m.JoinEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	dAtA[i] = 0x22
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.DevEUI.Size()))
	n15, err := m.DevEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	if m.RejoinCnt != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.RejoinCnt))
	}
	return i, nil
}

func (m *JoinAcceptPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinAcceptPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Encrypted) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.Encrypted)))
		i += copy(dAtA[i:], m.Encrypted)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.JoinNonce.Size()))
	n16, err := m.JoinNonce.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	dAtA[i] = 0x1a
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.NetID.Size()))
	n17, err := m.NetID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n17
	dAtA[i] = 0x22
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.DevAddr.Size()))
	n18, err := m.DevAddr.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n18
	dAtA[i] = 0x2a
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.DLSettings.Size()))
	n19, err := m.DLSettings.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n19
	if m.RxDelay != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.RxDelay))
	}
	if m.CFList != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.CFList.Size()))
		n20, err := m.CFList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}

func (m *DLSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DLSettings) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rx1DROffset != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Rx1DROffset))
	}
	if m.Rx2DR != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Rx2DR))
	}
	if m.OptNeg {
		dAtA[i] = 0x18
		i++
		if m.OptNeg {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CFList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CFList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Type))
	}
	if len(m.Freq) > 0 {
		dAtA22 := make([]byte, len(m.Freq)*10)
		var j21 int
		for _, num := range m.Freq {
			for num >= 1<<7 {
				dAtA22[j21] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j21++
			}
			dAtA22[j21] = uint8(num)
			j21++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(j21))
		i += copy(dAtA[i:], dAtA22[:j21])
	}
	if len(m.ChMasks) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.ChMasks)))
		for _, b := range m.ChMasks {
			if b {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	return i, nil
}

func (m *TxSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxSettings) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Modulation != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Modulation))
	}
	if m.DataRateIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.DataRateIndex))
	}
	if m.Bandwidth != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Bandwidth))
	}
	if m.SpreadingFactor != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.SpreadingFactor))
	}
	if m.BitRate != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.BitRate))
	}
	if len(m.CodingRate) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.CodingRate)))
		i += copy(dAtA[i:], m.CodingRate)
	}
	if m.Frequency != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Frequency))
	}
	if m.TxPower != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.TxPower))
	}
	if m.PolarizationInversion {
		dAtA[i] = 0x48
		i++
		if m.PolarizationInversion {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *MACCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		nn23, err := m.Payload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn23
	}
	return i, nil
}

func (m *MACCommand_CID) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.CID))
	return i, nil
}
func (m *MACCommand_Proprietary_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Proprietary != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Proprietary.Size()))
		n24, err := m.Proprietary.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}
func (m *MACCommand_ResetInd_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ResetInd != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.ResetInd.Size()))
		n25, err := m.ResetInd.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}
func (m *MACCommand_ResetConf_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ResetConf != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.ResetConf.Size()))
		n26, err := m.ResetConf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}
func (m *MACCommand_LinkCheckAns_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LinkCheckAns != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.LinkCheckAns.Size()))
		n27, err := m.LinkCheckAns.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}
func (m *MACCommand_LinkAdrReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LinkAdrReq != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.LinkAdrReq.Size()))
		n28, err := m.LinkAdrReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}
func (m *MACCommand_LinkAdrAns) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LinkAdrAns != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.LinkAdrAns.Size()))
		n29, err := m.LinkAdrAns.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}
func (m *MACCommand_DutyCycleReq_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DutyCycleReq != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.DutyCycleReq.Size()))
		n30, err := m.DutyCycleReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	return i, nil
}
func (m *MACCommand_RxParamSetupReq_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RxParamSetupReq != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.RxParamSetupReq.Size()))
		n31, err := m.RxParamSetupReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}
func (m *MACCommand_RxParamSetupAns_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RxParamSetupAns != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.RxParamSetupAns.Size()))
		n32, err := m.RxParamSetupAns.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}
func (m *MACCommand_DevStatusAns_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DevStatusAns != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.DevStatusAns.Size()))
		n33, err := m.DevStatusAns.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}
func (m *MACCommand_NewChannelReq_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NewChannelReq != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.NewChannelReq.Size()))
		n34, err := m.NewChannelReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	return i, nil
}
func (m *MACCommand_NewChannelAns_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NewChannelAns != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.NewChannelAns.Size()))
		n35, err := m.NewChannelAns.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	return i, nil
}
func (m *MACCommand_DlChannelReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DlChannelReq != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.DlChannelReq.Size()))
		n36, err := m.DlChannelReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	return i, nil
}
func (m *MACCommand_DlChannelAns) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DlChannelAns != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.DlChannelAns.Size()))
		n37, err := m.DlChannelAns.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	return i, nil
}
func (m *MACCommand_RxTimingSetupReq_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RxTimingSetupReq != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.RxTimingSetupReq.Size()))
		n38, err := m.RxTimingSetupReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	return i, nil
}
func (m *MACCommand_TxParamSetupReq_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TxParamSetupReq != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.TxParamSetupReq.Size()))
		n39, err := m.TxParamSetupReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	return i, nil
}
func (m *MACCommand_RekeyInd_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RekeyInd != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.RekeyInd.Size()))
		n40, err := m.RekeyInd.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	return i, nil
}
func (m *MACCommand_RekeyConf_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RekeyConf != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.RekeyConf.Size()))
		n41, err := m.RekeyConf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	return i, nil
}
func (m *MACCommand_AdrParamSetupReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AdrParamSetupReq != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.AdrParamSetupReq.Size()))
		n42, err := m.AdrParamSetupReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	return i, nil
}
func (m *MACCommand_DeviceTimeAns_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DeviceTimeAns != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.DeviceTimeAns.Size()))
		n43, err := m.DeviceTimeAns.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	return i, nil
}
func (m *MACCommand_ForceRejoinReq_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ForceRejoinReq != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.ForceRejoinReq.Size()))
		n44, err := m.ForceRejoinReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	return i, nil
}
func (m *MACCommand_RejoinParamSetupReq_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RejoinParamSetupReq != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.RejoinParamSetupReq.Size()))
		n45, err := m.RejoinParamSetupReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	return i, nil
}
func (m *MACCommand_RejoinParamSetupAns_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RejoinParamSetupAns != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.RejoinParamSetupAns.Size()))
		n46, err := m.RejoinParamSetupAns.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	return i, nil
}
func (m *MACCommand_PingSlotInfoReq_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PingSlotInfoReq != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.PingSlotInfoReq.Size()))
		n47, err := m.PingSlotInfoReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	return i, nil
}
func (m *MACCommand_PingSlotChannelReq_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PingSlotChannelReq != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.PingSlotChannelReq.Size()))
		n48, err := m.PingSlotChannelReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	return i, nil
}
func (m *MACCommand_PingSlotChannelAns_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PingSlotChannelAns != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.PingSlotChannelAns.Size()))
		n49, err := m.PingSlotChannelAns.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n49
	}
	return i, nil
}
func (m *MACCommand_BeaconTimingAns_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BeaconTimingAns != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.BeaconTimingAns.Size()))
		n50, err := m.BeaconTimingAns.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n50
	}
	return i, nil
}
func (m *MACCommand_BeaconFreqReq_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BeaconFreqReq != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.BeaconFreqReq.Size()))
		n51, err := m.BeaconFreqReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n51
	}
	return i, nil
}
func (m *MACCommand_BeaconFreqAns_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BeaconFreqAns != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.BeaconFreqAns.Size()))
		n52, err := m.BeaconFreqAns.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n52
	}
	return i, nil
}
func (m *MACCommand_DeviceModeInd_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DeviceModeInd != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.DeviceModeInd.Size()))
		n53, err := m.DeviceModeInd.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n53
	}
	return i, nil
}
func (m *MACCommand_DeviceModeConf_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DeviceModeConf != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.DeviceModeConf.Size()))
		n54, err := m.DeviceModeConf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n54
	}
	return i, nil
}
func (m *MACCommand_Proprietary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_Proprietary) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.CID))
	}
	if len(m.RawPayload) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.RawPayload)))
		i += copy(dAtA[i:], m.RawPayload)
	}
	return i, nil
}

func (m *MACCommand_ResetInd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_ResetInd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MinorVersion != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.MinorVersion))
	}
	return i, nil
}

func (m *MACCommand_ResetConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_ResetConf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MinorVersion != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.MinorVersion))
	}
	return i, nil
}

func (m *MACCommand_LinkCheckAns) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_LinkCheckAns) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Margin != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Margin))
	}
	if m.GatewayCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.GatewayCount))
	}
	return i, nil
}

func (m *MACCommand_LinkADRReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_LinkADRReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DataRateIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.DataRateIndex))
	}
	if m.TxPowerIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.TxPowerIndex))
	}
	if len(m.ChannelMask) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.ChannelMask)))
		for _, b := range m.ChannelMask {
			if b {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	if m.ChannelMaskControl != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.ChannelMaskControl))
	}
	if m.NbTrans != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.NbTrans))
	}
	return i, nil
}

func (m *MACCommand_LinkADRAns) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_LinkADRAns) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelMaskAck {
		dAtA[i] = 0x8
		i++
		if m.ChannelMaskAck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DataRateIndexAck {
		dAtA[i] = 0x10
		i++
		if m.DataRateIndexAck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TxPowerIndexAck {
		dAtA[i] = 0x18
		i++
		if m.TxPowerIndexAck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *MACCommand_DutyCycleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_DutyCycleReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxDutyCycle != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.MaxDutyCycle))
	}
	return i, nil
}

func (m *MACCommand_RxParamSetupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_RxParamSetupReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rx2DataRateIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Rx2DataRateIndex))
	}
	if m.Rx1DataRateOffset != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Rx1DataRateOffset))
	}
	if m.Rx2Frequency != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Rx2Frequency))
	}
	return i, nil
}

func (m *MACCommand_RxParamSetupAns) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_RxParamSetupAns) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rx2DataRateIndexAck {
		dAtA[i] = 0x8
		i++
		if m.Rx2DataRateIndexAck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Rx1DataRateOffsetAck {
		dAtA[i] = 0x10
		i++
		if m.Rx1DataRateOffsetAck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Rx2FrequencyAck {
		dAtA[i] = 0x18
		i++
		if m.Rx2FrequencyAck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *MACCommand_DevStatusAns) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_DevStatusAns) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Battery != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Battery))
	}
	if m.Margin != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Margin))
	}
	return i, nil
}

func (m *MACCommand_NewChannelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_NewChannelReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.ChannelIndex))
	}
	if m.Frequency != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Frequency))
	}
	if m.MinDataRateIndex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.MinDataRateIndex))
	}
	if m.MaxDataRateIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.MaxDataRateIndex))
	}
	return i, nil
}

func (m *MACCommand_NewChannelAns) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_NewChannelAns) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FrequencyAck {
		dAtA[i] = 0x8
		i++
		if m.FrequencyAck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DataRateAck {
		dAtA[i] = 0x10
		i++
		if m.DataRateAck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *MACCommand_DLChannelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_DLChannelReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.ChannelIndex))
	}
	if m.Frequency != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Frequency))
	}
	return i, nil
}

func (m *MACCommand_DLChannelAns) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_DLChannelAns) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelIndexAck {
		dAtA[i] = 0x8
		i++
		if m.ChannelIndexAck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.FrequencyAck {
		dAtA[i] = 0x10
		i++
		if m.FrequencyAck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *MACCommand_RxTimingSetupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_RxTimingSetupReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Delay != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Delay))
	}
	return i, nil
}

func (m *MACCommand_TxParamSetupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_TxParamSetupReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxEIRPIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.MaxEIRPIndex))
	}
	if m.UplinkDwellTime {
		dAtA[i] = 0x10
		i++
		if m.UplinkDwellTime {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DownlinkDwellTime {
		dAtA[i] = 0x18
		i++
		if m.DownlinkDwellTime {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *MACCommand_RekeyInd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_RekeyInd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MinorVersion != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.MinorVersion))
	}
	return i, nil
}

func (m *MACCommand_RekeyConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_RekeyConf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MinorVersion != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.MinorVersion))
	}
	return i, nil
}

func (m *MACCommand_ADRParamSetupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_ADRParamSetupReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ADRAckLimitExponent != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.ADRAckLimitExponent))
	}
	if m.ADRAckDelayExponent != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.ADRAckDelayExponent))
	}
	return i, nil
}

func (m *MACCommand_DeviceTimeAns) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_DeviceTimeAns) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.Time)))
		n55, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.Time, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n55
	}
	return i, nil
}

func (m *MACCommand_ForceRejoinReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_ForceRejoinReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RejoinType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.RejoinType))
	}
	if m.DataRateIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.DataRateIndex))
	}
	if m.MaxRetries != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.MaxRetries))
	}
	if m.PeriodExponent != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.PeriodExponent))
	}
	return i, nil
}

func (m *MACCommand_RejoinParamSetupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_RejoinParamSetupReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxCountExponent != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.MaxCountExponent))
	}
	if m.MaxTimeExponent != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.MaxTimeExponent))
	}
	return i, nil
}

func (m *MACCommand_RejoinParamSetupAns) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_RejoinParamSetupAns) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxTimeExponentAck {
		dAtA[i] = 0x8
		i++
		if m.MaxTimeExponentAck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *MACCommand_PingSlotInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_PingSlotInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Period != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Period))
	}
	return i, nil
}

func (m *MACCommand_PingSlotChannelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_PingSlotChannelReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Frequency != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Frequency))
	}
	if m.DataRateIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.DataRateIndex))
	}
	return i, nil
}

func (m *MACCommand_PingSlotChannelAns) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_PingSlotChannelAns) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FrequencyAck {
		dAtA[i] = 0x8
		i++
		if m.FrequencyAck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DataRateIndexAck {
		dAtA[i] = 0x10
		i++
		if m.DataRateIndexAck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *MACCommand_BeaconTimingAns) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_BeaconTimingAns) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Delay != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Delay))
	}
	if m.ChannelIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.ChannelIndex))
	}
	return i, nil
}

func (m *MACCommand_BeaconFreqReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_BeaconFreqReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Frequency != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Frequency))
	}
	return i, nil
}

func (m *MACCommand_BeaconFreqAns) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_BeaconFreqAns) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FrequencyAck {
		dAtA[i] = 0x8
		i++
		if m.FrequencyAck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *MACCommand_DeviceModeInd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_DeviceModeInd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Class != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Class))
	}
	return i, nil
}

func (m *MACCommand_DeviceModeConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand_DeviceModeConf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Class != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Class))
	}
	return i, nil
}

func encodeVarintLorawan(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedMHDR(r randyLorawan, easy bool) *MHDR {
	this := &MHDR{}
	this.MType = MType([]int32{0, 1, 2, 3, 4, 5, 6}[r.Intn(7)])
	this.Major = Major([]int32{0}[r.Intn(1)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFCtrl(r randyLorawan, easy bool) *FCtrl {
	this := &FCtrl{}
	this.ADR = bool(bool(r.Intn(2) == 0))
	this.ADRAckReq = bool(bool(r.Intn(2) == 0))
	this.Ack = bool(bool(r.Intn(2) == 0))
	this.FPending = bool(bool(r.Intn(2) == 0))
	this.ClassB = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTxSettings(r randyLorawan, easy bool) *TxSettings {
	this := &TxSettings{}
	this.Modulation = Modulation([]int32{0, 1}[r.Intn(2)])
	this.DataRateIndex = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.DataRateIndex *= -1
	}
	this.Bandwidth = uint32(r.Uint32())
	this.SpreadingFactor = uint32(r.Uint32())
	this.BitRate = uint32(r.Uint32())
	this.CodingRate = string(randStringLorawan(r))
	this.Frequency = uint64(uint64(r.Uint32()))
	this.TxPower = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.TxPower *= -1
	}
	this.PolarizationInversion = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand(r randyLorawan, easy bool) *MACCommand {
	this := &MACCommand{}
	oneofNumber_Payload := []int32{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32}[r.Intn(32)]
	switch oneofNumber_Payload {
	case 1:
		this.Payload = NewPopulatedMACCommand_CID(r, easy)
	case 2:
		this.Payload = NewPopulatedMACCommand_Proprietary_(r, easy)
	case 3:
		this.Payload = NewPopulatedMACCommand_ResetInd_(r, easy)
	case 4:
		this.Payload = NewPopulatedMACCommand_ResetConf_(r, easy)
	case 5:
		this.Payload = NewPopulatedMACCommand_LinkCheckAns_(r, easy)
	case 6:
		this.Payload = NewPopulatedMACCommand_LinkAdrReq(r, easy)
	case 7:
		this.Payload = NewPopulatedMACCommand_LinkAdrAns(r, easy)
	case 8:
		this.Payload = NewPopulatedMACCommand_DutyCycleReq_(r, easy)
	case 9:
		this.Payload = NewPopulatedMACCommand_RxParamSetupReq_(r, easy)
	case 10:
		this.Payload = NewPopulatedMACCommand_RxParamSetupAns_(r, easy)
	case 11:
		this.Payload = NewPopulatedMACCommand_DevStatusAns_(r, easy)
	case 12:
		this.Payload = NewPopulatedMACCommand_NewChannelReq_(r, easy)
	case 13:
		this.Payload = NewPopulatedMACCommand_NewChannelAns_(r, easy)
	case 14:
		this.Payload = NewPopulatedMACCommand_DlChannelReq(r, easy)
	case 15:
		this.Payload = NewPopulatedMACCommand_DlChannelAns(r, easy)
	case 16:
		this.Payload = NewPopulatedMACCommand_RxTimingSetupReq_(r, easy)
	case 17:
		this.Payload = NewPopulatedMACCommand_TxParamSetupReq_(r, easy)
	case 18:
		this.Payload = NewPopulatedMACCommand_RekeyInd_(r, easy)
	case 19:
		this.Payload = NewPopulatedMACCommand_RekeyConf_(r, easy)
	case 20:
		this.Payload = NewPopulatedMACCommand_AdrParamSetupReq(r, easy)
	case 21:
		this.Payload = NewPopulatedMACCommand_DeviceTimeAns_(r, easy)
	case 22:
		this.Payload = NewPopulatedMACCommand_ForceRejoinReq_(r, easy)
	case 23:
		this.Payload = NewPopulatedMACCommand_RejoinParamSetupReq_(r, easy)
	case 24:
		this.Payload = NewPopulatedMACCommand_RejoinParamSetupAns_(r, easy)
	case 25:
		this.Payload = NewPopulatedMACCommand_PingSlotInfoReq_(r, easy)
	case 26:
		this.Payload = NewPopulatedMACCommand_PingSlotChannelReq_(r, easy)
	case 27:
		this.Payload = NewPopulatedMACCommand_PingSlotChannelAns_(r, easy)
	case 28:
		this.Payload = NewPopulatedMACCommand_BeaconTimingAns_(r, easy)
	case 29:
		this.Payload = NewPopulatedMACCommand_BeaconFreqReq_(r, easy)
	case 30:
		this.Payload = NewPopulatedMACCommand_BeaconFreqAns_(r, easy)
	case 31:
		this.Payload = NewPopulatedMACCommand_DeviceModeInd_(r, easy)
	case 32:
		this.Payload = NewPopulatedMACCommand_DeviceModeConf_(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_CID(r randyLorawan, easy bool) *MACCommand_CID {
	this := &MACCommand_CID{}
	this.CID = MACCommandIdentifier([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 32}[r.Intn(21)])
	return this
}
func NewPopulatedMACCommand_Proprietary_(r randyLorawan, easy bool) *MACCommand_Proprietary_ {
	this := &MACCommand_Proprietary_{}
	this.Proprietary = NewPopulatedMACCommand_Proprietary(r, easy)
	return this
}
func NewPopulatedMACCommand_ResetInd_(r randyLorawan, easy bool) *MACCommand_ResetInd_ {
	this := &MACCommand_ResetInd_{}
	this.ResetInd = NewPopulatedMACCommand_ResetInd(r, easy)
	return this
}
func NewPopulatedMACCommand_ResetConf_(r randyLorawan, easy bool) *MACCommand_ResetConf_ {
	this := &MACCommand_ResetConf_{}
	this.ResetConf = NewPopulatedMACCommand_ResetConf(r, easy)
	return this
}
func NewPopulatedMACCommand_LinkCheckAns_(r randyLorawan, easy bool) *MACCommand_LinkCheckAns_ {
	this := &MACCommand_LinkCheckAns_{}
	this.LinkCheckAns = NewPopulatedMACCommand_LinkCheckAns(r, easy)
	return this
}
func NewPopulatedMACCommand_LinkAdrReq(r randyLorawan, easy bool) *MACCommand_LinkAdrReq {
	this := &MACCommand_LinkAdrReq{}
	this.LinkAdrReq = NewPopulatedMACCommand_LinkADRReq(r, easy)
	return this
}
func NewPopulatedMACCommand_LinkAdrAns(r randyLorawan, easy bool) *MACCommand_LinkAdrAns {
	this := &MACCommand_LinkAdrAns{}
	this.LinkAdrAns = NewPopulatedMACCommand_LinkADRAns(r, easy)
	return this
}
func NewPopulatedMACCommand_DutyCycleReq_(r randyLorawan, easy bool) *MACCommand_DutyCycleReq_ {
	this := &MACCommand_DutyCycleReq_{}
	this.DutyCycleReq = NewPopulatedMACCommand_DutyCycleReq(r, easy)
	return this
}
func NewPopulatedMACCommand_RxParamSetupReq_(r randyLorawan, easy bool) *MACCommand_RxParamSetupReq_ {
	this := &MACCommand_RxParamSetupReq_{}
	this.RxParamSetupReq = NewPopulatedMACCommand_RxParamSetupReq(r, easy)
	return this
}
func NewPopulatedMACCommand_RxParamSetupAns_(r randyLorawan, easy bool) *MACCommand_RxParamSetupAns_ {
	this := &MACCommand_RxParamSetupAns_{}
	this.RxParamSetupAns = NewPopulatedMACCommand_RxParamSetupAns(r, easy)
	return this
}
func NewPopulatedMACCommand_DevStatusAns_(r randyLorawan, easy bool) *MACCommand_DevStatusAns_ {
	this := &MACCommand_DevStatusAns_{}
	this.DevStatusAns = NewPopulatedMACCommand_DevStatusAns(r, easy)
	return this
}
func NewPopulatedMACCommand_NewChannelReq_(r randyLorawan, easy bool) *MACCommand_NewChannelReq_ {
	this := &MACCommand_NewChannelReq_{}
	this.NewChannelReq = NewPopulatedMACCommand_NewChannelReq(r, easy)
	return this
}
func NewPopulatedMACCommand_NewChannelAns_(r randyLorawan, easy bool) *MACCommand_NewChannelAns_ {
	this := &MACCommand_NewChannelAns_{}
	this.NewChannelAns = NewPopulatedMACCommand_NewChannelAns(r, easy)
	return this
}
func NewPopulatedMACCommand_DlChannelReq(r randyLorawan, easy bool) *MACCommand_DlChannelReq {
	this := &MACCommand_DlChannelReq{}
	this.DlChannelReq = NewPopulatedMACCommand_DLChannelReq(r, easy)
	return this
}
func NewPopulatedMACCommand_DlChannelAns(r randyLorawan, easy bool) *MACCommand_DlChannelAns {
	this := &MACCommand_DlChannelAns{}
	this.DlChannelAns = NewPopulatedMACCommand_DLChannelAns(r, easy)
	return this
}
func NewPopulatedMACCommand_RxTimingSetupReq_(r randyLorawan, easy bool) *MACCommand_RxTimingSetupReq_ {
	this := &MACCommand_RxTimingSetupReq_{}
	this.RxTimingSetupReq = NewPopulatedMACCommand_RxTimingSetupReq(r, easy)
	return this
}
func NewPopulatedMACCommand_TxParamSetupReq_(r randyLorawan, easy bool) *MACCommand_TxParamSetupReq_ {
	this := &MACCommand_TxParamSetupReq_{}
	this.TxParamSetupReq = NewPopulatedMACCommand_TxParamSetupReq(r, easy)
	return this
}
func NewPopulatedMACCommand_RekeyInd_(r randyLorawan, easy bool) *MACCommand_RekeyInd_ {
	this := &MACCommand_RekeyInd_{}
	this.RekeyInd = NewPopulatedMACCommand_RekeyInd(r, easy)
	return this
}
func NewPopulatedMACCommand_RekeyConf_(r randyLorawan, easy bool) *MACCommand_RekeyConf_ {
	this := &MACCommand_RekeyConf_{}
	this.RekeyConf = NewPopulatedMACCommand_RekeyConf(r, easy)
	return this
}
func NewPopulatedMACCommand_AdrParamSetupReq(r randyLorawan, easy bool) *MACCommand_AdrParamSetupReq {
	this := &MACCommand_AdrParamSetupReq{}
	this.AdrParamSetupReq = NewPopulatedMACCommand_ADRParamSetupReq(r, easy)
	return this
}
func NewPopulatedMACCommand_DeviceTimeAns_(r randyLorawan, easy bool) *MACCommand_DeviceTimeAns_ {
	this := &MACCommand_DeviceTimeAns_{}
	this.DeviceTimeAns = NewPopulatedMACCommand_DeviceTimeAns(r, easy)
	return this
}
func NewPopulatedMACCommand_ForceRejoinReq_(r randyLorawan, easy bool) *MACCommand_ForceRejoinReq_ {
	this := &MACCommand_ForceRejoinReq_{}
	this.ForceRejoinReq = NewPopulatedMACCommand_ForceRejoinReq(r, easy)
	return this
}
func NewPopulatedMACCommand_RejoinParamSetupReq_(r randyLorawan, easy bool) *MACCommand_RejoinParamSetupReq_ {
	this := &MACCommand_RejoinParamSetupReq_{}
	this.RejoinParamSetupReq = NewPopulatedMACCommand_RejoinParamSetupReq(r, easy)
	return this
}
func NewPopulatedMACCommand_RejoinParamSetupAns_(r randyLorawan, easy bool) *MACCommand_RejoinParamSetupAns_ {
	this := &MACCommand_RejoinParamSetupAns_{}
	this.RejoinParamSetupAns = NewPopulatedMACCommand_RejoinParamSetupAns(r, easy)
	return this
}
func NewPopulatedMACCommand_PingSlotInfoReq_(r randyLorawan, easy bool) *MACCommand_PingSlotInfoReq_ {
	this := &MACCommand_PingSlotInfoReq_{}
	this.PingSlotInfoReq = NewPopulatedMACCommand_PingSlotInfoReq(r, easy)
	return this
}
func NewPopulatedMACCommand_PingSlotChannelReq_(r randyLorawan, easy bool) *MACCommand_PingSlotChannelReq_ {
	this := &MACCommand_PingSlotChannelReq_{}
	this.PingSlotChannelReq = NewPopulatedMACCommand_PingSlotChannelReq(r, easy)
	return this
}
func NewPopulatedMACCommand_PingSlotChannelAns_(r randyLorawan, easy bool) *MACCommand_PingSlotChannelAns_ {
	this := &MACCommand_PingSlotChannelAns_{}
	this.PingSlotChannelAns = NewPopulatedMACCommand_PingSlotChannelAns(r, easy)
	return this
}
func NewPopulatedMACCommand_BeaconTimingAns_(r randyLorawan, easy bool) *MACCommand_BeaconTimingAns_ {
	this := &MACCommand_BeaconTimingAns_{}
	this.BeaconTimingAns = NewPopulatedMACCommand_BeaconTimingAns(r, easy)
	return this
}
func NewPopulatedMACCommand_BeaconFreqReq_(r randyLorawan, easy bool) *MACCommand_BeaconFreqReq_ {
	this := &MACCommand_BeaconFreqReq_{}
	this.BeaconFreqReq = NewPopulatedMACCommand_BeaconFreqReq(r, easy)
	return this
}
func NewPopulatedMACCommand_BeaconFreqAns_(r randyLorawan, easy bool) *MACCommand_BeaconFreqAns_ {
	this := &MACCommand_BeaconFreqAns_{}
	this.BeaconFreqAns = NewPopulatedMACCommand_BeaconFreqAns(r, easy)
	return this
}
func NewPopulatedMACCommand_DeviceModeInd_(r randyLorawan, easy bool) *MACCommand_DeviceModeInd_ {
	this := &MACCommand_DeviceModeInd_{}
	this.DeviceModeInd = NewPopulatedMACCommand_DeviceModeInd(r, easy)
	return this
}
func NewPopulatedMACCommand_DeviceModeConf_(r randyLorawan, easy bool) *MACCommand_DeviceModeConf_ {
	this := &MACCommand_DeviceModeConf_{}
	this.DeviceModeConf = NewPopulatedMACCommand_DeviceModeConf(r, easy)
	return this
}
func NewPopulatedMACCommand_Proprietary(r randyLorawan, easy bool) *MACCommand_Proprietary {
	this := &MACCommand_Proprietary{}
	this.CID = MACCommandIdentifier([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 32}[r.Intn(21)])
	v1 := r.Intn(100)
	this.RawPayload = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.RawPayload[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_ResetInd(r randyLorawan, easy bool) *MACCommand_ResetInd {
	this := &MACCommand_ResetInd{}
	this.MinorVersion = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_ResetConf(r randyLorawan, easy bool) *MACCommand_ResetConf {
	this := &MACCommand_ResetConf{}
	this.MinorVersion = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_LinkCheckAns(r randyLorawan, easy bool) *MACCommand_LinkCheckAns {
	this := &MACCommand_LinkCheckAns{}
	this.Margin = uint32(r.Uint32())
	this.GatewayCount = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_LinkADRReq(r randyLorawan, easy bool) *MACCommand_LinkADRReq {
	this := &MACCommand_LinkADRReq{}
	this.DataRateIndex = uint32(r.Uint32())
	this.TxPowerIndex = uint32(r.Uint32())
	v2 := r.Intn(10)
	this.ChannelMask = make([]bool, v2)
	for i := 0; i < v2; i++ {
		this.ChannelMask[i] = bool(bool(r.Intn(2) == 0))
	}
	this.ChannelMaskControl = uint32(r.Uint32())
	this.NbTrans = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_LinkADRAns(r randyLorawan, easy bool) *MACCommand_LinkADRAns {
	this := &MACCommand_LinkADRAns{}
	this.ChannelMaskAck = bool(bool(r.Intn(2) == 0))
	this.DataRateIndexAck = bool(bool(r.Intn(2) == 0))
	this.TxPowerIndexAck = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_DutyCycleReq(r randyLorawan, easy bool) *MACCommand_DutyCycleReq {
	this := &MACCommand_DutyCycleReq{}
	this.MaxDutyCycle = AggregatedDutyCycle([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}[r.Intn(16)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_RxParamSetupReq(r randyLorawan, easy bool) *MACCommand_RxParamSetupReq {
	this := &MACCommand_RxParamSetupReq{}
	this.Rx2DataRateIndex = uint32(r.Uint32())
	this.Rx1DataRateOffset = uint32(r.Uint32())
	this.Rx2Frequency = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_RxParamSetupAns(r randyLorawan, easy bool) *MACCommand_RxParamSetupAns {
	this := &MACCommand_RxParamSetupAns{}
	this.Rx2DataRateIndexAck = bool(bool(r.Intn(2) == 0))
	this.Rx1DataRateOffsetAck = bool(bool(r.Intn(2) == 0))
	this.Rx2FrequencyAck = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_DevStatusAns(r randyLorawan, easy bool) *MACCommand_DevStatusAns {
	this := &MACCommand_DevStatusAns{}
	this.Battery = uint32(r.Uint32())
	this.Margin = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Margin *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_NewChannelReq(r randyLorawan, easy bool) *MACCommand_NewChannelReq {
	this := &MACCommand_NewChannelReq{}
	this.ChannelIndex = uint32(r.Uint32())
	this.Frequency = uint64(uint64(r.Uint32()))
	this.MinDataRateIndex = uint32(r.Uint32())
	this.MaxDataRateIndex = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_NewChannelAns(r randyLorawan, easy bool) *MACCommand_NewChannelAns {
	this := &MACCommand_NewChannelAns{}
	this.FrequencyAck = bool(bool(r.Intn(2) == 0))
	this.DataRateAck = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_DLChannelReq(r randyLorawan, easy bool) *MACCommand_DLChannelReq {
	this := &MACCommand_DLChannelReq{}
	this.ChannelIndex = uint32(r.Uint32())
	this.Frequency = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_DLChannelAns(r randyLorawan, easy bool) *MACCommand_DLChannelAns {
	this := &MACCommand_DLChannelAns{}
	this.ChannelIndexAck = bool(bool(r.Intn(2) == 0))
	this.FrequencyAck = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_RxTimingSetupReq(r randyLorawan, easy bool) *MACCommand_RxTimingSetupReq {
	this := &MACCommand_RxTimingSetupReq{}
	this.Delay = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_TxParamSetupReq(r randyLorawan, easy bool) *MACCommand_TxParamSetupReq {
	this := &MACCommand_TxParamSetupReq{}
	this.MaxEIRPIndex = uint32(r.Uint32())
	this.UplinkDwellTime = bool(bool(r.Intn(2) == 0))
	this.DownlinkDwellTime = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_RekeyInd(r randyLorawan, easy bool) *MACCommand_RekeyInd {
	this := &MACCommand_RekeyInd{}
	this.MinorVersion = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_RekeyConf(r randyLorawan, easy bool) *MACCommand_RekeyConf {
	this := &MACCommand_RekeyConf{}
	this.MinorVersion = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_ADRParamSetupReq(r randyLorawan, easy bool) *MACCommand_ADRParamSetupReq {
	this := &MACCommand_ADRParamSetupReq{}
	this.ADRAckLimitExponent = uint32(r.Uint32())
	this.ADRAckDelayExponent = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_DeviceTimeAns(r randyLorawan, easy bool) *MACCommand_DeviceTimeAns {
	this := &MACCommand_DeviceTimeAns{}
	if r.Intn(10) != 0 {
		this.Time = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_ForceRejoinReq(r randyLorawan, easy bool) *MACCommand_ForceRejoinReq {
	this := &MACCommand_ForceRejoinReq{}
	this.RejoinType = uint32(r.Uint32())
	this.DataRateIndex = uint32(r.Uint32())
	this.MaxRetries = uint32(r.Uint32())
	this.PeriodExponent = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_RejoinParamSetupReq(r randyLorawan, easy bool) *MACCommand_RejoinParamSetupReq {
	this := &MACCommand_RejoinParamSetupReq{}
	this.MaxCountExponent = uint32(r.Uint32())
	this.MaxTimeExponent = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_RejoinParamSetupAns(r randyLorawan, easy bool) *MACCommand_RejoinParamSetupAns {
	this := &MACCommand_RejoinParamSetupAns{}
	this.MaxTimeExponentAck = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_PingSlotInfoReq(r randyLorawan, easy bool) *MACCommand_PingSlotInfoReq {
	this := &MACCommand_PingSlotInfoReq{}
	this.Period = PingSlotPeriod([]int32{0, 1, 2, 3, 4, 5, 6, 7}[r.Intn(8)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_PingSlotChannelReq(r randyLorawan, easy bool) *MACCommand_PingSlotChannelReq {
	this := &MACCommand_PingSlotChannelReq{}
	this.Frequency = uint64(uint64(r.Uint32()))
	this.DataRateIndex = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_PingSlotChannelAns(r randyLorawan, easy bool) *MACCommand_PingSlotChannelAns {
	this := &MACCommand_PingSlotChannelAns{}
	this.FrequencyAck = bool(bool(r.Intn(2) == 0))
	this.DataRateIndexAck = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_BeaconTimingAns(r randyLorawan, easy bool) *MACCommand_BeaconTimingAns {
	this := &MACCommand_BeaconTimingAns{}
	this.Delay = uint32(r.Uint32())
	this.ChannelIndex = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_BeaconFreqReq(r randyLorawan, easy bool) *MACCommand_BeaconFreqReq {
	this := &MACCommand_BeaconFreqReq{}
	this.Frequency = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_BeaconFreqAns(r randyLorawan, easy bool) *MACCommand_BeaconFreqAns {
	this := &MACCommand_BeaconFreqAns{}
	this.FrequencyAck = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_DeviceModeInd(r randyLorawan, easy bool) *MACCommand_DeviceModeInd {
	this := &MACCommand_DeviceModeInd{}
	this.Class = Class([]int32{0, 1, 2}[r.Intn(3)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand_DeviceModeConf(r randyLorawan, easy bool) *MACCommand_DeviceModeConf {
	this := &MACCommand_DeviceModeConf{}
	this.Class = Class([]int32{0, 1, 2}[r.Intn(3)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyLorawan interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneLorawan(r randyLorawan) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringLorawan(r randyLorawan) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneLorawan(r)
	}
	return string(tmps)
}
func randUnrecognizedLorawan(r randyLorawan, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldLorawan(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldLorawan(dAtA []byte, r randyLorawan, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateLorawan(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulateLorawan(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulateLorawan(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateLorawan(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateLorawan(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateLorawan(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateLorawan(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Message) Size() (n int) {
	var l int
	_ = l
	l = m.MHDR.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = len(m.MIC)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	return n
}

func (m *Message_MACPayload) Size() (n int) {
	var l int
	_ = l
	if m.MACPayload != nil {
		l = m.MACPayload.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *Message_JoinRequestPayload) Size() (n int) {
	var l int
	_ = l
	if m.JoinRequestPayload != nil {
		l = m.JoinRequestPayload.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *Message_JoinAcceptPayload) Size() (n int) {
	var l int
	_ = l
	if m.JoinAcceptPayload != nil {
		l = m.JoinAcceptPayload.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *Message_RejoinRequestPayload) Size() (n int) {
	var l int
	_ = l
	if m.RejoinRequestPayload != nil {
		l = m.RejoinRequestPayload.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MHDR) Size() (n int) {
	var l int
	_ = l
	if m.MType != 0 {
		n += 1 + sovLorawan(uint64(m.MType))
	}
	if m.Major != 0 {
		n += 1 + sovLorawan(uint64(m.Major))
	}
	return n
}

func (m *MACPayload) Size() (n int) {
	var l int
	_ = l
	l = m.FHDR.Size()
	n += 1 + l + sovLorawan(uint64(l))
	if m.FPort != 0 {
		n += 1 + sovLorawan(uint64(m.FPort))
	}
	l = len(m.FRMPayload)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}

func (m *FHDR) Size() (n int) {
	var l int
	_ = l
	l = m.DevAddr.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.FCtrl.Size()
	n += 1 + l + sovLorawan(uint64(l))
	if m.FCnt != 0 {
		n += 1 + sovLorawan(uint64(m.FCnt))
	}
	l = len(m.FOpts)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}

func (m *FCtrl) Size() (n int) {
	var l int
	_ = l
	if m.ADR {
		n += 2
	}
	if m.ADRAckReq {
		n += 2
	}
	if m.Ack {
		n += 2
	}
	if m.FPending {
		n += 2
	}
	if m.ClassB {
		n += 2
	}
	return n
}

func (m *JoinRequestPayload) Size() (n int) {
	var l int
	_ = l
	l = m.JoinEUI.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.DevEUI.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.DevNonce.Size()
	n += 1 + l + sovLorawan(uint64(l))
	return n
}

func (m *RejoinRequestPayload) Size() (n int) {
	var l int
	_ = l
	if m.RejoinType != 0 {
		n += 1 + sovLorawan(uint64(m.RejoinType))
	}
	l = m.NetID.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.JoinEUI.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.DevEUI.Size()
	n += 1 + l + sovLorawan(uint64(l))
	if m.RejoinCnt != 0 {
		n += 1 + sovLorawan(uint64(m.RejoinCnt))
	}
	return n
}

func (m *JoinAcceptPayload) Size() (n int) {
	var l int
	_ = l
	l = len(m.Encrypted)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	l = m.JoinNonce.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.NetID.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.DevAddr.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.DLSettings.Size()
	n += 1 + l + sovLorawan(uint64(l))
	if m.RxDelay != 0 {
		n += 1 + sovLorawan(uint64(m.RxDelay))
	}
	if m.CFList != nil {
		l = m.CFList.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}

func (m *DLSettings) Size() (n int) {
	var l int
	_ = l
	if m.Rx1DROffset != 0 {
		n += 1 + sovLorawan(uint64(m.Rx1DROffset))
	}
	if m.Rx2DR != 0 {
		n += 1 + sovLorawan(uint64(m.Rx2DR))
	}
	if m.OptNeg {
		n += 2
	}
	return n
}

func (m *CFList) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovLorawan(uint64(m.Type))
	}
	if len(m.Freq) > 0 {
		l = 0
		for _, e := range m.Freq {
			l += sovLorawan(uint64(e))
		}
		n += 1 + sovLorawan(uint64(l)) + l
	}
	if len(m.ChMasks) > 0 {
		n += 1 + sovLorawan(uint64(len(m.ChMasks))) + len(m.ChMasks)*1
	}
	return n
}

func (m *TxSettings) Size() (n int) {
	var l int
	_ = l
	if m.Modulation != 0 {
		n += 1 + sovLorawan(uint64(m.Modulation))
	}
	if m.DataRateIndex != 0 {
		n += 1 + sovLorawan(uint64(m.DataRateIndex))
	}
	if m.Bandwidth != 0 {
		n += 1 + sovLorawan(uint64(m.Bandwidth))
	}
	if m.SpreadingFactor != 0 {
		n += 1 + sovLorawan(uint64(m.SpreadingFactor))
	}
	if m.BitRate != 0 {
		n += 1 + sovLorawan(uint64(m.BitRate))
	}
	l = len(m.CodingRate)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.Frequency != 0 {
		n += 1 + sovLorawan(uint64(m.Frequency))
	}
	if m.TxPower != 0 {
		n += 1 + sovLorawan(uint64(m.TxPower))
	}
	if m.PolarizationInversion {
		n += 2
	}
	return n
}

func (m *MACCommand) Size() (n int) {
	var l int
	_ = l
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	return n
}

func (m *MACCommand_CID) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovLorawan(uint64(m.CID))
	return n
}
func (m *MACCommand_Proprietary_) Size() (n int) {
	var l int
	_ = l
	if m.Proprietary != nil {
		l = m.Proprietary.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_ResetInd_) Size() (n int) {
	var l int
	_ = l
	if m.ResetInd != nil {
		l = m.ResetInd.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_ResetConf_) Size() (n int) {
	var l int
	_ = l
	if m.ResetConf != nil {
		l = m.ResetConf.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_LinkCheckAns_) Size() (n int) {
	var l int
	_ = l
	if m.LinkCheckAns != nil {
		l = m.LinkCheckAns.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_LinkAdrReq) Size() (n int) {
	var l int
	_ = l
	if m.LinkAdrReq != nil {
		l = m.LinkAdrReq.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_LinkAdrAns) Size() (n int) {
	var l int
	_ = l
	if m.LinkAdrAns != nil {
		l = m.LinkAdrAns.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_DutyCycleReq_) Size() (n int) {
	var l int
	_ = l
	if m.DutyCycleReq != nil {
		l = m.DutyCycleReq.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_RxParamSetupReq_) Size() (n int) {
	var l int
	_ = l
	if m.RxParamSetupReq != nil {
		l = m.RxParamSetupReq.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_RxParamSetupAns_) Size() (n int) {
	var l int
	_ = l
	if m.RxParamSetupAns != nil {
		l = m.RxParamSetupAns.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_DevStatusAns_) Size() (n int) {
	var l int
	_ = l
	if m.DevStatusAns != nil {
		l = m.DevStatusAns.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_NewChannelReq_) Size() (n int) {
	var l int
	_ = l
	if m.NewChannelReq != nil {
		l = m.NewChannelReq.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_NewChannelAns_) Size() (n int) {
	var l int
	_ = l
	if m.NewChannelAns != nil {
		l = m.NewChannelAns.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_DlChannelReq) Size() (n int) {
	var l int
	_ = l
	if m.DlChannelReq != nil {
		l = m.DlChannelReq.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_DlChannelAns) Size() (n int) {
	var l int
	_ = l
	if m.DlChannelAns != nil {
		l = m.DlChannelAns.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_RxTimingSetupReq_) Size() (n int) {
	var l int
	_ = l
	if m.RxTimingSetupReq != nil {
		l = m.RxTimingSetupReq.Size()
		n += 2 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_TxParamSetupReq_) Size() (n int) {
	var l int
	_ = l
	if m.TxParamSetupReq != nil {
		l = m.TxParamSetupReq.Size()
		n += 2 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_RekeyInd_) Size() (n int) {
	var l int
	_ = l
	if m.RekeyInd != nil {
		l = m.RekeyInd.Size()
		n += 2 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_RekeyConf_) Size() (n int) {
	var l int
	_ = l
	if m.RekeyConf != nil {
		l = m.RekeyConf.Size()
		n += 2 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_AdrParamSetupReq) Size() (n int) {
	var l int
	_ = l
	if m.AdrParamSetupReq != nil {
		l = m.AdrParamSetupReq.Size()
		n += 2 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_DeviceTimeAns_) Size() (n int) {
	var l int
	_ = l
	if m.DeviceTimeAns != nil {
		l = m.DeviceTimeAns.Size()
		n += 2 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_ForceRejoinReq_) Size() (n int) {
	var l int
	_ = l
	if m.ForceRejoinReq != nil {
		l = m.ForceRejoinReq.Size()
		n += 2 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_RejoinParamSetupReq_) Size() (n int) {
	var l int
	_ = l
	if m.RejoinParamSetupReq != nil {
		l = m.RejoinParamSetupReq.Size()
		n += 2 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_RejoinParamSetupAns_) Size() (n int) {
	var l int
	_ = l
	if m.RejoinParamSetupAns != nil {
		l = m.RejoinParamSetupAns.Size()
		n += 2 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_PingSlotInfoReq_) Size() (n int) {
	var l int
	_ = l
	if m.PingSlotInfoReq != nil {
		l = m.PingSlotInfoReq.Size()
		n += 2 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_PingSlotChannelReq_) Size() (n int) {
	var l int
	_ = l
	if m.PingSlotChannelReq != nil {
		l = m.PingSlotChannelReq.Size()
		n += 2 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_PingSlotChannelAns_) Size() (n int) {
	var l int
	_ = l
	if m.PingSlotChannelAns != nil {
		l = m.PingSlotChannelAns.Size()
		n += 2 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_BeaconTimingAns_) Size() (n int) {
	var l int
	_ = l
	if m.BeaconTimingAns != nil {
		l = m.BeaconTimingAns.Size()
		n += 2 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_BeaconFreqReq_) Size() (n int) {
	var l int
	_ = l
	if m.BeaconFreqReq != nil {
		l = m.BeaconFreqReq.Size()
		n += 2 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_BeaconFreqAns_) Size() (n int) {
	var l int
	_ = l
	if m.BeaconFreqAns != nil {
		l = m.BeaconFreqAns.Size()
		n += 2 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_DeviceModeInd_) Size() (n int) {
	var l int
	_ = l
	if m.DeviceModeInd != nil {
		l = m.DeviceModeInd.Size()
		n += 2 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_DeviceModeConf_) Size() (n int) {
	var l int
	_ = l
	if m.DeviceModeConf != nil {
		l = m.DeviceModeConf.Size()
		n += 2 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MACCommand_Proprietary) Size() (n int) {
	var l int
	_ = l
	if m.CID != 0 {
		n += 1 + sovLorawan(uint64(m.CID))
	}
	l = len(m.RawPayload)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}

func (m *MACCommand_ResetInd) Size() (n int) {
	var l int
	_ = l
	if m.MinorVersion != 0 {
		n += 1 + sovLorawan(uint64(m.MinorVersion))
	}
	return n
}

func (m *MACCommand_ResetConf) Size() (n int) {
	var l int
	_ = l
	if m.MinorVersion != 0 {
		n += 1 + sovLorawan(uint64(m.MinorVersion))
	}
	return n
}

func (m *MACCommand_LinkCheckAns) Size() (n int) {
	var l int
	_ = l
	if m.Margin != 0 {
		n += 1 + sovLorawan(uint64(m.Margin))
	}
	if m.GatewayCount != 0 {
		n += 1 + sovLorawan(uint64(m.GatewayCount))
	}
	return n
}

func (m *MACCommand_LinkADRReq) Size() (n int) {
	var l int
	_ = l
	if m.DataRateIndex != 0 {
		n += 1 + sovLorawan(uint64(m.DataRateIndex))
	}
	if m.TxPowerIndex != 0 {
		n += 1 + sovLorawan(uint64(m.TxPowerIndex))
	}
	if len(m.ChannelMask) > 0 {
		n += 1 + sovLorawan(uint64(len(m.ChannelMask))) + len(m.ChannelMask)*1
	}
	if m.ChannelMaskControl != 0 {
		n += 1 + sovLorawan(uint64(m.ChannelMaskControl))
	}
	if m.NbTrans != 0 {
		n += 1 + sovLorawan(uint64(m.NbTrans))
	}
	return n
}

func (m *MACCommand_LinkADRAns) Size() (n int) {
	var l int
	_ = l
	if m.ChannelMaskAck {
		n += 2
	}
	if m.DataRateIndexAck {
		n += 2
	}
	if m.TxPowerIndexAck {
		n += 2
	}
	return n
}

func (m *MACCommand_DutyCycleReq) Size() (n int) {
	var l int
	_ = l
	if m.MaxDutyCycle != 0 {
		n += 1 + sovLorawan(uint64(m.MaxDutyCycle))
	}
	return n
}

func (m *MACCommand_RxParamSetupReq) Size() (n int) {
	var l int
	_ = l
	if m.Rx2DataRateIndex != 0 {
		n += 1 + sovLorawan(uint64(m.Rx2DataRateIndex))
	}
	if m.Rx1DataRateOffset != 0 {
		n += 1 + sovLorawan(uint64(m.Rx1DataRateOffset))
	}
	if m.Rx2Frequency != 0 {
		n += 1 + sovLorawan(uint64(m.Rx2Frequency))
	}
	return n
}

func (m *MACCommand_RxParamSetupAns) Size() (n int) {
	var l int
	_ = l
	if m.Rx2DataRateIndexAck {
		n += 2
	}
	if m.Rx1DataRateOffsetAck {
		n += 2
	}
	if m.Rx2FrequencyAck {
		n += 2
	}
	return n
}

func (m *MACCommand_DevStatusAns) Size() (n int) {
	var l int
	_ = l
	if m.Battery != 0 {
		n += 1 + sovLorawan(uint64(m.Battery))
	}
	if m.Margin != 0 {
		n += 1 + sovLorawan(uint64(m.Margin))
	}
	return n
}

func (m *MACCommand_NewChannelReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelIndex != 0 {
		n += 1 + sovLorawan(uint64(m.ChannelIndex))
	}
	if m.Frequency != 0 {
		n += 1 + sovLorawan(uint64(m.Frequency))
	}
	if m.MinDataRateIndex != 0 {
		n += 1 + sovLorawan(uint64(m.MinDataRateIndex))
	}
	if m.MaxDataRateIndex != 0 {
		n += 1 + sovLorawan(uint64(m.MaxDataRateIndex))
	}
	return n
}

func (m *MACCommand_NewChannelAns) Size() (n int) {
	var l int
	_ = l
	if m.FrequencyAck {
		n += 2
	}
	if m.DataRateAck {
		n += 2
	}
	return n
}

func (m *MACCommand_DLChannelReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelIndex != 0 {
		n += 1 + sovLorawan(uint64(m.ChannelIndex))
	}
	if m.Frequency != 0 {
		n += 1 + sovLorawan(uint64(m.Frequency))
	}
	return n
}

func (m *MACCommand_DLChannelAns) Size() (n int) {
	var l int
	_ = l
	if m.ChannelIndexAck {
		n += 2
	}
	if m.FrequencyAck {
		n += 2
	}
	return n
}

func (m *MACCommand_RxTimingSetupReq) Size() (n int) {
	var l int
	_ = l
	if m.Delay != 0 {
		n += 1 + sovLorawan(uint64(m.Delay))
	}
	return n
}

func (m *MACCommand_TxParamSetupReq) Size() (n int) {
	var l int
	_ = l
	if m.MaxEIRPIndex != 0 {
		n += 1 + sovLorawan(uint64(m.MaxEIRPIndex))
	}
	if m.UplinkDwellTime {
		n += 2
	}
	if m.DownlinkDwellTime {
		n += 2
	}
	return n
}

func (m *MACCommand_RekeyInd) Size() (n int) {
	var l int
	_ = l
	if m.MinorVersion != 0 {
		n += 1 + sovLorawan(uint64(m.MinorVersion))
	}
	return n
}

func (m *MACCommand_RekeyConf) Size() (n int) {
	var l int
	_ = l
	if m.MinorVersion != 0 {
		n += 1 + sovLorawan(uint64(m.MinorVersion))
	}
	return n
}

func (m *MACCommand_ADRParamSetupReq) Size() (n int) {
	var l int
	_ = l
	if m.ADRAckLimitExponent != 0 {
		n += 1 + sovLorawan(uint64(m.ADRAckLimitExponent))
	}
	if m.ADRAckDelayExponent != 0 {
		n += 1 + sovLorawan(uint64(m.ADRAckDelayExponent))
	}
	return n
}

func (m *MACCommand_DeviceTimeAns) Size() (n int) {
	var l int
	_ = l
	if m.Time != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.Time)
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}

func (m *MACCommand_ForceRejoinReq) Size() (n int) {
	var l int
	_ = l
	if m.RejoinType != 0 {
		n += 1 + sovLorawan(uint64(m.RejoinType))
	}
	if m.DataRateIndex != 0 {
		n += 1 + sovLorawan(uint64(m.DataRateIndex))
	}
	if m.MaxRetries != 0 {
		n += 1 + sovLorawan(uint64(m.MaxRetries))
	}
	if m.PeriodExponent != 0 {
		n += 1 + sovLorawan(uint64(m.PeriodExponent))
	}
	return n
}

func (m *MACCommand_RejoinParamSetupReq) Size() (n int) {
	var l int
	_ = l
	if m.MaxCountExponent != 0 {
		n += 1 + sovLorawan(uint64(m.MaxCountExponent))
	}
	if m.MaxTimeExponent != 0 {
		n += 1 + sovLorawan(uint64(m.MaxTimeExponent))
	}
	return n
}

func (m *MACCommand_RejoinParamSetupAns) Size() (n int) {
	var l int
	_ = l
	if m.MaxTimeExponentAck {
		n += 2
	}
	return n
}

func (m *MACCommand_PingSlotInfoReq) Size() (n int) {
	var l int
	_ = l
	if m.Period != 0 {
		n += 1 + sovLorawan(uint64(m.Period))
	}
	return n
}

func (m *MACCommand_PingSlotChannelReq) Size() (n int) {
	var l int
	_ = l
	if m.Frequency != 0 {
		n += 1 + sovLorawan(uint64(m.Frequency))
	}
	if m.DataRateIndex != 0 {
		n += 1 + sovLorawan(uint64(m.DataRateIndex))
	}
	return n
}

func (m *MACCommand_PingSlotChannelAns) Size() (n int) {
	var l int
	_ = l
	if m.FrequencyAck {
		n += 2
	}
	if m.DataRateIndexAck {
		n += 2
	}
	return n
}

func (m *MACCommand_BeaconTimingAns) Size() (n int) {
	var l int
	_ = l
	if m.Delay != 0 {
		n += 1 + sovLorawan(uint64(m.Delay))
	}
	if m.ChannelIndex != 0 {
		n += 1 + sovLorawan(uint64(m.ChannelIndex))
	}
	return n
}

func (m *MACCommand_BeaconFreqReq) Size() (n int) {
	var l int
	_ = l
	if m.Frequency != 0 {
		n += 1 + sovLorawan(uint64(m.Frequency))
	}
	return n
}

func (m *MACCommand_BeaconFreqAns) Size() (n int) {
	var l int
	_ = l
	if m.FrequencyAck {
		n += 2
	}
	return n
}

func (m *MACCommand_DeviceModeInd) Size() (n int) {
	var l int
	_ = l
	if m.Class != 0 {
		n += 1 + sovLorawan(uint64(m.Class))
	}
	return n
}

func (m *MACCommand_DeviceModeConf) Size() (n int) {
	var l int
	_ = l
	if m.Class != 0 {
		n += 1 + sovLorawan(uint64(m.Class))
	}
	return n
}

func sovLorawan(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLorawan(x uint64) (n int) {
	return sovLorawan(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MHDR", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MHDR.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MIC", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MIC = append(m.MIC[:0], dAtA[iNdEx:postIndex]...)
			if m.MIC == nil {
				m.MIC = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MACPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACPayload{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Message_MACPayload{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinRequestPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JoinRequestPayload{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Message_JoinRequestPayload{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinAcceptPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JoinAcceptPayload{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Message_JoinAcceptPayload{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejoinRequestPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RejoinRequestPayload{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Message_RejoinRequestPayload{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MHDR) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MHDR: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MHDR: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MType", wireType)
			}
			m.MType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MType |= (MType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Major", wireType)
			}
			m.Major = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Major |= (Major(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MACPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MACPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FHDR", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FHDR.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FPort", wireType)
			}
			m.FPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FRMPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FRMPayload = append(m.FRMPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.FRMPayload == nil {
				m.FRMPayload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FHDR) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FHDR: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FHDR: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCtrl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FCtrl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCnt", wireType)
			}
			m.FCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FOpts", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FOpts = append(m.FOpts[:0], dAtA[iNdEx:postIndex]...)
			if m.FOpts == nil {
				m.FOpts = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FCtrl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FCtrl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FCtrl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ADR", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ADR = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ADRAckReq", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ADRAckReq = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ack", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ack = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FPending", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FPending = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassB", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClassB = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinRequestPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinRequestPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinRequestPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.JoinEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevNonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevNonce.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RejoinRequestPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RejoinRequestPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RejoinRequestPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejoinType", wireType)
			}
			m.RejoinType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RejoinType |= (RejoinType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NetID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.JoinEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejoinCnt", wireType)
			}
			m.RejoinCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RejoinCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinAcceptPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinAcceptPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinAcceptPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encrypted", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Encrypted = append(m.Encrypted[:0], dAtA[iNdEx:postIndex]...)
			if m.Encrypted == nil {
				m.Encrypted = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinNonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.JoinNonce.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NetID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DLSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DLSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxDelay", wireType)
			}
			m.RxDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxDelay |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CFList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CFList == nil {
				m.CFList = &CFList{}
			}
			if err := m.CFList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DLSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DLSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DLSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx1DROffset", wireType)
			}
			m.Rx1DROffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx1DROffset |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx2DR", wireType)
			}
			m.Rx2DR = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx2DR |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptNeg", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptNeg = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CFList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CFList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CFList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (CFListType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLorawan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Freq = append(m.Freq, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLorawan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLorawan
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLorawan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Freq = append(m.Freq, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Freq", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLorawan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChMasks = append(m.ChMasks, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLorawan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLorawan
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLorawan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChMasks = append(m.ChMasks, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChMasks", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modulation", wireType)
			}
			m.Modulation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Modulation |= (Modulation(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRateIndex", wireType)
			}
			m.DataRateIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataRateIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bandwidth", wireType)
			}
			m.Bandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bandwidth |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpreadingFactor", wireType)
			}
			m.SpreadingFactor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpreadingFactor |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BitRate", wireType)
			}
			m.BitRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BitRate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodingRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodingRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			m.Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxPower", wireType)
			}
			m.TxPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxPower |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolarizationInversion", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PolarizationInversion = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MACCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MACCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CID", wireType)
			}
			var v MACCommandIdentifier
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (MACCommandIdentifier(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Payload = &MACCommand_CID{v}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proprietary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_Proprietary{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_Proprietary_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetInd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_ResetInd{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_ResetInd_{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_ResetConf{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_ResetConf_{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkCheckAns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_LinkCheckAns{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_LinkCheckAns_{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkAdrReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_LinkADRReq{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_LinkAdrReq{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkAdrAns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_LinkADRAns{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_LinkAdrAns{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DutyCycleReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_DutyCycleReq{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_DutyCycleReq_{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxParamSetupReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_RxParamSetupReq{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_RxParamSetupReq_{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxParamSetupAns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_RxParamSetupAns{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_RxParamSetupAns_{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevStatusAns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_DevStatusAns{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_DevStatusAns_{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewChannelReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_NewChannelReq{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_NewChannelReq_{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewChannelAns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_NewChannelAns{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_NewChannelAns_{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DlChannelReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_DLChannelReq{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_DlChannelReq{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DlChannelAns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_DLChannelAns{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_DlChannelAns{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxTimingSetupReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_RxTimingSetupReq{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_RxTimingSetupReq_{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxParamSetupReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_TxParamSetupReq{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_TxParamSetupReq_{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RekeyInd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_RekeyInd{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_RekeyInd_{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RekeyConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_RekeyConf{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_RekeyConf_{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdrParamSetupReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_ADRParamSetupReq{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_AdrParamSetupReq{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceTimeAns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_DeviceTimeAns{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_DeviceTimeAns_{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceRejoinReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_ForceRejoinReq{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_ForceRejoinReq_{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejoinParamSetupReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_RejoinParamSetupReq{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_RejoinParamSetupReq_{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejoinParamSetupAns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_RejoinParamSetupAns{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_RejoinParamSetupAns_{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingSlotInfoReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_PingSlotInfoReq{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_PingSlotInfoReq_{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingSlotChannelReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_PingSlotChannelReq{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_PingSlotChannelReq_{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingSlotChannelAns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_PingSlotChannelAns{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_PingSlotChannelAns_{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeaconTimingAns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_BeaconTimingAns{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_BeaconTimingAns_{v}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeaconFreqReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_BeaconFreqReq{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_BeaconFreqReq_{v}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeaconFreqAns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_BeaconFreqAns{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_BeaconFreqAns_{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceModeInd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_DeviceModeInd{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_DeviceModeInd_{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceModeConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACCommand_DeviceModeConf{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &MACCommand_DeviceModeConf_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_Proprietary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Proprietary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Proprietary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CID", wireType)
			}
			m.CID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CID |= (MACCommandIdentifier(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawPayload = append(m.RawPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.RawPayload == nil {
				m.RawPayload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_ResetInd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetInd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetInd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinorVersion", wireType)
			}
			m.MinorVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinorVersion |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_ResetConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinorVersion", wireType)
			}
			m.MinorVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinorVersion |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_LinkCheckAns) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LinkCheckAns: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LinkCheckAns: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Margin", wireType)
			}
			m.Margin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Margin |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayCount", wireType)
			}
			m.GatewayCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GatewayCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_LinkADRReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LinkADRReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LinkADRReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRateIndex", wireType)
			}
			m.DataRateIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataRateIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxPowerIndex", wireType)
			}
			m.TxPowerIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxPowerIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLorawan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChannelMask = append(m.ChannelMask, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLorawan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLorawan
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLorawan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChannelMask = append(m.ChannelMask, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelMask", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelMaskControl", wireType)
			}
			m.ChannelMaskControl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelMaskControl |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NbTrans", wireType)
			}
			m.NbTrans = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NbTrans |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_LinkADRAns) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LinkADRAns: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LinkADRAns: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelMaskAck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChannelMaskAck = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRateIndexAck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DataRateIndexAck = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxPowerIndexAck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TxPowerIndexAck = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_DutyCycleReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DutyCycleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DutyCycleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDutyCycle", wireType)
			}
			m.MaxDutyCycle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDutyCycle |= (AggregatedDutyCycle(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_RxParamSetupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RxParamSetupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RxParamSetupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx2DataRateIndex", wireType)
			}
			m.Rx2DataRateIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx2DataRateIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx1DataRateOffset", wireType)
			}
			m.Rx1DataRateOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx1DataRateOffset |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx2Frequency", wireType)
			}
			m.Rx2Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx2Frequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_RxParamSetupAns) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RxParamSetupAns: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RxParamSetupAns: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx2DataRateIndexAck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Rx2DataRateIndexAck = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx1DataRateOffsetAck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Rx1DataRateOffsetAck = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx2FrequencyAck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Rx2FrequencyAck = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_DevStatusAns) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DevStatusAns: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DevStatusAns: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Battery", wireType)
			}
			m.Battery = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Battery |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Margin", wireType)
			}
			m.Margin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Margin |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_NewChannelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewChannelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewChannelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelIndex", wireType)
			}
			m.ChannelIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			m.Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDataRateIndex", wireType)
			}
			m.MinDataRateIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinDataRateIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDataRateIndex", wireType)
			}
			m.MaxDataRateIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDataRateIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_NewChannelAns) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewChannelAns: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewChannelAns: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyAck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FrequencyAck = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRateAck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DataRateAck = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_DLChannelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DLChannelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DLChannelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelIndex", wireType)
			}
			m.ChannelIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			m.Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_DLChannelAns) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DLChannelAns: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DLChannelAns: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelIndexAck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChannelIndexAck = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyAck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FrequencyAck = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_RxTimingSetupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RxTimingSetupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RxTimingSetupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delay", wireType)
			}
			m.Delay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Delay |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_TxParamSetupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxParamSetupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxParamSetupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxEIRPIndex", wireType)
			}
			m.MaxEIRPIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxEIRPIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplinkDwellTime", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UplinkDwellTime = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkDwellTime", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DownlinkDwellTime = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_RekeyInd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RekeyInd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RekeyInd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinorVersion", wireType)
			}
			m.MinorVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinorVersion |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_RekeyConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RekeyConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RekeyConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinorVersion", wireType)
			}
			m.MinorVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinorVersion |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_ADRParamSetupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ADRParamSetupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ADRParamSetupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ADRAckLimitExponent", wireType)
			}
			m.ADRAckLimitExponent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ADRAckLimitExponent |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ADRAckDelayExponent", wireType)
			}
			m.ADRAckDelayExponent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ADRAckDelayExponent |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_DeviceTimeAns) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceTimeAns: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceTimeAns: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Time == nil {
				m.Time = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_ForceRejoinReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForceRejoinReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForceRejoinReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejoinType", wireType)
			}
			m.RejoinType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RejoinType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRateIndex", wireType)
			}
			m.DataRateIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataRateIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRetries", wireType)
			}
			m.MaxRetries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRetries |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodExponent", wireType)
			}
			m.PeriodExponent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeriodExponent |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_RejoinParamSetupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RejoinParamSetupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RejoinParamSetupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCountExponent", wireType)
			}
			m.MaxCountExponent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxCountExponent |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTimeExponent", wireType)
			}
			m.MaxTimeExponent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTimeExponent |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_RejoinParamSetupAns) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RejoinParamSetupAns: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RejoinParamSetupAns: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTimeExponentAck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxTimeExponentAck = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_PingSlotInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingSlotInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingSlotInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= (PingSlotPeriod(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_PingSlotChannelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingSlotChannelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingSlotChannelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			m.Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRateIndex", wireType)
			}
			m.DataRateIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataRateIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_PingSlotChannelAns) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingSlotChannelAns: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingSlotChannelAns: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyAck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FrequencyAck = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRateIndexAck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DataRateIndexAck = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_BeaconTimingAns) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeaconTimingAns: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeaconTimingAns: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delay", wireType)
			}
			m.Delay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Delay |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelIndex", wireType)
			}
			m.ChannelIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_BeaconFreqReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeaconFreqReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeaconFreqReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			m.Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_BeaconFreqAns) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeaconFreqAns: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeaconFreqAns: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyAck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FrequencyAck = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_DeviceModeInd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceModeInd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceModeInd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Class", wireType)
			}
			m.Class = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Class |= (Class(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand_DeviceModeConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceModeConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceModeConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Class", wireType)
			}
			m.Class = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Class |= (Class(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLorawan(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLorawan
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLorawan
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLorawan(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLorawan = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLorawan   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/lorawan.proto", fileDescriptorLorawan)
}
func init() {
	golang_proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/lorawan.proto", fileDescriptorLorawan)
}

var fileDescriptorLorawan = []byte{
	// 3738 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x59, 0x4f, 0x6c, 0x1b, 0xd9,
	0x79, 0xe7, 0x88, 0xa4, 0x48, 0x7e, 0xfc, 0x37, 0x7a, 0x92, 0x6d, 0x99, 0xf1, 0x92, 0x8e, 0x9d,
	0x6e, 0x1d, 0xa5, 0x96, 0x2c, 0x4a, 0xab, 0x78, 0xb7, 0x08, 0x10, 0xfe, 0xd3, 0x8a, 0xb6, 0x44,
	0xc9, 0x43, 0xda, 0x5e, 0x1b, 0x08, 0x06, 0x23, 0xce, 0xa3, 0x34, 0x16, 0x39, 0x43, 0x0f, 0x47,
	0x16, 0xd5, 0x53, 0x0e, 0x05, 0xba, 0xa7, 0x20, 0xe8, 0xa1, 0x68, 0x4f, 0x0d, 0x1a, 0x14, 0x08,
	0x50, 0x20, 0x58, 0xa0, 0x97, 0x3d, 0x15, 0x39, 0xee, 0x71, 0x7b, 0x5b, 0x14, 0x88, 0x1a, 0xd3,
	0x97, 0x1c, 0x73, 0x0c, 0x7a, 0x2a, 0xbe, 0xf7, 0xde, 0x90, 0x33, 0x43, 0x6a, 0x57, 0x5b, 0x6c,
	0x4f, 0xe4, 0xfb, 0xbd, 0xef, 0xfd, 0xde, 0xf7, 0xf7, 0xcd, 0xf7, 0x66, 0x60, 0xfd, 0xc8, 0x70,
	0x8e, 0x4f, 0x0f, 0x57, 0xdb, 0x56, 0x6f, 0xad, 0x75, 0x4c, 0x5b, 0xc7, 0x86, 0x79, 0x34, 0x68,
	0x50, 0xe7, 0xcc, 0xb2, 0x4f, 0xd6, 0x1c, 0xc7, 0x5c, 0xd3, 0xfa, 0xc6, 0x5a, 0xd7, 0xb2, 0xb5,
	0x33, 0xcd, 0x5c, 0xed, 0xdb, 0x96, 0x63, 0x91, 0x79, 0xc7, 0x31, 0x57, 0xdf, 0x6c, 0xe4, 0xee,
	0x7b, 0x96, 0x1e, 0x59, 0x47, 0xd6, 0x1a, 0x9b, 0x3e, 0x3c, 0xed, 0xb0, 0x11, 0x1b, 0xb0, 0x7f,
	0x7c, 0x59, 0xae, 0x70, 0x64, 0x59, 0x47, 0x5d, 0x3a, 0x91, 0x72, 0x8c, 0x1e, 0x1d, 0x38, 0x5a,
	0xaf, 0xcf, 0x05, 0xee, 0xfc, 0x4b, 0x18, 0x62, 0x7b, 0x74, 0x30, 0xd0, 0x8e, 0x28, 0xf9, 0x11,
	0x44, 0x7b, 0xea, 0xb1, 0x6e, 0x2f, 0x4b, 0xb7, 0xa5, 0x7b, 0xc9, 0x62, 0x6a, 0x95, 0xef, 0xb9,
	0xba, 0xb7, 0x53, 0x55, 0xca, 0xf1, 0x2f, 0x2e, 0x0a, 0xa1, 0x2f, 0x2f, 0x0a, 0x92, 0x12, 0xe9,
	0xed, 0xe8, 0x36, 0xb9, 0x09, 0xe1, 0x9e, 0xd1, 0x5e, 0x9e, 0xbb, 0x2d, 0xdd, 0x4b, 0x95, 0x63,
	0xa3, 0x8b, 0x42, 0x78, 0xaf, 0x5e, 0x51, 0x10, 0x23, 0x35, 0x48, 0xf6, 0xb4, 0xb6, 0xda, 0xd7,
	0xce, 0xbb, 0x96, 0xa6, 0x2f, 0x87, 0x19, 0x1b, 0x19, 0xb3, 0x95, 0x2a, 0x07, 0x7c, 0xa6, 0x9c,
	0x19, 0x5d, 0x14, 0x60, 0x32, 0xde, 0x09, 0x29, 0xd0, 0xd3, 0xda, 0x62, 0x44, 0x1a, 0xb0, 0xf4,
	0xca, 0x32, 0x4c, 0xd5, 0xa6, 0xaf, 0x4f, 0xe9, 0xc0, 0x19, 0xf3, 0x45, 0x18, 0x5f, 0xce, 0xe5,
	0x7b, 0x64, 0x19, 0xa6, 0xc2, 0x45, 0x26, 0x3c, 0xe4, 0xd5, 0x14, 0x4a, 0x1e, 0xc3, 0x22, 0xe3,
	0xd3, 0xda, 0x6d, 0xda, 0x9f, 0xd0, 0x45, 0x19, 0xdd, 0x4d, 0x2f, 0x5d, 0x89, 0x49, 0x4c, 0xd8,
	0x16, 0x5e, 0x05, 0x41, 0xd2, 0x82, 0xeb, 0x36, 0x9d, 0xa9, 0xde, 0x3c, 0xe3, 0xbb, 0xe5, 0xf2,
	0x29, 0xf4, 0xd5, 0x2c, 0x05, 0x97, 0xec, 0x19, 0xf8, 0x47, 0x91, 0xcf, 0x7f, 0x55, 0x08, 0x95,
	0x13, 0x10, 0x13, 0xc0, 0xa3, 0x48, 0x3c, 0x26, 0xc7, 0xef, 0x3c, 0x81, 0x08, 0xc6, 0x80, 0xfc,
	0x00, 0xe6, 0x7b, 0xaa, 0x73, 0xde, 0xa7, 0x2c, 0x42, 0x99, 0x62, 0x7a, 0xec, 0xd3, 0xd6, 0x79,
	0x9f, 0x2a, 0xd1, 0x1e, 0xfe, 0x90, 0xbb, 0x10, 0xed, 0x69, 0xaf, 0x2c, 0x9b, 0xc5, 0xc6, 0x2b,
	0x84, 0xa0, 0xc2, 0xe7, 0xee, 0xfc, 0x9d, 0x04, 0x1e, 0xcf, 0x63, 0xe8, 0x3b, 0xb3, 0x42, 0xbf,
	0x1d, 0x08, 0x7d, 0x07, 0x43, 0x7f, 0x0d, 0xe6, 0x3b, 0x6a, 0xdf, 0xb2, 0x1d, 0xb6, 0x43, 0x5a,
	0x89, 0x76, 0x0e, 0x2c, 0xdb, 0x21, 0x6b, 0x90, 0xec, 0xd8, 0x3d, 0x5f, 0xd8, 0x53, 0x3c, 0xc4,
	0xdb, 0xca, 0x9e, 0xd8, 0x48, 0x81, 0x8e, 0xdd, 0xf3, 0x59, 0x7b, 0xe7, 0x3f, 0x24, 0x88, 0xe0,
	0x36, 0xa4, 0x05, 0x71, 0x9d, 0xbe, 0x51, 0x35, 0x5d, 0xa8, 0x91, 0x2a, 0x7f, 0x88, 0x1b, 0xff,
	0xd7, 0x45, 0xe1, 0x1b, 0xeb, 0xa5, 0x7f, 0x72, 0xb4, 0x86, 0x7e, 0x19, 0xac, 0x56, 0xe9, 0x9b,
	0x92, 0xae, 0xdb, 0x4a, 0x4c, 0xe7, 0x7f, 0xc8, 0x2a, 0x2a, 0xdb, 0x76, 0xec, 0x2e, 0x53, 0x36,
	0x39, 0x71, 0xc7, 0x76, 0xc5, 0xb1, 0xbb, 0x1e, 0xdb, 0xa2, 0x1d, 0x04, 0xc8, 0x22, 0x7a, 0xa2,
	0x6d, 0x3a, 0x4c, 0xff, 0xb4, 0x12, 0xe9, 0x54, 0x4c, 0x87, 0x5b, 0x6c, 0xf5, 0x9d, 0x01, 0x4b,
	0xbe, 0x94, 0x12, 0xed, 0xec, 0xf7, 0x9d, 0x81, 0x30, 0xe0, 0x9f, 0x24, 0x88, 0x32, 0x32, 0xac,
	0x09, 0x4d, 0x28, 0x1f, 0xe7, 0x35, 0x51, 0xaa, 0x2a, 0x0a, 0x62, 0xe4, 0x3e, 0x24, 0x35, 0xdd,
	0x56, 0xb5, 0xf6, 0x09, 0x26, 0x0c, 0xd3, 0x25, 0x5e, 0x4e, 0x8f, 0x2e, 0x0a, 0x89, 0x52, 0x55,
	0x29, 0xb5, 0x4f, 0x14, 0xfa, 0x5a, 0x49, 0x68, 0xba, 0xcd, 0xff, 0x12, 0x19, 0xc2, 0x5a, 0xfb,
	0x84, 0xe9, 0x10, 0x57, 0xf0, 0x2f, 0xf9, 0x1e, 0x24, 0x3a, 0x6a, 0x9f, 0x9a, 0xba, 0x61, 0x1e,
	0x31, 0x2d, 0xe2, 0x4a, 0xbc, 0x73, 0xc0, 0xc7, 0xe4, 0x06, 0xc4, 0xda, 0x5d, 0x6d, 0x30, 0x50,
	0x0f, 0x59, 0x3a, 0xc7, 0x95, 0x79, 0x36, 0x2c, 0xdf, 0xf9, 0xed, 0x1c, 0x90, 0xe9, 0x02, 0x21,
	0x3f, 0x83, 0x38, 0xcb, 0x5d, 0x7a, 0x6a, 0x08, 0x57, 0x97, 0x85, 0xab, 0xd7, 0xae, 0xee, 0xea,
	0xda, 0xd3, 0xfa, 0xd6, 0xe6, 0xe8, 0xa2, 0x10, 0xc3, 0x0d, 0x6a, 0x4f, 0xeb, 0x4a, 0x0c, 0x39,
	0x6b, 0xa7, 0x06, 0x79, 0x09, 0xe8, 0x7e, 0xc6, 0xce, 0xcf, 0x87, 0xd2, 0xff, 0x9d, 0x7d, 0xbe,
	0x4a, 0xdf, 0x20, 0xf9, 0xbc, 0x4e, 0xdf, 0x20, 0xf7, 0x73, 0x48, 0x20, 0xb7, 0x69, 0x99, 0x6d,
	0x2a, 0x72, 0xec, 0x23, 0xc1, 0x5e, 0xfc, 0x56, 0x69, 0xd2, 0x40, 0x06, 0x05, 0x53, 0x8e, 0xfd,
	0x13, 0xc1, 0xfc, 0xdb, 0x30, 0x2c, 0xcd, 0x2a, 0x59, 0xb2, 0x01, 0x49, 0x51, 0xf0, 0x9e, 0x02,
	0x24, 0xfe, 0x2a, 0x67, 0x55, 0x08, 0xf6, 0xf8, 0x3f, 0x79, 0x0e, 0xf3, 0x26, 0x75, 0x54, 0x43,
	0x17, 0x7e, 0xf8, 0xe9, 0xb7, 0xf7, 0x43, 0x83, 0x3a, 0xf5, 0xea, 0xe8, 0xa2, 0x10, 0x65, 0x7f,
	0x94, 0xa8, 0x49, 0x9d, 0xba, 0x3f, 0x80, 0xe1, 0xff, 0xd7, 0x00, 0x46, 0xbe, 0xeb, 0x00, 0xbe,
	0x07, 0xc2, 0x43, 0xac, 0xca, 0xa2, 0xac, 0xca, 0x12, 0x1c, 0xa9, 0x98, 0x8e, 0x08, 0xc3, 0x7f,
	0x86, 0x61, 0x61, 0xea, 0x24, 0x26, 0xb7, 0x20, 0x41, 0xcd, 0xb6, 0x7d, 0xde, 0x77, 0xa8, 0xce,
	0xf3, 0x56, 0x99, 0x00, 0xe4, 0x25, 0x00, 0xa3, 0xe5, 0xa9, 0xc1, 0x1d, 0xfe, 0xd7, 0x42, 0xef,
	0x8d, 0xab, 0xeb, 0x8d, 0xdb, 0xf2, 0xdc, 0x48, 0xbc, 0x72, 0xff, 0x7a, 0x02, 0x19, 0xfe, 0x6e,
	0x03, 0xe9, 0x3d, 0xf4, 0x22, 0xdf, 0xd9, 0xa1, 0xf7, 0x13, 0x48, 0xea, 0x5d, 0x75, 0x40, 0x1d,
	0x07, 0x17, 0x89, 0x47, 0xdc, 0x38, 0x59, 0xab, 0xbb, 0x4d, 0x31, 0xe3, 0x39, 0xfe, 0x40, 0xef,
	0xba, 0x28, 0xb9, 0x09, 0x71, 0x7b, 0xa8, 0xea, 0xb4, 0xab, 0x9d, 0xb3, 0xc7, 0x59, 0x5a, 0x89,
	0xd9, 0xc3, 0x2a, 0x0e, 0xc9, 0x06, 0xc4, 0xda, 0x1d, 0xb5, 0x6b, 0x0c, 0x9c, 0xe5, 0x18, 0x63,
	0xcd, 0xb8, 0xac, 0x95, 0xed, 0x5d, 0x63, 0xe0, 0x94, 0x01, 0x43, 0xce, 0xff, 0x2b, 0xf3, 0xed,
	0x0e, 0xfe, 0x8a, 0x98, 0xfe, 0x42, 0x02, 0x98, 0x6c, 0x4d, 0x36, 0x20, 0x6d, 0x0f, 0xd7, 0x55,
	0xdd, 0x56, 0xad, 0x4e, 0x67, 0x40, 0x1d, 0x16, 0xd0, 0x74, 0x39, 0x3b, 0xba, 0x28, 0x24, 0x95,
	0xe1, 0x7a, 0x55, 0xd9, 0x67, 0xb0, 0x92, 0xb4, 0x87, 0xeb, 0x55, 0x9b, 0x0f, 0xc8, 0x6d, 0x98,
	0xb7, 0x87, 0x45, 0x55, 0xe7, 0x0f, 0xb7, 0x74, 0x39, 0x81, 0x0e, 0x55, 0x86, 0xc5, 0xaa, 0xa2,
	0x44, 0xed, 0x61, 0xb1, 0x6a, 0x93, 0xbb, 0x10, 0xb3, 0xfa, 0x8e, 0x6a, 0xd2, 0x23, 0x7e, 0x7a,
	0x72, 0x85, 0xf6, 0xfb, 0x4e, 0x83, 0x1e, 0x29, 0xf3, 0x16, 0xfb, 0x15, 0x0a, 0x51, 0x10, 0x8a,
	0x92, 0xf7, 0x21, 0x32, 0xab, 0xaa, 0xf9, 0x2c, 0xab, 0x6a, 0x36, 0x4f, 0x08, 0x44, 0x3a, 0xfc,
	0xf8, 0x0e, 0xb3, 0x67, 0x83, 0x4d, 0x5f, 0xa3, 0xb3, 0xda, 0xc7, 0x6a, 0x4f, 0x1b, 0x9c, 0x0c,
	0x96, 0xc3, 0xb7, 0xc3, 0xf7, 0xe2, 0x4a, 0xac, 0x7d, 0xbc, 0x87, 0x43, 0xb1, 0xcd, 0xef, 0xe7,
	0x00, 0x5a, 0xc3, 0xb1, 0xdd, 0x45, 0x80, 0x9e, 0xa5, 0x9f, 0x76, 0x35, 0xc7, 0xb0, 0xcc, 0xe0,
	0x8e, 0x7b, 0xe3, 0x19, 0xc5, 0x23, 0x45, 0xde, 0x87, 0xac, 0xae, 0x39, 0x9a, 0x6a, 0x6b, 0x0e,
	0x55, 0x0d, 0x53, 0xa7, 0x43, 0x66, 0x7f, 0x54, 0x49, 0x23, 0xac, 0x68, 0x0e, 0xad, 0x23, 0x88,
	0x05, 0x72, 0xa8, 0x99, 0xfa, 0x99, 0xa1, 0x3b, 0xc7, 0xe2, 0x01, 0x36, 0x01, 0xc8, 0x0f, 0x41,
	0x1e, 0xf4, 0x6d, 0xaa, 0xe1, 0x23, 0x43, 0xed, 0x68, 0x6d, 0xc7, 0xe2, 0x39, 0x97, 0x56, 0xb2,
	0x63, 0x7c, 0x9b, 0xc1, 0x68, 0xd4, 0xa1, 0xe1, 0xb0, 0xfd, 0x44, 0x89, 0xc6, 0x0e, 0x0d, 0x07,
	0x37, 0x22, 0x05, 0x48, 0xb6, 0x2d, 0x46, 0xc1, 0x66, 0x31, 0x3f, 0x12, 0x0a, 0x70, 0x88, 0x09,
	0xdc, 0x82, 0x44, 0x87, 0x35, 0x45, 0x66, 0xfb, 0x9c, 0x25, 0x49, 0x44, 0x99, 0x00, 0xc8, 0xec,
	0x0c, 0xd5, 0xbe, 0x75, 0x46, 0xed, 0xe5, 0x38, 0xb3, 0x21, 0xe6, 0x0c, 0x0f, 0x70, 0x48, 0x3e,
	0x80, 0xeb, 0x7d, 0xab, 0xab, 0xd9, 0xc6, 0xdf, 0x30, 0xab, 0x55, 0xc3, 0x7c, 0x43, 0xed, 0x01,
	0x7a, 0x29, 0xc1, 0x1e, 0x6a, 0xd7, 0xbc, 0xb3, 0x75, 0x77, 0xf2, 0xce, 0xff, 0xac, 0xb0, 0x56,
	0xa6, 0x62, 0xf5, 0x7a, 0x9a, 0xa9, 0x93, 0x0f, 0x21, 0xdc, 0x36, 0x74, 0xe1, 0xd8, 0x5b, 0x9e,
	0xae, 0x53, 0x08, 0xd4, 0x75, 0x6a, 0x3a, 0x46, 0xc7, 0xa0, 0x36, 0x7f, 0x44, 0x57, 0xea, 0xd5,
	0x9d, 0x90, 0x82, 0x6b, 0x48, 0x19, 0x92, 0x7d, 0xdb, 0xea, 0xdb, 0x06, 0x75, 0x34, 0xfb, 0x5c,
	0x34, 0x0c, 0xf9, 0x69, 0x8a, 0xd5, 0x83, 0x89, 0xd4, 0x4e, 0x48, 0xf1, 0x2e, 0x22, 0x1f, 0x41,
	0xc2, 0xa6, 0x03, 0x3c, 0x2b, 0x4c, 0xb7, 0xf5, 0xfd, 0xde, 0x0c, 0x06, 0x05, 0x65, 0xea, 0x26,
	0xb6, 0x82, 0x71, 0x5b, 0xfc, 0x27, 0x3f, 0xc1, 0xa3, 0x11, 0xd7, 0xb6, 0x2d, 0xb3, 0x23, 0xfa,
	0xdc, 0x5b, 0x97, 0x2d, 0xae, 0x58, 0x66, 0x67, 0x27, 0xa4, 0xf0, 0xdd, 0x70, 0x40, 0x3e, 0x86,
	0x4c, 0xd7, 0x30, 0x4f, 0xd4, 0xf6, 0x31, 0x6d, 0x9f, 0xa8, 0x9a, 0xe9, 0x16, 0x7e, 0x61, 0x06,
	0xc5, 0xae, 0x61, 0x9e, 0x54, 0x50, 0xae, 0x64, 0x0e, 0x76, 0x42, 0x4a, 0xaa, 0xeb, 0x19, 0x93,
	0x12, 0xb0, 0xb1, 0x8a, 0x1d, 0x0b, 0xa6, 0x3b, 0x6f, 0x69, 0xdf, 0xbb, 0x84, 0x06, 0x7b, 0x1c,
	0xfa, 0x1a, 0x9b, 0x77, 0x5c, 0x54, 0xd2, 0x6d, 0x6c, 0x60, 0xbc, 0x14, 0xa8, 0x49, 0xec, 0x9b,
	0x28, 0xb8, 0x1e, 0x2e, 0x05, 0x6a, 0xf1, 0x31, 0x64, 0xf4, 0x53, 0xe7, 0x5c, 0x6d, 0x9f, 0xb7,
	0xbb, 0x94, 0xe9, 0x11, 0xbf, 0xd4, 0x9c, 0xea, 0xa9, 0x73, 0x5e, 0x41, 0x39, 0xae, 0x49, 0x4a,
	0xf7, 0x8c, 0xc9, 0x13, 0x20, 0xf6, 0x50, 0xed, 0x6b, 0xb6, 0xd6, 0xc3, 0x33, 0xf1, 0xb4, 0xcf,
	0xc8, 0x12, 0x8c, 0xec, 0xce, 0x2c, 0xf7, 0x0e, 0x0f, 0x50, 0xb6, 0x89, 0xa2, 0x9c, 0x2f, 0x6b,
	0xfb, 0xa1, 0x19, 0x94, 0x68, 0x24, 0x5c, 0x89, 0x92, 0x5b, 0xea, 0xa3, 0x74, 0xcd, 0xa5, 0x6f,
	0xd4, 0x81, 0xa3, 0x39, 0xa7, 0x03, 0x46, 0x97, 0xbc, 0xdc, 0x5c, 0xfa, 0xa6, 0xc9, 0xe4, 0x44,
	0xf4, 0x74, 0xcf, 0x98, 0x3c, 0x82, 0xac, 0x49, 0xcf, 0xd4, 0xf6, 0xb1, 0x66, 0x9a, 0xb4, 0xcb,
	0x6c, 0x4d, 0x31, 0xa6, 0xdb, 0x33, 0x98, 0x1a, 0xf4, 0xac, 0xc2, 0x05, 0xb9, 0xa5, 0x69, 0xd3,
	0x0b, 0x04, 0xb9, 0x50, 0xab, 0xf4, 0x15, 0xb8, 0xb8, 0x5a, 0x1e, 0x2e, 0xd7, 0xc0, 0xae, 0x4f,
	0xad, 0xcc, 0xe5, 0x06, 0xee, 0xfa, 0xb4, 0x4a, 0xe9, 0x5d, 0x8f, 0x52, 0x7e, 0x22, 0xd4, 0x29,
	0xfb, 0xcd, 0x44, 0xae, 0xa7, 0xba, 0x1e, 0x8d, 0x5a, 0xb0, 0x68, 0x0f, 0x55, 0xc7, 0xe8, 0xe1,
	0x69, 0x36, 0xc9, 0x0c, 0x99, 0xb1, 0xdd, 0x9d, 0x19, 0xc6, 0x16, 0x13, 0xf6, 0xa4, 0x86, 0x6c,
	0x07, 0x30, 0xcc, 0x0d, 0x67, 0x3a, 0xdd, 0x16, 0x2e, 0xcd, 0x8d, 0xd6, 0x74, 0xba, 0x39, 0x81,
	0x74, 0x63, 0x87, 0xca, 0x09, 0x3d, 0x67, 0x87, 0x0a, 0xf9, 0x9a, 0x43, 0xe5, 0x84, 0x9e, 0x8f,
	0x0f, 0x15, 0xfe, 0x9f, 0x1f, 0x2a, 0xb8, 0x96, 0x1d, 0x2a, 0x8b, 0x5f, 0x73, 0xa8, 0x9c, 0xd0,
	0xf3, 0xc9, 0xa1, 0x22, 0x06, 0xe8, 0x23, 0xac, 0xe1, 0xa0, 0x39, 0x4b, 0x97, 0xfa, 0xa8, 0x54,
	0x55, 0x82, 0xf6, 0xc8, 0x9a, 0x6e, 0xfb, 0x0d, 0x7a, 0x04, 0x59, 0x9d, 0xbe, 0x31, 0xda, 0x14,
	0xbd, 0x4f, 0x59, 0x0c, 0xaf, 0x5d, 0x9a, 0x57, 0x55, 0x26, 0xd9, 0x32, 0x7a, 0x54, 0xe4, 0x95,
	0xee, 0x05, 0xc8, 0x1e, 0xc8, 0x1d, 0xcb, 0x6e, 0xe3, 0x11, 0xe1, 0x5e, 0xc8, 0x97, 0xaf, 0x33,
	0xb2, 0xef, 0xcf, 0x20, 0xdb, 0x46, 0xd1, 0x71, 0x87, 0xbf, 0x13, 0x52, 0x32, 0x1d, 0x1f, 0x42,
	0x7e, 0x36, 0xbe, 0xd9, 0x07, 0x6d, 0xbe, 0xc1, 0x48, 0xdf, 0x9f, 0xe9, 0x3b, 0x5c, 0x10, 0x34,
	0x7b, 0xd1, 0x9e, 0x86, 0x2f, 0xa1, 0x47, 0x07, 0x2c, 0x5f, 0x99, 0x9e, 0xbb, 0x61, 0x8a, 0x1e,
	0x9d, 0xf1, 0x04, 0x48, 0x9f, 0x65, 0x73, 0xd7, 0xc2, 0x47, 0x50, 0xc7, 0x62, 0x9a, 0xdf, 0xbc,
	0x34, 0xf9, 0x0e, 0x30, 0x73, 0xbb, 0x96, 0x53, 0x37, 0x3b, 0x96, 0x48, 0xbe, 0xbe, 0x1f, 0x22,
	0x2f, 0xe1, 0xda, 0x84, 0xd2, 0x5b, 0xbe, 0x39, 0xc6, 0xfa, 0x17, 0x5f, 0xc3, 0xea, 0x2b, 0x62,
	0xd2, 0x9f, 0x42, 0x67, 0x73, 0xa3, 0x33, 0xbe, 0x77, 0x55, 0x6e, 0xee, 0x8b, 0x20, 0x37, 0xba,
	0xe2, 0x00, 0x16, 0x0e, 0xa9, 0xd6, 0xb6, 0x4c, 0xb7, 0xc2, 0x91, 0xf7, 0xd6, 0xa5, 0x9e, 0x28,
	0x33, 0x59, 0x5e, 0xcb, 0xe2, 0x88, 0x3e, 0xf4, 0x43, 0x98, 0xb5, 0x82, 0x11, 0xfb, 0x19, 0xe6,
	0x83, 0xf7, 0x2e, 0xcd, 0x5a, 0xce, 0xb7, 0x6d, 0xd3, 0xd7, 0xe2, 0x64, 0x3d, 0xf4, 0x02, 0x41,
	0x2e, 0xd4, 0x2d, 0x7f, 0x05, 0x2e, 0x51, 0x01, 0x87, 0x5e, 0xc0, 0x53, 0x4d, 0x3d, 0x4b, 0x67,
	0x0d, 0xe2, 0x72, 0xe1, 0x1b, 0xaa, 0x69, 0xcf, 0xd2, 0x29, 0x3f, 0x29, 0x44, 0x35, 0x09, 0x00,
	0xab, 0xc9, 0xcb, 0xc5, 0x0e, 0x8d, 0xdb, 0x97, 0x56, 0xd3, 0x84, 0x4c, 0x9c, 0x1c, 0x19, 0xdd,
	0x87, 0xe4, 0x8e, 0x20, 0xe9, 0x69, 0x96, 0xc8, 0x8f, 0xbf, 0x7d, 0x73, 0xc6, 0x5b, 0xb3, 0x02,
	0x24, 0x6d, 0xed, 0x6c, 0xfc, 0x72, 0x89, 0xdd, 0xee, 0x14, 0xb0, 0xb5, 0x33, 0x71, 0x37, 0xcc,
	0xad, 0x41, 0xdc, 0xed, 0xa9, 0xc8, 0x5d, 0x48, 0xf7, 0x0c, 0xd3, 0xb2, 0x55, 0xb7, 0x7f, 0x64,
	0x57, 0x0b, 0x25, 0xc5, 0xc0, 0x67, 0x1c, 0xcb, 0x3d, 0x80, 0xc4, 0xb8, 0x8f, 0xba, 0xda, 0x8a,
	0xc7, 0x90, 0xf2, 0xb6, 0x4d, 0xe4, 0x3a, 0xcc, 0xf7, 0x34, 0xfb, 0xc8, 0x70, 0xa5, 0xc5, 0x08,
	0xc9, 0x8e, 0x34, 0x87, 0x9e, 0x69, 0x78, 0xe6, 0x9e, 0x9a, 0xee, 0x6b, 0xb2, 0x94, 0x00, 0x2b,
	0x88, 0xe5, 0xbe, 0x94, 0x00, 0x26, 0xdd, 0xd3, 0xac, 0x0e, 0x9f, 0x93, 0x06, 0x3a, 0xfc, 0x1f,
	0x40, 0xc6, 0x6d, 0x9f, 0x3d, 0x17, 0x81, 0xb4, 0x92, 0x12, 0x4d, 0x34, 0x97, 0xfa, 0x3e, 0xa4,
	0xdc, 0x62, 0xc2, 0x8b, 0x89, 0xb8, 0x97, 0x24, 0x05, 0x86, 0x97, 0x13, 0xf2, 0x00, 0x96, 0xbc,
	0x22, 0x18, 0x68, 0xc7, 0xb6, 0xba, 0xa2, 0xdb, 0x27, 0x1e, 0xd1, 0x0a, 0x9f, 0xc1, 0xce, 0xdd,
	0x3c, 0x54, 0x1d, 0x1b, 0x53, 0x55, 0xdc, 0x0a, 0xcd, 0xc3, 0x16, 0x0e, 0x1f, 0x45, 0xe2, 0x11,
	0x39, 0x9a, 0xfb, 0xfb, 0x89, 0x49, 0xe8, 0x9e, 0x7b, 0x20, 0xfb, 0x76, 0xd0, 0xda, 0x27, 0xfc,
	0xd5, 0x98, 0x92, 0xf1, 0xb0, 0x97, 0xda, 0x27, 0xe4, 0x3e, 0x2c, 0x06, 0x8c, 0x67, 0xc2, 0xec,
	0x25, 0x99, 0x22, 0xfb, 0x1c, 0x80, 0xe2, 0x3f, 0xe2, 0x0f, 0xd8, 0x89, 0x0f, 0xd4, 0xc9, 0xbb,
	0xb2, 0xac, 0xd7, 0x0f, 0xa5, 0xf6, 0x49, 0xee, 0x09, 0xa4, 0xbc, 0xcd, 0x21, 0x29, 0x41, 0xa6,
	0xa7, 0x0d, 0xd5, 0x49, 0x67, 0x29, 0x92, 0x71, 0xfc, 0x3c, 0x2d, 0x1d, 0x1d, 0xd9, 0x14, 0x43,
	0xa5, 0x4f, 0xd6, 0xa5, 0x7a, 0xda, 0x70, 0x3c, 0xca, 0xfd, 0x83, 0x04, 0xd9, 0x40, 0x8f, 0x88,
	0x26, 0xb0, 0x8b, 0xe9, 0xcc, 0x18, 0xca, 0x78, 0x35, 0xf5, 0x85, 0x71, 0x0d, 0x96, 0xd8, 0xe5,
	0x77, 0x2c, 0x2e, 0xee, 0xc0, 0x3c, 0x98, 0x0b, 0x78, 0xe5, 0x15, 0xf2, 0xe2, 0xe2, 0x7b, 0x17,
	0x6f, 0xcb, 0x45, 0x75, 0x72, 0xb1, 0x0a, 0xb3, 0x8b, 0x55, 0xca, 0x1e, 0x16, 0xb7, 0x5d, 0x2c,
	0xf7, 0x6f, 0x01, 0xc5, 0x30, 0x0a, 0x9b, 0x70, 0x63, 0x86, 0x62, 0x9e, 0x60, 0x2c, 0x06, 0x95,
	0x43, 0x17, 0x6f, 0xc1, 0xf2, 0x2c, 0xfd, 0x3c, 0x61, 0x59, 0x9a, 0xd2, 0x11, 0xd7, 0xad, 0xc0,
	0x82, 0x4f, 0x4d, 0x6f, 0x64, 0xbc, 0xaa, 0x62, 0x64, 0x7e, 0x0a, 0x29, 0x6f, 0x1f, 0x4b, 0x96,
	0x21, 0x76, 0xa8, 0x39, 0x0e, 0xb5, 0xcf, 0x85, 0xdb, 0xdc, 0xa1, 0xa7, 0xd0, 0xf8, 0xad, 0x57,
	0x8c, 0x72, 0x9f, 0x49, 0x90, 0xf6, 0x35, 0xb0, 0xe8, 0x26, 0x37, 0xe7, 0xbc, 0x01, 0x70, 0xab,
	0x61, 0x7c, 0x4b, 0x9e, 0xf8, 0x71, 0x2e, 0x78, 0x41, 0xbd, 0x0f, 0x8b, 0x3d, 0xc3, 0x9c, 0x8a,
	0x24, 0xbf, 0x4d, 0xcb, 0x3d, 0xc3, 0xf4, 0x47, 0x12, 0xc5, 0x31, 0x9f, 0x02, 0xe2, 0x11, 0x21,
	0xae, 0x0d, 0x7d, 0xe2, 0xb9, 0x4f, 0xbc, 0x1a, 0xa3, 0xd5, 0x77, 0x21, 0xed, 0xf7, 0x16, 0x8f,
	0x4a, 0xaa, 0xe3, 0x71, 0x15, 0xb9, 0x03, 0xe9, 0xc9, 0x06, 0x93, 0x18, 0x24, 0xdd, 0xd2, 0x70,
	0x13, 0x7d, 0xf7, 0x3b, 0x75, 0x45, 0x4e, 0xf5, 0x50, 0xa2, 0xae, 0x2b, 0xb0, 0xe0, 0xa3, 0xf4,
	0xe8, 0x9b, 0xf5, 0xd2, 0xa2, 0xca, 0x53, 0x76, 0xcd, 0x4d, 0xdb, 0x95, 0xbb, 0x07, 0x72, 0xb0,
	0xa5, 0x26, 0x4b, 0x10, 0xe5, 0x6f, 0x9e, 0xb8, 0xbe, 0x7c, 0x90, 0xfb, 0x57, 0x09, 0xb2, 0x81,
	0x46, 0x99, 0x6c, 0xf1, 0x52, 0xa6, 0x86, 0xdd, 0xf7, 0x9a, 0x58, 0x96, 0x47, 0x17, 0x85, 0xd4,
	0x9e, 0x36, 0xac, 0xd5, 0x95, 0x03, 0xa6, 0x0f, 0xab, 0xdf, 0x9a, 0x61, 0xf7, 0xb9, 0xd1, 0x2b,
	0xb0, 0x70, 0xda, 0x67, 0xb7, 0x53, 0xfd, 0x8c, 0x76, 0xbb, 0xac, 0x05, 0x15, 0xea, 0x65, 0xf9,
	0x44, 0x15, 0x71, 0xec, 0x2f, 0xc9, 0x2a, 0x2c, 0xea, 0xd6, 0x99, 0x19, 0x94, 0xe6, 0x29, 0xbd,
	0xe0, 0x4e, 0x8d, 0xe5, 0xf9, 0x63, 0x48, 0x74, 0xde, 0x57, 0x7f, 0x0c, 0xb9, 0xcd, 0xf6, 0x95,
	0x56, 0xfc, 0x56, 0x02, 0x39, 0xd8, 0x64, 0x93, 0x5d, 0xb8, 0xee, 0x7e, 0x5f, 0xe8, 0x1a, 0x3d,
	0xc3, 0x51, 0xe9, 0xb0, 0x6f, 0x99, 0xd4, 0x74, 0x5f, 0xab, 0xdd, 0x18, 0x5d, 0x14, 0x16, 0xf9,
	0xa7, 0x86, 0x5d, 0x9c, 0xaf, 0x89, 0x69, 0x65, 0x91, 0x7f, 0x74, 0xf0, 0x81, 0x5e, 0x36, 0xe6,
	0xfe, 0x09, 0xdb, 0x5c, 0x90, 0x8d, 0xbd, 0x16, 0x0c, 0xb2, 0xf9, 0xc0, 0x5c, 0x0d, 0xd2, 0xbe,
	0x16, 0x9e, 0x6c, 0x42, 0x84, 0x79, 0x31, 0x26, 0xbe, 0xe4, 0xf1, 0x8f, 0x94, 0xab, 0xee, 0x47,
	0xca, 0xd5, 0x96, 0xfb, 0x91, 0xb2, 0x1c, 0xf9, 0xe5, 0x7f, 0x17, 0x24, 0x85, 0x49, 0xe7, 0x7e,
	0x2d, 0x41, 0xc6, 0xdf, 0xbd, 0xb3, 0xae, 0x20, 0xf0, 0x52, 0x3e, 0xed, 0x7b, 0x01, 0x7f, 0xc9,
	0x8b, 0xb3, 0xa9, 0xc7, 0x6a, 0x01, 0x92, 0x98, 0x4a, 0x36, 0x75, 0x6c, 0x83, 0x0e, 0x44, 0xb1,
	0x43, 0x4f, 0x1b, 0x2a, 0x1c, 0x21, 0x7f, 0x09, 0xd9, 0x3e, 0xb5, 0x0d, 0x4b, 0x9f, 0xb8, 0x82,
	0x97, 0x78, 0x86, 0xc3, 0x63, 0x63, 0x2d, 0x58, 0x9c, 0x71, 0x1b, 0x20, 0x7f, 0x05, 0x04, 0x37,
	0x60, 0xfd, 0x40, 0x20, 0x36, 0xec, 0x94, 0x60, 0x4d, 0xc1, 0xd8, 0xff, 0x2b, 0xb0, 0x80, 0xd2,
	0xec, 0x6e, 0xe4, 0x77, 0xbd, 0x92, 0xed, 0x69, 0x58, 0x31, 0x74, 0xbc, 0xe1, 0xce, 0xf4, 0x86,
	0xe8, 0xe3, 0x75, 0xb8, 0x36, 0x45, 0xe1, 0xa9, 0x57, 0x12, 0xa0, 0xc1, 0x6a, 0x2c, 0x41, 0x36,
	0x70, 0x1d, 0x20, 0xab, 0x30, 0xcf, 0xed, 0x13, 0x4f, 0xc9, 0xeb, 0xee, 0x53, 0xd2, 0x15, 0x3c,
	0x60, 0xb3, 0x8a, 0x90, 0xca, 0xbd, 0x04, 0x32, 0xdd, 0xfb, 0xfb, 0x4f, 0x19, 0x29, 0x78, 0xe0,
	0x5e, 0x31, 0x46, 0xb9, 0xe3, 0x29, 0xee, 0x2b, 0x9f, 0x9f, 0xdf, 0xae, 0xc1, 0xc8, 0xed, 0x42,
	0x36, 0x70, 0x1b, 0x98, 0x7d, 0x2a, 0x4d, 0x9f, 0xb1, 0x73, 0xd3, 0x67, 0x6c, 0xee, 0x3e, 0xa4,
	0x7d, 0x77, 0x81, 0xaf, 0x77, 0x47, 0x6e, 0xd3, 0x2b, 0x7e, 0x55, 0x0b, 0x71, 0x95, 0xaf, 0xb1,
	0x27, 0x77, 0x21, 0xca, 0xbe, 0x01, 0x06, 0x3f, 0x15, 0x57, 0x10, 0x54, 0xf8, 0x5c, 0xee, 0x03,
	0xc8, 0xf8, 0x3b, 0xf8, 0x2b, 0x2d, 0x2b, 0x27, 0x20, 0x26, 0x1a, 0xf1, 0x95, 0x5f, 0x48, 0x10,
	0x65, 0x5f, 0x9f, 0x89, 0x0c, 0xa9, 0x47, 0xfb, 0xf5, 0x86, 0xaa, 0xd4, 0x9e, 0x3c, 0xad, 0x35,
	0x5b, 0x72, 0x88, 0x64, 0x21, 0xc9, 0x90, 0x52, 0xa5, 0x52, 0x3b, 0x68, 0xc9, 0x12, 0x21, 0x90,
	0x79, 0xda, 0xa8, 0xec, 0x37, 0xb6, 0xeb, 0xca, 0x5e, 0xad, 0xaa, 0x3e, 0x3d, 0x90, 0xe7, 0xc8,
	0x12, 0xc8, 0x5e, 0xac, 0xba, 0xff, 0xbc, 0x21, 0x87, 0x91, 0xcc, 0x27, 0x17, 0xc1, 0xb5, 0x01,
	0xa9, 0x28, 0x62, 0x4a, 0xcd, 0xb7, 0xe9, 0xfc, 0xca, 0x0d, 0x88, 0xb2, 0x0f, 0xdd, 0x24, 0x03,
	0xb0, 0xbb, 0xaf, 0x94, 0x9e, 0x97, 0x1a, 0xaa, 0xb2, 0x2e, 0x87, 0x56, 0x54, 0xf6, 0x96, 0x58,
	0x1c, 0xa2, 0xa8, 0xdb, 0x5e, 0xa9, 0xa2, 0x3e, 0x6d, 0x3c, 0x6e, 0x20, 0x57, 0x88, 0xa4, 0x20,
	0x8e, 0xc0, 0xb3, 0x75, 0xf5, 0x81, 0x2c, 0xe1, 0x62, 0x77, 0xa4, 0xae, 0xcb, 0x73, 0xbe, 0x71,
	0x51, 0x0e, 0x7b, 0xa4, 0xd7, 0xe5, 0x48, 0x2e, 0xf2, 0xe9, 0xaf, 0xf3, 0x6c, 0x83, 0x83, 0x9d,
	0x17, 0x9e, 0x0d, 0x0e, 0x76, 0x5e, 0xf8, 0x37, 0x40, 0x60, 0xb2, 0x81, 0x3b, 0x72, 0x37, 0x18,
	0x8f, 0xc5, 0x06, 0x62, 0x3c, 0xd9, 0xe0, 0x01, 0xc0, 0xe4, 0x3b, 0x23, 0x49, 0x42, 0xac, 0xb2,
	0xdf, 0x68, 0xd5, 0x3e, 0x41, 0x57, 0x27, 0x21, 0xd6, 0xac, 0x35, 0x9b, 0xf5, 0xfd, 0x86, 0x2c,
	0x91, 0x38, 0x44, 0x1e, 0xd7, 0x5e, 0x34, 0xe5, 0x39, 0x5c, 0x31, 0xf9, 0x86, 0x81, 0x2a, 0x6d,
	0x33, 0x47, 0x35, 0x2a, 0xf5, 0x5a, 0x53, 0x0e, 0x91, 0x05, 0x48, 0x57, 0x76, 0x4a, 0x8d, 0x46,
	0x6d, 0x57, 0xdd, 0x2b, 0x35, 0x1f, 0x37, 0x65, 0x69, 0xa5, 0x00, 0x30, 0xf9, 0x06, 0x81, 0x4c,
	0xe8, 0x43, 0x39, 0x44, 0x62, 0x10, 0xde, 0x6e, 0x3e, 0x96, 0xa5, 0x95, 0x4d, 0x88, 0xb2, 0x5c,
	0x60, 0xfb, 0xef, 0x96, 0x9a, 0x4d, 0xb5, 0xc4, 0xf7, 0xe7, 0x83, 0xb2, 0x2c, 0x4d, 0x06, 0x15,
	0x79, 0x4e, 0xa8, 0xfe, 0xfb, 0x30, 0x2c, 0xcd, 0xba, 0xe5, 0x91, 0x34, 0x24, 0xda, 0x86, 0xae,
	0xda, 0x9d, 0x53, 0xf5, 0x81, 0x1c, 0xc2, 0x61, 0xa5, 0x5e, 0x55, 0x95, 0x5a, 0xb3, 0x26, 0x12,
	0x06, 0x87, 0xbb, 0xf5, 0xc6, 0x63, 0xb5, 0xb2, 0x53, 0xab, 0x3c, 0x96, 0xe7, 0x58, 0x6a, 0xb8,
	0x58, 0xa9, 0xaa, 0xc8, 0x61, 0x57, 0xaa, 0xfa, 0xb4, 0xf5, 0x42, 0xad, 0xbc, 0xa8, 0xec, 0xd6,
	0xe4, 0x08, 0xb9, 0x0e, 0x84, 0x11, 0x7d, 0xa2, 0x1e, 0x94, 0x94, 0xd2, 0x9e, 0xda, 0xac, 0xb5,
	0x9e, 0x1e, 0xf0, 0x94, 0x61, 0xb2, 0xb5, 0x67, 0x6a, 0xb3, 0x55, 0x6a, 0x3d, 0x6d, 0xca, 0xf3,
	0x64, 0x11, 0xb2, 0x88, 0x35, 0x6a, 0xcf, 0x55, 0xe1, 0x0e, 0x39, 0x46, 0x6e, 0xc0, 0xa2, 0x20,
	0x68, 0xd5, 0xf7, 0xea, 0x8d, 0x8f, 0x05, 0x43, 0xdc, 0x65, 0x6e, 0xf9, 0x99, 0x13, 0x63, 0xe6,
	0xdd, 0x31, 0x09, 0x4c, 0xcc, 0x79, 0x5c, 0x7b, 0x21, 0x27, 0x5d, 0xce, 0x52, 0x55, 0xf1, 0xad,
	0x4d, 0xb9, 0x1a, 0x54, 0x6b, 0xcf, 0xea, 0x95, 0x1a, 0x6e, 0x58, 0x93, 0xd3, 0x58, 0x19, 0x08,
	0x6e, 0xef, 0x2b, 0x95, 0x9a, 0xca, 0xf3, 0x5c, 0xce, 0x90, 0x1c, 0x5c, 0xe7, 0x94, 0x2c, 0xef,
	0xbd, 0x34, 0x59, 0x57, 0xb5, 0x03, 0xa6, 0xee, 0xee, 0x7e, 0x4b, 0xad, 0x37, 0xb6, 0xf7, 0x65,
	0x99, 0xdc, 0x84, 0x6b, 0x7e, 0xdc, 0xd5, 0x70, 0x81, 0x5c, 0x83, 0x05, 0x9c, 0x2a, 0xd7, 0x4a,
	0x95, 0xfd, 0x86, 0x30, 0x55, 0x26, 0xae, 0x42, 0x02, 0xc6, 0xac, 0x91, 0x17, 0x03, 0x5a, 0xee,
	0xed, 0x57, 0x6b, 0xf2, 0x6d, 0x11, 0xdf, 0xaf, 0xe6, 0x60, 0x71, 0xc6, 0xc5, 0x09, 0x83, 0x35,
	0x09, 0x8b, 0xba, 0x2e, 0x87, 0x02, 0x48, 0x51, 0x96, 0x02, 0xc8, 0x26, 0x0f, 0xb1, 0x07, 0x79,
	0x28, 0x87, 0x31, 0x53, 0xbd, 0x3c, 0x5b, 0x72, 0x24, 0x00, 0x6d, 0x14, 0xe5, 0x68, 0x00, 0xda,
	0xda, 0x94, 0xe7, 0x31, 0x2a, 0xde, 0x85, 0xc5, 0x87, 0x72, 0x2c, 0x80, 0x15, 0x3f, 0xd8, 0x92,
	0xe3, 0x01, 0xec, 0x83, 0xf5, 0xa2, 0x9c, 0x40, 0x7b, 0xbd, 0x6b, 0x1f, 0x14, 0x37, 0x65, 0x08,
	0x80, 0xc5, 0x07, 0x9b, 0x0f, 0xe5, 0x64, 0x00, 0xdc, 0x7c, 0xf0, 0xe1, 0x16, 0x0f, 0xaa, 0xd7,
	0x8a, 0xf5, 0x0f, 0x8b, 0x3c, 0xa8, 0x3e, 0x43, 0x36, 0x1e, 0x6e, 0xca, 0x99, 0x00, 0xba, 0x51,
	0xfc, 0xf1, 0xd6, 0x43, 0x39, 0x2b, 0x5c, 0xfb, 0xef, 0x12, 0x64, 0xfc, 0x4f, 0x5b, 0xb4, 0x93,
	0xc5, 0xb2, 0xf6, 0xac, 0xa6, 0xbc, 0x50, 0xd7, 0x45, 0x29, 0x7b, 0xa0, 0x62, 0x53, 0x96, 0x02,
	0xd0, 0x66, 0x53, 0x9e, 0x0b, 0x40, 0x0f, 0x9b, 0xbc, 0x78, 0xbc, 0x5c, 0x5b, 0x4d, 0x7e, 0xd6,
	0x7a, 0xb0, 0x8d, 0x62, 0x93, 0x17, 0x8e, 0x07, 0xdb, 0xda, 0x14, 0x85, 0xe3, 0x5d, 0x5b, 0x7c,
	0xd8, 0x94, 0x63, 0x5c, 0xeb, 0xf2, 0x3f, 0x4b, 0x5f, 0xbc, 0xcd, 0x4b, 0x5f, 0xbe, 0xcd, 0x4b,
	0x5f, 0xbd, 0xcd, 0x4b, 0x7f, 0x78, 0x9b, 0x97, 0xfe, 0xf8, 0x36, 0x1f, 0xfa, 0xd3, 0xdb, 0x7c,
	0xe8, 0xcf, 0x6f, 0xf3, 0xd2, 0xcf, 0x47, 0xf9, 0xd0, 0xa7, 0xa3, 0x7c, 0xe8, 0x37, 0xa3, 0xbc,
	0xf4, 0xd9, 0x28, 0x1f, 0xfa, 0x7c, 0x94, 0x97, 0x7e, 0x37, 0xca, 0x4b, 0x5f, 0x8c, 0xf2, 0xd2,
	0x97, 0xa3, 0xbc, 0xf4, 0xd5, 0x28, 0x1f, 0xfa, 0xc3, 0x28, 0x2f, 0xfd, 0x71, 0x94, 0x0f, 0xfd,
	0x69, 0x94, 0x97, 0xfe, 0x3c, 0xca, 0x87, 0x7e, 0xfe, 0x2e, 0x1f, 0xfa, 0xf4, 0x5d, 0x5e, 0xfa,
	0xe5, 0xbb, 0x7c, 0xe8, 0x1f, 0xdf, 0xe5, 0xa5, 0x5f, 0xbd, 0xcb, 0x87, 0x7e, 0xf3, 0x2e, 0x1f,
	0xfa, 0xec, 0x5d, 0x5e, 0xfa, 0xfc, 0x5d, 0x5e, 0xfa, 0xdd, 0xbb, 0xbc, 0xf4, 0xf2, 0x87, 0x57,
	0xfa, 0x68, 0xee, 0x98, 0xfd, 0xc3, 0xc3, 0x79, 0xd6, 0x6e, 0x6e, 0xfc, 0x6f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x8d, 0x1f, 0x99, 0x95, 0x8d, 0x27, 0x00, 0x00,
}
