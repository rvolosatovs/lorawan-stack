// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import fmt "fmt"

var _ApplicationWebhookIdentifiersFieldPaths = [...]string{
	"application_ids",
	"application_ids.application_id",
	"webhook_id",
}

func (*ApplicationWebhookIdentifiers) FieldMaskPaths() []string {
	ret := make([]string, len(_ApplicationWebhookIdentifiersFieldPaths))
	copy(ret, _ApplicationWebhookIdentifiersFieldPaths[:])
	return ret
}

func (dst *ApplicationWebhookIdentifiers) SetFields(src *ApplicationWebhookIdentifiers, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "application_ids":
			dst.ApplicationIdentifiers = src.ApplicationIdentifiers
		case "application_ids.application_id":
			dst.ApplicationIdentifiers.SetFields(&src.ApplicationIdentifiers, _pathsWithoutPrefix("application_ids", paths)...)
		case "webhook_id":
			dst.WebhookID = src.WebhookID
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _ApplicationWebhookFieldPaths = [...]string{
	"base_url",
	"created_at",
	"downlink_ack",
	"downlink_ack.path",
	"downlink_failed",
	"downlink_failed.path",
	"downlink_nack",
	"downlink_nack.path",
	"downlink_queued",
	"downlink_queued.path",
	"downlink_sent",
	"downlink_sent.path",
	"format",
	"headers",
	"ids",
	"ids.application_ids",
	"ids.application_ids.application_id",
	"ids.webhook_id",
	"join_accept",
	"join_accept.path",
	"location_solved",
	"location_solved.path",
	"updated_at",
	"uplink_message",
	"uplink_message.path",
}

func (*ApplicationWebhook) FieldMaskPaths() []string {
	ret := make([]string, len(_ApplicationWebhookFieldPaths))
	copy(ret, _ApplicationWebhookFieldPaths[:])
	return ret
}

func (dst *ApplicationWebhook) SetFields(src *ApplicationWebhook, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "base_url":
			dst.BaseURL = src.BaseURL
		case "created_at":
			dst.CreatedAt = src.CreatedAt
		case "downlink_ack":
			dst.DownlinkAck = src.DownlinkAck
		case "downlink_ack.path":
			if dst.DownlinkAck == nil {
				dst.DownlinkAck = &ApplicationWebhook_Message{}
			}
			dst.DownlinkAck.SetFields(src.DownlinkAck, _pathsWithoutPrefix("downlink_ack", paths)...)
		case "downlink_failed":
			dst.DownlinkFailed = src.DownlinkFailed
		case "downlink_failed.path":
			if dst.DownlinkFailed == nil {
				dst.DownlinkFailed = &ApplicationWebhook_Message{}
			}
			dst.DownlinkFailed.SetFields(src.DownlinkFailed, _pathsWithoutPrefix("downlink_failed", paths)...)
		case "downlink_nack":
			dst.DownlinkNack = src.DownlinkNack
		case "downlink_nack.path":
			if dst.DownlinkNack == nil {
				dst.DownlinkNack = &ApplicationWebhook_Message{}
			}
			dst.DownlinkNack.SetFields(src.DownlinkNack, _pathsWithoutPrefix("downlink_nack", paths)...)
		case "downlink_queued":
			dst.DownlinkQueued = src.DownlinkQueued
		case "downlink_queued.path":
			if dst.DownlinkQueued == nil {
				dst.DownlinkQueued = &ApplicationWebhook_Message{}
			}
			dst.DownlinkQueued.SetFields(src.DownlinkQueued, _pathsWithoutPrefix("downlink_queued", paths)...)
		case "downlink_sent":
			dst.DownlinkSent = src.DownlinkSent
		case "downlink_sent.path":
			if dst.DownlinkSent == nil {
				dst.DownlinkSent = &ApplicationWebhook_Message{}
			}
			dst.DownlinkSent.SetFields(src.DownlinkSent, _pathsWithoutPrefix("downlink_sent", paths)...)
		case "format":
			dst.Format = src.Format
		case "headers":
			dst.Headers = src.Headers
		case "ids":
			dst.ApplicationWebhookIdentifiers = src.ApplicationWebhookIdentifiers
		case "ids.application_ids":
			dst.ApplicationWebhookIdentifiers.SetFields(&src.ApplicationWebhookIdentifiers, _pathsWithoutPrefix("ids", paths)...)
		case "ids.application_ids.application_id":
			dst.ApplicationWebhookIdentifiers.SetFields(&src.ApplicationWebhookIdentifiers, _pathsWithoutPrefix("ids", paths)...)
		case "ids.webhook_id":
			dst.ApplicationWebhookIdentifiers.SetFields(&src.ApplicationWebhookIdentifiers, _pathsWithoutPrefix("ids", paths)...)
		case "join_accept":
			dst.JoinAccept = src.JoinAccept
		case "join_accept.path":
			if dst.JoinAccept == nil {
				dst.JoinAccept = &ApplicationWebhook_Message{}
			}
			dst.JoinAccept.SetFields(src.JoinAccept, _pathsWithoutPrefix("join_accept", paths)...)
		case "location_solved":
			dst.LocationSolved = src.LocationSolved
		case "location_solved.path":
			if dst.LocationSolved == nil {
				dst.LocationSolved = &ApplicationWebhook_Message{}
			}
			dst.LocationSolved.SetFields(src.LocationSolved, _pathsWithoutPrefix("location_solved", paths)...)
		case "updated_at":
			dst.UpdatedAt = src.UpdatedAt
		case "uplink_message":
			dst.UplinkMessage = src.UplinkMessage
		case "uplink_message.path":
			if dst.UplinkMessage == nil {
				dst.UplinkMessage = &ApplicationWebhook_Message{}
			}
			dst.UplinkMessage.SetFields(src.UplinkMessage, _pathsWithoutPrefix("uplink_message", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _ApplicationWebhook_MessageFieldPaths = [...]string{
	"path",
}

func (*ApplicationWebhook_Message) FieldMaskPaths() []string {
	ret := make([]string, len(_ApplicationWebhook_MessageFieldPaths))
	copy(ret, _ApplicationWebhook_MessageFieldPaths[:])
	return ret
}

func (dst *ApplicationWebhook_Message) SetFields(src *ApplicationWebhook_Message, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "path":
			dst.Path = src.Path
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _ApplicationWebhooksFieldPaths = [...]string{
	"webhooks",
}

func (*ApplicationWebhooks) FieldMaskPaths() []string {
	ret := make([]string, len(_ApplicationWebhooksFieldPaths))
	copy(ret, _ApplicationWebhooksFieldPaths[:])
	return ret
}

func (dst *ApplicationWebhooks) SetFields(src *ApplicationWebhooks, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "webhooks":
			dst.Webhooks = src.Webhooks
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _ApplicationWebhookFormatsFieldPaths = [...]string{
	"formats",
}

func (*ApplicationWebhookFormats) FieldMaskPaths() []string {
	ret := make([]string, len(_ApplicationWebhookFormatsFieldPaths))
	copy(ret, _ApplicationWebhookFormatsFieldPaths[:])
	return ret
}

func (dst *ApplicationWebhookFormats) SetFields(src *ApplicationWebhookFormats, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "formats":
			dst.Formats = src.Formats
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _GetApplicationWebhookRequestFieldPaths = [...]string{
	"field_mask",
	"ids",
	"ids.application_ids",
	"ids.application_ids.application_id",
	"ids.webhook_id",
}

func (*GetApplicationWebhookRequest) FieldMaskPaths() []string {
	ret := make([]string, len(_GetApplicationWebhookRequestFieldPaths))
	copy(ret, _GetApplicationWebhookRequestFieldPaths[:])
	return ret
}

func (dst *GetApplicationWebhookRequest) SetFields(src *GetApplicationWebhookRequest, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "field_mask":
			dst.FieldMask = src.FieldMask
		case "ids":
			dst.ApplicationWebhookIdentifiers = src.ApplicationWebhookIdentifiers
		case "ids.application_ids":
			dst.ApplicationWebhookIdentifiers.SetFields(&src.ApplicationWebhookIdentifiers, _pathsWithoutPrefix("ids", paths)...)
		case "ids.application_ids.application_id":
			dst.ApplicationWebhookIdentifiers.SetFields(&src.ApplicationWebhookIdentifiers, _pathsWithoutPrefix("ids", paths)...)
		case "ids.webhook_id":
			dst.ApplicationWebhookIdentifiers.SetFields(&src.ApplicationWebhookIdentifiers, _pathsWithoutPrefix("ids", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _ListApplicationWebhooksRequestFieldPaths = [...]string{
	"application_ids",
	"application_ids.application_id",
	"field_mask",
}

func (*ListApplicationWebhooksRequest) FieldMaskPaths() []string {
	ret := make([]string, len(_ListApplicationWebhooksRequestFieldPaths))
	copy(ret, _ListApplicationWebhooksRequestFieldPaths[:])
	return ret
}

func (dst *ListApplicationWebhooksRequest) SetFields(src *ListApplicationWebhooksRequest, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "application_ids":
			dst.ApplicationIdentifiers = src.ApplicationIdentifiers
		case "application_ids.application_id":
			dst.ApplicationIdentifiers.SetFields(&src.ApplicationIdentifiers, _pathsWithoutPrefix("application_ids", paths)...)
		case "field_mask":
			dst.FieldMask = src.FieldMask
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _SetApplicationWebhookRequestFieldPaths = [...]string{
	"field_mask",
	"webhook",
	"webhook.base_url",
	"webhook.created_at",
	"webhook.downlink_ack",
	"webhook.downlink_ack.path",
	"webhook.downlink_failed",
	"webhook.downlink_failed.path",
	"webhook.downlink_nack",
	"webhook.downlink_nack.path",
	"webhook.downlink_queued",
	"webhook.downlink_queued.path",
	"webhook.downlink_sent",
	"webhook.downlink_sent.path",
	"webhook.format",
	"webhook.headers",
	"webhook.ids",
	"webhook.ids.application_ids",
	"webhook.ids.application_ids.application_id",
	"webhook.ids.webhook_id",
	"webhook.join_accept",
	"webhook.join_accept.path",
	"webhook.location_solved",
	"webhook.location_solved.path",
	"webhook.updated_at",
	"webhook.uplink_message",
	"webhook.uplink_message.path",
}

func (*SetApplicationWebhookRequest) FieldMaskPaths() []string {
	ret := make([]string, len(_SetApplicationWebhookRequestFieldPaths))
	copy(ret, _SetApplicationWebhookRequestFieldPaths[:])
	return ret
}

func (dst *SetApplicationWebhookRequest) SetFields(src *SetApplicationWebhookRequest, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "field_mask":
			dst.FieldMask = src.FieldMask
		case "webhook":
			dst.ApplicationWebhook = src.ApplicationWebhook
		case "webhook.base_url":
			dst.ApplicationWebhook.SetFields(&src.ApplicationWebhook, _pathsWithoutPrefix("webhook", paths)...)
		case "webhook.created_at":
			dst.ApplicationWebhook.SetFields(&src.ApplicationWebhook, _pathsWithoutPrefix("webhook", paths)...)
		case "webhook.downlink_ack":
			dst.ApplicationWebhook.SetFields(&src.ApplicationWebhook, _pathsWithoutPrefix("webhook", paths)...)
		case "webhook.downlink_ack.path":
			dst.ApplicationWebhook.SetFields(&src.ApplicationWebhook, _pathsWithoutPrefix("webhook", paths)...)
		case "webhook.downlink_failed":
			dst.ApplicationWebhook.SetFields(&src.ApplicationWebhook, _pathsWithoutPrefix("webhook", paths)...)
		case "webhook.downlink_failed.path":
			dst.ApplicationWebhook.SetFields(&src.ApplicationWebhook, _pathsWithoutPrefix("webhook", paths)...)
		case "webhook.downlink_nack":
			dst.ApplicationWebhook.SetFields(&src.ApplicationWebhook, _pathsWithoutPrefix("webhook", paths)...)
		case "webhook.downlink_nack.path":
			dst.ApplicationWebhook.SetFields(&src.ApplicationWebhook, _pathsWithoutPrefix("webhook", paths)...)
		case "webhook.downlink_queued":
			dst.ApplicationWebhook.SetFields(&src.ApplicationWebhook, _pathsWithoutPrefix("webhook", paths)...)
		case "webhook.downlink_queued.path":
			dst.ApplicationWebhook.SetFields(&src.ApplicationWebhook, _pathsWithoutPrefix("webhook", paths)...)
		case "webhook.downlink_sent":
			dst.ApplicationWebhook.SetFields(&src.ApplicationWebhook, _pathsWithoutPrefix("webhook", paths)...)
		case "webhook.downlink_sent.path":
			dst.ApplicationWebhook.SetFields(&src.ApplicationWebhook, _pathsWithoutPrefix("webhook", paths)...)
		case "webhook.format":
			dst.ApplicationWebhook.SetFields(&src.ApplicationWebhook, _pathsWithoutPrefix("webhook", paths)...)
		case "webhook.headers":
			dst.ApplicationWebhook.SetFields(&src.ApplicationWebhook, _pathsWithoutPrefix("webhook", paths)...)
		case "webhook.ids":
			dst.ApplicationWebhook.SetFields(&src.ApplicationWebhook, _pathsWithoutPrefix("webhook", paths)...)
		case "webhook.ids.application_ids":
			dst.ApplicationWebhook.SetFields(&src.ApplicationWebhook, _pathsWithoutPrefix("webhook", paths)...)
		case "webhook.ids.application_ids.application_id":
			dst.ApplicationWebhook.SetFields(&src.ApplicationWebhook, _pathsWithoutPrefix("webhook", paths)...)
		case "webhook.ids.webhook_id":
			dst.ApplicationWebhook.SetFields(&src.ApplicationWebhook, _pathsWithoutPrefix("webhook", paths)...)
		case "webhook.join_accept":
			dst.ApplicationWebhook.SetFields(&src.ApplicationWebhook, _pathsWithoutPrefix("webhook", paths)...)
		case "webhook.join_accept.path":
			dst.ApplicationWebhook.SetFields(&src.ApplicationWebhook, _pathsWithoutPrefix("webhook", paths)...)
		case "webhook.location_solved":
			dst.ApplicationWebhook.SetFields(&src.ApplicationWebhook, _pathsWithoutPrefix("webhook", paths)...)
		case "webhook.location_solved.path":
			dst.ApplicationWebhook.SetFields(&src.ApplicationWebhook, _pathsWithoutPrefix("webhook", paths)...)
		case "webhook.updated_at":
			dst.ApplicationWebhook.SetFields(&src.ApplicationWebhook, _pathsWithoutPrefix("webhook", paths)...)
		case "webhook.uplink_message":
			dst.ApplicationWebhook.SetFields(&src.ApplicationWebhook, _pathsWithoutPrefix("webhook", paths)...)
		case "webhook.uplink_message.path":
			dst.ApplicationWebhook.SetFields(&src.ApplicationWebhook, _pathsWithoutPrefix("webhook", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}
