// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import fmt "fmt"

var _OrganizationFieldPaths = [...]string{
	"attributes",
	"contact_info",
	"created_at",
	"description",
	"ids",
	"ids.organization_id",
	"name",
	"updated_at",
}

func (*Organization) FieldMaskPaths() []string {
	ret := make([]string, len(_OrganizationFieldPaths))
	copy(ret, _OrganizationFieldPaths[:])
	return ret
}

func (dst *Organization) SetFields(src *Organization, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "attributes":
			dst.Attributes = src.Attributes
		case "contact_info":
			dst.ContactInfo = src.ContactInfo
		case "created_at":
			dst.CreatedAt = src.CreatedAt
		case "description":
			dst.Description = src.Description
		case "ids":
			dst.OrganizationIdentifiers = src.OrganizationIdentifiers
		case "ids.organization_id":
			dst.OrganizationIdentifiers.SetFields(&src.OrganizationIdentifiers, _pathsWithoutPrefix("ids", paths)...)
		case "name":
			dst.Name = src.Name
		case "updated_at":
			dst.UpdatedAt = src.UpdatedAt
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _OrganizationsFieldPaths = [...]string{
	"organizations",
}

func (*Organizations) FieldMaskPaths() []string {
	ret := make([]string, len(_OrganizationsFieldPaths))
	copy(ret, _OrganizationsFieldPaths[:])
	return ret
}

func (dst *Organizations) SetFields(src *Organizations, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "organizations":
			dst.Organizations = src.Organizations
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _GetOrganizationRequestFieldPaths = [...]string{
	"field_mask",
	"organization_ids",
	"organization_ids.organization_id",
}

func (*GetOrganizationRequest) FieldMaskPaths() []string {
	ret := make([]string, len(_GetOrganizationRequestFieldPaths))
	copy(ret, _GetOrganizationRequestFieldPaths[:])
	return ret
}

func (dst *GetOrganizationRequest) SetFields(src *GetOrganizationRequest, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "field_mask":
			dst.FieldMask = src.FieldMask
		case "organization_ids":
			dst.OrganizationIdentifiers = src.OrganizationIdentifiers
		case "organization_ids.organization_id":
			dst.OrganizationIdentifiers.SetFields(&src.OrganizationIdentifiers, _pathsWithoutPrefix("organization_ids", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _ListOrganizationsRequestFieldPaths = [...]string{
	"collaborator",
	"collaborator.organization_ids",
	"collaborator.organization_ids.organization_id",
	"collaborator.user_ids",
	"collaborator.user_ids.email",
	"collaborator.user_ids.user_id",
	"field_mask",
	"limit",
	"order",
	"page",
}

func (*ListOrganizationsRequest) FieldMaskPaths() []string {
	ret := make([]string, len(_ListOrganizationsRequestFieldPaths))
	copy(ret, _ListOrganizationsRequestFieldPaths[:])
	return ret
}

func (dst *ListOrganizationsRequest) SetFields(src *ListOrganizationsRequest, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "collaborator":
			dst.Collaborator = src.Collaborator
		case "collaborator.organization_ids":
			if dst.Collaborator == nil {
				dst.Collaborator = &OrganizationOrUserIdentifiers{}
			}
			dst.Collaborator.SetFields(src.Collaborator, _pathsWithoutPrefix("collaborator", paths)...)
		case "collaborator.organization_ids.organization_id":
			if dst.Collaborator == nil {
				dst.Collaborator = &OrganizationOrUserIdentifiers{}
			}
			dst.Collaborator.SetFields(src.Collaborator, _pathsWithoutPrefix("collaborator", paths)...)
		case "collaborator.user_ids":
			if dst.Collaborator == nil {
				dst.Collaborator = &OrganizationOrUserIdentifiers{}
			}
			dst.Collaborator.SetFields(src.Collaborator, _pathsWithoutPrefix("collaborator", paths)...)
		case "collaborator.user_ids.email":
			if dst.Collaborator == nil {
				dst.Collaborator = &OrganizationOrUserIdentifiers{}
			}
			dst.Collaborator.SetFields(src.Collaborator, _pathsWithoutPrefix("collaborator", paths)...)
		case "collaborator.user_ids.user_id":
			if dst.Collaborator == nil {
				dst.Collaborator = &OrganizationOrUserIdentifiers{}
			}
			dst.Collaborator.SetFields(src.Collaborator, _pathsWithoutPrefix("collaborator", paths)...)
		case "field_mask":
			dst.FieldMask = src.FieldMask
		case "limit":
			dst.Limit = src.Limit
		case "order":
			dst.Order = src.Order
		case "page":
			dst.Page = src.Page
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _CreateOrganizationRequestFieldPaths = [...]string{
	"collaborator",
	"collaborator.organization_ids",
	"collaborator.organization_ids.organization_id",
	"collaborator.user_ids",
	"collaborator.user_ids.email",
	"collaborator.user_ids.user_id",
	"organization",
	"organization.attributes",
	"organization.contact_info",
	"organization.created_at",
	"organization.description",
	"organization.ids",
	"organization.ids.organization_id",
	"organization.name",
	"organization.updated_at",
}

func (*CreateOrganizationRequest) FieldMaskPaths() []string {
	ret := make([]string, len(_CreateOrganizationRequestFieldPaths))
	copy(ret, _CreateOrganizationRequestFieldPaths[:])
	return ret
}

func (dst *CreateOrganizationRequest) SetFields(src *CreateOrganizationRequest, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "collaborator":
			dst.Collaborator = src.Collaborator
		case "collaborator.organization_ids":
			dst.Collaborator.SetFields(&src.Collaborator, _pathsWithoutPrefix("collaborator", paths)...)
		case "collaborator.organization_ids.organization_id":
			dst.Collaborator.SetFields(&src.Collaborator, _pathsWithoutPrefix("collaborator", paths)...)
		case "collaborator.user_ids":
			dst.Collaborator.SetFields(&src.Collaborator, _pathsWithoutPrefix("collaborator", paths)...)
		case "collaborator.user_ids.email":
			dst.Collaborator.SetFields(&src.Collaborator, _pathsWithoutPrefix("collaborator", paths)...)
		case "collaborator.user_ids.user_id":
			dst.Collaborator.SetFields(&src.Collaborator, _pathsWithoutPrefix("collaborator", paths)...)
		case "organization":
			dst.Organization = src.Organization
		case "organization.attributes":
			dst.Organization.SetFields(&src.Organization, _pathsWithoutPrefix("organization", paths)...)
		case "organization.contact_info":
			dst.Organization.SetFields(&src.Organization, _pathsWithoutPrefix("organization", paths)...)
		case "organization.created_at":
			dst.Organization.SetFields(&src.Organization, _pathsWithoutPrefix("organization", paths)...)
		case "organization.description":
			dst.Organization.SetFields(&src.Organization, _pathsWithoutPrefix("organization", paths)...)
		case "organization.ids":
			dst.Organization.SetFields(&src.Organization, _pathsWithoutPrefix("organization", paths)...)
		case "organization.ids.organization_id":
			dst.Organization.SetFields(&src.Organization, _pathsWithoutPrefix("organization", paths)...)
		case "organization.name":
			dst.Organization.SetFields(&src.Organization, _pathsWithoutPrefix("organization", paths)...)
		case "organization.updated_at":
			dst.Organization.SetFields(&src.Organization, _pathsWithoutPrefix("organization", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _UpdateOrganizationRequestFieldPaths = [...]string{
	"field_mask",
	"organization",
	"organization.attributes",
	"organization.contact_info",
	"organization.created_at",
	"organization.description",
	"organization.ids",
	"organization.ids.organization_id",
	"organization.name",
	"organization.updated_at",
}

func (*UpdateOrganizationRequest) FieldMaskPaths() []string {
	ret := make([]string, len(_UpdateOrganizationRequestFieldPaths))
	copy(ret, _UpdateOrganizationRequestFieldPaths[:])
	return ret
}

func (dst *UpdateOrganizationRequest) SetFields(src *UpdateOrganizationRequest, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "field_mask":
			dst.FieldMask = src.FieldMask
		case "organization":
			dst.Organization = src.Organization
		case "organization.attributes":
			dst.Organization.SetFields(&src.Organization, _pathsWithoutPrefix("organization", paths)...)
		case "organization.contact_info":
			dst.Organization.SetFields(&src.Organization, _pathsWithoutPrefix("organization", paths)...)
		case "organization.created_at":
			dst.Organization.SetFields(&src.Organization, _pathsWithoutPrefix("organization", paths)...)
		case "organization.description":
			dst.Organization.SetFields(&src.Organization, _pathsWithoutPrefix("organization", paths)...)
		case "organization.ids":
			dst.Organization.SetFields(&src.Organization, _pathsWithoutPrefix("organization", paths)...)
		case "organization.ids.organization_id":
			dst.Organization.SetFields(&src.Organization, _pathsWithoutPrefix("organization", paths)...)
		case "organization.name":
			dst.Organization.SetFields(&src.Organization, _pathsWithoutPrefix("organization", paths)...)
		case "organization.updated_at":
			dst.Organization.SetFields(&src.Organization, _pathsWithoutPrefix("organization", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _CreateOrganizationAPIKeyRequestFieldPaths = [...]string{
	"name",
	"organization_ids",
	"organization_ids.organization_id",
	"rights",
}

func (*CreateOrganizationAPIKeyRequest) FieldMaskPaths() []string {
	ret := make([]string, len(_CreateOrganizationAPIKeyRequestFieldPaths))
	copy(ret, _CreateOrganizationAPIKeyRequestFieldPaths[:])
	return ret
}

func (dst *CreateOrganizationAPIKeyRequest) SetFields(src *CreateOrganizationAPIKeyRequest, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "name":
			dst.Name = src.Name
		case "organization_ids":
			dst.OrganizationIdentifiers = src.OrganizationIdentifiers
		case "organization_ids.organization_id":
			dst.OrganizationIdentifiers.SetFields(&src.OrganizationIdentifiers, _pathsWithoutPrefix("organization_ids", paths)...)
		case "rights":
			dst.Rights = src.Rights
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _UpdateOrganizationAPIKeyRequestFieldPaths = [...]string{
	"api_key",
	"api_key.id",
	"api_key.key",
	"api_key.name",
	"api_key.rights",
	"organization_ids",
	"organization_ids.organization_id",
}

func (*UpdateOrganizationAPIKeyRequest) FieldMaskPaths() []string {
	ret := make([]string, len(_UpdateOrganizationAPIKeyRequestFieldPaths))
	copy(ret, _UpdateOrganizationAPIKeyRequestFieldPaths[:])
	return ret
}

func (dst *UpdateOrganizationAPIKeyRequest) SetFields(src *UpdateOrganizationAPIKeyRequest, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "api_key":
			dst.APIKey = src.APIKey
		case "api_key.id":
			dst.APIKey.SetFields(&src.APIKey, _pathsWithoutPrefix("api_key", paths)...)
		case "api_key.key":
			dst.APIKey.SetFields(&src.APIKey, _pathsWithoutPrefix("api_key", paths)...)
		case "api_key.name":
			dst.APIKey.SetFields(&src.APIKey, _pathsWithoutPrefix("api_key", paths)...)
		case "api_key.rights":
			dst.APIKey.SetFields(&src.APIKey, _pathsWithoutPrefix("api_key", paths)...)
		case "organization_ids":
			dst.OrganizationIdentifiers = src.OrganizationIdentifiers
		case "organization_ids.organization_id":
			dst.OrganizationIdentifiers.SetFields(&src.OrganizationIdentifiers, _pathsWithoutPrefix("organization_ids", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _SetOrganizationCollaboratorRequestFieldPaths = [...]string{
	"collaborator",
	"collaborator.ids",
	"collaborator.ids.organization_ids",
	"collaborator.ids.organization_ids.organization_id",
	"collaborator.ids.user_ids",
	"collaborator.ids.user_ids.email",
	"collaborator.ids.user_ids.user_id",
	"collaborator.rights",
	"organization_ids",
	"organization_ids.organization_id",
}

func (*SetOrganizationCollaboratorRequest) FieldMaskPaths() []string {
	ret := make([]string, len(_SetOrganizationCollaboratorRequestFieldPaths))
	copy(ret, _SetOrganizationCollaboratorRequestFieldPaths[:])
	return ret
}

func (dst *SetOrganizationCollaboratorRequest) SetFields(src *SetOrganizationCollaboratorRequest, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "collaborator":
			dst.Collaborator = src.Collaborator
		case "collaborator.ids":
			dst.Collaborator.SetFields(&src.Collaborator, _pathsWithoutPrefix("collaborator", paths)...)
		case "collaborator.ids.organization_ids":
			dst.Collaborator.SetFields(&src.Collaborator, _pathsWithoutPrefix("collaborator", paths)...)
		case "collaborator.ids.organization_ids.organization_id":
			dst.Collaborator.SetFields(&src.Collaborator, _pathsWithoutPrefix("collaborator", paths)...)
		case "collaborator.ids.user_ids":
			dst.Collaborator.SetFields(&src.Collaborator, _pathsWithoutPrefix("collaborator", paths)...)
		case "collaborator.ids.user_ids.email":
			dst.Collaborator.SetFields(&src.Collaborator, _pathsWithoutPrefix("collaborator", paths)...)
		case "collaborator.ids.user_ids.user_id":
			dst.Collaborator.SetFields(&src.Collaborator, _pathsWithoutPrefix("collaborator", paths)...)
		case "collaborator.rights":
			dst.Collaborator.SetFields(&src.Collaborator, _pathsWithoutPrefix("collaborator", paths)...)
		case "organization_ids":
			dst.OrganizationIdentifiers = src.OrganizationIdentifiers
		case "organization_ids.organization_id":
			dst.OrganizationIdentifiers.SetFields(&src.OrganizationIdentifiers, _pathsWithoutPrefix("organization_ids", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}
