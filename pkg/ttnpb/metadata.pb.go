// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/TheThingsNetwork/ttn/api/metadata.proto

package ttnpb

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import google_protobuf3 "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/types"

import time "time"

import strconv "strconv"

import encoding_binary "encoding/binary"
import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// LocationSource indicates the source of a Location
type LocationSource int32

const (
	// The source of the location is not known or not set
	SOURCE_UNKNOWN LocationSource = 0
	// The location is determined by GPS
	SOURCE_GPS LocationSource = 1
	// The location is fixed by configuration
	SOURCE_CONFIG LocationSource = 2
	// The location is set in and updated from a registry
	SOURCE_REGISTRY LocationSource = 3
	// The location is estimated with IP Geolocation
	SOURCE_IP_GEOLOCATION LocationSource = 4
)

var LocationSource_name = map[int32]string{
	0: "SOURCE_UNKNOWN",
	1: "SOURCE_GPS",
	2: "SOURCE_CONFIG",
	3: "SOURCE_REGISTRY",
	4: "SOURCE_IP_GEOLOCATION",
}
var LocationSource_value = map[string]int32{
	"SOURCE_UNKNOWN":        0,
	"SOURCE_GPS":            1,
	"SOURCE_CONFIG":         2,
	"SOURCE_REGISTRY":       3,
	"SOURCE_IP_GEOLOCATION": 4,
}

func (LocationSource) EnumDescriptor() ([]byte, []int) { return fileDescriptorMetadata, []int{0} }

// RxMetadata contains metadata for a received message. Each antenna that receives
// a message corresponds to one RxMetadata.
type RxMetadata struct {
	// gateway_id is the ID of the gateway that received the message
	GatewayIdentifier `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,embedded=gateway_id" json:"gateway_id"`
	// Index of the antenna that received the message
	AntennaIndex uint32 `protobuf:"varint,2,opt,name=antenna_index,json=antennaIndex,proto3" json:"antenna_index,omitempty"`
	// Index of the channel that received the message
	ChannelIndex uint32 `protobuf:"varint,3,opt,name=channel_index,json=channelIndex,proto3" json:"channel_index,omitempty"`
	// Types that are valid to be assigned to ConcentratorTimestamp:
	//	*RxMetadata_Timestamp
	//	*RxMetadata_EncryptedTimestamp
	ConcentratorTimestamp isRxMetadata_ConcentratorTimestamp `protobuf_oneof:"concentrator_timestamp"`
	// Real time
	Time *time.Time `protobuf:"bytes,6,opt,name=time,stdtime" json:"time,omitempty"`
	// Received signal strength in dBm
	RSSI float32 `protobuf:"fixed32,7,opt,name=rssi,proto3" json:"rssi,omitempty"`
	// Signal-to-noise-ratio in dB
	SNR float32 `protobuf:"fixed32,8,opt,name=snr,proto3" json:"snr,omitempty"`
	// Location of the antenna
	Location *Location `protobuf:"bytes,9,opt,name=location" json:"location,omitempty"`
	// Index of the AES key the fine timestamps were encrypted with
	AESKeyIndex uint32 `protobuf:"varint,10,opt,name=aes_key_index,json=aesKeyIndex,proto3" json:"aes_key_index,omitempty"`
	// Advanced metadata fields
	// - can be used for advanced information or experimental features that are not yet formally defined in the API
	// - field names are written in snake_case
	Advanced *google_protobuf3.Struct `protobuf:"bytes,99,opt,name=advanced" json:"advanced,omitempty"`
}

func (m *RxMetadata) Reset()                    { *m = RxMetadata{} }
func (m *RxMetadata) String() string            { return proto.CompactTextString(m) }
func (*RxMetadata) ProtoMessage()               {}
func (*RxMetadata) Descriptor() ([]byte, []int) { return fileDescriptorMetadata, []int{0} }

type isRxMetadata_ConcentratorTimestamp interface {
	isRxMetadata_ConcentratorTimestamp()
	Equal(interface{}) bool
	VerboseEqual(interface{}) error
	MarshalTo([]byte) (int, error)
	Size() int
}

type RxMetadata_Timestamp struct {
	Timestamp uint64 `protobuf:"varint,4,opt,name=timestamp,proto3,oneof"`
}
type RxMetadata_EncryptedTimestamp struct {
	EncryptedTimestamp string `protobuf:"bytes,5,opt,name=encrypted_timestamp,json=encryptedTimestamp,proto3,oneof"`
}

func (*RxMetadata_Timestamp) isRxMetadata_ConcentratorTimestamp()          {}
func (*RxMetadata_EncryptedTimestamp) isRxMetadata_ConcentratorTimestamp() {}

func (m *RxMetadata) GetConcentratorTimestamp() isRxMetadata_ConcentratorTimestamp {
	if m != nil {
		return m.ConcentratorTimestamp
	}
	return nil
}

func (m *RxMetadata) GetAntennaIndex() uint32 {
	if m != nil {
		return m.AntennaIndex
	}
	return 0
}

func (m *RxMetadata) GetChannelIndex() uint32 {
	if m != nil {
		return m.ChannelIndex
	}
	return 0
}

func (m *RxMetadata) GetTimestamp() uint64 {
	if x, ok := m.GetConcentratorTimestamp().(*RxMetadata_Timestamp); ok {
		return x.Timestamp
	}
	return 0
}

func (m *RxMetadata) GetEncryptedTimestamp() string {
	if x, ok := m.GetConcentratorTimestamp().(*RxMetadata_EncryptedTimestamp); ok {
		return x.EncryptedTimestamp
	}
	return ""
}

func (m *RxMetadata) GetTime() *time.Time {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *RxMetadata) GetRSSI() float32 {
	if m != nil {
		return m.RSSI
	}
	return 0
}

func (m *RxMetadata) GetSNR() float32 {
	if m != nil {
		return m.SNR
	}
	return 0
}

func (m *RxMetadata) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *RxMetadata) GetAESKeyIndex() uint32 {
	if m != nil {
		return m.AESKeyIndex
	}
	return 0
}

func (m *RxMetadata) GetAdvanced() *google_protobuf3.Struct {
	if m != nil {
		return m.Advanced
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RxMetadata) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RxMetadata_OneofMarshaler, _RxMetadata_OneofUnmarshaler, _RxMetadata_OneofSizer, []interface{}{
		(*RxMetadata_Timestamp)(nil),
		(*RxMetadata_EncryptedTimestamp)(nil),
	}
}

func _RxMetadata_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RxMetadata)
	// concentrator_timestamp
	switch x := m.ConcentratorTimestamp.(type) {
	case *RxMetadata_Timestamp:
		_ = b.EncodeVarint(4<<3 | proto.WireVarint)
		_ = b.EncodeVarint(x.Timestamp)
	case *RxMetadata_EncryptedTimestamp:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.EncryptedTimestamp)
	case nil:
	default:
		return fmt.Errorf("RxMetadata.ConcentratorTimestamp has unexpected type %T", x)
	}
	return nil
}

func _RxMetadata_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RxMetadata)
	switch tag {
	case 4: // concentrator_timestamp.timestamp
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.ConcentratorTimestamp = &RxMetadata_Timestamp{x}
		return true, err
	case 5: // concentrator_timestamp.encrypted_timestamp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ConcentratorTimestamp = &RxMetadata_EncryptedTimestamp{x}
		return true, err
	default:
		return false, nil
	}
}

func _RxMetadata_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RxMetadata)
	// concentrator_timestamp
	switch x := m.ConcentratorTimestamp.(type) {
	case *RxMetadata_Timestamp:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += proto.SizeVarint(x.Timestamp)
	case *RxMetadata_EncryptedTimestamp:
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.EncryptedTimestamp)))
		n += len(x.EncryptedTimestamp)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// TxMetadata contains metadata for a to-be-transmitted message.
// It contains gateway-specific fields that are not in the TxSettings message
type TxMetadata struct {
	// gateway_id is the ID of the gateway that received the message
	GatewayIdentifier `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,embedded=gateway_id" json:"gateway_id"`
	// Gateway's internal timestamp when the Tx should start (nanoseconds)
	// NOTE: most gateways use microsecond timestamps, so conversion may be needed
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Real time
	Time *time.Time `protobuf:"bytes,3,opt,name=time,stdtime" json:"time,omitempty"`
	// Advanced metadata fields
	// - can be used for advanced information or experimental features that are not yet formally defined in the API
	// - field names are written in snake_case
	Advanced *google_protobuf3.Struct `protobuf:"bytes,99,opt,name=advanced" json:"advanced,omitempty"`
}

func (m *TxMetadata) Reset()                    { *m = TxMetadata{} }
func (m *TxMetadata) String() string            { return proto.CompactTextString(m) }
func (*TxMetadata) ProtoMessage()               {}
func (*TxMetadata) Descriptor() ([]byte, []int) { return fileDescriptorMetadata, []int{1} }

func (m *TxMetadata) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *TxMetadata) GetTime() *time.Time {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *TxMetadata) GetAdvanced() *google_protobuf3.Struct {
	if m != nil {
		return m.Advanced
	}
	return nil
}

// Location of an object
type Location struct {
	// The Northâ€“South position (degrees; -90 to +90), where 0 is the equator, North pole is positive, South pole is negative
	Latitude float32 `protobuf:"fixed32,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// The East-West position (degrees; -180 to +180), where 0 is the Prime Meridian (Greenwich), East is positive , West is negative
	Longitude float32 `protobuf:"fixed32,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// The altitude (meters), where 0 is the mean sea level
	Altitude int32 `protobuf:"varint,3,opt,name=altitude,proto3" json:"altitude,omitempty"`
	// The accuracy of the location (meters)
	Accuracy int32 `protobuf:"varint,4,opt,name=accuracy,proto3" json:"accuracy,omitempty"`
	// Source of the location information
	Source LocationSource `protobuf:"varint,5,opt,name=source,proto3,enum=ttn.v3.LocationSource" json:"source,omitempty"`
}

func (m *Location) Reset()                    { *m = Location{} }
func (m *Location) String() string            { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()               {}
func (*Location) Descriptor() ([]byte, []int) { return fileDescriptorMetadata, []int{2} }

func (m *Location) GetLatitude() float32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Location) GetLongitude() float32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *Location) GetAltitude() int32 {
	if m != nil {
		return m.Altitude
	}
	return 0
}

func (m *Location) GetAccuracy() int32 {
	if m != nil {
		return m.Accuracy
	}
	return 0
}

func (m *Location) GetSource() LocationSource {
	if m != nil {
		return m.Source
	}
	return SOURCE_UNKNOWN
}

func init() {
	proto.RegisterType((*RxMetadata)(nil), "ttn.v3.RxMetadata")
	golang_proto.RegisterType((*RxMetadata)(nil), "ttn.v3.RxMetadata")
	proto.RegisterType((*TxMetadata)(nil), "ttn.v3.TxMetadata")
	golang_proto.RegisterType((*TxMetadata)(nil), "ttn.v3.TxMetadata")
	proto.RegisterType((*Location)(nil), "ttn.v3.Location")
	golang_proto.RegisterType((*Location)(nil), "ttn.v3.Location")
	proto.RegisterEnum("ttn.v3.LocationSource", LocationSource_name, LocationSource_value)
	golang_proto.RegisterEnum("ttn.v3.LocationSource", LocationSource_name, LocationSource_value)
}
func (x LocationSource) String() string {
	s, ok := LocationSource_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *RxMetadata) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RxMetadata)
	if !ok {
		that2, ok := that.(RxMetadata)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RxMetadata")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RxMetadata but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RxMetadata but is not nil && this == nil")
	}
	if !this.GatewayIdentifier.Equal(&that1.GatewayIdentifier) {
		return fmt.Errorf("GatewayIdentifier this(%v) Not Equal that(%v)", this.GatewayIdentifier, that1.GatewayIdentifier)
	}
	if this.AntennaIndex != that1.AntennaIndex {
		return fmt.Errorf("AntennaIndex this(%v) Not Equal that(%v)", this.AntennaIndex, that1.AntennaIndex)
	}
	if this.ChannelIndex != that1.ChannelIndex {
		return fmt.Errorf("ChannelIndex this(%v) Not Equal that(%v)", this.ChannelIndex, that1.ChannelIndex)
	}
	if that1.ConcentratorTimestamp == nil {
		if this.ConcentratorTimestamp != nil {
			return fmt.Errorf("this.ConcentratorTimestamp != nil && that1.ConcentratorTimestamp == nil")
		}
	} else if this.ConcentratorTimestamp == nil {
		return fmt.Errorf("this.ConcentratorTimestamp == nil && that1.ConcentratorTimestamp != nil")
	} else if err := this.ConcentratorTimestamp.VerboseEqual(that1.ConcentratorTimestamp); err != nil {
		return err
	}
	if that1.Time == nil {
		if this.Time != nil {
			return fmt.Errorf("this.Time != nil && that1.Time == nil")
		}
	} else if !this.Time.Equal(*that1.Time) {
		return fmt.Errorf("Time this(%v) Not Equal that(%v)", this.Time, that1.Time)
	}
	if this.RSSI != that1.RSSI {
		return fmt.Errorf("RSSI this(%v) Not Equal that(%v)", this.RSSI, that1.RSSI)
	}
	if this.SNR != that1.SNR {
		return fmt.Errorf("SNR this(%v) Not Equal that(%v)", this.SNR, that1.SNR)
	}
	if !this.Location.Equal(that1.Location) {
		return fmt.Errorf("Location this(%v) Not Equal that(%v)", this.Location, that1.Location)
	}
	if this.AESKeyIndex != that1.AESKeyIndex {
		return fmt.Errorf("AESKeyIndex this(%v) Not Equal that(%v)", this.AESKeyIndex, that1.AESKeyIndex)
	}
	if !this.Advanced.Equal(that1.Advanced) {
		return fmt.Errorf("Advanced this(%v) Not Equal that(%v)", this.Advanced, that1.Advanced)
	}
	return nil
}
func (this *RxMetadata_Timestamp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RxMetadata_Timestamp)
	if !ok {
		that2, ok := that.(RxMetadata_Timestamp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RxMetadata_Timestamp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RxMetadata_Timestamp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RxMetadata_Timestamp but is not nil && this == nil")
	}
	if this.Timestamp != that1.Timestamp {
		return fmt.Errorf("Timestamp this(%v) Not Equal that(%v)", this.Timestamp, that1.Timestamp)
	}
	return nil
}
func (this *RxMetadata_EncryptedTimestamp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RxMetadata_EncryptedTimestamp)
	if !ok {
		that2, ok := that.(RxMetadata_EncryptedTimestamp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RxMetadata_EncryptedTimestamp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RxMetadata_EncryptedTimestamp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RxMetadata_EncryptedTimestamp but is not nil && this == nil")
	}
	if this.EncryptedTimestamp != that1.EncryptedTimestamp {
		return fmt.Errorf("EncryptedTimestamp this(%v) Not Equal that(%v)", this.EncryptedTimestamp, that1.EncryptedTimestamp)
	}
	return nil
}
func (this *RxMetadata) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RxMetadata)
	if !ok {
		that2, ok := that.(RxMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.GatewayIdentifier.Equal(&that1.GatewayIdentifier) {
		return false
	}
	if this.AntennaIndex != that1.AntennaIndex {
		return false
	}
	if this.ChannelIndex != that1.ChannelIndex {
		return false
	}
	if that1.ConcentratorTimestamp == nil {
		if this.ConcentratorTimestamp != nil {
			return false
		}
	} else if this.ConcentratorTimestamp == nil {
		return false
	} else if !this.ConcentratorTimestamp.Equal(that1.ConcentratorTimestamp) {
		return false
	}
	if that1.Time == nil {
		if this.Time != nil {
			return false
		}
	} else if !this.Time.Equal(*that1.Time) {
		return false
	}
	if this.RSSI != that1.RSSI {
		return false
	}
	if this.SNR != that1.SNR {
		return false
	}
	if !this.Location.Equal(that1.Location) {
		return false
	}
	if this.AESKeyIndex != that1.AESKeyIndex {
		return false
	}
	if !this.Advanced.Equal(that1.Advanced) {
		return false
	}
	return true
}
func (this *RxMetadata_Timestamp) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RxMetadata_Timestamp)
	if !ok {
		that2, ok := that.(RxMetadata_Timestamp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	return true
}
func (this *RxMetadata_EncryptedTimestamp) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RxMetadata_EncryptedTimestamp)
	if !ok {
		that2, ok := that.(RxMetadata_EncryptedTimestamp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.EncryptedTimestamp != that1.EncryptedTimestamp {
		return false
	}
	return true
}
func (this *TxMetadata) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*TxMetadata)
	if !ok {
		that2, ok := that.(TxMetadata)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *TxMetadata")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *TxMetadata but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *TxMetadata but is not nil && this == nil")
	}
	if !this.GatewayIdentifier.Equal(&that1.GatewayIdentifier) {
		return fmt.Errorf("GatewayIdentifier this(%v) Not Equal that(%v)", this.GatewayIdentifier, that1.GatewayIdentifier)
	}
	if this.Timestamp != that1.Timestamp {
		return fmt.Errorf("Timestamp this(%v) Not Equal that(%v)", this.Timestamp, that1.Timestamp)
	}
	if that1.Time == nil {
		if this.Time != nil {
			return fmt.Errorf("this.Time != nil && that1.Time == nil")
		}
	} else if !this.Time.Equal(*that1.Time) {
		return fmt.Errorf("Time this(%v) Not Equal that(%v)", this.Time, that1.Time)
	}
	if !this.Advanced.Equal(that1.Advanced) {
		return fmt.Errorf("Advanced this(%v) Not Equal that(%v)", this.Advanced, that1.Advanced)
	}
	return nil
}
func (this *TxMetadata) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TxMetadata)
	if !ok {
		that2, ok := that.(TxMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.GatewayIdentifier.Equal(&that1.GatewayIdentifier) {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if that1.Time == nil {
		if this.Time != nil {
			return false
		}
	} else if !this.Time.Equal(*that1.Time) {
		return false
	}
	if !this.Advanced.Equal(that1.Advanced) {
		return false
	}
	return true
}
func (this *Location) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Location)
	if !ok {
		that2, ok := that.(Location)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Location")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Location but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Location but is not nil && this == nil")
	}
	if this.Latitude != that1.Latitude {
		return fmt.Errorf("Latitude this(%v) Not Equal that(%v)", this.Latitude, that1.Latitude)
	}
	if this.Longitude != that1.Longitude {
		return fmt.Errorf("Longitude this(%v) Not Equal that(%v)", this.Longitude, that1.Longitude)
	}
	if this.Altitude != that1.Altitude {
		return fmt.Errorf("Altitude this(%v) Not Equal that(%v)", this.Altitude, that1.Altitude)
	}
	if this.Accuracy != that1.Accuracy {
		return fmt.Errorf("Accuracy this(%v) Not Equal that(%v)", this.Accuracy, that1.Accuracy)
	}
	if this.Source != that1.Source {
		return fmt.Errorf("Source this(%v) Not Equal that(%v)", this.Source, that1.Source)
	}
	return nil
}
func (this *Location) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Location)
	if !ok {
		that2, ok := that.(Location)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Latitude != that1.Latitude {
		return false
	}
	if this.Longitude != that1.Longitude {
		return false
	}
	if this.Altitude != that1.Altitude {
		return false
	}
	if this.Accuracy != that1.Accuracy {
		return false
	}
	if this.Source != that1.Source {
		return false
	}
	return true
}
func (m *RxMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RxMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMetadata(dAtA, i, uint64(m.GatewayIdentifier.Size()))
	n1, err := m.GatewayIdentifier.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.AntennaIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMetadata(dAtA, i, uint64(m.AntennaIndex))
	}
	if m.ChannelIndex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMetadata(dAtA, i, uint64(m.ChannelIndex))
	}
	if m.ConcentratorTimestamp != nil {
		nn2, err := m.ConcentratorTimestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	if m.Time != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMetadata(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.Time)))
		n3, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.Time, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.RSSI != 0 {
		dAtA[i] = 0x3d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], math.Float32bits(m.RSSI))
		i += 4
	}
	if m.SNR != 0 {
		dAtA[i] = 0x45
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], math.Float32bits(m.SNR))
		i += 4
	}
	if m.Location != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintMetadata(dAtA, i, uint64(m.Location.Size()))
		n4, err := m.Location.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.AESKeyIndex != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintMetadata(dAtA, i, uint64(m.AESKeyIndex))
	}
	if m.Advanced != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintMetadata(dAtA, i, uint64(m.Advanced.Size()))
		n5, err := m.Advanced.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *RxMetadata_Timestamp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x20
	i++
	i = encodeVarintMetadata(dAtA, i, m.Timestamp)
	return i, nil
}
func (m *RxMetadata_EncryptedTimestamp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x2a
	i++
	i = encodeVarintMetadata(dAtA, i, uint64(len(m.EncryptedTimestamp)))
	i += copy(dAtA[i:], m.EncryptedTimestamp)
	return i, nil
}
func (m *TxMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMetadata(dAtA, i, uint64(m.GatewayIdentifier.Size()))
	n6, err := m.GatewayIdentifier.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if m.Timestamp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMetadata(dAtA, i, m.Timestamp)
	}
	if m.Time != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMetadata(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.Time)))
		n7, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.Time, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Advanced != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintMetadata(dAtA, i, uint64(m.Advanced.Size()))
		n8, err := m.Advanced.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *Location) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Location) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Latitude != 0 {
		dAtA[i] = 0xd
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], math.Float32bits(m.Latitude))
		i += 4
	}
	if m.Longitude != 0 {
		dAtA[i] = 0x15
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], math.Float32bits(m.Longitude))
		i += 4
	}
	if m.Altitude != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMetadata(dAtA, i, uint64(m.Altitude))
	}
	if m.Accuracy != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMetadata(dAtA, i, uint64(m.Accuracy))
	}
	if m.Source != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMetadata(dAtA, i, uint64(m.Source))
	}
	return i, nil
}

func encodeVarintMetadata(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedRxMetadata(r randyMetadata, easy bool) *RxMetadata {
	this := &RxMetadata{}
	v1 := NewPopulatedGatewayIdentifier(r, easy)
	this.GatewayIdentifier = *v1
	this.AntennaIndex = r.Uint32()
	this.ChannelIndex = r.Uint32()
	oneofNumber_ConcentratorTimestamp := []int32{4, 5}[r.Intn(2)]
	switch oneofNumber_ConcentratorTimestamp {
	case 4:
		this.ConcentratorTimestamp = NewPopulatedRxMetadata_Timestamp(r, easy)
	case 5:
		this.ConcentratorTimestamp = NewPopulatedRxMetadata_EncryptedTimestamp(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Time = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	this.RSSI = r.Float32()
	if r.Intn(2) == 0 {
		this.RSSI *= -1
	}
	this.SNR = r.Float32()
	if r.Intn(2) == 0 {
		this.SNR *= -1
	}
	if r.Intn(10) != 0 {
		this.Location = NewPopulatedLocation(r, easy)
	}
	this.AESKeyIndex = r.Uint32()
	if r.Intn(10) == 0 {
		this.Advanced = google_protobuf3.NewPopulatedStruct(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRxMetadata_Timestamp(r randyMetadata, easy bool) *RxMetadata_Timestamp {
	this := &RxMetadata_Timestamp{}
	this.Timestamp = uint64(r.Uint32())
	return this
}
func NewPopulatedRxMetadata_EncryptedTimestamp(r randyMetadata, easy bool) *RxMetadata_EncryptedTimestamp {
	this := &RxMetadata_EncryptedTimestamp{}
	this.EncryptedTimestamp = randStringMetadata(r)
	return this
}
func NewPopulatedTxMetadata(r randyMetadata, easy bool) *TxMetadata {
	this := &TxMetadata{}
	v2 := NewPopulatedGatewayIdentifier(r, easy)
	this.GatewayIdentifier = *v2
	this.Timestamp = uint64(r.Uint32())
	if r.Intn(10) != 0 {
		this.Time = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if r.Intn(10) == 0 {
		this.Advanced = google_protobuf3.NewPopulatedStruct(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLocation(r randyMetadata, easy bool) *Location {
	this := &Location{}
	this.Latitude = r.Float32()
	if r.Intn(2) == 0 {
		this.Latitude *= -1
	}
	this.Longitude = r.Float32()
	if r.Intn(2) == 0 {
		this.Longitude *= -1
	}
	this.Altitude = r.Int31()
	if r.Intn(2) == 0 {
		this.Altitude *= -1
	}
	this.Accuracy = r.Int31()
	if r.Intn(2) == 0 {
		this.Accuracy *= -1
	}
	this.Source = LocationSource([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyMetadata interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneMetadata(r randyMetadata) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringMetadata(r randyMetadata) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneMetadata(r)
	}
	return string(tmps)
}
func randUnrecognizedMetadata(r randyMetadata, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldMetadata(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldMetadata(dAtA []byte, r randyMetadata, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateMetadata(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulateMetadata(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulateMetadata(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateMetadata(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateMetadata(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateMetadata(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateMetadata(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *RxMetadata) Size() (n int) {
	var l int
	_ = l
	l = m.GatewayIdentifier.Size()
	n += 1 + l + sovMetadata(uint64(l))
	if m.AntennaIndex != 0 {
		n += 1 + sovMetadata(uint64(m.AntennaIndex))
	}
	if m.ChannelIndex != 0 {
		n += 1 + sovMetadata(uint64(m.ChannelIndex))
	}
	if m.ConcentratorTimestamp != nil {
		n += m.ConcentratorTimestamp.Size()
	}
	if m.Time != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.Time)
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.RSSI != 0 {
		n += 5
	}
	if m.SNR != 0 {
		n += 5
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.AESKeyIndex != 0 {
		n += 1 + sovMetadata(uint64(m.AESKeyIndex))
	}
	if m.Advanced != nil {
		l = m.Advanced.Size()
		n += 2 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *RxMetadata_Timestamp) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMetadata(m.Timestamp)
	return n
}
func (m *RxMetadata_EncryptedTimestamp) Size() (n int) {
	var l int
	_ = l
	l = len(m.EncryptedTimestamp)
	n += 1 + l + sovMetadata(uint64(l))
	return n
}
func (m *TxMetadata) Size() (n int) {
	var l int
	_ = l
	l = m.GatewayIdentifier.Size()
	n += 1 + l + sovMetadata(uint64(l))
	if m.Timestamp != 0 {
		n += 1 + sovMetadata(m.Timestamp)
	}
	if m.Time != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.Time)
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.Advanced != nil {
		l = m.Advanced.Size()
		n += 2 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *Location) Size() (n int) {
	var l int
	_ = l
	if m.Latitude != 0 {
		n += 5
	}
	if m.Longitude != 0 {
		n += 5
	}
	if m.Altitude != 0 {
		n += 1 + sovMetadata(uint64(m.Altitude))
	}
	if m.Accuracy != 0 {
		n += 1 + sovMetadata(uint64(m.Accuracy))
	}
	if m.Source != 0 {
		n += 1 + sovMetadata(uint64(m.Source))
	}
	return n
}

func sovMetadata(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMetadata(x uint64) (n int) {
	return sovMetadata((x << 1) ^ uint64((int64(x) >> 63)))
}
func (m *RxMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RxMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RxMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GatewayIdentifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AntennaIndex", wireType)
			}
			m.AntennaIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AntennaIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelIndex", wireType)
			}
			m.ChannelIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConcentratorTimestamp = &RxMetadata_Timestamp{v}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedTimestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConcentratorTimestamp = &RxMetadata_EncryptedTimestamp{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Time == nil {
				m.Time = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RSSI", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:])
			iNdEx += 4
			m.RSSI = math.Float32frombits(v)
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SNR", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:])
			iNdEx += 4
			m.SNR = math.Float32frombits(v)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &Location{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AESKeyIndex", wireType)
			}
			m.AESKeyIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AESKeyIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Advanced", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Advanced == nil {
				m.Advanced = &google_protobuf3.Struct{}
			}
			if err := m.Advanced.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GatewayIdentifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Time == nil {
				m.Time = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Advanced", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Advanced == nil {
				m.Advanced = &google_protobuf3.Struct{}
			}
			if err := m.Advanced.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Location) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Location: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Location: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:])
			iNdEx += 4
			m.Latitude = math.Float32frombits(v)
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:])
			iNdEx += 4
			m.Longitude = math.Float32frombits(v)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Altitude", wireType)
			}
			m.Altitude = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Altitude |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accuracy", wireType)
			}
			m.Accuracy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Accuracy |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= (LocationSource(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetadata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMetadata
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMetadata
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMetadata(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMetadata = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetadata   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/metadata.proto", fileDescriptorMetadata)
}
func init() {
	golang_proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/metadata.proto", fileDescriptorMetadata)
}

var fileDescriptorMetadata = []byte{
	// 782 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xbd, 0x8f, 0x1a, 0x47,
	0x14, 0x9f, 0x81, 0xf5, 0x99, 0x9b, 0xcb, 0x61, 0x32, 0x56, 0x9c, 0x3d, 0x74, 0x1a, 0xd0, 0xa5,
	0x21, 0x51, 0xb2, 0x28, 0x47, 0xf2, 0x07, 0x98, 0x13, 0xc1, 0xc8, 0x0e, 0x58, 0xb3, 0x58, 0x51,
	0xd2, 0xa0, 0x61, 0x77, 0xbc, 0xac, 0x0e, 0x66, 0xd1, 0xee, 0x60, 0x9b, 0x22, 0x92, 0xcb, 0xab,
	0x22, 0x97, 0xe9, 0x12, 0x29, 0x8d, 0x8b, 0x14, 0x2e, 0x5d, 0xba, 0xbc, 0xf2, 0x4a, 0xa7, 0x21,
	0x66, 0xb6, 0x71, 0xe9, 0xd2, 0x65, 0xb4, 0xb3, 0xcb, 0x72, 0x71, 0x8a, 0x7c, 0x28, 0x15, 0xfc,
	0x3e, 0x1e, 0xf3, 0xde, 0xef, 0x3d, 0x81, 0x8e, 0x3d, 0x5f, 0x4e, 0x16, 0x63, 0xcb, 0x09, 0x66,
	0xcd, 0xe1, 0x84, 0x0f, 0x27, 0xbe, 0xf0, 0xa2, 0x3e, 0x97, 0x0f, 0x83, 0xf0, 0xb4, 0x29, 0xa5,
	0x68, 0xb2, 0xb9, 0xdf, 0x9c, 0x71, 0xc9, 0x5c, 0x26, 0x99, 0x35, 0x0f, 0x03, 0x19, 0xe0, 0x1d,
	0x29, 0x85, 0xf5, 0xa0, 0x55, 0xfd, 0xec, 0x52, 0xad, 0x17, 0x78, 0x41, 0x53, 0xcb, 0xe3, 0xc5,
	0x7d, 0x8d, 0x34, 0xd0, 0xdf, 0xd2, 0xb2, 0xea, 0x97, 0xff, 0xe4, 0x29, 0xdf, 0xe5, 0x42, 0xfa,
	0xf7, 0x7d, 0x1e, 0x46, 0x59, 0xd9, 0xa1, 0x17, 0x04, 0xde, 0x94, 0x6f, 0x7f, 0x3c, 0x92, 0xe1,
	0xc2, 0x91, 0x99, 0x5a, 0x7b, 0x57, 0x95, 0xfe, 0x8c, 0x47, 0x92, 0xcd, 0xe6, 0xa9, 0xe1, 0xe8,
	0x07, 0x03, 0x21, 0xfa, 0xe8, 0xeb, 0x6c, 0x02, 0xdc, 0x46, 0xc8, 0x63, 0x92, 0x3f, 0x64, 0xcb,
	0x91, 0xef, 0x9a, 0xb0, 0x0e, 0x1b, 0x7b, 0xc7, 0x07, 0x56, 0x3a, 0x90, 0xd5, 0x4d, 0x95, 0x5e,
	0xde, 0x43, 0xbb, 0x74, 0xbe, 0xaa, 0x81, 0x8b, 0x55, 0x0d, 0xd2, 0x5d, 0x6f, 0x23, 0xe2, 0x8f,
	0xd0, 0x3e, 0x13, 0x92, 0x0b, 0xc1, 0x46, 0xbe, 0x70, 0xf9, 0x23, 0xb3, 0x50, 0x87, 0x8d, 0x7d,
	0xfa, 0x5e, 0x46, 0xf6, 0x12, 0x2e, 0x31, 0x39, 0x13, 0x26, 0x04, 0x9f, 0x66, 0xa6, 0x62, 0x6a,
	0xca, 0xc8, 0xd4, 0x44, 0xd0, 0x6e, 0xde, 0xaf, 0x69, 0xd4, 0x61, 0xc3, 0xb8, 0x05, 0xe8, 0x96,
	0xc2, 0x9f, 0xa3, 0xeb, 0x5c, 0x38, 0xe1, 0x72, 0x2e, 0xb9, 0x3b, 0xda, 0x3a, 0xaf, 0xd4, 0x61,
	0x63, 0xf7, 0x16, 0xa0, 0x38, 0x17, 0x87, 0x79, 0xc9, 0x17, 0xc8, 0x48, 0x8c, 0xe6, 0x8e, 0x1e,
	0xad, 0x6a, 0xa5, 0xf9, 0x58, 0x9b, 0x7c, 0xac, 0xdc, 0xd9, 0x36, 0x9e, 0xfc, 0x5e, 0x83, 0x54,
	0xbb, 0xf1, 0x21, 0x32, 0xc2, 0x28, 0xf2, 0xcd, 0xab, 0x75, 0xd8, 0x28, 0xb4, 0x4b, 0x6a, 0x55,
	0x33, 0xa8, 0x6d, 0xf7, 0xa8, 0x66, 0xf1, 0x01, 0x2a, 0x46, 0x22, 0x34, 0x4b, 0x5a, 0xbc, 0xaa,
	0x56, 0xb5, 0xa2, 0xdd, 0xa7, 0x34, 0xe1, 0xf0, 0xa7, 0xa8, 0x34, 0x0d, 0x1c, 0x26, 0xfd, 0x40,
	0x98, 0xbb, 0xfa, 0xc9, 0xca, 0x26, 0xcd, 0x3b, 0x19, 0x4f, 0x73, 0x07, 0x6e, 0xa1, 0x7d, 0xc6,
	0xa3, 0xd1, 0x29, 0x5f, 0x66, 0xa1, 0xa0, 0x24, 0x94, 0xf6, 0x35, 0xb5, 0xaa, 0xed, 0xdd, 0xec,
	0xd8, 0xb7, 0xf9, 0x52, 0xe7, 0x42, 0xf7, 0x18, 0x8f, 0x36, 0x00, 0xb7, 0x50, 0x89, 0xb9, 0x0f,
	0x98, 0x70, 0xb8, 0x6b, 0x3a, 0xfa, 0x89, 0x0f, 0xff, 0x32, 0x95, 0xad, 0x6f, 0x82, 0xe6, 0xc6,
	0xb6, 0x89, 0x6e, 0x38, 0x81, 0x70, 0xb8, 0x90, 0x21, 0x93, 0x41, 0xb8, 0x0d, 0xef, 0xe8, 0x37,
	0x88, 0xd0, 0xf0, 0xff, 0x3d, 0x88, 0xc3, 0xcb, 0x6b, 0x4c, 0x8e, 0xc1, 0xb8, 0xbc, 0xc4, 0xcd,
	0x46, 0x8a, 0xff, 0x6a, 0x23, 0xff, 0x65, 0xea, 0xa3, 0x5f, 0x21, 0x2a, 0x6d, 0x62, 0xc7, 0x55,
	0x54, 0x9a, 0x32, 0xe9, 0xcb, 0x85, 0xcb, 0xf5, 0x5c, 0x05, 0x9a, 0xe3, 0xa4, 0xe3, 0x69, 0x20,
	0xbc, 0x54, 0x2c, 0x68, 0x71, 0x4b, 0x24, 0x95, 0x6c, 0x9a, 0x55, 0x26, 0x5d, 0x5f, 0xa1, 0x39,
	0xd6, 0x9a, 0xe3, 0x2c, 0x42, 0xe6, 0x2c, 0xf5, 0xc5, 0x26, 0x5a, 0x86, 0xb1, 0x85, 0x76, 0xa2,
	0x60, 0x11, 0x3a, 0x5c, 0x5f, 0x68, 0xf9, 0xf8, 0xc6, 0xbb, 0xa7, 0x60, 0x6b, 0x95, 0x66, 0xae,
	0x4f, 0xbe, 0x47, 0xe5, 0x3f, 0x2b, 0x18, 0xa3, 0xb2, 0x3d, 0xb8, 0x47, 0x4f, 0x3a, 0xa3, 0x7b,
	0xfd, 0xdb, 0xfd, 0xc1, 0x37, 0xfd, 0x0a, 0xc0, 0x65, 0x84, 0x32, 0xae, 0x7b, 0xd7, 0xae, 0x40,
	0xfc, 0x3e, 0xda, 0xcf, 0xf0, 0xc9, 0xa0, 0xff, 0x55, 0xaf, 0x5b, 0x29, 0xe0, 0xeb, 0xe8, 0x5a,
	0x46, 0xd1, 0x4e, 0xb7, 0x67, 0x0f, 0xe9, 0xb7, 0x95, 0x22, 0x3e, 0x40, 0x1f, 0x64, 0x64, 0xef,
	0xee, 0xa8, 0xdb, 0x19, 0xdc, 0x19, 0x9c, 0xdc, 0x1c, 0xf6, 0x06, 0xfd, 0x8a, 0x51, 0x35, 0xce,
	0x7e, 0x21, 0xa0, 0xfd, 0x13, 0x3c, 0x5f, 0x13, 0x78, 0xb1, 0x26, 0xf0, 0xe5, 0x9a, 0xc0, 0x57,
	0x6b, 0x02, 0x5f, 0xaf, 0x09, 0x78, 0xb3, 0x26, 0xe0, 0xed, 0x9a, 0xc0, 0xc7, 0x8a, 0x80, 0x33,
	0x45, 0xc0, 0x53, 0x45, 0xe0, 0x33, 0x45, 0xc0, 0x73, 0x45, 0xe0, 0x0b, 0x45, 0xe0, 0xb9, 0x22,
	0xf0, 0x42, 0x11, 0xf8, 0x52, 0x11, 0xf0, 0x4a, 0x11, 0xf8, 0x5a, 0x11, 0xf0, 0x46, 0x11, 0xf8,
	0x56, 0x11, 0xf0, 0x38, 0x26, 0xe0, 0x2c, 0x26, 0xf0, 0x49, 0x4c, 0xc0, 0x8f, 0x31, 0x81, 0x3f,
	0xc7, 0x04, 0x3c, 0x8d, 0x09, 0x78, 0x16, 0x13, 0xf8, 0x3c, 0x26, 0xf0, 0x45, 0x4c, 0xe0, 0x77,
	0x1f, 0xff, 0xdd, 0xff, 0xe0, 0xfc, 0xd4, 0x4b, 0x3e, 0xe7, 0xe3, 0xf1, 0x8e, 0x5e, 0x75, 0xeb,
	0x8f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc4, 0x24, 0x5c, 0xa3, 0xa6, 0x05, 0x00, 0x00,
}
