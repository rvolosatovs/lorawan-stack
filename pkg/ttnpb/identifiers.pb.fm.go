// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import fmt "fmt"

var _ApplicationIdentifiersFieldPaths = [...]string{
	"application_id",
}

func (*ApplicationIdentifiers) FieldMaskPaths() []string {
	ret := make([]string, len(_ApplicationIdentifiersFieldPaths))
	copy(ret, _ApplicationIdentifiersFieldPaths[:])
	return ret
}

func (dst *ApplicationIdentifiers) SetFields(src *ApplicationIdentifiers, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "application_id":
			dst.ApplicationID = src.ApplicationID
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _ClientIdentifiersFieldPaths = [...]string{
	"client_id",
}

func (*ClientIdentifiers) FieldMaskPaths() []string {
	ret := make([]string, len(_ClientIdentifiersFieldPaths))
	copy(ret, _ClientIdentifiersFieldPaths[:])
	return ret
}

func (dst *ClientIdentifiers) SetFields(src *ClientIdentifiers, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "client_id":
			dst.ClientID = src.ClientID
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _EndDeviceIdentifiersFieldPaths = [...]string{
	"application_ids",
	"application_ids.application_id",
	"dev_addr",
	"dev_eui",
	"device_id",
	"join_eui",
}

func (*EndDeviceIdentifiers) FieldMaskPaths() []string {
	ret := make([]string, len(_EndDeviceIdentifiersFieldPaths))
	copy(ret, _EndDeviceIdentifiersFieldPaths[:])
	return ret
}

func (dst *EndDeviceIdentifiers) SetFields(src *EndDeviceIdentifiers, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "application_ids":
			dst.ApplicationIdentifiers = src.ApplicationIdentifiers
		case "application_ids.application_id":
			dst.ApplicationIdentifiers.SetFields(&src.ApplicationIdentifiers, _pathsWithoutPrefix("application_ids", paths)...)
		case "dev_addr":
			dst.DevAddr = src.DevAddr
		case "dev_eui":
			dst.DevEUI = src.DevEUI
		case "device_id":
			dst.DeviceID = src.DeviceID
		case "join_eui":
			dst.JoinEUI = src.JoinEUI
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _GatewayIdentifiersFieldPaths = [...]string{
	"eui",
	"gateway_id",
}

func (*GatewayIdentifiers) FieldMaskPaths() []string {
	ret := make([]string, len(_GatewayIdentifiersFieldPaths))
	copy(ret, _GatewayIdentifiersFieldPaths[:])
	return ret
}

func (dst *GatewayIdentifiers) SetFields(src *GatewayIdentifiers, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "eui":
			dst.EUI = src.EUI
		case "gateway_id":
			dst.GatewayID = src.GatewayID
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _OrganizationIdentifiersFieldPaths = [...]string{
	"organization_id",
}

func (*OrganizationIdentifiers) FieldMaskPaths() []string {
	ret := make([]string, len(_OrganizationIdentifiersFieldPaths))
	copy(ret, _OrganizationIdentifiersFieldPaths[:])
	return ret
}

func (dst *OrganizationIdentifiers) SetFields(src *OrganizationIdentifiers, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "organization_id":
			dst.OrganizationID = src.OrganizationID
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _UserIdentifiersFieldPaths = [...]string{
	"email",
	"user_id",
}

func (*UserIdentifiers) FieldMaskPaths() []string {
	ret := make([]string, len(_UserIdentifiersFieldPaths))
	copy(ret, _UserIdentifiersFieldPaths[:])
	return ret
}

func (dst *UserIdentifiers) SetFields(src *UserIdentifiers, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "email":
			dst.Email = src.Email
		case "user_id":
			dst.UserID = src.UserID
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _OrganizationOrUserIdentifiersFieldPaths = [...]string{
	"organization_ids",
	"organization_ids.organization_id",
	"user_ids",
	"user_ids.email",
	"user_ids.user_id",
}

func (*OrganizationOrUserIdentifiers) FieldMaskPaths() []string {
	ret := make([]string, len(_OrganizationOrUserIdentifiersFieldPaths))
	copy(ret, _OrganizationOrUserIdentifiersFieldPaths[:])
	return ret
}

func (dst *OrganizationOrUserIdentifiers) SetFields(src *OrganizationOrUserIdentifiers, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "organization_ids":
			if dst.Ids == nil {
				dst.Ids = &OrganizationOrUserIdentifiers_OrganizationIDs{}
			}
			dst.Ids.(*OrganizationOrUserIdentifiers_OrganizationIDs).OrganizationIDs = src.GetOrganizationIDs()
		case "organization_ids.organization_id":
			if dst.Ids == nil {
				dst.Ids = &OrganizationOrUserIdentifiers_OrganizationIDs{}
			}
			if dst.Ids.(*OrganizationOrUserIdentifiers_OrganizationIDs).OrganizationIDs == nil {
				dst.Ids.(*OrganizationOrUserIdentifiers_OrganizationIDs).OrganizationIDs = &OrganizationIdentifiers{}
			}
			dst.Ids.(*OrganizationOrUserIdentifiers_OrganizationIDs).OrganizationIDs.SetFields(src.GetOrganizationIDs(), _pathsWithoutPrefix("organization_ids", paths)...)
		case "user_ids":
			if dst.Ids == nil {
				dst.Ids = &OrganizationOrUserIdentifiers_UserIDs{}
			}
			dst.Ids.(*OrganizationOrUserIdentifiers_UserIDs).UserIDs = src.GetUserIDs()
		case "user_ids.email":
			if dst.Ids == nil {
				dst.Ids = &OrganizationOrUserIdentifiers_UserIDs{}
			}
			if dst.Ids.(*OrganizationOrUserIdentifiers_UserIDs).UserIDs == nil {
				dst.Ids.(*OrganizationOrUserIdentifiers_UserIDs).UserIDs = &UserIdentifiers{}
			}
			dst.Ids.(*OrganizationOrUserIdentifiers_UserIDs).UserIDs.SetFields(src.GetUserIDs(), _pathsWithoutPrefix("user_ids", paths)...)
		case "user_ids.user_id":
			if dst.Ids == nil {
				dst.Ids = &OrganizationOrUserIdentifiers_UserIDs{}
			}
			if dst.Ids.(*OrganizationOrUserIdentifiers_UserIDs).UserIDs == nil {
				dst.Ids.(*OrganizationOrUserIdentifiers_UserIDs).UserIDs = &UserIdentifiers{}
			}
			dst.Ids.(*OrganizationOrUserIdentifiers_UserIDs).UserIDs.SetFields(src.GetUserIDs(), _pathsWithoutPrefix("user_ids", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _EntityIdentifiersFieldPaths = [...]string{
	"application_ids",
	"application_ids.application_id",
	"client_ids",
	"client_ids.client_id",
	"device_ids",
	"device_ids.application_ids",
	"device_ids.application_ids.application_id",
	"device_ids.dev_addr",
	"device_ids.dev_eui",
	"device_ids.device_id",
	"device_ids.join_eui",
	"gateway_ids",
	"gateway_ids.eui",
	"gateway_ids.gateway_id",
	"organization_ids",
	"organization_ids.organization_id",
	"user_ids",
	"user_ids.email",
	"user_ids.user_id",
}

func (*EntityIdentifiers) FieldMaskPaths() []string {
	ret := make([]string, len(_EntityIdentifiersFieldPaths))
	copy(ret, _EntityIdentifiersFieldPaths[:])
	return ret
}

func (dst *EntityIdentifiers) SetFields(src *EntityIdentifiers, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "application_ids":
			if dst.Ids == nil {
				dst.Ids = &EntityIdentifiers_ApplicationIDs{}
			}
			dst.Ids.(*EntityIdentifiers_ApplicationIDs).ApplicationIDs = src.GetApplicationIDs()
		case "application_ids.application_id":
			if dst.Ids == nil {
				dst.Ids = &EntityIdentifiers_ApplicationIDs{}
			}
			if dst.Ids.(*EntityIdentifiers_ApplicationIDs).ApplicationIDs == nil {
				dst.Ids.(*EntityIdentifiers_ApplicationIDs).ApplicationIDs = &ApplicationIdentifiers{}
			}
			dst.Ids.(*EntityIdentifiers_ApplicationIDs).ApplicationIDs.SetFields(src.GetApplicationIDs(), _pathsWithoutPrefix("application_ids", paths)...)
		case "client_ids":
			if dst.Ids == nil {
				dst.Ids = &EntityIdentifiers_ClientIDs{}
			}
			dst.Ids.(*EntityIdentifiers_ClientIDs).ClientIDs = src.GetClientIDs()
		case "client_ids.client_id":
			if dst.Ids == nil {
				dst.Ids = &EntityIdentifiers_ClientIDs{}
			}
			if dst.Ids.(*EntityIdentifiers_ClientIDs).ClientIDs == nil {
				dst.Ids.(*EntityIdentifiers_ClientIDs).ClientIDs = &ClientIdentifiers{}
			}
			dst.Ids.(*EntityIdentifiers_ClientIDs).ClientIDs.SetFields(src.GetClientIDs(), _pathsWithoutPrefix("client_ids", paths)...)
		case "device_ids":
			if dst.Ids == nil {
				dst.Ids = &EntityIdentifiers_DeviceIDs{}
			}
			dst.Ids.(*EntityIdentifiers_DeviceIDs).DeviceIDs = src.GetDeviceIDs()
		case "device_ids.application_ids":
			if dst.Ids == nil {
				dst.Ids = &EntityIdentifiers_DeviceIDs{}
			}
			if dst.Ids.(*EntityIdentifiers_DeviceIDs).DeviceIDs == nil {
				dst.Ids.(*EntityIdentifiers_DeviceIDs).DeviceIDs = &EndDeviceIdentifiers{}
			}
			dst.Ids.(*EntityIdentifiers_DeviceIDs).DeviceIDs.SetFields(src.GetDeviceIDs(), _pathsWithoutPrefix("device_ids", paths)...)
		case "device_ids.application_ids.application_id":
			if dst.Ids == nil {
				dst.Ids = &EntityIdentifiers_DeviceIDs{}
			}
			if dst.Ids.(*EntityIdentifiers_DeviceIDs).DeviceIDs == nil {
				dst.Ids.(*EntityIdentifiers_DeviceIDs).DeviceIDs = &EndDeviceIdentifiers{}
			}
			dst.Ids.(*EntityIdentifiers_DeviceIDs).DeviceIDs.SetFields(src.GetDeviceIDs(), _pathsWithoutPrefix("device_ids", paths)...)
		case "device_ids.dev_addr":
			if dst.Ids == nil {
				dst.Ids = &EntityIdentifiers_DeviceIDs{}
			}
			if dst.Ids.(*EntityIdentifiers_DeviceIDs).DeviceIDs == nil {
				dst.Ids.(*EntityIdentifiers_DeviceIDs).DeviceIDs = &EndDeviceIdentifiers{}
			}
			dst.Ids.(*EntityIdentifiers_DeviceIDs).DeviceIDs.SetFields(src.GetDeviceIDs(), _pathsWithoutPrefix("device_ids", paths)...)
		case "device_ids.dev_eui":
			if dst.Ids == nil {
				dst.Ids = &EntityIdentifiers_DeviceIDs{}
			}
			if dst.Ids.(*EntityIdentifiers_DeviceIDs).DeviceIDs == nil {
				dst.Ids.(*EntityIdentifiers_DeviceIDs).DeviceIDs = &EndDeviceIdentifiers{}
			}
			dst.Ids.(*EntityIdentifiers_DeviceIDs).DeviceIDs.SetFields(src.GetDeviceIDs(), _pathsWithoutPrefix("device_ids", paths)...)
		case "device_ids.device_id":
			if dst.Ids == nil {
				dst.Ids = &EntityIdentifiers_DeviceIDs{}
			}
			if dst.Ids.(*EntityIdentifiers_DeviceIDs).DeviceIDs == nil {
				dst.Ids.(*EntityIdentifiers_DeviceIDs).DeviceIDs = &EndDeviceIdentifiers{}
			}
			dst.Ids.(*EntityIdentifiers_DeviceIDs).DeviceIDs.SetFields(src.GetDeviceIDs(), _pathsWithoutPrefix("device_ids", paths)...)
		case "device_ids.join_eui":
			if dst.Ids == nil {
				dst.Ids = &EntityIdentifiers_DeviceIDs{}
			}
			if dst.Ids.(*EntityIdentifiers_DeviceIDs).DeviceIDs == nil {
				dst.Ids.(*EntityIdentifiers_DeviceIDs).DeviceIDs = &EndDeviceIdentifiers{}
			}
			dst.Ids.(*EntityIdentifiers_DeviceIDs).DeviceIDs.SetFields(src.GetDeviceIDs(), _pathsWithoutPrefix("device_ids", paths)...)
		case "gateway_ids":
			if dst.Ids == nil {
				dst.Ids = &EntityIdentifiers_GatewayIDs{}
			}
			dst.Ids.(*EntityIdentifiers_GatewayIDs).GatewayIDs = src.GetGatewayIDs()
		case "gateway_ids.eui":
			if dst.Ids == nil {
				dst.Ids = &EntityIdentifiers_GatewayIDs{}
			}
			if dst.Ids.(*EntityIdentifiers_GatewayIDs).GatewayIDs == nil {
				dst.Ids.(*EntityIdentifiers_GatewayIDs).GatewayIDs = &GatewayIdentifiers{}
			}
			dst.Ids.(*EntityIdentifiers_GatewayIDs).GatewayIDs.SetFields(src.GetGatewayIDs(), _pathsWithoutPrefix("gateway_ids", paths)...)
		case "gateway_ids.gateway_id":
			if dst.Ids == nil {
				dst.Ids = &EntityIdentifiers_GatewayIDs{}
			}
			if dst.Ids.(*EntityIdentifiers_GatewayIDs).GatewayIDs == nil {
				dst.Ids.(*EntityIdentifiers_GatewayIDs).GatewayIDs = &GatewayIdentifiers{}
			}
			dst.Ids.(*EntityIdentifiers_GatewayIDs).GatewayIDs.SetFields(src.GetGatewayIDs(), _pathsWithoutPrefix("gateway_ids", paths)...)
		case "organization_ids":
			if dst.Ids == nil {
				dst.Ids = &EntityIdentifiers_OrganizationIDs{}
			}
			dst.Ids.(*EntityIdentifiers_OrganizationIDs).OrganizationIDs = src.GetOrganizationIDs()
		case "organization_ids.organization_id":
			if dst.Ids == nil {
				dst.Ids = &EntityIdentifiers_OrganizationIDs{}
			}
			if dst.Ids.(*EntityIdentifiers_OrganizationIDs).OrganizationIDs == nil {
				dst.Ids.(*EntityIdentifiers_OrganizationIDs).OrganizationIDs = &OrganizationIdentifiers{}
			}
			dst.Ids.(*EntityIdentifiers_OrganizationIDs).OrganizationIDs.SetFields(src.GetOrganizationIDs(), _pathsWithoutPrefix("organization_ids", paths)...)
		case "user_ids":
			if dst.Ids == nil {
				dst.Ids = &EntityIdentifiers_UserIDs{}
			}
			dst.Ids.(*EntityIdentifiers_UserIDs).UserIDs = src.GetUserIDs()
		case "user_ids.email":
			if dst.Ids == nil {
				dst.Ids = &EntityIdentifiers_UserIDs{}
			}
			if dst.Ids.(*EntityIdentifiers_UserIDs).UserIDs == nil {
				dst.Ids.(*EntityIdentifiers_UserIDs).UserIDs = &UserIdentifiers{}
			}
			dst.Ids.(*EntityIdentifiers_UserIDs).UserIDs.SetFields(src.GetUserIDs(), _pathsWithoutPrefix("user_ids", paths)...)
		case "user_ids.user_id":
			if dst.Ids == nil {
				dst.Ids = &EntityIdentifiers_UserIDs{}
			}
			if dst.Ids.(*EntityIdentifiers_UserIDs).UserIDs == nil {
				dst.Ids.(*EntityIdentifiers_UserIDs).UserIDs = &UserIdentifiers{}
			}
			dst.Ids.(*EntityIdentifiers_UserIDs).UserIDs.SetFields(src.GetUserIDs(), _pathsWithoutPrefix("user_ids", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _CombinedIdentifiersFieldPaths = [...]string{
	"entity_identifiers",
}

func (*CombinedIdentifiers) FieldMaskPaths() []string {
	ret := make([]string, len(_CombinedIdentifiersFieldPaths))
	copy(ret, _CombinedIdentifiersFieldPaths[:])
	return ret
}

func (dst *CombinedIdentifiers) SetFields(src *CombinedIdentifiers, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "entity_identifiers":
			dst.EntityIdentifiers = src.EntityIdentifiers
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}
