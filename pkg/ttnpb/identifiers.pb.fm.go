// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import fmt "fmt"

var ApplicationIdentifiersFieldPathsNested = []string{
	"application_id",
}

var ApplicationIdentifiersFieldPathsTopLevel = []string{
	"application_id",
}

func (dst *ApplicationIdentifiers) SetFields(src *ApplicationIdentifiers, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "application_id":
			if len(subs) > 0 {
				return fmt.Errorf("'application_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ApplicationID = src.ApplicationID
			} else {
				var zero string
				dst.ApplicationID = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var ClientIdentifiersFieldPathsNested = []string{
	"client_id",
}

var ClientIdentifiersFieldPathsTopLevel = []string{
	"client_id",
}

func (dst *ClientIdentifiers) SetFields(src *ClientIdentifiers, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "client_id":
			if len(subs) > 0 {
				return fmt.Errorf("'client_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ClientID = src.ClientID
			} else {
				var zero string
				dst.ClientID = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var EndDeviceIdentifiersFieldPathsNested = []string{
	"application_ids",
	"application_ids.application_id",
	"dev_addr",
	"dev_eui",
	"device_id",
	"join_eui",
}

var EndDeviceIdentifiersFieldPathsTopLevel = []string{
	"application_ids",
	"dev_addr",
	"dev_eui",
	"device_id",
	"join_eui",
}

func (dst *EndDeviceIdentifiers) SetFields(src *EndDeviceIdentifiers, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "device_id":
			if len(subs) > 0 {
				return fmt.Errorf("'device_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DeviceID = src.DeviceID
			} else {
				var zero string
				dst.DeviceID = zero
			}
		case "application_ids":
			if len(subs) > 0 {
				newDst := &dst.ApplicationIdentifiers
				var newSrc *ApplicationIdentifiers
				if src != nil {
					newSrc = &src.ApplicationIdentifiers
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.ApplicationIdentifiers = src.ApplicationIdentifiers
				} else {
					var zero ApplicationIdentifiers
					dst.ApplicationIdentifiers = zero
				}
			}
		case "dev_eui":
			if len(subs) > 0 {
				return fmt.Errorf("'dev_eui' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DevEUI = src.DevEUI
			} else {
				dst.DevEUI = nil
			}
		case "join_eui":
			if len(subs) > 0 {
				return fmt.Errorf("'join_eui' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.JoinEUI = src.JoinEUI
			} else {
				dst.JoinEUI = nil
			}
		case "dev_addr":
			if len(subs) > 0 {
				return fmt.Errorf("'dev_addr' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DevAddr = src.DevAddr
			} else {
				dst.DevAddr = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var GatewayIdentifiersFieldPathsNested = []string{
	"eui",
	"gateway_id",
}

var GatewayIdentifiersFieldPathsTopLevel = []string{
	"eui",
	"gateway_id",
}

func (dst *GatewayIdentifiers) SetFields(src *GatewayIdentifiers, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "gateway_id":
			if len(subs) > 0 {
				return fmt.Errorf("'gateway_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.GatewayID = src.GatewayID
			} else {
				var zero string
				dst.GatewayID = zero
			}
		case "eui":
			if len(subs) > 0 {
				return fmt.Errorf("'eui' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.EUI = src.EUI
			} else {
				dst.EUI = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var OrganizationIdentifiersFieldPathsNested = []string{
	"organization_id",
}

var OrganizationIdentifiersFieldPathsTopLevel = []string{
	"organization_id",
}

func (dst *OrganizationIdentifiers) SetFields(src *OrganizationIdentifiers, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "organization_id":
			if len(subs) > 0 {
				return fmt.Errorf("'organization_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.OrganizationID = src.OrganizationID
			} else {
				var zero string
				dst.OrganizationID = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var UserIdentifiersFieldPathsNested = []string{
	"email",
	"user_id",
}

var UserIdentifiersFieldPathsTopLevel = []string{
	"email",
	"user_id",
}

func (dst *UserIdentifiers) SetFields(src *UserIdentifiers, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "user_id":
			if len(subs) > 0 {
				return fmt.Errorf("'user_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.UserID = src.UserID
			} else {
				var zero string
				dst.UserID = zero
			}
		case "email":
			if len(subs) > 0 {
				return fmt.Errorf("'email' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Email = src.Email
			} else {
				var zero string
				dst.Email = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var OrganizationOrUserIdentifiersFieldPathsNested = []string{
	"ids",
	"ids.organization_ids",
	"ids.organization_ids.organization_id",
	"ids.user_ids",
	"ids.user_ids.email",
	"ids.user_ids.user_id",
}

var OrganizationOrUserIdentifiersFieldPathsTopLevel = []string{
	"ids",
}

func (dst *OrganizationOrUserIdentifiers) SetFields(src *OrganizationOrUserIdentifiers, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {

		case "ids":
			if len(subs) == 0 && src == nil {
				dst.Ids = nil
				continue
			} else if len(subs) == 0 {
				dst.Ids = src.Ids
				continue
			}

			subPathMap := _processPaths(subs)
			if len(subPathMap) > 1 {
				return fmt.Errorf("more than one field specified for oneof field '%s'", name)
			}
			for oneofName, oneofSubs := range subPathMap {
				switch oneofName {
				case "organization_ids":
					if _, ok := dst.Ids.(*OrganizationOrUserIdentifiers_OrganizationIDs); !ok {
						dst.Ids = &OrganizationOrUserIdentifiers_OrganizationIDs{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Ids.(*OrganizationOrUserIdentifiers_OrganizationIDs).OrganizationIDs
						if newDst == nil {
							newDst = &OrganizationIdentifiers{}
							dst.Ids.(*OrganizationOrUserIdentifiers_OrganizationIDs).OrganizationIDs = newDst
						}
						var newSrc *OrganizationIdentifiers
						if src != nil {
							newSrc = src.GetOrganizationIDs()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Ids.(*OrganizationOrUserIdentifiers_OrganizationIDs).OrganizationIDs = src.GetOrganizationIDs()
						} else {
							dst.Ids.(*OrganizationOrUserIdentifiers_OrganizationIDs).OrganizationIDs = nil
						}
					}
				case "user_ids":
					if _, ok := dst.Ids.(*OrganizationOrUserIdentifiers_UserIDs); !ok {
						dst.Ids = &OrganizationOrUserIdentifiers_UserIDs{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Ids.(*OrganizationOrUserIdentifiers_UserIDs).UserIDs
						if newDst == nil {
							newDst = &UserIdentifiers{}
							dst.Ids.(*OrganizationOrUserIdentifiers_UserIDs).UserIDs = newDst
						}
						var newSrc *UserIdentifiers
						if src != nil {
							newSrc = src.GetUserIDs()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Ids.(*OrganizationOrUserIdentifiers_UserIDs).UserIDs = src.GetUserIDs()
						} else {
							dst.Ids.(*OrganizationOrUserIdentifiers_UserIDs).UserIDs = nil
						}
					}

				default:
					return fmt.Errorf("invalid oneof field: '%s.%s'", name, oneofName)
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var EntityIdentifiersFieldPathsNested = []string{
	"ids",
	"ids.application_ids",
	"ids.application_ids.application_id",
	"ids.client_ids",
	"ids.client_ids.client_id",
	"ids.device_ids",
	"ids.device_ids.application_ids",
	"ids.device_ids.application_ids.application_id",
	"ids.device_ids.dev_addr",
	"ids.device_ids.dev_eui",
	"ids.device_ids.device_id",
	"ids.device_ids.join_eui",
	"ids.gateway_ids",
	"ids.gateway_ids.eui",
	"ids.gateway_ids.gateway_id",
	"ids.organization_ids",
	"ids.organization_ids.organization_id",
	"ids.user_ids",
	"ids.user_ids.email",
	"ids.user_ids.user_id",
}

var EntityIdentifiersFieldPathsTopLevel = []string{
	"ids",
}

func (dst *EntityIdentifiers) SetFields(src *EntityIdentifiers, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {

		case "ids":
			if len(subs) == 0 && src == nil {
				dst.Ids = nil
				continue
			} else if len(subs) == 0 {
				dst.Ids = src.Ids
				continue
			}

			subPathMap := _processPaths(subs)
			if len(subPathMap) > 1 {
				return fmt.Errorf("more than one field specified for oneof field '%s'", name)
			}
			for oneofName, oneofSubs := range subPathMap {
				switch oneofName {
				case "application_ids":
					if _, ok := dst.Ids.(*EntityIdentifiers_ApplicationIDs); !ok {
						dst.Ids = &EntityIdentifiers_ApplicationIDs{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Ids.(*EntityIdentifiers_ApplicationIDs).ApplicationIDs
						if newDst == nil {
							newDst = &ApplicationIdentifiers{}
							dst.Ids.(*EntityIdentifiers_ApplicationIDs).ApplicationIDs = newDst
						}
						var newSrc *ApplicationIdentifiers
						if src != nil {
							newSrc = src.GetApplicationIDs()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Ids.(*EntityIdentifiers_ApplicationIDs).ApplicationIDs = src.GetApplicationIDs()
						} else {
							dst.Ids.(*EntityIdentifiers_ApplicationIDs).ApplicationIDs = nil
						}
					}
				case "client_ids":
					if _, ok := dst.Ids.(*EntityIdentifiers_ClientIDs); !ok {
						dst.Ids = &EntityIdentifiers_ClientIDs{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Ids.(*EntityIdentifiers_ClientIDs).ClientIDs
						if newDst == nil {
							newDst = &ClientIdentifiers{}
							dst.Ids.(*EntityIdentifiers_ClientIDs).ClientIDs = newDst
						}
						var newSrc *ClientIdentifiers
						if src != nil {
							newSrc = src.GetClientIDs()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Ids.(*EntityIdentifiers_ClientIDs).ClientIDs = src.GetClientIDs()
						} else {
							dst.Ids.(*EntityIdentifiers_ClientIDs).ClientIDs = nil
						}
					}
				case "device_ids":
					if _, ok := dst.Ids.(*EntityIdentifiers_DeviceIDs); !ok {
						dst.Ids = &EntityIdentifiers_DeviceIDs{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Ids.(*EntityIdentifiers_DeviceIDs).DeviceIDs
						if newDst == nil {
							newDst = &EndDeviceIdentifiers{}
							dst.Ids.(*EntityIdentifiers_DeviceIDs).DeviceIDs = newDst
						}
						var newSrc *EndDeviceIdentifiers
						if src != nil {
							newSrc = src.GetDeviceIDs()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Ids.(*EntityIdentifiers_DeviceIDs).DeviceIDs = src.GetDeviceIDs()
						} else {
							dst.Ids.(*EntityIdentifiers_DeviceIDs).DeviceIDs = nil
						}
					}
				case "gateway_ids":
					if _, ok := dst.Ids.(*EntityIdentifiers_GatewayIDs); !ok {
						dst.Ids = &EntityIdentifiers_GatewayIDs{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Ids.(*EntityIdentifiers_GatewayIDs).GatewayIDs
						if newDst == nil {
							newDst = &GatewayIdentifiers{}
							dst.Ids.(*EntityIdentifiers_GatewayIDs).GatewayIDs = newDst
						}
						var newSrc *GatewayIdentifiers
						if src != nil {
							newSrc = src.GetGatewayIDs()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Ids.(*EntityIdentifiers_GatewayIDs).GatewayIDs = src.GetGatewayIDs()
						} else {
							dst.Ids.(*EntityIdentifiers_GatewayIDs).GatewayIDs = nil
						}
					}
				case "organization_ids":
					if _, ok := dst.Ids.(*EntityIdentifiers_OrganizationIDs); !ok {
						dst.Ids = &EntityIdentifiers_OrganizationIDs{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Ids.(*EntityIdentifiers_OrganizationIDs).OrganizationIDs
						if newDst == nil {
							newDst = &OrganizationIdentifiers{}
							dst.Ids.(*EntityIdentifiers_OrganizationIDs).OrganizationIDs = newDst
						}
						var newSrc *OrganizationIdentifiers
						if src != nil {
							newSrc = src.GetOrganizationIDs()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Ids.(*EntityIdentifiers_OrganizationIDs).OrganizationIDs = src.GetOrganizationIDs()
						} else {
							dst.Ids.(*EntityIdentifiers_OrganizationIDs).OrganizationIDs = nil
						}
					}
				case "user_ids":
					if _, ok := dst.Ids.(*EntityIdentifiers_UserIDs); !ok {
						dst.Ids = &EntityIdentifiers_UserIDs{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Ids.(*EntityIdentifiers_UserIDs).UserIDs
						if newDst == nil {
							newDst = &UserIdentifiers{}
							dst.Ids.(*EntityIdentifiers_UserIDs).UserIDs = newDst
						}
						var newSrc *UserIdentifiers
						if src != nil {
							newSrc = src.GetUserIDs()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Ids.(*EntityIdentifiers_UserIDs).UserIDs = src.GetUserIDs()
						} else {
							dst.Ids.(*EntityIdentifiers_UserIDs).UserIDs = nil
						}
					}

				default:
					return fmt.Errorf("invalid oneof field: '%s.%s'", name, oneofName)
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var CombinedIdentifiersFieldPathsNested = []string{
	"entity_identifiers",
}

var CombinedIdentifiersFieldPathsTopLevel = []string{
	"entity_identifiers",
}

func (dst *CombinedIdentifiers) SetFields(src *CombinedIdentifiers, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "entity_identifiers":
			if len(subs) > 0 {
				return fmt.Errorf("'entity_identifiers' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.EntityIdentifiers = src.EntityIdentifiers
			} else {
				dst.EntityIdentifiers = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}
