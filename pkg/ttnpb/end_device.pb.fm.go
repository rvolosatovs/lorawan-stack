// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import fmt "fmt"

var _SessionFieldPaths = [...]string{
	"dev_addr",
	"keys",
	"keys.app_s_key",
	"keys.app_s_key.kek_label",
	"keys.app_s_key.key",
	"keys.f_nwk_s_int_key",
	"keys.f_nwk_s_int_key.kek_label",
	"keys.f_nwk_s_int_key.key",
	"keys.nwk_s_enc_key",
	"keys.nwk_s_enc_key.kek_label",
	"keys.nwk_s_enc_key.key",
	"keys.s_nwk_s_int_key",
	"keys.s_nwk_s_int_key.kek_label",
	"keys.s_nwk_s_int_key.key",
	"keys.session_key_id",
	"last_a_f_cnt_down",
	"last_conf_f_cnt_down",
	"last_f_cnt_up",
	"last_n_f_cnt_down",
	"started_at",
}

func (*Session) FieldMaskPaths() []string {
	ret := make([]string, len(_SessionFieldPaths))
	copy(ret, _SessionFieldPaths[:])
	return ret
}

func (dst *Session) SetFields(src *Session, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "dev_addr":
			dst.DevAddr = src.DevAddr
		case "keys":
			dst.SessionKeys = src.SessionKeys
		case "keys.app_s_key":
			dst.SessionKeys.SetFields(&src.SessionKeys, _pathsWithoutPrefix("keys", paths)...)
		case "keys.app_s_key.kek_label":
			dst.SessionKeys.SetFields(&src.SessionKeys, _pathsWithoutPrefix("keys", paths)...)
		case "keys.app_s_key.key":
			dst.SessionKeys.SetFields(&src.SessionKeys, _pathsWithoutPrefix("keys", paths)...)
		case "keys.f_nwk_s_int_key":
			dst.SessionKeys.SetFields(&src.SessionKeys, _pathsWithoutPrefix("keys", paths)...)
		case "keys.f_nwk_s_int_key.kek_label":
			dst.SessionKeys.SetFields(&src.SessionKeys, _pathsWithoutPrefix("keys", paths)...)
		case "keys.f_nwk_s_int_key.key":
			dst.SessionKeys.SetFields(&src.SessionKeys, _pathsWithoutPrefix("keys", paths)...)
		case "keys.nwk_s_enc_key":
			dst.SessionKeys.SetFields(&src.SessionKeys, _pathsWithoutPrefix("keys", paths)...)
		case "keys.nwk_s_enc_key.kek_label":
			dst.SessionKeys.SetFields(&src.SessionKeys, _pathsWithoutPrefix("keys", paths)...)
		case "keys.nwk_s_enc_key.key":
			dst.SessionKeys.SetFields(&src.SessionKeys, _pathsWithoutPrefix("keys", paths)...)
		case "keys.s_nwk_s_int_key":
			dst.SessionKeys.SetFields(&src.SessionKeys, _pathsWithoutPrefix("keys", paths)...)
		case "keys.s_nwk_s_int_key.kek_label":
			dst.SessionKeys.SetFields(&src.SessionKeys, _pathsWithoutPrefix("keys", paths)...)
		case "keys.s_nwk_s_int_key.key":
			dst.SessionKeys.SetFields(&src.SessionKeys, _pathsWithoutPrefix("keys", paths)...)
		case "keys.session_key_id":
			dst.SessionKeys.SetFields(&src.SessionKeys, _pathsWithoutPrefix("keys", paths)...)
		case "last_a_f_cnt_down":
			dst.LastAFCntDown = src.LastAFCntDown
		case "last_conf_f_cnt_down":
			dst.LastConfFCntDown = src.LastConfFCntDown
		case "last_f_cnt_up":
			dst.LastFCntUp = src.LastFCntUp
		case "last_n_f_cnt_down":
			dst.LastNFCntDown = src.LastNFCntDown
		case "started_at":
			dst.StartedAt = src.StartedAt
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _MACParametersFieldPaths = [...]string{
	"adr_ack_delay",
	"adr_ack_limit",
	"adr_data_rate_index",
	"adr_nb_trans",
	"adr_tx_power_index",
	"beacon_frequency",
	"channels",
	"downlink_dwell_time",
	"max_duty_cycle",
	"max_eirp",
	"ping_slot_data_rate_index",
	"ping_slot_frequency",
	"rejoin_count_periodicity",
	"rejoin_time_periodicity",
	"rx1_data_rate_offset",
	"rx1_delay",
	"rx2_data_rate_index",
	"rx2_frequency",
	"uplink_dwell_time",
}

func (*MACParameters) FieldMaskPaths() []string {
	ret := make([]string, len(_MACParametersFieldPaths))
	copy(ret, _MACParametersFieldPaths[:])
	return ret
}

func (dst *MACParameters) SetFields(src *MACParameters, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "adr_ack_delay":
			dst.ADRAckDelay = src.ADRAckDelay
		case "adr_ack_limit":
			dst.ADRAckLimit = src.ADRAckLimit
		case "adr_data_rate_index":
			dst.ADRDataRateIndex = src.ADRDataRateIndex
		case "adr_nb_trans":
			dst.ADRNbTrans = src.ADRNbTrans
		case "adr_tx_power_index":
			dst.ADRTxPowerIndex = src.ADRTxPowerIndex
		case "beacon_frequency":
			dst.BeaconFrequency = src.BeaconFrequency
		case "channels":
			dst.Channels = src.Channels
		case "downlink_dwell_time":
			dst.DownlinkDwellTime = src.DownlinkDwellTime
		case "max_duty_cycle":
			dst.MaxDutyCycle = src.MaxDutyCycle
		case "max_eirp":
			dst.MaxEIRP = src.MaxEIRP
		case "ping_slot_data_rate_index":
			dst.PingSlotDataRateIndex = src.PingSlotDataRateIndex
		case "ping_slot_frequency":
			dst.PingSlotFrequency = src.PingSlotFrequency
		case "rejoin_count_periodicity":
			dst.RejoinCountPeriodicity = src.RejoinCountPeriodicity
		case "rejoin_time_periodicity":
			dst.RejoinTimePeriodicity = src.RejoinTimePeriodicity
		case "rx1_data_rate_offset":
			dst.Rx1DataRateOffset = src.Rx1DataRateOffset
		case "rx1_delay":
			dst.Rx1Delay = src.Rx1Delay
		case "rx2_data_rate_index":
			dst.Rx2DataRateIndex = src.Rx2DataRateIndex
		case "rx2_frequency":
			dst.Rx2Frequency = src.Rx2Frequency
		case "uplink_dwell_time":
			dst.UplinkDwellTime = src.UplinkDwellTime
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _MACParameters_ChannelFieldPaths = [...]string{
	"downlink_frequency",
	"enable_uplink",
	"max_data_rate_index",
	"min_data_rate_index",
	"uplink_frequency",
}

func (*MACParameters_Channel) FieldMaskPaths() []string {
	ret := make([]string, len(_MACParameters_ChannelFieldPaths))
	copy(ret, _MACParameters_ChannelFieldPaths[:])
	return ret
}

func (dst *MACParameters_Channel) SetFields(src *MACParameters_Channel, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "downlink_frequency":
			dst.DownlinkFrequency = src.DownlinkFrequency
		case "enable_uplink":
			dst.EnableUplink = src.EnableUplink
		case "max_data_rate_index":
			dst.MaxDataRateIndex = src.MaxDataRateIndex
		case "min_data_rate_index":
			dst.MinDataRateIndex = src.MinDataRateIndex
		case "uplink_frequency":
			dst.UplinkFrequency = src.UplinkFrequency
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _EndDeviceBrandFieldPaths = [...]string{
	"id",
	"logos",
	"name",
	"url",
}

func (*EndDeviceBrand) FieldMaskPaths() []string {
	ret := make([]string, len(_EndDeviceBrandFieldPaths))
	copy(ret, _EndDeviceBrandFieldPaths[:])
	return ret
}

func (dst *EndDeviceBrand) SetFields(src *EndDeviceBrand, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "id":
			dst.ID = src.ID
		case "logos":
			dst.Logos = src.Logos
		case "name":
			dst.Name = src.Name
		case "url":
			dst.URL = src.URL
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _EndDeviceModelFieldPaths = [...]string{
	"brand_id",
	"id",
	"name",
}

func (*EndDeviceModel) FieldMaskPaths() []string {
	ret := make([]string, len(_EndDeviceModelFieldPaths))
	copy(ret, _EndDeviceModelFieldPaths[:])
	return ret
}

func (dst *EndDeviceModel) SetFields(src *EndDeviceModel, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "brand_id":
			dst.BrandID = src.BrandID
		case "id":
			dst.ID = src.ID
		case "name":
			dst.Name = src.Name
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _EndDeviceVersionIdentifiersFieldPaths = [...]string{
	"brand_id",
	"firmware_version",
	"hardware_version",
	"model_id",
}

func (*EndDeviceVersionIdentifiers) FieldMaskPaths() []string {
	ret := make([]string, len(_EndDeviceVersionIdentifiersFieldPaths))
	copy(ret, _EndDeviceVersionIdentifiersFieldPaths[:])
	return ret
}

func (dst *EndDeviceVersionIdentifiers) SetFields(src *EndDeviceVersionIdentifiers, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "brand_id":
			dst.BrandID = src.BrandID
		case "firmware_version":
			dst.FirmwareVersion = src.FirmwareVersion
		case "hardware_version":
			dst.HardwareVersion = src.HardwareVersion
		case "model_id":
			dst.ModelID = src.ModelID
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _EndDeviceVersionFieldPaths = [...]string{
	"default_formatters",
	"default_formatters.down_formatter",
	"default_formatters.down_formatter_parameter",
	"default_formatters.up_formatter",
	"default_formatters.up_formatter_parameter",
	"default_mac_parameters",
	"default_mac_parameters.adr_ack_delay",
	"default_mac_parameters.adr_ack_limit",
	"default_mac_parameters.adr_data_rate_index",
	"default_mac_parameters.adr_nb_trans",
	"default_mac_parameters.adr_tx_power_index",
	"default_mac_parameters.beacon_frequency",
	"default_mac_parameters.channels",
	"default_mac_parameters.downlink_dwell_time",
	"default_mac_parameters.max_duty_cycle",
	"default_mac_parameters.max_eirp",
	"default_mac_parameters.ping_slot_data_rate_index",
	"default_mac_parameters.ping_slot_frequency",
	"default_mac_parameters.rejoin_count_periodicity",
	"default_mac_parameters.rejoin_time_periodicity",
	"default_mac_parameters.rx1_data_rate_offset",
	"default_mac_parameters.rx1_delay",
	"default_mac_parameters.rx2_data_rate_index",
	"default_mac_parameters.rx2_frequency",
	"default_mac_parameters.uplink_dwell_time",
	"frequency_plan_id",
	"ids",
	"ids.brand_id",
	"ids.firmware_version",
	"ids.hardware_version",
	"ids.model_id",
	"lorawan_phy_version",
	"lorawan_version",
	"max_frequency",
	"min_frequency",
	"photos",
	"resets_f_cnt",
	"resets_join_nonces",
	"supports_class_b",
	"supports_class_c",
	"supports_join",
	"uses_32_bit_f_cnt",
}

func (*EndDeviceVersion) FieldMaskPaths() []string {
	ret := make([]string, len(_EndDeviceVersionFieldPaths))
	copy(ret, _EndDeviceVersionFieldPaths[:])
	return ret
}

func (dst *EndDeviceVersion) SetFields(src *EndDeviceVersion, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "default_formatters":
			dst.DefaultFormatters = src.DefaultFormatters
		case "default_formatters.down_formatter":
			dst.DefaultFormatters.SetFields(&src.DefaultFormatters, _pathsWithoutPrefix("default_formatters", paths)...)
		case "default_formatters.down_formatter_parameter":
			dst.DefaultFormatters.SetFields(&src.DefaultFormatters, _pathsWithoutPrefix("default_formatters", paths)...)
		case "default_formatters.up_formatter":
			dst.DefaultFormatters.SetFields(&src.DefaultFormatters, _pathsWithoutPrefix("default_formatters", paths)...)
		case "default_formatters.up_formatter_parameter":
			dst.DefaultFormatters.SetFields(&src.DefaultFormatters, _pathsWithoutPrefix("default_formatters", paths)...)
		case "default_mac_parameters":
			dst.DefaultMACParameters = src.DefaultMACParameters
		case "default_mac_parameters.adr_ack_delay":
			if dst.DefaultMACParameters == nil {
				dst.DefaultMACParameters = &MACParameters{}
			}
			dst.DefaultMACParameters.SetFields(src.DefaultMACParameters, _pathsWithoutPrefix("default_mac_parameters", paths)...)
		case "default_mac_parameters.adr_ack_limit":
			if dst.DefaultMACParameters == nil {
				dst.DefaultMACParameters = &MACParameters{}
			}
			dst.DefaultMACParameters.SetFields(src.DefaultMACParameters, _pathsWithoutPrefix("default_mac_parameters", paths)...)
		case "default_mac_parameters.adr_data_rate_index":
			if dst.DefaultMACParameters == nil {
				dst.DefaultMACParameters = &MACParameters{}
			}
			dst.DefaultMACParameters.SetFields(src.DefaultMACParameters, _pathsWithoutPrefix("default_mac_parameters", paths)...)
		case "default_mac_parameters.adr_nb_trans":
			if dst.DefaultMACParameters == nil {
				dst.DefaultMACParameters = &MACParameters{}
			}
			dst.DefaultMACParameters.SetFields(src.DefaultMACParameters, _pathsWithoutPrefix("default_mac_parameters", paths)...)
		case "default_mac_parameters.adr_tx_power_index":
			if dst.DefaultMACParameters == nil {
				dst.DefaultMACParameters = &MACParameters{}
			}
			dst.DefaultMACParameters.SetFields(src.DefaultMACParameters, _pathsWithoutPrefix("default_mac_parameters", paths)...)
		case "default_mac_parameters.beacon_frequency":
			if dst.DefaultMACParameters == nil {
				dst.DefaultMACParameters = &MACParameters{}
			}
			dst.DefaultMACParameters.SetFields(src.DefaultMACParameters, _pathsWithoutPrefix("default_mac_parameters", paths)...)
		case "default_mac_parameters.channels":
			if dst.DefaultMACParameters == nil {
				dst.DefaultMACParameters = &MACParameters{}
			}
			dst.DefaultMACParameters.SetFields(src.DefaultMACParameters, _pathsWithoutPrefix("default_mac_parameters", paths)...)
		case "default_mac_parameters.downlink_dwell_time":
			if dst.DefaultMACParameters == nil {
				dst.DefaultMACParameters = &MACParameters{}
			}
			dst.DefaultMACParameters.SetFields(src.DefaultMACParameters, _pathsWithoutPrefix("default_mac_parameters", paths)...)
		case "default_mac_parameters.max_duty_cycle":
			if dst.DefaultMACParameters == nil {
				dst.DefaultMACParameters = &MACParameters{}
			}
			dst.DefaultMACParameters.SetFields(src.DefaultMACParameters, _pathsWithoutPrefix("default_mac_parameters", paths)...)
		case "default_mac_parameters.max_eirp":
			if dst.DefaultMACParameters == nil {
				dst.DefaultMACParameters = &MACParameters{}
			}
			dst.DefaultMACParameters.SetFields(src.DefaultMACParameters, _pathsWithoutPrefix("default_mac_parameters", paths)...)
		case "default_mac_parameters.ping_slot_data_rate_index":
			if dst.DefaultMACParameters == nil {
				dst.DefaultMACParameters = &MACParameters{}
			}
			dst.DefaultMACParameters.SetFields(src.DefaultMACParameters, _pathsWithoutPrefix("default_mac_parameters", paths)...)
		case "default_mac_parameters.ping_slot_frequency":
			if dst.DefaultMACParameters == nil {
				dst.DefaultMACParameters = &MACParameters{}
			}
			dst.DefaultMACParameters.SetFields(src.DefaultMACParameters, _pathsWithoutPrefix("default_mac_parameters", paths)...)
		case "default_mac_parameters.rejoin_count_periodicity":
			if dst.DefaultMACParameters == nil {
				dst.DefaultMACParameters = &MACParameters{}
			}
			dst.DefaultMACParameters.SetFields(src.DefaultMACParameters, _pathsWithoutPrefix("default_mac_parameters", paths)...)
		case "default_mac_parameters.rejoin_time_periodicity":
			if dst.DefaultMACParameters == nil {
				dst.DefaultMACParameters = &MACParameters{}
			}
			dst.DefaultMACParameters.SetFields(src.DefaultMACParameters, _pathsWithoutPrefix("default_mac_parameters", paths)...)
		case "default_mac_parameters.rx1_data_rate_offset":
			if dst.DefaultMACParameters == nil {
				dst.DefaultMACParameters = &MACParameters{}
			}
			dst.DefaultMACParameters.SetFields(src.DefaultMACParameters, _pathsWithoutPrefix("default_mac_parameters", paths)...)
		case "default_mac_parameters.rx1_delay":
			if dst.DefaultMACParameters == nil {
				dst.DefaultMACParameters = &MACParameters{}
			}
			dst.DefaultMACParameters.SetFields(src.DefaultMACParameters, _pathsWithoutPrefix("default_mac_parameters", paths)...)
		case "default_mac_parameters.rx2_data_rate_index":
			if dst.DefaultMACParameters == nil {
				dst.DefaultMACParameters = &MACParameters{}
			}
			dst.DefaultMACParameters.SetFields(src.DefaultMACParameters, _pathsWithoutPrefix("default_mac_parameters", paths)...)
		case "default_mac_parameters.rx2_frequency":
			if dst.DefaultMACParameters == nil {
				dst.DefaultMACParameters = &MACParameters{}
			}
			dst.DefaultMACParameters.SetFields(src.DefaultMACParameters, _pathsWithoutPrefix("default_mac_parameters", paths)...)
		case "default_mac_parameters.uplink_dwell_time":
			if dst.DefaultMACParameters == nil {
				dst.DefaultMACParameters = &MACParameters{}
			}
			dst.DefaultMACParameters.SetFields(src.DefaultMACParameters, _pathsWithoutPrefix("default_mac_parameters", paths)...)
		case "frequency_plan_id":
			dst.FrequencyPlanID = src.FrequencyPlanID
		case "ids":
			dst.EndDeviceVersionIdentifiers = src.EndDeviceVersionIdentifiers
		case "ids.brand_id":
			dst.EndDeviceVersionIdentifiers.SetFields(&src.EndDeviceVersionIdentifiers, _pathsWithoutPrefix("ids", paths)...)
		case "ids.firmware_version":
			dst.EndDeviceVersionIdentifiers.SetFields(&src.EndDeviceVersionIdentifiers, _pathsWithoutPrefix("ids", paths)...)
		case "ids.hardware_version":
			dst.EndDeviceVersionIdentifiers.SetFields(&src.EndDeviceVersionIdentifiers, _pathsWithoutPrefix("ids", paths)...)
		case "ids.model_id":
			dst.EndDeviceVersionIdentifiers.SetFields(&src.EndDeviceVersionIdentifiers, _pathsWithoutPrefix("ids", paths)...)
		case "lorawan_phy_version":
			dst.LoRaWANPHYVersion = src.LoRaWANPHYVersion
		case "lorawan_version":
			dst.LoRaWANVersion = src.LoRaWANVersion
		case "max_frequency":
			dst.MaxFrequency = src.MaxFrequency
		case "min_frequency":
			dst.MinFrequency = src.MinFrequency
		case "photos":
			dst.Photos = src.Photos
		case "resets_f_cnt":
			dst.ResetsFCnt = src.ResetsFCnt
		case "resets_join_nonces":
			dst.ResetsJoinNonces = src.ResetsJoinNonces
		case "supports_class_b":
			dst.SupportsClassB = src.SupportsClassB
		case "supports_class_c":
			dst.SupportsClassC = src.SupportsClassC
		case "supports_join":
			dst.SupportsJoin = src.SupportsJoin
		case "uses_32_bit_f_cnt":
			dst.Uses32BitFCnt = src.Uses32BitFCnt
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _MACSettingsFieldPaths = [...]string{
	"adr_margin",
	"class_b_timeout",
	"class_c_timeout",
	"status_count_periodicity",
	"status_time_periodicity",
	"use_adr",
}

func (*MACSettings) FieldMaskPaths() []string {
	ret := make([]string, len(_MACSettingsFieldPaths))
	copy(ret, _MACSettingsFieldPaths[:])
	return ret
}

func (dst *MACSettings) SetFields(src *MACSettings, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "adr_margin":
			dst.ADRMargin = src.ADRMargin
		case "class_b_timeout":
			dst.ClassBTimeout = src.ClassBTimeout
		case "class_c_timeout":
			dst.ClassCTimeout = src.ClassCTimeout
		case "status_count_periodicity":
			dst.StatusCountPeriodicity = src.StatusCountPeriodicity
		case "status_time_periodicity":
			dst.StatusTimePeriodicity = src.StatusTimePeriodicity
		case "use_adr":
			dst.UseADR = src.UseADR
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _MACStateFieldPaths = [...]string{
	"current_parameters",
	"current_parameters.adr_ack_delay",
	"current_parameters.adr_ack_limit",
	"current_parameters.adr_data_rate_index",
	"current_parameters.adr_nb_trans",
	"current_parameters.adr_tx_power_index",
	"current_parameters.beacon_frequency",
	"current_parameters.channels",
	"current_parameters.downlink_dwell_time",
	"current_parameters.max_duty_cycle",
	"current_parameters.max_eirp",
	"current_parameters.ping_slot_data_rate_index",
	"current_parameters.ping_slot_frequency",
	"current_parameters.rejoin_count_periodicity",
	"current_parameters.rejoin_time_periodicity",
	"current_parameters.rx1_data_rate_offset",
	"current_parameters.rx1_delay",
	"current_parameters.rx2_data_rate_index",
	"current_parameters.rx2_frequency",
	"current_parameters.uplink_dwell_time",
	"desired_parameters",
	"desired_parameters.adr_ack_delay",
	"desired_parameters.adr_ack_limit",
	"desired_parameters.adr_data_rate_index",
	"desired_parameters.adr_nb_trans",
	"desired_parameters.adr_tx_power_index",
	"desired_parameters.beacon_frequency",
	"desired_parameters.channels",
	"desired_parameters.downlink_dwell_time",
	"desired_parameters.max_duty_cycle",
	"desired_parameters.max_eirp",
	"desired_parameters.ping_slot_data_rate_index",
	"desired_parameters.ping_slot_frequency",
	"desired_parameters.rejoin_count_periodicity",
	"desired_parameters.rejoin_time_periodicity",
	"desired_parameters.rx1_data_rate_offset",
	"desired_parameters.rx1_delay",
	"desired_parameters.rx2_data_rate_index",
	"desired_parameters.rx2_frequency",
	"desired_parameters.uplink_dwell_time",
	"device_class",
	"last_confirmed_downlink_at",
	"last_dev_status_f_cnt_up",
	"lorawan_version",
	"pending_application_downlink",
	"pending_application_downlink.class_b_c",
	"pending_application_downlink.class_b_c.gateways",
	"pending_application_downlink.class_b_c.time",
	"pending_application_downlink.confirmed",
	"pending_application_downlink.correlation_ids",
	"pending_application_downlink.decoded_payload",
	"pending_application_downlink.f_cnt",
	"pending_application_downlink.f_port",
	"pending_application_downlink.frm_payload",
	"pending_application_downlink.session_key_id",
	"pending_requests",
	"ping_slot_periodicity",
	"queued_responses",
}

func (*MACState) FieldMaskPaths() []string {
	ret := make([]string, len(_MACStateFieldPaths))
	copy(ret, _MACStateFieldPaths[:])
	return ret
}

func (dst *MACState) SetFields(src *MACState, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "current_parameters":
			dst.CurrentParameters = src.CurrentParameters
		case "current_parameters.adr_ack_delay":
			dst.CurrentParameters.SetFields(&src.CurrentParameters, _pathsWithoutPrefix("current_parameters", paths)...)
		case "current_parameters.adr_ack_limit":
			dst.CurrentParameters.SetFields(&src.CurrentParameters, _pathsWithoutPrefix("current_parameters", paths)...)
		case "current_parameters.adr_data_rate_index":
			dst.CurrentParameters.SetFields(&src.CurrentParameters, _pathsWithoutPrefix("current_parameters", paths)...)
		case "current_parameters.adr_nb_trans":
			dst.CurrentParameters.SetFields(&src.CurrentParameters, _pathsWithoutPrefix("current_parameters", paths)...)
		case "current_parameters.adr_tx_power_index":
			dst.CurrentParameters.SetFields(&src.CurrentParameters, _pathsWithoutPrefix("current_parameters", paths)...)
		case "current_parameters.beacon_frequency":
			dst.CurrentParameters.SetFields(&src.CurrentParameters, _pathsWithoutPrefix("current_parameters", paths)...)
		case "current_parameters.channels":
			dst.CurrentParameters.SetFields(&src.CurrentParameters, _pathsWithoutPrefix("current_parameters", paths)...)
		case "current_parameters.downlink_dwell_time":
			dst.CurrentParameters.SetFields(&src.CurrentParameters, _pathsWithoutPrefix("current_parameters", paths)...)
		case "current_parameters.max_duty_cycle":
			dst.CurrentParameters.SetFields(&src.CurrentParameters, _pathsWithoutPrefix("current_parameters", paths)...)
		case "current_parameters.max_eirp":
			dst.CurrentParameters.SetFields(&src.CurrentParameters, _pathsWithoutPrefix("current_parameters", paths)...)
		case "current_parameters.ping_slot_data_rate_index":
			dst.CurrentParameters.SetFields(&src.CurrentParameters, _pathsWithoutPrefix("current_parameters", paths)...)
		case "current_parameters.ping_slot_frequency":
			dst.CurrentParameters.SetFields(&src.CurrentParameters, _pathsWithoutPrefix("current_parameters", paths)...)
		case "current_parameters.rejoin_count_periodicity":
			dst.CurrentParameters.SetFields(&src.CurrentParameters, _pathsWithoutPrefix("current_parameters", paths)...)
		case "current_parameters.rejoin_time_periodicity":
			dst.CurrentParameters.SetFields(&src.CurrentParameters, _pathsWithoutPrefix("current_parameters", paths)...)
		case "current_parameters.rx1_data_rate_offset":
			dst.CurrentParameters.SetFields(&src.CurrentParameters, _pathsWithoutPrefix("current_parameters", paths)...)
		case "current_parameters.rx1_delay":
			dst.CurrentParameters.SetFields(&src.CurrentParameters, _pathsWithoutPrefix("current_parameters", paths)...)
		case "current_parameters.rx2_data_rate_index":
			dst.CurrentParameters.SetFields(&src.CurrentParameters, _pathsWithoutPrefix("current_parameters", paths)...)
		case "current_parameters.rx2_frequency":
			dst.CurrentParameters.SetFields(&src.CurrentParameters, _pathsWithoutPrefix("current_parameters", paths)...)
		case "current_parameters.uplink_dwell_time":
			dst.CurrentParameters.SetFields(&src.CurrentParameters, _pathsWithoutPrefix("current_parameters", paths)...)
		case "desired_parameters":
			dst.DesiredParameters = src.DesiredParameters
		case "desired_parameters.adr_ack_delay":
			dst.DesiredParameters.SetFields(&src.DesiredParameters, _pathsWithoutPrefix("desired_parameters", paths)...)
		case "desired_parameters.adr_ack_limit":
			dst.DesiredParameters.SetFields(&src.DesiredParameters, _pathsWithoutPrefix("desired_parameters", paths)...)
		case "desired_parameters.adr_data_rate_index":
			dst.DesiredParameters.SetFields(&src.DesiredParameters, _pathsWithoutPrefix("desired_parameters", paths)...)
		case "desired_parameters.adr_nb_trans":
			dst.DesiredParameters.SetFields(&src.DesiredParameters, _pathsWithoutPrefix("desired_parameters", paths)...)
		case "desired_parameters.adr_tx_power_index":
			dst.DesiredParameters.SetFields(&src.DesiredParameters, _pathsWithoutPrefix("desired_parameters", paths)...)
		case "desired_parameters.beacon_frequency":
			dst.DesiredParameters.SetFields(&src.DesiredParameters, _pathsWithoutPrefix("desired_parameters", paths)...)
		case "desired_parameters.channels":
			dst.DesiredParameters.SetFields(&src.DesiredParameters, _pathsWithoutPrefix("desired_parameters", paths)...)
		case "desired_parameters.downlink_dwell_time":
			dst.DesiredParameters.SetFields(&src.DesiredParameters, _pathsWithoutPrefix("desired_parameters", paths)...)
		case "desired_parameters.max_duty_cycle":
			dst.DesiredParameters.SetFields(&src.DesiredParameters, _pathsWithoutPrefix("desired_parameters", paths)...)
		case "desired_parameters.max_eirp":
			dst.DesiredParameters.SetFields(&src.DesiredParameters, _pathsWithoutPrefix("desired_parameters", paths)...)
		case "desired_parameters.ping_slot_data_rate_index":
			dst.DesiredParameters.SetFields(&src.DesiredParameters, _pathsWithoutPrefix("desired_parameters", paths)...)
		case "desired_parameters.ping_slot_frequency":
			dst.DesiredParameters.SetFields(&src.DesiredParameters, _pathsWithoutPrefix("desired_parameters", paths)...)
		case "desired_parameters.rejoin_count_periodicity":
			dst.DesiredParameters.SetFields(&src.DesiredParameters, _pathsWithoutPrefix("desired_parameters", paths)...)
		case "desired_parameters.rejoin_time_periodicity":
			dst.DesiredParameters.SetFields(&src.DesiredParameters, _pathsWithoutPrefix("desired_parameters", paths)...)
		case "desired_parameters.rx1_data_rate_offset":
			dst.DesiredParameters.SetFields(&src.DesiredParameters, _pathsWithoutPrefix("desired_parameters", paths)...)
		case "desired_parameters.rx1_delay":
			dst.DesiredParameters.SetFields(&src.DesiredParameters, _pathsWithoutPrefix("desired_parameters", paths)...)
		case "desired_parameters.rx2_data_rate_index":
			dst.DesiredParameters.SetFields(&src.DesiredParameters, _pathsWithoutPrefix("desired_parameters", paths)...)
		case "desired_parameters.rx2_frequency":
			dst.DesiredParameters.SetFields(&src.DesiredParameters, _pathsWithoutPrefix("desired_parameters", paths)...)
		case "desired_parameters.uplink_dwell_time":
			dst.DesiredParameters.SetFields(&src.DesiredParameters, _pathsWithoutPrefix("desired_parameters", paths)...)
		case "device_class":
			dst.DeviceClass = src.DeviceClass
		case "last_confirmed_downlink_at":
			dst.LastConfirmedDownlinkAt = src.LastConfirmedDownlinkAt
		case "last_dev_status_f_cnt_up":
			dst.LastDevStatusFCntUp = src.LastDevStatusFCntUp
		case "lorawan_version":
			dst.LoRaWANVersion = src.LoRaWANVersion
		case "pending_application_downlink":
			dst.PendingApplicationDownlink = src.PendingApplicationDownlink
		case "pending_application_downlink.class_b_c":
			if dst.PendingApplicationDownlink == nil {
				dst.PendingApplicationDownlink = &ApplicationDownlink{}
			}
			dst.PendingApplicationDownlink.SetFields(src.PendingApplicationDownlink, _pathsWithoutPrefix("pending_application_downlink", paths)...)
		case "pending_application_downlink.class_b_c.gateways":
			if dst.PendingApplicationDownlink == nil {
				dst.PendingApplicationDownlink = &ApplicationDownlink{}
			}
			dst.PendingApplicationDownlink.SetFields(src.PendingApplicationDownlink, _pathsWithoutPrefix("pending_application_downlink", paths)...)
		case "pending_application_downlink.class_b_c.time":
			if dst.PendingApplicationDownlink == nil {
				dst.PendingApplicationDownlink = &ApplicationDownlink{}
			}
			dst.PendingApplicationDownlink.SetFields(src.PendingApplicationDownlink, _pathsWithoutPrefix("pending_application_downlink", paths)...)
		case "pending_application_downlink.confirmed":
			if dst.PendingApplicationDownlink == nil {
				dst.PendingApplicationDownlink = &ApplicationDownlink{}
			}
			dst.PendingApplicationDownlink.SetFields(src.PendingApplicationDownlink, _pathsWithoutPrefix("pending_application_downlink", paths)...)
		case "pending_application_downlink.correlation_ids":
			if dst.PendingApplicationDownlink == nil {
				dst.PendingApplicationDownlink = &ApplicationDownlink{}
			}
			dst.PendingApplicationDownlink.SetFields(src.PendingApplicationDownlink, _pathsWithoutPrefix("pending_application_downlink", paths)...)
		case "pending_application_downlink.decoded_payload":
			if dst.PendingApplicationDownlink == nil {
				dst.PendingApplicationDownlink = &ApplicationDownlink{}
			}
			dst.PendingApplicationDownlink.SetFields(src.PendingApplicationDownlink, _pathsWithoutPrefix("pending_application_downlink", paths)...)
		case "pending_application_downlink.f_cnt":
			if dst.PendingApplicationDownlink == nil {
				dst.PendingApplicationDownlink = &ApplicationDownlink{}
			}
			dst.PendingApplicationDownlink.SetFields(src.PendingApplicationDownlink, _pathsWithoutPrefix("pending_application_downlink", paths)...)
		case "pending_application_downlink.f_port":
			if dst.PendingApplicationDownlink == nil {
				dst.PendingApplicationDownlink = &ApplicationDownlink{}
			}
			dst.PendingApplicationDownlink.SetFields(src.PendingApplicationDownlink, _pathsWithoutPrefix("pending_application_downlink", paths)...)
		case "pending_application_downlink.frm_payload":
			if dst.PendingApplicationDownlink == nil {
				dst.PendingApplicationDownlink = &ApplicationDownlink{}
			}
			dst.PendingApplicationDownlink.SetFields(src.PendingApplicationDownlink, _pathsWithoutPrefix("pending_application_downlink", paths)...)
		case "pending_application_downlink.session_key_id":
			if dst.PendingApplicationDownlink == nil {
				dst.PendingApplicationDownlink = &ApplicationDownlink{}
			}
			dst.PendingApplicationDownlink.SetFields(src.PendingApplicationDownlink, _pathsWithoutPrefix("pending_application_downlink", paths)...)
		case "pending_requests":
			dst.PendingRequests = src.PendingRequests
		case "ping_slot_periodicity":
			dst.PingSlotPeriodicity = src.PingSlotPeriodicity
		case "queued_responses":
			dst.QueuedResponses = src.QueuedResponses
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _EndDeviceFieldPaths = [...]string{
	"application_server_address",
	"attributes",
	"battery_percentage",
	"created_at",
	"default_mac_parameters",
	"default_mac_parameters.adr_ack_delay",
	"default_mac_parameters.adr_ack_limit",
	"default_mac_parameters.adr_data_rate_index",
	"default_mac_parameters.adr_nb_trans",
	"default_mac_parameters.adr_tx_power_index",
	"default_mac_parameters.beacon_frequency",
	"default_mac_parameters.channels",
	"default_mac_parameters.downlink_dwell_time",
	"default_mac_parameters.max_duty_cycle",
	"default_mac_parameters.max_eirp",
	"default_mac_parameters.ping_slot_data_rate_index",
	"default_mac_parameters.ping_slot_frequency",
	"default_mac_parameters.rejoin_count_periodicity",
	"default_mac_parameters.rejoin_time_periodicity",
	"default_mac_parameters.rx1_data_rate_offset",
	"default_mac_parameters.rx1_delay",
	"default_mac_parameters.rx2_data_rate_index",
	"default_mac_parameters.rx2_frequency",
	"default_mac_parameters.uplink_dwell_time",
	"description",
	"downlink_margin",
	"formatters",
	"formatters.down_formatter",
	"formatters.down_formatter_parameter",
	"formatters.up_formatter",
	"formatters.up_formatter_parameter",
	"frequency_plan_id",
	"ids",
	"ids.application_ids",
	"ids.application_ids.application_id",
	"ids.dev_addr",
	"ids.dev_eui",
	"ids.device_id",
	"ids.join_eui",
	"join_server_address",
	"last_dev_nonce",
	"last_dev_status_received_at",
	"last_join_nonce",
	"last_rj_count_0",
	"last_rj_count_1",
	"locations",
	"lorawan_phy_version",
	"lorawan_version",
	"mac_settings",
	"mac_settings.adr_margin",
	"mac_settings.class_b_timeout",
	"mac_settings.class_c_timeout",
	"mac_settings.status_count_periodicity",
	"mac_settings.status_time_periodicity",
	"mac_settings.use_adr",
	"mac_state",
	"mac_state.current_parameters",
	"mac_state.current_parameters.adr_ack_delay",
	"mac_state.current_parameters.adr_ack_limit",
	"mac_state.current_parameters.adr_data_rate_index",
	"mac_state.current_parameters.adr_nb_trans",
	"mac_state.current_parameters.adr_tx_power_index",
	"mac_state.current_parameters.beacon_frequency",
	"mac_state.current_parameters.channels",
	"mac_state.current_parameters.downlink_dwell_time",
	"mac_state.current_parameters.max_duty_cycle",
	"mac_state.current_parameters.max_eirp",
	"mac_state.current_parameters.ping_slot_data_rate_index",
	"mac_state.current_parameters.ping_slot_frequency",
	"mac_state.current_parameters.rejoin_count_periodicity",
	"mac_state.current_parameters.rejoin_time_periodicity",
	"mac_state.current_parameters.rx1_data_rate_offset",
	"mac_state.current_parameters.rx1_delay",
	"mac_state.current_parameters.rx2_data_rate_index",
	"mac_state.current_parameters.rx2_frequency",
	"mac_state.current_parameters.uplink_dwell_time",
	"mac_state.desired_parameters",
	"mac_state.desired_parameters.adr_ack_delay",
	"mac_state.desired_parameters.adr_ack_limit",
	"mac_state.desired_parameters.adr_data_rate_index",
	"mac_state.desired_parameters.adr_nb_trans",
	"mac_state.desired_parameters.adr_tx_power_index",
	"mac_state.desired_parameters.beacon_frequency",
	"mac_state.desired_parameters.channels",
	"mac_state.desired_parameters.downlink_dwell_time",
	"mac_state.desired_parameters.max_duty_cycle",
	"mac_state.desired_parameters.max_eirp",
	"mac_state.desired_parameters.ping_slot_data_rate_index",
	"mac_state.desired_parameters.ping_slot_frequency",
	"mac_state.desired_parameters.rejoin_count_periodicity",
	"mac_state.desired_parameters.rejoin_time_periodicity",
	"mac_state.desired_parameters.rx1_data_rate_offset",
	"mac_state.desired_parameters.rx1_delay",
	"mac_state.desired_parameters.rx2_data_rate_index",
	"mac_state.desired_parameters.rx2_frequency",
	"mac_state.desired_parameters.uplink_dwell_time",
	"mac_state.device_class",
	"mac_state.last_confirmed_downlink_at",
	"mac_state.last_dev_status_f_cnt_up",
	"mac_state.lorawan_version",
	"mac_state.pending_application_downlink",
	"mac_state.pending_application_downlink.class_b_c",
	"mac_state.pending_application_downlink.class_b_c.gateways",
	"mac_state.pending_application_downlink.class_b_c.time",
	"mac_state.pending_application_downlink.confirmed",
	"mac_state.pending_application_downlink.correlation_ids",
	"mac_state.pending_application_downlink.decoded_payload",
	"mac_state.pending_application_downlink.f_cnt",
	"mac_state.pending_application_downlink.f_port",
	"mac_state.pending_application_downlink.frm_payload",
	"mac_state.pending_application_downlink.session_key_id",
	"mac_state.pending_requests",
	"mac_state.ping_slot_periodicity",
	"mac_state.queued_responses",
	"max_frequency",
	"min_frequency",
	"name",
	"net_id",
	"network_server_address",
	"pending_session",
	"pending_session.dev_addr",
	"pending_session.keys",
	"pending_session.keys.app_s_key",
	"pending_session.keys.app_s_key.kek_label",
	"pending_session.keys.app_s_key.key",
	"pending_session.keys.f_nwk_s_int_key",
	"pending_session.keys.f_nwk_s_int_key.kek_label",
	"pending_session.keys.f_nwk_s_int_key.key",
	"pending_session.keys.nwk_s_enc_key",
	"pending_session.keys.nwk_s_enc_key.kek_label",
	"pending_session.keys.nwk_s_enc_key.key",
	"pending_session.keys.s_nwk_s_int_key",
	"pending_session.keys.s_nwk_s_int_key.kek_label",
	"pending_session.keys.s_nwk_s_int_key.key",
	"pending_session.keys.session_key_id",
	"pending_session.last_a_f_cnt_down",
	"pending_session.last_conf_f_cnt_down",
	"pending_session.last_f_cnt_up",
	"pending_session.last_n_f_cnt_down",
	"pending_session.started_at",
	"power_state",
	"queued_application_downlinks",
	"recent_downlinks",
	"recent_uplinks",
	"resets_f_cnt",
	"resets_join_nonces",
	"root_keys",
	"root_keys.app_key",
	"root_keys.app_key.kek_label",
	"root_keys.app_key.key",
	"root_keys.nwk_key",
	"root_keys.nwk_key.kek_label",
	"root_keys.nwk_key.key",
	"root_keys.root_key_id",
	"service_profile_id",
	"session",
	"session.dev_addr",
	"session.keys",
	"session.keys.app_s_key",
	"session.keys.app_s_key.kek_label",
	"session.keys.app_s_key.key",
	"session.keys.f_nwk_s_int_key",
	"session.keys.f_nwk_s_int_key.kek_label",
	"session.keys.f_nwk_s_int_key.key",
	"session.keys.nwk_s_enc_key",
	"session.keys.nwk_s_enc_key.kek_label",
	"session.keys.nwk_s_enc_key.key",
	"session.keys.s_nwk_s_int_key",
	"session.keys.s_nwk_s_int_key.kek_label",
	"session.keys.s_nwk_s_int_key.key",
	"session.keys.session_key_id",
	"session.last_a_f_cnt_down",
	"session.last_conf_f_cnt_down",
	"session.last_f_cnt_up",
	"session.last_n_f_cnt_down",
	"session.started_at",
	"supports_class_b",
	"supports_class_c",
	"supports_join",
	"updated_at",
	"used_dev_nonces",
	"uses_32_bit_f_cnt",
	"version_ids",
	"version_ids.brand_id",
	"version_ids.firmware_version",
	"version_ids.hardware_version",
	"version_ids.model_id",
}

func (*EndDevice) FieldMaskPaths() []string {
	ret := make([]string, len(_EndDeviceFieldPaths))
	copy(ret, _EndDeviceFieldPaths[:])
	return ret
}

func (dst *EndDevice) SetFields(src *EndDevice, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "application_server_address":
			dst.ApplicationServerAddress = src.ApplicationServerAddress
		case "attributes":
			dst.Attributes = src.Attributes
		case "battery_percentage":
			dst.BatteryPercentage = src.BatteryPercentage
		case "created_at":
			dst.CreatedAt = src.CreatedAt
		case "default_mac_parameters":
			dst.DefaultMACParameters = src.DefaultMACParameters
		case "default_mac_parameters.adr_ack_delay":
			if dst.DefaultMACParameters == nil {
				dst.DefaultMACParameters = &MACParameters{}
			}
			dst.DefaultMACParameters.SetFields(src.DefaultMACParameters, _pathsWithoutPrefix("default_mac_parameters", paths)...)
		case "default_mac_parameters.adr_ack_limit":
			if dst.DefaultMACParameters == nil {
				dst.DefaultMACParameters = &MACParameters{}
			}
			dst.DefaultMACParameters.SetFields(src.DefaultMACParameters, _pathsWithoutPrefix("default_mac_parameters", paths)...)
		case "default_mac_parameters.adr_data_rate_index":
			if dst.DefaultMACParameters == nil {
				dst.DefaultMACParameters = &MACParameters{}
			}
			dst.DefaultMACParameters.SetFields(src.DefaultMACParameters, _pathsWithoutPrefix("default_mac_parameters", paths)...)
		case "default_mac_parameters.adr_nb_trans":
			if dst.DefaultMACParameters == nil {
				dst.DefaultMACParameters = &MACParameters{}
			}
			dst.DefaultMACParameters.SetFields(src.DefaultMACParameters, _pathsWithoutPrefix("default_mac_parameters", paths)...)
		case "default_mac_parameters.adr_tx_power_index":
			if dst.DefaultMACParameters == nil {
				dst.DefaultMACParameters = &MACParameters{}
			}
			dst.DefaultMACParameters.SetFields(src.DefaultMACParameters, _pathsWithoutPrefix("default_mac_parameters", paths)...)
		case "default_mac_parameters.beacon_frequency":
			if dst.DefaultMACParameters == nil {
				dst.DefaultMACParameters = &MACParameters{}
			}
			dst.DefaultMACParameters.SetFields(src.DefaultMACParameters, _pathsWithoutPrefix("default_mac_parameters", paths)...)
		case "default_mac_parameters.channels":
			if dst.DefaultMACParameters == nil {
				dst.DefaultMACParameters = &MACParameters{}
			}
			dst.DefaultMACParameters.SetFields(src.DefaultMACParameters, _pathsWithoutPrefix("default_mac_parameters", paths)...)
		case "default_mac_parameters.downlink_dwell_time":
			if dst.DefaultMACParameters == nil {
				dst.DefaultMACParameters = &MACParameters{}
			}
			dst.DefaultMACParameters.SetFields(src.DefaultMACParameters, _pathsWithoutPrefix("default_mac_parameters", paths)...)
		case "default_mac_parameters.max_duty_cycle":
			if dst.DefaultMACParameters == nil {
				dst.DefaultMACParameters = &MACParameters{}
			}
			dst.DefaultMACParameters.SetFields(src.DefaultMACParameters, _pathsWithoutPrefix("default_mac_parameters", paths)...)
		case "default_mac_parameters.max_eirp":
			if dst.DefaultMACParameters == nil {
				dst.DefaultMACParameters = &MACParameters{}
			}
			dst.DefaultMACParameters.SetFields(src.DefaultMACParameters, _pathsWithoutPrefix("default_mac_parameters", paths)...)
		case "default_mac_parameters.ping_slot_data_rate_index":
			if dst.DefaultMACParameters == nil {
				dst.DefaultMACParameters = &MACParameters{}
			}
			dst.DefaultMACParameters.SetFields(src.DefaultMACParameters, _pathsWithoutPrefix("default_mac_parameters", paths)...)
		case "default_mac_parameters.ping_slot_frequency":
			if dst.DefaultMACParameters == nil {
				dst.DefaultMACParameters = &MACParameters{}
			}
			dst.DefaultMACParameters.SetFields(src.DefaultMACParameters, _pathsWithoutPrefix("default_mac_parameters", paths)...)
		case "default_mac_parameters.rejoin_count_periodicity":
			if dst.DefaultMACParameters == nil {
				dst.DefaultMACParameters = &MACParameters{}
			}
			dst.DefaultMACParameters.SetFields(src.DefaultMACParameters, _pathsWithoutPrefix("default_mac_parameters", paths)...)
		case "default_mac_parameters.rejoin_time_periodicity":
			if dst.DefaultMACParameters == nil {
				dst.DefaultMACParameters = &MACParameters{}
			}
			dst.DefaultMACParameters.SetFields(src.DefaultMACParameters, _pathsWithoutPrefix("default_mac_parameters", paths)...)
		case "default_mac_parameters.rx1_data_rate_offset":
			if dst.DefaultMACParameters == nil {
				dst.DefaultMACParameters = &MACParameters{}
			}
			dst.DefaultMACParameters.SetFields(src.DefaultMACParameters, _pathsWithoutPrefix("default_mac_parameters", paths)...)
		case "default_mac_parameters.rx1_delay":
			if dst.DefaultMACParameters == nil {
				dst.DefaultMACParameters = &MACParameters{}
			}
			dst.DefaultMACParameters.SetFields(src.DefaultMACParameters, _pathsWithoutPrefix("default_mac_parameters", paths)...)
		case "default_mac_parameters.rx2_data_rate_index":
			if dst.DefaultMACParameters == nil {
				dst.DefaultMACParameters = &MACParameters{}
			}
			dst.DefaultMACParameters.SetFields(src.DefaultMACParameters, _pathsWithoutPrefix("default_mac_parameters", paths)...)
		case "default_mac_parameters.rx2_frequency":
			if dst.DefaultMACParameters == nil {
				dst.DefaultMACParameters = &MACParameters{}
			}
			dst.DefaultMACParameters.SetFields(src.DefaultMACParameters, _pathsWithoutPrefix("default_mac_parameters", paths)...)
		case "default_mac_parameters.uplink_dwell_time":
			if dst.DefaultMACParameters == nil {
				dst.DefaultMACParameters = &MACParameters{}
			}
			dst.DefaultMACParameters.SetFields(src.DefaultMACParameters, _pathsWithoutPrefix("default_mac_parameters", paths)...)
		case "description":
			dst.Description = src.Description
		case "downlink_margin":
			dst.DownlinkMargin = src.DownlinkMargin
		case "formatters":
			dst.Formatters = src.Formatters
		case "formatters.down_formatter":
			if dst.Formatters == nil {
				dst.Formatters = &MessagePayloadFormatters{}
			}
			dst.Formatters.SetFields(src.Formatters, _pathsWithoutPrefix("formatters", paths)...)
		case "formatters.down_formatter_parameter":
			if dst.Formatters == nil {
				dst.Formatters = &MessagePayloadFormatters{}
			}
			dst.Formatters.SetFields(src.Formatters, _pathsWithoutPrefix("formatters", paths)...)
		case "formatters.up_formatter":
			if dst.Formatters == nil {
				dst.Formatters = &MessagePayloadFormatters{}
			}
			dst.Formatters.SetFields(src.Formatters, _pathsWithoutPrefix("formatters", paths)...)
		case "formatters.up_formatter_parameter":
			if dst.Formatters == nil {
				dst.Formatters = &MessagePayloadFormatters{}
			}
			dst.Formatters.SetFields(src.Formatters, _pathsWithoutPrefix("formatters", paths)...)
		case "frequency_plan_id":
			dst.FrequencyPlanID = src.FrequencyPlanID
		case "ids":
			dst.EndDeviceIdentifiers = src.EndDeviceIdentifiers
		case "ids.application_ids":
			dst.EndDeviceIdentifiers.SetFields(&src.EndDeviceIdentifiers, _pathsWithoutPrefix("ids", paths)...)
		case "ids.application_ids.application_id":
			dst.EndDeviceIdentifiers.SetFields(&src.EndDeviceIdentifiers, _pathsWithoutPrefix("ids", paths)...)
		case "ids.dev_addr":
			dst.EndDeviceIdentifiers.SetFields(&src.EndDeviceIdentifiers, _pathsWithoutPrefix("ids", paths)...)
		case "ids.dev_eui":
			dst.EndDeviceIdentifiers.SetFields(&src.EndDeviceIdentifiers, _pathsWithoutPrefix("ids", paths)...)
		case "ids.device_id":
			dst.EndDeviceIdentifiers.SetFields(&src.EndDeviceIdentifiers, _pathsWithoutPrefix("ids", paths)...)
		case "ids.join_eui":
			dst.EndDeviceIdentifiers.SetFields(&src.EndDeviceIdentifiers, _pathsWithoutPrefix("ids", paths)...)
		case "join_server_address":
			dst.JoinServerAddress = src.JoinServerAddress
		case "last_dev_nonce":
			dst.LastDevNonce = src.LastDevNonce
		case "last_dev_status_received_at":
			dst.LastDevStatusReceivedAt = src.LastDevStatusReceivedAt
		case "last_join_nonce":
			dst.LastJoinNonce = src.LastJoinNonce
		case "last_rj_count_0":
			dst.LastRJCount0 = src.LastRJCount0
		case "last_rj_count_1":
			dst.LastRJCount1 = src.LastRJCount1
		case "locations":
			dst.Locations = src.Locations
		case "lorawan_phy_version":
			dst.LoRaWANPHYVersion = src.LoRaWANPHYVersion
		case "lorawan_version":
			dst.LoRaWANVersion = src.LoRaWANVersion
		case "mac_settings":
			dst.MACSettings = src.MACSettings
		case "mac_settings.adr_margin":
			if dst.MACSettings == nil {
				dst.MACSettings = &MACSettings{}
			}
			dst.MACSettings.SetFields(src.MACSettings, _pathsWithoutPrefix("mac_settings", paths)...)
		case "mac_settings.class_b_timeout":
			if dst.MACSettings == nil {
				dst.MACSettings = &MACSettings{}
			}
			dst.MACSettings.SetFields(src.MACSettings, _pathsWithoutPrefix("mac_settings", paths)...)
		case "mac_settings.class_c_timeout":
			if dst.MACSettings == nil {
				dst.MACSettings = &MACSettings{}
			}
			dst.MACSettings.SetFields(src.MACSettings, _pathsWithoutPrefix("mac_settings", paths)...)
		case "mac_settings.status_count_periodicity":
			if dst.MACSettings == nil {
				dst.MACSettings = &MACSettings{}
			}
			dst.MACSettings.SetFields(src.MACSettings, _pathsWithoutPrefix("mac_settings", paths)...)
		case "mac_settings.status_time_periodicity":
			if dst.MACSettings == nil {
				dst.MACSettings = &MACSettings{}
			}
			dst.MACSettings.SetFields(src.MACSettings, _pathsWithoutPrefix("mac_settings", paths)...)
		case "mac_settings.use_adr":
			if dst.MACSettings == nil {
				dst.MACSettings = &MACSettings{}
			}
			dst.MACSettings.SetFields(src.MACSettings, _pathsWithoutPrefix("mac_settings", paths)...)
		case "mac_state":
			dst.MACState = src.MACState
		case "mac_state.current_parameters":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.current_parameters.adr_ack_delay":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.current_parameters.adr_ack_limit":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.current_parameters.adr_data_rate_index":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.current_parameters.adr_nb_trans":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.current_parameters.adr_tx_power_index":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.current_parameters.beacon_frequency":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.current_parameters.channels":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.current_parameters.downlink_dwell_time":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.current_parameters.max_duty_cycle":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.current_parameters.max_eirp":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.current_parameters.ping_slot_data_rate_index":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.current_parameters.ping_slot_frequency":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.current_parameters.rejoin_count_periodicity":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.current_parameters.rejoin_time_periodicity":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.current_parameters.rx1_data_rate_offset":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.current_parameters.rx1_delay":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.current_parameters.rx2_data_rate_index":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.current_parameters.rx2_frequency":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.current_parameters.uplink_dwell_time":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.desired_parameters":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.desired_parameters.adr_ack_delay":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.desired_parameters.adr_ack_limit":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.desired_parameters.adr_data_rate_index":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.desired_parameters.adr_nb_trans":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.desired_parameters.adr_tx_power_index":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.desired_parameters.beacon_frequency":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.desired_parameters.channels":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.desired_parameters.downlink_dwell_time":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.desired_parameters.max_duty_cycle":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.desired_parameters.max_eirp":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.desired_parameters.ping_slot_data_rate_index":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.desired_parameters.ping_slot_frequency":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.desired_parameters.rejoin_count_periodicity":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.desired_parameters.rejoin_time_periodicity":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.desired_parameters.rx1_data_rate_offset":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.desired_parameters.rx1_delay":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.desired_parameters.rx2_data_rate_index":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.desired_parameters.rx2_frequency":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.desired_parameters.uplink_dwell_time":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.device_class":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.last_confirmed_downlink_at":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.last_dev_status_f_cnt_up":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.lorawan_version":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.pending_application_downlink":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.pending_application_downlink.class_b_c":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.pending_application_downlink.class_b_c.gateways":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.pending_application_downlink.class_b_c.time":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.pending_application_downlink.confirmed":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.pending_application_downlink.correlation_ids":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.pending_application_downlink.decoded_payload":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.pending_application_downlink.f_cnt":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.pending_application_downlink.f_port":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.pending_application_downlink.frm_payload":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.pending_application_downlink.session_key_id":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.pending_requests":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.ping_slot_periodicity":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "mac_state.queued_responses":
			if dst.MACState == nil {
				dst.MACState = &MACState{}
			}
			dst.MACState.SetFields(src.MACState, _pathsWithoutPrefix("mac_state", paths)...)
		case "max_frequency":
			dst.MaxFrequency = src.MaxFrequency
		case "min_frequency":
			dst.MinFrequency = src.MinFrequency
		case "name":
			dst.Name = src.Name
		case "net_id":
			dst.NetID = src.NetID
		case "network_server_address":
			dst.NetworkServerAddress = src.NetworkServerAddress
		case "pending_session":
			dst.PendingSession = src.PendingSession
		case "pending_session.dev_addr":
			if dst.PendingSession == nil {
				dst.PendingSession = &Session{}
			}
			dst.PendingSession.SetFields(src.PendingSession, _pathsWithoutPrefix("pending_session", paths)...)
		case "pending_session.keys":
			if dst.PendingSession == nil {
				dst.PendingSession = &Session{}
			}
			dst.PendingSession.SetFields(src.PendingSession, _pathsWithoutPrefix("pending_session", paths)...)
		case "pending_session.keys.app_s_key":
			if dst.PendingSession == nil {
				dst.PendingSession = &Session{}
			}
			dst.PendingSession.SetFields(src.PendingSession, _pathsWithoutPrefix("pending_session", paths)...)
		case "pending_session.keys.app_s_key.kek_label":
			if dst.PendingSession == nil {
				dst.PendingSession = &Session{}
			}
			dst.PendingSession.SetFields(src.PendingSession, _pathsWithoutPrefix("pending_session", paths)...)
		case "pending_session.keys.app_s_key.key":
			if dst.PendingSession == nil {
				dst.PendingSession = &Session{}
			}
			dst.PendingSession.SetFields(src.PendingSession, _pathsWithoutPrefix("pending_session", paths)...)
		case "pending_session.keys.f_nwk_s_int_key":
			if dst.PendingSession == nil {
				dst.PendingSession = &Session{}
			}
			dst.PendingSession.SetFields(src.PendingSession, _pathsWithoutPrefix("pending_session", paths)...)
		case "pending_session.keys.f_nwk_s_int_key.kek_label":
			if dst.PendingSession == nil {
				dst.PendingSession = &Session{}
			}
			dst.PendingSession.SetFields(src.PendingSession, _pathsWithoutPrefix("pending_session", paths)...)
		case "pending_session.keys.f_nwk_s_int_key.key":
			if dst.PendingSession == nil {
				dst.PendingSession = &Session{}
			}
			dst.PendingSession.SetFields(src.PendingSession, _pathsWithoutPrefix("pending_session", paths)...)
		case "pending_session.keys.nwk_s_enc_key":
			if dst.PendingSession == nil {
				dst.PendingSession = &Session{}
			}
			dst.PendingSession.SetFields(src.PendingSession, _pathsWithoutPrefix("pending_session", paths)...)
		case "pending_session.keys.nwk_s_enc_key.kek_label":
			if dst.PendingSession == nil {
				dst.PendingSession = &Session{}
			}
			dst.PendingSession.SetFields(src.PendingSession, _pathsWithoutPrefix("pending_session", paths)...)
		case "pending_session.keys.nwk_s_enc_key.key":
			if dst.PendingSession == nil {
				dst.PendingSession = &Session{}
			}
			dst.PendingSession.SetFields(src.PendingSession, _pathsWithoutPrefix("pending_session", paths)...)
		case "pending_session.keys.s_nwk_s_int_key":
			if dst.PendingSession == nil {
				dst.PendingSession = &Session{}
			}
			dst.PendingSession.SetFields(src.PendingSession, _pathsWithoutPrefix("pending_session", paths)...)
		case "pending_session.keys.s_nwk_s_int_key.kek_label":
			if dst.PendingSession == nil {
				dst.PendingSession = &Session{}
			}
			dst.PendingSession.SetFields(src.PendingSession, _pathsWithoutPrefix("pending_session", paths)...)
		case "pending_session.keys.s_nwk_s_int_key.key":
			if dst.PendingSession == nil {
				dst.PendingSession = &Session{}
			}
			dst.PendingSession.SetFields(src.PendingSession, _pathsWithoutPrefix("pending_session", paths)...)
		case "pending_session.keys.session_key_id":
			if dst.PendingSession == nil {
				dst.PendingSession = &Session{}
			}
			dst.PendingSession.SetFields(src.PendingSession, _pathsWithoutPrefix("pending_session", paths)...)
		case "pending_session.last_a_f_cnt_down":
			if dst.PendingSession == nil {
				dst.PendingSession = &Session{}
			}
			dst.PendingSession.SetFields(src.PendingSession, _pathsWithoutPrefix("pending_session", paths)...)
		case "pending_session.last_conf_f_cnt_down":
			if dst.PendingSession == nil {
				dst.PendingSession = &Session{}
			}
			dst.PendingSession.SetFields(src.PendingSession, _pathsWithoutPrefix("pending_session", paths)...)
		case "pending_session.last_f_cnt_up":
			if dst.PendingSession == nil {
				dst.PendingSession = &Session{}
			}
			dst.PendingSession.SetFields(src.PendingSession, _pathsWithoutPrefix("pending_session", paths)...)
		case "pending_session.last_n_f_cnt_down":
			if dst.PendingSession == nil {
				dst.PendingSession = &Session{}
			}
			dst.PendingSession.SetFields(src.PendingSession, _pathsWithoutPrefix("pending_session", paths)...)
		case "pending_session.started_at":
			if dst.PendingSession == nil {
				dst.PendingSession = &Session{}
			}
			dst.PendingSession.SetFields(src.PendingSession, _pathsWithoutPrefix("pending_session", paths)...)
		case "power_state":
			dst.PowerState = src.PowerState
		case "queued_application_downlinks":
			dst.QueuedApplicationDownlinks = src.QueuedApplicationDownlinks
		case "recent_downlinks":
			dst.RecentDownlinks = src.RecentDownlinks
		case "recent_uplinks":
			dst.RecentUplinks = src.RecentUplinks
		case "resets_f_cnt":
			dst.ResetsFCnt = src.ResetsFCnt
		case "resets_join_nonces":
			dst.ResetsJoinNonces = src.ResetsJoinNonces
		case "root_keys":
			dst.RootKeys = src.RootKeys
		case "root_keys.app_key":
			if dst.RootKeys == nil {
				dst.RootKeys = &RootKeys{}
			}
			dst.RootKeys.SetFields(src.RootKeys, _pathsWithoutPrefix("root_keys", paths)...)
		case "root_keys.app_key.kek_label":
			if dst.RootKeys == nil {
				dst.RootKeys = &RootKeys{}
			}
			dst.RootKeys.SetFields(src.RootKeys, _pathsWithoutPrefix("root_keys", paths)...)
		case "root_keys.app_key.key":
			if dst.RootKeys == nil {
				dst.RootKeys = &RootKeys{}
			}
			dst.RootKeys.SetFields(src.RootKeys, _pathsWithoutPrefix("root_keys", paths)...)
		case "root_keys.nwk_key":
			if dst.RootKeys == nil {
				dst.RootKeys = &RootKeys{}
			}
			dst.RootKeys.SetFields(src.RootKeys, _pathsWithoutPrefix("root_keys", paths)...)
		case "root_keys.nwk_key.kek_label":
			if dst.RootKeys == nil {
				dst.RootKeys = &RootKeys{}
			}
			dst.RootKeys.SetFields(src.RootKeys, _pathsWithoutPrefix("root_keys", paths)...)
		case "root_keys.nwk_key.key":
			if dst.RootKeys == nil {
				dst.RootKeys = &RootKeys{}
			}
			dst.RootKeys.SetFields(src.RootKeys, _pathsWithoutPrefix("root_keys", paths)...)
		case "root_keys.root_key_id":
			if dst.RootKeys == nil {
				dst.RootKeys = &RootKeys{}
			}
			dst.RootKeys.SetFields(src.RootKeys, _pathsWithoutPrefix("root_keys", paths)...)
		case "service_profile_id":
			dst.ServiceProfileID = src.ServiceProfileID
		case "session":
			dst.Session = src.Session
		case "session.dev_addr":
			if dst.Session == nil {
				dst.Session = &Session{}
			}
			dst.Session.SetFields(src.Session, _pathsWithoutPrefix("session", paths)...)
		case "session.keys":
			if dst.Session == nil {
				dst.Session = &Session{}
			}
			dst.Session.SetFields(src.Session, _pathsWithoutPrefix("session", paths)...)
		case "session.keys.app_s_key":
			if dst.Session == nil {
				dst.Session = &Session{}
			}
			dst.Session.SetFields(src.Session, _pathsWithoutPrefix("session", paths)...)
		case "session.keys.app_s_key.kek_label":
			if dst.Session == nil {
				dst.Session = &Session{}
			}
			dst.Session.SetFields(src.Session, _pathsWithoutPrefix("session", paths)...)
		case "session.keys.app_s_key.key":
			if dst.Session == nil {
				dst.Session = &Session{}
			}
			dst.Session.SetFields(src.Session, _pathsWithoutPrefix("session", paths)...)
		case "session.keys.f_nwk_s_int_key":
			if dst.Session == nil {
				dst.Session = &Session{}
			}
			dst.Session.SetFields(src.Session, _pathsWithoutPrefix("session", paths)...)
		case "session.keys.f_nwk_s_int_key.kek_label":
			if dst.Session == nil {
				dst.Session = &Session{}
			}
			dst.Session.SetFields(src.Session, _pathsWithoutPrefix("session", paths)...)
		case "session.keys.f_nwk_s_int_key.key":
			if dst.Session == nil {
				dst.Session = &Session{}
			}
			dst.Session.SetFields(src.Session, _pathsWithoutPrefix("session", paths)...)
		case "session.keys.nwk_s_enc_key":
			if dst.Session == nil {
				dst.Session = &Session{}
			}
			dst.Session.SetFields(src.Session, _pathsWithoutPrefix("session", paths)...)
		case "session.keys.nwk_s_enc_key.kek_label":
			if dst.Session == nil {
				dst.Session = &Session{}
			}
			dst.Session.SetFields(src.Session, _pathsWithoutPrefix("session", paths)...)
		case "session.keys.nwk_s_enc_key.key":
			if dst.Session == nil {
				dst.Session = &Session{}
			}
			dst.Session.SetFields(src.Session, _pathsWithoutPrefix("session", paths)...)
		case "session.keys.s_nwk_s_int_key":
			if dst.Session == nil {
				dst.Session = &Session{}
			}
			dst.Session.SetFields(src.Session, _pathsWithoutPrefix("session", paths)...)
		case "session.keys.s_nwk_s_int_key.kek_label":
			if dst.Session == nil {
				dst.Session = &Session{}
			}
			dst.Session.SetFields(src.Session, _pathsWithoutPrefix("session", paths)...)
		case "session.keys.s_nwk_s_int_key.key":
			if dst.Session == nil {
				dst.Session = &Session{}
			}
			dst.Session.SetFields(src.Session, _pathsWithoutPrefix("session", paths)...)
		case "session.keys.session_key_id":
			if dst.Session == nil {
				dst.Session = &Session{}
			}
			dst.Session.SetFields(src.Session, _pathsWithoutPrefix("session", paths)...)
		case "session.last_a_f_cnt_down":
			if dst.Session == nil {
				dst.Session = &Session{}
			}
			dst.Session.SetFields(src.Session, _pathsWithoutPrefix("session", paths)...)
		case "session.last_conf_f_cnt_down":
			if dst.Session == nil {
				dst.Session = &Session{}
			}
			dst.Session.SetFields(src.Session, _pathsWithoutPrefix("session", paths)...)
		case "session.last_f_cnt_up":
			if dst.Session == nil {
				dst.Session = &Session{}
			}
			dst.Session.SetFields(src.Session, _pathsWithoutPrefix("session", paths)...)
		case "session.last_n_f_cnt_down":
			if dst.Session == nil {
				dst.Session = &Session{}
			}
			dst.Session.SetFields(src.Session, _pathsWithoutPrefix("session", paths)...)
		case "session.started_at":
			if dst.Session == nil {
				dst.Session = &Session{}
			}
			dst.Session.SetFields(src.Session, _pathsWithoutPrefix("session", paths)...)
		case "supports_class_b":
			dst.SupportsClassB = src.SupportsClassB
		case "supports_class_c":
			dst.SupportsClassC = src.SupportsClassC
		case "supports_join":
			dst.SupportsJoin = src.SupportsJoin
		case "updated_at":
			dst.UpdatedAt = src.UpdatedAt
		case "used_dev_nonces":
			dst.UsedDevNonces = src.UsedDevNonces
		case "uses_32_bit_f_cnt":
			dst.Uses32BitFCnt = src.Uses32BitFCnt
		case "version_ids":
			dst.VersionIDs = src.VersionIDs
		case "version_ids.brand_id":
			if dst.VersionIDs == nil {
				dst.VersionIDs = &EndDeviceVersionIdentifiers{}
			}
			dst.VersionIDs.SetFields(src.VersionIDs, _pathsWithoutPrefix("version_ids", paths)...)
		case "version_ids.firmware_version":
			if dst.VersionIDs == nil {
				dst.VersionIDs = &EndDeviceVersionIdentifiers{}
			}
			dst.VersionIDs.SetFields(src.VersionIDs, _pathsWithoutPrefix("version_ids", paths)...)
		case "version_ids.hardware_version":
			if dst.VersionIDs == nil {
				dst.VersionIDs = &EndDeviceVersionIdentifiers{}
			}
			dst.VersionIDs.SetFields(src.VersionIDs, _pathsWithoutPrefix("version_ids", paths)...)
		case "version_ids.model_id":
			if dst.VersionIDs == nil {
				dst.VersionIDs = &EndDeviceVersionIdentifiers{}
			}
			dst.VersionIDs.SetFields(src.VersionIDs, _pathsWithoutPrefix("version_ids", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _EndDevicesFieldPaths = [...]string{
	"end_devices",
}

func (*EndDevices) FieldMaskPaths() []string {
	ret := make([]string, len(_EndDevicesFieldPaths))
	copy(ret, _EndDevicesFieldPaths[:])
	return ret
}

func (dst *EndDevices) SetFields(src *EndDevices, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "end_devices":
			dst.EndDevices = src.EndDevices
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _CreateEndDeviceRequestFieldPaths = [...]string{
	"end_device",
	"end_device.application_server_address",
	"end_device.attributes",
	"end_device.battery_percentage",
	"end_device.created_at",
	"end_device.default_mac_parameters",
	"end_device.default_mac_parameters.adr_ack_delay",
	"end_device.default_mac_parameters.adr_ack_limit",
	"end_device.default_mac_parameters.adr_data_rate_index",
	"end_device.default_mac_parameters.adr_nb_trans",
	"end_device.default_mac_parameters.adr_tx_power_index",
	"end_device.default_mac_parameters.beacon_frequency",
	"end_device.default_mac_parameters.channels",
	"end_device.default_mac_parameters.downlink_dwell_time",
	"end_device.default_mac_parameters.max_duty_cycle",
	"end_device.default_mac_parameters.max_eirp",
	"end_device.default_mac_parameters.ping_slot_data_rate_index",
	"end_device.default_mac_parameters.ping_slot_frequency",
	"end_device.default_mac_parameters.rejoin_count_periodicity",
	"end_device.default_mac_parameters.rejoin_time_periodicity",
	"end_device.default_mac_parameters.rx1_data_rate_offset",
	"end_device.default_mac_parameters.rx1_delay",
	"end_device.default_mac_parameters.rx2_data_rate_index",
	"end_device.default_mac_parameters.rx2_frequency",
	"end_device.default_mac_parameters.uplink_dwell_time",
	"end_device.description",
	"end_device.downlink_margin",
	"end_device.formatters",
	"end_device.formatters.down_formatter",
	"end_device.formatters.down_formatter_parameter",
	"end_device.formatters.up_formatter",
	"end_device.formatters.up_formatter_parameter",
	"end_device.frequency_plan_id",
	"end_device.ids",
	"end_device.ids.application_ids",
	"end_device.ids.application_ids.application_id",
	"end_device.ids.dev_addr",
	"end_device.ids.dev_eui",
	"end_device.ids.device_id",
	"end_device.ids.join_eui",
	"end_device.join_server_address",
	"end_device.last_dev_nonce",
	"end_device.last_dev_status_received_at",
	"end_device.last_join_nonce",
	"end_device.last_rj_count_0",
	"end_device.last_rj_count_1",
	"end_device.locations",
	"end_device.lorawan_phy_version",
	"end_device.lorawan_version",
	"end_device.mac_settings",
	"end_device.mac_settings.adr_margin",
	"end_device.mac_settings.class_b_timeout",
	"end_device.mac_settings.class_c_timeout",
	"end_device.mac_settings.status_count_periodicity",
	"end_device.mac_settings.status_time_periodicity",
	"end_device.mac_settings.use_adr",
	"end_device.mac_state",
	"end_device.mac_state.current_parameters",
	"end_device.mac_state.current_parameters.adr_ack_delay",
	"end_device.mac_state.current_parameters.adr_ack_limit",
	"end_device.mac_state.current_parameters.adr_data_rate_index",
	"end_device.mac_state.current_parameters.adr_nb_trans",
	"end_device.mac_state.current_parameters.adr_tx_power_index",
	"end_device.mac_state.current_parameters.beacon_frequency",
	"end_device.mac_state.current_parameters.channels",
	"end_device.mac_state.current_parameters.downlink_dwell_time",
	"end_device.mac_state.current_parameters.max_duty_cycle",
	"end_device.mac_state.current_parameters.max_eirp",
	"end_device.mac_state.current_parameters.ping_slot_data_rate_index",
	"end_device.mac_state.current_parameters.ping_slot_frequency",
	"end_device.mac_state.current_parameters.rejoin_count_periodicity",
	"end_device.mac_state.current_parameters.rejoin_time_periodicity",
	"end_device.mac_state.current_parameters.rx1_data_rate_offset",
	"end_device.mac_state.current_parameters.rx1_delay",
	"end_device.mac_state.current_parameters.rx2_data_rate_index",
	"end_device.mac_state.current_parameters.rx2_frequency",
	"end_device.mac_state.current_parameters.uplink_dwell_time",
	"end_device.mac_state.desired_parameters",
	"end_device.mac_state.desired_parameters.adr_ack_delay",
	"end_device.mac_state.desired_parameters.adr_ack_limit",
	"end_device.mac_state.desired_parameters.adr_data_rate_index",
	"end_device.mac_state.desired_parameters.adr_nb_trans",
	"end_device.mac_state.desired_parameters.adr_tx_power_index",
	"end_device.mac_state.desired_parameters.beacon_frequency",
	"end_device.mac_state.desired_parameters.channels",
	"end_device.mac_state.desired_parameters.downlink_dwell_time",
	"end_device.mac_state.desired_parameters.max_duty_cycle",
	"end_device.mac_state.desired_parameters.max_eirp",
	"end_device.mac_state.desired_parameters.ping_slot_data_rate_index",
	"end_device.mac_state.desired_parameters.ping_slot_frequency",
	"end_device.mac_state.desired_parameters.rejoin_count_periodicity",
	"end_device.mac_state.desired_parameters.rejoin_time_periodicity",
	"end_device.mac_state.desired_parameters.rx1_data_rate_offset",
	"end_device.mac_state.desired_parameters.rx1_delay",
	"end_device.mac_state.desired_parameters.rx2_data_rate_index",
	"end_device.mac_state.desired_parameters.rx2_frequency",
	"end_device.mac_state.desired_parameters.uplink_dwell_time",
	"end_device.mac_state.device_class",
	"end_device.mac_state.last_confirmed_downlink_at",
	"end_device.mac_state.last_dev_status_f_cnt_up",
	"end_device.mac_state.lorawan_version",
	"end_device.mac_state.pending_application_downlink",
	"end_device.mac_state.pending_application_downlink.class_b_c",
	"end_device.mac_state.pending_application_downlink.class_b_c.gateways",
	"end_device.mac_state.pending_application_downlink.class_b_c.time",
	"end_device.mac_state.pending_application_downlink.confirmed",
	"end_device.mac_state.pending_application_downlink.correlation_ids",
	"end_device.mac_state.pending_application_downlink.decoded_payload",
	"end_device.mac_state.pending_application_downlink.f_cnt",
	"end_device.mac_state.pending_application_downlink.f_port",
	"end_device.mac_state.pending_application_downlink.frm_payload",
	"end_device.mac_state.pending_application_downlink.session_key_id",
	"end_device.mac_state.pending_requests",
	"end_device.mac_state.ping_slot_periodicity",
	"end_device.mac_state.queued_responses",
	"end_device.max_frequency",
	"end_device.min_frequency",
	"end_device.name",
	"end_device.net_id",
	"end_device.network_server_address",
	"end_device.pending_session",
	"end_device.pending_session.dev_addr",
	"end_device.pending_session.keys",
	"end_device.pending_session.keys.app_s_key",
	"end_device.pending_session.keys.app_s_key.kek_label",
	"end_device.pending_session.keys.app_s_key.key",
	"end_device.pending_session.keys.f_nwk_s_int_key",
	"end_device.pending_session.keys.f_nwk_s_int_key.kek_label",
	"end_device.pending_session.keys.f_nwk_s_int_key.key",
	"end_device.pending_session.keys.nwk_s_enc_key",
	"end_device.pending_session.keys.nwk_s_enc_key.kek_label",
	"end_device.pending_session.keys.nwk_s_enc_key.key",
	"end_device.pending_session.keys.s_nwk_s_int_key",
	"end_device.pending_session.keys.s_nwk_s_int_key.kek_label",
	"end_device.pending_session.keys.s_nwk_s_int_key.key",
	"end_device.pending_session.keys.session_key_id",
	"end_device.pending_session.last_a_f_cnt_down",
	"end_device.pending_session.last_conf_f_cnt_down",
	"end_device.pending_session.last_f_cnt_up",
	"end_device.pending_session.last_n_f_cnt_down",
	"end_device.pending_session.started_at",
	"end_device.power_state",
	"end_device.queued_application_downlinks",
	"end_device.recent_downlinks",
	"end_device.recent_uplinks",
	"end_device.resets_f_cnt",
	"end_device.resets_join_nonces",
	"end_device.root_keys",
	"end_device.root_keys.app_key",
	"end_device.root_keys.app_key.kek_label",
	"end_device.root_keys.app_key.key",
	"end_device.root_keys.nwk_key",
	"end_device.root_keys.nwk_key.kek_label",
	"end_device.root_keys.nwk_key.key",
	"end_device.root_keys.root_key_id",
	"end_device.service_profile_id",
	"end_device.session",
	"end_device.session.dev_addr",
	"end_device.session.keys",
	"end_device.session.keys.app_s_key",
	"end_device.session.keys.app_s_key.kek_label",
	"end_device.session.keys.app_s_key.key",
	"end_device.session.keys.f_nwk_s_int_key",
	"end_device.session.keys.f_nwk_s_int_key.kek_label",
	"end_device.session.keys.f_nwk_s_int_key.key",
	"end_device.session.keys.nwk_s_enc_key",
	"end_device.session.keys.nwk_s_enc_key.kek_label",
	"end_device.session.keys.nwk_s_enc_key.key",
	"end_device.session.keys.s_nwk_s_int_key",
	"end_device.session.keys.s_nwk_s_int_key.kek_label",
	"end_device.session.keys.s_nwk_s_int_key.key",
	"end_device.session.keys.session_key_id",
	"end_device.session.last_a_f_cnt_down",
	"end_device.session.last_conf_f_cnt_down",
	"end_device.session.last_f_cnt_up",
	"end_device.session.last_n_f_cnt_down",
	"end_device.session.started_at",
	"end_device.supports_class_b",
	"end_device.supports_class_c",
	"end_device.supports_join",
	"end_device.updated_at",
	"end_device.used_dev_nonces",
	"end_device.uses_32_bit_f_cnt",
	"end_device.version_ids",
	"end_device.version_ids.brand_id",
	"end_device.version_ids.firmware_version",
	"end_device.version_ids.hardware_version",
	"end_device.version_ids.model_id",
}

func (*CreateEndDeviceRequest) FieldMaskPaths() []string {
	ret := make([]string, len(_CreateEndDeviceRequestFieldPaths))
	copy(ret, _CreateEndDeviceRequestFieldPaths[:])
	return ret
}

func (dst *CreateEndDeviceRequest) SetFields(src *CreateEndDeviceRequest, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "end_device":
			dst.EndDevice = src.EndDevice
		case "end_device.application_server_address":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.attributes":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.battery_percentage":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.created_at":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.default_mac_parameters":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.default_mac_parameters.adr_ack_delay":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.default_mac_parameters.adr_ack_limit":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.default_mac_parameters.adr_data_rate_index":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.default_mac_parameters.adr_nb_trans":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.default_mac_parameters.adr_tx_power_index":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.default_mac_parameters.beacon_frequency":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.default_mac_parameters.channels":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.default_mac_parameters.downlink_dwell_time":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.default_mac_parameters.max_duty_cycle":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.default_mac_parameters.max_eirp":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.default_mac_parameters.ping_slot_data_rate_index":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.default_mac_parameters.ping_slot_frequency":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.default_mac_parameters.rejoin_count_periodicity":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.default_mac_parameters.rejoin_time_periodicity":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.default_mac_parameters.rx1_data_rate_offset":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.default_mac_parameters.rx1_delay":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.default_mac_parameters.rx2_data_rate_index":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.default_mac_parameters.rx2_frequency":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.default_mac_parameters.uplink_dwell_time":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.description":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.downlink_margin":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.formatters":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.formatters.down_formatter":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.formatters.down_formatter_parameter":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.formatters.up_formatter":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.formatters.up_formatter_parameter":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.frequency_plan_id":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.ids":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.ids.application_ids":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.ids.application_ids.application_id":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.ids.dev_addr":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.ids.dev_eui":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.ids.device_id":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.ids.join_eui":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.join_server_address":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.last_dev_nonce":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.last_dev_status_received_at":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.last_join_nonce":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.last_rj_count_0":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.last_rj_count_1":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.locations":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.lorawan_phy_version":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.lorawan_version":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_settings":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_settings.adr_margin":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_settings.class_b_timeout":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_settings.class_c_timeout":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_settings.status_count_periodicity":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_settings.status_time_periodicity":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_settings.use_adr":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.current_parameters":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.current_parameters.adr_ack_delay":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.current_parameters.adr_ack_limit":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.current_parameters.adr_data_rate_index":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.current_parameters.adr_nb_trans":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.current_parameters.adr_tx_power_index":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.current_parameters.beacon_frequency":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.current_parameters.channels":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.current_parameters.downlink_dwell_time":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.current_parameters.max_duty_cycle":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.current_parameters.max_eirp":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.current_parameters.ping_slot_data_rate_index":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.current_parameters.ping_slot_frequency":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.current_parameters.rejoin_count_periodicity":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.current_parameters.rejoin_time_periodicity":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.current_parameters.rx1_data_rate_offset":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.current_parameters.rx1_delay":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.current_parameters.rx2_data_rate_index":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.current_parameters.rx2_frequency":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.current_parameters.uplink_dwell_time":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.desired_parameters":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.desired_parameters.adr_ack_delay":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.desired_parameters.adr_ack_limit":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.desired_parameters.adr_data_rate_index":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.desired_parameters.adr_nb_trans":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.desired_parameters.adr_tx_power_index":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.desired_parameters.beacon_frequency":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.desired_parameters.channels":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.desired_parameters.downlink_dwell_time":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.desired_parameters.max_duty_cycle":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.desired_parameters.max_eirp":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.desired_parameters.ping_slot_data_rate_index":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.desired_parameters.ping_slot_frequency":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.desired_parameters.rejoin_count_periodicity":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.desired_parameters.rejoin_time_periodicity":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.desired_parameters.rx1_data_rate_offset":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.desired_parameters.rx1_delay":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.desired_parameters.rx2_data_rate_index":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.desired_parameters.rx2_frequency":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.desired_parameters.uplink_dwell_time":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.device_class":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.last_confirmed_downlink_at":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.last_dev_status_f_cnt_up":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.lorawan_version":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.pending_application_downlink":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.pending_application_downlink.class_b_c":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.pending_application_downlink.class_b_c.gateways":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.pending_application_downlink.class_b_c.time":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.pending_application_downlink.confirmed":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.pending_application_downlink.correlation_ids":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.pending_application_downlink.decoded_payload":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.pending_application_downlink.f_cnt":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.pending_application_downlink.f_port":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.pending_application_downlink.frm_payload":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.pending_application_downlink.session_key_id":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.pending_requests":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.ping_slot_periodicity":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.queued_responses":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.max_frequency":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.min_frequency":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.name":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.net_id":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.network_server_address":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session.dev_addr":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session.keys":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session.keys.app_s_key":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session.keys.app_s_key.kek_label":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session.keys.app_s_key.key":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session.keys.f_nwk_s_int_key":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session.keys.f_nwk_s_int_key.kek_label":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session.keys.f_nwk_s_int_key.key":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session.keys.nwk_s_enc_key":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session.keys.nwk_s_enc_key.kek_label":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session.keys.nwk_s_enc_key.key":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session.keys.s_nwk_s_int_key":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session.keys.s_nwk_s_int_key.kek_label":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session.keys.s_nwk_s_int_key.key":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session.keys.session_key_id":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session.last_a_f_cnt_down":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session.last_conf_f_cnt_down":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session.last_f_cnt_up":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session.last_n_f_cnt_down":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session.started_at":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.power_state":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.queued_application_downlinks":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.recent_downlinks":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.recent_uplinks":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.resets_f_cnt":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.resets_join_nonces":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.root_keys":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.root_keys.app_key":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.root_keys.app_key.kek_label":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.root_keys.app_key.key":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.root_keys.nwk_key":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.root_keys.nwk_key.kek_label":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.root_keys.nwk_key.key":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.root_keys.root_key_id":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.service_profile_id":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session.dev_addr":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session.keys":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session.keys.app_s_key":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session.keys.app_s_key.kek_label":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session.keys.app_s_key.key":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session.keys.f_nwk_s_int_key":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session.keys.f_nwk_s_int_key.kek_label":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session.keys.f_nwk_s_int_key.key":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session.keys.nwk_s_enc_key":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session.keys.nwk_s_enc_key.kek_label":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session.keys.nwk_s_enc_key.key":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session.keys.s_nwk_s_int_key":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session.keys.s_nwk_s_int_key.kek_label":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session.keys.s_nwk_s_int_key.key":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session.keys.session_key_id":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session.last_a_f_cnt_down":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session.last_conf_f_cnt_down":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session.last_f_cnt_up":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session.last_n_f_cnt_down":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session.started_at":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.supports_class_b":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.supports_class_c":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.supports_join":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.updated_at":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.used_dev_nonces":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.uses_32_bit_f_cnt":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.version_ids":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.version_ids.brand_id":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.version_ids.firmware_version":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.version_ids.hardware_version":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.version_ids.model_id":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _UpdateEndDeviceRequestFieldPaths = [...]string{
	"end_device",
	"end_device.application_server_address",
	"end_device.attributes",
	"end_device.battery_percentage",
	"end_device.created_at",
	"end_device.default_mac_parameters",
	"end_device.default_mac_parameters.adr_ack_delay",
	"end_device.default_mac_parameters.adr_ack_limit",
	"end_device.default_mac_parameters.adr_data_rate_index",
	"end_device.default_mac_parameters.adr_nb_trans",
	"end_device.default_mac_parameters.adr_tx_power_index",
	"end_device.default_mac_parameters.beacon_frequency",
	"end_device.default_mac_parameters.channels",
	"end_device.default_mac_parameters.downlink_dwell_time",
	"end_device.default_mac_parameters.max_duty_cycle",
	"end_device.default_mac_parameters.max_eirp",
	"end_device.default_mac_parameters.ping_slot_data_rate_index",
	"end_device.default_mac_parameters.ping_slot_frequency",
	"end_device.default_mac_parameters.rejoin_count_periodicity",
	"end_device.default_mac_parameters.rejoin_time_periodicity",
	"end_device.default_mac_parameters.rx1_data_rate_offset",
	"end_device.default_mac_parameters.rx1_delay",
	"end_device.default_mac_parameters.rx2_data_rate_index",
	"end_device.default_mac_parameters.rx2_frequency",
	"end_device.default_mac_parameters.uplink_dwell_time",
	"end_device.description",
	"end_device.downlink_margin",
	"end_device.formatters",
	"end_device.formatters.down_formatter",
	"end_device.formatters.down_formatter_parameter",
	"end_device.formatters.up_formatter",
	"end_device.formatters.up_formatter_parameter",
	"end_device.frequency_plan_id",
	"end_device.ids",
	"end_device.ids.application_ids",
	"end_device.ids.application_ids.application_id",
	"end_device.ids.dev_addr",
	"end_device.ids.dev_eui",
	"end_device.ids.device_id",
	"end_device.ids.join_eui",
	"end_device.join_server_address",
	"end_device.last_dev_nonce",
	"end_device.last_dev_status_received_at",
	"end_device.last_join_nonce",
	"end_device.last_rj_count_0",
	"end_device.last_rj_count_1",
	"end_device.locations",
	"end_device.lorawan_phy_version",
	"end_device.lorawan_version",
	"end_device.mac_settings",
	"end_device.mac_settings.adr_margin",
	"end_device.mac_settings.class_b_timeout",
	"end_device.mac_settings.class_c_timeout",
	"end_device.mac_settings.status_count_periodicity",
	"end_device.mac_settings.status_time_periodicity",
	"end_device.mac_settings.use_adr",
	"end_device.mac_state",
	"end_device.mac_state.current_parameters",
	"end_device.mac_state.current_parameters.adr_ack_delay",
	"end_device.mac_state.current_parameters.adr_ack_limit",
	"end_device.mac_state.current_parameters.adr_data_rate_index",
	"end_device.mac_state.current_parameters.adr_nb_trans",
	"end_device.mac_state.current_parameters.adr_tx_power_index",
	"end_device.mac_state.current_parameters.beacon_frequency",
	"end_device.mac_state.current_parameters.channels",
	"end_device.mac_state.current_parameters.downlink_dwell_time",
	"end_device.mac_state.current_parameters.max_duty_cycle",
	"end_device.mac_state.current_parameters.max_eirp",
	"end_device.mac_state.current_parameters.ping_slot_data_rate_index",
	"end_device.mac_state.current_parameters.ping_slot_frequency",
	"end_device.mac_state.current_parameters.rejoin_count_periodicity",
	"end_device.mac_state.current_parameters.rejoin_time_periodicity",
	"end_device.mac_state.current_parameters.rx1_data_rate_offset",
	"end_device.mac_state.current_parameters.rx1_delay",
	"end_device.mac_state.current_parameters.rx2_data_rate_index",
	"end_device.mac_state.current_parameters.rx2_frequency",
	"end_device.mac_state.current_parameters.uplink_dwell_time",
	"end_device.mac_state.desired_parameters",
	"end_device.mac_state.desired_parameters.adr_ack_delay",
	"end_device.mac_state.desired_parameters.adr_ack_limit",
	"end_device.mac_state.desired_parameters.adr_data_rate_index",
	"end_device.mac_state.desired_parameters.adr_nb_trans",
	"end_device.mac_state.desired_parameters.adr_tx_power_index",
	"end_device.mac_state.desired_parameters.beacon_frequency",
	"end_device.mac_state.desired_parameters.channels",
	"end_device.mac_state.desired_parameters.downlink_dwell_time",
	"end_device.mac_state.desired_parameters.max_duty_cycle",
	"end_device.mac_state.desired_parameters.max_eirp",
	"end_device.mac_state.desired_parameters.ping_slot_data_rate_index",
	"end_device.mac_state.desired_parameters.ping_slot_frequency",
	"end_device.mac_state.desired_parameters.rejoin_count_periodicity",
	"end_device.mac_state.desired_parameters.rejoin_time_periodicity",
	"end_device.mac_state.desired_parameters.rx1_data_rate_offset",
	"end_device.mac_state.desired_parameters.rx1_delay",
	"end_device.mac_state.desired_parameters.rx2_data_rate_index",
	"end_device.mac_state.desired_parameters.rx2_frequency",
	"end_device.mac_state.desired_parameters.uplink_dwell_time",
	"end_device.mac_state.device_class",
	"end_device.mac_state.last_confirmed_downlink_at",
	"end_device.mac_state.last_dev_status_f_cnt_up",
	"end_device.mac_state.lorawan_version",
	"end_device.mac_state.pending_application_downlink",
	"end_device.mac_state.pending_application_downlink.class_b_c",
	"end_device.mac_state.pending_application_downlink.class_b_c.gateways",
	"end_device.mac_state.pending_application_downlink.class_b_c.time",
	"end_device.mac_state.pending_application_downlink.confirmed",
	"end_device.mac_state.pending_application_downlink.correlation_ids",
	"end_device.mac_state.pending_application_downlink.decoded_payload",
	"end_device.mac_state.pending_application_downlink.f_cnt",
	"end_device.mac_state.pending_application_downlink.f_port",
	"end_device.mac_state.pending_application_downlink.frm_payload",
	"end_device.mac_state.pending_application_downlink.session_key_id",
	"end_device.mac_state.pending_requests",
	"end_device.mac_state.ping_slot_periodicity",
	"end_device.mac_state.queued_responses",
	"end_device.max_frequency",
	"end_device.min_frequency",
	"end_device.name",
	"end_device.net_id",
	"end_device.network_server_address",
	"end_device.pending_session",
	"end_device.pending_session.dev_addr",
	"end_device.pending_session.keys",
	"end_device.pending_session.keys.app_s_key",
	"end_device.pending_session.keys.app_s_key.kek_label",
	"end_device.pending_session.keys.app_s_key.key",
	"end_device.pending_session.keys.f_nwk_s_int_key",
	"end_device.pending_session.keys.f_nwk_s_int_key.kek_label",
	"end_device.pending_session.keys.f_nwk_s_int_key.key",
	"end_device.pending_session.keys.nwk_s_enc_key",
	"end_device.pending_session.keys.nwk_s_enc_key.kek_label",
	"end_device.pending_session.keys.nwk_s_enc_key.key",
	"end_device.pending_session.keys.s_nwk_s_int_key",
	"end_device.pending_session.keys.s_nwk_s_int_key.kek_label",
	"end_device.pending_session.keys.s_nwk_s_int_key.key",
	"end_device.pending_session.keys.session_key_id",
	"end_device.pending_session.last_a_f_cnt_down",
	"end_device.pending_session.last_conf_f_cnt_down",
	"end_device.pending_session.last_f_cnt_up",
	"end_device.pending_session.last_n_f_cnt_down",
	"end_device.pending_session.started_at",
	"end_device.power_state",
	"end_device.queued_application_downlinks",
	"end_device.recent_downlinks",
	"end_device.recent_uplinks",
	"end_device.resets_f_cnt",
	"end_device.resets_join_nonces",
	"end_device.root_keys",
	"end_device.root_keys.app_key",
	"end_device.root_keys.app_key.kek_label",
	"end_device.root_keys.app_key.key",
	"end_device.root_keys.nwk_key",
	"end_device.root_keys.nwk_key.kek_label",
	"end_device.root_keys.nwk_key.key",
	"end_device.root_keys.root_key_id",
	"end_device.service_profile_id",
	"end_device.session",
	"end_device.session.dev_addr",
	"end_device.session.keys",
	"end_device.session.keys.app_s_key",
	"end_device.session.keys.app_s_key.kek_label",
	"end_device.session.keys.app_s_key.key",
	"end_device.session.keys.f_nwk_s_int_key",
	"end_device.session.keys.f_nwk_s_int_key.kek_label",
	"end_device.session.keys.f_nwk_s_int_key.key",
	"end_device.session.keys.nwk_s_enc_key",
	"end_device.session.keys.nwk_s_enc_key.kek_label",
	"end_device.session.keys.nwk_s_enc_key.key",
	"end_device.session.keys.s_nwk_s_int_key",
	"end_device.session.keys.s_nwk_s_int_key.kek_label",
	"end_device.session.keys.s_nwk_s_int_key.key",
	"end_device.session.keys.session_key_id",
	"end_device.session.last_a_f_cnt_down",
	"end_device.session.last_conf_f_cnt_down",
	"end_device.session.last_f_cnt_up",
	"end_device.session.last_n_f_cnt_down",
	"end_device.session.started_at",
	"end_device.supports_class_b",
	"end_device.supports_class_c",
	"end_device.supports_join",
	"end_device.updated_at",
	"end_device.used_dev_nonces",
	"end_device.uses_32_bit_f_cnt",
	"end_device.version_ids",
	"end_device.version_ids.brand_id",
	"end_device.version_ids.firmware_version",
	"end_device.version_ids.hardware_version",
	"end_device.version_ids.model_id",
	"field_mask",
}

func (*UpdateEndDeviceRequest) FieldMaskPaths() []string {
	ret := make([]string, len(_UpdateEndDeviceRequestFieldPaths))
	copy(ret, _UpdateEndDeviceRequestFieldPaths[:])
	return ret
}

func (dst *UpdateEndDeviceRequest) SetFields(src *UpdateEndDeviceRequest, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "end_device":
			dst.EndDevice = src.EndDevice
		case "end_device.application_server_address":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.attributes":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.battery_percentage":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.created_at":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.default_mac_parameters":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.default_mac_parameters.adr_ack_delay":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.default_mac_parameters.adr_ack_limit":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.default_mac_parameters.adr_data_rate_index":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.default_mac_parameters.adr_nb_trans":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.default_mac_parameters.adr_tx_power_index":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.default_mac_parameters.beacon_frequency":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.default_mac_parameters.channels":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.default_mac_parameters.downlink_dwell_time":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.default_mac_parameters.max_duty_cycle":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.default_mac_parameters.max_eirp":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.default_mac_parameters.ping_slot_data_rate_index":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.default_mac_parameters.ping_slot_frequency":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.default_mac_parameters.rejoin_count_periodicity":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.default_mac_parameters.rejoin_time_periodicity":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.default_mac_parameters.rx1_data_rate_offset":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.default_mac_parameters.rx1_delay":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.default_mac_parameters.rx2_data_rate_index":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.default_mac_parameters.rx2_frequency":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.default_mac_parameters.uplink_dwell_time":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.description":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.downlink_margin":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.formatters":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.formatters.down_formatter":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.formatters.down_formatter_parameter":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.formatters.up_formatter":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.formatters.up_formatter_parameter":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.frequency_plan_id":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.ids":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.ids.application_ids":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.ids.application_ids.application_id":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.ids.dev_addr":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.ids.dev_eui":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.ids.device_id":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.ids.join_eui":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.join_server_address":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.last_dev_nonce":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.last_dev_status_received_at":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.last_join_nonce":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.last_rj_count_0":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.last_rj_count_1":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.locations":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.lorawan_phy_version":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.lorawan_version":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_settings":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_settings.adr_margin":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_settings.class_b_timeout":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_settings.class_c_timeout":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_settings.status_count_periodicity":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_settings.status_time_periodicity":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_settings.use_adr":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.current_parameters":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.current_parameters.adr_ack_delay":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.current_parameters.adr_ack_limit":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.current_parameters.adr_data_rate_index":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.current_parameters.adr_nb_trans":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.current_parameters.adr_tx_power_index":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.current_parameters.beacon_frequency":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.current_parameters.channels":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.current_parameters.downlink_dwell_time":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.current_parameters.max_duty_cycle":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.current_parameters.max_eirp":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.current_parameters.ping_slot_data_rate_index":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.current_parameters.ping_slot_frequency":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.current_parameters.rejoin_count_periodicity":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.current_parameters.rejoin_time_periodicity":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.current_parameters.rx1_data_rate_offset":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.current_parameters.rx1_delay":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.current_parameters.rx2_data_rate_index":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.current_parameters.rx2_frequency":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.current_parameters.uplink_dwell_time":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.desired_parameters":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.desired_parameters.adr_ack_delay":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.desired_parameters.adr_ack_limit":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.desired_parameters.adr_data_rate_index":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.desired_parameters.adr_nb_trans":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.desired_parameters.adr_tx_power_index":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.desired_parameters.beacon_frequency":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.desired_parameters.channels":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.desired_parameters.downlink_dwell_time":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.desired_parameters.max_duty_cycle":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.desired_parameters.max_eirp":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.desired_parameters.ping_slot_data_rate_index":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.desired_parameters.ping_slot_frequency":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.desired_parameters.rejoin_count_periodicity":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.desired_parameters.rejoin_time_periodicity":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.desired_parameters.rx1_data_rate_offset":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.desired_parameters.rx1_delay":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.desired_parameters.rx2_data_rate_index":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.desired_parameters.rx2_frequency":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.desired_parameters.uplink_dwell_time":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.device_class":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.last_confirmed_downlink_at":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.last_dev_status_f_cnt_up":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.lorawan_version":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.pending_application_downlink":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.pending_application_downlink.class_b_c":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.pending_application_downlink.class_b_c.gateways":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.pending_application_downlink.class_b_c.time":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.pending_application_downlink.confirmed":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.pending_application_downlink.correlation_ids":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.pending_application_downlink.decoded_payload":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.pending_application_downlink.f_cnt":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.pending_application_downlink.f_port":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.pending_application_downlink.frm_payload":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.pending_application_downlink.session_key_id":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.pending_requests":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.ping_slot_periodicity":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.mac_state.queued_responses":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.max_frequency":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.min_frequency":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.name":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.net_id":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.network_server_address":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session.dev_addr":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session.keys":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session.keys.app_s_key":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session.keys.app_s_key.kek_label":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session.keys.app_s_key.key":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session.keys.f_nwk_s_int_key":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session.keys.f_nwk_s_int_key.kek_label":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session.keys.f_nwk_s_int_key.key":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session.keys.nwk_s_enc_key":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session.keys.nwk_s_enc_key.kek_label":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session.keys.nwk_s_enc_key.key":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session.keys.s_nwk_s_int_key":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session.keys.s_nwk_s_int_key.kek_label":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session.keys.s_nwk_s_int_key.key":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session.keys.session_key_id":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session.last_a_f_cnt_down":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session.last_conf_f_cnt_down":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session.last_f_cnt_up":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session.last_n_f_cnt_down":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.pending_session.started_at":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.power_state":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.queued_application_downlinks":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.recent_downlinks":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.recent_uplinks":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.resets_f_cnt":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.resets_join_nonces":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.root_keys":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.root_keys.app_key":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.root_keys.app_key.kek_label":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.root_keys.app_key.key":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.root_keys.nwk_key":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.root_keys.nwk_key.kek_label":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.root_keys.nwk_key.key":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.root_keys.root_key_id":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.service_profile_id":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session.dev_addr":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session.keys":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session.keys.app_s_key":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session.keys.app_s_key.kek_label":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session.keys.app_s_key.key":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session.keys.f_nwk_s_int_key":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session.keys.f_nwk_s_int_key.kek_label":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session.keys.f_nwk_s_int_key.key":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session.keys.nwk_s_enc_key":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session.keys.nwk_s_enc_key.kek_label":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session.keys.nwk_s_enc_key.key":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session.keys.s_nwk_s_int_key":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session.keys.s_nwk_s_int_key.kek_label":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session.keys.s_nwk_s_int_key.key":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session.keys.session_key_id":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session.last_a_f_cnt_down":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session.last_conf_f_cnt_down":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session.last_f_cnt_up":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session.last_n_f_cnt_down":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.session.started_at":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.supports_class_b":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.supports_class_c":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.supports_join":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.updated_at":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.used_dev_nonces":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.uses_32_bit_f_cnt":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.version_ids":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.version_ids.brand_id":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.version_ids.firmware_version":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.version_ids.hardware_version":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "end_device.version_ids.model_id":
			dst.EndDevice.SetFields(&src.EndDevice, _pathsWithoutPrefix("end_device", paths)...)
		case "field_mask":
			dst.FieldMask = src.FieldMask
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _GetEndDeviceRequestFieldPaths = [...]string{
	"end_device_ids",
	"end_device_ids.application_ids",
	"end_device_ids.application_ids.application_id",
	"end_device_ids.dev_addr",
	"end_device_ids.dev_eui",
	"end_device_ids.device_id",
	"end_device_ids.join_eui",
	"field_mask",
}

func (*GetEndDeviceRequest) FieldMaskPaths() []string {
	ret := make([]string, len(_GetEndDeviceRequestFieldPaths))
	copy(ret, _GetEndDeviceRequestFieldPaths[:])
	return ret
}

func (dst *GetEndDeviceRequest) SetFields(src *GetEndDeviceRequest, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "end_device_ids":
			dst.EndDeviceIdentifiers = src.EndDeviceIdentifiers
		case "end_device_ids.application_ids":
			dst.EndDeviceIdentifiers.SetFields(&src.EndDeviceIdentifiers, _pathsWithoutPrefix("end_device_ids", paths)...)
		case "end_device_ids.application_ids.application_id":
			dst.EndDeviceIdentifiers.SetFields(&src.EndDeviceIdentifiers, _pathsWithoutPrefix("end_device_ids", paths)...)
		case "end_device_ids.dev_addr":
			dst.EndDeviceIdentifiers.SetFields(&src.EndDeviceIdentifiers, _pathsWithoutPrefix("end_device_ids", paths)...)
		case "end_device_ids.dev_eui":
			dst.EndDeviceIdentifiers.SetFields(&src.EndDeviceIdentifiers, _pathsWithoutPrefix("end_device_ids", paths)...)
		case "end_device_ids.device_id":
			dst.EndDeviceIdentifiers.SetFields(&src.EndDeviceIdentifiers, _pathsWithoutPrefix("end_device_ids", paths)...)
		case "end_device_ids.join_eui":
			dst.EndDeviceIdentifiers.SetFields(&src.EndDeviceIdentifiers, _pathsWithoutPrefix("end_device_ids", paths)...)
		case "field_mask":
			dst.FieldMask = src.FieldMask
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _ListEndDevicesRequestFieldPaths = [...]string{
	"application_ids",
	"application_ids.application_id",
	"field_mask",
	"limit",
	"order",
	"page",
}

func (*ListEndDevicesRequest) FieldMaskPaths() []string {
	ret := make([]string, len(_ListEndDevicesRequestFieldPaths))
	copy(ret, _ListEndDevicesRequestFieldPaths[:])
	return ret
}

func (dst *ListEndDevicesRequest) SetFields(src *ListEndDevicesRequest, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "application_ids":
			dst.ApplicationIdentifiers = src.ApplicationIdentifiers
		case "application_ids.application_id":
			dst.ApplicationIdentifiers.SetFields(&src.ApplicationIdentifiers, _pathsWithoutPrefix("application_ids", paths)...)
		case "field_mask":
			dst.FieldMask = src.FieldMask
		case "limit":
			dst.Limit = src.Limit
		case "order":
			dst.Order = src.Order
		case "page":
			dst.Page = src.Page
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _SetEndDeviceRequestFieldPaths = [...]string{
	"device",
	"device.application_server_address",
	"device.attributes",
	"device.battery_percentage",
	"device.created_at",
	"device.default_mac_parameters",
	"device.default_mac_parameters.adr_ack_delay",
	"device.default_mac_parameters.adr_ack_limit",
	"device.default_mac_parameters.adr_data_rate_index",
	"device.default_mac_parameters.adr_nb_trans",
	"device.default_mac_parameters.adr_tx_power_index",
	"device.default_mac_parameters.beacon_frequency",
	"device.default_mac_parameters.channels",
	"device.default_mac_parameters.downlink_dwell_time",
	"device.default_mac_parameters.max_duty_cycle",
	"device.default_mac_parameters.max_eirp",
	"device.default_mac_parameters.ping_slot_data_rate_index",
	"device.default_mac_parameters.ping_slot_frequency",
	"device.default_mac_parameters.rejoin_count_periodicity",
	"device.default_mac_parameters.rejoin_time_periodicity",
	"device.default_mac_parameters.rx1_data_rate_offset",
	"device.default_mac_parameters.rx1_delay",
	"device.default_mac_parameters.rx2_data_rate_index",
	"device.default_mac_parameters.rx2_frequency",
	"device.default_mac_parameters.uplink_dwell_time",
	"device.description",
	"device.downlink_margin",
	"device.formatters",
	"device.formatters.down_formatter",
	"device.formatters.down_formatter_parameter",
	"device.formatters.up_formatter",
	"device.formatters.up_formatter_parameter",
	"device.frequency_plan_id",
	"device.ids",
	"device.ids.application_ids",
	"device.ids.application_ids.application_id",
	"device.ids.dev_addr",
	"device.ids.dev_eui",
	"device.ids.device_id",
	"device.ids.join_eui",
	"device.join_server_address",
	"device.last_dev_nonce",
	"device.last_dev_status_received_at",
	"device.last_join_nonce",
	"device.last_rj_count_0",
	"device.last_rj_count_1",
	"device.locations",
	"device.lorawan_phy_version",
	"device.lorawan_version",
	"device.mac_settings",
	"device.mac_settings.adr_margin",
	"device.mac_settings.class_b_timeout",
	"device.mac_settings.class_c_timeout",
	"device.mac_settings.status_count_periodicity",
	"device.mac_settings.status_time_periodicity",
	"device.mac_settings.use_adr",
	"device.mac_state",
	"device.mac_state.current_parameters",
	"device.mac_state.current_parameters.adr_ack_delay",
	"device.mac_state.current_parameters.adr_ack_limit",
	"device.mac_state.current_parameters.adr_data_rate_index",
	"device.mac_state.current_parameters.adr_nb_trans",
	"device.mac_state.current_parameters.adr_tx_power_index",
	"device.mac_state.current_parameters.beacon_frequency",
	"device.mac_state.current_parameters.channels",
	"device.mac_state.current_parameters.downlink_dwell_time",
	"device.mac_state.current_parameters.max_duty_cycle",
	"device.mac_state.current_parameters.max_eirp",
	"device.mac_state.current_parameters.ping_slot_data_rate_index",
	"device.mac_state.current_parameters.ping_slot_frequency",
	"device.mac_state.current_parameters.rejoin_count_periodicity",
	"device.mac_state.current_parameters.rejoin_time_periodicity",
	"device.mac_state.current_parameters.rx1_data_rate_offset",
	"device.mac_state.current_parameters.rx1_delay",
	"device.mac_state.current_parameters.rx2_data_rate_index",
	"device.mac_state.current_parameters.rx2_frequency",
	"device.mac_state.current_parameters.uplink_dwell_time",
	"device.mac_state.desired_parameters",
	"device.mac_state.desired_parameters.adr_ack_delay",
	"device.mac_state.desired_parameters.adr_ack_limit",
	"device.mac_state.desired_parameters.adr_data_rate_index",
	"device.mac_state.desired_parameters.adr_nb_trans",
	"device.mac_state.desired_parameters.adr_tx_power_index",
	"device.mac_state.desired_parameters.beacon_frequency",
	"device.mac_state.desired_parameters.channels",
	"device.mac_state.desired_parameters.downlink_dwell_time",
	"device.mac_state.desired_parameters.max_duty_cycle",
	"device.mac_state.desired_parameters.max_eirp",
	"device.mac_state.desired_parameters.ping_slot_data_rate_index",
	"device.mac_state.desired_parameters.ping_slot_frequency",
	"device.mac_state.desired_parameters.rejoin_count_periodicity",
	"device.mac_state.desired_parameters.rejoin_time_periodicity",
	"device.mac_state.desired_parameters.rx1_data_rate_offset",
	"device.mac_state.desired_parameters.rx1_delay",
	"device.mac_state.desired_parameters.rx2_data_rate_index",
	"device.mac_state.desired_parameters.rx2_frequency",
	"device.mac_state.desired_parameters.uplink_dwell_time",
	"device.mac_state.device_class",
	"device.mac_state.last_confirmed_downlink_at",
	"device.mac_state.last_dev_status_f_cnt_up",
	"device.mac_state.lorawan_version",
	"device.mac_state.pending_application_downlink",
	"device.mac_state.pending_application_downlink.class_b_c",
	"device.mac_state.pending_application_downlink.class_b_c.gateways",
	"device.mac_state.pending_application_downlink.class_b_c.time",
	"device.mac_state.pending_application_downlink.confirmed",
	"device.mac_state.pending_application_downlink.correlation_ids",
	"device.mac_state.pending_application_downlink.decoded_payload",
	"device.mac_state.pending_application_downlink.f_cnt",
	"device.mac_state.pending_application_downlink.f_port",
	"device.mac_state.pending_application_downlink.frm_payload",
	"device.mac_state.pending_application_downlink.session_key_id",
	"device.mac_state.pending_requests",
	"device.mac_state.ping_slot_periodicity",
	"device.mac_state.queued_responses",
	"device.max_frequency",
	"device.min_frequency",
	"device.name",
	"device.net_id",
	"device.network_server_address",
	"device.pending_session",
	"device.pending_session.dev_addr",
	"device.pending_session.keys",
	"device.pending_session.keys.app_s_key",
	"device.pending_session.keys.app_s_key.kek_label",
	"device.pending_session.keys.app_s_key.key",
	"device.pending_session.keys.f_nwk_s_int_key",
	"device.pending_session.keys.f_nwk_s_int_key.kek_label",
	"device.pending_session.keys.f_nwk_s_int_key.key",
	"device.pending_session.keys.nwk_s_enc_key",
	"device.pending_session.keys.nwk_s_enc_key.kek_label",
	"device.pending_session.keys.nwk_s_enc_key.key",
	"device.pending_session.keys.s_nwk_s_int_key",
	"device.pending_session.keys.s_nwk_s_int_key.kek_label",
	"device.pending_session.keys.s_nwk_s_int_key.key",
	"device.pending_session.keys.session_key_id",
	"device.pending_session.last_a_f_cnt_down",
	"device.pending_session.last_conf_f_cnt_down",
	"device.pending_session.last_f_cnt_up",
	"device.pending_session.last_n_f_cnt_down",
	"device.pending_session.started_at",
	"device.power_state",
	"device.queued_application_downlinks",
	"device.recent_downlinks",
	"device.recent_uplinks",
	"device.resets_f_cnt",
	"device.resets_join_nonces",
	"device.root_keys",
	"device.root_keys.app_key",
	"device.root_keys.app_key.kek_label",
	"device.root_keys.app_key.key",
	"device.root_keys.nwk_key",
	"device.root_keys.nwk_key.kek_label",
	"device.root_keys.nwk_key.key",
	"device.root_keys.root_key_id",
	"device.service_profile_id",
	"device.session",
	"device.session.dev_addr",
	"device.session.keys",
	"device.session.keys.app_s_key",
	"device.session.keys.app_s_key.kek_label",
	"device.session.keys.app_s_key.key",
	"device.session.keys.f_nwk_s_int_key",
	"device.session.keys.f_nwk_s_int_key.kek_label",
	"device.session.keys.f_nwk_s_int_key.key",
	"device.session.keys.nwk_s_enc_key",
	"device.session.keys.nwk_s_enc_key.kek_label",
	"device.session.keys.nwk_s_enc_key.key",
	"device.session.keys.s_nwk_s_int_key",
	"device.session.keys.s_nwk_s_int_key.kek_label",
	"device.session.keys.s_nwk_s_int_key.key",
	"device.session.keys.session_key_id",
	"device.session.last_a_f_cnt_down",
	"device.session.last_conf_f_cnt_down",
	"device.session.last_f_cnt_up",
	"device.session.last_n_f_cnt_down",
	"device.session.started_at",
	"device.supports_class_b",
	"device.supports_class_c",
	"device.supports_join",
	"device.updated_at",
	"device.used_dev_nonces",
	"device.uses_32_bit_f_cnt",
	"device.version_ids",
	"device.version_ids.brand_id",
	"device.version_ids.firmware_version",
	"device.version_ids.hardware_version",
	"device.version_ids.model_id",
	"field_mask",
}

func (*SetEndDeviceRequest) FieldMaskPaths() []string {
	ret := make([]string, len(_SetEndDeviceRequestFieldPaths))
	copy(ret, _SetEndDeviceRequestFieldPaths[:])
	return ret
}

func (dst *SetEndDeviceRequest) SetFields(src *SetEndDeviceRequest, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "device":
			dst.Device = src.Device
		case "device.application_server_address":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.attributes":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.battery_percentage":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.created_at":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.default_mac_parameters":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.default_mac_parameters.adr_ack_delay":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.default_mac_parameters.adr_ack_limit":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.default_mac_parameters.adr_data_rate_index":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.default_mac_parameters.adr_nb_trans":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.default_mac_parameters.adr_tx_power_index":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.default_mac_parameters.beacon_frequency":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.default_mac_parameters.channels":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.default_mac_parameters.downlink_dwell_time":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.default_mac_parameters.max_duty_cycle":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.default_mac_parameters.max_eirp":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.default_mac_parameters.ping_slot_data_rate_index":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.default_mac_parameters.ping_slot_frequency":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.default_mac_parameters.rejoin_count_periodicity":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.default_mac_parameters.rejoin_time_periodicity":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.default_mac_parameters.rx1_data_rate_offset":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.default_mac_parameters.rx1_delay":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.default_mac_parameters.rx2_data_rate_index":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.default_mac_parameters.rx2_frequency":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.default_mac_parameters.uplink_dwell_time":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.description":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.downlink_margin":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.formatters":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.formatters.down_formatter":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.formatters.down_formatter_parameter":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.formatters.up_formatter":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.formatters.up_formatter_parameter":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.frequency_plan_id":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.ids":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.ids.application_ids":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.ids.application_ids.application_id":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.ids.dev_addr":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.ids.dev_eui":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.ids.device_id":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.ids.join_eui":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.join_server_address":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.last_dev_nonce":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.last_dev_status_received_at":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.last_join_nonce":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.last_rj_count_0":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.last_rj_count_1":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.locations":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.lorawan_phy_version":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.lorawan_version":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_settings":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_settings.adr_margin":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_settings.class_b_timeout":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_settings.class_c_timeout":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_settings.status_count_periodicity":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_settings.status_time_periodicity":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_settings.use_adr":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.current_parameters":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.current_parameters.adr_ack_delay":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.current_parameters.adr_ack_limit":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.current_parameters.adr_data_rate_index":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.current_parameters.adr_nb_trans":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.current_parameters.adr_tx_power_index":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.current_parameters.beacon_frequency":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.current_parameters.channels":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.current_parameters.downlink_dwell_time":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.current_parameters.max_duty_cycle":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.current_parameters.max_eirp":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.current_parameters.ping_slot_data_rate_index":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.current_parameters.ping_slot_frequency":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.current_parameters.rejoin_count_periodicity":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.current_parameters.rejoin_time_periodicity":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.current_parameters.rx1_data_rate_offset":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.current_parameters.rx1_delay":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.current_parameters.rx2_data_rate_index":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.current_parameters.rx2_frequency":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.current_parameters.uplink_dwell_time":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.desired_parameters":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.desired_parameters.adr_ack_delay":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.desired_parameters.adr_ack_limit":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.desired_parameters.adr_data_rate_index":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.desired_parameters.adr_nb_trans":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.desired_parameters.adr_tx_power_index":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.desired_parameters.beacon_frequency":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.desired_parameters.channels":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.desired_parameters.downlink_dwell_time":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.desired_parameters.max_duty_cycle":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.desired_parameters.max_eirp":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.desired_parameters.ping_slot_data_rate_index":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.desired_parameters.ping_slot_frequency":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.desired_parameters.rejoin_count_periodicity":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.desired_parameters.rejoin_time_periodicity":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.desired_parameters.rx1_data_rate_offset":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.desired_parameters.rx1_delay":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.desired_parameters.rx2_data_rate_index":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.desired_parameters.rx2_frequency":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.desired_parameters.uplink_dwell_time":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.device_class":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.last_confirmed_downlink_at":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.last_dev_status_f_cnt_up":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.lorawan_version":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.pending_application_downlink":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.pending_application_downlink.class_b_c":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.pending_application_downlink.class_b_c.gateways":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.pending_application_downlink.class_b_c.time":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.pending_application_downlink.confirmed":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.pending_application_downlink.correlation_ids":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.pending_application_downlink.decoded_payload":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.pending_application_downlink.f_cnt":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.pending_application_downlink.f_port":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.pending_application_downlink.frm_payload":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.pending_application_downlink.session_key_id":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.pending_requests":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.ping_slot_periodicity":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.mac_state.queued_responses":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.max_frequency":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.min_frequency":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.name":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.net_id":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.network_server_address":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.pending_session":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.pending_session.dev_addr":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.pending_session.keys":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.pending_session.keys.app_s_key":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.pending_session.keys.app_s_key.kek_label":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.pending_session.keys.app_s_key.key":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.pending_session.keys.f_nwk_s_int_key":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.pending_session.keys.f_nwk_s_int_key.kek_label":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.pending_session.keys.f_nwk_s_int_key.key":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.pending_session.keys.nwk_s_enc_key":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.pending_session.keys.nwk_s_enc_key.kek_label":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.pending_session.keys.nwk_s_enc_key.key":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.pending_session.keys.s_nwk_s_int_key":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.pending_session.keys.s_nwk_s_int_key.kek_label":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.pending_session.keys.s_nwk_s_int_key.key":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.pending_session.keys.session_key_id":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.pending_session.last_a_f_cnt_down":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.pending_session.last_conf_f_cnt_down":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.pending_session.last_f_cnt_up":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.pending_session.last_n_f_cnt_down":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.pending_session.started_at":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.power_state":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.queued_application_downlinks":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.recent_downlinks":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.recent_uplinks":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.resets_f_cnt":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.resets_join_nonces":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.root_keys":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.root_keys.app_key":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.root_keys.app_key.kek_label":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.root_keys.app_key.key":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.root_keys.nwk_key":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.root_keys.nwk_key.kek_label":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.root_keys.nwk_key.key":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.root_keys.root_key_id":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.service_profile_id":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.session":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.session.dev_addr":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.session.keys":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.session.keys.app_s_key":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.session.keys.app_s_key.kek_label":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.session.keys.app_s_key.key":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.session.keys.f_nwk_s_int_key":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.session.keys.f_nwk_s_int_key.kek_label":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.session.keys.f_nwk_s_int_key.key":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.session.keys.nwk_s_enc_key":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.session.keys.nwk_s_enc_key.kek_label":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.session.keys.nwk_s_enc_key.key":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.session.keys.s_nwk_s_int_key":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.session.keys.s_nwk_s_int_key.kek_label":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.session.keys.s_nwk_s_int_key.key":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.session.keys.session_key_id":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.session.last_a_f_cnt_down":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.session.last_conf_f_cnt_down":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.session.last_f_cnt_up":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.session.last_n_f_cnt_down":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.session.started_at":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.supports_class_b":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.supports_class_c":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.supports_join":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.updated_at":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.used_dev_nonces":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.uses_32_bit_f_cnt":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.version_ids":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.version_ids.brand_id":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.version_ids.firmware_version":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.version_ids.hardware_version":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "device.version_ids.model_id":
			dst.Device.SetFields(&src.Device, _pathsWithoutPrefix("device", paths)...)
		case "field_mask":
			dst.FieldMask = src.FieldMask
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}
