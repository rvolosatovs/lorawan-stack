// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import (
	fmt "fmt"

	types "github.com/gogo/protobuf/types"
)

func (dst *ApplicationLink) SetFields(src *ApplicationLink, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "network_server_address":
			if len(subs) > 0 {
				return fmt.Errorf("'network_server_address' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.NetworkServerAddress = src.NetworkServerAddress
			} else {
				var zero string
				dst.NetworkServerAddress = zero
			}
		case "api_key":
			if len(subs) > 0 {
				return fmt.Errorf("'api_key' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.APIKey = src.APIKey
			} else {
				var zero string
				dst.APIKey = zero
			}
		case "default_formatters":
			if len(subs) > 0 {
				newDst := dst.DefaultFormatters
				if newDst == nil {
					newDst = &MessagePayloadFormatters{}
					dst.DefaultFormatters = newDst
				}
				var newSrc *MessagePayloadFormatters
				if src != nil {
					newSrc = src.DefaultFormatters
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.DefaultFormatters = src.DefaultFormatters
				} else {
					dst.DefaultFormatters = nil
				}
			}
		case "tls":
			if len(subs) > 0 {
				return fmt.Errorf("'tls' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.TLS = src.TLS
			} else {
				var zero bool
				dst.TLS = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *GetApplicationLinkRequest) SetFields(src *GetApplicationLinkRequest, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "application_ids":
			if len(subs) > 0 {
				newDst := &dst.ApplicationIdentifiers
				var newSrc *ApplicationIdentifiers
				if src != nil {
					newSrc = &src.ApplicationIdentifiers
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.ApplicationIdentifiers = src.ApplicationIdentifiers
				} else {
					var zero ApplicationIdentifiers
					dst.ApplicationIdentifiers = zero
				}
			}
		case "field_mask":
			if len(subs) > 0 {
				return fmt.Errorf("'field_mask' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FieldMask = src.FieldMask
			} else {
				var zero types.FieldMask
				dst.FieldMask = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *SetApplicationLinkRequest) SetFields(src *SetApplicationLinkRequest, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "application_ids":
			if len(subs) > 0 {
				newDst := &dst.ApplicationIdentifiers
				var newSrc *ApplicationIdentifiers
				if src != nil {
					newSrc = &src.ApplicationIdentifiers
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.ApplicationIdentifiers = src.ApplicationIdentifiers
				} else {
					var zero ApplicationIdentifiers
					dst.ApplicationIdentifiers = zero
				}
			}
		case "link":
			if len(subs) > 0 {
				newDst := &dst.ApplicationLink
				var newSrc *ApplicationLink
				if src != nil {
					newSrc = &src.ApplicationLink
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.ApplicationLink = src.ApplicationLink
				} else {
					var zero ApplicationLink
					dst.ApplicationLink = zero
				}
			}
		case "field_mask":
			if len(subs) > 0 {
				return fmt.Errorf("'field_mask' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FieldMask = src.FieldMask
			} else {
				var zero types.FieldMask
				dst.FieldMask = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ApplicationLinkStats) SetFields(src *ApplicationLinkStats, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "linked_at":
			if len(subs) > 0 {
				return fmt.Errorf("'linked_at' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.LinkedAt = src.LinkedAt
			} else {
				dst.LinkedAt = nil
			}
		case "network_server_address":
			if len(subs) > 0 {
				return fmt.Errorf("'network_server_address' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.NetworkServerAddress = src.NetworkServerAddress
			} else {
				var zero string
				dst.NetworkServerAddress = zero
			}
		case "last_up_received_at":
			if len(subs) > 0 {
				return fmt.Errorf("'last_up_received_at' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.LastUpReceivedAt = src.LastUpReceivedAt
			} else {
				dst.LastUpReceivedAt = nil
			}
		case "up_count":
			if len(subs) > 0 {
				return fmt.Errorf("'up_count' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.UpCount = src.UpCount
			} else {
				var zero uint64
				dst.UpCount = zero
			}
		case "last_downlink_forwarded_at":
			if len(subs) > 0 {
				return fmt.Errorf("'last_downlink_forwarded_at' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.LastDownlinkForwardedAt = src.LastDownlinkForwardedAt
			} else {
				dst.LastDownlinkForwardedAt = nil
			}
		case "downlink_count":
			if len(subs) > 0 {
				return fmt.Errorf("'downlink_count' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DownlinkCount = src.DownlinkCount
			} else {
				var zero uint64
				dst.DownlinkCount = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}
