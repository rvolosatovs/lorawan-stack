// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/TheThingsNetwork/ttn/api/networkserver.proto

package ttnpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import google_protobuf1 "github.com/gogo/protobuf/types"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ApplicationUp wraps multiple application-layer uplink types
type ApplicationUp struct {
	// Types that are valid to be assigned to Up:
	//	*ApplicationUp_UplinkMessage
	Up isApplicationUp_Up `protobuf_oneof:"up"`
}

func (m *ApplicationUp) Reset()                    { *m = ApplicationUp{} }
func (*ApplicationUp) ProtoMessage()               {}
func (*ApplicationUp) Descriptor() ([]byte, []int) { return fileDescriptorNetworkserver, []int{0} }

type isApplicationUp_Up interface {
	isApplicationUp_Up()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ApplicationUp_UplinkMessage struct {
	UplinkMessage *ApplicationUplink `protobuf:"bytes,1,opt,name=uplink_message,json=uplinkMessage,oneof"`
}

func (*ApplicationUp_UplinkMessage) isApplicationUp_Up() {}

func (m *ApplicationUp) GetUp() isApplicationUp_Up {
	if m != nil {
		return m.Up
	}
	return nil
}

func (m *ApplicationUp) GetUplinkMessage() *ApplicationUplink {
	if x, ok := m.GetUp().(*ApplicationUp_UplinkMessage); ok {
		return x.UplinkMessage
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ApplicationUp) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ApplicationUp_OneofMarshaler, _ApplicationUp_OneofUnmarshaler, _ApplicationUp_OneofSizer, []interface{}{
		(*ApplicationUp_UplinkMessage)(nil),
	}
}

func _ApplicationUp_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ApplicationUp)
	// up
	switch x := m.Up.(type) {
	case *ApplicationUp_UplinkMessage:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UplinkMessage); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ApplicationUp.Up has unexpected type %T", x)
	}
	return nil
}

func _ApplicationUp_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ApplicationUp)
	switch tag {
	case 1: // up.uplink_message
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ApplicationUplink)
		err := b.DecodeMessage(msg)
		m.Up = &ApplicationUp_UplinkMessage{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ApplicationUp_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ApplicationUp)
	// up
	switch x := m.Up.(type) {
	case *ApplicationUp_UplinkMessage:
		s := proto.Size(x.UplinkMessage)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*ApplicationUp)(nil), "ttn.v3.ApplicationUp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GsNs service

type GsNsClient interface {
	StartServingGateway(ctx context.Context, in *GatewayIdentifiers, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	StopServingGateway(ctx context.Context, in *GatewayIdentifiers, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	HandleUplink(ctx context.Context, in *UplinkMessage, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type gsNsClient struct {
	cc *grpc.ClientConn
}

func NewGsNsClient(cc *grpc.ClientConn) GsNsClient {
	return &gsNsClient{cc}
}

func (c *gsNsClient) StartServingGateway(ctx context.Context, in *GatewayIdentifiers, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.GsNs/StartServingGateway", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gsNsClient) StopServingGateway(ctx context.Context, in *GatewayIdentifiers, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.GsNs/StopServingGateway", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gsNsClient) HandleUplink(ctx context.Context, in *UplinkMessage, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.GsNs/HandleUplink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GsNs service

type GsNsServer interface {
	StartServingGateway(context.Context, *GatewayIdentifiers) (*google_protobuf1.Empty, error)
	StopServingGateway(context.Context, *GatewayIdentifiers) (*google_protobuf1.Empty, error)
	HandleUplink(context.Context, *UplinkMessage) (*google_protobuf1.Empty, error)
}

func RegisterGsNsServer(s *grpc.Server, srv GsNsServer) {
	s.RegisterService(&_GsNs_serviceDesc, srv)
}

func _GsNs_StartServingGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GsNsServer).StartServingGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.GsNs/StartServingGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GsNsServer).StartServingGateway(ctx, req.(*GatewayIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _GsNs_StopServingGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GsNsServer).StopServingGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.GsNs/StopServingGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GsNsServer).StopServingGateway(ctx, req.(*GatewayIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _GsNs_HandleUplink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UplinkMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GsNsServer).HandleUplink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.GsNs/HandleUplink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GsNsServer).HandleUplink(ctx, req.(*UplinkMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _GsNs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.v3.GsNs",
	HandlerType: (*GsNsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartServingGateway",
			Handler:    _GsNs_StartServingGateway_Handler,
		},
		{
			MethodName: "StopServingGateway",
			Handler:    _GsNs_StopServingGateway_Handler,
		},
		{
			MethodName: "HandleUplink",
			Handler:    _GsNs_HandleUplink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/ttn/api/networkserver.proto",
}

// Client API for AsNs service

type AsNsClient interface {
	LinkApplication(ctx context.Context, in *ApplicationIdentifiers, opts ...grpc.CallOption) (AsNs_LinkApplicationClient, error)
}

type asNsClient struct {
	cc *grpc.ClientConn
}

func NewAsNsClient(cc *grpc.ClientConn) AsNsClient {
	return &asNsClient{cc}
}

func (c *asNsClient) LinkApplication(ctx context.Context, in *ApplicationIdentifiers, opts ...grpc.CallOption) (AsNs_LinkApplicationClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_AsNs_serviceDesc.Streams[0], c.cc, "/ttn.v3.AsNs/LinkApplication", opts...)
	if err != nil {
		return nil, err
	}
	x := &asNsLinkApplicationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AsNs_LinkApplicationClient interface {
	Recv() (*ApplicationUp, error)
	grpc.ClientStream
}

type asNsLinkApplicationClient struct {
	grpc.ClientStream
}

func (x *asNsLinkApplicationClient) Recv() (*ApplicationUp, error) {
	m := new(ApplicationUp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for AsNs service

type AsNsServer interface {
	LinkApplication(*ApplicationIdentifiers, AsNs_LinkApplicationServer) error
}

func RegisterAsNsServer(s *grpc.Server, srv AsNsServer) {
	s.RegisterService(&_AsNs_serviceDesc, srv)
}

func _AsNs_LinkApplication_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ApplicationIdentifiers)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AsNsServer).LinkApplication(m, &asNsLinkApplicationServer{stream})
}

type AsNs_LinkApplicationServer interface {
	Send(*ApplicationUp) error
	grpc.ServerStream
}

type asNsLinkApplicationServer struct {
	grpc.ServerStream
}

func (x *asNsLinkApplicationServer) Send(m *ApplicationUp) error {
	return x.ServerStream.SendMsg(m)
}

var _AsNs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.v3.AsNs",
	HandlerType: (*AsNsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LinkApplication",
			Handler:       _AsNs_LinkApplication_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/TheThingsNetwork/ttn/api/networkserver.proto",
}

func (m *ApplicationUp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationUp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Up != nil {
		nn1, err := m.Up.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *ApplicationUp_UplinkMessage) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UplinkMessage != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNetworkserver(dAtA, i, uint64(m.UplinkMessage.Size()))
		n2, err := m.UplinkMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func encodeFixed64Networkserver(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Networkserver(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintNetworkserver(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ApplicationUp) Size() (n int) {
	var l int
	_ = l
	if m.Up != nil {
		n += m.Up.Size()
	}
	return n
}

func (m *ApplicationUp_UplinkMessage) Size() (n int) {
	var l int
	_ = l
	if m.UplinkMessage != nil {
		l = m.UplinkMessage.Size()
		n += 1 + l + sovNetworkserver(uint64(l))
	}
	return n
}

func sovNetworkserver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNetworkserver(x uint64) (n int) {
	return sovNetworkserver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ApplicationUp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationUp{`,
		`Up:` + fmt.Sprintf("%v", this.Up) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationUp_UplinkMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationUp_UplinkMessage{`,
		`UplinkMessage:` + strings.Replace(fmt.Sprintf("%v", this.UplinkMessage), "ApplicationUplink", "ApplicationUplink", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringNetworkserver(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ApplicationUp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationUp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationUp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplinkMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApplicationUplink{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Up = &ApplicationUp_UplinkMessage{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworkserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNetworkserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNetworkserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetworkserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetworkserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNetworkserver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNetworkserver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNetworkserver(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNetworkserver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNetworkserver   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/networkserver.proto", fileDescriptorNetworkserver)
}

var fileDescriptorNetworkserver = []byte{
	// 379 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x91, 0xcf, 0x6b, 0xdb, 0x30,
	0x1c, 0xc5, 0xa3, 0x11, 0x72, 0xd0, 0x96, 0x0d, 0x34, 0x32, 0x36, 0x0f, 0xc4, 0xd8, 0x69, 0x3b,
	0x4c, 0x1e, 0x0e, 0x63, 0xa7, 0x1e, 0x12, 0x28, 0x49, 0x4a, 0x9b, 0x43, 0x7e, 0x1c, 0xda, 0x4b,
	0x91, 0x13, 0x45, 0x11, 0x76, 0x24, 0x61, 0xcb, 0x09, 0xb9, 0xf5, 0xcf, 0xeb, 0xb1, 0xc7, 0xd2,
	0x53, 0xeb, 0x53, 0x8f, 0xfd, 0x13, 0x8a, 0xad, 0x98, 0xb8, 0x90, 0xd2, 0x14, 0x7a, 0xb2, 0xbf,
	0xd6, 0xf7, 0xf3, 0xfc, 0xde, 0x13, 0xfc, 0xcf, 0x85, 0x99, 0x27, 0x3e, 0x99, 0xa8, 0x85, 0x3b,
	0x9a, 0xb3, 0xd1, 0x5c, 0x48, 0x1e, 0xf7, 0x99, 0x59, 0xa9, 0x28, 0x70, 0x8d, 0x91, 0x2e, 0xd5,
	0xc2, 0x95, 0x76, 0x8e, 0x59, 0xb4, 0x64, 0x11, 0xd1, 0x91, 0x32, 0x0a, 0xd5, 0x8c, 0x91, 0x64,
	0xd9, 0x74, 0xfe, 0x94, 0x04, 0xb8, 0xe2, 0xca, 0xcd, 0x8f, 0xfd, 0x64, 0x96, 0x4f, 0xf9, 0x90,
	0xbf, 0x59, 0xcc, 0xf9, 0xb7, 0xcf, 0xff, 0xa8, 0xd6, 0xa1, 0x98, 0x50, 0x23, 0x94, 0x7c, 0x0d,
	0x26, 0xa6, 0x4c, 0x1a, 0x31, 0x13, 0x2c, 0x8a, 0x37, 0x98, 0xb7, 0x0f, 0xb6, 0x60, 0x71, 0x4c,
	0x39, 0x2b, 0x98, 0xef, 0x5c, 0x29, 0x1e, 0xb2, 0x6d, 0x0e, 0xb6, 0xd0, 0x66, 0x6d, 0x0f, 0x7f,
	0x9e, 0xc2, 0x7a, 0x6b, 0x6b, 0x6e, 0xac, 0x51, 0x1b, 0x7e, 0x4c, 0x74, 0x28, 0x64, 0x70, 0xbe,
	0x91, 0xf9, 0x0a, 0x7e, 0x80, 0x5f, 0xef, 0xbd, 0x6f, 0xc4, 0xf6, 0x43, 0x9e, 0xac, 0x67, 0x8b,
	0xdd, 0xca, 0xa0, 0x6e, 0x91, 0x13, 0x4b, 0xb4, 0xab, 0xf0, 0x5d, 0xa2, 0xbd, 0x1b, 0x00, 0xab,
	0x9d, 0xb8, 0x1f, 0xa3, 0x1e, 0xfc, 0x3c, 0x34, 0x34, 0x32, 0x43, 0x16, 0x2d, 0x85, 0xe4, 0x1d,
	0x6a, 0xd8, 0x8a, 0xae, 0x91, 0x53, 0x28, 0x6e, 0x3e, 0xf4, 0xb6, 0x69, 0x9d, 0x2f, 0xc4, 0x9a,
	0x26, 0x85, 0x69, 0x72, 0x98, 0x99, 0x46, 0x5d, 0x88, 0x86, 0x46, 0xe9, 0x37, 0x50, 0x3a, 0x80,
	0x1f, 0xba, 0x54, 0x4e, 0x43, 0x66, 0x43, 0xa0, 0x46, 0xa1, 0x31, 0x2e, 0x47, 0x79, 0x0e, 0xf7,
	0x06, 0xb0, 0xda, 0xca, 0xb2, 0x1d, 0xc1, 0x4f, 0xc7, 0x42, 0x06, 0xa5, 0x52, 0x10, 0xde, 0xd1,
	0x54, 0xd9, 0x51, 0x63, 0x67, 0x93, 0x7f, 0x41, 0xbb, 0x73, 0x7d, 0x87, 0x2b, 0x17, 0x29, 0x06,
	0x97, 0x29, 0x06, 0x57, 0x29, 0x06, 0xb7, 0x29, 0x06, 0xf7, 0x29, 0xae, 0x3c, 0xa4, 0x18, 0x9c,
	0xfd, 0x7e, 0xe9, 0xea, 0x75, 0xc0, 0xb3, 0xa7, 0xf6, 0xfd, 0x5a, 0x6e, 0xb6, 0xf9, 0x18, 0x00,
	0x00, 0xff, 0xff, 0x8f, 0x5d, 0x68, 0xfd, 0x0c, 0x03, 0x00, 0x00,
}
