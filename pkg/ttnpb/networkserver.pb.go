// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/networkserver.proto

package ttnpb // import "go.thethings.network/lorawan-stack/pkg/ttnpb"

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import types "github.com/gogo/protobuf/types"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import context "context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GsNs service

type GsNsClient interface {
	HandleUplink(ctx context.Context, in *UplinkMessage, opts ...grpc.CallOption) (*types.Empty, error)
}

type gsNsClient struct {
	cc *grpc.ClientConn
}

func NewGsNsClient(cc *grpc.ClientConn) GsNsClient {
	return &gsNsClient{cc}
}

func (c *gsNsClient) HandleUplink(ctx context.Context, in *UplinkMessage, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GsNs/HandleUplink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GsNs service

type GsNsServer interface {
	HandleUplink(context.Context, *UplinkMessage) (*types.Empty, error)
}

func RegisterGsNsServer(s *grpc.Server, srv GsNsServer) {
	s.RegisterService(&_GsNs_serviceDesc, srv)
}

func _GsNs_HandleUplink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UplinkMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GsNsServer).HandleUplink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GsNs/HandleUplink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GsNsServer).HandleUplink(ctx, req.(*UplinkMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _GsNs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.GsNs",
	HandlerType: (*GsNsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleUplink",
			Handler:    _GsNs_HandleUplink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/networkserver.proto",
}

// Client API for AsNs service

type AsNsClient interface {
	LinkApplication(ctx context.Context, in *ApplicationIdentifiers, opts ...grpc.CallOption) (AsNs_LinkApplicationClient, error)
	DownlinkQueueReplace(ctx context.Context, in *DownlinkQueueRequest, opts ...grpc.CallOption) (*types.Empty, error)
	DownlinkQueuePush(ctx context.Context, in *DownlinkQueueRequest, opts ...grpc.CallOption) (*types.Empty, error)
	DownlinkQueueList(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*ApplicationDownlinks, error)
}

type asNsClient struct {
	cc *grpc.ClientConn
}

func NewAsNsClient(cc *grpc.ClientConn) AsNsClient {
	return &asNsClient{cc}
}

func (c *asNsClient) LinkApplication(ctx context.Context, in *ApplicationIdentifiers, opts ...grpc.CallOption) (AsNs_LinkApplicationClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AsNs_serviceDesc.Streams[0], "/ttn.lorawan.v3.AsNs/LinkApplication", opts...)
	if err != nil {
		return nil, err
	}
	x := &asNsLinkApplicationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AsNs_LinkApplicationClient interface {
	Recv() (*ApplicationUp, error)
	grpc.ClientStream
}

type asNsLinkApplicationClient struct {
	grpc.ClientStream
}

func (x *asNsLinkApplicationClient) Recv() (*ApplicationUp, error) {
	m := new(ApplicationUp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *asNsClient) DownlinkQueueReplace(ctx context.Context, in *DownlinkQueueRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.AsNs/DownlinkQueueReplace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asNsClient) DownlinkQueuePush(ctx context.Context, in *DownlinkQueueRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.AsNs/DownlinkQueuePush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asNsClient) DownlinkQueueList(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*ApplicationDownlinks, error) {
	out := new(ApplicationDownlinks)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.AsNs/DownlinkQueueList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AsNs service

type AsNsServer interface {
	LinkApplication(*ApplicationIdentifiers, AsNs_LinkApplicationServer) error
	DownlinkQueueReplace(context.Context, *DownlinkQueueRequest) (*types.Empty, error)
	DownlinkQueuePush(context.Context, *DownlinkQueueRequest) (*types.Empty, error)
	DownlinkQueueList(context.Context, *EndDeviceIdentifiers) (*ApplicationDownlinks, error)
}

func RegisterAsNsServer(s *grpc.Server, srv AsNsServer) {
	s.RegisterService(&_AsNs_serviceDesc, srv)
}

func _AsNs_LinkApplication_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ApplicationIdentifiers)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AsNsServer).LinkApplication(m, &asNsLinkApplicationServer{stream})
}

type AsNs_LinkApplicationServer interface {
	Send(*ApplicationUp) error
	grpc.ServerStream
}

type asNsLinkApplicationServer struct {
	grpc.ServerStream
}

func (x *asNsLinkApplicationServer) Send(m *ApplicationUp) error {
	return x.ServerStream.SendMsg(m)
}

func _AsNs_DownlinkQueueReplace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownlinkQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsNsServer).DownlinkQueueReplace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.AsNs/DownlinkQueueReplace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsNsServer).DownlinkQueueReplace(ctx, req.(*DownlinkQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsNs_DownlinkQueuePush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownlinkQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsNsServer).DownlinkQueuePush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.AsNs/DownlinkQueuePush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsNsServer).DownlinkQueuePush(ctx, req.(*DownlinkQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsNs_DownlinkQueueList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDeviceIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsNsServer).DownlinkQueueList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.AsNs/DownlinkQueueList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsNsServer).DownlinkQueueList(ctx, req.(*EndDeviceIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _AsNs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.AsNs",
	HandlerType: (*AsNsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DownlinkQueueReplace",
			Handler:    _AsNs_DownlinkQueueReplace_Handler,
		},
		{
			MethodName: "DownlinkQueuePush",
			Handler:    _AsNs_DownlinkQueuePush_Handler,
		},
		{
			MethodName: "DownlinkQueueList",
			Handler:    _AsNs_DownlinkQueueList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LinkApplication",
			Handler:       _AsNs_LinkApplication_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "lorawan-stack/api/networkserver.proto",
}

// Client API for NsDeviceRegistry service

type NsDeviceRegistryClient interface {
	// GetDevice returns the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	Get(ctx context.Context, in *GetEndDeviceRequest, opts ...grpc.CallOption) (*EndDevice, error)
	// SetDevice creates or updates the device.
	Set(ctx context.Context, in *SetDeviceRequest, opts ...grpc.CallOption) (*EndDevice, error)
	// DeleteDevice deletes the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	Delete(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
}

type nsDeviceRegistryClient struct {
	cc *grpc.ClientConn
}

func NewNsDeviceRegistryClient(cc *grpc.ClientConn) NsDeviceRegistryClient {
	return &nsDeviceRegistryClient{cc}
}

func (c *nsDeviceRegistryClient) Get(ctx context.Context, in *GetEndDeviceRequest, opts ...grpc.CallOption) (*EndDevice, error) {
	out := new(EndDevice)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.NsDeviceRegistry/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nsDeviceRegistryClient) Set(ctx context.Context, in *SetDeviceRequest, opts ...grpc.CallOption) (*EndDevice, error) {
	out := new(EndDevice)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.NsDeviceRegistry/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nsDeviceRegistryClient) Delete(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.NsDeviceRegistry/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NsDeviceRegistry service

type NsDeviceRegistryServer interface {
	// GetDevice returns the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	Get(context.Context, *GetEndDeviceRequest) (*EndDevice, error)
	// SetDevice creates or updates the device.
	Set(context.Context, *SetDeviceRequest) (*EndDevice, error)
	// DeleteDevice deletes the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	Delete(context.Context, *EndDeviceIdentifiers) (*types.Empty, error)
}

func RegisterNsDeviceRegistryServer(s *grpc.Server, srv NsDeviceRegistryServer) {
	s.RegisterService(&_NsDeviceRegistry_serviceDesc, srv)
}

func _NsDeviceRegistry_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NsDeviceRegistryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.NsDeviceRegistry/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NsDeviceRegistryServer).Get(ctx, req.(*GetEndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NsDeviceRegistry_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NsDeviceRegistryServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.NsDeviceRegistry/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NsDeviceRegistryServer).Set(ctx, req.(*SetDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NsDeviceRegistry_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDeviceIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NsDeviceRegistryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.NsDeviceRegistry/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NsDeviceRegistryServer).Delete(ctx, req.(*EndDeviceIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _NsDeviceRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.NsDeviceRegistry",
	HandlerType: (*NsDeviceRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _NsDeviceRegistry_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _NsDeviceRegistry_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _NsDeviceRegistry_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/networkserver.proto",
}

func init() {
	proto.RegisterFile("lorawan-stack/api/networkserver.proto", fileDescriptor_networkserver_22deb8101de6dff3)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/networkserver.proto", fileDescriptor_networkserver_22deb8101de6dff3)
}

var fileDescriptor_networkserver_22deb8101de6dff3 = []byte{
	// 632 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x3f, 0x48, 0x1c, 0x41,
	0x14, 0xc6, 0x67, 0x54, 0x2c, 0x96, 0x90, 0x3f, 0x4b, 0x08, 0xe4, 0x12, 0x1f, 0x72, 0x9a, 0x14,
	0x12, 0x77, 0x83, 0x76, 0x76, 0x86, 0x3b, 0x2e, 0x82, 0x4a, 0xd4, 0xd8, 0x98, 0x42, 0xf6, 0xee,
	0x9e, 0x7b, 0xc3, 0xad, 0x33, 0x9b, 0x9d, 0x39, 0x45, 0x82, 0x20, 0xa9, 0x2c, 0x03, 0x21, 0x90,
	0x32, 0xa4, 0x12, 0xd2, 0x88, 0x95, 0xa5, 0xa5, 0xa5, 0x90, 0xc6, 0x74, 0xee, 0x6c, 0x0a, 0x8b,
	0x14, 0x76, 0xb1, 0x0c, 0xb7, 0xb7, 0xe7, 0x9d, 0xb7, 0x39, 0x51, 0x92, 0x6e, 0x66, 0xde, 0xf7,
	0xbe, 0xf7, 0x7b, 0xb3, 0x6f, 0xc7, 0x78, 0xe2, 0x89, 0xc0, 0x59, 0x77, 0xf8, 0xa8, 0x54, 0x4e,
	0xa9, 0x6a, 0x3b, 0x3e, 0xb3, 0x39, 0xaa, 0x75, 0x11, 0x54, 0x25, 0x06, 0x6b, 0x18, 0x58, 0x7e,
	0x20, 0x94, 0x30, 0x6f, 0x2b, 0xc5, 0xad, 0x44, 0x6a, 0xad, 0x8d, 0x67, 0x46, 0x5d, 0xa6, 0x2a,
	0xb5, 0xa2, 0x55, 0x12, 0xab, 0xb6, 0x2b, 0x5c, 0x61, 0xc7, 0xb2, 0x62, 0x6d, 0x25, 0xde, 0xc5,
	0x9b, 0x78, 0xd5, 0x48, 0xcf, 0x3c, 0x76, 0x85, 0x70, 0x3d, 0x8c, 0xed, 0x1d, 0xce, 0x85, 0x72,
	0x14, 0x13, 0x5c, 0x26, 0xd1, 0x47, 0x49, 0xf4, 0xc2, 0x03, 0x57, 0x7d, 0xb5, 0x91, 0x04, 0xb3,
	0x69, 0x40, 0xe4, 0xe5, 0xe5, 0x32, 0xae, 0xb1, 0x12, 0x26, 0x9a, 0xa1, 0xb4, 0x86, 0x95, 0x91,
	0x2b, 0xb6, 0xc2, 0x30, 0x68, 0x56, 0x19, 0x4c, 0x8b, 0x56, 0x51, 0x4a, 0xc7, 0xc5, 0x44, 0x31,
	0x36, 0x63, 0xf4, 0x15, 0xe4, 0xac, 0x34, 0xf3, 0xc6, 0xad, 0x97, 0x0e, 0x2f, 0x7b, 0xb8, 0xe8,
	0x7b, 0x8c, 0x57, 0xcd, 0x01, 0xeb, 0x72, 0xf7, 0x56, 0xe3, 0x7c, 0xa6, 0x91, 0x9d, 0x79, 0x60,
	0x35, 0xf8, 0xad, 0x26, 0xbf, 0x95, 0xaf, 0xf3, 0x8f, 0xfd, 0xea, 0x31, 0xfa, 0x26, 0xeb, 0x7e,
	0x4b, 0xc6, 0x9d, 0x69, 0xc6, 0xab, 0x93, 0xbe, 0xef, 0xb1, 0x52, 0xdc, 0xb9, 0xf9, 0xb4, 0xd3,
	0xb2, 0x2d, 0x38, 0xd5, 0x42, 0xcf, 0x0c, 0x5c, 0xa1, 0x5b, 0xf4, 0x9f, 0x53, 0xf3, 0xb5, 0x71,
	0x3f, 0x27, 0xd6, 0x79, 0x9d, 0x67, 0xae, 0x86, 0x35, 0x9c, 0x47, 0xdf, 0x73, 0x4a, 0x68, 0x0e,
	0x77, 0x26, 0x76, 0xa8, 0xde, 0xd6, 0x50, 0xaa, 0x6e, 0xe8, 0xe6, 0x9c, 0x71, 0xef, 0x92, 0xfe,
	0x55, 0x4d, 0x56, 0xfe, 0xd1, 0x72, 0xb9, 0xc3, 0x72, 0x9a, 0x49, 0x95, 0xb6, 0xcc, 0xf3, 0x72,
	0x2e, 0xfe, 0xb2, 0xed, 0x97, 0x30, 0x7c, 0xc5, 0x25, 0x34, 0x3d, 0xe5, 0xd8, 0x8f, 0x3e, 0xe3,
	0xee, 0xac, 0x6c, 0x64, 0xcf, 0xa3, 0xcb, 0xa4, 0x0a, 0x36, 0xcc, 0x3d, 0x6a, 0xf4, 0x16, 0x50,
	0x99, 0x43, 0x9d, 0x16, 0x05, 0x54, 0x17, 0xb5, 0x9a, 0xe8, 0x0f, 0xbb, 0xd2, 0x64, 0xab, 0xef,
	0xbf, 0xff, 0xfc, 0xd8, 0x83, 0x66, 0xc9, 0xe6, 0xd2, 0x76, 0x5a, 0xe5, 0xa5, 0xfd, 0xae, 0x35,
	0x8d, 0xcb, 0xac, 0x2c, 0xad, 0xb6, 0xe0, 0x5f, 0xf6, 0x9b, 0x76, 0x43, 0x9a, 0xce, 0xbb, 0x58,
	0x6e, 0x9a, 0xbf, 0xa9, 0xd1, 0xbb, 0x80, 0xca, 0x1c, 0xec, 0xe4, 0x59, 0x40, 0x75, 0x6d, 0xe2,
	0x3d, 0x1a, 0x23, 0x7f, 0xa3, 0x99, 0x37, 0x69, 0xe6, 0xe4, 0xef, 0xb9, 0x11, 0x6f, 0x5b, 0x4e,
	0x8b, 0x75, 0x82, 0x8e, 0x2c, 0x4d, 0x65, 0x73, 0xff, 0xa3, 0xc2, 0x04, 0x1d, 0x31, 0x3f, 0x51,
	0xa3, 0x3f, 0x87, 0x1e, 0x2a, 0xbc, 0xe6, 0x68, 0x74, 0x99, 0xb6, 0xec, 0x4c, 0xdc, 0x7c, 0x61,
	0x24, 0x9f, 0x26, 0xbb, 0x61, 0xc3, 0xf5, 0xb3, 0x17, 0x5f, 0xe9, 0x61, 0x08, 0xf4, 0x28, 0x04,
	0x7a, 0x1c, 0x02, 0x39, 0x09, 0x81, 0x9c, 0x86, 0x40, 0xce, 0x42, 0x20, 0xe7, 0x21, 0xd0, 0x2d,
	0x0d, 0x74, 0x5b, 0x03, 0xd9, 0xd1, 0x40, 0x77, 0x35, 0x90, 0x7d, 0x0d, 0xe4, 0x40, 0x03, 0x39,
	0xd4, 0x40, 0x8f, 0x34, 0xd0, 0x63, 0x0d, 0xe4, 0x44, 0x03, 0x3d, 0xd5, 0x40, 0xce, 0x34, 0xd0,
	0x73, 0x0d, 0x64, 0x2b, 0x02, 0xb2, 0x1d, 0x01, 0xfd, 0x10, 0x01, 0xf9, 0x1c, 0x01, 0xfd, 0x12,
	0x01, 0xd9, 0x89, 0x80, 0xec, 0x46, 0x40, 0xf7, 0x23, 0xa0, 0x07, 0x11, 0xd0, 0xa5, 0x67, 0xae,
	0xb0, 0x54, 0x05, 0x55, 0x85, 0x71, 0x57, 0x5a, 0xc9, 0xbb, 0x6c, 0x5f, 0x7e, 0xc7, 0xfc, 0xaa,
	0x6b, 0x2b, 0xc5, 0xfd, 0x62, 0xb1, 0x3f, 0xbe, 0x83, 0xf1, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x7e, 0x3d, 0xd3, 0x21, 0xd3, 0x05, 0x00, 0x00,
}
