// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: go.thethings.network/lorawan-stack/api/networkserver.proto

package ttnpb // import "go.thethings.network/lorawan-stack/pkg/ttnpb"

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import types "github.com/gogo/protobuf/types"

import context "context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GsNs service

type GsNsClient interface {
	HandleUplink(ctx context.Context, in *UplinkMessage, opts ...grpc.CallOption) (*types.Empty, error)
}

type gsNsClient struct {
	cc *grpc.ClientConn
}

func NewGsNsClient(cc *grpc.ClientConn) GsNsClient {
	return &gsNsClient{cc}
}

func (c *gsNsClient) HandleUplink(ctx context.Context, in *UplinkMessage, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GsNs/HandleUplink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GsNs service

type GsNsServer interface {
	HandleUplink(context.Context, *UplinkMessage) (*types.Empty, error)
}

func RegisterGsNsServer(s *grpc.Server, srv GsNsServer) {
	s.RegisterService(&_GsNs_serviceDesc, srv)
}

func _GsNs_HandleUplink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UplinkMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GsNsServer).HandleUplink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GsNs/HandleUplink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GsNsServer).HandleUplink(ctx, req.(*UplinkMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _GsNs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.GsNs",
	HandlerType: (*GsNsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleUplink",
			Handler:    _GsNs_HandleUplink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.thethings.network/lorawan-stack/api/networkserver.proto",
}

// Client API for AsNs service

type AsNsClient interface {
	LinkApplication(ctx context.Context, in *ApplicationIdentifiers, opts ...grpc.CallOption) (AsNs_LinkApplicationClient, error)
}

type asNsClient struct {
	cc *grpc.ClientConn
}

func NewAsNsClient(cc *grpc.ClientConn) AsNsClient {
	return &asNsClient{cc}
}

func (c *asNsClient) LinkApplication(ctx context.Context, in *ApplicationIdentifiers, opts ...grpc.CallOption) (AsNs_LinkApplicationClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AsNs_serviceDesc.Streams[0], "/ttn.lorawan.v3.AsNs/LinkApplication", opts...)
	if err != nil {
		return nil, err
	}
	x := &asNsLinkApplicationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AsNs_LinkApplicationClient interface {
	Recv() (*ApplicationUp, error)
	grpc.ClientStream
}

type asNsLinkApplicationClient struct {
	grpc.ClientStream
}

func (x *asNsLinkApplicationClient) Recv() (*ApplicationUp, error) {
	m := new(ApplicationUp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for AsNs service

type AsNsServer interface {
	LinkApplication(*ApplicationIdentifiers, AsNs_LinkApplicationServer) error
}

func RegisterAsNsServer(s *grpc.Server, srv AsNsServer) {
	s.RegisterService(&_AsNs_serviceDesc, srv)
}

func _AsNs_LinkApplication_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ApplicationIdentifiers)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AsNsServer).LinkApplication(m, &asNsLinkApplicationServer{stream})
}

type AsNs_LinkApplicationServer interface {
	Send(*ApplicationUp) error
	grpc.ServerStream
}

type asNsLinkApplicationServer struct {
	grpc.ServerStream
}

func (x *asNsLinkApplicationServer) Send(m *ApplicationUp) error {
	return x.ServerStream.SendMsg(m)
}

var _AsNs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.AsNs",
	HandlerType: (*AsNsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LinkApplication",
			Handler:       _AsNs_LinkApplication_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "go.thethings.network/lorawan-stack/api/networkserver.proto",
}

func init() {
	proto.RegisterFile("go.thethings.network/lorawan-stack/api/networkserver.proto", fileDescriptor_networkserver_e6f868b011a9ef6c)
}
func init() {
	golang_proto.RegisterFile("go.thethings.network/lorawan-stack/api/networkserver.proto", fileDescriptor_networkserver_e6f868b011a9ef6c)
}

var fileDescriptor_networkserver_e6f868b011a9ef6c = []byte{
	// 328 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xb1, 0x4a, 0x33, 0x41,
	0x14, 0x85, 0x33, 0x10, 0xfe, 0x62, 0xf9, 0x51, 0xd8, 0xc2, 0x22, 0x92, 0x5b, 0x5a, 0x99, 0x59,
	0x49, 0x10, 0xc4, 0x2e, 0x42, 0x50, 0xc1, 0xd8, 0xa5, 0x49, 0x21, 0xcc, 0x26, 0x93, 0xc9, 0xb0,
	0x9b, 0x99, 0x61, 0xe6, 0x26, 0xc1, 0xce, 0x47, 0xf0, 0x31, 0x7c, 0x0c, 0x4b, 0x4b, 0x4b, 0xcb,
	0x64, 0xd2, 0x58, 0x5a, 0x5a, 0x4a, 0x76, 0x37, 0xac, 0x5a, 0xc8, 0x76, 0x73, 0xef, 0x39, 0xe7,
	0x63, 0xee, 0x09, 0xce, 0x85, 0xa6, 0x38, 0xe5, 0x38, 0x95, 0x4a, 0x38, 0xaa, 0x38, 0x2e, 0xb5,
	0x4d, 0xa2, 0x54, 0x5b, 0xb6, 0x64, 0xaa, 0xe5, 0x90, 0x8d, 0x92, 0x88, 0x19, 0x19, 0x15, 0x8a,
	0xe3, 0x76, 0xc1, 0x2d, 0x35, 0x56, 0xa3, 0x0e, 0xf7, 0x10, 0x15, 0x2d, 0xac, 0x74, 0xd1, 0x69,
	0x9c, 0x55, 0x64, 0x31, 0x63, 0x52, 0x39, 0x62, 0x28, 0xb5, 0xca, 0x49, 0x95, 0x93, 0x72, 0xcc,
	0x15, 0xca, 0x89, 0xe4, 0xd6, 0x15, 0xc9, 0xd3, 0x8a, 0xc9, 0x19, 0x77, 0x8e, 0x09, 0xbe, 0x8b,
	0xb5, 0x84, 0xc4, 0xe9, 0x3c, 0xa6, 0x23, 0x3d, 0x8b, 0x84, 0x16, 0x3a, 0xca, 0xd6, 0xf1, 0x7c,
	0x92, 0x4d, 0xd9, 0x90, 0xbd, 0x0a, 0xfb, 0xa1, 0xd0, 0x5a, 0xa4, 0xbc, 0x74, 0xf1, 0x99, 0xc1,
	0xfb, 0x5c, 0x6c, 0xf7, 0x83, 0xfa, 0xa5, 0xbb, 0x75, 0x61, 0x2f, 0xf8, 0x7f, 0xc5, 0xd4, 0x38,
	0xe5, 0x03, 0x93, 0x4a, 0x95, 0x84, 0x4d, 0xfa, 0xb3, 0x1f, 0x9a, 0xef, 0xfb, 0xf9, 0x4f, 0x1a,
	0x07, 0x34, 0x87, 0xd2, 0x1d, 0x94, 0xf6, 0xb6, 0xd0, 0x76, 0x1c, 0xd4, 0xbb, 0x5b, 0xdc, 0x30,
	0xd8, 0xbf, 0x91, 0x2a, 0xe9, 0x96, 0x65, 0x85, 0x47, 0xbf, 0x89, 0xdf, 0xc4, 0xeb, 0xb2, 0x9a,
	0x46, 0xf3, 0x0f, 0xdf, 0xc0, 0x9c, 0x90, 0x8b, 0xbb, 0xb7, 0x35, 0xd4, 0x56, 0x6b, 0x20, 0x9f,
	0x6b, 0x20, 0x0f, 0x1e, 0xc8, 0x93, 0x07, 0xf2, 0xe2, 0x81, 0xbc, 0x7a, 0x20, 0x2b, 0x0f, 0xe4,
	0xdd, 0x43, 0xed, 0xc3, 0x03, 0x79, 0xdc, 0x40, 0xed, 0x79, 0x03, 0x64, 0x78, 0x5c, 0xa1, 0x67,
	0x93, 0x88, 0x08, 0x51, 0x99, 0x38, 0xfe, 0x97, 0xdd, 0xd4, 0xf9, 0x0a, 0x00, 0x00, 0xff, 0xff,
	0x52, 0x61, 0xa1, 0xb1, 0x5e, 0x02, 0x00, 0x00,
}
