// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/search_services.proto

package ttnpb // import "go.thethings.network/lorawan-stack/pkg/ttnpb"

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import types "github.com/gogo/protobuf/types"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import context "context"
import grpc "google.golang.org/grpc"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// This message is used for finding entities in the EntityRegistrySearch service.
type SearchEntitiesRequest struct {
	// Find entities where the ID contains this substring.
	IDContains string `protobuf:"bytes,1,opt,name=id_contains,json=idContains,proto3" json:"id_contains,omitempty"`
	// Find entities where the name contains this substring.
	NameContains string `protobuf:"bytes,2,opt,name=name_contains,json=nameContains,proto3" json:"name_contains,omitempty"`
	// Find entities where the description contains this substring.
	DescriptionContains string `protobuf:"bytes,3,opt,name=description_contains,json=descriptionContains,proto3" json:"description_contains,omitempty"`
	// Find entities where the given attributes contain these substrings.
	AttributesContain    map[string]string `protobuf:"bytes,4,rep,name=attributes_contain,json=attributesContain" json:"attributes_contain,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FieldMask            types.FieldMask   `protobuf:"bytes,6,opt,name=field_mask,json=fieldMask" json:"field_mask"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SearchEntitiesRequest) Reset()      { *m = SearchEntitiesRequest{} }
func (*SearchEntitiesRequest) ProtoMessage() {}
func (*SearchEntitiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_search_services_d697d38893b0cc18, []int{0}
}
func (m *SearchEntitiesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchEntitiesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchEntitiesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SearchEntitiesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchEntitiesRequest.Merge(dst, src)
}
func (m *SearchEntitiesRequest) XXX_Size() int {
	return m.Size()
}
func (m *SearchEntitiesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchEntitiesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchEntitiesRequest proto.InternalMessageInfo

func (m *SearchEntitiesRequest) GetIDContains() string {
	if m != nil {
		return m.IDContains
	}
	return ""
}

func (m *SearchEntitiesRequest) GetNameContains() string {
	if m != nil {
		return m.NameContains
	}
	return ""
}

func (m *SearchEntitiesRequest) GetDescriptionContains() string {
	if m != nil {
		return m.DescriptionContains
	}
	return ""
}

func (m *SearchEntitiesRequest) GetAttributesContain() map[string]string {
	if m != nil {
		return m.AttributesContain
	}
	return nil
}

func (m *SearchEntitiesRequest) GetFieldMask() types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return types.FieldMask{}
}

type SearchEndDevicesRequest struct {
	ApplicationIdentifiers `protobuf:"bytes,1,opt,name=application_ids,json=applicationIds,embedded=application_ids" json:"application_ids"`
	// Find end devices where the ID contains this substring.
	IDContains string `protobuf:"bytes,2,opt,name=id_contains,json=idContains,proto3" json:"id_contains,omitempty"`
	// Find end devices where the name contains this substring.
	NameContains string `protobuf:"bytes,3,opt,name=name_contains,json=nameContains,proto3" json:"name_contains,omitempty"`
	// Find end devices where the description contains this substring.
	DescriptionContains string `protobuf:"bytes,4,opt,name=description_contains,json=descriptionContains,proto3" json:"description_contains,omitempty"`
	// Find end devices where the given attributes contain these substrings.
	AttributesContain map[string]string `protobuf:"bytes,5,rep,name=attributes_contain,json=attributesContain" json:"attributes_contain,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Find end devices where the (hexadecimal) DevEUI contains this substring.
	DevEUIContains string `protobuf:"bytes,6,opt,name=dev_eui_contains,json=devEuiContains,proto3" json:"dev_eui_contains,omitempty"`
	// Find end devices where the (hexadecimal) JoinEUI contains this substring.
	JoinEUIContains string `protobuf:"bytes,7,opt,name=join_eui_contains,json=joinEuiContains,proto3" json:"join_eui_contains,omitempty"`
	// Find end devices where the (hexadecimal) DevAddr contains this substring.
	DevAddrContains      string          `protobuf:"bytes,8,opt,name=dev_addr_contains,json=devAddrContains,proto3" json:"dev_addr_contains,omitempty"`
	FieldMask            types.FieldMask `protobuf:"bytes,9,opt,name=field_mask,json=fieldMask" json:"field_mask"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SearchEndDevicesRequest) Reset()      { *m = SearchEndDevicesRequest{} }
func (*SearchEndDevicesRequest) ProtoMessage() {}
func (*SearchEndDevicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_search_services_d697d38893b0cc18, []int{1}
}
func (m *SearchEndDevicesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchEndDevicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchEndDevicesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SearchEndDevicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchEndDevicesRequest.Merge(dst, src)
}
func (m *SearchEndDevicesRequest) XXX_Size() int {
	return m.Size()
}
func (m *SearchEndDevicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchEndDevicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchEndDevicesRequest proto.InternalMessageInfo

func (m *SearchEndDevicesRequest) GetIDContains() string {
	if m != nil {
		return m.IDContains
	}
	return ""
}

func (m *SearchEndDevicesRequest) GetNameContains() string {
	if m != nil {
		return m.NameContains
	}
	return ""
}

func (m *SearchEndDevicesRequest) GetDescriptionContains() string {
	if m != nil {
		return m.DescriptionContains
	}
	return ""
}

func (m *SearchEndDevicesRequest) GetAttributesContain() map[string]string {
	if m != nil {
		return m.AttributesContain
	}
	return nil
}

func (m *SearchEndDevicesRequest) GetDevEUIContains() string {
	if m != nil {
		return m.DevEUIContains
	}
	return ""
}

func (m *SearchEndDevicesRequest) GetJoinEUIContains() string {
	if m != nil {
		return m.JoinEUIContains
	}
	return ""
}

func (m *SearchEndDevicesRequest) GetDevAddrContains() string {
	if m != nil {
		return m.DevAddrContains
	}
	return ""
}

func (m *SearchEndDevicesRequest) GetFieldMask() types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return types.FieldMask{}
}

func init() {
	proto.RegisterType((*SearchEntitiesRequest)(nil), "ttn.lorawan.v3.SearchEntitiesRequest")
	golang_proto.RegisterType((*SearchEntitiesRequest)(nil), "ttn.lorawan.v3.SearchEntitiesRequest")
	proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.SearchEntitiesRequest.AttributesContainEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.SearchEntitiesRequest.AttributesContainEntry")
	proto.RegisterType((*SearchEndDevicesRequest)(nil), "ttn.lorawan.v3.SearchEndDevicesRequest")
	golang_proto.RegisterType((*SearchEndDevicesRequest)(nil), "ttn.lorawan.v3.SearchEndDevicesRequest")
	proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.SearchEndDevicesRequest.AttributesContainEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.SearchEndDevicesRequest.AttributesContainEntry")
}
func (this *SearchEntitiesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchEntitiesRequest)
	if !ok {
		that2, ok := that.(SearchEntitiesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IDContains != that1.IDContains {
		return false
	}
	if this.NameContains != that1.NameContains {
		return false
	}
	if this.DescriptionContains != that1.DescriptionContains {
		return false
	}
	if len(this.AttributesContain) != len(that1.AttributesContain) {
		return false
	}
	for i := range this.AttributesContain {
		if this.AttributesContain[i] != that1.AttributesContain[i] {
			return false
		}
	}
	if !this.FieldMask.Equal(&that1.FieldMask) {
		return false
	}
	return true
}
func (this *SearchEndDevicesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchEndDevicesRequest)
	if !ok {
		that2, ok := that.(SearchEndDevicesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationIdentifiers.Equal(&that1.ApplicationIdentifiers) {
		return false
	}
	if this.IDContains != that1.IDContains {
		return false
	}
	if this.NameContains != that1.NameContains {
		return false
	}
	if this.DescriptionContains != that1.DescriptionContains {
		return false
	}
	if len(this.AttributesContain) != len(that1.AttributesContain) {
		return false
	}
	for i := range this.AttributesContain {
		if this.AttributesContain[i] != that1.AttributesContain[i] {
			return false
		}
	}
	if this.DevEUIContains != that1.DevEUIContains {
		return false
	}
	if this.JoinEUIContains != that1.JoinEUIContains {
		return false
	}
	if this.DevAddrContains != that1.DevAddrContains {
		return false
	}
	if !this.FieldMask.Equal(&that1.FieldMask) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EntityRegistrySearch service

type EntityRegistrySearchClient interface {
	SearchApplications(ctx context.Context, in *SearchEntitiesRequest, opts ...grpc.CallOption) (*Applications, error)
	SearchClients(ctx context.Context, in *SearchEntitiesRequest, opts ...grpc.CallOption) (*Clients, error)
	SearchGateways(ctx context.Context, in *SearchEntitiesRequest, opts ...grpc.CallOption) (*Gateways, error)
	SearchOrganizations(ctx context.Context, in *SearchEntitiesRequest, opts ...grpc.CallOption) (*Organizations, error)
	SearchUsers(ctx context.Context, in *SearchEntitiesRequest, opts ...grpc.CallOption) (*Users, error)
}

type entityRegistrySearchClient struct {
	cc *grpc.ClientConn
}

func NewEntityRegistrySearchClient(cc *grpc.ClientConn) EntityRegistrySearchClient {
	return &entityRegistrySearchClient{cc}
}

func (c *entityRegistrySearchClient) SearchApplications(ctx context.Context, in *SearchEntitiesRequest, opts ...grpc.CallOption) (*Applications, error) {
	out := new(Applications)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EntityRegistrySearch/SearchApplications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityRegistrySearchClient) SearchClients(ctx context.Context, in *SearchEntitiesRequest, opts ...grpc.CallOption) (*Clients, error) {
	out := new(Clients)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EntityRegistrySearch/SearchClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityRegistrySearchClient) SearchGateways(ctx context.Context, in *SearchEntitiesRequest, opts ...grpc.CallOption) (*Gateways, error) {
	out := new(Gateways)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EntityRegistrySearch/SearchGateways", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityRegistrySearchClient) SearchOrganizations(ctx context.Context, in *SearchEntitiesRequest, opts ...grpc.CallOption) (*Organizations, error) {
	out := new(Organizations)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EntityRegistrySearch/SearchOrganizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityRegistrySearchClient) SearchUsers(ctx context.Context, in *SearchEntitiesRequest, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EntityRegistrySearch/SearchUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EntityRegistrySearch service

type EntityRegistrySearchServer interface {
	SearchApplications(context.Context, *SearchEntitiesRequest) (*Applications, error)
	SearchClients(context.Context, *SearchEntitiesRequest) (*Clients, error)
	SearchGateways(context.Context, *SearchEntitiesRequest) (*Gateways, error)
	SearchOrganizations(context.Context, *SearchEntitiesRequest) (*Organizations, error)
	SearchUsers(context.Context, *SearchEntitiesRequest) (*Users, error)
}

func RegisterEntityRegistrySearchServer(s *grpc.Server, srv EntityRegistrySearchServer) {
	s.RegisterService(&_EntityRegistrySearch_serviceDesc, srv)
}

func _EntityRegistrySearch_SearchApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityRegistrySearchServer).SearchApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EntityRegistrySearch/SearchApplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityRegistrySearchServer).SearchApplications(ctx, req.(*SearchEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityRegistrySearch_SearchClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityRegistrySearchServer).SearchClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EntityRegistrySearch/SearchClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityRegistrySearchServer).SearchClients(ctx, req.(*SearchEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityRegistrySearch_SearchGateways_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityRegistrySearchServer).SearchGateways(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EntityRegistrySearch/SearchGateways",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityRegistrySearchServer).SearchGateways(ctx, req.(*SearchEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityRegistrySearch_SearchOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityRegistrySearchServer).SearchOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EntityRegistrySearch/SearchOrganizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityRegistrySearchServer).SearchOrganizations(ctx, req.(*SearchEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityRegistrySearch_SearchUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityRegistrySearchServer).SearchUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EntityRegistrySearch/SearchUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityRegistrySearchServer).SearchUsers(ctx, req.(*SearchEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EntityRegistrySearch_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.EntityRegistrySearch",
	HandlerType: (*EntityRegistrySearchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchApplications",
			Handler:    _EntityRegistrySearch_SearchApplications_Handler,
		},
		{
			MethodName: "SearchClients",
			Handler:    _EntityRegistrySearch_SearchClients_Handler,
		},
		{
			MethodName: "SearchGateways",
			Handler:    _EntityRegistrySearch_SearchGateways_Handler,
		},
		{
			MethodName: "SearchOrganizations",
			Handler:    _EntityRegistrySearch_SearchOrganizations_Handler,
		},
		{
			MethodName: "SearchUsers",
			Handler:    _EntityRegistrySearch_SearchUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/search_services.proto",
}

// Client API for EndDeviceRegistrySearch service

type EndDeviceRegistrySearchClient interface {
	SearchEndDevices(ctx context.Context, in *SearchEndDevicesRequest, opts ...grpc.CallOption) (*EndDevices, error)
}

type endDeviceRegistrySearchClient struct {
	cc *grpc.ClientConn
}

func NewEndDeviceRegistrySearchClient(cc *grpc.ClientConn) EndDeviceRegistrySearchClient {
	return &endDeviceRegistrySearchClient{cc}
}

func (c *endDeviceRegistrySearchClient) SearchEndDevices(ctx context.Context, in *SearchEndDevicesRequest, opts ...grpc.CallOption) (*EndDevices, error) {
	out := new(EndDevices)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EndDeviceRegistrySearch/SearchEndDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EndDeviceRegistrySearch service

type EndDeviceRegistrySearchServer interface {
	SearchEndDevices(context.Context, *SearchEndDevicesRequest) (*EndDevices, error)
}

func RegisterEndDeviceRegistrySearchServer(s *grpc.Server, srv EndDeviceRegistrySearchServer) {
	s.RegisterService(&_EndDeviceRegistrySearch_serviceDesc, srv)
}

func _EndDeviceRegistrySearch_SearchEndDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchEndDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndDeviceRegistrySearchServer).SearchEndDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EndDeviceRegistrySearch/SearchEndDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndDeviceRegistrySearchServer).SearchEndDevices(ctx, req.(*SearchEndDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EndDeviceRegistrySearch_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.EndDeviceRegistrySearch",
	HandlerType: (*EndDeviceRegistrySearchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchEndDevices",
			Handler:    _EndDeviceRegistrySearch_SearchEndDevices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/search_services.proto",
}

func (m *SearchEntitiesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchEntitiesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.IDContains) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSearchServices(dAtA, i, uint64(len(m.IDContains)))
		i += copy(dAtA[i:], m.IDContains)
	}
	if len(m.NameContains) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSearchServices(dAtA, i, uint64(len(m.NameContains)))
		i += copy(dAtA[i:], m.NameContains)
	}
	if len(m.DescriptionContains) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSearchServices(dAtA, i, uint64(len(m.DescriptionContains)))
		i += copy(dAtA[i:], m.DescriptionContains)
	}
	if len(m.AttributesContain) > 0 {
		for k, _ := range m.AttributesContain {
			dAtA[i] = 0x22
			i++
			v := m.AttributesContain[k]
			mapSize := 1 + len(k) + sovSearchServices(uint64(len(k))) + 1 + len(v) + sovSearchServices(uint64(len(v)))
			i = encodeVarintSearchServices(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintSearchServices(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintSearchServices(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	dAtA[i] = 0x32
	i++
	i = encodeVarintSearchServices(dAtA, i, uint64(m.FieldMask.Size()))
	n1, err := m.FieldMask.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func (m *SearchEndDevicesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchEndDevicesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintSearchServices(dAtA, i, uint64(m.ApplicationIdentifiers.Size()))
	n2, err := m.ApplicationIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.IDContains) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSearchServices(dAtA, i, uint64(len(m.IDContains)))
		i += copy(dAtA[i:], m.IDContains)
	}
	if len(m.NameContains) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSearchServices(dAtA, i, uint64(len(m.NameContains)))
		i += copy(dAtA[i:], m.NameContains)
	}
	if len(m.DescriptionContains) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSearchServices(dAtA, i, uint64(len(m.DescriptionContains)))
		i += copy(dAtA[i:], m.DescriptionContains)
	}
	if len(m.AttributesContain) > 0 {
		for k, _ := range m.AttributesContain {
			dAtA[i] = 0x2a
			i++
			v := m.AttributesContain[k]
			mapSize := 1 + len(k) + sovSearchServices(uint64(len(k))) + 1 + len(v) + sovSearchServices(uint64(len(v)))
			i = encodeVarintSearchServices(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintSearchServices(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintSearchServices(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.DevEUIContains) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSearchServices(dAtA, i, uint64(len(m.DevEUIContains)))
		i += copy(dAtA[i:], m.DevEUIContains)
	}
	if len(m.JoinEUIContains) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSearchServices(dAtA, i, uint64(len(m.JoinEUIContains)))
		i += copy(dAtA[i:], m.JoinEUIContains)
	}
	if len(m.DevAddrContains) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSearchServices(dAtA, i, uint64(len(m.DevAddrContains)))
		i += copy(dAtA[i:], m.DevAddrContains)
	}
	dAtA[i] = 0x4a
	i++
	i = encodeVarintSearchServices(dAtA, i, uint64(m.FieldMask.Size()))
	n3, err := m.FieldMask.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	return i, nil
}

func encodeVarintSearchServices(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedSearchEntitiesRequest(r randySearchServices, easy bool) *SearchEntitiesRequest {
	this := &SearchEntitiesRequest{}
	this.IDContains = string(randStringSearchServices(r))
	this.NameContains = string(randStringSearchServices(r))
	this.DescriptionContains = string(randStringSearchServices(r))
	if r.Intn(10) != 0 {
		v1 := r.Intn(10)
		this.AttributesContain = make(map[string]string)
		for i := 0; i < v1; i++ {
			this.AttributesContain[randStringSearchServices(r)] = randStringSearchServices(r)
		}
	}
	v2 := types.NewPopulatedFieldMask(r, easy)
	this.FieldMask = *v2
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSearchEndDevicesRequest(r randySearchServices, easy bool) *SearchEndDevicesRequest {
	this := &SearchEndDevicesRequest{}
	v3 := NewPopulatedApplicationIdentifiers(r, easy)
	this.ApplicationIdentifiers = *v3
	this.IDContains = string(randStringSearchServices(r))
	this.NameContains = string(randStringSearchServices(r))
	this.DescriptionContains = string(randStringSearchServices(r))
	if r.Intn(10) != 0 {
		v4 := r.Intn(10)
		this.AttributesContain = make(map[string]string)
		for i := 0; i < v4; i++ {
			this.AttributesContain[randStringSearchServices(r)] = randStringSearchServices(r)
		}
	}
	this.DevEUIContains = string(randStringSearchServices(r))
	this.JoinEUIContains = string(randStringSearchServices(r))
	this.DevAddrContains = string(randStringSearchServices(r))
	v5 := types.NewPopulatedFieldMask(r, easy)
	this.FieldMask = *v5
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randySearchServices interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneSearchServices(r randySearchServices) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringSearchServices(r randySearchServices) string {
	v6 := r.Intn(100)
	tmps := make([]rune, v6)
	for i := 0; i < v6; i++ {
		tmps[i] = randUTF8RuneSearchServices(r)
	}
	return string(tmps)
}
func randUnrecognizedSearchServices(r randySearchServices, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldSearchServices(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldSearchServices(dAtA []byte, r randySearchServices, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateSearchServices(dAtA, uint64(key))
		v7 := r.Int63()
		if r.Intn(2) == 0 {
			v7 *= -1
		}
		dAtA = encodeVarintPopulateSearchServices(dAtA, uint64(v7))
	case 1:
		dAtA = encodeVarintPopulateSearchServices(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateSearchServices(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateSearchServices(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateSearchServices(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateSearchServices(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *SearchEntitiesRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.IDContains)
	if l > 0 {
		n += 1 + l + sovSearchServices(uint64(l))
	}
	l = len(m.NameContains)
	if l > 0 {
		n += 1 + l + sovSearchServices(uint64(l))
	}
	l = len(m.DescriptionContains)
	if l > 0 {
		n += 1 + l + sovSearchServices(uint64(l))
	}
	if len(m.AttributesContain) > 0 {
		for k, v := range m.AttributesContain {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSearchServices(uint64(len(k))) + 1 + len(v) + sovSearchServices(uint64(len(v)))
			n += mapEntrySize + 1 + sovSearchServices(uint64(mapEntrySize))
		}
	}
	l = m.FieldMask.Size()
	n += 1 + l + sovSearchServices(uint64(l))
	return n
}

func (m *SearchEndDevicesRequest) Size() (n int) {
	var l int
	_ = l
	l = m.ApplicationIdentifiers.Size()
	n += 1 + l + sovSearchServices(uint64(l))
	l = len(m.IDContains)
	if l > 0 {
		n += 1 + l + sovSearchServices(uint64(l))
	}
	l = len(m.NameContains)
	if l > 0 {
		n += 1 + l + sovSearchServices(uint64(l))
	}
	l = len(m.DescriptionContains)
	if l > 0 {
		n += 1 + l + sovSearchServices(uint64(l))
	}
	if len(m.AttributesContain) > 0 {
		for k, v := range m.AttributesContain {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSearchServices(uint64(len(k))) + 1 + len(v) + sovSearchServices(uint64(len(v)))
			n += mapEntrySize + 1 + sovSearchServices(uint64(mapEntrySize))
		}
	}
	l = len(m.DevEUIContains)
	if l > 0 {
		n += 1 + l + sovSearchServices(uint64(l))
	}
	l = len(m.JoinEUIContains)
	if l > 0 {
		n += 1 + l + sovSearchServices(uint64(l))
	}
	l = len(m.DevAddrContains)
	if l > 0 {
		n += 1 + l + sovSearchServices(uint64(l))
	}
	l = m.FieldMask.Size()
	n += 1 + l + sovSearchServices(uint64(l))
	return n
}

func sovSearchServices(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSearchServices(x uint64) (n int) {
	return sovSearchServices(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SearchEntitiesRequest) String() string {
	if this == nil {
		return "nil"
	}
	keysForAttributesContain := make([]string, 0, len(this.AttributesContain))
	for k, _ := range this.AttributesContain {
		keysForAttributesContain = append(keysForAttributesContain, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributesContain)
	mapStringForAttributesContain := "map[string]string{"
	for _, k := range keysForAttributesContain {
		mapStringForAttributesContain += fmt.Sprintf("%v: %v,", k, this.AttributesContain[k])
	}
	mapStringForAttributesContain += "}"
	s := strings.Join([]string{`&SearchEntitiesRequest{`,
		`IDContains:` + fmt.Sprintf("%v", this.IDContains) + `,`,
		`NameContains:` + fmt.Sprintf("%v", this.NameContains) + `,`,
		`DescriptionContains:` + fmt.Sprintf("%v", this.DescriptionContains) + `,`,
		`AttributesContain:` + mapStringForAttributesContain + `,`,
		`FieldMask:` + strings.Replace(strings.Replace(this.FieldMask.String(), "FieldMask", "types.FieldMask", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchEndDevicesRequest) String() string {
	if this == nil {
		return "nil"
	}
	keysForAttributesContain := make([]string, 0, len(this.AttributesContain))
	for k, _ := range this.AttributesContain {
		keysForAttributesContain = append(keysForAttributesContain, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributesContain)
	mapStringForAttributesContain := "map[string]string{"
	for _, k := range keysForAttributesContain {
		mapStringForAttributesContain += fmt.Sprintf("%v: %v,", k, this.AttributesContain[k])
	}
	mapStringForAttributesContain += "}"
	s := strings.Join([]string{`&SearchEndDevicesRequest{`,
		`ApplicationIdentifiers:` + strings.Replace(strings.Replace(this.ApplicationIdentifiers.String(), "ApplicationIdentifiers", "ApplicationIdentifiers", 1), `&`, ``, 1) + `,`,
		`IDContains:` + fmt.Sprintf("%v", this.IDContains) + `,`,
		`NameContains:` + fmt.Sprintf("%v", this.NameContains) + `,`,
		`DescriptionContains:` + fmt.Sprintf("%v", this.DescriptionContains) + `,`,
		`AttributesContain:` + mapStringForAttributesContain + `,`,
		`DevEUIContains:` + fmt.Sprintf("%v", this.DevEUIContains) + `,`,
		`JoinEUIContains:` + fmt.Sprintf("%v", this.JoinEUIContains) + `,`,
		`DevAddrContains:` + fmt.Sprintf("%v", this.DevAddrContains) + `,`,
		`FieldMask:` + strings.Replace(strings.Replace(this.FieldMask.String(), "FieldMask", "types.FieldMask", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSearchServices(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SearchEntitiesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearchServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchEntitiesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchEntitiesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDContains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IDContains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameContains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NameContains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescriptionContains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DescriptionContains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributesContain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AttributesContain == nil {
				m.AttributesContain = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSearchServices
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSearchServices
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSearchServices
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSearchServices
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthSearchServices
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSearchServices(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSearchServices
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AttributesContain[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearchServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearchServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchEndDevicesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearchServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchEndDevicesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchEndDevicesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDContains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IDContains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameContains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NameContains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescriptionContains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DescriptionContains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributesContain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AttributesContain == nil {
				m.AttributesContain = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSearchServices
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSearchServices
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSearchServices
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSearchServices
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthSearchServices
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSearchServices(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSearchServices
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AttributesContain[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUIContains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevEUIContains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinEUIContains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JoinEUIContains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddrContains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevAddrContains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearchServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearchServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSearchServices(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSearchServices
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSearchServices
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSearchServices
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSearchServices(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSearchServices = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSearchServices   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("lorawan-stack/api/search_services.proto", fileDescriptor_search_services_d697d38893b0cc18)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/search_services.proto", fileDescriptor_search_services_d697d38893b0cc18)
}

var fileDescriptor_search_services_d697d38893b0cc18 = []byte{
	// 965 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0x3d, 0x6c, 0x23, 0x45,
	0x14, 0xde, 0x89, 0x9d, 0x90, 0x8c, 0x89, 0xed, 0x4c, 0x92, 0xb3, 0x65, 0xe5, 0xc6, 0x91, 0x0f,
	0xb8, 0x14, 0xdc, 0x5a, 0xf8, 0x1a, 0x84, 0x0e, 0xa2, 0xe4, 0x6c, 0x50, 0x4e, 0x42, 0x48, 0x46,
	0x57, 0x40, 0x63, 0x8d, 0xbd, 0x93, 0xf5, 0x60, 0x67, 0xd6, 0xec, 0x8c, 0x1d, 0xf9, 0x10, 0xd2,
	0x89, 0xea, 0x4a, 0x24, 0x1a, 0x44, 0x81, 0x10, 0xd5, 0x95, 0x27, 0xd1, 0x9c, 0xa8, 0xae, 0x42,
	0x29, 0x23, 0xd1, 0x5c, 0x65, 0x9d, 0x77, 0x29, 0xae, 0xbc, 0x32, 0x25, 0xda, 0xd9, 0x5d, 0xaf,
	0xbd, 0x4e, 0x90, 0x53, 0xd1, 0xcd, 0xcf, 0xf7, 0xbe, 0xef, 0xcd, 0xbc, 0x6f, 0xde, 0x2e, 0xbc,
	0xdd, 0xb5, 0x6c, 0x72, 0x4a, 0xf8, 0x1d, 0x21, 0x49, 0xab, 0x53, 0x26, 0x3d, 0x56, 0x16, 0x94,
	0xd8, 0xad, 0x76, 0x43, 0x50, 0x7b, 0xc0, 0x5a, 0x54, 0xe8, 0x3d, 0xdb, 0x92, 0x16, 0x4a, 0x4b,
	0xc9, 0xf5, 0x00, 0xac, 0x0f, 0xee, 0x16, 0xee, 0x98, 0x4c, 0xb6, 0xfb, 0x4d, 0xbd, 0x65, 0x9d,
	0x94, 0x4d, 0xcb, 0xb4, 0xca, 0x0a, 0xd6, 0xec, 0x1f, 0xab, 0x99, 0x9a, 0xa8, 0x91, 0x1f, 0x5e,
	0xd8, 0x31, 0x2d, 0xcb, 0xec, 0x52, 0x25, 0x40, 0x38, 0xb7, 0x24, 0x91, 0xcc, 0xe2, 0x01, 0x79,
	0x61, 0x37, 0xd8, 0x9d, 0x70, 0x1c, 0x33, 0xda, 0x35, 0x1a, 0x27, 0x44, 0x74, 0x02, 0xc4, 0xad,
	0xf9, 0x3c, 0x49, 0xaf, 0xd7, 0x65, 0x2d, 0xc5, 0x13, 0x80, 0xf0, 0x3c, 0xa8, 0xd5, 0x65, 0x94,
	0xcb, 0x60, 0xbf, 0x34, 0xbf, 0x4f, 0xb9, 0xd1, 0x30, 0xa8, 0x77, 0xd0, 0x00, 0x53, 0x9c, 0xc7,
	0x98, 0x44, 0xd2, 0x53, 0x32, 0xbc, 0x3a, 0x13, 0x66, 0x50, 0x2e, 0xd9, 0x31, 0xa3, 0x76, 0x78,
	0xa0, 0x77, 0xe6, 0x41, 0x96, 0x6d, 0x12, 0xce, 0x1e, 0x4d, 0xe7, 0xbb, 0x33, 0x8f, 0xea, 0x0b,
	0x6a, 0xfb, 0xbb, 0xa5, 0x5f, 0x12, 0x70, 0xfb, 0x4b, 0x55, 0x8b, 0x1a, 0x97, 0x4c, 0x32, 0x2a,
	0xea, 0xf4, 0xdb, 0x3e, 0x15, 0x12, 0x95, 0x61, 0x8a, 0x19, 0x8d, 0x96, 0xc5, 0x25, 0x61, 0x5c,
	0xe4, 0xc1, 0x2e, 0xd8, 0x5b, 0x3b, 0x4c, 0x3b, 0xa3, 0x22, 0x3c, 0xaa, 0xde, 0x0f, 0x56, 0xeb,
	0x90, 0x19, 0xe1, 0x18, 0xdd, 0x82, 0xeb, 0x9c, 0x9c, 0xd0, 0x28, 0x64, 0xc9, 0x0b, 0xa9, 0xbf,
	0xed, 0x2d, 0x4e, 0x40, 0x1f, 0xc0, 0x2d, 0x83, 0x8a, 0x96, 0xcd, 0x7a, 0x5e, 0x8a, 0x11, 0x36,
	0xa1, 0xb0, 0x9b, 0x53, 0x7b, 0x93, 0x90, 0x0e, 0x44, 0x44, 0x4a, 0x9b, 0x35, 0xfb, 0x92, 0x8a,
	0x30, 0x22, 0x9f, 0xdc, 0x4d, 0xec, 0xa5, 0x2a, 0xf7, 0xf4, 0x59, 0xc7, 0xe8, 0x97, 0x9e, 0x45,
	0x3f, 0x98, 0xc4, 0x07, 0xac, 0x35, 0x2e, 0xed, 0x61, 0x7d, 0x83, 0xc4, 0xd7, 0xd1, 0x3e, 0x84,
	0x91, 0x2d, 0xf2, 0x2b, 0xbb, 0x60, 0x2f, 0x55, 0x29, 0xe8, 0xbe, 0x73, 0xf4, 0xd0, 0x39, 0xfa,
	0xa7, 0x1e, 0xe4, 0x73, 0x22, 0x3a, 0x87, 0xc9, 0xb3, 0x51, 0x51, 0xab, 0xaf, 0x1d, 0x87, 0x0b,
	0x85, 0x2a, 0xbc, 0x71, 0xb9, 0x1a, 0xca, 0xc2, 0x44, 0x87, 0x0e, 0xfd, 0x8b, 0xac, 0x7b, 0x43,
	0xb4, 0x05, 0x97, 0x07, 0xa4, 0xdb, 0xa7, 0xc1, 0x4d, 0xf9, 0x93, 0x8f, 0x96, 0x3e, 0x04, 0x0f,
	0x92, 0xab, 0xcb, 0xd9, 0x95, 0xd2, 0x1f, 0xcb, 0x30, 0x17, 0x1e, 0xc8, 0xa8, 0x2a, 0x03, 0x4d,
	0xca, 0xf3, 0x15, 0xcc, 0x4c, 0x79, 0xb3, 0xc1, 0x0c, 0xbf, 0x44, 0xa9, 0xca, 0x7b, 0xf1, 0x2b,
	0x39, 0x88, 0x60, 0x47, 0x91, 0x87, 0x0e, 0x57, 0xbd, 0xcc, 0xcf, 0x47, 0x45, 0x50, 0x4f, 0x93,
	0x69, 0x84, 0x88, 0x57, 0x7e, 0xe9, 0xfa, 0x95, 0x4f, 0x5c, 0xa3, 0xf2, 0xc9, 0xab, 0x2b, 0x7f,
	0x72, 0x69, 0xe5, 0x97, 0x55, 0xe5, 0x3f, 0xb9, 0xaa, 0xf2, 0xb1, 0x8b, 0xba, 0x46, 0xed, 0xef,
	0xc1, 0xac, 0x41, 0x07, 0x0d, 0xda, 0x67, 0x51, 0x76, 0x2b, 0xea, 0xf0, 0xc8, 0x19, 0x15, 0xd3,
	0x55, 0x3a, 0xa8, 0x3d, 0x3c, 0x9a, 0x5c, 0x40, 0xda, 0xa0, 0x83, 0x5a, 0x9f, 0x4d, 0x92, 0xdd,
	0x87, 0x1b, 0xdf, 0x58, 0x8c, 0xcf, 0x86, 0xbf, 0xa5, 0xc2, 0x37, 0x9d, 0x51, 0x31, 0xf3, 0xc0,
	0x62, 0x7c, 0x3a, 0x3e, 0xe3, 0xa1, 0x63, 0x04, 0x9e, 0x3c, 0x31, 0x0c, 0x3b, 0x22, 0x58, 0x8d,
	0x08, 0xaa, 0x74, 0x70, 0x60, 0x18, 0x76, 0x44, 0x60, 0xcc, 0x2e, 0xc4, 0xbc, 0xbb, 0xf6, 0x3f,
	0x79, 0xb7, 0xf2, 0x57, 0x12, 0x6e, 0xa9, 0x07, 0x38, 0xac, 0x53, 0x93, 0x09, 0x69, 0x0f, 0xfd,
	0xd2, 0xa0, 0x53, 0x88, 0xfc, 0xd1, 0x94, 0x23, 0x05, 0x7a, 0x77, 0xa1, 0x27, 0x5c, 0xd8, 0xf9,
	0x0f, 0x5b, 0x8b, 0xd2, 0xce, 0x0f, 0x7f, 0xff, 0xf3, 0xd3, 0xd2, 0x0d, 0xb4, 0x15, 0x7c, 0x58,
	0xa6, 0xfb, 0xb6, 0x40, 0x6d, 0xb8, 0xee, 0x93, 0xde, 0x57, 0x8d, 0x7a, 0x61, 0xcd, 0x5c, 0x1c,
	0x16, 0xc4, 0x97, 0x72, 0x4a, 0x6e, 0x03, 0x65, 0x42, 0xb9, 0x56, 0x40, 0xdc, 0x81, 0x69, 0x9f,
	0xea, 0x33, 0xbf, 0x9d, 0x2f, 0x2c, 0x95, 0x8f, 0xc3, 0x42, 0x82, 0x52, 0x5e, 0x69, 0x21, 0x94,
	0x0d, 0xb5, 0xcc, 0x90, 0xfa, 0x11, 0xdc, 0xf4, 0xc9, 0xbe, 0x98, 0xea, 0xfa, 0x0b, 0x2b, 0xde,
	0x8c, 0xc3, 0x66, 0x58, 0x4a, 0x37, 0x95, 0x6c, 0x0e, 0x6d, 0x87, 0xb2, 0xd6, 0x8c, 0x48, 0x13,
	0xa6, 0x7c, 0xda, 0x87, 0x82, 0xda, 0x0b, 0x6b, 0x6e, 0xc7, 0x61, 0x2a, 0xba, 0xb4, 0xad, 0xb4,
	0x32, 0x68, 0x3d, 0xd4, 0xf2, 0x3e, 0x50, 0xa2, 0xf2, 0x27, 0x80, 0xb9, 0xc9, 0x7b, 0x8e, 0x79,
	0xe9, 0x57, 0x00, 0xb3, 0xf1, 0x17, 0x8f, 0x6e, 0x2f, 0xd8, 0x13, 0x0a, 0x85, 0x38, 0x30, 0x82,
	0x94, 0x6a, 0x2a, 0x99, 0x7d, 0xf4, 0xf1, 0x65, 0x56, 0x2a, 0x7f, 0x17, 0x6b, 0xba, 0xfa, 0xec,
	0xfc, 0xfb, 0xb2, 0xff, 0x9d, 0x17, 0x87, 0xbf, 0x83, 0xb3, 0x31, 0x06, 0xe7, 0x63, 0x0c, 0x5e,
	0x8e, 0xb1, 0xf6, 0x6a, 0x8c, 0xb5, 0xd7, 0x63, 0xac, 0xbd, 0x19, 0x63, 0xed, 0x62, 0x8c, 0xc1,
	0x63, 0x07, 0x83, 0x27, 0x0e, 0xd6, 0x9e, 0x3a, 0x18, 0x3c, 0x73, 0xb0, 0xf6, 0xdc, 0xc1, 0xda,
	0x0b, 0x07, 0x6b, 0x67, 0x0e, 0x06, 0xe7, 0x0e, 0x06, 0x2f, 0x1d, 0xac, 0xbd, 0x72, 0x30, 0x78,
	0xed, 0x60, 0xed, 0x8d, 0x83, 0xc1, 0x85, 0x83, 0xb5, 0xc7, 0x2e, 0xd6, 0x9e, 0xb8, 0x18, 0xfc,
	0xe8, 0x62, 0xed, 0x67, 0x17, 0x83, 0xdf, 0x5c, 0xac, 0x3d, 0x75, 0xb1, 0xf6, 0xcc, 0xc5, 0xe0,
	0xb9, 0x8b, 0xc1, 0x0b, 0x17, 0x83, 0xaf, 0xdf, 0x37, 0x2d, 0x5d, 0xb6, 0xa9, 0x6c, 0x33, 0x6e,
	0x0a, 0x9d, 0x53, 0x79, 0x6a, 0xd9, 0x9d, 0xf2, 0xec, 0x2f, 0x40, 0xaf, 0x63, 0x96, 0xa5, 0xe4,
	0xbd, 0x66, 0x73, 0x45, 0x75, 0x85, 0xbb, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x10, 0x40, 0xc0,
	0xa4, 0xa1, 0x09, 0x00, 0x00,
}
