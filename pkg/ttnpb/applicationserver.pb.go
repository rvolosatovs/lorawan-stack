// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/TheThingsNetwork/ttn/api/applicationserver.proto

package ttnpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for As service

type AsClient interface {
	Subscribe(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (As_SubscribeClient, error)
}

type asClient struct {
	cc *grpc.ClientConn
}

func NewAsClient(cc *grpc.ClientConn) AsClient {
	return &asClient{cc}
}

func (c *asClient) Subscribe(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (As_SubscribeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_As_serviceDesc.Streams[0], c.cc, "/ttn.v3.As/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &asSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type As_SubscribeClient interface {
	Recv() (*ApplicationUp, error)
	grpc.ClientStream
}

type asSubscribeClient struct {
	grpc.ClientStream
}

func (x *asSubscribeClient) Recv() (*ApplicationUp, error) {
	m := new(ApplicationUp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for As service

type AsServer interface {
	Subscribe(*EndDeviceIdentifiers, As_SubscribeServer) error
}

func RegisterAsServer(s *grpc.Server, srv AsServer) {
	s.RegisterService(&_As_serviceDesc, srv)
}

func _As_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EndDeviceIdentifiers)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AsServer).Subscribe(m, &asSubscribeServer{stream})
}

type As_SubscribeServer interface {
	Send(*ApplicationUp) error
	grpc.ServerStream
}

type asSubscribeServer struct {
	grpc.ServerStream
}

func (x *asSubscribeServer) Send(m *ApplicationUp) error {
	return x.ServerStream.SendMsg(m)
}

var _As_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.v3.As",
	HandlerType: (*AsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _As_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/TheThingsNetwork/ttn/api/applicationserver.proto",
}

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/applicationserver.proto", fileDescriptorApplicationserver)
}

var fileDescriptorApplicationserver = []byte{
	// 231 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xb2, 0x4e, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x0f, 0xc9, 0x48, 0x0d, 0xc9, 0xc8, 0xcc, 0x4b, 0x2f,
	0xf6, 0x4b, 0x2d, 0x29, 0xcf, 0x2f, 0xca, 0xd6, 0x2f, 0x29, 0xc9, 0xd3, 0x4f, 0x2c, 0xc8, 0xd4,
	0x4f, 0x2c, 0x28, 0xc8, 0xc9, 0x4c, 0x4e, 0x2c, 0xc9, 0xcc, 0xcf, 0x2b, 0x4e, 0x2d, 0x2a, 0x4b,
	0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2b, 0x29, 0xc9, 0xd3, 0x2b, 0x33, 0x96,
	0xd2, 0x45, 0x32, 0x24, 0x3d, 0x3f, 0x3d, 0x5f, 0x1f, 0x2c, 0x9d, 0x54, 0x9a, 0x06, 0xe6, 0x81,
	0x39, 0x60, 0x16, 0x44, 0x9b, 0x94, 0x29, 0x89, 0x76, 0x92, 0xa2, 0x2d, 0x33, 0x25, 0x35, 0xaf,
	0x24, 0x33, 0x2d, 0x33, 0xb5, 0xa8, 0x18, 0xa2, 0xcd, 0xc8, 0x83, 0x8b, 0xc9, 0xb1, 0x58, 0xc8,
	0x89, 0x8b, 0x33, 0xb8, 0x34, 0xa9, 0x38, 0xb9, 0x28, 0x33, 0x29, 0x55, 0x48, 0x46, 0x0f, 0xe2,
	0x70, 0x3d, 0xd7, 0xbc, 0x14, 0x97, 0xd4, 0xb2, 0xcc, 0xe4, 0x54, 0x4f, 0x84, 0x36, 0x29, 0x51,
	0x98, 0xac, 0x23, 0xc2, 0x09, 0xa1, 0x05, 0x06, 0x8c, 0x4e, 0xee, 0x37, 0x1e, 0xca, 0x31, 0x34,
	0x3c, 0x92, 0x63, 0x3c, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18,
	0x5f, 0x3c, 0x92, 0x63, 0xf8, 0xf0, 0x48, 0x8e, 0x31, 0x4a, 0x93, 0x90, 0xf3, 0x0a, 0xb2, 0xd3,
	0x41, 0x74, 0x41, 0x52, 0x12, 0x1b, 0xd8, 0x65, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb6,
	0xbf, 0x35, 0x2c, 0x7d, 0x01, 0x00, 0x00,
}
