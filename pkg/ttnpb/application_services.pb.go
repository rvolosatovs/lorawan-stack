// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/application_services.proto

package ttnpb // import "go.thethings.network/lorawan-stack/pkg/ttnpb"

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import types "github.com/gogo/protobuf/types"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import context "context"
import grpc "google.golang.org/grpc"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type DownlinkQueueRequest struct {
	EndDeviceIdentifiers `protobuf:"bytes,1,opt,name=end_device,json=endDevice,embedded=end_device" json:"end_device"`
	Downlinks            []*ApplicationDownlink `protobuf:"bytes,2,rep,name=downlinks" json:"downlinks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *DownlinkQueueRequest) Reset()      { *m = DownlinkQueueRequest{} }
func (*DownlinkQueueRequest) ProtoMessage() {}
func (*DownlinkQueueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_application_services_29042f2b9c5b2d51, []int{0}
}
func (m *DownlinkQueueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownlinkQueueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownlinkQueueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DownlinkQueueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownlinkQueueRequest.Merge(dst, src)
}
func (m *DownlinkQueueRequest) XXX_Size() int {
	return m.Size()
}
func (m *DownlinkQueueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DownlinkQueueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DownlinkQueueRequest proto.InternalMessageInfo

func (m *DownlinkQueueRequest) GetDownlinks() []*ApplicationDownlink {
	if m != nil {
		return m.Downlinks
	}
	return nil
}

func init() {
	proto.RegisterType((*DownlinkQueueRequest)(nil), "ttn.lorawan.v3.DownlinkQueueRequest")
	golang_proto.RegisterType((*DownlinkQueueRequest)(nil), "ttn.lorawan.v3.DownlinkQueueRequest")
}
func (this *DownlinkQueueRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownlinkQueueRequest)
	if !ok {
		that2, ok := that.(DownlinkQueueRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EndDeviceIdentifiers.Equal(&that1.EndDeviceIdentifiers) {
		return false
	}
	if len(this.Downlinks) != len(that1.Downlinks) {
		return false
	}
	for i := range this.Downlinks {
		if !this.Downlinks[i].Equal(that1.Downlinks[i]) {
			return false
		}
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ApplicationRegistry service

type ApplicationRegistryClient interface {
	// Create a new application. This also sets the current user as first collaborator
	// with all possible rights. When including organization identifiers, this instead
	// grants those rights to the given organization.
	CreateApplication(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*Application, error)
	// Get the application with the given identifiers, selecting the fields given
	// by the field mask. The method may return more or less fields, depending on
	// the rights of the caller.
	GetApplication(ctx context.Context, in *GetApplicationRequest, opts ...grpc.CallOption) (*Application, error)
	// List applications. See request message for details.
	ListApplications(ctx context.Context, in *ListApplicationsRequest, opts ...grpc.CallOption) (*Applications, error)
	UpdateApplication(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*Application, error)
	DeleteApplication(ctx context.Context, in *ApplicationIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
}

type applicationRegistryClient struct {
	cc *grpc.ClientConn
}

func NewApplicationRegistryClient(cc *grpc.ClientConn) ApplicationRegistryClient {
	return &applicationRegistryClient{cc}
}

func (c *applicationRegistryClient) CreateApplication(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationRegistry/CreateApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationRegistryClient) GetApplication(ctx context.Context, in *GetApplicationRequest, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationRegistry/GetApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationRegistryClient) ListApplications(ctx context.Context, in *ListApplicationsRequest, opts ...grpc.CallOption) (*Applications, error) {
	out := new(Applications)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationRegistry/ListApplications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationRegistryClient) UpdateApplication(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationRegistry/UpdateApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationRegistryClient) DeleteApplication(ctx context.Context, in *ApplicationIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationRegistry/DeleteApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ApplicationRegistry service

type ApplicationRegistryServer interface {
	// Create a new application. This also sets the current user as first collaborator
	// with all possible rights. When including organization identifiers, this instead
	// grants those rights to the given organization.
	CreateApplication(context.Context, *CreateApplicationRequest) (*Application, error)
	// Get the application with the given identifiers, selecting the fields given
	// by the field mask. The method may return more or less fields, depending on
	// the rights of the caller.
	GetApplication(context.Context, *GetApplicationRequest) (*Application, error)
	// List applications. See request message for details.
	ListApplications(context.Context, *ListApplicationsRequest) (*Applications, error)
	UpdateApplication(context.Context, *UpdateApplicationRequest) (*Application, error)
	DeleteApplication(context.Context, *ApplicationIdentifiers) (*types.Empty, error)
}

func RegisterApplicationRegistryServer(s *grpc.Server, srv ApplicationRegistryServer) {
	s.RegisterService(&_ApplicationRegistry_serviceDesc, srv)
}

func _ApplicationRegistry_CreateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationRegistryServer).CreateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationRegistry/CreateApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationRegistryServer).CreateApplication(ctx, req.(*CreateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationRegistry_GetApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationRegistryServer).GetApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationRegistry/GetApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationRegistryServer).GetApplication(ctx, req.(*GetApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationRegistry_ListApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationRegistryServer).ListApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationRegistry/ListApplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationRegistryServer).ListApplications(ctx, req.(*ListApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationRegistry_UpdateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationRegistryServer).UpdateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationRegistry/UpdateApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationRegistryServer).UpdateApplication(ctx, req.(*UpdateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationRegistry_DeleteApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationRegistryServer).DeleteApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationRegistry/DeleteApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationRegistryServer).DeleteApplication(ctx, req.(*ApplicationIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApplicationRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.ApplicationRegistry",
	HandlerType: (*ApplicationRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateApplication",
			Handler:    _ApplicationRegistry_CreateApplication_Handler,
		},
		{
			MethodName: "GetApplication",
			Handler:    _ApplicationRegistry_GetApplication_Handler,
		},
		{
			MethodName: "ListApplications",
			Handler:    _ApplicationRegistry_ListApplications_Handler,
		},
		{
			MethodName: "UpdateApplication",
			Handler:    _ApplicationRegistry_UpdateApplication_Handler,
		},
		{
			MethodName: "DeleteApplication",
			Handler:    _ApplicationRegistry_DeleteApplication_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/application_services.proto",
}

// Client API for ApplicationAccess service

type ApplicationAccessClient interface {
	ListApplicationRights(ctx context.Context, in *ApplicationIdentifiers, opts ...grpc.CallOption) (*Rights, error)
	GenerateApplicationAPIKey(ctx context.Context, in *SetApplicationAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error)
	ListApplicationAPIKeys(ctx context.Context, in *ApplicationIdentifiers, opts ...grpc.CallOption) (*APIKeys, error)
	// Setting an API key without rights removes it.
	SetApplicationAPIKey(ctx context.Context, in *SetApplicationAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error)
	// Setting a collaborator without rights, removes them.
	SetApplicationCollaborator(ctx context.Context, in *SetApplicationCollaboratorRequest, opts ...grpc.CallOption) (*types.Empty, error)
	ListApplicationCollaborators(ctx context.Context, in *ApplicationIdentifiers, opts ...grpc.CallOption) (*Collaborators, error)
}

type applicationAccessClient struct {
	cc *grpc.ClientConn
}

func NewApplicationAccessClient(cc *grpc.ClientConn) ApplicationAccessClient {
	return &applicationAccessClient{cc}
}

func (c *applicationAccessClient) ListApplicationRights(ctx context.Context, in *ApplicationIdentifiers, opts ...grpc.CallOption) (*Rights, error) {
	out := new(Rights)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationAccess/ListApplicationRights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationAccessClient) GenerateApplicationAPIKey(ctx context.Context, in *SetApplicationAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error) {
	out := new(APIKey)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationAccess/GenerateApplicationAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationAccessClient) ListApplicationAPIKeys(ctx context.Context, in *ApplicationIdentifiers, opts ...grpc.CallOption) (*APIKeys, error) {
	out := new(APIKeys)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationAccess/ListApplicationAPIKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationAccessClient) SetApplicationAPIKey(ctx context.Context, in *SetApplicationAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error) {
	out := new(APIKey)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationAccess/SetApplicationAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationAccessClient) SetApplicationCollaborator(ctx context.Context, in *SetApplicationCollaboratorRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationAccess/SetApplicationCollaborator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationAccessClient) ListApplicationCollaborators(ctx context.Context, in *ApplicationIdentifiers, opts ...grpc.CallOption) (*Collaborators, error) {
	out := new(Collaborators)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationAccess/ListApplicationCollaborators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ApplicationAccess service

type ApplicationAccessServer interface {
	ListApplicationRights(context.Context, *ApplicationIdentifiers) (*Rights, error)
	GenerateApplicationAPIKey(context.Context, *SetApplicationAPIKeyRequest) (*APIKey, error)
	ListApplicationAPIKeys(context.Context, *ApplicationIdentifiers) (*APIKeys, error)
	// Setting an API key without rights removes it.
	SetApplicationAPIKey(context.Context, *SetApplicationAPIKeyRequest) (*APIKey, error)
	// Setting a collaborator without rights, removes them.
	SetApplicationCollaborator(context.Context, *SetApplicationCollaboratorRequest) (*types.Empty, error)
	ListApplicationCollaborators(context.Context, *ApplicationIdentifiers) (*Collaborators, error)
}

func RegisterApplicationAccessServer(s *grpc.Server, srv ApplicationAccessServer) {
	s.RegisterService(&_ApplicationAccess_serviceDesc, srv)
}

func _ApplicationAccess_ListApplicationRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationAccessServer).ListApplicationRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationAccess/ListApplicationRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationAccessServer).ListApplicationRights(ctx, req.(*ApplicationIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationAccess_GenerateApplicationAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetApplicationAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationAccessServer).GenerateApplicationAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationAccess/GenerateApplicationAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationAccessServer).GenerateApplicationAPIKey(ctx, req.(*SetApplicationAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationAccess_ListApplicationAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationAccessServer).ListApplicationAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationAccess/ListApplicationAPIKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationAccessServer).ListApplicationAPIKeys(ctx, req.(*ApplicationIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationAccess_SetApplicationAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetApplicationAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationAccessServer).SetApplicationAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationAccess/SetApplicationAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationAccessServer).SetApplicationAPIKey(ctx, req.(*SetApplicationAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationAccess_SetApplicationCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetApplicationCollaboratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationAccessServer).SetApplicationCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationAccess/SetApplicationCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationAccessServer).SetApplicationCollaborator(ctx, req.(*SetApplicationCollaboratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationAccess_ListApplicationCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationAccessServer).ListApplicationCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationAccess/ListApplicationCollaborators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationAccessServer).ListApplicationCollaborators(ctx, req.(*ApplicationIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApplicationAccess_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.ApplicationAccess",
	HandlerType: (*ApplicationAccessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListApplicationRights",
			Handler:    _ApplicationAccess_ListApplicationRights_Handler,
		},
		{
			MethodName: "GenerateApplicationAPIKey",
			Handler:    _ApplicationAccess_GenerateApplicationAPIKey_Handler,
		},
		{
			MethodName: "ListApplicationAPIKeys",
			Handler:    _ApplicationAccess_ListApplicationAPIKeys_Handler,
		},
		{
			MethodName: "SetApplicationAPIKey",
			Handler:    _ApplicationAccess_SetApplicationAPIKey_Handler,
		},
		{
			MethodName: "SetApplicationCollaborator",
			Handler:    _ApplicationAccess_SetApplicationCollaborator_Handler,
		},
		{
			MethodName: "ListApplicationCollaborators",
			Handler:    _ApplicationAccess_ListApplicationCollaborators_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/application_services.proto",
}

// Client API for NsApplicationDownlinkQueue service

type NsApplicationDownlinkQueueClient interface {
	DownlinkQueueReplace(ctx context.Context, in *DownlinkQueueRequest, opts ...grpc.CallOption) (*types.Empty, error)
	DownlinkQueuePush(ctx context.Context, in *DownlinkQueueRequest, opts ...grpc.CallOption) (*types.Empty, error)
	DownlinkQueueList(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*ApplicationDownlinks, error)
	DownlinkQueueClear(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
}

type nsApplicationDownlinkQueueClient struct {
	cc *grpc.ClientConn
}

func NewNsApplicationDownlinkQueueClient(cc *grpc.ClientConn) NsApplicationDownlinkQueueClient {
	return &nsApplicationDownlinkQueueClient{cc}
}

func (c *nsApplicationDownlinkQueueClient) DownlinkQueueReplace(ctx context.Context, in *DownlinkQueueRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.NsApplicationDownlinkQueue/DownlinkQueueReplace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nsApplicationDownlinkQueueClient) DownlinkQueuePush(ctx context.Context, in *DownlinkQueueRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.NsApplicationDownlinkQueue/DownlinkQueuePush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nsApplicationDownlinkQueueClient) DownlinkQueueList(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*ApplicationDownlinks, error) {
	out := new(ApplicationDownlinks)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.NsApplicationDownlinkQueue/DownlinkQueueList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nsApplicationDownlinkQueueClient) DownlinkQueueClear(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.NsApplicationDownlinkQueue/DownlinkQueueClear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NsApplicationDownlinkQueue service

type NsApplicationDownlinkQueueServer interface {
	DownlinkQueueReplace(context.Context, *DownlinkQueueRequest) (*types.Empty, error)
	DownlinkQueuePush(context.Context, *DownlinkQueueRequest) (*types.Empty, error)
	DownlinkQueueList(context.Context, *EndDeviceIdentifiers) (*ApplicationDownlinks, error)
	DownlinkQueueClear(context.Context, *EndDeviceIdentifiers) (*types.Empty, error)
}

func RegisterNsApplicationDownlinkQueueServer(s *grpc.Server, srv NsApplicationDownlinkQueueServer) {
	s.RegisterService(&_NsApplicationDownlinkQueue_serviceDesc, srv)
}

func _NsApplicationDownlinkQueue_DownlinkQueueReplace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownlinkQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NsApplicationDownlinkQueueServer).DownlinkQueueReplace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.NsApplicationDownlinkQueue/DownlinkQueueReplace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NsApplicationDownlinkQueueServer).DownlinkQueueReplace(ctx, req.(*DownlinkQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NsApplicationDownlinkQueue_DownlinkQueuePush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownlinkQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NsApplicationDownlinkQueueServer).DownlinkQueuePush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.NsApplicationDownlinkQueue/DownlinkQueuePush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NsApplicationDownlinkQueueServer).DownlinkQueuePush(ctx, req.(*DownlinkQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NsApplicationDownlinkQueue_DownlinkQueueList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDeviceIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NsApplicationDownlinkQueueServer).DownlinkQueueList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.NsApplicationDownlinkQueue/DownlinkQueueList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NsApplicationDownlinkQueueServer).DownlinkQueueList(ctx, req.(*EndDeviceIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _NsApplicationDownlinkQueue_DownlinkQueueClear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDeviceIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NsApplicationDownlinkQueueServer).DownlinkQueueClear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.NsApplicationDownlinkQueue/DownlinkQueueClear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NsApplicationDownlinkQueueServer).DownlinkQueueClear(ctx, req.(*EndDeviceIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _NsApplicationDownlinkQueue_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.NsApplicationDownlinkQueue",
	HandlerType: (*NsApplicationDownlinkQueueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DownlinkQueueReplace",
			Handler:    _NsApplicationDownlinkQueue_DownlinkQueueReplace_Handler,
		},
		{
			MethodName: "DownlinkQueuePush",
			Handler:    _NsApplicationDownlinkQueue_DownlinkQueuePush_Handler,
		},
		{
			MethodName: "DownlinkQueueList",
			Handler:    _NsApplicationDownlinkQueue_DownlinkQueueList_Handler,
		},
		{
			MethodName: "DownlinkQueueClear",
			Handler:    _NsApplicationDownlinkQueue_DownlinkQueueClear_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/application_services.proto",
}

// Client API for AsApplicationDownlinkQueue service

type AsApplicationDownlinkQueueClient interface {
	DownlinkQueuePush(ctx context.Context, in *DownlinkQueueRequest, opts ...grpc.CallOption) (*types.Empty, error)
	DownlinkQueueReplace(ctx context.Context, in *DownlinkQueueRequest, opts ...grpc.CallOption) (*types.Empty, error)
	DownlinkQueueList(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*ApplicationDownlinks, error)
	DownlinkQueueClear(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
}

type asApplicationDownlinkQueueClient struct {
	cc *grpc.ClientConn
}

func NewAsApplicationDownlinkQueueClient(cc *grpc.ClientConn) AsApplicationDownlinkQueueClient {
	return &asApplicationDownlinkQueueClient{cc}
}

func (c *asApplicationDownlinkQueueClient) DownlinkQueuePush(ctx context.Context, in *DownlinkQueueRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.AsApplicationDownlinkQueue/DownlinkQueuePush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asApplicationDownlinkQueueClient) DownlinkQueueReplace(ctx context.Context, in *DownlinkQueueRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.AsApplicationDownlinkQueue/DownlinkQueueReplace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asApplicationDownlinkQueueClient) DownlinkQueueList(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*ApplicationDownlinks, error) {
	out := new(ApplicationDownlinks)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.AsApplicationDownlinkQueue/DownlinkQueueList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asApplicationDownlinkQueueClient) DownlinkQueueClear(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.AsApplicationDownlinkQueue/DownlinkQueueClear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AsApplicationDownlinkQueue service

type AsApplicationDownlinkQueueServer interface {
	DownlinkQueuePush(context.Context, *DownlinkQueueRequest) (*types.Empty, error)
	DownlinkQueueReplace(context.Context, *DownlinkQueueRequest) (*types.Empty, error)
	DownlinkQueueList(context.Context, *EndDeviceIdentifiers) (*ApplicationDownlinks, error)
	DownlinkQueueClear(context.Context, *EndDeviceIdentifiers) (*types.Empty, error)
}

func RegisterAsApplicationDownlinkQueueServer(s *grpc.Server, srv AsApplicationDownlinkQueueServer) {
	s.RegisterService(&_AsApplicationDownlinkQueue_serviceDesc, srv)
}

func _AsApplicationDownlinkQueue_DownlinkQueuePush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownlinkQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsApplicationDownlinkQueueServer).DownlinkQueuePush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.AsApplicationDownlinkQueue/DownlinkQueuePush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsApplicationDownlinkQueueServer).DownlinkQueuePush(ctx, req.(*DownlinkQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsApplicationDownlinkQueue_DownlinkQueueReplace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownlinkQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsApplicationDownlinkQueueServer).DownlinkQueueReplace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.AsApplicationDownlinkQueue/DownlinkQueueReplace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsApplicationDownlinkQueueServer).DownlinkQueueReplace(ctx, req.(*DownlinkQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsApplicationDownlinkQueue_DownlinkQueueList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDeviceIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsApplicationDownlinkQueueServer).DownlinkQueueList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.AsApplicationDownlinkQueue/DownlinkQueueList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsApplicationDownlinkQueueServer).DownlinkQueueList(ctx, req.(*EndDeviceIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsApplicationDownlinkQueue_DownlinkQueueClear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDeviceIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsApplicationDownlinkQueueServer).DownlinkQueueClear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.AsApplicationDownlinkQueue/DownlinkQueueClear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsApplicationDownlinkQueueServer).DownlinkQueueClear(ctx, req.(*EndDeviceIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _AsApplicationDownlinkQueue_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.AsApplicationDownlinkQueue",
	HandlerType: (*AsApplicationDownlinkQueueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DownlinkQueuePush",
			Handler:    _AsApplicationDownlinkQueue_DownlinkQueuePush_Handler,
		},
		{
			MethodName: "DownlinkQueueReplace",
			Handler:    _AsApplicationDownlinkQueue_DownlinkQueueReplace_Handler,
		},
		{
			MethodName: "DownlinkQueueList",
			Handler:    _AsApplicationDownlinkQueue_DownlinkQueueList_Handler,
		},
		{
			MethodName: "DownlinkQueueClear",
			Handler:    _AsApplicationDownlinkQueue_DownlinkQueueClear_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/application_services.proto",
}

func (m *DownlinkQueueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownlinkQueueRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApplicationServices(dAtA, i, uint64(m.EndDeviceIdentifiers.Size()))
	n1, err := m.EndDeviceIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Downlinks) > 0 {
		for _, msg := range m.Downlinks {
			dAtA[i] = 0x12
			i++
			i = encodeVarintApplicationServices(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintApplicationServices(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedDownlinkQueueRequest(r randyApplicationServices, easy bool) *DownlinkQueueRequest {
	this := &DownlinkQueueRequest{}
	v1 := NewPopulatedEndDeviceIdentifiers(r, easy)
	this.EndDeviceIdentifiers = *v1
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.Downlinks = make([]*ApplicationDownlink, v2)
		for i := 0; i < v2; i++ {
			this.Downlinks[i] = NewPopulatedApplicationDownlink(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyApplicationServices interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneApplicationServices(r randyApplicationServices) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringApplicationServices(r randyApplicationServices) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneApplicationServices(r)
	}
	return string(tmps)
}
func randUnrecognizedApplicationServices(r randyApplicationServices, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldApplicationServices(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldApplicationServices(dAtA []byte, r randyApplicationServices, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateApplicationServices(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulateApplicationServices(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulateApplicationServices(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateApplicationServices(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateApplicationServices(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateApplicationServices(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateApplicationServices(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *DownlinkQueueRequest) Size() (n int) {
	var l int
	_ = l
	l = m.EndDeviceIdentifiers.Size()
	n += 1 + l + sovApplicationServices(uint64(l))
	if len(m.Downlinks) > 0 {
		for _, e := range m.Downlinks {
			l = e.Size()
			n += 1 + l + sovApplicationServices(uint64(l))
		}
	}
	return n
}

func sovApplicationServices(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApplicationServices(x uint64) (n int) {
	return sovApplicationServices((x << 1) ^ uint64((int64(x) >> 63)))
}
func (this *DownlinkQueueRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownlinkQueueRequest{`,
		`EndDeviceIdentifiers:` + strings.Replace(strings.Replace(this.EndDeviceIdentifiers.String(), "EndDeviceIdentifiers", "EndDeviceIdentifiers", 1), `&`, ``, 1) + `,`,
		`Downlinks:` + strings.Replace(fmt.Sprintf("%v", this.Downlinks), "ApplicationDownlink", "ApplicationDownlink", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringApplicationServices(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DownlinkQueueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownlinkQueueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownlinkQueueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDeviceIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationServices
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EndDeviceIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Downlinks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationServices
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Downlinks = append(m.Downlinks, &ApplicationDownlink{})
			if err := m.Downlinks[len(m.Downlinks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplicationServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApplicationServices(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApplicationServices
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApplicationServices
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApplicationServices
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApplicationServices
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApplicationServices
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApplicationServices(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApplicationServices = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApplicationServices   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("lorawan-stack/api/application_services.proto", fileDescriptor_application_services_29042f2b9c5b2d51)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/application_services.proto", fileDescriptor_application_services_29042f2b9c5b2d51)
}

var fileDescriptor_application_services_29042f2b9c5b2d51 = []byte{
	// 1044 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x97, 0x4d, 0x6c, 0x1b, 0x45,
	0x14, 0xc7, 0xf7, 0x05, 0x29, 0xd0, 0xa9, 0xa8, 0xf0, 0x50, 0x4a, 0xd9, 0x86, 0x69, 0xb4, 0xfd,
	0x48, 0x08, 0xf1, 0x2e, 0x38, 0x7c, 0x08, 0x54, 0x21, 0x39, 0x49, 0x15, 0x55, 0xa5, 0xa8, 0x35,
	0x05, 0xa4, 0x08, 0x14, 0xad, 0xed, 0xe9, 0x7a, 0xf1, 0x66, 0xd7, 0xdd, 0x19, 0x37, 0x0a, 0x56,
	0xa4, 0x8a, 0x03, 0xaa, 0x10, 0x07, 0x24, 0x54, 0x09, 0x09, 0x0e, 0xa8, 0xe2, 0x90, 0x63, 0x8e,
	0xe5, 0x80, 0xd4, 0x0b, 0x92, 0x8f, 0x91, 0xb8, 0xf4, 0x54, 0xd5, 0xbb, 0x1c, 0x7a, 0xcc, 0x31,
	0xe2, 0x84, 0x3c, 0xbb, 0x8b, 0xf7, 0xc3, 0x76, 0x9c, 0x92, 0x70, 0x8a, 0x77, 0xdf, 0x9b, 0xf7,
	0x7e, 0xef, 0xff, 0xde, 0xcc, 0x4e, 0xd0, 0xac, 0xe5, 0xb8, 0xfa, 0x9a, 0x6e, 0xe7, 0x19, 0xd7,
	0x2b, 0x75, 0x4d, 0x6f, 0x98, 0x9a, 0xde, 0x68, 0x58, 0x66, 0x45, 0xe7, 0xa6, 0x63, 0xaf, 0x30,
	0xea, 0xde, 0x32, 0x2b, 0x94, 0xa9, 0x0d, 0xd7, 0xe1, 0x0e, 0x3e, 0xc6, 0xb9, 0xad, 0x86, 0x2b,
	0xd4, 0x5b, 0x73, 0x72, 0xde, 0x30, 0x79, 0xad, 0x59, 0x56, 0x2b, 0xce, 0xaa, 0x66, 0x38, 0x86,
	0xa3, 0x09, 0xb7, 0x72, 0xf3, 0x86, 0x78, 0x12, 0x0f, 0xe2, 0x57, 0xb0, 0x5c, 0x9e, 0x30, 0x1c,
	0xc7, 0xb0, 0x68, 0x90, 0xc5, 0xb6, 0x1d, 0x2e, 0x92, 0x84, 0xc1, 0xe5, 0x53, 0xa1, 0xf5, 0xdf,
	0x18, 0x74, 0xb5, 0xc1, 0xd7, 0x43, 0xe3, 0x99, 0xa1, 0x9c, 0x83, 0x9d, 0xcc, 0x2a, 0xb5, 0xb9,
	0x79, 0xc3, 0xa4, 0x6e, 0x94, 0x66, 0x32, 0xeb, 0xb4, 0x4a, 0x19, 0xd3, 0x8d, 0xa8, 0x4a, 0x99,
	0x64, 0x3d, 0x5c, 0xd3, 0xa8, 0xf1, 0xd0, 0xae, 0x6c, 0x02, 0x3a, 0xbe, 0xe8, 0xac, 0xd9, 0x96,
	0x69, 0xd7, 0xaf, 0x35, 0x69, 0x93, 0x96, 0xe8, 0xcd, 0x26, 0x65, 0x1c, 0x5f, 0x41, 0x88, 0xda,
	0xd5, 0x95, 0x2a, 0xed, 0x6a, 0x76, 0x12, 0x26, 0x61, 0xfa, 0x68, 0xe1, 0xac, 0x9a, 0xd4, 0x4c,
	0xbd, 0x68, 0x57, 0x17, 0x85, 0xc3, 0xa5, 0x1e, 0xda, 0xfc, 0x73, 0xed, 0x47, 0xa7, 0xa5, 0xed,
	0x47, 0xa7, 0xa1, 0x74, 0x84, 0x46, 0x76, 0x5c, 0x44, 0x47, 0xaa, 0x61, 0x1a, 0x76, 0x72, 0x6c,
	0xf2, 0x99, 0xe9, 0xa3, 0x85, 0x33, 0xe9, 0x68, 0xc5, 0x9e, 0x08, 0x11, 0x52, 0xa9, 0xb7, 0xaa,
	0xb0, 0x33, 0x8e, 0x5e, 0x8c, 0xb9, 0x94, 0xa8, 0x61, 0x32, 0xee, 0xae, 0xe3, 0xdf, 0x00, 0xe5,
	0x16, 0x5c, 0xaa, 0x73, 0x1a, 0xb3, 0xe2, 0xe9, 0x74, 0xf4, 0x8c, 0x4b, 0x58, 0xa9, 0x7c, 0x6a,
	0x08, 0x87, 0xf2, 0xc5, 0xd7, 0x7f, 0xfe, 0xf5, 0xc3, 0xd8, 0x67, 0xca, 0xf3, 0xf1, 0x16, 0xb1,
	0xf7, 0x61, 0x66, 0x79, 0x41, 0xf9, 0x40, 0x73, 0x5c, 0x43, 0xb7, 0xcd, 0xaf, 0x82, 0x97, 0x5a,
	0x2b, 0xfe, 0xb8, 0x62, 0x56, 0x99, 0x9a, 0x7a, 0xb1, 0x91, 0x0e, 0x82, 0xbf, 0x03, 0x74, 0x6c,
	0x89, 0xf2, 0x38, 0xf8, 0xb9, 0x34, 0x4e, 0xd2, 0x3e, 0x12, 0xf5, 0x3b, 0x82, 0xfa, 0x0d, 0xac,
	0x26, 0x12, 0x6a, 0xad, 0xf8, 0x76, 0xe8, 0xf2, 0x25, 0x9f, 0x37, 0xf0, 0x2e, 0xa0, 0x17, 0x3e,
	0x34, 0x59, 0x3c, 0x1f, 0xc3, 0x53, 0xe9, 0x4c, 0x69, 0x8f, 0x08, 0x69, 0x62, 0x08, 0x12, 0x53,
	0x7e, 0x06, 0x01, 0x75, 0x17, 0x70, 0x52, 0xcb, 0xe5, 0xb7, 0xf1, 0x9c, 0xd6, 0x64, 0xd4, 0x65,
	0x5a, 0xab, 0xe2, 0x58, 0x96, 0x5e, 0x76, 0x5c, 0x9d, 0x3b, 0xae, 0xda, 0x7d, 0x27, 0x28, 0xc3,
	0x1f, 0x49, 0xf5, 0x96, 0xaf, 0xe0, 0xcb, 0x69, 0xfd, 0x13, 0xcb, 0xf7, 0xd7, 0x0c, 0x7c, 0x17,
	0x50, 0xee, 0x93, 0x46, 0x75, 0xaf, 0x29, 0xca, 0xb8, 0x8c, 0xd4, 0x8f, 0xf7, 0x44, 0xe9, 0x73,
	0xf2, 0x90, 0x7e, 0xa8, 0x7d, 0xfa, 0xd1, 0x9d, 0x90, 0x16, 0xca, 0x2d, 0x52, 0x8b, 0x26, 0xb1,
	0xce, 0x0f, 0x49, 0x16, 0xdb, 0x8a, 0xf2, 0x09, 0x35, 0x38, 0x87, 0xd4, 0xe8, 0x1c, 0x52, 0x2f,
	0x76, 0xcf, 0x21, 0xe5, 0xbc, 0xe0, 0x99, 0x9c, 0x21, 0x43, 0xe7, 0x63, 0xa3, 0xd0, 0x7e, 0x16,
	0xe5, 0x62, 0xa1, 0x8b, 0x95, 0x0a, 0x65, 0x0c, 0x7f, 0x03, 0xe8, 0xa5, 0xd4, 0x0c, 0x94, 0xc4,
	0x99, 0xb2, 0x0f, 0xae, 0x94, 0x5f, 0xb0, 0x5e, 0xc9, 0x0b, 0xae, 0x29, 0x7c, 0x6e, 0x38, 0x57,
	0x78, 0x84, 0xe1, 0x5f, 0x01, 0xbd, 0xb2, 0x44, 0x6d, 0xea, 0x26, 0x5b, 0x52, 0xbc, 0x7a, 0xe9,
	0x32, 0x5d, 0xc7, 0xaf, 0xa7, 0x93, 0x7c, 0x9c, 0xd8, 0x48, 0x81, 0x57, 0xd4, 0xbe, 0x0c, 0x51,
	0x60, 0x56, 0xe6, 0x05, 0xd1, 0x05, 0xe5, 0xdd, 0xfd, 0xed, 0xa4, 0xee, 0x41, 0x9b, 0xaf, 0xd3,
	0x75, 0xb1, 0xc9, 0xbf, 0x05, 0x74, 0x22, 0xa5, 0x57, 0x10, 0x7d, 0x74, 0xc1, 0x5e, 0xee, 0x8f,
	0xc7, 0x14, 0x4d, 0xf0, 0xbd, 0x86, 0xa7, 0xf6, 0x50, 0x2c, 0xe2, 0xe9, 0x6a, 0x76, 0xbc, 0x9f,
	0x10, 0x07, 0x23, 0xd7, 0x92, 0xc0, 0x29, 0xca, 0x17, 0x9e, 0x52, 0x2e, 0xad, 0x15, 0x8e, 0xfd,
	0x16, 0x20, 0x39, 0x09, 0xb0, 0x10, 0xdb, 0xdc, 0xf8, 0xcd, 0xe1, 0xb0, 0x71, 0xdf, 0x1e, 0x72,
	0xff, 0xbd, 0xf0, 0xb4, 0xc8, 0xf1, 0xc3, 0x46, 0xb4, 0xf9, 0x27, 0x40, 0x13, 0xa9, 0x36, 0xc7,
	0x39, 0x46, 0x6f, 0xf6, 0xab, 0x99, 0x4f, 0x57, 0x3c, 0x8c, 0xf2, 0x96, 0x00, 0x56, 0xf1, 0xec,
	0x1e, 0x2d, 0x4f, 0x00, 0x16, 0xfe, 0x1e, 0x43, 0xf2, 0x47, 0xac, 0xcf, 0x27, 0x56, 0x7c, 0xf5,
	0xf1, 0xf5, 0xcc, 0x35, 0xa0, 0x61, 0xe9, 0x15, 0x8a, 0x33, 0x9f, 0xfc, 0x7e, 0x97, 0x85, 0x41,
	0xda, 0xe2, 0x6b, 0x28, 0x97, 0xf0, 0xbf, 0xda, 0x64, 0xb5, 0xff, 0x18, 0x72, 0x25, 0x15, 0xb2,
	0xab, 0x38, 0x1e, 0xe9, 0x62, 0x22, 0x9f, 0x1d, 0xe1, 0xc2, 0xc1, 0x70, 0x09, 0xe1, 0x44, 0x82,
	0x05, 0x8b, 0xea, 0xee, 0x88, 0x19, 0x06, 0x40, 0x17, 0xee, 0x8d, 0x23, 0xb9, 0x38, 0x58, 0xfc,
	0x3f, 0xe0, 0xc0, 0x75, 0x52, 0x5c, 0x31, 0x25, 0x96, 0xf2, 0xa5, 0xa6, 0xb3, 0xd4, 0xa0, 0xf4,
	0xee, 0x75, 0xea, 0x5e, 0x43, 0x1e, 0xb8, 0x25, 0xd7, 0x04, 0x7f, 0x02, 0x73, 0x48, 0x94, 0xbf,
	0x29, 0xea, 0x68, 0xc3, 0x61, 0x4c, 0x51, 0x54, 0x8a, 0xfc, 0x7f, 0x96, 0xf2, 0x3b, 0x1c, 0xf2,
	0x9c, 0x29, 0x9f, 0x8b, 0xaa, 0x3e, 0xc5, 0xd7, 0xb3, 0x55, 0x8d, 0x5c, 0xca, 0x60, 0xfe, 0x2d,
	0x38, 0xf8, 0x31, 0x8e, 0x90, 0x67, 0x0e, 0x05, 0x79, 0xfe, 0x1e, 0xb4, 0x3b, 0x04, 0xb6, 0x3b,
	0x04, 0x1e, 0x76, 0x88, 0xf4, 0xb8, 0x43, 0xa4, 0x27, 0x1d, 0x22, 0xed, 0x74, 0x88, 0xb4, 0xdb,
	0x21, 0x70, 0xdb, 0x23, 0x70, 0xc7, 0x23, 0xd2, 0xa6, 0x47, 0x60, 0xcb, 0x23, 0xd2, 0x7d, 0x8f,
	0x48, 0x0f, 0x3c, 0x22, 0xb5, 0x3d, 0x02, 0xdb, 0x1e, 0x81, 0x87, 0x1e, 0x91, 0x1e, 0x7b, 0x04,
	0x9e, 0x78, 0x44, 0xda, 0xf1, 0x08, 0xec, 0x7a, 0x44, 0xba, 0xed, 0x13, 0xe9, 0x8e, 0x4f, 0xe0,
	0x7b, 0x9f, 0x48, 0x3f, 0xfa, 0x04, 0x7e, 0xf1, 0x89, 0xb4, 0xe9, 0x13, 0x69, 0xcb, 0x27, 0x70,
	0xdf, 0x27, 0xf0, 0xc0, 0x27, 0xb0, 0x3c, 0x6b, 0x38, 0x2a, 0xaf, 0x51, 0x5e, 0x33, 0x6d, 0x83,
	0xa9, 0x36, 0xe5, 0x6b, 0x8e, 0x5b, 0xd7, 0x92, 0xff, 0x36, 0x35, 0xea, 0x86, 0xc6, 0xb9, 0xdd,
	0x28, 0x97, 0xc7, 0x85, 0x24, 0x73, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xee, 0x24, 0xfd, 0xb2,
	0x6c, 0x0e, 0x00, 0x00,
}
