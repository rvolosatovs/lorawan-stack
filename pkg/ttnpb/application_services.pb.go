// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/application_services.proto

package ttnpb

import (
	context "context"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

func init() {
	proto.RegisterFile("lorawan-stack/api/application_services.proto", fileDescriptor_f6c42f4fe8e3c902)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/application_services.proto", fileDescriptor_f6c42f4fe8e3c902)
}

var fileDescriptor_f6c42f4fe8e3c902 = []byte{
	// 801 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0x4f, 0x68, 0x1b, 0x47,
	0x14, 0xc6, 0x77, 0xda, 0xa2, 0xc2, 0xd6, 0x6d, 0xf1, 0x14, 0x5a, 0x58, 0xbb, 0x8f, 0xb2, 0xc5,
	0x76, 0x31, 0xd6, 0x6c, 0x6b, 0xd1, 0x16, 0x17, 0xd3, 0xe2, 0x3f, 0xc5, 0x18, 0xb7, 0xd4, 0xd8,
	0xf4, 0xa2, 0x8b, 0x59, 0xc9, 0xe3, 0xd5, 0x22, 0x79, 0x67, 0xb3, 0x33, 0xb2, 0x51, 0x8c, 0xc1,
	0xc9, 0xc9, 0xf8, 0x94, 0x10, 0x12, 0x42, 0xc8, 0x21, 0x04, 0x42, 0x7c, 0x09, 0xf8, 0xe8, 0xa3,
	0x8f, 0x3e, 0x1a, 0x72, 0xf1, 0xd1, 0xda, 0xcd, 0xc1, 0x87, 0x04, 0x7c, 0xf4, 0x31, 0xec, 0xec,
	0x2a, 0xde, 0x95, 0x64, 0x39, 0x72, 0x72, 0xd3, 0xce, 0x7c, 0xf3, 0xde, 0x6f, 0xde, 0x7b, 0xdf,
	0x48, 0x1d, 0xa9, 0x30, 0xcf, 0x5c, 0x37, 0x9d, 0x2c, 0x17, 0x66, 0xb1, 0x6c, 0x98, 0xae, 0x6d,
	0x98, 0xae, 0x5b, 0xb1, 0x8b, 0xa6, 0xb0, 0x99, 0xb3, 0xc4, 0xa9, 0xb7, 0x66, 0x17, 0x29, 0x27,
	0xae, 0xc7, 0x04, 0xc3, 0x5f, 0x09, 0xe1, 0x90, 0xf8, 0x04, 0x59, 0xcb, 0x69, 0x59, 0xcb, 0x16,
	0xa5, 0x6a, 0x81, 0x14, 0xd9, 0xaa, 0x61, 0x31, 0x8b, 0x19, 0x52, 0x56, 0xa8, 0xae, 0xc8, 0x2f,
	0xf9, 0x21, 0x7f, 0x45, 0xc7, 0xb5, 0x7e, 0x8b, 0x31, 0xab, 0x42, 0xa3, 0x2c, 0x8e, 0xc3, 0x84,
	0x4c, 0x12, 0x07, 0xd7, 0xfa, 0xe2, 0xdd, 0x77, 0x31, 0xe8, 0xaa, 0x2b, 0x6a, 0xf1, 0xe6, 0x8f,
	0x1d, 0x39, 0x2f, 0x17, 0xd9, 0xcb, 0xd4, 0x11, 0xf6, 0x8a, 0x4d, 0xbd, 0x46, 0x1a, 0x68, 0x15,
	0x79, 0xb6, 0x55, 0x12, 0xf1, 0xfe, 0xe8, 0x9b, 0x8c, 0xfa, 0xcd, 0xc4, 0x45, 0xe8, 0x05, 0x6a,
	0xd9, 0x5c, 0x78, 0x35, 0x1c, 0x20, 0x35, 0x33, 0xe5, 0x51, 0x53, 0x50, 0xfc, 0x13, 0x49, 0xd7,
	0x81, 0x44, 0xeb, 0xa9, 0x53, 0x37, 0xaa, 0x94, 0x0b, 0xad, 0xaf, 0x59, 0x99, 0xd0, 0xe8, 0x77,
	0xd1, 0xed, 0x97, 0xaf, 0xee, 0x7d, 0xb2, 0x83, 0xf4, 0x9c, 0x51, 0xe5, 0xd4, 0xe3, 0xc6, 0x46,
	0x91, 0x55, 0x2a, 0x66, 0x81, 0x79, 0xa6, 0x60, 0x1e, 0x09, 0xd7, 0x96, 0xec, 0x65, 0xde, 0xf8,
	0xb1, 0x99, 0xbc, 0x32, 0xff, 0x03, 0x0d, 0xe7, 0xe7, 0xf5, 0x39, 0x83, 0x79, 0x96, 0xe9, 0xd8,
	0x37, 0xa3, 0xc5, 0xa6, 0x08, 0xc9, 0x3d, 0x19, 0xa9, 0x69, 0xa1, 0x25, 0x22, 0xbe, 0x85, 0xd4,
	0x4f, 0x67, 0xa8, 0xc0, 0x03, 0xcd, 0xe0, 0x33, 0x54, 0x74, 0x7b, 0xbf, 0xdf, 0xe4, 0xf5, 0x7e,
	0xc6, 0x24, 0x95, 0xc5, 0xd8, 0x48, 0x0e, 0x58, 0x08, 0x95, 0xfe, 0xde, 0xc4, 0xaf, 0x91, 0xfa,
	0xd9, 0x3f, 0x36, 0x17, 0x78, 0xa8, 0x39, 0x7a, 0xb8, 0x9a, 0xc8, 0xc0, 0x1b, 0x18, 0xfd, 0x1d,
	0x30, 0xb8, 0xfe, 0x38, 0xaa, 0xf3, 0x7d, 0x84, 0xbf, 0x4c, 0x91, 0xe4, 0x7f, 0xc5, 0xd7, 0x29,
	0x7c, 0xfe, 0x5f, 0xfc, 0x31, 0xab, 0x8e, 0x77, 0x90, 0x9a, 0xf9, 0xdf, 0x5d, 0x6e, 0x3b, 0x58,
	0xd1, 0x7a, 0xb7, 0x85, 0x1f, 0x93, 0xf7, 0xcd, 0x69, 0x1d, 0x0a, 0x4f, 0xda, 0x14, 0x3e, 0xec,
	0xbf, 0xab, 0x66, 0xa6, 0x69, 0x85, 0x0a, 0x8a, 0x07, 0x3b, 0x64, 0x98, 0xbd, 0x70, 0x95, 0xf6,
	0x2d, 0x89, 0x7c, 0x4b, 0x1a, 0xbe, 0x25, 0x7f, 0x87, 0xbe, 0xd5, 0x07, 0x25, 0xc4, 0x0f, 0xc3,
	0xd0, 0xb1, 0xfb, 0x9b, 0xa3, 0x87, 0x9f, 0xab, 0xbd, 0x89, 0xd0, 0x13, 0xc5, 0x22, 0xe5, 0x1c,
	0x6f, 0xa8, 0x6a, 0xd8, 0xec, 0x05, 0xe9, 0xcc, 0x2e, 0x58, 0x9a, 0x74, 0xd1, 0x79, 0x3d, 0x2b,
	0x59, 0x86, 0xf0, 0x40, 0x67, 0x96, 0xf8, 0x21, 0xc0, 0x8f, 0x90, 0xda, 0x13, 0x5b, 0x7a, 0x7e,
	0x76, 0x8e, 0xd6, 0x30, 0xb9, 0xd2, 0xf0, 0x91, 0xb0, 0xd1, 0x9d, 0x16, 0x8e, 0x68, 0x5b, 0x9f,
	0x94, 0x1c, 0xe3, 0xfa, 0xef, 0xdd, 0x39, 0x22, 0x7c, 0xa4, 0xb2, 0x65, 0x5a, 0x93, 0x0e, 0x7d,
	0x80, 0xd4, 0x2f, 0xa4, 0x0f, 0x64, 0x48, 0x8e, 0xb3, 0x57, 0x98, 0x24, 0xd6, 0x35, 0xd0, 0xbe,
	0x6b, 0x8f, 0xc6, 0xf5, 0xbf, 0x24, 0xdb, 0x18, 0xbe, 0x2e, 0x1b, 0x7e, 0x8e, 0xd4, 0x9e, 0x78,
	0x5e, 0x2f, 0xa9, 0x5a, 0xcb, 0x34, 0xbf, 0x5f, 0xd5, 0xfe, 0x93, 0x64, 0xb3, 0xda, 0xf4, 0x35,
	0xc9, 0x42, 0xa5, 0xbd, 0x54, 0xa6, 0x35, 0x12, 0x0f, 0xf9, 0x33, 0xa4, 0x7e, 0xbd, 0x48, 0xc5,
	0x54, 0xc2, 0xb4, 0xf8, 0x97, 0xe6, 0xe4, 0x8b, 0xa9, 0x07, 0x2f, 0xa9, 0xbd, 0xe0, 0x6d, 0x3f,
	0xf9, 0x33, 0x92, 0x77, 0x42, 0x1b, 0xef, 0x92, 0x37, 0xf9, 0x88, 0xc8, 0x56, 0xbf, 0x40, 0x6a,
	0x6f, 0xd8, 0xcd, 0x64, 0x72, 0x8e, 0x73, 0x57, 0x34, 0x3c, 0xa5, 0x6e, 0xb0, 0x7e, 0xdf, 0x32,
	0xc1, 0x49, 0x95, 0x3e, 0x2d, 0x91, 0xff, 0xc4, 0x1f, 0x84, 0x3c, 0xf9, 0x14, 0x1d, 0xd6, 0x01,
	0x1d, 0xd5, 0x01, 0x1d, 0xd7, 0x41, 0x39, 0xa9, 0x83, 0x72, 0x5a, 0x07, 0xe5, 0xac, 0x0e, 0xca,
	0x79, 0x1d, 0xd0, 0x96, 0x0f, 0x68, 0xdb, 0x07, 0x65, 0xd7, 0x07, 0xb4, 0xe7, 0x83, 0xb2, 0xef,
	0x83, 0x72, 0xe0, 0x83, 0x72, 0xe8, 0x03, 0x3a, 0xf2, 0x01, 0x1d, 0xfb, 0xa0, 0x9c, 0xf8, 0x80,
	0x4e, 0x7d, 0x50, 0xce, 0x7c, 0x40, 0xe7, 0x3e, 0x28, 0x5b, 0x01, 0x28, 0xdb, 0x01, 0xa0, 0x3b,
	0x01, 0x28, 0x0f, 0x03, 0x40, 0x4f, 0x02, 0x50, 0x76, 0x03, 0x50, 0xf6, 0x02, 0x40, 0xfb, 0x01,
	0xa0, 0x83, 0x00, 0x50, 0x7e, 0xc4, 0x62, 0x44, 0x94, 0xa8, 0x28, 0xd9, 0x8e, 0xc5, 0x89, 0x43,
	0xc5, 0x3a, 0xf3, 0xca, 0x46, 0xfa, 0x6f, 0xde, 0x2d, 0x5b, 0x86, 0x10, 0x8e, 0x5b, 0x28, 0x64,
	0x64, 0xb7, 0x72, 0x6f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x15, 0x7c, 0xd7, 0x23, 0xfa, 0x08, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ApplicationRegistryClient is the client API for ApplicationRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApplicationRegistryClient interface {
	// Create a new application. This also sets the given organization or user as
	// first collaborator with all possible rights.
	Create(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*Application, error)
	// Get the application with the given identifiers, selecting the fields given
	// by the field mask. The method may return more or less fields, depending on
	// the rights of the caller.
	Get(ctx context.Context, in *GetApplicationRequest, opts ...grpc.CallOption) (*Application, error)
	// List applications. See request message for details.
	List(ctx context.Context, in *ListApplicationsRequest, opts ...grpc.CallOption) (*Applications, error)
	Update(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*Application, error)
	Delete(ctx context.Context, in *ApplicationIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
}

type applicationRegistryClient struct {
	cc *grpc.ClientConn
}

func NewApplicationRegistryClient(cc *grpc.ClientConn) ApplicationRegistryClient {
	return &applicationRegistryClient{cc}
}

func (c *applicationRegistryClient) Create(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationRegistry/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationRegistryClient) Get(ctx context.Context, in *GetApplicationRequest, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationRegistry/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationRegistryClient) List(ctx context.Context, in *ListApplicationsRequest, opts ...grpc.CallOption) (*Applications, error) {
	out := new(Applications)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationRegistry/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationRegistryClient) Update(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationRegistry/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationRegistryClient) Delete(ctx context.Context, in *ApplicationIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationRegistry/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationRegistryServer is the server API for ApplicationRegistry service.
type ApplicationRegistryServer interface {
	// Create a new application. This also sets the given organization or user as
	// first collaborator with all possible rights.
	Create(context.Context, *CreateApplicationRequest) (*Application, error)
	// Get the application with the given identifiers, selecting the fields given
	// by the field mask. The method may return more or less fields, depending on
	// the rights of the caller.
	Get(context.Context, *GetApplicationRequest) (*Application, error)
	// List applications. See request message for details.
	List(context.Context, *ListApplicationsRequest) (*Applications, error)
	Update(context.Context, *UpdateApplicationRequest) (*Application, error)
	Delete(context.Context, *ApplicationIdentifiers) (*types.Empty, error)
}

func RegisterApplicationRegistryServer(s *grpc.Server, srv ApplicationRegistryServer) {
	s.RegisterService(&_ApplicationRegistry_serviceDesc, srv)
}

func _ApplicationRegistry_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationRegistryServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationRegistry/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationRegistryServer).Create(ctx, req.(*CreateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationRegistry_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationRegistryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationRegistry/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationRegistryServer).Get(ctx, req.(*GetApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationRegistry_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationRegistryServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationRegistry/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationRegistryServer).List(ctx, req.(*ListApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationRegistry_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationRegistryServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationRegistry/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationRegistryServer).Update(ctx, req.(*UpdateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationRegistry_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationRegistryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationRegistry/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationRegistryServer).Delete(ctx, req.(*ApplicationIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApplicationRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.ApplicationRegistry",
	HandlerType: (*ApplicationRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ApplicationRegistry_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ApplicationRegistry_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ApplicationRegistry_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ApplicationRegistry_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ApplicationRegistry_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/application_services.proto",
}

// ApplicationAccessClient is the client API for ApplicationAccess service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApplicationAccessClient interface {
	ListRights(ctx context.Context, in *ApplicationIdentifiers, opts ...grpc.CallOption) (*Rights, error)
	CreateAPIKey(ctx context.Context, in *CreateApplicationAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error)
	ListAPIKeys(ctx context.Context, in *ListApplicationAPIKeysRequest, opts ...grpc.CallOption) (*APIKeys, error)
	// Update the rights of an existing application API key. To generate an API key,
	// the CreateAPIKey should be used. To delete an API key, update it
	// with zero rights.
	UpdateAPIKey(ctx context.Context, in *UpdateApplicationAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error)
	// Setting a collaborator without rights, removes them.
	SetCollaborator(ctx context.Context, in *SetApplicationCollaboratorRequest, opts ...grpc.CallOption) (*types.Empty, error)
	ListCollaborators(ctx context.Context, in *ListApplicationCollaboratorsRequest, opts ...grpc.CallOption) (*Collaborators, error)
}

type applicationAccessClient struct {
	cc *grpc.ClientConn
}

func NewApplicationAccessClient(cc *grpc.ClientConn) ApplicationAccessClient {
	return &applicationAccessClient{cc}
}

func (c *applicationAccessClient) ListRights(ctx context.Context, in *ApplicationIdentifiers, opts ...grpc.CallOption) (*Rights, error) {
	out := new(Rights)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationAccess/ListRights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationAccessClient) CreateAPIKey(ctx context.Context, in *CreateApplicationAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error) {
	out := new(APIKey)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationAccess/CreateAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationAccessClient) ListAPIKeys(ctx context.Context, in *ListApplicationAPIKeysRequest, opts ...grpc.CallOption) (*APIKeys, error) {
	out := new(APIKeys)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationAccess/ListAPIKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationAccessClient) UpdateAPIKey(ctx context.Context, in *UpdateApplicationAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error) {
	out := new(APIKey)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationAccess/UpdateAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationAccessClient) SetCollaborator(ctx context.Context, in *SetApplicationCollaboratorRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationAccess/SetCollaborator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationAccessClient) ListCollaborators(ctx context.Context, in *ListApplicationCollaboratorsRequest, opts ...grpc.CallOption) (*Collaborators, error) {
	out := new(Collaborators)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationAccess/ListCollaborators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationAccessServer is the server API for ApplicationAccess service.
type ApplicationAccessServer interface {
	ListRights(context.Context, *ApplicationIdentifiers) (*Rights, error)
	CreateAPIKey(context.Context, *CreateApplicationAPIKeyRequest) (*APIKey, error)
	ListAPIKeys(context.Context, *ListApplicationAPIKeysRequest) (*APIKeys, error)
	// Update the rights of an existing application API key. To generate an API key,
	// the CreateAPIKey should be used. To delete an API key, update it
	// with zero rights.
	UpdateAPIKey(context.Context, *UpdateApplicationAPIKeyRequest) (*APIKey, error)
	// Setting a collaborator without rights, removes them.
	SetCollaborator(context.Context, *SetApplicationCollaboratorRequest) (*types.Empty, error)
	ListCollaborators(context.Context, *ListApplicationCollaboratorsRequest) (*Collaborators, error)
}

func RegisterApplicationAccessServer(s *grpc.Server, srv ApplicationAccessServer) {
	s.RegisterService(&_ApplicationAccess_serviceDesc, srv)
}

func _ApplicationAccess_ListRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationAccessServer).ListRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationAccess/ListRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationAccessServer).ListRights(ctx, req.(*ApplicationIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationAccess_CreateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicationAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationAccessServer).CreateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationAccess/CreateAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationAccessServer).CreateAPIKey(ctx, req.(*CreateApplicationAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationAccess_ListAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicationAPIKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationAccessServer).ListAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationAccess/ListAPIKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationAccessServer).ListAPIKeys(ctx, req.(*ListApplicationAPIKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationAccess_UpdateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationAccessServer).UpdateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationAccess/UpdateAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationAccessServer).UpdateAPIKey(ctx, req.(*UpdateApplicationAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationAccess_SetCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetApplicationCollaboratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationAccessServer).SetCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationAccess/SetCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationAccessServer).SetCollaborator(ctx, req.(*SetApplicationCollaboratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationAccess_ListCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicationCollaboratorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationAccessServer).ListCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationAccess/ListCollaborators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationAccessServer).ListCollaborators(ctx, req.(*ListApplicationCollaboratorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApplicationAccess_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.ApplicationAccess",
	HandlerType: (*ApplicationAccessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRights",
			Handler:    _ApplicationAccess_ListRights_Handler,
		},
		{
			MethodName: "CreateAPIKey",
			Handler:    _ApplicationAccess_CreateAPIKey_Handler,
		},
		{
			MethodName: "ListAPIKeys",
			Handler:    _ApplicationAccess_ListAPIKeys_Handler,
		},
		{
			MethodName: "UpdateAPIKey",
			Handler:    _ApplicationAccess_UpdateAPIKey_Handler,
		},
		{
			MethodName: "SetCollaborator",
			Handler:    _ApplicationAccess_SetCollaborator_Handler,
		},
		{
			MethodName: "ListCollaborators",
			Handler:    _ApplicationAccess_ListCollaborators_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/application_services.proto",
}
