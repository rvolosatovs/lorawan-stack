// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/TheThingsNetwork/ttn/api/collaborator.proto

package ttnpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Right is the enum that defines all the different rights to do something in
// the network.
type Right int32

const (
	RightApplicationDelete        Right = 0
	RightApplicationSettings      Right = 1
	RightApplicationCollaborators Right = 2
	RightGatewayOwner             Right = 10
)

var Right_name = map[int32]string{
	0:  "APPLICATION_DELETE",
	1:  "APPLICATION_SETTINGS",
	2:  "APPLICATION_COLLABORATORS",
	10: "GATEWAY_OWNER",
}
var Right_value = map[string]int32{
	"APPLICATION_DELETE":        0,
	"APPLICATION_SETTINGS":      1,
	"APPLICATION_COLLABORATORS": 2,
	"GATEWAY_OWNER":             10,
}

func (Right) EnumDescriptor() ([]byte, []int) { return fileDescriptorCollaborator, []int{0} }

// Collaborator is the message that defines the list of rights that an user holds
// for a network entity.
type Collaborator struct {
	// username is the user's username that holds rights over a network entity.
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// rights are the rights this user holds for the network entity.
	Rights []Right `protobuf:"varint,3,rep,packed,name=rights,enum=ttn.v3.Right" json:"rights,omitempty"`
}

func (m *Collaborator) Reset()                    { *m = Collaborator{} }
func (*Collaborator) ProtoMessage()               {}
func (*Collaborator) Descriptor() ([]byte, []int) { return fileDescriptorCollaborator, []int{0} }

func (m *Collaborator) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Collaborator) GetRights() []Right {
	if m != nil {
		return m.Rights
	}
	return nil
}

func init() {
	proto.RegisterType((*Collaborator)(nil), "ttn.v3.Collaborator")
	proto.RegisterEnum("ttn.v3.Right", Right_name, Right_value)
}
func (m *Collaborator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Collaborator) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCollaborator(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Rights) > 0 {
		dAtA2 := make([]byte, len(m.Rights)*10)
		var j1 int
		for _, num := range m.Rights {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCollaborator(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func encodeFixed64Collaborator(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Collaborator(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintCollaborator(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Collaborator) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovCollaborator(uint64(l))
	}
	if len(m.Rights) > 0 {
		l = 0
		for _, e := range m.Rights {
			l += sovCollaborator(uint64(e))
		}
		n += 1 + sovCollaborator(uint64(l)) + l
	}
	return n
}

func sovCollaborator(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCollaborator(x uint64) (n int) {
	return sovCollaborator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Collaborator) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Collaborator{`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`Rights:` + fmt.Sprintf("%v", this.Rights) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCollaborator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Collaborator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollaborator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Collaborator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Collaborator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollaborator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollaborator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v Right
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCollaborator
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Right(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rights = append(m.Rights, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCollaborator
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCollaborator
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v Right
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCollaborator
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Right(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rights = append(m.Rights, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rights", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCollaborator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCollaborator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCollaborator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCollaborator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCollaborator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCollaborator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCollaborator
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCollaborator
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCollaborator(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCollaborator = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCollaborator   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/collaborator.proto", fileDescriptorCollaborator)
}

var fileDescriptorCollaborator = []byte{
	// 381 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x41, 0xcb, 0xd3, 0x30,
	0x1c, 0xc6, 0x1b, 0x5f, 0x1c, 0x33, 0x38, 0xa9, 0x41, 0x65, 0x06, 0x0d, 0x55, 0x10, 0xa6, 0x60,
	0x0b, 0x1b, 0xec, 0x6c, 0xb7, 0x95, 0x32, 0x28, 0xed, 0x6c, 0x03, 0x43, 0x2f, 0xa3, 0x1d, 0xb1,
	0x2d, 0xeb, 0x9a, 0xd2, 0x66, 0x0e, 0x6f, 0x1e, 0xa5, 0xdf, 0xa1, 0x27, 0xfd, 0x00, 0x7e, 0x0c,
	0x8f, 0x1e, 0x3d, 0x6a, 0x4f, 0x7a, 0xf3, 0x23, 0xc8, 0x32, 0x91, 0xb2, 0x8b, 0xa7, 0xe4, 0x79,
	0x9e, 0xfc, 0x12, 0xf2, 0x7f, 0xe0, 0x34, 0x4e, 0x45, 0x72, 0x88, 0xf4, 0x2d, 0xdf, 0x1b, 0x34,
	0x61, 0x34, 0x49, 0xf3, 0xb8, 0x72, 0x99, 0x38, 0xf2, 0x72, 0x67, 0x08, 0x91, 0x1b, 0x61, 0x91,
	0x1a, 0x5b, 0x9e, 0x65, 0x61, 0xc4, 0xcb, 0x50, 0xf0, 0x52, 0x2f, 0x4a, 0x2e, 0x38, 0xea, 0x09,
	0x91, 0xeb, 0x6f, 0x27, 0xf8, 0x79, 0x87, 0x8f, 0x79, 0xcc, 0x0d, 0x19, 0x47, 0x87, 0x37, 0x52,
	0x49, 0x21, 0x77, 0x67, 0xec, 0xf1, 0x4b, 0x78, 0x73, 0xde, 0xb9, 0x0c, 0x61, 0xd8, 0x3f, 0x54,
	0xac, 0xcc, 0xc3, 0x3d, 0x1b, 0x02, 0x0d, 0x8c, 0x6e, 0xf8, 0xff, 0x34, 0x7a, 0x02, 0x7b, 0x65,
	0x1a, 0x27, 0xa2, 0x1a, 0x5e, 0x69, 0x57, 0xa3, 0x5b, 0xe3, 0x81, 0x7e, 0x7e, 0x53, 0xf7, 0x4f,
	0xae, 0xff, 0x37, 0x7c, 0xf6, 0x0b, 0xc0, 0xeb, 0xd2, 0x41, 0x63, 0x88, 0xcc, 0xd5, 0xca, 0x59,
	0xce, 0x4d, 0xba, 0xf4, 0xdc, 0xcd, 0xc2, 0x72, 0x2c, 0x6a, 0xa9, 0x0a, 0xc6, 0x75, 0xa3, 0xdd,
	0x93, 0x47, 0xcc, 0xa2, 0xc8, 0xd2, 0x6d, 0x28, 0x52, 0x9e, 0x2f, 0x58, 0xc6, 0x04, 0x43, 0x53,
	0x78, 0xa7, 0xcb, 0x04, 0x16, 0xa5, 0x4b, 0xd7, 0x0e, 0x54, 0x80, 0x1f, 0xd4, 0x8d, 0x36, 0xbc,
	0xa4, 0x02, 0x26, 0xc4, 0x69, 0x42, 0xe8, 0x05, 0xbc, 0xdf, 0xe5, 0xe6, 0x9e, 0xe3, 0x98, 0x33,
	0xcf, 0x37, 0xa9, 0xe7, 0x07, 0xea, 0x35, 0xfc, 0xa8, 0x6e, 0xb4, 0x87, 0x97, 0x70, 0xf7, 0xe7,
	0x15, 0x1a, 0xc1, 0x81, 0x6d, 0x52, 0x6b, 0x6d, 0xbe, 0xda, 0x78, 0x6b, 0xd7, 0xf2, 0x55, 0x88,
	0xef, 0xd6, 0x8d, 0x76, 0x5b, 0x52, 0x76, 0x28, 0xd8, 0x31, 0x7c, 0xe7, 0x1d, 0x73, 0x56, 0xe2,
	0xfe, 0x87, 0x8f, 0x44, 0xf9, 0xfc, 0x89, 0x28, 0x33, 0xfb, 0xdb, 0x0f, 0xa2, 0xbc, 0x6f, 0x09,
	0xf8, 0xd2, 0x12, 0xf0, 0xb5, 0x25, 0xe0, 0x7b, 0x4b, 0xc0, 0xcf, 0x96, 0x28, 0xbf, 0x5b, 0x02,
	0x5e, 0x3f, 0xfd, 0x5f, 0x97, 0xc5, 0x2e, 0x3e, 0xad, 0x45, 0x14, 0xf5, 0x64, 0x1d, 0x93, 0x3f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xf7, 0x91, 0xb3, 0x1a, 0xff, 0x01, 0x00, 0x00,
}
