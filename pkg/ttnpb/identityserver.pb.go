// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/identityserver.proto

package ttnpb // import "go.thethings.network/lorawan-stack/pkg/ttnpb"

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import types "github.com/gogo/protobuf/types"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import context "context"
import grpc "google.golang.org/grpc"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type AuthInfoResponse struct {
	// Types that are valid to be assigned to AccessMethod:
	//	*AuthInfoResponse_APIKey
	//	*AuthInfoResponse_OAuthAccessToken
	AccessMethod         isAuthInfoResponse_AccessMethod `protobuf_oneof:"access_method"`
	UniversalRights      *Rights                         `protobuf:"bytes,3,opt,name=universal_rights,json=universalRights" json:"universal_rights,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *AuthInfoResponse) Reset()      { *m = AuthInfoResponse{} }
func (*AuthInfoResponse) ProtoMessage() {}
func (*AuthInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_identityserver_d0b36d67e1504cb1, []int{0}
}
func (m *AuthInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AuthInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthInfoResponse.Merge(dst, src)
}
func (m *AuthInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *AuthInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AuthInfoResponse proto.InternalMessageInfo

type isAuthInfoResponse_AccessMethod interface {
	isAuthInfoResponse_AccessMethod()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AuthInfoResponse_APIKey struct {
	APIKey *AuthInfoResponse_APIKeyAccess `protobuf:"bytes,1,opt,name=api_key,json=apiKey,oneof"`
}
type AuthInfoResponse_OAuthAccessToken struct {
	OAuthAccessToken *OAuthAccessToken `protobuf:"bytes,2,opt,name=oauth_access_token,json=oauthAccessToken,oneof"`
}

func (*AuthInfoResponse_APIKey) isAuthInfoResponse_AccessMethod()           {}
func (*AuthInfoResponse_OAuthAccessToken) isAuthInfoResponse_AccessMethod() {}

func (m *AuthInfoResponse) GetAccessMethod() isAuthInfoResponse_AccessMethod {
	if m != nil {
		return m.AccessMethod
	}
	return nil
}

func (m *AuthInfoResponse) GetAPIKey() *AuthInfoResponse_APIKeyAccess {
	if x, ok := m.GetAccessMethod().(*AuthInfoResponse_APIKey); ok {
		return x.APIKey
	}
	return nil
}

func (m *AuthInfoResponse) GetOAuthAccessToken() *OAuthAccessToken {
	if x, ok := m.GetAccessMethod().(*AuthInfoResponse_OAuthAccessToken); ok {
		return x.OAuthAccessToken
	}
	return nil
}

func (m *AuthInfoResponse) GetUniversalRights() *Rights {
	if m != nil {
		return m.UniversalRights
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AuthInfoResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AuthInfoResponse_OneofMarshaler, _AuthInfoResponse_OneofUnmarshaler, _AuthInfoResponse_OneofSizer, []interface{}{
		(*AuthInfoResponse_APIKey)(nil),
		(*AuthInfoResponse_OAuthAccessToken)(nil),
	}
}

func _AuthInfoResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AuthInfoResponse)
	// access_method
	switch x := m.AccessMethod.(type) {
	case *AuthInfoResponse_APIKey:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.APIKey); err != nil {
			return err
		}
	case *AuthInfoResponse_OAuthAccessToken:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OAuthAccessToken); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AuthInfoResponse.AccessMethod has unexpected type %T", x)
	}
	return nil
}

func _AuthInfoResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AuthInfoResponse)
	switch tag {
	case 1: // access_method.api_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AuthInfoResponse_APIKeyAccess)
		err := b.DecodeMessage(msg)
		m.AccessMethod = &AuthInfoResponse_APIKey{msg}
		return true, err
	case 2: // access_method.oauth_access_token
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OAuthAccessToken)
		err := b.DecodeMessage(msg)
		m.AccessMethod = &AuthInfoResponse_OAuthAccessToken{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AuthInfoResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AuthInfoResponse)
	// access_method
	switch x := m.AccessMethod.(type) {
	case *AuthInfoResponse_APIKey:
		s := proto.Size(x.APIKey)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AuthInfoResponse_OAuthAccessToken:
		s := proto.Size(x.OAuthAccessToken)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type AuthInfoResponse_APIKeyAccess struct {
	APIKey               `protobuf:"bytes,1,opt,name=api_key,json=apiKey,embedded=api_key" json:"api_key"`
	EntityIDs            EntityIdentifiers `protobuf:"bytes,2,opt,name=entity_ids,json=entityIds" json:"entity_ids"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *AuthInfoResponse_APIKeyAccess) Reset()      { *m = AuthInfoResponse_APIKeyAccess{} }
func (*AuthInfoResponse_APIKeyAccess) ProtoMessage() {}
func (*AuthInfoResponse_APIKeyAccess) Descriptor() ([]byte, []int) {
	return fileDescriptor_identityserver_d0b36d67e1504cb1, []int{0, 0}
}
func (m *AuthInfoResponse_APIKeyAccess) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthInfoResponse_APIKeyAccess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthInfoResponse_APIKeyAccess.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AuthInfoResponse_APIKeyAccess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthInfoResponse_APIKeyAccess.Merge(dst, src)
}
func (m *AuthInfoResponse_APIKeyAccess) XXX_Size() int {
	return m.Size()
}
func (m *AuthInfoResponse_APIKeyAccess) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthInfoResponse_APIKeyAccess.DiscardUnknown(m)
}

var xxx_messageInfo_AuthInfoResponse_APIKeyAccess proto.InternalMessageInfo

func (m *AuthInfoResponse_APIKeyAccess) GetEntityIDs() EntityIdentifiers {
	if m != nil {
		return m.EntityIDs
	}
	return EntityIdentifiers{}
}

func init() {
	proto.RegisterType((*AuthInfoResponse)(nil), "ttn.lorawan.v3.AuthInfoResponse")
	golang_proto.RegisterType((*AuthInfoResponse)(nil), "ttn.lorawan.v3.AuthInfoResponse")
	proto.RegisterType((*AuthInfoResponse_APIKeyAccess)(nil), "ttn.lorawan.v3.AuthInfoResponse.APIKeyAccess")
	golang_proto.RegisterType((*AuthInfoResponse_APIKeyAccess)(nil), "ttn.lorawan.v3.AuthInfoResponse.APIKeyAccess")
}
func (this *AuthInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthInfoResponse)
	if !ok {
		that2, ok := that.(AuthInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.AccessMethod == nil {
		if this.AccessMethod != nil {
			return false
		}
	} else if this.AccessMethod == nil {
		return false
	} else if !this.AccessMethod.Equal(that1.AccessMethod) {
		return false
	}
	if !this.UniversalRights.Equal(that1.UniversalRights) {
		return false
	}
	return true
}
func (this *AuthInfoResponse_APIKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthInfoResponse_APIKey)
	if !ok {
		that2, ok := that.(AuthInfoResponse_APIKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.APIKey.Equal(that1.APIKey) {
		return false
	}
	return true
}
func (this *AuthInfoResponse_OAuthAccessToken) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthInfoResponse_OAuthAccessToken)
	if !ok {
		that2, ok := that.(AuthInfoResponse_OAuthAccessToken)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OAuthAccessToken.Equal(that1.OAuthAccessToken) {
		return false
	}
	return true
}
func (this *AuthInfoResponse_APIKeyAccess) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthInfoResponse_APIKeyAccess)
	if !ok {
		that2, ok := that.(AuthInfoResponse_APIKeyAccess)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.APIKey.Equal(&that1.APIKey) {
		return false
	}
	if !this.EntityIDs.Equal(&that1.EntityIDs) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EntityAccess service

type EntityAccessClient interface {
	// AuthInfo returns information about the authentication that is used on the request.
	AuthInfo(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*AuthInfoResponse, error)
}

type entityAccessClient struct {
	cc *grpc.ClientConn
}

func NewEntityAccessClient(cc *grpc.ClientConn) EntityAccessClient {
	return &entityAccessClient{cc}
}

func (c *entityAccessClient) AuthInfo(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*AuthInfoResponse, error) {
	out := new(AuthInfoResponse)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EntityAccess/AuthInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EntityAccess service

type EntityAccessServer interface {
	// AuthInfo returns information about the authentication that is used on the request.
	AuthInfo(context.Context, *types.Empty) (*AuthInfoResponse, error)
}

func RegisterEntityAccessServer(s *grpc.Server, srv EntityAccessServer) {
	s.RegisterService(&_EntityAccess_serviceDesc, srv)
}

func _EntityAccess_AuthInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityAccessServer).AuthInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EntityAccess/AuthInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityAccessServer).AuthInfo(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _EntityAccess_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.EntityAccess",
	HandlerType: (*EntityAccessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthInfo",
			Handler:    _EntityAccess_AuthInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/identityserver.proto",
}

func (m *AuthInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AccessMethod != nil {
		nn1, err := m.AccessMethod.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if m.UniversalRights != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(m.UniversalRights.Size()))
		n2, err := m.UniversalRights.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *AuthInfoResponse_APIKey) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.APIKey != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(m.APIKey.Size()))
		n3, err := m.APIKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *AuthInfoResponse_OAuthAccessToken) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.OAuthAccessToken != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(m.OAuthAccessToken.Size()))
		n4, err := m.OAuthAccessToken.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *AuthInfoResponse_APIKeyAccess) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthInfoResponse_APIKeyAccess) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.APIKey.Size()))
	n5, err := m.APIKey.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x12
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.EntityIDs.Size()))
	n6, err := m.EntityIDs.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	return i, nil
}

func encodeVarintIdentityserver(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedAuthInfoResponse(r randyIdentityserver, easy bool) *AuthInfoResponse {
	this := &AuthInfoResponse{}
	oneofNumber_AccessMethod := []int32{1, 2}[r.Intn(2)]
	switch oneofNumber_AccessMethod {
	case 1:
		this.AccessMethod = NewPopulatedAuthInfoResponse_APIKey(r, easy)
	case 2:
		this.AccessMethod = NewPopulatedAuthInfoResponse_OAuthAccessToken(r, easy)
	}
	if r.Intn(10) != 0 {
		this.UniversalRights = NewPopulatedRights(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAuthInfoResponse_APIKey(r randyIdentityserver, easy bool) *AuthInfoResponse_APIKey {
	this := &AuthInfoResponse_APIKey{}
	this.APIKey = NewPopulatedAuthInfoResponse_APIKeyAccess(r, easy)
	return this
}
func NewPopulatedAuthInfoResponse_OAuthAccessToken(r randyIdentityserver, easy bool) *AuthInfoResponse_OAuthAccessToken {
	this := &AuthInfoResponse_OAuthAccessToken{}
	this.OAuthAccessToken = NewPopulatedOAuthAccessToken(r, easy)
	return this
}
func NewPopulatedAuthInfoResponse_APIKeyAccess(r randyIdentityserver, easy bool) *AuthInfoResponse_APIKeyAccess {
	this := &AuthInfoResponse_APIKeyAccess{}
	v1 := NewPopulatedAPIKey(r, easy)
	this.APIKey = *v1
	v2 := NewPopulatedEntityIdentifiers(r, easy)
	this.EntityIDs = *v2
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyIdentityserver interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneIdentityserver(r randyIdentityserver) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringIdentityserver(r randyIdentityserver) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneIdentityserver(r)
	}
	return string(tmps)
}
func randUnrecognizedIdentityserver(r randyIdentityserver, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldIdentityserver(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldIdentityserver(dAtA []byte, r randyIdentityserver, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateIdentityserver(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulateIdentityserver(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulateIdentityserver(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateIdentityserver(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateIdentityserver(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateIdentityserver(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateIdentityserver(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *AuthInfoResponse) Size() (n int) {
	var l int
	_ = l
	if m.AccessMethod != nil {
		n += m.AccessMethod.Size()
	}
	if m.UniversalRights != nil {
		l = m.UniversalRights.Size()
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	return n
}

func (m *AuthInfoResponse_APIKey) Size() (n int) {
	var l int
	_ = l
	if m.APIKey != nil {
		l = m.APIKey.Size()
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	return n
}
func (m *AuthInfoResponse_OAuthAccessToken) Size() (n int) {
	var l int
	_ = l
	if m.OAuthAccessToken != nil {
		l = m.OAuthAccessToken.Size()
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	return n
}
func (m *AuthInfoResponse_APIKeyAccess) Size() (n int) {
	var l int
	_ = l
	l = m.APIKey.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = m.EntityIDs.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	return n
}

func sovIdentityserver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozIdentityserver(x uint64) (n int) {
	return sovIdentityserver((x << 1) ^ uint64((int64(x) >> 63)))
}
func (this *AuthInfoResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthInfoResponse{`,
		`AccessMethod:` + fmt.Sprintf("%v", this.AccessMethod) + `,`,
		`UniversalRights:` + strings.Replace(fmt.Sprintf("%v", this.UniversalRights), "Rights", "Rights", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthInfoResponse_APIKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthInfoResponse_APIKey{`,
		`APIKey:` + strings.Replace(fmt.Sprintf("%v", this.APIKey), "AuthInfoResponse_APIKeyAccess", "AuthInfoResponse_APIKeyAccess", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthInfoResponse_OAuthAccessToken) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthInfoResponse_OAuthAccessToken{`,
		`OAuthAccessToken:` + strings.Replace(fmt.Sprintf("%v", this.OAuthAccessToken), "OAuthAccessToken", "OAuthAccessToken", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthInfoResponse_APIKeyAccess) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthInfoResponse_APIKeyAccess{`,
		`APIKey:` + strings.Replace(strings.Replace(this.APIKey.String(), "APIKey", "APIKey", 1), `&`, ``, 1) + `,`,
		`EntityIDs:` + strings.Replace(strings.Replace(this.EntityIDs.String(), "EntityIdentifiers", "EntityIdentifiers", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringIdentityserver(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AuthInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field APIKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AuthInfoResponse_APIKeyAccess{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AccessMethod = &AuthInfoResponse_APIKey{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OAuthAccessToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OAuthAccessToken{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AccessMethod = &AuthInfoResponse_OAuthAccessToken{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniversalRights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UniversalRights == nil {
				m.UniversalRights = &Rights{}
			}
			if err := m.UniversalRights.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthInfoResponse_APIKeyAccess) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIKeyAccess: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIKeyAccess: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field APIKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.APIKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityIDs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EntityIDs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIdentityserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthIdentityserver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipIdentityserver(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthIdentityserver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIdentityserver   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("lorawan-stack/api/identityserver.proto", fileDescriptor_identityserver_d0b36d67e1504cb1)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/identityserver.proto", fileDescriptor_identityserver_d0b36d67e1504cb1)
}

var fileDescriptor_identityserver_d0b36d67e1504cb1 = []byte{
	// 581 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x3f, 0x48, 0x1c, 0x4f,
	0x14, 0x9e, 0x51, 0xf0, 0xa7, 0xf3, 0x33, 0xf1, 0xb2, 0x04, 0x91, 0x4b, 0xf2, 0xce, 0x18, 0x08,
	0x29, 0xe2, 0x2c, 0x68, 0x95, 0xf2, 0x96, 0x08, 0x8a, 0x45, 0xc2, 0xc6, 0x22, 0xa4, 0x39, 0xf6,
	0xce, 0xb9, 0xdd, 0xe1, 0x74, 0x66, 0xd9, 0x99, 0x53, 0xae, 0x93, 0x54, 0x96, 0x81, 0x34, 0xa9,
	0x42, 0x48, 0x65, 0x69, 0x69, 0x69, 0x13, 0xb0, 0x14, 0xd2, 0x58, 0x1d, 0xee, 0x6c, 0x0a, 0x4b,
	0x4b, 0xcb, 0x70, 0xb3, 0x7b, 0x17, 0xdd, 0x23, 0xa4, 0x9b, 0x79, 0xdf, 0xf7, 0xbe, 0xf7, 0xef,
	0x23, 0xcf, 0x77, 0x64, 0x12, 0xec, 0x07, 0x62, 0x59, 0xe9, 0xa0, 0xd5, 0x71, 0x83, 0x98, 0xbb,
	0x7c, 0x9b, 0x09, 0xcd, 0x75, 0x4f, 0xb1, 0x64, 0x8f, 0x25, 0x34, 0x4e, 0xa4, 0x96, 0xce, 0x7d,
	0xad, 0x05, 0x2d, 0xb8, 0x74, 0x6f, 0xb5, 0xba, 0x1c, 0x72, 0x1d, 0x75, 0x9b, 0xb4, 0x25, 0x77,
	0xdd, 0x50, 0x86, 0xd2, 0xb5, 0xb4, 0x66, 0xb7, 0x6d, 0x7f, 0xf6, 0x63, 0x5f, 0x79, 0x7a, 0xf5,
	0x71, 0x28, 0x65, 0xb8, 0xc3, 0xac, 0x7e, 0x20, 0x84, 0xd4, 0x81, 0xe6, 0x52, 0xa8, 0x02, 0x7d,
	0x54, 0xa0, 0x23, 0x0d, 0xb6, 0x1b, 0xeb, 0x5e, 0x01, 0x3e, 0xfb, 0x5b, 0x87, 0x6d, 0xce, 0x92,
	0xa1, 0xc2, 0x93, 0x71, 0x92, 0x0c, 0xba, 0x3a, 0x2a, 0x60, 0x18, 0x87, 0x13, 0x1e, 0x46, 0xba,
	0x48, 0x5f, 0xfa, 0x31, 0x49, 0x2a, 0xf5, 0xae, 0x8e, 0x36, 0x44, 0x5b, 0xfa, 0x4c, 0xc5, 0x52,
	0x28, 0xe6, 0x6c, 0x91, 0xff, 0x82, 0x98, 0x37, 0x3a, 0xac, 0xb7, 0x80, 0x17, 0xf1, 0x8b, 0xff,
	0x57, 0x96, 0xe9, 0xdd, 0x25, 0xd0, 0x72, 0x0a, 0xad, 0xbf, 0xdd, 0xd8, 0x64, 0xbd, 0x7a, 0xab,
	0xc5, 0x94, 0xf2, 0x88, 0xe9, 0xd7, 0xa6, 0xf2, 0xc8, 0x3a, 0xf2, 0xa7, 0x82, 0x98, 0x6f, 0xb2,
	0x9e, 0xd3, 0x26, 0x8e, 0xed, 0xac, 0x11, 0x58, 0x56, 0x43, 0xcb, 0x0e, 0x13, 0x0b, 0x13, 0xb6,
	0xc0, 0x62, 0xb9, 0xc0, 0x9b, 0x41, 0x85, 0x5c, 0x6e, 0x6b, 0xc0, 0xf3, 0x1e, 0x9a, 0x7e, 0xad,
	0x52, 0x8e, 0xae, 0x23, 0xbf, 0x62, 0x35, 0x6f, 0xc5, 0x9c, 0x3a, 0xa9, 0x74, 0x05, 0xdf, 0x63,
	0x89, 0x0a, 0x76, 0x1a, 0xf9, 0xb0, 0x0b, 0x93, 0xb6, 0xca, 0x7c, 0xb9, 0x8a, 0x6f, 0x51, 0x7f,
	0x6e, 0xc4, 0xcf, 0x03, 0xd5, 0xaf, 0x98, 0xcc, 0xde, 0x9e, 0xc8, 0x79, 0x55, 0xde, 0xc8, 0x98,
	0x54, 0x4e, 0xf7, 0xa6, 0xcf, 0xfa, 0x35, 0x74, 0xde, 0xaf, 0xe1, 0xd1, 0xd8, 0xef, 0x08, 0xc9,
	0x5d, 0xd5, 0xe0, 0xdb, 0xaa, 0x18, 0xf7, 0x69, 0x39, 0x7b, 0xcd, 0x32, 0x36, 0xfe, 0x5c, 0xd7,
	0x7b, 0x30, 0x10, 0x32, 0xfd, 0xda, 0x4c, 0x01, 0xbd, 0x56, 0xfe, 0x0c, 0x2b, 0x58, 0xca, 0x9b,
	0x23, 0xf7, 0x8a, 0x2d, 0xee, 0x32, 0x1d, 0xc9, 0xed, 0x95, 0x88, 0xcc, 0xe6, 0xc4, 0xa2, 0xe1,
	0xf7, 0x64, 0x7a, 0x78, 0x23, 0x67, 0x9e, 0xe6, 0x2e, 0xa3, 0x43, 0x97, 0xd1, 0xb5, 0x81, 0xcb,
	0xaa, 0x8b, 0xff, 0xba, 0xea, 0x92, 0xf3, 0xf1, 0xe7, 0xaf, 0xcf, 0x13, 0xb3, 0x0e, 0x71, 0xed,
	0xe1, 0xb8, 0x68, 0x4b, 0xef, 0x3b, 0x3e, 0x4b, 0x01, 0x9f, 0xa7, 0x80, 0x2f, 0x52, 0x40, 0x97,
	0x29, 0xa0, 0xab, 0x14, 0xd0, 0x75, 0x0a, 0xe8, 0x26, 0x05, 0x7c, 0x60, 0x00, 0x1f, 0x1a, 0x40,
	0x47, 0x06, 0xf0, 0xb1, 0x01, 0x74, 0x62, 0x00, 0x9d, 0x1a, 0x40, 0x67, 0x06, 0xf0, 0xb9, 0x01,
	0x7c, 0x61, 0x00, 0x5d, 0x1a, 0xc0, 0x57, 0x06, 0xd0, 0xb5, 0x01, 0x7c, 0x63, 0x00, 0x1d, 0x64,
	0x80, 0x0e, 0x33, 0xc0, 0x9f, 0x32, 0x40, 0x5f, 0x32, 0xc0, 0xdf, 0x32, 0x40, 0x47, 0x19, 0xa0,
	0xe3, 0x0c, 0xf0, 0x49, 0x06, 0xf8, 0x34, 0x03, 0xfc, 0xe1, 0x65, 0x28, 0xa9, 0x8e, 0x98, 0x8e,
	0xb8, 0x08, 0x15, 0x15, 0x4c, 0xef, 0xcb, 0xa4, 0xe3, 0xde, 0x75, 0x77, 0xdc, 0x09, 0x5d, 0xad,
	0x45, 0xdc, 0x6c, 0x4e, 0xd9, 0x51, 0x57, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xea, 0xef, 0xf4,
	0xeb, 0xe5, 0x03, 0x00, 0x00,
}
