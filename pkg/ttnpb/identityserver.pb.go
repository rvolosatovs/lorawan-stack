// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/TheThingsNetwork/ttn/api/identityserver.proto

package ttnpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import google_protobuf2 "github.com/gogo/protobuf/types"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CreateUserRequest struct {
	// user_id is the ID of the user.
	UserIdentifier `protobuf:"bytes,1,opt,name=user_id,json=userId,embedded=user_id" json:"user_id"`
	// email address of the user.
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	// password is the user's unencrypted password.
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	// name is the user's full name.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *CreateUserRequest) Reset()                    { *m = CreateUserRequest{} }
func (*CreateUserRequest) ProtoMessage()               {}
func (*CreateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptorIdentityserver, []int{0} }

func (m *CreateUserRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *CreateUserRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *CreateUserRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type UpdateUserRequest struct {
	// email is the new email of the user.
	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	// name is the new name of the user.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *UpdateUserRequest) Reset()                    { *m = UpdateUserRequest{} }
func (*UpdateUserRequest) ProtoMessage()               {}
func (*UpdateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptorIdentityserver, []int{1} }

func (m *UpdateUserRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UpdateUserRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type UpdateUserPasswordRequest struct {
	// old is the user's old password.
	Old string `protobuf:"bytes,1,opt,name=old,proto3" json:"old,omitempty"`
	// new is the user's new password.
	New string `protobuf:"bytes,2,opt,name=new,proto3" json:"new,omitempty"`
}

func (m *UpdateUserPasswordRequest) Reset()      { *m = UpdateUserPasswordRequest{} }
func (*UpdateUserPasswordRequest) ProtoMessage() {}
func (*UpdateUserPasswordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{2}
}

func (m *UpdateUserPasswordRequest) GetOld() string {
	if m != nil {
		return m.Old
	}
	return ""
}

func (m *UpdateUserPasswordRequest) GetNew() string {
	if m != nil {
		return m.New
	}
	return ""
}

type CreateApplicationRequest struct {
	// application_id is the ID of the application to be created.
	ApplicationIdentifier `protobuf:"bytes,1,opt,name=application_id,json=applicationId,embedded=application_id" json:"application_id"`
	// description is the description of the application.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *CreateApplicationRequest) Reset()      { *m = CreateApplicationRequest{} }
func (*CreateApplicationRequest) ProtoMessage() {}
func (*CreateApplicationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{3}
}

func (m *CreateApplicationRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type ListApplicationsResponse struct {
	Applications []Application `protobuf:"bytes,1,rep,name=applications" json:"applications"`
}

func (m *ListApplicationsResponse) Reset()      { *m = ListApplicationsResponse{} }
func (*ListApplicationsResponse) ProtoMessage() {}
func (*ListApplicationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{4}
}

func (m *ListApplicationsResponse) GetApplications() []Application {
	if m != nil {
		return m.Applications
	}
	return nil
}

type UpdateApplicationRequest struct {
	ApplicationIdentifier `protobuf:"bytes,1,opt,name=application_id,json=applicationId,embedded=application_id" json:"application_id"`
	// description is the description of the application.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *UpdateApplicationRequest) Reset()      { *m = UpdateApplicationRequest{} }
func (*UpdateApplicationRequest) ProtoMessage() {}
func (*UpdateApplicationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{5}
}

func (m *UpdateApplicationRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type GenerateApplicationAPIKeyRequest struct {
	ApplicationIdentifier `protobuf:"bytes,1,opt,name=application_id,json=applicationId,embedded=application_id" json:"application_id"`
	// key_name is the name of the API key to be generated.
	KeyName string `protobuf:"bytes,2,opt,name=key_name,json=keyName,proto3" json:"key_name,omitempty"`
	// rights the are rights the generated API key will bear.
	Rights []Right `protobuf:"varint,3,rep,packed,name=rights,enum=ttn.v3.Right" json:"rights,omitempty"`
}

func (m *GenerateApplicationAPIKeyRequest) Reset()      { *m = GenerateApplicationAPIKeyRequest{} }
func (*GenerateApplicationAPIKeyRequest) ProtoMessage() {}
func (*GenerateApplicationAPIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{6}
}

func (m *GenerateApplicationAPIKeyRequest) GetKeyName() string {
	if m != nil {
		return m.KeyName
	}
	return ""
}

func (m *GenerateApplicationAPIKeyRequest) GetRights() []Right {
	if m != nil {
		return m.Rights
	}
	return nil
}

type RemoveApplicationAPIKeyRequest struct {
	ApplicationIdentifier `protobuf:"bytes,1,opt,name=application_id,json=applicationId,embedded=application_id" json:"application_id"`
	// key_name is the name of the API key to be removed.
	KeyName string `protobuf:"bytes,2,opt,name=key_name,json=keyName,proto3" json:"key_name,omitempty"`
}

func (m *RemoveApplicationAPIKeyRequest) Reset()      { *m = RemoveApplicationAPIKeyRequest{} }
func (*RemoveApplicationAPIKeyRequest) ProtoMessage() {}
func (*RemoveApplicationAPIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{7}
}

func (m *RemoveApplicationAPIKeyRequest) GetKeyName() string {
	if m != nil {
		return m.KeyName
	}
	return ""
}

type AddApplicationCollaboratorRequest struct {
	ApplicationIdentifier `protobuf:"bytes,1,opt,name=application_id,json=applicationId,embedded=application_id" json:"application_id"`
	Collaborator          `protobuf:"bytes,2,opt,name=collaborator,embedded=collaborator" json:"collaborator"`
}

func (m *AddApplicationCollaboratorRequest) Reset()      { *m = AddApplicationCollaboratorRequest{} }
func (*AddApplicationCollaboratorRequest) ProtoMessage() {}
func (*AddApplicationCollaboratorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{8}
}

type ListApplicationCollaboratorsResponse struct {
	Collaborators []Collaborator `protobuf:"bytes,1,rep,name=collaborators" json:"collaborators"`
}

func (m *ListApplicationCollaboratorsResponse) Reset()      { *m = ListApplicationCollaboratorsResponse{} }
func (*ListApplicationCollaboratorsResponse) ProtoMessage() {}
func (*ListApplicationCollaboratorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{9}
}

func (m *ListApplicationCollaboratorsResponse) GetCollaborators() []Collaborator {
	if m != nil {
		return m.Collaborators
	}
	return nil
}

type RemoveApplicationCollaboratorRequest struct {
	ApplicationIdentifier `protobuf:"bytes,1,opt,name=application_id,json=applicationId,embedded=application_id" json:"application_id"`
	UserIdentifier        `protobuf:"bytes,2,opt,name=user_id,json=userId,embedded=user_id" json:"user_id"`
}

func (m *RemoveApplicationCollaboratorRequest) Reset()      { *m = RemoveApplicationCollaboratorRequest{} }
func (*RemoveApplicationCollaboratorRequest) ProtoMessage() {}
func (*RemoveApplicationCollaboratorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{10}
}

type ApplicationRight struct {
	ApplicationIdentifier `protobuf:"bytes,1,opt,name=application_id,json=applicationId,embedded=application_id" json:"application_id"`
	UserIdentifier        `protobuf:"bytes,2,opt,name=user_id,json=userId,embedded=user_id" json:"user_id"`
	// right is the right that the user holds for the application.
	Right Right `protobuf:"varint,3,opt,name=right,proto3,enum=ttn.v3.Right" json:"right,omitempty"`
}

func (m *ApplicationRight) Reset()                    { *m = ApplicationRight{} }
func (*ApplicationRight) ProtoMessage()               {}
func (*ApplicationRight) Descriptor() ([]byte, []int) { return fileDescriptorIdentityserver, []int{11} }

func (m *ApplicationRight) GetRight() Right {
	if m != nil {
		return m.Right
	}
	return RIGHT_APPLICATION_DELETE
}

type ListApplicationRightsResponse struct {
	// rights is a list of rights that an user holds for an application.
	Rights []Right `protobuf:"varint,3,rep,packed,name=rights,enum=ttn.v3.Right" json:"rights,omitempty"`
}

func (m *ListApplicationRightsResponse) Reset()      { *m = ListApplicationRightsResponse{} }
func (*ListApplicationRightsResponse) ProtoMessage() {}
func (*ListApplicationRightsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{12}
}

func (m *ListApplicationRightsResponse) GetRights() []Right {
	if m != nil {
		return m.Rights
	}
	return nil
}

type CreateGatewayRequest struct {
	// gateway_id is the Gateway's ID to be created.
	GatewayIdentifier `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,embedded=gateway_id" json:"gateway_id"`
	// description is the description of the gateway.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// frequency_plan_id indicates the ID of the frequency plan.
	FrequencyPlanID string `protobuf:"bytes,3,opt,name=frequency_plan_id,json=frequencyPlanId,proto3" json:"frequency_plan_id,omitempty"`
	// privacy_settings defines the different privacy settings for this gateway.
	PrivacySettings GatewayPrivacySettings `protobuf:"bytes,4,opt,name=privacy_settings,json=privacySettings" json:"privacy_settings"`
	// auto_update indicates whether or not the gateway should be able to
	// automatically fetch and execute firmware updates.
	AutoUpdate bool `protobuf:"varint,5,opt,name=auto_update,json=autoUpdate,proto3" json:"auto_update,omitempty"`
	// platform is the gateway platform, e.g. "The Things Gateway" or "Kerklink iBTS"
	Platform string `protobuf:"bytes,6,opt,name=platform,proto3" json:"platform,omitempty"`
	// antennas is all the antennas that the gateway has.
	Antennas []GatewayAntenna `protobuf:"bytes,7,rep,name=antennas" json:"antennas"`
	// attributes is a free form map of attributes.
	Attributes map[string]string `protobuf:"bytes,8,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// cluster_address indicates the URI of the gateway server cluster to connect to,
	// in a "<ip>:<port>" format.
	ClusterAddress string `protobuf:"bytes,9,opt,name=cluster_address,json=clusterAddress,proto3" json:"cluster_address,omitempty"`
}

func (m *CreateGatewayRequest) Reset()      { *m = CreateGatewayRequest{} }
func (*CreateGatewayRequest) ProtoMessage() {}
func (*CreateGatewayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{13}
}

func (m *CreateGatewayRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateGatewayRequest) GetFrequencyPlanID() string {
	if m != nil {
		return m.FrequencyPlanID
	}
	return ""
}

func (m *CreateGatewayRequest) GetPrivacySettings() GatewayPrivacySettings {
	if m != nil {
		return m.PrivacySettings
	}
	return GatewayPrivacySettings{}
}

func (m *CreateGatewayRequest) GetAutoUpdate() bool {
	if m != nil {
		return m.AutoUpdate
	}
	return false
}

func (m *CreateGatewayRequest) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *CreateGatewayRequest) GetAntennas() []GatewayAntenna {
	if m != nil {
		return m.Antennas
	}
	return nil
}

func (m *CreateGatewayRequest) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *CreateGatewayRequest) GetClusterAddress() string {
	if m != nil {
		return m.ClusterAddress
	}
	return ""
}

type ListGatewaysResponse struct {
	Gateways []Gateway `protobuf:"bytes,1,rep,name=gateways" json:"gateways"`
}

func (m *ListGatewaysResponse) Reset()      { *m = ListGatewaysResponse{} }
func (*ListGatewaysResponse) ProtoMessage() {}
func (*ListGatewaysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{14}
}

func (m *ListGatewaysResponse) GetGateways() []Gateway {
	if m != nil {
		return m.Gateways
	}
	return nil
}

type UpdateGatewayRequest struct {
	GatewayIdentifier `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,embedded=gateway_id" json:"gateway_id"`
	// description is the description of the gateway.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// frequency_plan_id indicates the ID of the frequency plan.
	FrequencyPlanID string `protobuf:"bytes,3,opt,name=frequency_plan_id,json=frequencyPlanId,proto3" json:"frequency_plan_id,omitempty"`
	// privacy_settings defines the different privacy settings for this gateway.
	PrivacySettings GatewayPrivacySettings `protobuf:"bytes,4,opt,name=privacy_settings,json=privacySettings" json:"privacy_settings"`
	// auto_update indicates whether or not the gateway should be able to
	// automatically fetch and execute firmware updates.
	AutoUpdate bool `protobuf:"varint,5,opt,name=auto_update,json=autoUpdate,proto3" json:"auto_update,omitempty"`
	// platform is the gateway platform, e.g. "The Things Gateway" or "Kerklink iBTS"
	Platform string `protobuf:"bytes,6,opt,name=platform,proto3" json:"platform,omitempty"`
	// antennas is all the antennas that the gateway has.
	Antennas []GatewayAntenna `protobuf:"bytes,7,rep,name=antennas" json:"antennas"`
	// attributes is a free form map of attributes.
	Attributes map[string]string `protobuf:"bytes,8,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// cluster_address indicates the URI of the gateway server cluster to connect to,
	// in a "<ip>:<port>" format.
	ClusterAddress string `protobuf:"bytes,9,opt,name=cluster_address,json=clusterAddress,proto3" json:"cluster_address,omitempty"`
}

func (m *UpdateGatewayRequest) Reset()      { *m = UpdateGatewayRequest{} }
func (*UpdateGatewayRequest) ProtoMessage() {}
func (*UpdateGatewayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{15}
}

func (m *UpdateGatewayRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdateGatewayRequest) GetFrequencyPlanID() string {
	if m != nil {
		return m.FrequencyPlanID
	}
	return ""
}

func (m *UpdateGatewayRequest) GetPrivacySettings() GatewayPrivacySettings {
	if m != nil {
		return m.PrivacySettings
	}
	return GatewayPrivacySettings{}
}

func (m *UpdateGatewayRequest) GetAutoUpdate() bool {
	if m != nil {
		return m.AutoUpdate
	}
	return false
}

func (m *UpdateGatewayRequest) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *UpdateGatewayRequest) GetAntennas() []GatewayAntenna {
	if m != nil {
		return m.Antennas
	}
	return nil
}

func (m *UpdateGatewayRequest) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *UpdateGatewayRequest) GetClusterAddress() string {
	if m != nil {
		return m.ClusterAddress
	}
	return ""
}

type AddGatewayCollaboratorRequest struct {
	GatewayIdentifier `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,embedded=gateway_id" json:"gateway_id"`
	Collaborator      `protobuf:"bytes,2,opt,name=collaborator,embedded=collaborator" json:"collaborator"`
}

func (m *AddGatewayCollaboratorRequest) Reset()      { *m = AddGatewayCollaboratorRequest{} }
func (*AddGatewayCollaboratorRequest) ProtoMessage() {}
func (*AddGatewayCollaboratorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{16}
}

type ListGatewayCollaboratorsResponse struct {
	Collaborators []Collaborator `protobuf:"bytes,1,rep,name=collaborators" json:"collaborators"`
}

func (m *ListGatewayCollaboratorsResponse) Reset()      { *m = ListGatewayCollaboratorsResponse{} }
func (*ListGatewayCollaboratorsResponse) ProtoMessage() {}
func (*ListGatewayCollaboratorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{17}
}

func (m *ListGatewayCollaboratorsResponse) GetCollaborators() []Collaborator {
	if m != nil {
		return m.Collaborators
	}
	return nil
}

type ListGatewayOwnersResponse struct {
	// collaborators is the list of collaborators that have owner rights for the gateway.
	Collaborators []Collaborator `protobuf:"bytes,1,rep,name=collaborators" json:"collaborators"`
}

func (m *ListGatewayOwnersResponse) Reset()      { *m = ListGatewayOwnersResponse{} }
func (*ListGatewayOwnersResponse) ProtoMessage() {}
func (*ListGatewayOwnersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{18}
}

func (m *ListGatewayOwnersResponse) GetCollaborators() []Collaborator {
	if m != nil {
		return m.Collaborators
	}
	return nil
}

type RemoveGatewayCollaboratorRequest struct {
	GatewayIdentifier `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,embedded=gateway_id" json:"gateway_id"`
	UserIdentifier    `protobuf:"bytes,2,opt,name=user_id,json=userId,embedded=user_id" json:"user_id"`
}

func (m *RemoveGatewayCollaboratorRequest) Reset()      { *m = RemoveGatewayCollaboratorRequest{} }
func (*RemoveGatewayCollaboratorRequest) ProtoMessage() {}
func (*RemoveGatewayCollaboratorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{19}
}

type GatewayRight struct {
	GatewayIdentifier `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,embedded=gateway_id" json:"gateway_id"`
	UserIdentifier    `protobuf:"bytes,2,opt,name=user_id,json=userId,embedded=user_id" json:"user_id"`
	// right is the right this user holds for the gatewa true, (gogoproto.nullable) = false];
	Right Right `protobuf:"varint,3,opt,name=right,proto3,enum=ttn.v3.Right" json:"right,omitempty"`
}

func (m *GatewayRight) Reset()                    { *m = GatewayRight{} }
func (*GatewayRight) ProtoMessage()               {}
func (*GatewayRight) Descriptor() ([]byte, []int) { return fileDescriptorIdentityserver, []int{20} }

func (m *GatewayRight) GetRight() Right {
	if m != nil {
		return m.Right
	}
	return RIGHT_APPLICATION_DELETE
}

type ListGatewayRightsResponse struct {
	// rights is a list of rights that an user has to the gateway.
	Rights []Right `protobuf:"varint,1,rep,packed,name=rights,enum=ttn.v3.Right" json:"rights,omitempty"`
}

func (m *ListGatewayRightsResponse) Reset()      { *m = ListGatewayRightsResponse{} }
func (*ListGatewayRightsResponse) ProtoMessage() {}
func (*ListGatewayRightsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{21}
}

func (m *ListGatewayRightsResponse) GetRights() []Right {
	if m != nil {
		return m.Rights
	}
	return nil
}

type CreateClientRequest struct {
	// client_id is the client's ID to be created.
	ClientIdentifier `protobuf:"bytes,1,opt,name=client_id,json=clientId,embedded=client_id" json:"client_id"`
	// description is the description of the client.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// secret is the secret used to prove the client identity.
	Secret string `protobuf:"bytes,3,opt,name=secret,proto3" json:"secret,omitempty"`
	// callback_uri is the callback URI of the client.
	CallbackURI string `protobuf:"bytes,4,opt,name=callback_uri,json=callbackUri,proto3" json:"callback_uri,omitempty"`
	// grants denotes which OAuth2 flows can the client use to get a token.
	Grants []ClientGrant `protobuf:"varint,5,rep,packed,name=grants,enum=ttn.v3.ClientGrant" json:"grants,omitempty"`
	// scope denotes what scopes the client will have access to.
	Scope []ClientScope `protobuf:"varint,6,rep,packed,name=scope,enum=ttn.v3.ClientScope" json:"scope,omitempty"`
}

func (m *CreateClientRequest) Reset()      { *m = CreateClientRequest{} }
func (*CreateClientRequest) ProtoMessage() {}
func (*CreateClientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{22}
}

func (m *CreateClientRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateClientRequest) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *CreateClientRequest) GetCallbackURI() string {
	if m != nil {
		return m.CallbackURI
	}
	return ""
}

func (m *CreateClientRequest) GetGrants() []ClientGrant {
	if m != nil {
		return m.Grants
	}
	return nil
}

func (m *CreateClientRequest) GetScope() []ClientScope {
	if m != nil {
		return m.Scope
	}
	return nil
}

type ListClientsResponse struct {
	// clients is a list of third-party clients.
	Clients []Client `protobuf:"bytes,1,rep,name=clients" json:"clients"`
}

func (m *ListClientsResponse) Reset()      { *m = ListClientsResponse{} }
func (*ListClientsResponse) ProtoMessage() {}
func (*ListClientsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{23}
}

func (m *ListClientsResponse) GetClients() []Client {
	if m != nil {
		return m.Clients
	}
	return nil
}

type UpdateClientRequest struct {
	ClientIdentifier `protobuf:"bytes,1,opt,name=client_id,json=clientId,embedded=client_id" json:"client_id"`
	// description is the description of the client.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// secret is the secret used to prove the client identity.
	Secret string `protobuf:"bytes,3,opt,name=secret,proto3" json:"secret,omitempty"`
	// callback_uri is the callback URI of the client.
	CallbackURI string `protobuf:"bytes,4,opt,name=callback_uri,json=callbackUri,proto3" json:"callback_uri,omitempty"`
	// grants denotes which OAuth2 flows can the client use to get a token.
	Grants []ClientGrant `protobuf:"varint,5,rep,packed,name=grants,enum=ttn.v3.ClientGrant" json:"grants,omitempty"`
	// scope denotes what scopes the client will have access to.
	Scope []ClientScope `protobuf:"varint,6,rep,packed,name=scope,enum=ttn.v3.ClientScope" json:"scope,omitempty"`
}

func (m *UpdateClientRequest) Reset()      { *m = UpdateClientRequest{} }
func (*UpdateClientRequest) ProtoMessage() {}
func (*UpdateClientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{24}
}

func (m *UpdateClientRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdateClientRequest) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *UpdateClientRequest) GetCallbackURI() string {
	if m != nil {
		return m.CallbackURI
	}
	return ""
}

func (m *UpdateClientRequest) GetGrants() []ClientGrant {
	if m != nil {
		return m.Grants
	}
	return nil
}

func (m *UpdateClientRequest) GetScope() []ClientScope {
	if m != nil {
		return m.Scope
	}
	return nil
}

type SetClientOfficialRequest struct {
	ClientIdentifier `protobuf:"bytes,1,opt,name=client_id,json=clientId,embedded=client_id" json:"client_id"`
	// official denotes whether if the client is labeled as an official third-party
	// client by the tenant admin.
	OfficialLabeled bool `protobuf:"varint,2,opt,name=official_labeled,json=officialLabeled,proto3" json:"official_labeled,omitempty"`
}

func (m *SetClientOfficialRequest) Reset()      { *m = SetClientOfficialRequest{} }
func (*SetClientOfficialRequest) ProtoMessage() {}
func (*SetClientOfficialRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{25}
}

func (m *SetClientOfficialRequest) GetOfficialLabeled() bool {
	if m != nil {
		return m.OfficialLabeled
	}
	return false
}

type SetClientStateRequest struct {
	ClientIdentifier `protobuf:"bytes,1,opt,name=client_id,json=clientId,embedded=client_id" json:"client_id"`
	State            ClientState `protobuf:"varint,2,opt,name=state,proto3,enum=ttn.v3.ClientState" json:"state,omitempty"`
}

func (m *SetClientStateRequest) Reset()      { *m = SetClientStateRequest{} }
func (*SetClientStateRequest) ProtoMessage() {}
func (*SetClientStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{26}
}

func (m *SetClientStateRequest) GetState() ClientState {
	if m != nil {
		return m.State
	}
	return STATE_PENDING
}

type AddClientCollaboratorRequest struct {
	ClientIdentifier `protobuf:"bytes,1,opt,name=client_id,json=clientId,embedded=client_id" json:"client_id"`
	Collaborator     `protobuf:"bytes,2,opt,name=collaborator,embedded=collaborator" json:"collaborator"`
}

func (m *AddClientCollaboratorRequest) Reset()      { *m = AddClientCollaboratorRequest{} }
func (*AddClientCollaboratorRequest) ProtoMessage() {}
func (*AddClientCollaboratorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{27}
}

type ListClientCollaboratorsResponse struct {
	Collaborators []Collaborator `protobuf:"bytes,1,rep,name=collaborators" json:"collaborators"`
}

func (m *ListClientCollaboratorsResponse) Reset()      { *m = ListClientCollaboratorsResponse{} }
func (*ListClientCollaboratorsResponse) ProtoMessage() {}
func (*ListClientCollaboratorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{28}
}

func (m *ListClientCollaboratorsResponse) GetCollaborators() []Collaborator {
	if m != nil {
		return m.Collaborators
	}
	return nil
}

type RemoveClientCollaboratorRequest struct {
	ClientIdentifier `protobuf:"bytes,1,opt,name=client_id,json=clientId,embedded=client_id" json:"client_id"`
	UserIdentifier   `protobuf:"bytes,2,opt,name=user_id,json=userId,embedded=user_id" json:"user_id"`
}

func (m *RemoveClientCollaboratorRequest) Reset()      { *m = RemoveClientCollaboratorRequest{} }
func (*RemoveClientCollaboratorRequest) ProtoMessage() {}
func (*RemoveClientCollaboratorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{29}
}

type ClientRight struct {
	ClientIdentifier `protobuf:"bytes,1,opt,name=client_id,json=clientId,embedded=client_id" json:"client_id"`
	UserIdentifier   `protobuf:"bytes,2,opt,name=user_id,json=userId,embedded=user_id" json:"user_id"`
	// right is the right that the user holds for the client.
	Right Right `protobuf:"varint,3,opt,name=right,proto3,enum=ttn.v3.Right" json:"right,omitempty"`
}

func (m *ClientRight) Reset()                    { *m = ClientRight{} }
func (*ClientRight) ProtoMessage()               {}
func (*ClientRight) Descriptor() ([]byte, []int) { return fileDescriptorIdentityserver, []int{30} }

func (m *ClientRight) GetRight() Right {
	if m != nil {
		return m.Right
	}
	return RIGHT_APPLICATION_DELETE
}

type ListClientRightsResponse struct {
	// rights is a list of rights that an user has to the client.
	Rights []Right `protobuf:"varint,1,rep,packed,name=rights,enum=ttn.v3.Right" json:"rights,omitempty"`
}

func (m *ListClientRightsResponse) Reset()      { *m = ListClientRightsResponse{} }
func (*ListClientRightsResponse) ProtoMessage() {}
func (*ListClientRightsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{31}
}

func (m *ListClientRightsResponse) GetRights() []Right {
	if m != nil {
		return m.Rights
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateUserRequest)(nil), "ttn.v3.CreateUserRequest")
	proto.RegisterType((*UpdateUserRequest)(nil), "ttn.v3.UpdateUserRequest")
	proto.RegisterType((*UpdateUserPasswordRequest)(nil), "ttn.v3.UpdateUserPasswordRequest")
	proto.RegisterType((*CreateApplicationRequest)(nil), "ttn.v3.CreateApplicationRequest")
	proto.RegisterType((*ListApplicationsResponse)(nil), "ttn.v3.ListApplicationsResponse")
	proto.RegisterType((*UpdateApplicationRequest)(nil), "ttn.v3.UpdateApplicationRequest")
	proto.RegisterType((*GenerateApplicationAPIKeyRequest)(nil), "ttn.v3.GenerateApplicationAPIKeyRequest")
	proto.RegisterType((*RemoveApplicationAPIKeyRequest)(nil), "ttn.v3.RemoveApplicationAPIKeyRequest")
	proto.RegisterType((*AddApplicationCollaboratorRequest)(nil), "ttn.v3.AddApplicationCollaboratorRequest")
	proto.RegisterType((*ListApplicationCollaboratorsResponse)(nil), "ttn.v3.ListApplicationCollaboratorsResponse")
	proto.RegisterType((*RemoveApplicationCollaboratorRequest)(nil), "ttn.v3.RemoveApplicationCollaboratorRequest")
	proto.RegisterType((*ApplicationRight)(nil), "ttn.v3.ApplicationRight")
	proto.RegisterType((*ListApplicationRightsResponse)(nil), "ttn.v3.ListApplicationRightsResponse")
	proto.RegisterType((*CreateGatewayRequest)(nil), "ttn.v3.CreateGatewayRequest")
	proto.RegisterType((*ListGatewaysResponse)(nil), "ttn.v3.ListGatewaysResponse")
	proto.RegisterType((*UpdateGatewayRequest)(nil), "ttn.v3.UpdateGatewayRequest")
	proto.RegisterType((*AddGatewayCollaboratorRequest)(nil), "ttn.v3.AddGatewayCollaboratorRequest")
	proto.RegisterType((*ListGatewayCollaboratorsResponse)(nil), "ttn.v3.ListGatewayCollaboratorsResponse")
	proto.RegisterType((*ListGatewayOwnersResponse)(nil), "ttn.v3.ListGatewayOwnersResponse")
	proto.RegisterType((*RemoveGatewayCollaboratorRequest)(nil), "ttn.v3.RemoveGatewayCollaboratorRequest")
	proto.RegisterType((*GatewayRight)(nil), "ttn.v3.GatewayRight")
	proto.RegisterType((*ListGatewayRightsResponse)(nil), "ttn.v3.ListGatewayRightsResponse")
	proto.RegisterType((*CreateClientRequest)(nil), "ttn.v3.CreateClientRequest")
	proto.RegisterType((*ListClientsResponse)(nil), "ttn.v3.ListClientsResponse")
	proto.RegisterType((*UpdateClientRequest)(nil), "ttn.v3.UpdateClientRequest")
	proto.RegisterType((*SetClientOfficialRequest)(nil), "ttn.v3.SetClientOfficialRequest")
	proto.RegisterType((*SetClientStateRequest)(nil), "ttn.v3.SetClientStateRequest")
	proto.RegisterType((*AddClientCollaboratorRequest)(nil), "ttn.v3.AddClientCollaboratorRequest")
	proto.RegisterType((*ListClientCollaboratorsResponse)(nil), "ttn.v3.ListClientCollaboratorsResponse")
	proto.RegisterType((*RemoveClientCollaboratorRequest)(nil), "ttn.v3.RemoveClientCollaboratorRequest")
	proto.RegisterType((*ClientRight)(nil), "ttn.v3.ClientRight")
	proto.RegisterType((*ListClientRightsResponse)(nil), "ttn.v3.ListClientRightsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GtwGr service

type GtwGrClient interface {
	// PullConfiguration sends a new GatewayConfiguration, with all the latest values,
	// at connection and when a gateway's configuration is updated.
	PullConfiguration(ctx context.Context, in *GatewayIdentifier, opts ...grpc.CallOption) (GtwGr_PullConfigurationClient, error)
}

type gtwGrClient struct {
	cc *grpc.ClientConn
}

func NewGtwGrClient(cc *grpc.ClientConn) GtwGrClient {
	return &gtwGrClient{cc}
}

func (c *gtwGrClient) PullConfiguration(ctx context.Context, in *GatewayIdentifier, opts ...grpc.CallOption) (GtwGr_PullConfigurationClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GtwGr_serviceDesc.Streams[0], c.cc, "/ttn.v3.GtwGr/PullConfiguration", opts...)
	if err != nil {
		return nil, err
	}
	x := &gtwGrPullConfigurationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GtwGr_PullConfigurationClient interface {
	Recv() (*GatewayConfiguration, error)
	grpc.ClientStream
}

type gtwGrPullConfigurationClient struct {
	grpc.ClientStream
}

func (x *gtwGrPullConfigurationClient) Recv() (*GatewayConfiguration, error) {
	m := new(GatewayConfiguration)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GtwGr service

type GtwGrServer interface {
	// PullConfiguration sends a new GatewayConfiguration, with all the latest values,
	// at connection and when a gateway's configuration is updated.
	PullConfiguration(*GatewayIdentifier, GtwGr_PullConfigurationServer) error
}

func RegisterGtwGrServer(s *grpc.Server, srv GtwGrServer) {
	s.RegisterService(&_GtwGr_serviceDesc, srv)
}

func _GtwGr_PullConfiguration_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GatewayIdentifier)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GtwGrServer).PullConfiguration(m, &gtwGrPullConfigurationServer{stream})
}

type GtwGr_PullConfigurationServer interface {
	Send(*GatewayConfiguration) error
	grpc.ServerStream
}

type gtwGrPullConfigurationServer struct {
	grpc.ServerStream
}

func (x *gtwGrPullConfigurationServer) Send(m *GatewayConfiguration) error {
	return x.ServerStream.SendMsg(m)
}

var _GtwGr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.v3.GtwGr",
	HandlerType: (*GtwGrServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullConfiguration",
			Handler:       _GtwGr_PullConfiguration_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/TheThingsNetwork/ttn/api/identityserver.proto",
}

// Client API for IsUser service

type IsUserClient interface {
	// CreateUser creates a new user on the network.
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// GetUser returns the profile of an user by ID. If the user identifier is empty it
	// returns the profile of the authenticated user.
	GetUser(ctx context.Context, in *UserIdentifier, opts ...grpc.CallOption) (*User, error)
	// UpdateUser edits the profile of the authenticated user.
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// UpdateUserPassword sets a new password for the authenticated user account.
	UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// DeleteUser permantly deletes the user account of the authenticated user.
	DeleteUser(ctx context.Context, in *google_protobuf2.Empty, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
}

type isUserClient struct {
	cc *grpc.ClientConn
}

func NewIsUserClient(cc *grpc.ClientConn) IsUserClient {
	return &isUserClient{cc}
}

func (c *isUserClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsUser/CreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isUserClient) GetUser(ctx context.Context, in *UserIdentifier, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/ttn.v3.IsUser/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isUserClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsUser/UpdateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isUserClient) UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsUser/UpdateUserPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isUserClient) DeleteUser(ctx context.Context, in *google_protobuf2.Empty, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsUser/DeleteUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IsUser service

type IsUserServer interface {
	// CreateUser creates a new user on the network.
	CreateUser(context.Context, *CreateUserRequest) (*google_protobuf2.Empty, error)
	// GetUser returns the profile of an user by ID. If the user identifier is empty it
	// returns the profile of the authenticated user.
	GetUser(context.Context, *UserIdentifier) (*User, error)
	// UpdateUser edits the profile of the authenticated user.
	UpdateUser(context.Context, *UpdateUserRequest) (*google_protobuf2.Empty, error)
	// UpdateUserPassword sets a new password for the authenticated user account.
	UpdateUserPassword(context.Context, *UpdateUserPasswordRequest) (*google_protobuf2.Empty, error)
	// DeleteUser permantly deletes the user account of the authenticated user.
	DeleteUser(context.Context, *google_protobuf2.Empty) (*google_protobuf2.Empty, error)
}

func RegisterIsUserServer(s *grpc.Server, srv IsUserServer) {
	s.RegisterService(&_IsUser_serviceDesc, srv)
}

func _IsUser_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsUserServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsUser/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsUserServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsUser_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsUserServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsUser/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsUserServer).GetUser(ctx, req.(*UserIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsUser_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsUserServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsUser/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsUserServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsUser_UpdateUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsUserServer).UpdateUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsUser/UpdateUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsUserServer).UpdateUserPassword(ctx, req.(*UpdateUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsUser_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf2.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsUserServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsUser/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsUserServer).DeleteUser(ctx, req.(*google_protobuf2.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _IsUser_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.v3.IsUser",
	HandlerType: (*IsUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _IsUser_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _IsUser_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _IsUser_UpdateUser_Handler,
		},
		{
			MethodName: "UpdateUserPassword",
			Handler:    _IsUser_UpdateUserPassword_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _IsUser_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/ttn/api/identityserver.proto",
}

// Client API for IsApplication service

type IsApplicationClient interface {
	// CreateApplication creates a new application on the network.
	CreateApplication(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// GetApplication finds an application by ID and retrieves it.
	GetApplication(ctx context.Context, in *ApplicationIdentifier, opts ...grpc.CallOption) (*Application, error)
	// ListApplications returns all the applications where the authenticated user
	// has access to.
	ListApplications(ctx context.Context, in *google_protobuf2.Empty, opts ...grpc.CallOption) (*ListApplicationsResponse, error)
	// UpdateApplication edits an application.
	UpdateApplication(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// DeleteApplication permantly deletes an application.
	DeleteApplication(ctx context.Context, in *ApplicationIdentifier, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// GenerateApplicationAPIKey generates a new API key for a given application
	// and returns it.
	GenerateApplicationAPIKey(ctx context.Context, in *GenerateApplicationAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error)
	// RemoveApplicationAPIKey removes a given API key from an application.
	RemoveApplicationAPIKey(ctx context.Context, in *RemoveApplicationAPIKeyRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// AddApplicationCollaborator adds an user as collaborator of an application.
	AddApplicationCollaborator(ctx context.Context, in *AddApplicationCollaboratorRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// ListApplicationCollaborators returns all the collaborators of a given application.
	ListApplicationCollaborators(ctx context.Context, in *ApplicationIdentifier, opts ...grpc.CallOption) (*ListApplicationCollaboratorsResponse, error)
	// RemoveApplicationCollaborator removes a collaborator from an application.
	RemoveApplicationCollaborator(ctx context.Context, in *RemoveApplicationCollaboratorRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// AddApplicationRight grants a given right to a given user for a given application.
	AddApplicationRight(ctx context.Context, in *ApplicationRight, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// ListApplicationRights returns all the rights that the authenticated user has
	// for a given application.
	ListApplicationRights(ctx context.Context, in *ApplicationIdentifier, opts ...grpc.CallOption) (*ListApplicationRightsResponse, error)
	// RemoveApplicationRight revokes a right to an application collaborator.
	RemoveApplicationRight(ctx context.Context, in *ApplicationRight, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
}

type isApplicationClient struct {
	cc *grpc.ClientConn
}

func NewIsApplicationClient(cc *grpc.ClientConn) IsApplicationClient {
	return &isApplicationClient{cc}
}

func (c *isApplicationClient) CreateApplication(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsApplication/CreateApplication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isApplicationClient) GetApplication(ctx context.Context, in *ApplicationIdentifier, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := grpc.Invoke(ctx, "/ttn.v3.IsApplication/GetApplication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isApplicationClient) ListApplications(ctx context.Context, in *google_protobuf2.Empty, opts ...grpc.CallOption) (*ListApplicationsResponse, error) {
	out := new(ListApplicationsResponse)
	err := grpc.Invoke(ctx, "/ttn.v3.IsApplication/ListApplications", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isApplicationClient) UpdateApplication(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsApplication/UpdateApplication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isApplicationClient) DeleteApplication(ctx context.Context, in *ApplicationIdentifier, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsApplication/DeleteApplication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isApplicationClient) GenerateApplicationAPIKey(ctx context.Context, in *GenerateApplicationAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error) {
	out := new(APIKey)
	err := grpc.Invoke(ctx, "/ttn.v3.IsApplication/GenerateApplicationAPIKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isApplicationClient) RemoveApplicationAPIKey(ctx context.Context, in *RemoveApplicationAPIKeyRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsApplication/RemoveApplicationAPIKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isApplicationClient) AddApplicationCollaborator(ctx context.Context, in *AddApplicationCollaboratorRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsApplication/AddApplicationCollaborator", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isApplicationClient) ListApplicationCollaborators(ctx context.Context, in *ApplicationIdentifier, opts ...grpc.CallOption) (*ListApplicationCollaboratorsResponse, error) {
	out := new(ListApplicationCollaboratorsResponse)
	err := grpc.Invoke(ctx, "/ttn.v3.IsApplication/ListApplicationCollaborators", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isApplicationClient) RemoveApplicationCollaborator(ctx context.Context, in *RemoveApplicationCollaboratorRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsApplication/RemoveApplicationCollaborator", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isApplicationClient) AddApplicationRight(ctx context.Context, in *ApplicationRight, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsApplication/AddApplicationRight", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isApplicationClient) ListApplicationRights(ctx context.Context, in *ApplicationIdentifier, opts ...grpc.CallOption) (*ListApplicationRightsResponse, error) {
	out := new(ListApplicationRightsResponse)
	err := grpc.Invoke(ctx, "/ttn.v3.IsApplication/ListApplicationRights", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isApplicationClient) RemoveApplicationRight(ctx context.Context, in *ApplicationRight, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsApplication/RemoveApplicationRight", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IsApplication service

type IsApplicationServer interface {
	// CreateApplication creates a new application on the network.
	CreateApplication(context.Context, *CreateApplicationRequest) (*google_protobuf2.Empty, error)
	// GetApplication finds an application by ID and retrieves it.
	GetApplication(context.Context, *ApplicationIdentifier) (*Application, error)
	// ListApplications returns all the applications where the authenticated user
	// has access to.
	ListApplications(context.Context, *google_protobuf2.Empty) (*ListApplicationsResponse, error)
	// UpdateApplication edits an application.
	UpdateApplication(context.Context, *UpdateApplicationRequest) (*google_protobuf2.Empty, error)
	// DeleteApplication permantly deletes an application.
	DeleteApplication(context.Context, *ApplicationIdentifier) (*google_protobuf2.Empty, error)
	// GenerateApplicationAPIKey generates a new API key for a given application
	// and returns it.
	GenerateApplicationAPIKey(context.Context, *GenerateApplicationAPIKeyRequest) (*APIKey, error)
	// RemoveApplicationAPIKey removes a given API key from an application.
	RemoveApplicationAPIKey(context.Context, *RemoveApplicationAPIKeyRequest) (*google_protobuf2.Empty, error)
	// AddApplicationCollaborator adds an user as collaborator of an application.
	AddApplicationCollaborator(context.Context, *AddApplicationCollaboratorRequest) (*google_protobuf2.Empty, error)
	// ListApplicationCollaborators returns all the collaborators of a given application.
	ListApplicationCollaborators(context.Context, *ApplicationIdentifier) (*ListApplicationCollaboratorsResponse, error)
	// RemoveApplicationCollaborator removes a collaborator from an application.
	RemoveApplicationCollaborator(context.Context, *RemoveApplicationCollaboratorRequest) (*google_protobuf2.Empty, error)
	// AddApplicationRight grants a given right to a given user for a given application.
	AddApplicationRight(context.Context, *ApplicationRight) (*google_protobuf2.Empty, error)
	// ListApplicationRights returns all the rights that the authenticated user has
	// for a given application.
	ListApplicationRights(context.Context, *ApplicationIdentifier) (*ListApplicationRightsResponse, error)
	// RemoveApplicationRight revokes a right to an application collaborator.
	RemoveApplicationRight(context.Context, *ApplicationRight) (*google_protobuf2.Empty, error)
}

func RegisterIsApplicationServer(s *grpc.Server, srv IsApplicationServer) {
	s.RegisterService(&_IsApplication_serviceDesc, srv)
}

func _IsApplication_CreateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsApplicationServer).CreateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsApplication/CreateApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsApplicationServer).CreateApplication(ctx, req.(*CreateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsApplication_GetApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsApplicationServer).GetApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsApplication/GetApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsApplicationServer).GetApplication(ctx, req.(*ApplicationIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsApplication_ListApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf2.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsApplicationServer).ListApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsApplication/ListApplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsApplicationServer).ListApplications(ctx, req.(*google_protobuf2.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsApplication_UpdateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsApplicationServer).UpdateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsApplication/UpdateApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsApplicationServer).UpdateApplication(ctx, req.(*UpdateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsApplication_DeleteApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsApplicationServer).DeleteApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsApplication/DeleteApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsApplicationServer).DeleteApplication(ctx, req.(*ApplicationIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsApplication_GenerateApplicationAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateApplicationAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsApplicationServer).GenerateApplicationAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsApplication/GenerateApplicationAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsApplicationServer).GenerateApplicationAPIKey(ctx, req.(*GenerateApplicationAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsApplication_RemoveApplicationAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveApplicationAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsApplicationServer).RemoveApplicationAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsApplication/RemoveApplicationAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsApplicationServer).RemoveApplicationAPIKey(ctx, req.(*RemoveApplicationAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsApplication_AddApplicationCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddApplicationCollaboratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsApplicationServer).AddApplicationCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsApplication/AddApplicationCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsApplicationServer).AddApplicationCollaborator(ctx, req.(*AddApplicationCollaboratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsApplication_ListApplicationCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsApplicationServer).ListApplicationCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsApplication/ListApplicationCollaborators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsApplicationServer).ListApplicationCollaborators(ctx, req.(*ApplicationIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsApplication_RemoveApplicationCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveApplicationCollaboratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsApplicationServer).RemoveApplicationCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsApplication/RemoveApplicationCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsApplicationServer).RemoveApplicationCollaborator(ctx, req.(*RemoveApplicationCollaboratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsApplication_AddApplicationRight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationRight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsApplicationServer).AddApplicationRight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsApplication/AddApplicationRight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsApplicationServer).AddApplicationRight(ctx, req.(*ApplicationRight))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsApplication_ListApplicationRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsApplicationServer).ListApplicationRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsApplication/ListApplicationRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsApplicationServer).ListApplicationRights(ctx, req.(*ApplicationIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsApplication_RemoveApplicationRight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationRight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsApplicationServer).RemoveApplicationRight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsApplication/RemoveApplicationRight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsApplicationServer).RemoveApplicationRight(ctx, req.(*ApplicationRight))
	}
	return interceptor(ctx, in, info, handler)
}

var _IsApplication_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.v3.IsApplication",
	HandlerType: (*IsApplicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateApplication",
			Handler:    _IsApplication_CreateApplication_Handler,
		},
		{
			MethodName: "GetApplication",
			Handler:    _IsApplication_GetApplication_Handler,
		},
		{
			MethodName: "ListApplications",
			Handler:    _IsApplication_ListApplications_Handler,
		},
		{
			MethodName: "UpdateApplication",
			Handler:    _IsApplication_UpdateApplication_Handler,
		},
		{
			MethodName: "DeleteApplication",
			Handler:    _IsApplication_DeleteApplication_Handler,
		},
		{
			MethodName: "GenerateApplicationAPIKey",
			Handler:    _IsApplication_GenerateApplicationAPIKey_Handler,
		},
		{
			MethodName: "RemoveApplicationAPIKey",
			Handler:    _IsApplication_RemoveApplicationAPIKey_Handler,
		},
		{
			MethodName: "AddApplicationCollaborator",
			Handler:    _IsApplication_AddApplicationCollaborator_Handler,
		},
		{
			MethodName: "ListApplicationCollaborators",
			Handler:    _IsApplication_ListApplicationCollaborators_Handler,
		},
		{
			MethodName: "RemoveApplicationCollaborator",
			Handler:    _IsApplication_RemoveApplicationCollaborator_Handler,
		},
		{
			MethodName: "AddApplicationRight",
			Handler:    _IsApplication_AddApplicationRight_Handler,
		},
		{
			MethodName: "ListApplicationRights",
			Handler:    _IsApplication_ListApplicationRights_Handler,
		},
		{
			MethodName: "RemoveApplicationRight",
			Handler:    _IsApplication_RemoveApplicationRight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/ttn/api/identityserver.proto",
}

// Client API for IsGateway service

type IsGatewayClient interface {
	// CreateGateway creates a new gateway on the network and returns it.
	CreateGateway(ctx context.Context, in *CreateGatewayRequest, opts ...grpc.CallOption) (*Gateway, error)
	// GetGateway finds a gateway by ID and retrieves it.
	GetGateway(ctx context.Context, in *GatewayIdentifier, opts ...grpc.CallOption) (*Gateway, error)
	// ListGateways returns all the gateways which the authenticated user
	// has access to.
	ListGateways(ctx context.Context, in *google_protobuf2.Empty, opts ...grpc.CallOption) (*ListGatewaysResponse, error)
	// UpdateGateway edits a gateway and retrieves the updated version.
	UpdateGateway(ctx context.Context, in *UpdateGatewayRequest, opts ...grpc.CallOption) (*Gateway, error)
	// DeleteGateway permantly deletes a gateway.
	DeleteGateway(ctx context.Context, in *GatewayIdentifier, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// AddGatewayCollaborator makes an user collaborator a gateway.
	AddGatewayCollaborator(ctx context.Context, in *AddGatewayCollaboratorRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// ListGatewayCollaborators returns all the collaborators for a given gateway.
	ListGatewayCollaborators(ctx context.Context, in *GatewayIdentifier, opts ...grpc.CallOption) (*ListGatewayCollaboratorsResponse, error)
	// ListGatewayOwners returns all the collaborators that are owners of a gateway.
	ListGatewayOwners(ctx context.Context, in *GatewayIdentifier, opts ...grpc.CallOption) (*ListGatewayOwnersResponse, error)
	// RemoveGatewayCollaborator revokes all the rights that a collaborator has to
	// a given gateway.
	RemoveGatewayCollaborator(ctx context.Context, in *RemoveGatewayCollaboratorRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// AddGatewayRight grants a right to a given user for a given gateway.
	AddGatewayRight(ctx context.Context, in *GatewayRight, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// ListGatewayRights returns all the rights that the authenticated user has
	// to a given gateway.
	ListGatewayRights(ctx context.Context, in *GatewayIdentifier, opts ...grpc.CallOption) (*ListGatewayRightsResponse, error)
	// RemoveGatewayRight revokes a given right from a given gateway collaborator
	RemoveGatewayRight(ctx context.Context, in *GatewayRight, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
}

type isGatewayClient struct {
	cc *grpc.ClientConn
}

func NewIsGatewayClient(cc *grpc.ClientConn) IsGatewayClient {
	return &isGatewayClient{cc}
}

func (c *isGatewayClient) CreateGateway(ctx context.Context, in *CreateGatewayRequest, opts ...grpc.CallOption) (*Gateway, error) {
	out := new(Gateway)
	err := grpc.Invoke(ctx, "/ttn.v3.IsGateway/CreateGateway", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isGatewayClient) GetGateway(ctx context.Context, in *GatewayIdentifier, opts ...grpc.CallOption) (*Gateway, error) {
	out := new(Gateway)
	err := grpc.Invoke(ctx, "/ttn.v3.IsGateway/GetGateway", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isGatewayClient) ListGateways(ctx context.Context, in *google_protobuf2.Empty, opts ...grpc.CallOption) (*ListGatewaysResponse, error) {
	out := new(ListGatewaysResponse)
	err := grpc.Invoke(ctx, "/ttn.v3.IsGateway/ListGateways", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isGatewayClient) UpdateGateway(ctx context.Context, in *UpdateGatewayRequest, opts ...grpc.CallOption) (*Gateway, error) {
	out := new(Gateway)
	err := grpc.Invoke(ctx, "/ttn.v3.IsGateway/UpdateGateway", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isGatewayClient) DeleteGateway(ctx context.Context, in *GatewayIdentifier, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsGateway/DeleteGateway", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isGatewayClient) AddGatewayCollaborator(ctx context.Context, in *AddGatewayCollaboratorRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsGateway/AddGatewayCollaborator", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isGatewayClient) ListGatewayCollaborators(ctx context.Context, in *GatewayIdentifier, opts ...grpc.CallOption) (*ListGatewayCollaboratorsResponse, error) {
	out := new(ListGatewayCollaboratorsResponse)
	err := grpc.Invoke(ctx, "/ttn.v3.IsGateway/ListGatewayCollaborators", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isGatewayClient) ListGatewayOwners(ctx context.Context, in *GatewayIdentifier, opts ...grpc.CallOption) (*ListGatewayOwnersResponse, error) {
	out := new(ListGatewayOwnersResponse)
	err := grpc.Invoke(ctx, "/ttn.v3.IsGateway/ListGatewayOwners", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isGatewayClient) RemoveGatewayCollaborator(ctx context.Context, in *RemoveGatewayCollaboratorRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsGateway/RemoveGatewayCollaborator", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isGatewayClient) AddGatewayRight(ctx context.Context, in *GatewayRight, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsGateway/AddGatewayRight", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isGatewayClient) ListGatewayRights(ctx context.Context, in *GatewayIdentifier, opts ...grpc.CallOption) (*ListGatewayRightsResponse, error) {
	out := new(ListGatewayRightsResponse)
	err := grpc.Invoke(ctx, "/ttn.v3.IsGateway/ListGatewayRights", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isGatewayClient) RemoveGatewayRight(ctx context.Context, in *GatewayRight, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsGateway/RemoveGatewayRight", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IsGateway service

type IsGatewayServer interface {
	// CreateGateway creates a new gateway on the network and returns it.
	CreateGateway(context.Context, *CreateGatewayRequest) (*Gateway, error)
	// GetGateway finds a gateway by ID and retrieves it.
	GetGateway(context.Context, *GatewayIdentifier) (*Gateway, error)
	// ListGateways returns all the gateways which the authenticated user
	// has access to.
	ListGateways(context.Context, *google_protobuf2.Empty) (*ListGatewaysResponse, error)
	// UpdateGateway edits a gateway and retrieves the updated version.
	UpdateGateway(context.Context, *UpdateGatewayRequest) (*Gateway, error)
	// DeleteGateway permantly deletes a gateway.
	DeleteGateway(context.Context, *GatewayIdentifier) (*google_protobuf2.Empty, error)
	// AddGatewayCollaborator makes an user collaborator a gateway.
	AddGatewayCollaborator(context.Context, *AddGatewayCollaboratorRequest) (*google_protobuf2.Empty, error)
	// ListGatewayCollaborators returns all the collaborators for a given gateway.
	ListGatewayCollaborators(context.Context, *GatewayIdentifier) (*ListGatewayCollaboratorsResponse, error)
	// ListGatewayOwners returns all the collaborators that are owners of a gateway.
	ListGatewayOwners(context.Context, *GatewayIdentifier) (*ListGatewayOwnersResponse, error)
	// RemoveGatewayCollaborator revokes all the rights that a collaborator has to
	// a given gateway.
	RemoveGatewayCollaborator(context.Context, *RemoveGatewayCollaboratorRequest) (*google_protobuf2.Empty, error)
	// AddGatewayRight grants a right to a given user for a given gateway.
	AddGatewayRight(context.Context, *GatewayRight) (*google_protobuf2.Empty, error)
	// ListGatewayRights returns all the rights that the authenticated user has
	// to a given gateway.
	ListGatewayRights(context.Context, *GatewayIdentifier) (*ListGatewayRightsResponse, error)
	// RemoveGatewayRight revokes a given right from a given gateway collaborator
	RemoveGatewayRight(context.Context, *GatewayRight) (*google_protobuf2.Empty, error)
}

func RegisterIsGatewayServer(s *grpc.Server, srv IsGatewayServer) {
	s.RegisterService(&_IsGateway_serviceDesc, srv)
}

func _IsGateway_CreateGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsGatewayServer).CreateGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsGateway/CreateGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsGatewayServer).CreateGateway(ctx, req.(*CreateGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsGateway_GetGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsGatewayServer).GetGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsGateway/GetGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsGatewayServer).GetGateway(ctx, req.(*GatewayIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsGateway_ListGateways_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf2.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsGatewayServer).ListGateways(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsGateway/ListGateways",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsGatewayServer).ListGateways(ctx, req.(*google_protobuf2.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsGateway_UpdateGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsGatewayServer).UpdateGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsGateway/UpdateGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsGatewayServer).UpdateGateway(ctx, req.(*UpdateGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsGateway_DeleteGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsGatewayServer).DeleteGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsGateway/DeleteGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsGatewayServer).DeleteGateway(ctx, req.(*GatewayIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsGateway_AddGatewayCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGatewayCollaboratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsGatewayServer).AddGatewayCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsGateway/AddGatewayCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsGatewayServer).AddGatewayCollaborator(ctx, req.(*AddGatewayCollaboratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsGateway_ListGatewayCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsGatewayServer).ListGatewayCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsGateway/ListGatewayCollaborators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsGatewayServer).ListGatewayCollaborators(ctx, req.(*GatewayIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsGateway_ListGatewayOwners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsGatewayServer).ListGatewayOwners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsGateway/ListGatewayOwners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsGatewayServer).ListGatewayOwners(ctx, req.(*GatewayIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsGateway_RemoveGatewayCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveGatewayCollaboratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsGatewayServer).RemoveGatewayCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsGateway/RemoveGatewayCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsGatewayServer).RemoveGatewayCollaborator(ctx, req.(*RemoveGatewayCollaboratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsGateway_AddGatewayRight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayRight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsGatewayServer).AddGatewayRight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsGateway/AddGatewayRight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsGatewayServer).AddGatewayRight(ctx, req.(*GatewayRight))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsGateway_ListGatewayRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsGatewayServer).ListGatewayRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsGateway/ListGatewayRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsGatewayServer).ListGatewayRights(ctx, req.(*GatewayIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsGateway_RemoveGatewayRight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayRight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsGatewayServer).RemoveGatewayRight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsGateway/RemoveGatewayRight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsGatewayServer).RemoveGatewayRight(ctx, req.(*GatewayRight))
	}
	return interceptor(ctx, in, info, handler)
}

var _IsGateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.v3.IsGateway",
	HandlerType: (*IsGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGateway",
			Handler:    _IsGateway_CreateGateway_Handler,
		},
		{
			MethodName: "GetGateway",
			Handler:    _IsGateway_GetGateway_Handler,
		},
		{
			MethodName: "ListGateways",
			Handler:    _IsGateway_ListGateways_Handler,
		},
		{
			MethodName: "UpdateGateway",
			Handler:    _IsGateway_UpdateGateway_Handler,
		},
		{
			MethodName: "DeleteGateway",
			Handler:    _IsGateway_DeleteGateway_Handler,
		},
		{
			MethodName: "AddGatewayCollaborator",
			Handler:    _IsGateway_AddGatewayCollaborator_Handler,
		},
		{
			MethodName: "ListGatewayCollaborators",
			Handler:    _IsGateway_ListGatewayCollaborators_Handler,
		},
		{
			MethodName: "ListGatewayOwners",
			Handler:    _IsGateway_ListGatewayOwners_Handler,
		},
		{
			MethodName: "RemoveGatewayCollaborator",
			Handler:    _IsGateway_RemoveGatewayCollaborator_Handler,
		},
		{
			MethodName: "AddGatewayRight",
			Handler:    _IsGateway_AddGatewayRight_Handler,
		},
		{
			MethodName: "ListGatewayRights",
			Handler:    _IsGateway_ListGatewayRights_Handler,
		},
		{
			MethodName: "RemoveGatewayRight",
			Handler:    _IsGateway_RemoveGatewayRight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/ttn/api/identityserver.proto",
}

// Client API for IsClient service

type IsClientClient interface {
	// CreateClient creates a new client on the network.
	CreateClient(ctx context.Context, in *CreateClientRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// GetClient finds a client by ID and retrieves it.
	GetClient(ctx context.Context, in *ClientIdentifier, opts ...grpc.CallOption) (*Client, error)
	// ListClients returns all the clients which the authenticated has access to.
	ListClients(ctx context.Context, in *google_protobuf2.Empty, opts ...grpc.CallOption) (*ListClientsResponse, error)
	// UpdateClient edits a client.
	UpdateClient(ctx context.Context, in *UpdateClientRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// DeleteClient permantly deletes a client.
	DeleteClient(ctx context.Context, in *ClientIdentifier, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// SetClientOfficial allows to a tenant admin to add or remove the official
	// distinguise "official" label of a third-party client.
	SetClientOfficial(ctx context.Context, in *SetClientOfficialRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// SetClientState allows to the tenant admin to set the reviewing state of
	// a third-party client request.
	SetClientState(ctx context.Context, in *SetClientStateRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// AddClientCollaborator makes an user collaborator of a client.
	AddClientCollaborator(ctx context.Context, in *AddClientCollaboratorRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// ListClientCollaborators returns all the collaborators for a given client.
	ListClientCollaborators(ctx context.Context, in *ClientIdentifier, opts ...grpc.CallOption) (*ListClientCollaboratorsResponse, error)
	// RemoveClientCollaborator revokes all the rights that a collaborator has to
	// a given client.
	RemoveClientCollaborator(ctx context.Context, in *RemoveClientCollaboratorRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// AddClientRight grants a right to a given user for a given client.
	AddClientRight(ctx context.Context, in *ClientRight, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// ListClientRights returns all the rights that the authenticated user has
	// to a given client.
	ListClientRights(ctx context.Context, in *ClientIdentifier, opts ...grpc.CallOption) (*ListClientRightsResponse, error)
	// RemoveClientRight revokes a given right from a given client collaborator.
	RemoveClientRight(ctx context.Context, in *ClientRight, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
}

type isClientClient struct {
	cc *grpc.ClientConn
}

func NewIsClientClient(cc *grpc.ClientConn) IsClientClient {
	return &isClientClient{cc}
}

func (c *isClientClient) CreateClient(ctx context.Context, in *CreateClientRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsClient/CreateClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isClientClient) GetClient(ctx context.Context, in *ClientIdentifier, opts ...grpc.CallOption) (*Client, error) {
	out := new(Client)
	err := grpc.Invoke(ctx, "/ttn.v3.IsClient/GetClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isClientClient) ListClients(ctx context.Context, in *google_protobuf2.Empty, opts ...grpc.CallOption) (*ListClientsResponse, error) {
	out := new(ListClientsResponse)
	err := grpc.Invoke(ctx, "/ttn.v3.IsClient/ListClients", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isClientClient) UpdateClient(ctx context.Context, in *UpdateClientRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsClient/UpdateClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isClientClient) DeleteClient(ctx context.Context, in *ClientIdentifier, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsClient/DeleteClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isClientClient) SetClientOfficial(ctx context.Context, in *SetClientOfficialRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsClient/SetClientOfficial", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isClientClient) SetClientState(ctx context.Context, in *SetClientStateRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsClient/SetClientState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isClientClient) AddClientCollaborator(ctx context.Context, in *AddClientCollaboratorRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsClient/AddClientCollaborator", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isClientClient) ListClientCollaborators(ctx context.Context, in *ClientIdentifier, opts ...grpc.CallOption) (*ListClientCollaboratorsResponse, error) {
	out := new(ListClientCollaboratorsResponse)
	err := grpc.Invoke(ctx, "/ttn.v3.IsClient/ListClientCollaborators", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isClientClient) RemoveClientCollaborator(ctx context.Context, in *RemoveClientCollaboratorRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsClient/RemoveClientCollaborator", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isClientClient) AddClientRight(ctx context.Context, in *ClientRight, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsClient/AddClientRight", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isClientClient) ListClientRights(ctx context.Context, in *ClientIdentifier, opts ...grpc.CallOption) (*ListClientRightsResponse, error) {
	out := new(ListClientRightsResponse)
	err := grpc.Invoke(ctx, "/ttn.v3.IsClient/ListClientRights", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isClientClient) RemoveClientRight(ctx context.Context, in *ClientRight, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsClient/RemoveClientRight", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IsClient service

type IsClientServer interface {
	// CreateClient creates a new client on the network.
	CreateClient(context.Context, *CreateClientRequest) (*google_protobuf2.Empty, error)
	// GetClient finds a client by ID and retrieves it.
	GetClient(context.Context, *ClientIdentifier) (*Client, error)
	// ListClients returns all the clients which the authenticated has access to.
	ListClients(context.Context, *google_protobuf2.Empty) (*ListClientsResponse, error)
	// UpdateClient edits a client.
	UpdateClient(context.Context, *UpdateClientRequest) (*google_protobuf2.Empty, error)
	// DeleteClient permantly deletes a client.
	DeleteClient(context.Context, *ClientIdentifier) (*google_protobuf2.Empty, error)
	// SetClientOfficial allows to a tenant admin to add or remove the official
	// distinguise "official" label of a third-party client.
	SetClientOfficial(context.Context, *SetClientOfficialRequest) (*google_protobuf2.Empty, error)
	// SetClientState allows to the tenant admin to set the reviewing state of
	// a third-party client request.
	SetClientState(context.Context, *SetClientStateRequest) (*google_protobuf2.Empty, error)
	// AddClientCollaborator makes an user collaborator of a client.
	AddClientCollaborator(context.Context, *AddClientCollaboratorRequest) (*google_protobuf2.Empty, error)
	// ListClientCollaborators returns all the collaborators for a given client.
	ListClientCollaborators(context.Context, *ClientIdentifier) (*ListClientCollaboratorsResponse, error)
	// RemoveClientCollaborator revokes all the rights that a collaborator has to
	// a given client.
	RemoveClientCollaborator(context.Context, *RemoveClientCollaboratorRequest) (*google_protobuf2.Empty, error)
	// AddClientRight grants a right to a given user for a given client.
	AddClientRight(context.Context, *ClientRight) (*google_protobuf2.Empty, error)
	// ListClientRights returns all the rights that the authenticated user has
	// to a given client.
	ListClientRights(context.Context, *ClientIdentifier) (*ListClientRightsResponse, error)
	// RemoveClientRight revokes a given right from a given client collaborator.
	RemoveClientRight(context.Context, *ClientRight) (*google_protobuf2.Empty, error)
}

func RegisterIsClientServer(s *grpc.Server, srv IsClientServer) {
	s.RegisterService(&_IsClient_serviceDesc, srv)
}

func _IsClient_CreateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsClientServer).CreateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsClient/CreateClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsClientServer).CreateClient(ctx, req.(*CreateClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsClient_GetClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsClientServer).GetClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsClient/GetClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsClientServer).GetClient(ctx, req.(*ClientIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsClient_ListClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf2.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsClientServer).ListClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsClient/ListClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsClientServer).ListClients(ctx, req.(*google_protobuf2.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsClient_UpdateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsClientServer).UpdateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsClient/UpdateClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsClientServer).UpdateClient(ctx, req.(*UpdateClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsClient_DeleteClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsClientServer).DeleteClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsClient/DeleteClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsClientServer).DeleteClient(ctx, req.(*ClientIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsClient_SetClientOfficial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetClientOfficialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsClientServer).SetClientOfficial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsClient/SetClientOfficial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsClientServer).SetClientOfficial(ctx, req.(*SetClientOfficialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsClient_SetClientState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetClientStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsClientServer).SetClientState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsClient/SetClientState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsClientServer).SetClientState(ctx, req.(*SetClientStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsClient_AddClientCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddClientCollaboratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsClientServer).AddClientCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsClient/AddClientCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsClientServer).AddClientCollaborator(ctx, req.(*AddClientCollaboratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsClient_ListClientCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsClientServer).ListClientCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsClient/ListClientCollaborators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsClientServer).ListClientCollaborators(ctx, req.(*ClientIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsClient_RemoveClientCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveClientCollaboratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsClientServer).RemoveClientCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsClient/RemoveClientCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsClientServer).RemoveClientCollaborator(ctx, req.(*RemoveClientCollaboratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsClient_AddClientRight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsClientServer).AddClientRight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsClient/AddClientRight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsClientServer).AddClientRight(ctx, req.(*ClientRight))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsClient_ListClientRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsClientServer).ListClientRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsClient/ListClientRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsClientServer).ListClientRights(ctx, req.(*ClientIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsClient_RemoveClientRight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsClientServer).RemoveClientRight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsClient/RemoveClientRight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsClientServer).RemoveClientRight(ctx, req.(*ClientRight))
	}
	return interceptor(ctx, in, info, handler)
}

var _IsClient_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.v3.IsClient",
	HandlerType: (*IsClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateClient",
			Handler:    _IsClient_CreateClient_Handler,
		},
		{
			MethodName: "GetClient",
			Handler:    _IsClient_GetClient_Handler,
		},
		{
			MethodName: "ListClients",
			Handler:    _IsClient_ListClients_Handler,
		},
		{
			MethodName: "UpdateClient",
			Handler:    _IsClient_UpdateClient_Handler,
		},
		{
			MethodName: "DeleteClient",
			Handler:    _IsClient_DeleteClient_Handler,
		},
		{
			MethodName: "SetClientOfficial",
			Handler:    _IsClient_SetClientOfficial_Handler,
		},
		{
			MethodName: "SetClientState",
			Handler:    _IsClient_SetClientState_Handler,
		},
		{
			MethodName: "AddClientCollaborator",
			Handler:    _IsClient_AddClientCollaborator_Handler,
		},
		{
			MethodName: "ListClientCollaborators",
			Handler:    _IsClient_ListClientCollaborators_Handler,
		},
		{
			MethodName: "RemoveClientCollaborator",
			Handler:    _IsClient_RemoveClientCollaborator_Handler,
		},
		{
			MethodName: "AddClientRight",
			Handler:    _IsClient_AddClientRight_Handler,
		},
		{
			MethodName: "ListClientRights",
			Handler:    _IsClient_ListClientRights_Handler,
		},
		{
			MethodName: "RemoveClientRight",
			Handler:    _IsClient_RemoveClientRight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/ttn/api/identityserver.proto",
}

func (m *CreateUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateUserRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.UserIdentifier.Size()))
	n1, err := m.UserIdentifier.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Email) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *UpdateUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Email) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *UpdateUserPasswordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserPasswordRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Old) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Old)))
		i += copy(dAtA[i:], m.Old)
	}
	if len(m.New) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.New)))
		i += copy(dAtA[i:], m.New)
	}
	return i, nil
}

func (m *CreateApplicationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateApplicationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.ApplicationIdentifier.Size()))
	n2, err := m.ApplicationIdentifier.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.Description) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	return i, nil
}

func (m *ListApplicationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListApplicationsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Applications) > 0 {
		for _, msg := range m.Applications {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIdentityserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateApplicationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateApplicationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.ApplicationIdentifier.Size()))
	n3, err := m.ApplicationIdentifier.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if len(m.Description) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	return i, nil
}

func (m *GenerateApplicationAPIKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenerateApplicationAPIKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.ApplicationIdentifier.Size()))
	n4, err := m.ApplicationIdentifier.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if len(m.KeyName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.KeyName)))
		i += copy(dAtA[i:], m.KeyName)
	}
	if len(m.Rights) > 0 {
		dAtA6 := make([]byte, len(m.Rights)*10)
		var j5 int
		for _, num := range m.Rights {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	return i, nil
}

func (m *RemoveApplicationAPIKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveApplicationAPIKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.ApplicationIdentifier.Size()))
	n7, err := m.ApplicationIdentifier.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	if len(m.KeyName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.KeyName)))
		i += copy(dAtA[i:], m.KeyName)
	}
	return i, nil
}

func (m *AddApplicationCollaboratorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddApplicationCollaboratorRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.ApplicationIdentifier.Size()))
	n8, err := m.ApplicationIdentifier.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	dAtA[i] = 0x12
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.Collaborator.Size()))
	n9, err := m.Collaborator.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	return i, nil
}

func (m *ListApplicationCollaboratorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListApplicationCollaboratorsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Collaborators) > 0 {
		for _, msg := range m.Collaborators {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIdentityserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RemoveApplicationCollaboratorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveApplicationCollaboratorRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.ApplicationIdentifier.Size()))
	n10, err := m.ApplicationIdentifier.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	dAtA[i] = 0x12
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.UserIdentifier.Size()))
	n11, err := m.UserIdentifier.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	return i, nil
}

func (m *ApplicationRight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationRight) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.ApplicationIdentifier.Size()))
	n12, err := m.ApplicationIdentifier.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	dAtA[i] = 0x12
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.UserIdentifier.Size()))
	n13, err := m.UserIdentifier.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	if m.Right != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(m.Right))
	}
	return i, nil
}

func (m *ListApplicationRightsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListApplicationRightsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Rights) > 0 {
		dAtA15 := make([]byte, len(m.Rights)*10)
		var j14 int
		for _, num := range m.Rights {
			for num >= 1<<7 {
				dAtA15[j14] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j14++
			}
			dAtA15[j14] = uint8(num)
			j14++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(j14))
		i += copy(dAtA[i:], dAtA15[:j14])
	}
	return i, nil
}

func (m *CreateGatewayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateGatewayRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.GatewayIdentifier.Size()))
	n16, err := m.GatewayIdentifier.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	if len(m.Description) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.FrequencyPlanID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.FrequencyPlanID)))
		i += copy(dAtA[i:], m.FrequencyPlanID)
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.PrivacySettings.Size()))
	n17, err := m.PrivacySettings.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n17
	if m.AutoUpdate {
		dAtA[i] = 0x28
		i++
		if m.AutoUpdate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if len(m.Antennas) > 0 {
		for _, msg := range m.Antennas {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintIdentityserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Attributes) > 0 {
		for k, _ := range m.Attributes {
			dAtA[i] = 0x42
			i++
			v := m.Attributes[k]
			mapSize := 1 + len(k) + sovIdentityserver(uint64(len(k))) + 1 + len(v) + sovIdentityserver(uint64(len(v)))
			i = encodeVarintIdentityserver(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintIdentityserver(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintIdentityserver(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.ClusterAddress) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.ClusterAddress)))
		i += copy(dAtA[i:], m.ClusterAddress)
	}
	return i, nil
}

func (m *ListGatewaysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListGatewaysResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Gateways) > 0 {
		for _, msg := range m.Gateways {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIdentityserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateGatewayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGatewayRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.GatewayIdentifier.Size()))
	n18, err := m.GatewayIdentifier.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n18
	if len(m.Description) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.FrequencyPlanID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.FrequencyPlanID)))
		i += copy(dAtA[i:], m.FrequencyPlanID)
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.PrivacySettings.Size()))
	n19, err := m.PrivacySettings.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n19
	if m.AutoUpdate {
		dAtA[i] = 0x28
		i++
		if m.AutoUpdate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if len(m.Antennas) > 0 {
		for _, msg := range m.Antennas {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintIdentityserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Attributes) > 0 {
		for k, _ := range m.Attributes {
			dAtA[i] = 0x42
			i++
			v := m.Attributes[k]
			mapSize := 1 + len(k) + sovIdentityserver(uint64(len(k))) + 1 + len(v) + sovIdentityserver(uint64(len(v)))
			i = encodeVarintIdentityserver(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintIdentityserver(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintIdentityserver(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.ClusterAddress) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.ClusterAddress)))
		i += copy(dAtA[i:], m.ClusterAddress)
	}
	return i, nil
}

func (m *AddGatewayCollaboratorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddGatewayCollaboratorRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.GatewayIdentifier.Size()))
	n20, err := m.GatewayIdentifier.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n20
	dAtA[i] = 0x12
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.Collaborator.Size()))
	n21, err := m.Collaborator.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n21
	return i, nil
}

func (m *ListGatewayCollaboratorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListGatewayCollaboratorsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Collaborators) > 0 {
		for _, msg := range m.Collaborators {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIdentityserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ListGatewayOwnersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListGatewayOwnersResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Collaborators) > 0 {
		for _, msg := range m.Collaborators {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIdentityserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RemoveGatewayCollaboratorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveGatewayCollaboratorRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.GatewayIdentifier.Size()))
	n22, err := m.GatewayIdentifier.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n22
	dAtA[i] = 0x12
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.UserIdentifier.Size()))
	n23, err := m.UserIdentifier.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n23
	return i, nil
}

func (m *GatewayRight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayRight) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.GatewayIdentifier.Size()))
	n24, err := m.GatewayIdentifier.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n24
	dAtA[i] = 0x12
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.UserIdentifier.Size()))
	n25, err := m.UserIdentifier.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n25
	if m.Right != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(m.Right))
	}
	return i, nil
}

func (m *ListGatewayRightsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListGatewayRightsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Rights) > 0 {
		dAtA27 := make([]byte, len(m.Rights)*10)
		var j26 int
		for _, num := range m.Rights {
			for num >= 1<<7 {
				dAtA27[j26] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j26++
			}
			dAtA27[j26] = uint8(num)
			j26++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(j26))
		i += copy(dAtA[i:], dAtA27[:j26])
	}
	return i, nil
}

func (m *CreateClientRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateClientRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.ClientIdentifier.Size()))
	n28, err := m.ClientIdentifier.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n28
	if len(m.Description) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.Secret) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Secret)))
		i += copy(dAtA[i:], m.Secret)
	}
	if len(m.CallbackURI) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.CallbackURI)))
		i += copy(dAtA[i:], m.CallbackURI)
	}
	if len(m.Grants) > 0 {
		dAtA30 := make([]byte, len(m.Grants)*10)
		var j29 int
		for _, num := range m.Grants {
			for num >= 1<<7 {
				dAtA30[j29] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j29++
			}
			dAtA30[j29] = uint8(num)
			j29++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(j29))
		i += copy(dAtA[i:], dAtA30[:j29])
	}
	if len(m.Scope) > 0 {
		dAtA32 := make([]byte, len(m.Scope)*10)
		var j31 int
		for _, num := range m.Scope {
			for num >= 1<<7 {
				dAtA32[j31] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j31++
			}
			dAtA32[j31] = uint8(num)
			j31++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(j31))
		i += copy(dAtA[i:], dAtA32[:j31])
	}
	return i, nil
}

func (m *ListClientsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListClientsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Clients) > 0 {
		for _, msg := range m.Clients {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIdentityserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateClientRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateClientRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.ClientIdentifier.Size()))
	n33, err := m.ClientIdentifier.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n33
	if len(m.Description) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.Secret) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Secret)))
		i += copy(dAtA[i:], m.Secret)
	}
	if len(m.CallbackURI) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.CallbackURI)))
		i += copy(dAtA[i:], m.CallbackURI)
	}
	if len(m.Grants) > 0 {
		dAtA35 := make([]byte, len(m.Grants)*10)
		var j34 int
		for _, num := range m.Grants {
			for num >= 1<<7 {
				dAtA35[j34] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j34++
			}
			dAtA35[j34] = uint8(num)
			j34++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(j34))
		i += copy(dAtA[i:], dAtA35[:j34])
	}
	if len(m.Scope) > 0 {
		dAtA37 := make([]byte, len(m.Scope)*10)
		var j36 int
		for _, num := range m.Scope {
			for num >= 1<<7 {
				dAtA37[j36] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j36++
			}
			dAtA37[j36] = uint8(num)
			j36++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(j36))
		i += copy(dAtA[i:], dAtA37[:j36])
	}
	return i, nil
}

func (m *SetClientOfficialRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetClientOfficialRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.ClientIdentifier.Size()))
	n38, err := m.ClientIdentifier.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n38
	if m.OfficialLabeled {
		dAtA[i] = 0x10
		i++
		if m.OfficialLabeled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SetClientStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetClientStateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.ClientIdentifier.Size()))
	n39, err := m.ClientIdentifier.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n39
	if m.State != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(m.State))
	}
	return i, nil
}

func (m *AddClientCollaboratorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddClientCollaboratorRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.ClientIdentifier.Size()))
	n40, err := m.ClientIdentifier.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n40
	dAtA[i] = 0x12
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.Collaborator.Size()))
	n41, err := m.Collaborator.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n41
	return i, nil
}

func (m *ListClientCollaboratorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListClientCollaboratorsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Collaborators) > 0 {
		for _, msg := range m.Collaborators {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIdentityserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RemoveClientCollaboratorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveClientCollaboratorRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.ClientIdentifier.Size()))
	n42, err := m.ClientIdentifier.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n42
	dAtA[i] = 0x12
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.UserIdentifier.Size()))
	n43, err := m.UserIdentifier.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n43
	return i, nil
}

func (m *ClientRight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientRight) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.ClientIdentifier.Size()))
	n44, err := m.ClientIdentifier.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n44
	dAtA[i] = 0x12
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.UserIdentifier.Size()))
	n45, err := m.UserIdentifier.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n45
	if m.Right != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(m.Right))
	}
	return i, nil
}

func (m *ListClientRightsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListClientRightsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Rights) > 0 {
		dAtA47 := make([]byte, len(m.Rights)*10)
		var j46 int
		for _, num := range m.Rights {
			for num >= 1<<7 {
				dAtA47[j46] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j46++
			}
			dAtA47[j46] = uint8(num)
			j46++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(j46))
		i += copy(dAtA[i:], dAtA47[:j46])
	}
	return i, nil
}

func encodeFixed64Identityserver(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Identityserver(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintIdentityserver(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CreateUserRequest) Size() (n int) {
	var l int
	_ = l
	l = m.UserIdentifier.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	return n
}

func (m *UpdateUserRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	return n
}

func (m *UpdateUserPasswordRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Old)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	l = len(m.New)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	return n
}

func (m *CreateApplicationRequest) Size() (n int) {
	var l int
	_ = l
	l = m.ApplicationIdentifier.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	return n
}

func (m *ListApplicationsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Applications) > 0 {
		for _, e := range m.Applications {
			l = e.Size()
			n += 1 + l + sovIdentityserver(uint64(l))
		}
	}
	return n
}

func (m *UpdateApplicationRequest) Size() (n int) {
	var l int
	_ = l
	l = m.ApplicationIdentifier.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	return n
}

func (m *GenerateApplicationAPIKeyRequest) Size() (n int) {
	var l int
	_ = l
	l = m.ApplicationIdentifier.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = len(m.KeyName)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	if len(m.Rights) > 0 {
		l = 0
		for _, e := range m.Rights {
			l += sovIdentityserver(uint64(e))
		}
		n += 1 + sovIdentityserver(uint64(l)) + l
	}
	return n
}

func (m *RemoveApplicationAPIKeyRequest) Size() (n int) {
	var l int
	_ = l
	l = m.ApplicationIdentifier.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = len(m.KeyName)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	return n
}

func (m *AddApplicationCollaboratorRequest) Size() (n int) {
	var l int
	_ = l
	l = m.ApplicationIdentifier.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = m.Collaborator.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	return n
}

func (m *ListApplicationCollaboratorsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Collaborators) > 0 {
		for _, e := range m.Collaborators {
			l = e.Size()
			n += 1 + l + sovIdentityserver(uint64(l))
		}
	}
	return n
}

func (m *RemoveApplicationCollaboratorRequest) Size() (n int) {
	var l int
	_ = l
	l = m.ApplicationIdentifier.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = m.UserIdentifier.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	return n
}

func (m *ApplicationRight) Size() (n int) {
	var l int
	_ = l
	l = m.ApplicationIdentifier.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = m.UserIdentifier.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	if m.Right != 0 {
		n += 1 + sovIdentityserver(uint64(m.Right))
	}
	return n
}

func (m *ListApplicationRightsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Rights) > 0 {
		l = 0
		for _, e := range m.Rights {
			l += sovIdentityserver(uint64(e))
		}
		n += 1 + sovIdentityserver(uint64(l)) + l
	}
	return n
}

func (m *CreateGatewayRequest) Size() (n int) {
	var l int
	_ = l
	l = m.GatewayIdentifier.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	l = len(m.FrequencyPlanID)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	l = m.PrivacySettings.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	if m.AutoUpdate {
		n += 2
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	if len(m.Antennas) > 0 {
		for _, e := range m.Antennas {
			l = e.Size()
			n += 1 + l + sovIdentityserver(uint64(l))
		}
	}
	if len(m.Attributes) > 0 {
		for k, v := range m.Attributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovIdentityserver(uint64(len(k))) + 1 + len(v) + sovIdentityserver(uint64(len(v)))
			n += mapEntrySize + 1 + sovIdentityserver(uint64(mapEntrySize))
		}
	}
	l = len(m.ClusterAddress)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	return n
}

func (m *ListGatewaysResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Gateways) > 0 {
		for _, e := range m.Gateways {
			l = e.Size()
			n += 1 + l + sovIdentityserver(uint64(l))
		}
	}
	return n
}

func (m *UpdateGatewayRequest) Size() (n int) {
	var l int
	_ = l
	l = m.GatewayIdentifier.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	l = len(m.FrequencyPlanID)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	l = m.PrivacySettings.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	if m.AutoUpdate {
		n += 2
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	if len(m.Antennas) > 0 {
		for _, e := range m.Antennas {
			l = e.Size()
			n += 1 + l + sovIdentityserver(uint64(l))
		}
	}
	if len(m.Attributes) > 0 {
		for k, v := range m.Attributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovIdentityserver(uint64(len(k))) + 1 + len(v) + sovIdentityserver(uint64(len(v)))
			n += mapEntrySize + 1 + sovIdentityserver(uint64(mapEntrySize))
		}
	}
	l = len(m.ClusterAddress)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	return n
}

func (m *AddGatewayCollaboratorRequest) Size() (n int) {
	var l int
	_ = l
	l = m.GatewayIdentifier.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = m.Collaborator.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	return n
}

func (m *ListGatewayCollaboratorsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Collaborators) > 0 {
		for _, e := range m.Collaborators {
			l = e.Size()
			n += 1 + l + sovIdentityserver(uint64(l))
		}
	}
	return n
}

func (m *ListGatewayOwnersResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Collaborators) > 0 {
		for _, e := range m.Collaborators {
			l = e.Size()
			n += 1 + l + sovIdentityserver(uint64(l))
		}
	}
	return n
}

func (m *RemoveGatewayCollaboratorRequest) Size() (n int) {
	var l int
	_ = l
	l = m.GatewayIdentifier.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = m.UserIdentifier.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	return n
}

func (m *GatewayRight) Size() (n int) {
	var l int
	_ = l
	l = m.GatewayIdentifier.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = m.UserIdentifier.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	if m.Right != 0 {
		n += 1 + sovIdentityserver(uint64(m.Right))
	}
	return n
}

func (m *ListGatewayRightsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Rights) > 0 {
		l = 0
		for _, e := range m.Rights {
			l += sovIdentityserver(uint64(e))
		}
		n += 1 + sovIdentityserver(uint64(l)) + l
	}
	return n
}

func (m *CreateClientRequest) Size() (n int) {
	var l int
	_ = l
	l = m.ClientIdentifier.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	l = len(m.CallbackURI)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	if len(m.Grants) > 0 {
		l = 0
		for _, e := range m.Grants {
			l += sovIdentityserver(uint64(e))
		}
		n += 1 + sovIdentityserver(uint64(l)) + l
	}
	if len(m.Scope) > 0 {
		l = 0
		for _, e := range m.Scope {
			l += sovIdentityserver(uint64(e))
		}
		n += 1 + sovIdentityserver(uint64(l)) + l
	}
	return n
}

func (m *ListClientsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Clients) > 0 {
		for _, e := range m.Clients {
			l = e.Size()
			n += 1 + l + sovIdentityserver(uint64(l))
		}
	}
	return n
}

func (m *UpdateClientRequest) Size() (n int) {
	var l int
	_ = l
	l = m.ClientIdentifier.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	l = len(m.CallbackURI)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	if len(m.Grants) > 0 {
		l = 0
		for _, e := range m.Grants {
			l += sovIdentityserver(uint64(e))
		}
		n += 1 + sovIdentityserver(uint64(l)) + l
	}
	if len(m.Scope) > 0 {
		l = 0
		for _, e := range m.Scope {
			l += sovIdentityserver(uint64(e))
		}
		n += 1 + sovIdentityserver(uint64(l)) + l
	}
	return n
}

func (m *SetClientOfficialRequest) Size() (n int) {
	var l int
	_ = l
	l = m.ClientIdentifier.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	if m.OfficialLabeled {
		n += 2
	}
	return n
}

func (m *SetClientStateRequest) Size() (n int) {
	var l int
	_ = l
	l = m.ClientIdentifier.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	if m.State != 0 {
		n += 1 + sovIdentityserver(uint64(m.State))
	}
	return n
}

func (m *AddClientCollaboratorRequest) Size() (n int) {
	var l int
	_ = l
	l = m.ClientIdentifier.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = m.Collaborator.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	return n
}

func (m *ListClientCollaboratorsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Collaborators) > 0 {
		for _, e := range m.Collaborators {
			l = e.Size()
			n += 1 + l + sovIdentityserver(uint64(l))
		}
	}
	return n
}

func (m *RemoveClientCollaboratorRequest) Size() (n int) {
	var l int
	_ = l
	l = m.ClientIdentifier.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = m.UserIdentifier.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	return n
}

func (m *ClientRight) Size() (n int) {
	var l int
	_ = l
	l = m.ClientIdentifier.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = m.UserIdentifier.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	if m.Right != 0 {
		n += 1 + sovIdentityserver(uint64(m.Right))
	}
	return n
}

func (m *ListClientRightsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Rights) > 0 {
		l = 0
		for _, e := range m.Rights {
			l += sovIdentityserver(uint64(e))
		}
		n += 1 + sovIdentityserver(uint64(l)) + l
	}
	return n
}

func sovIdentityserver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozIdentityserver(x uint64) (n int) {
	return sovIdentityserver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CreateUserRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateUserRequest{`,
		`UserIdentifier:` + strings.Replace(strings.Replace(this.UserIdentifier.String(), "UserIdentifier", "UserIdentifier", 1), `&`, ``, 1) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserRequest{`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserPasswordRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserPasswordRequest{`,
		`Old:` + fmt.Sprintf("%v", this.Old) + `,`,
		`New:` + fmt.Sprintf("%v", this.New) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateApplicationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateApplicationRequest{`,
		`ApplicationIdentifier:` + strings.Replace(strings.Replace(this.ApplicationIdentifier.String(), "ApplicationIdentifier", "ApplicationIdentifier", 1), `&`, ``, 1) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListApplicationsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListApplicationsResponse{`,
		`Applications:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Applications), "Application", "Application", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateApplicationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateApplicationRequest{`,
		`ApplicationIdentifier:` + strings.Replace(strings.Replace(this.ApplicationIdentifier.String(), "ApplicationIdentifier", "ApplicationIdentifier", 1), `&`, ``, 1) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GenerateApplicationAPIKeyRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GenerateApplicationAPIKeyRequest{`,
		`ApplicationIdentifier:` + strings.Replace(strings.Replace(this.ApplicationIdentifier.String(), "ApplicationIdentifier", "ApplicationIdentifier", 1), `&`, ``, 1) + `,`,
		`KeyName:` + fmt.Sprintf("%v", this.KeyName) + `,`,
		`Rights:` + fmt.Sprintf("%v", this.Rights) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemoveApplicationAPIKeyRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveApplicationAPIKeyRequest{`,
		`ApplicationIdentifier:` + strings.Replace(strings.Replace(this.ApplicationIdentifier.String(), "ApplicationIdentifier", "ApplicationIdentifier", 1), `&`, ``, 1) + `,`,
		`KeyName:` + fmt.Sprintf("%v", this.KeyName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddApplicationCollaboratorRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddApplicationCollaboratorRequest{`,
		`ApplicationIdentifier:` + strings.Replace(strings.Replace(this.ApplicationIdentifier.String(), "ApplicationIdentifier", "ApplicationIdentifier", 1), `&`, ``, 1) + `,`,
		`Collaborator:` + strings.Replace(strings.Replace(this.Collaborator.String(), "Collaborator", "Collaborator", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListApplicationCollaboratorsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListApplicationCollaboratorsResponse{`,
		`Collaborators:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Collaborators), "Collaborator", "Collaborator", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemoveApplicationCollaboratorRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveApplicationCollaboratorRequest{`,
		`ApplicationIdentifier:` + strings.Replace(strings.Replace(this.ApplicationIdentifier.String(), "ApplicationIdentifier", "ApplicationIdentifier", 1), `&`, ``, 1) + `,`,
		`UserIdentifier:` + strings.Replace(strings.Replace(this.UserIdentifier.String(), "UserIdentifier", "UserIdentifier", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationRight) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationRight{`,
		`ApplicationIdentifier:` + strings.Replace(strings.Replace(this.ApplicationIdentifier.String(), "ApplicationIdentifier", "ApplicationIdentifier", 1), `&`, ``, 1) + `,`,
		`UserIdentifier:` + strings.Replace(strings.Replace(this.UserIdentifier.String(), "UserIdentifier", "UserIdentifier", 1), `&`, ``, 1) + `,`,
		`Right:` + fmt.Sprintf("%v", this.Right) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListApplicationRightsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListApplicationRightsResponse{`,
		`Rights:` + fmt.Sprintf("%v", this.Rights) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateGatewayRequest) String() string {
	if this == nil {
		return "nil"
	}
	keysForAttributes := make([]string, 0, len(this.Attributes))
	for k, _ := range this.Attributes {
		keysForAttributes = append(keysForAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributes)
	mapStringForAttributes := "map[string]string{"
	for _, k := range keysForAttributes {
		mapStringForAttributes += fmt.Sprintf("%v: %v,", k, this.Attributes[k])
	}
	mapStringForAttributes += "}"
	s := strings.Join([]string{`&CreateGatewayRequest{`,
		`GatewayIdentifier:` + strings.Replace(strings.Replace(this.GatewayIdentifier.String(), "GatewayIdentifier", "GatewayIdentifier", 1), `&`, ``, 1) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`FrequencyPlanID:` + fmt.Sprintf("%v", this.FrequencyPlanID) + `,`,
		`PrivacySettings:` + strings.Replace(strings.Replace(this.PrivacySettings.String(), "GatewayPrivacySettings", "GatewayPrivacySettings", 1), `&`, ``, 1) + `,`,
		`AutoUpdate:` + fmt.Sprintf("%v", this.AutoUpdate) + `,`,
		`Platform:` + fmt.Sprintf("%v", this.Platform) + `,`,
		`Antennas:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Antennas), "GatewayAntenna", "GatewayAntenna", 1), `&`, ``, 1) + `,`,
		`Attributes:` + mapStringForAttributes + `,`,
		`ClusterAddress:` + fmt.Sprintf("%v", this.ClusterAddress) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListGatewaysResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListGatewaysResponse{`,
		`Gateways:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Gateways), "Gateway", "Gateway", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateGatewayRequest) String() string {
	if this == nil {
		return "nil"
	}
	keysForAttributes := make([]string, 0, len(this.Attributes))
	for k, _ := range this.Attributes {
		keysForAttributes = append(keysForAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributes)
	mapStringForAttributes := "map[string]string{"
	for _, k := range keysForAttributes {
		mapStringForAttributes += fmt.Sprintf("%v: %v,", k, this.Attributes[k])
	}
	mapStringForAttributes += "}"
	s := strings.Join([]string{`&UpdateGatewayRequest{`,
		`GatewayIdentifier:` + strings.Replace(strings.Replace(this.GatewayIdentifier.String(), "GatewayIdentifier", "GatewayIdentifier", 1), `&`, ``, 1) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`FrequencyPlanID:` + fmt.Sprintf("%v", this.FrequencyPlanID) + `,`,
		`PrivacySettings:` + strings.Replace(strings.Replace(this.PrivacySettings.String(), "GatewayPrivacySettings", "GatewayPrivacySettings", 1), `&`, ``, 1) + `,`,
		`AutoUpdate:` + fmt.Sprintf("%v", this.AutoUpdate) + `,`,
		`Platform:` + fmt.Sprintf("%v", this.Platform) + `,`,
		`Antennas:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Antennas), "GatewayAntenna", "GatewayAntenna", 1), `&`, ``, 1) + `,`,
		`Attributes:` + mapStringForAttributes + `,`,
		`ClusterAddress:` + fmt.Sprintf("%v", this.ClusterAddress) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddGatewayCollaboratorRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddGatewayCollaboratorRequest{`,
		`GatewayIdentifier:` + strings.Replace(strings.Replace(this.GatewayIdentifier.String(), "GatewayIdentifier", "GatewayIdentifier", 1), `&`, ``, 1) + `,`,
		`Collaborator:` + strings.Replace(strings.Replace(this.Collaborator.String(), "Collaborator", "Collaborator", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListGatewayCollaboratorsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListGatewayCollaboratorsResponse{`,
		`Collaborators:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Collaborators), "Collaborator", "Collaborator", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListGatewayOwnersResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListGatewayOwnersResponse{`,
		`Collaborators:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Collaborators), "Collaborator", "Collaborator", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemoveGatewayCollaboratorRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveGatewayCollaboratorRequest{`,
		`GatewayIdentifier:` + strings.Replace(strings.Replace(this.GatewayIdentifier.String(), "GatewayIdentifier", "GatewayIdentifier", 1), `&`, ``, 1) + `,`,
		`UserIdentifier:` + strings.Replace(strings.Replace(this.UserIdentifier.String(), "UserIdentifier", "UserIdentifier", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayRight) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayRight{`,
		`GatewayIdentifier:` + strings.Replace(strings.Replace(this.GatewayIdentifier.String(), "GatewayIdentifier", "GatewayIdentifier", 1), `&`, ``, 1) + `,`,
		`UserIdentifier:` + strings.Replace(strings.Replace(this.UserIdentifier.String(), "UserIdentifier", "UserIdentifier", 1), `&`, ``, 1) + `,`,
		`Right:` + fmt.Sprintf("%v", this.Right) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListGatewayRightsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListGatewayRightsResponse{`,
		`Rights:` + fmt.Sprintf("%v", this.Rights) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateClientRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateClientRequest{`,
		`ClientIdentifier:` + strings.Replace(strings.Replace(this.ClientIdentifier.String(), "ClientIdentifier", "ClientIdentifier", 1), `&`, ``, 1) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Secret:` + fmt.Sprintf("%v", this.Secret) + `,`,
		`CallbackURI:` + fmt.Sprintf("%v", this.CallbackURI) + `,`,
		`Grants:` + fmt.Sprintf("%v", this.Grants) + `,`,
		`Scope:` + fmt.Sprintf("%v", this.Scope) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListClientsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListClientsResponse{`,
		`Clients:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Clients), "Client", "Client", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateClientRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateClientRequest{`,
		`ClientIdentifier:` + strings.Replace(strings.Replace(this.ClientIdentifier.String(), "ClientIdentifier", "ClientIdentifier", 1), `&`, ``, 1) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Secret:` + fmt.Sprintf("%v", this.Secret) + `,`,
		`CallbackURI:` + fmt.Sprintf("%v", this.CallbackURI) + `,`,
		`Grants:` + fmt.Sprintf("%v", this.Grants) + `,`,
		`Scope:` + fmt.Sprintf("%v", this.Scope) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetClientOfficialRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetClientOfficialRequest{`,
		`ClientIdentifier:` + strings.Replace(strings.Replace(this.ClientIdentifier.String(), "ClientIdentifier", "ClientIdentifier", 1), `&`, ``, 1) + `,`,
		`OfficialLabeled:` + fmt.Sprintf("%v", this.OfficialLabeled) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetClientStateRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetClientStateRequest{`,
		`ClientIdentifier:` + strings.Replace(strings.Replace(this.ClientIdentifier.String(), "ClientIdentifier", "ClientIdentifier", 1), `&`, ``, 1) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddClientCollaboratorRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddClientCollaboratorRequest{`,
		`ClientIdentifier:` + strings.Replace(strings.Replace(this.ClientIdentifier.String(), "ClientIdentifier", "ClientIdentifier", 1), `&`, ``, 1) + `,`,
		`Collaborator:` + strings.Replace(strings.Replace(this.Collaborator.String(), "Collaborator", "Collaborator", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListClientCollaboratorsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListClientCollaboratorsResponse{`,
		`Collaborators:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Collaborators), "Collaborator", "Collaborator", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemoveClientCollaboratorRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveClientCollaboratorRequest{`,
		`ClientIdentifier:` + strings.Replace(strings.Replace(this.ClientIdentifier.String(), "ClientIdentifier", "ClientIdentifier", 1), `&`, ``, 1) + `,`,
		`UserIdentifier:` + strings.Replace(strings.Replace(this.UserIdentifier.String(), "UserIdentifier", "UserIdentifier", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClientRight) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClientRight{`,
		`ClientIdentifier:` + strings.Replace(strings.Replace(this.ClientIdentifier.String(), "ClientIdentifier", "ClientIdentifier", 1), `&`, ``, 1) + `,`,
		`UserIdentifier:` + strings.Replace(strings.Replace(this.UserIdentifier.String(), "UserIdentifier", "UserIdentifier", 1), `&`, ``, 1) + `,`,
		`Right:` + fmt.Sprintf("%v", this.Right) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListClientRightsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListClientRightsResponse{`,
		`Rights:` + fmt.Sprintf("%v", this.Rights) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringIdentityserver(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CreateUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserIdentifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserPasswordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserPasswordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserPasswordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Old", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Old = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field New", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.New = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateApplicationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateApplicationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateApplicationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationIdentifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListApplicationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListApplicationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListApplicationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Applications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Applications = append(m.Applications, Application{})
			if err := m.Applications[len(m.Applications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateApplicationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateApplicationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateApplicationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationIdentifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenerateApplicationAPIKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenerateApplicationAPIKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenerateApplicationAPIKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationIdentifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v Right
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Right(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rights = append(m.Rights, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIdentityserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v Right
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIdentityserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Right(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rights = append(m.Rights, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rights", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveApplicationAPIKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveApplicationAPIKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveApplicationAPIKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationIdentifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddApplicationCollaboratorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddApplicationCollaboratorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddApplicationCollaboratorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationIdentifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collaborator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Collaborator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListApplicationCollaboratorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListApplicationCollaboratorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListApplicationCollaboratorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collaborators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collaborators = append(m.Collaborators, Collaborator{})
			if err := m.Collaborators[len(m.Collaborators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveApplicationCollaboratorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveApplicationCollaboratorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveApplicationCollaboratorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationIdentifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserIdentifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationRight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationRight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationRight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationIdentifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserIdentifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Right", wireType)
			}
			m.Right = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Right |= (Right(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListApplicationRightsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListApplicationRightsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListApplicationRightsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType == 0 {
				var v Right
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Right(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rights = append(m.Rights, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIdentityserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v Right
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIdentityserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Right(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rights = append(m.Rights, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rights", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateGatewayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateGatewayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateGatewayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GatewayIdentifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyPlanID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrequencyPlanID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivacySettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PrivacySettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoUpdate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoUpdate = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Antennas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Antennas = append(m.Antennas, GatewayAntenna{})
			if err := m.Antennas[len(m.Antennas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIdentityserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthIdentityserver
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIdentityserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthIdentityserver
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipIdentityserver(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthIdentityserver
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attributes[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListGatewaysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListGatewaysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListGatewaysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateways", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateways = append(m.Gateways, Gateway{})
			if err := m.Gateways[len(m.Gateways)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGatewayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGatewayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGatewayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GatewayIdentifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyPlanID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrequencyPlanID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivacySettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PrivacySettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoUpdate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoUpdate = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Antennas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Antennas = append(m.Antennas, GatewayAntenna{})
			if err := m.Antennas[len(m.Antennas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIdentityserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthIdentityserver
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIdentityserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthIdentityserver
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipIdentityserver(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthIdentityserver
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attributes[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddGatewayCollaboratorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddGatewayCollaboratorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddGatewayCollaboratorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GatewayIdentifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collaborator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Collaborator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListGatewayCollaboratorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListGatewayCollaboratorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListGatewayCollaboratorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collaborators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collaborators = append(m.Collaborators, Collaborator{})
			if err := m.Collaborators[len(m.Collaborators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListGatewayOwnersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListGatewayOwnersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListGatewayOwnersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collaborators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collaborators = append(m.Collaborators, Collaborator{})
			if err := m.Collaborators[len(m.Collaborators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveGatewayCollaboratorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveGatewayCollaboratorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveGatewayCollaboratorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GatewayIdentifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserIdentifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayRight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayRight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayRight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GatewayIdentifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserIdentifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Right", wireType)
			}
			m.Right = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Right |= (Right(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListGatewayRightsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListGatewayRightsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListGatewayRightsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v Right
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Right(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rights = append(m.Rights, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIdentityserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v Right
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIdentityserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Right(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rights = append(m.Rights, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rights", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateClientRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateClientRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateClientRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClientIdentifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallbackURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallbackURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v ClientGrant
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (ClientGrant(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Grants = append(m.Grants, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIdentityserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v ClientGrant
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIdentityserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (ClientGrant(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Grants = append(m.Grants, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Grants", wireType)
			}
		case 6:
			if wireType == 0 {
				var v ClientScope
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (ClientScope(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Scope = append(m.Scope, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIdentityserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v ClientScope
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIdentityserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (ClientScope(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Scope = append(m.Scope, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListClientsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListClientsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListClientsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Clients = append(m.Clients, Client{})
			if err := m.Clients[len(m.Clients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateClientRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateClientRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateClientRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClientIdentifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallbackURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallbackURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v ClientGrant
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (ClientGrant(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Grants = append(m.Grants, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIdentityserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v ClientGrant
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIdentityserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (ClientGrant(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Grants = append(m.Grants, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Grants", wireType)
			}
		case 6:
			if wireType == 0 {
				var v ClientScope
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (ClientScope(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Scope = append(m.Scope, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIdentityserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v ClientScope
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIdentityserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (ClientScope(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Scope = append(m.Scope, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetClientOfficialRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetClientOfficialRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetClientOfficialRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClientIdentifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialLabeled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OfficialLabeled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetClientStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetClientStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetClientStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClientIdentifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (ClientState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddClientCollaboratorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddClientCollaboratorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddClientCollaboratorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClientIdentifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collaborator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Collaborator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListClientCollaboratorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListClientCollaboratorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListClientCollaboratorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collaborators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collaborators = append(m.Collaborators, Collaborator{})
			if err := m.Collaborators[len(m.Collaborators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveClientCollaboratorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveClientCollaboratorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveClientCollaboratorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClientIdentifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserIdentifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientRight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientRight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientRight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClientIdentifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserIdentifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Right", wireType)
			}
			m.Right = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Right |= (Right(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListClientRightsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListClientRightsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListClientRightsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v Right
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Right(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rights = append(m.Rights, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIdentityserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v Right
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIdentityserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Right(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rights = append(m.Rights, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rights", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIdentityserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthIdentityserver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipIdentityserver(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthIdentityserver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIdentityserver   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/identityserver.proto", fileDescriptorIdentityserver)
}

var fileDescriptorIdentityserver = []byte{
	// 1955 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0xcf, 0x6f, 0x1b, 0xc7,
	0x15, 0xf6, 0x4a, 0x16, 0x45, 0x3d, 0x52, 0xa2, 0x34, 0x92, 0x95, 0x15, 0x2d, 0x53, 0x34, 0x6b,
	0xd7, 0x32, 0xea, 0x52, 0x09, 0x83, 0x14, 0x6e, 0x51, 0x47, 0x26, 0x65, 0x87, 0x60, 0x6a, 0xcb,
	0x2a, 0x1d, 0x21, 0x48, 0x5b, 0x83, 0x58, 0x91, 0x23, 0x6a, 0xa1, 0xd5, 0x2e, 0xbb, 0x3b, 0x94,
	0xc0, 0x5b, 0x81, 0x02, 0xbd, 0xb4, 0xb7, 0xf6, 0xd8, 0x1e, 0x8a, 0x1e, 0x7a, 0x2b, 0xd0, 0xa2,
	0x40, 0x0f, 0xbd, 0xf5, 0x14, 0x14, 0x3d, 0xe4, 0xd8, 0x93, 0xd1, 0xea, 0x94, 0x63, 0xff, 0x84,
	0x62, 0x67, 0x66, 0xb9, 0xb3, 0x3f, 0x66, 0x49, 0xc6, 0x52, 0xa2, 0x43, 0x4e, 0xe2, 0xce, 0xcc,
	0x7b, 0xf3, 0xbd, 0x37, 0xf3, 0xde, 0x9b, 0xf7, 0x41, 0xf0, 0xb0, 0xab, 0x93, 0xa3, 0xfe, 0x41,
	0xb9, 0x6d, 0x9d, 0x6c, 0x7d, 0x74, 0x84, 0x3f, 0x3a, 0xd2, 0xcd, 0xae, 0xb3, 0x8b, 0xc9, 0x99,
	0x65, 0x1f, 0x6f, 0x11, 0x62, 0x6e, 0x69, 0x3d, 0x7d, 0x4b, 0xef, 0x60, 0x93, 0xe8, 0x64, 0xe0,
	0x60, 0xfb, 0x14, 0xdb, 0xe5, 0x9e, 0x6d, 0x11, 0x0b, 0xa5, 0x08, 0x31, 0xcb, 0xa7, 0xef, 0xe6,
	0xbf, 0x2d, 0x68, 0xe8, 0x5a, 0x5d, 0x6b, 0x8b, 0x4e, 0x1f, 0xf4, 0x0f, 0xe9, 0x17, 0xfd, 0xa0,
	0xbf, 0x98, 0x58, 0xfe, 0xbd, 0x71, 0x36, 0xd4, 0x7a, 0x3d, 0x43, 0x6f, 0x6b, 0x44, 0xb7, 0x4c,
	0x2e, 0xf6, 0xf6, 0x38, 0x62, 0x6d, 0x43, 0xc7, 0x26, 0xe1, 0x12, 0xdf, 0x19, 0x4b, 0xc2, 0x32,
	0x0c, 0xed, 0xc0, 0xb2, 0x35, 0x62, 0xd9, 0x93, 0xec, 0x64, 0xeb, 0xdd, 0x23, 0xe2, 0x4c, 0x62,
	0x12, 0xf3, 0xe1, 0xa1, 0x8e, 0x6d, 0x4f, 0xec, 0x9d, 0x71, 0xc4, 0xba, 0x1a, 0xc1, 0x67, 0xda,
	0x80, 0x8b, 0x94, 0xc7, 0x11, 0xe9, 0x3b, 0xde, 0x19, 0xe5, 0x6f, 0x76, 0x2d, 0xab, 0x6b, 0x60,
	0xff, 0x48, 0xf0, 0x49, 0x8f, 0x70, 0x65, 0xa5, 0xdf, 0x28, 0xb0, 0xb4, 0x63, 0x63, 0x8d, 0xe0,
	0x7d, 0x07, 0xdb, 0x4d, 0xfc, 0xd3, 0x3e, 0x76, 0x08, 0xfa, 0x2e, 0xcc, 0xba, 0x0a, 0x5a, 0x7a,
	0x47, 0x55, 0x8a, 0xca, 0x66, 0xa6, 0xb2, 0x5a, 0x66, 0x07, 0x5d, 0x76, 0x57, 0x35, 0x86, 0x56,
	0xd4, 0xd2, 0x9f, 0xbe, 0xde, 0xb8, 0xf6, 0xd9, 0xeb, 0x0d, 0xa5, 0x99, 0xea, 0xd3, 0x19, 0xb4,
	0x02, 0x33, 0xf8, 0x44, 0xd3, 0x0d, 0x75, 0xaa, 0xa8, 0x6c, 0xce, 0x35, 0xd9, 0x07, 0xca, 0x43,
	0xba, 0xa7, 0x39, 0xce, 0x99, 0x65, 0x77, 0xd4, 0x69, 0x3a, 0x31, 0xfc, 0x46, 0x08, 0xae, 0x9b,
	0xda, 0x09, 0x56, 0xaf, 0xd3, 0x71, 0xfa, 0xbb, 0xf4, 0x08, 0x96, 0xf6, 0x7b, 0x9d, 0x10, 0xaa,
	0xa1, 0x6a, 0x45, 0x54, 0xed, 0x89, 0x4f, 0x09, 0xe2, 0xdb, 0xb0, 0xe6, 0x8b, 0xef, 0xf1, 0x8d,
	0x3c, 0x35, 0x8b, 0x30, 0x6d, 0x19, 0x1d, 0xae, 0xc4, 0xfd, 0xe9, 0x8e, 0x98, 0xf8, 0x8c, 0x6b,
	0x70, 0x7f, 0x96, 0x7e, 0xa5, 0x80, 0xca, 0xdc, 0x52, 0xf5, 0x6f, 0xa1, 0xa7, 0x60, 0x17, 0x16,
	0x84, 0xbb, 0xe9, 0x3b, 0xe9, 0x96, 0xe7, 0x24, 0x41, 0x26, 0xd6, 0x57, 0xf3, 0x9a, 0xb8, 0x00,
	0x15, 0x21, 0xd3, 0xc1, 0x4e, 0xdb, 0xd6, 0x7b, 0xee, 0x00, 0x87, 0x21, 0x0e, 0x95, 0x3e, 0x01,
	0xf5, 0x99, 0xee, 0x10, 0x41, 0xaf, 0xd3, 0xc4, 0x4e, 0xcf, 0x32, 0x1d, 0x8c, 0x1e, 0x41, 0x56,
	0x50, 0xe7, 0xa8, 0x4a, 0x71, 0x7a, 0x33, 0x53, 0x59, 0x8e, 0xc1, 0x52, 0xbb, 0xee, 0x22, 0x68,
	0x06, 0x96, 0x53, 0x4b, 0x99, 0xaf, 0xae, 0x84, 0xa5, 0x7f, 0x55, 0xa0, 0x58, 0xc7, 0x26, 0xb6,
	0x83, 0x80, 0xaa, 0x7b, 0x8d, 0x1f, 0xe0, 0xc1, 0x65, 0xc1, 0x5a, 0x83, 0xf4, 0x31, 0x1e, 0xb4,
	0x84, 0x6b, 0x34, 0x7b, 0x8c, 0x07, 0xbb, 0xda, 0x09, 0x46, 0x77, 0x21, 0xc5, 0xc2, 0x5c, 0x9d,
	0x2e, 0x4e, 0x6f, 0x2e, 0x54, 0xe6, 0xbd, 0x2d, 0x9a, 0xee, 0x68, 0x93, 0x4f, 0x96, 0x7e, 0xa9,
	0x40, 0xa1, 0x89, 0x4f, 0xac, 0xd3, 0xab, 0x00, 0xba, 0xf4, 0x37, 0x05, 0x6e, 0x57, 0x3b, 0x1d,
	0x41, 0xe1, 0x8e, 0x90, 0xe2, 0x2e, 0x0b, 0x50, 0x0d, 0xb2, 0x62, 0x26, 0xa5, 0xa0, 0x32, 0x95,
	0x15, 0x4f, 0x9b, 0x08, 0x41, 0x50, 0x12, 0x90, 0x29, 0x1d, 0xc1, 0x9d, 0xd0, 0x45, 0x17, 0xc5,
	0xfc, 0x4b, 0xff, 0x18, 0xe6, 0x45, 0x39, 0xef, 0xd6, 0xc7, 0x6f, 0xc6, 0xae, 0x7d, 0x50, 0xa0,
	0xf4, 0x67, 0x05, 0xee, 0x44, 0x4e, 0xec, 0xcb, 0x70, 0x93, 0x90, 0x5b, 0xa7, 0x26, 0xcb, 0xad,
	0xa5, 0x7f, 0x28, 0xb0, 0x28, 0x46, 0xa9, 0x7b, 0xf7, 0xae, 0x10, 0x3e, 0xf4, 0x0d, 0x98, 0xa1,
	0xf1, 0x40, 0x53, 0x7c, 0x24, 0x56, 0xd8, 0x5c, 0xe9, 0x03, 0xb8, 0x15, 0x3a, 0x62, 0x3a, 0xed,
	0x9f, 0xed, 0x98, 0x21, 0xf7, 0xf7, 0xeb, 0xb0, 0xc2, 0x52, 0x74, 0x9d, 0x95, 0x47, 0xef, 0xc0,
	0x6a, 0x00, 0xbc, 0x60, 0xfa, 0xce, 0x58, 0xf3, 0x74, 0xf0, 0xb5, 0xb1, 0x66, 0xcc, 0x75, 0xbd,
	0xc9, 0xd1, 0x89, 0x0a, 0x6d, 0xc3, 0xd2, 0xa1, 0xed, 0xee, 0x68, 0xb6, 0x07, 0xad, 0x9e, 0xa1,
	0x51, 0xcf, 0xd3, 0xd2, 0x56, 0x5b, 0x3e, 0x7f, 0xbd, 0x91, 0xfb, 0xc0, 0x9b, 0xdc, 0x33, 0x34,
	0xb3, 0xf1, 0xa4, 0x99, 0x3b, 0x0c, 0x0c, 0x74, 0xd0, 0x0b, 0x58, 0xec, 0xd9, 0xfa, 0xa9, 0xd6,
	0x1e, 0xb4, 0x1c, 0x4c, 0x88, 0x5b, 0xc4, 0x69, 0x09, 0xcc, 0x54, 0x0a, 0x21, 0xb0, 0x7b, 0x6c,
	0xd9, 0x4b, 0xbe, 0x8a, 0xdf, 0xe7, 0x5c, 0x2f, 0x38, 0x8c, 0x36, 0x20, 0xa3, 0xf5, 0x89, 0xd5,
	0xea, 0xd3, 0x6c, 0xae, 0xce, 0x14, 0x95, 0xcd, 0x74, 0x13, 0xdc, 0x21, 0x96, 0xdf, 0x69, 0x11,
	0x36, 0x34, 0x72, 0x68, 0xd9, 0x27, 0x6a, 0x8a, 0x17, 0x61, 0xfe, 0x8d, 0x1e, 0x42, 0x5a, 0x33,
	0x09, 0x36, 0x4d, 0xcd, 0x51, 0x67, 0x69, 0x2c, 0xad, 0x86, 0x50, 0x54, 0xd9, 0x34, 0xdf, 0x7d,
	0xb8, 0x1a, 0x3d, 0x03, 0xd0, 0x08, 0xb1, 0xf5, 0x83, 0x3e, 0xc1, 0x8e, 0x9a, 0xa6, 0xb2, 0x0f,
	0x86, 0x71, 0x18, 0x73, 0x40, 0xe5, 0xea, 0x70, 0xf9, 0x53, 0x93, 0xd8, 0x83, 0xa6, 0x20, 0x8f,
	0xee, 0x41, 0xae, 0x6d, 0xf4, 0x1d, 0x82, 0xed, 0x96, 0xd6, 0xe9, 0xd8, 0xd8, 0x71, 0xd4, 0x39,
	0x0a, 0x75, 0x81, 0x0f, 0x57, 0xd9, 0x68, 0xfe, 0x11, 0xe4, 0x42, 0x7a, 0xdc, 0x32, 0x7e, 0x8c,
	0x07, 0x5e, 0x61, 0x3f, 0xc6, 0x03, 0xf7, 0xc5, 0x70, 0xaa, 0x19, 0x7d, 0x2f, 0x41, 0xb2, 0x8f,
	0xef, 0x4d, 0x3d, 0x54, 0x4a, 0x0d, 0x58, 0x71, 0x6f, 0x21, 0x47, 0xe6, 0x5f, 0xbe, 0x77, 0x20,
	0xcd, 0x6f, 0x81, 0x97, 0x53, 0x72, 0x21, 0x3f, 0x78, 0x0e, 0xf0, 0x96, 0xd1, 0x8b, 0xc8, 0x3c,
	0xfc, 0xf5, 0x45, 0xbc, 0xb2, 0x17, 0x31, 0xee, 0x80, 0xae, 0xc4, 0x45, 0xfc, 0xa3, 0x02, 0xb7,
	0xaa, 0x9d, 0x0e, 0x47, 0x16, 0x57, 0x80, 0x2e, 0xe2, 0x1a, 0x5d, 0x44, 0x6d, 0xee, 0x40, 0x51,
	0x08, 0x99, 0xcb, 0xaa, 0xcb, 0xaf, 0x60, 0x4d, 0xd8, 0xe5, 0xc5, 0x99, 0x89, 0x2f, 0x54, 0xfd,
	0xef, 0x15, 0x28, 0xb2, 0xb2, 0x7f, 0xc9, 0x1e, 0x7f, 0x83, 0x32, 0xff, 0x17, 0x05, 0xb2, 0xde,
	0x4d, 0xa5, 0x25, 0xfe, 0xab, 0xc5, 0x33, 0x5e, 0x59, 0xaf, 0x05, 0xce, 0x4d, 0x5a, 0xd2, 0x95,
	0xa4, 0x92, 0xfe, 0xdb, 0x29, 0x58, 0x66, 0x15, 0x63, 0x87, 0x36, 0xf1, 0xde, 0x79, 0x6c, 0xc3,
	0x1c, 0xeb, 0xea, 0x7d, 0xf3, 0xd5, 0xe1, 0x91, 0xd3, 0x89, 0x58, 0xfc, 0xe9, 0x36, 0x9f, 0x1b,
	0x23, 0x8b, 0xae, 0x42, 0xca, 0xc1, 0x6d, 0x1b, 0x13, 0xde, 0x9e, 0xf2, 0x2f, 0x54, 0x81, 0x6c,
	0x5b, 0x33, 0x8c, 0x03, 0xad, 0x7d, 0xdc, 0xea, 0xdb, 0x3a, 0x6b, 0x52, 0x6b, 0xb9, 0xf3, 0xd7,
	0x1b, 0x99, 0x1d, 0x3e, 0xbe, 0xdf, 0x6c, 0x34, 0x33, 0xde, 0xa2, 0x7d, 0x5b, 0x47, 0xdf, 0x82,
	0x54, 0xd7, 0xd6, 0x4c, 0xe2, 0xa8, 0x33, 0xd4, 0xda, 0xe5, 0x20, 0xd6, 0xba, 0x3b, 0xd7, 0xe4,
	0x4b, 0xd0, 0x7d, 0x98, 0x71, 0xda, 0x56, 0x0f, 0xab, 0xa9, 0xb8, 0xb5, 0x2f, 0xdd, 0xa9, 0x26,
	0x5b, 0x51, 0x7a, 0x0a, 0xcb, 0xae, 0x8b, 0xd9, 0x8c, 0xef, 0xdc, 0x32, 0xcc, 0x32, 0x43, 0xbd,
	0x70, 0x58, 0x08, 0xea, 0xe0, 0x81, 0xe0, 0x2d, 0xa2, 0x5e, 0x66, 0xe9, 0xf0, 0x6b, 0x2f, 0xc7,
	0x78, 0xf9, 0x17, 0x0a, 0xa8, 0x2f, 0x31, 0xf7, 0xf2, 0x8b, 0xc3, 0x43, 0xbd, 0xad, 0x6b, 0xc6,
	0x85, 0xf9, 0xe8, 0x3e, 0x2c, 0x5a, 0x5c, 0x67, 0xcb, 0xd0, 0x0e, 0xb0, 0x81, 0x59, 0x3c, 0xa6,
	0x9b, 0x39, 0x6f, 0xfc, 0x19, 0x1b, 0x2e, 0xfd, 0x5c, 0x81, 0x1b, 0x43, 0x20, 0x2f, 0x89, 0x46,
	0xf0, 0x05, 0xa2, 0x98, 0x71, 0x5c, 0x85, 0x74, 0xeb, 0xa8, 0x3b, 0xe8, 0x5e, 0x6c, 0x45, 0xe9,
	0x0f, 0x0a, 0xac, 0x57, 0x3b, 0x1d, 0x36, 0x13, 0x97, 0x2c, 0xdf, 0x18, 0xcc, 0x45, 0xd4, 0xa6,
	0x36, 0x6c, 0xf8, 0xa1, 0x71, 0x59, 0xa5, 0xe9, 0x77, 0x0a, 0x6c, 0xb0, 0xda, 0x71, 0x89, 0xde,
	0x78, 0x83, 0xba, 0xf1, 0x27, 0x05, 0x32, 0x3c, 0xa4, 0x69, 0xd9, 0xf8, 0x0a, 0xb1, 0x8c, 0x57,
	0x33, 0xaa, 0x8c, 0xd6, 0x12, 0x30, 0x4f, 0x5a, 0x32, 0x2a, 0x1f, 0xc3, 0x4c, 0x9d, 0x9c, 0xd5,
	0x6d, 0xb4, 0x0b, 0x4b, 0x7b, 0x7d, 0xc3, 0xd8, 0xb1, 0xcc, 0x43, 0xbd, 0xdb, 0xb7, 0x69, 0x63,
	0x89, 0xe4, 0x45, 0x32, 0xbf, 0x1e, 0x9a, 0x0a, 0x08, 0xbe, 0xad, 0x54, 0xfe, 0x39, 0x05, 0xa9,
	0x86, 0xe3, 0xda, 0x89, 0xb6, 0x01, 0x7c, 0x8a, 0xd4, 0xd7, 0x19, 0xa1, 0x4d, 0xf3, 0xab, 0x65,
	0x46, 0xb5, 0x96, 0x3d, 0xaa, 0xb5, 0xfc, 0xf4, 0xa4, 0x47, 0x06, 0x68, 0x0b, 0x66, 0xeb, 0x98,
	0x50, 0x69, 0x89, 0x07, 0xf3, 0x59, 0x71, 0xdc, 0xdd, 0xd1, 0xe7, 0x2f, 0xfd, 0x1d, 0x23, 0x94,
	0xa8, 0x74, 0xc7, 0x17, 0x80, 0xa2, 0x04, 0x28, 0xba, 0x1d, 0x55, 0x14, 0x22, 0x47, 0xa5, 0x0a,
	0xbf, 0x0f, 0xf0, 0x04, 0x1b, 0x98, 0x23, 0x92, 0xac, 0x92, 0x49, 0x57, 0x3e, 0x4f, 0xc3, 0x7c,
	0xc3, 0x11, 0x5a, 0x7e, 0xf4, 0xdc, 0xa3, 0x9d, 0xc5, 0xc1, 0x62, 0xd0, 0xb5, 0x51, 0x42, 0x52,
	0x0a, 0xef, 0x09, 0x2c, 0xd4, 0xb1, 0xc8, 0x29, 0xa0, 0x64, 0xfa, 0x23, 0x1f, 0xc7, 0x8f, 0xa2,
	0x67, 0xb0, 0x18, 0xa6, 0x59, 0xa5, 0xa6, 0x0e, 0xb1, 0x4a, 0x89, 0xd9, 0xe7, 0x1e, 0x87, 0x1d,
	0x6b, 0xa2, 0x8c, 0x73, 0x95, 0x9a, 0xf8, 0x21, 0x2c, 0xb1, 0x13, 0x98, 0xc0, 0x4a, 0x99, 0xae,
	0x7d, 0x58, 0x93, 0x92, 0xac, 0x68, 0x73, 0x18, 0x19, 0x23, 0x78, 0xd8, 0xfc, 0xf0, 0xa1, 0xc1,
	0x25, 0x3f, 0x81, 0xb7, 0x24, 0x24, 0x28, 0xfa, 0xe6, 0x30, 0x7c, 0x13, 0x59, 0x52, 0x29, 0xe2,
	0x16, 0xe4, 0xe5, 0x8c, 0x26, 0xba, 0x3f, 0x04, 0x32, 0x8a, 0xf5, 0x94, 0x6e, 0x70, 0x0c, 0xeb,
	0x49, 0xcc, 0xe3, 0x28, 0x4f, 0x3f, 0x90, 0x5c, 0x87, 0xf8, 0x5a, 0x84, 0xe1, 0x56, 0x22, 0xf7,
	0x88, 0x1e, 0x48, 0xdd, 0x35, 0x89, 0x4d, 0x75, 0x58, 0x0e, 0x3a, 0x84, 0xd5, 0x05, 0x35, 0xc6,
	0x14, 0x3a, 0x23, 0x55, 0xf4, 0x0a, 0x6e, 0xc4, 0x72, 0x76, 0xa3, 0xbc, 0x72, 0x57, 0xe2, 0x95,
	0x50, 0xae, 0xff, 0x10, 0x56, 0x23, 0x76, 0x7e, 0x41, 0xa8, 0x95, 0x5f, 0xcf, 0xc2, 0x5c, 0xc3,
	0xe1, 0x49, 0x1d, 0xbd, 0x0f, 0xf3, 0x01, 0x0a, 0x0a, 0xad, 0x27, 0x31, 0x53, 0xf9, 0x30, 0xd7,
	0x83, 0x1e, 0x02, 0xd4, 0xb1, 0xd7, 0xd4, 0x24, 0x95, 0x93, 0x88, 0xe4, 0x13, 0xc8, 0x8a, 0x04,
	0x93, 0x34, 0x8f, 0xac, 0x8b, 0x2e, 0x8a, 0xd0, 0x51, 0xef, 0xc3, 0x7c, 0x80, 0xb9, 0xf0, 0xf1,
	0xc7, 0x11, 0x1a, 0x51, 0x14, 0x35, 0x98, 0x67, 0x49, 0x63, 0x0c, 0x13, 0x64, 0x87, 0xff, 0x31,
	0xac, 0xc6, 0x13, 0x14, 0xe8, 0xae, 0x10, 0x76, 0xf2, 0x76, 0x3a, 0x21, 0xa6, 0x55, 0x19, 0xa1,
	0x90, 0x84, 0x73, 0x33, 0xc6, 0x63, 0xf1, 0x61, 0xf6, 0x43, 0x58, 0x8a, 0x70, 0x09, 0x49, 0x9a,
	0x6f, 0xc7, 0x68, 0x0e, 0x31, 0x10, 0xaf, 0x60, 0x4d, 0x4a, 0x1f, 0xf8, 0x99, 0x73, 0x14, 0xc3,
	0x20, 0x75, 0xc9, 0x36, 0xe4, 0x7c, 0x5f, 0xb2, 0x10, 0x58, 0x09, 0xe1, 0x4d, 0x8e, 0xd4, 0xa0,
	0xc9, 0x3c, 0x4a, 0x27, 0x34, 0x39, 0x14, 0x9d, 0x35, 0x40, 0x01, 0x7b, 0xbe, 0x00, 0xac, 0xca,
	0xbf, 0x66, 0x21, 0xdd, 0x70, 0xd8, 0x43, 0x0f, 0xed, 0x40, 0x56, 0xec, 0xf2, 0xd1, 0xcd, 0x60,
	0x4c, 0x06, 0xba, 0x52, 0xa9, 0xa1, 0xef, 0xc1, 0x5c, 0xdd, 0x6b, 0x8e, 0x90, 0xf4, 0x59, 0x9b,
	0x0f, 0xf5, 0xc2, 0xa8, 0x06, 0x19, 0xa1, 0x87, 0x96, 0x46, 0xe5, 0x4d, 0xd1, 0x2d, 0xe1, 0x86,
	0x7b, 0x07, 0xb2, 0x62, 0xff, 0xec, 0xe3, 0x8f, 0xe9, 0xaa, 0xa5, 0xf8, 0x1f, 0x43, 0x96, 0x45,
	0xe6, 0x48, 0x13, 0x64, 0x1a, 0x9e, 0xc3, 0x52, 0xa4, 0x4f, 0xf5, 0xdf, 0x17, 0xb2, 0x16, 0x36,
	0xa1, 0x58, 0x2c, 0x04, 0xbb, 0x4d, 0x3f, 0xb9, 0xc7, 0x76, 0xa1, 0x09, 0x8f, 0x8b, 0x1b, 0xb1,
	0x0d, 0x23, 0xba, 0x23, 0xa4, 0x0b, 0x69, 0x07, 0x25, 0x55, 0xfb, 0x13, 0x78, 0x4b, 0xd2, 0xe2,
	0x25, 0xf8, 0xee, 0x5e, 0xf4, 0x1c, 0xe3, 0x53, 0xc5, 0x8f, 0x41, 0x95, 0xb5, 0x76, 0xe8, 0x5e,
	0x30, 0xac, 0x27, 0x87, 0xfe, 0x08, 0x16, 0x86, 0x26, 0xb3, 0xe8, 0x09, 0x75, 0xdc, 0xc9, 0x31,
	0xbd, 0xcb, 0x9e, 0xa5, 0x62, 0x9b, 0x94, 0x60, 0x72, 0x31, 0x6a, 0x72, 0x28, 0xa0, 0x1f, 0xc3,
	0x92, 0x68, 0xc9, 0xe4, 0x88, 0x6a, 0xf5, 0x7f, 0xff, 0xb7, 0x70, 0xed, 0x67, 0xe7, 0x05, 0xe5,
	0xd3, 0xf3, 0x82, 0xf2, 0xd9, 0x79, 0x41, 0xf9, 0xcf, 0x79, 0x41, 0xf9, 0xfc, 0xbc, 0x70, 0xed,
	0x7f, 0xe7, 0x05, 0xe5, 0x47, 0xf7, 0x47, 0xfd, 0x83, 0x4a, 0xef, 0xb8, 0xeb, 0xfe, 0xed, 0x1d,
	0x1c, 0xa4, 0xa8, 0xe2, 0x77, 0xff, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xe9, 0x7d, 0x46, 0xb1, 0x82,
	0x24, 0x00, 0x00,
}
