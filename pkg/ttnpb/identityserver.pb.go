// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/TheThingsNetwork/ttn/api/identityserver.proto

package ttnpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GtwGr service

type GtwGrClient interface {
	// PullConfiguration sends a new GatewayConfiguration, with all the latest values, at connection and when a gateway's configuration is updated
	PullConfiguration(ctx context.Context, in *GatewayIdentifiers, opts ...grpc.CallOption) (GtwGr_PullConfigurationClient, error)
}

type gtwGrClient struct {
	cc *grpc.ClientConn
}

func NewGtwGrClient(cc *grpc.ClientConn) GtwGrClient {
	return &gtwGrClient{cc}
}

func (c *gtwGrClient) PullConfiguration(ctx context.Context, in *GatewayIdentifiers, opts ...grpc.CallOption) (GtwGr_PullConfigurationClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GtwGr_serviceDesc.Streams[0], c.cc, "/ttn.v3.GtwGr/PullConfiguration", opts...)
	if err != nil {
		return nil, err
	}
	x := &gtwGrPullConfigurationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GtwGr_PullConfigurationClient interface {
	Recv() (*GatewayConfiguration, error)
	grpc.ClientStream
}

type gtwGrPullConfigurationClient struct {
	grpc.ClientStream
}

func (x *gtwGrPullConfigurationClient) Recv() (*GatewayConfiguration, error) {
	m := new(GatewayConfiguration)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GtwGr service

type GtwGrServer interface {
	// PullConfiguration sends a new GatewayConfiguration, with all the latest values, at connection and when a gateway's configuration is updated
	PullConfiguration(*GatewayIdentifiers, GtwGr_PullConfigurationServer) error
}

func RegisterGtwGrServer(s *grpc.Server, srv GtwGrServer) {
	s.RegisterService(&_GtwGr_serviceDesc, srv)
}

func _GtwGr_PullConfiguration_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GatewayIdentifiers)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GtwGrServer).PullConfiguration(m, &gtwGrPullConfigurationServer{stream})
}

type GtwGr_PullConfigurationServer interface {
	Send(*GatewayConfiguration) error
	grpc.ServerStream
}

type gtwGrPullConfigurationServer struct {
	grpc.ServerStream
}

func (x *gtwGrPullConfigurationServer) Send(m *GatewayConfiguration) error {
	return x.ServerStream.SendMsg(m)
}

var _GtwGr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.v3.GtwGr",
	HandlerType: (*GtwGrServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullConfiguration",
			Handler:       _GtwGr_PullConfiguration_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/TheThingsNetwork/ttn/api/identityserver.proto",
}

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/identityserver.proto", fileDescriptorIdentityserver)
}

var fileDescriptorIdentityserver = []byte{
	// 234 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xb2, 0x48, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x0f, 0xc9, 0x48, 0x0d, 0xc9, 0xc8, 0xcc, 0x4b, 0x2f,
	0xf6, 0x4b, 0x2d, 0x29, 0xcf, 0x2f, 0xca, 0xd6, 0x2f, 0x29, 0xc9, 0xd3, 0x4f, 0x2c, 0xc8, 0xd4,
	0xcf, 0x4c, 0x49, 0xcd, 0x2b, 0xc9, 0x2c, 0xa9, 0x2c, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0xd2, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2b, 0x29, 0xc9, 0xd3, 0x2b, 0x33, 0x96, 0xd2, 0x45, 0x32,
	0x21, 0x3d, 0x3f, 0x3d, 0x5f, 0x1f, 0x2c, 0x9d, 0x54, 0x9a, 0x06, 0xe6, 0x81, 0x39, 0x60, 0x16,
	0x44, 0x9b, 0x94, 0x29, 0xf1, 0x16, 0xa6, 0x65, 0xa6, 0x16, 0x15, 0x43, 0xb5, 0x19, 0x12, 0xa3,
	0x2d, 0x3d, 0xb1, 0x24, 0xb5, 0x3c, 0xb1, 0x12, 0xa2, 0xc5, 0x28, 0x82, 0x8b, 0xd5, 0xbd, 0xa4,
	0xdc, 0xbd, 0x48, 0xc8, 0x9f, 0x4b, 0x30, 0xa0, 0x34, 0x27, 0xc7, 0x39, 0x3f, 0x2f, 0x2d, 0x33,
	0xbd, 0xb4, 0x28, 0xb1, 0x24, 0x33, 0x3f, 0x4f, 0x48, 0x4a, 0x0f, 0xe2, 0x7e, 0x3d, 0x77, 0x88,
	0x26, 0x4f, 0x84, 0x95, 0x52, 0x32, 0x68, 0x72, 0x28, 0x3a, 0x0d, 0x18, 0x9d, 0xdc, 0x6f, 0x3c,
	0x94, 0x63, 0x68, 0x78, 0x24, 0xc7, 0x78, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f,
	0x1e, 0xc9, 0x31, 0xbe, 0x78, 0x24, 0xc7, 0xf0, 0xe1, 0x91, 0x1c, 0x63, 0x94, 0x26, 0x21, 0xa7,
	0x16, 0x64, 0xa7, 0x83, 0xe8, 0x82, 0xa4, 0x24, 0x36, 0xb0, 0x4b, 0x8d, 0x01, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xce, 0x4b, 0x8c, 0x5e, 0x86, 0x01, 0x00, 0x00,
}
