// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/TheThingsNetwork/ttn/api/identityserver.proto

package ttnpb

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import google_protobuf2 "github.com/gogo/protobuf/types"
import google_protobuf5 "github.com/gogo/protobuf/types"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GetSettingsRequest struct {
	// projection_mask is the set of field paths that represents the settings that
	// will be returned in the operation. If the list is empty all settings will be returned.
	ProjectionMask *google_protobuf5.FieldMask `protobuf:"bytes,1,opt,name=projection_mask,json=projectionMask" json:"projection_mask,omitempty"`
}

func (m *GetSettingsRequest) Reset()                    { *m = GetSettingsRequest{} }
func (m *GetSettingsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSettingsRequest) ProtoMessage()               {}
func (*GetSettingsRequest) Descriptor() ([]byte, []int) { return fileDescriptorIdentityserver, []int{0} }

func (m *GetSettingsRequest) GetProjectionMask() *google_protobuf5.FieldMask {
	if m != nil {
		return m.ProjectionMask
	}
	return nil
}

type UpdateSettingsRequest struct {
	// settings are the settings to be updated.
	Settings IdentityServerSettings `protobuf:"bytes,1,opt,name=settings" json:"settings"`
	// update_mask is the symbolic set of fields that will be affected in the update
	// operation. Fields not included in the update_mask are not changed and ignored
	// in the request. Must be non-empty.
	UpdateMask google_protobuf5.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask" json:"update_mask"`
}

func (m *UpdateSettingsRequest) Reset()         { *m = UpdateSettingsRequest{} }
func (m *UpdateSettingsRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateSettingsRequest) ProtoMessage()    {}
func (*UpdateSettingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{1}
}

func (m *UpdateSettingsRequest) GetSettings() IdentityServerSettings {
	if m != nil {
		return m.Settings
	}
	return IdentityServerSettings{}
}

func (m *UpdateSettingsRequest) GetUpdateMask() google_protobuf5.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return google_protobuf5.FieldMask{}
}

type CreateUserRequest struct {
	// user is the user to be created.
	User User `protobuf:"bytes,1,opt,name=user" json:"user"`
	// invitation_token is the token provided within the registration process to
	// be able to create an user account.
	// This token is only required when the Identity Server registration mode is
	// set to "invitation only", otherwise it will be ignored.
	InvitationToken string `protobuf:"bytes,2,opt,name=invitation_token,json=invitationToken,proto3" json:"invitation_token,omitempty"`
}

func (m *CreateUserRequest) Reset()                    { *m = CreateUserRequest{} }
func (m *CreateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateUserRequest) ProtoMessage()               {}
func (*CreateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptorIdentityserver, []int{2} }

func (m *CreateUserRequest) GetUser() User {
	if m != nil {
		return m.User
	}
	return User{}
}

func (m *CreateUserRequest) GetInvitationToken() string {
	if m != nil {
		return m.InvitationToken
	}
	return ""
}

type UpdateUserRequest struct {
	// User is the user to be updated.
	User User `protobuf:"bytes,1,opt,name=user" json:"user"`
	// update_mask is the symbolic set of fields that will be affected in the update
	// operation. Fields not included in the update_mask are not changed and ignored
	// in the request. Must be non-empty.
	UpdateMask google_protobuf5.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask" json:"update_mask"`
}

func (m *UpdateUserRequest) Reset()                    { *m = UpdateUserRequest{} }
func (m *UpdateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserRequest) ProtoMessage()               {}
func (*UpdateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptorIdentityserver, []int{3} }

func (m *UpdateUserRequest) GetUser() User {
	if m != nil {
		return m.User
	}
	return User{}
}

func (m *UpdateUserRequest) GetUpdateMask() google_protobuf5.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return google_protobuf5.FieldMask{}
}

type UpdateUserPasswordRequest struct {
	// old is the user's old password.
	Old string `protobuf:"bytes,1,opt,name=old,proto3" json:"old,omitempty"`
	// new is the user's new password.
	New string `protobuf:"bytes,2,opt,name=new,proto3" json:"new,omitempty"`
}

func (m *UpdateUserPasswordRequest) Reset()         { *m = UpdateUserPasswordRequest{} }
func (m *UpdateUserPasswordRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateUserPasswordRequest) ProtoMessage()    {}
func (*UpdateUserPasswordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{4}
}

func (m *UpdateUserPasswordRequest) GetOld() string {
	if m != nil {
		return m.Old
	}
	return ""
}

func (m *UpdateUserPasswordRequest) GetNew() string {
	if m != nil {
		return m.New
	}
	return ""
}

type GenerateUserAPIKeyRequest struct {
	// name is the name of the API key to be generated.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// rights the are rights the generated API key will bear.
	Rights []Right `protobuf:"varint,2,rep,packed,name=rights,enum=ttn.v3.Right" json:"rights,omitempty"`
}

func (m *GenerateUserAPIKeyRequest) Reset()         { *m = GenerateUserAPIKeyRequest{} }
func (m *GenerateUserAPIKeyRequest) String() string { return proto.CompactTextString(m) }
func (*GenerateUserAPIKeyRequest) ProtoMessage()    {}
func (*GenerateUserAPIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{5}
}

func (m *GenerateUserAPIKeyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GenerateUserAPIKeyRequest) GetRights() []Right {
	if m != nil {
		return m.Rights
	}
	return nil
}

type ListUserAPIKeysResponse struct {
	// api_keys are the API keys that the user has currently registered.
	APIKeys []APIKey `protobuf:"bytes,1,rep,name=api_keys,json=apiKeys" json:"api_keys"`
}

func (m *ListUserAPIKeysResponse) Reset()         { *m = ListUserAPIKeysResponse{} }
func (m *ListUserAPIKeysResponse) String() string { return proto.CompactTextString(m) }
func (*ListUserAPIKeysResponse) ProtoMessage()    {}
func (*ListUserAPIKeysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{6}
}

func (m *ListUserAPIKeysResponse) GetAPIKeys() []APIKey {
	if m != nil {
		return m.APIKeys
	}
	return nil
}

type UpdateUserAPIKeyRequest struct {
	// name is the name of the user API key to be updated.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// rights are the list of rights that will be set.
	Rights []Right `protobuf:"varint,2,rep,packed,name=rights,enum=ttn.v3.Right" json:"rights,omitempty"`
}

func (m *UpdateUserAPIKeyRequest) Reset()         { *m = UpdateUserAPIKeyRequest{} }
func (m *UpdateUserAPIKeyRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateUserAPIKeyRequest) ProtoMessage()    {}
func (*UpdateUserAPIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{7}
}

func (m *UpdateUserAPIKeyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateUserAPIKeyRequest) GetRights() []Right {
	if m != nil {
		return m.Rights
	}
	return nil
}

type RemoveUserAPIKeyRequest struct {
	// name is the name of the user API key to be removed.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *RemoveUserAPIKeyRequest) Reset()         { *m = RemoveUserAPIKeyRequest{} }
func (m *RemoveUserAPIKeyRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveUserAPIKeyRequest) ProtoMessage()    {}
func (*RemoveUserAPIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{8}
}

func (m *RemoveUserAPIKeyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ValidateUserEmailRequest struct {
	// token is the token sent to the user's email address in order to validate it.
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *ValidateUserEmailRequest) Reset()         { *m = ValidateUserEmailRequest{} }
func (m *ValidateUserEmailRequest) String() string { return proto.CompactTextString(m) }
func (*ValidateUserEmailRequest) ProtoMessage()    {}
func (*ValidateUserEmailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{9}
}

func (m *ValidateUserEmailRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type ListAuthorizedClientsResponse struct {
	// clients is the list of clients an user has currently authorized.
	Clients []Client `protobuf:"bytes,1,rep,name=clients" json:"clients"`
}

func (m *ListAuthorizedClientsResponse) Reset()         { *m = ListAuthorizedClientsResponse{} }
func (m *ListAuthorizedClientsResponse) String() string { return proto.CompactTextString(m) }
func (*ListAuthorizedClientsResponse) ProtoMessage()    {}
func (*ListAuthorizedClientsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{10}
}

func (m *ListAuthorizedClientsResponse) GetClients() []Client {
	if m != nil {
		return m.Clients
	}
	return nil
}

type CreateApplicationRequest struct {
	// application is the application to be created.
	Application Application `protobuf:"bytes,1,opt,name=application" json:"application"`
}

func (m *CreateApplicationRequest) Reset()         { *m = CreateApplicationRequest{} }
func (m *CreateApplicationRequest) String() string { return proto.CompactTextString(m) }
func (*CreateApplicationRequest) ProtoMessage()    {}
func (*CreateApplicationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{11}
}

func (m *CreateApplicationRequest) GetApplication() Application {
	if m != nil {
		return m.Application
	}
	return Application{}
}

type ListApplicationsResponse struct {
	// applications is the list of applications the authenticated user has access to.
	Applications []Application `protobuf:"bytes,1,rep,name=applications" json:"applications"`
}

func (m *ListApplicationsResponse) Reset()         { *m = ListApplicationsResponse{} }
func (m *ListApplicationsResponse) String() string { return proto.CompactTextString(m) }
func (*ListApplicationsResponse) ProtoMessage()    {}
func (*ListApplicationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{12}
}

func (m *ListApplicationsResponse) GetApplications() []Application {
	if m != nil {
		return m.Applications
	}
	return nil
}

type UpdateApplicationRequest struct {
	// application is the application to be updated.
	Application Application `protobuf:"bytes,1,opt,name=application" json:"application"`
	// update_mask is the set of field paths that will be affected in the update
	// operation. Fields not included in the update_mask are not changed and ignored
	// in the request. Must be non-empty.
	UpdateMask google_protobuf5.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask" json:"update_mask"`
}

func (m *UpdateApplicationRequest) Reset()         { *m = UpdateApplicationRequest{} }
func (m *UpdateApplicationRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateApplicationRequest) ProtoMessage()    {}
func (*UpdateApplicationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{13}
}

func (m *UpdateApplicationRequest) GetApplication() Application {
	if m != nil {
		return m.Application
	}
	return Application{}
}

func (m *UpdateApplicationRequest) GetUpdateMask() google_protobuf5.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return google_protobuf5.FieldMask{}
}

type GenerateApplicationAPIKeyRequest struct {
	// application_id is the application's ID which API key will be added to.
	ApplicationIdentifier `protobuf:"bytes,1,opt,name=application_id,json=applicationId,embedded=application_id" json:"application_id"`
	// name is the name of the API key to be generated.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// rights the are rights the generated API key will bear.
	Rights []Right `protobuf:"varint,3,rep,packed,name=rights,enum=ttn.v3.Right" json:"rights,omitempty"`
}

func (m *GenerateApplicationAPIKeyRequest) Reset()         { *m = GenerateApplicationAPIKeyRequest{} }
func (m *GenerateApplicationAPIKeyRequest) String() string { return proto.CompactTextString(m) }
func (*GenerateApplicationAPIKeyRequest) ProtoMessage()    {}
func (*GenerateApplicationAPIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{14}
}

func (m *GenerateApplicationAPIKeyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GenerateApplicationAPIKeyRequest) GetRights() []Right {
	if m != nil {
		return m.Rights
	}
	return nil
}

type ListApplicationAPIKeysResponse struct {
	// api_keys are the API keys that the application has currently registered.
	APIKeys []APIKey `protobuf:"bytes,1,rep,name=api_keys,json=apiKeys" json:"api_keys"`
}

func (m *ListApplicationAPIKeysResponse) Reset()         { *m = ListApplicationAPIKeysResponse{} }
func (m *ListApplicationAPIKeysResponse) String() string { return proto.CompactTextString(m) }
func (*ListApplicationAPIKeysResponse) ProtoMessage()    {}
func (*ListApplicationAPIKeysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{15}
}

func (m *ListApplicationAPIKeysResponse) GetAPIKeys() []APIKey {
	if m != nil {
		return m.APIKeys
	}
	return nil
}

type UpdateApplicationAPIKeyRequest struct {
	// application_id is the application's ID which an API key will be modified.
	ApplicationIdentifier `protobuf:"bytes,1,opt,name=application_id,json=applicationId,embedded=application_id" json:"application_id"`
	// name is the name of the application API key to be updated.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// rights are the list of rights that will be set.
	Rights []Right `protobuf:"varint,3,rep,packed,name=rights,enum=ttn.v3.Right" json:"rights,omitempty"`
}

func (m *UpdateApplicationAPIKeyRequest) Reset()         { *m = UpdateApplicationAPIKeyRequest{} }
func (m *UpdateApplicationAPIKeyRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateApplicationAPIKeyRequest) ProtoMessage()    {}
func (*UpdateApplicationAPIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{16}
}

func (m *UpdateApplicationAPIKeyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateApplicationAPIKeyRequest) GetRights() []Right {
	if m != nil {
		return m.Rights
	}
	return nil
}

type RemoveApplicationAPIKeyRequest struct {
	// application_id is the application's ID which the API key will be removed from.
	ApplicationIdentifier `protobuf:"bytes,1,opt,name=application_id,json=applicationId,embedded=application_id" json:"application_id"`
	// name is the name of the application API key to be removed.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *RemoveApplicationAPIKeyRequest) Reset()         { *m = RemoveApplicationAPIKeyRequest{} }
func (m *RemoveApplicationAPIKeyRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveApplicationAPIKeyRequest) ProtoMessage()    {}
func (*RemoveApplicationAPIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{17}
}

func (m *RemoveApplicationAPIKeyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type SetApplicationCollaboratorRequest struct {
	// application_id is the application ID where the collaborator will be (un)set.
	ApplicationIdentifier `protobuf:"bytes,1,opt,name=application_id,json=applicationId,embedded=application_id" json:"application_id"`
	// collaborator is the collaborator to be set. If the list if rights is empty
	// it will result as unset.
	Collaborator Collaborator `protobuf:"bytes,2,opt,name=collaborator" json:"collaborator"`
}

func (m *SetApplicationCollaboratorRequest) Reset()         { *m = SetApplicationCollaboratorRequest{} }
func (m *SetApplicationCollaboratorRequest) String() string { return proto.CompactTextString(m) }
func (*SetApplicationCollaboratorRequest) ProtoMessage()    {}
func (*SetApplicationCollaboratorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{18}
}

func (m *SetApplicationCollaboratorRequest) GetCollaborator() Collaborator {
	if m != nil {
		return m.Collaborator
	}
	return Collaborator{}
}

type ListApplicationCollaboratorsResponse struct {
	// collaborators is the list of collaborators the application has.
	Collaborators []Collaborator `protobuf:"bytes,1,rep,name=collaborators" json:"collaborators"`
}

func (m *ListApplicationCollaboratorsResponse) Reset()         { *m = ListApplicationCollaboratorsResponse{} }
func (m *ListApplicationCollaboratorsResponse) String() string { return proto.CompactTextString(m) }
func (*ListApplicationCollaboratorsResponse) ProtoMessage()    {}
func (*ListApplicationCollaboratorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{19}
}

func (m *ListApplicationCollaboratorsResponse) GetCollaborators() []Collaborator {
	if m != nil {
		return m.Collaborators
	}
	return nil
}

type CreateGatewayRequest struct {
	// gateway is the gateway to be created.
	Gateway Gateway `protobuf:"bytes,1,opt,name=gateway" json:"gateway"`
}

func (m *CreateGatewayRequest) Reset()         { *m = CreateGatewayRequest{} }
func (m *CreateGatewayRequest) String() string { return proto.CompactTextString(m) }
func (*CreateGatewayRequest) ProtoMessage()    {}
func (*CreateGatewayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{20}
}

func (m *CreateGatewayRequest) GetGateway() Gateway {
	if m != nil {
		return m.Gateway
	}
	return Gateway{}
}

type ListGatewaysResponse struct {
	// gateways it the list of gateways the authenticated user has access to.
	Gateways []Gateway `protobuf:"bytes,1,rep,name=gateways" json:"gateways"`
}

func (m *ListGatewaysResponse) Reset()         { *m = ListGatewaysResponse{} }
func (m *ListGatewaysResponse) String() string { return proto.CompactTextString(m) }
func (*ListGatewaysResponse) ProtoMessage()    {}
func (*ListGatewaysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{21}
}

func (m *ListGatewaysResponse) GetGateways() []Gateway {
	if m != nil {
		return m.Gateways
	}
	return nil
}

type UpdateGatewayRequest struct {
	// gateway is the gateway to be updated.
	Gateway Gateway `protobuf:"bytes,1,opt,name=gateway" json:"gateway"`
	// update_mask is the set of field paths that will be affected in the update
	// operation. Fields not included in the update_mask are not changed and ignored
	// in the request. Must be non-empty.
	UpdateMask google_protobuf5.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask" json:"update_mask"`
}

func (m *UpdateGatewayRequest) Reset()         { *m = UpdateGatewayRequest{} }
func (m *UpdateGatewayRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateGatewayRequest) ProtoMessage()    {}
func (*UpdateGatewayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{22}
}

func (m *UpdateGatewayRequest) GetGateway() Gateway {
	if m != nil {
		return m.Gateway
	}
	return Gateway{}
}

func (m *UpdateGatewayRequest) GetUpdateMask() google_protobuf5.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return google_protobuf5.FieldMask{}
}

type GenerateGatewayAPIKeyRequest struct {
	// gateway_id is the gateway's ID which API key will be added to.
	GatewayIdentifier `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,embedded=gateway_id" json:"gateway_id"`
	// name is the name of the API key to be generated.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// rights the are rights the generated API key will bear.
	Rights []Right `protobuf:"varint,3,rep,packed,name=rights,enum=ttn.v3.Right" json:"rights,omitempty"`
}

func (m *GenerateGatewayAPIKeyRequest) Reset()         { *m = GenerateGatewayAPIKeyRequest{} }
func (m *GenerateGatewayAPIKeyRequest) String() string { return proto.CompactTextString(m) }
func (*GenerateGatewayAPIKeyRequest) ProtoMessage()    {}
func (*GenerateGatewayAPIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{23}
}

func (m *GenerateGatewayAPIKeyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GenerateGatewayAPIKeyRequest) GetRights() []Right {
	if m != nil {
		return m.Rights
	}
	return nil
}

type ListGatewayAPIKeysResponse struct {
	// api_keys are the API keys that the gateways has currently registered.
	APIKeys []APIKey `protobuf:"bytes,1,rep,name=api_keys,json=apiKeys" json:"api_keys"`
}

func (m *ListGatewayAPIKeysResponse) Reset()         { *m = ListGatewayAPIKeysResponse{} }
func (m *ListGatewayAPIKeysResponse) String() string { return proto.CompactTextString(m) }
func (*ListGatewayAPIKeysResponse) ProtoMessage()    {}
func (*ListGatewayAPIKeysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{24}
}

func (m *ListGatewayAPIKeysResponse) GetAPIKeys() []APIKey {
	if m != nil {
		return m.APIKeys
	}
	return nil
}

type UpdateGatewayAPIKeyRequest struct {
	// gateway_id is the gateway's ID which an API key will be modified.
	GatewayIdentifier `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,embedded=gateway_id" json:"gateway_id"`
	// name is the name of the gateway API key to be updated.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// rights are the list of rights that will be set.
	Rights []Right `protobuf:"varint,3,rep,packed,name=rights,enum=ttn.v3.Right" json:"rights,omitempty"`
}

func (m *UpdateGatewayAPIKeyRequest) Reset()         { *m = UpdateGatewayAPIKeyRequest{} }
func (m *UpdateGatewayAPIKeyRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateGatewayAPIKeyRequest) ProtoMessage()    {}
func (*UpdateGatewayAPIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{25}
}

func (m *UpdateGatewayAPIKeyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateGatewayAPIKeyRequest) GetRights() []Right {
	if m != nil {
		return m.Rights
	}
	return nil
}

type RemoveGatewayAPIKeyRequest struct {
	// gateway_id is the gateway's ID which API key will be removed from.
	GatewayIdentifier `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,embedded=gateway_id" json:"gateway_id"`
	// name is the name of the gateway API key to be removed.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *RemoveGatewayAPIKeyRequest) Reset()         { *m = RemoveGatewayAPIKeyRequest{} }
func (m *RemoveGatewayAPIKeyRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveGatewayAPIKeyRequest) ProtoMessage()    {}
func (*RemoveGatewayAPIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{26}
}

func (m *RemoveGatewayAPIKeyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type SetGatewayCollaboratorRequest struct {
	// gateway_id is the ID of the gateway where the collaborator will be (un)set.
	GatewayIdentifier `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,embedded=gateway_id" json:"gateway_id"`
	// collaborator is the collaborator to be set. If the list if rights is empty
	// it will result as unset.
	Collaborator Collaborator `protobuf:"bytes,2,opt,name=collaborator" json:"collaborator"`
}

func (m *SetGatewayCollaboratorRequest) Reset()         { *m = SetGatewayCollaboratorRequest{} }
func (m *SetGatewayCollaboratorRequest) String() string { return proto.CompactTextString(m) }
func (*SetGatewayCollaboratorRequest) ProtoMessage()    {}
func (*SetGatewayCollaboratorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{27}
}

func (m *SetGatewayCollaboratorRequest) GetCollaborator() Collaborator {
	if m != nil {
		return m.Collaborator
	}
	return Collaborator{}
}

type ListGatewayCollaboratorsResponse struct {
	// collaborators is the list of collaborators a gateway has.
	Collaborators []Collaborator `protobuf:"bytes,1,rep,name=collaborators" json:"collaborators"`
}

func (m *ListGatewayCollaboratorsResponse) Reset()         { *m = ListGatewayCollaboratorsResponse{} }
func (m *ListGatewayCollaboratorsResponse) String() string { return proto.CompactTextString(m) }
func (*ListGatewayCollaboratorsResponse) ProtoMessage()    {}
func (*ListGatewayCollaboratorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{28}
}

func (m *ListGatewayCollaboratorsResponse) GetCollaborators() []Collaborator {
	if m != nil {
		return m.Collaborators
	}
	return nil
}

type CreateClientRequest struct {
	// client is the client to be created.
	Client Client `protobuf:"bytes,1,opt,name=client" json:"client"`
}

func (m *CreateClientRequest) Reset()         { *m = CreateClientRequest{} }
func (m *CreateClientRequest) String() string { return proto.CompactTextString(m) }
func (*CreateClientRequest) ProtoMessage()    {}
func (*CreateClientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{29}
}

func (m *CreateClientRequest) GetClient() Client {
	if m != nil {
		return m.Client
	}
	return Client{}
}

type ListClientsResponse struct {
	// clients is a list of third-party clients.
	Clients []Client `protobuf:"bytes,1,rep,name=clients" json:"clients"`
}

func (m *ListClientsResponse) Reset()         { *m = ListClientsResponse{} }
func (m *ListClientsResponse) String() string { return proto.CompactTextString(m) }
func (*ListClientsResponse) ProtoMessage()    {}
func (*ListClientsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{30}
}

func (m *ListClientsResponse) GetClients() []Client {
	if m != nil {
		return m.Clients
	}
	return nil
}

type UpdateClientRequest struct {
	// client is the client to be updated.
	Client Client `protobuf:"bytes,1,opt,name=client" json:"client"`
	// update_mask is the set of field paths that will be affected in the update
	// operation. Fields not included in the update_mask are not changed and ignored
	// in the request. Must be non-empty.
	UpdateMask google_protobuf5.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask" json:"update_mask"`
}

func (m *UpdateClientRequest) Reset()         { *m = UpdateClientRequest{} }
func (m *UpdateClientRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateClientRequest) ProtoMessage()    {}
func (*UpdateClientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{31}
}

func (m *UpdateClientRequest) GetClient() Client {
	if m != nil {
		return m.Client
	}
	return Client{}
}

func (m *UpdateClientRequest) GetUpdateMask() google_protobuf5.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return google_protobuf5.FieldMask{}
}

func init() {
	proto.RegisterType((*GetSettingsRequest)(nil), "ttn.v3.GetSettingsRequest")
	golang_proto.RegisterType((*GetSettingsRequest)(nil), "ttn.v3.GetSettingsRequest")
	proto.RegisterType((*UpdateSettingsRequest)(nil), "ttn.v3.UpdateSettingsRequest")
	golang_proto.RegisterType((*UpdateSettingsRequest)(nil), "ttn.v3.UpdateSettingsRequest")
	proto.RegisterType((*CreateUserRequest)(nil), "ttn.v3.CreateUserRequest")
	golang_proto.RegisterType((*CreateUserRequest)(nil), "ttn.v3.CreateUserRequest")
	proto.RegisterType((*UpdateUserRequest)(nil), "ttn.v3.UpdateUserRequest")
	golang_proto.RegisterType((*UpdateUserRequest)(nil), "ttn.v3.UpdateUserRequest")
	proto.RegisterType((*UpdateUserPasswordRequest)(nil), "ttn.v3.UpdateUserPasswordRequest")
	golang_proto.RegisterType((*UpdateUserPasswordRequest)(nil), "ttn.v3.UpdateUserPasswordRequest")
	proto.RegisterType((*GenerateUserAPIKeyRequest)(nil), "ttn.v3.GenerateUserAPIKeyRequest")
	golang_proto.RegisterType((*GenerateUserAPIKeyRequest)(nil), "ttn.v3.GenerateUserAPIKeyRequest")
	proto.RegisterType((*ListUserAPIKeysResponse)(nil), "ttn.v3.ListUserAPIKeysResponse")
	golang_proto.RegisterType((*ListUserAPIKeysResponse)(nil), "ttn.v3.ListUserAPIKeysResponse")
	proto.RegisterType((*UpdateUserAPIKeyRequest)(nil), "ttn.v3.UpdateUserAPIKeyRequest")
	golang_proto.RegisterType((*UpdateUserAPIKeyRequest)(nil), "ttn.v3.UpdateUserAPIKeyRequest")
	proto.RegisterType((*RemoveUserAPIKeyRequest)(nil), "ttn.v3.RemoveUserAPIKeyRequest")
	golang_proto.RegisterType((*RemoveUserAPIKeyRequest)(nil), "ttn.v3.RemoveUserAPIKeyRequest")
	proto.RegisterType((*ValidateUserEmailRequest)(nil), "ttn.v3.ValidateUserEmailRequest")
	golang_proto.RegisterType((*ValidateUserEmailRequest)(nil), "ttn.v3.ValidateUserEmailRequest")
	proto.RegisterType((*ListAuthorizedClientsResponse)(nil), "ttn.v3.ListAuthorizedClientsResponse")
	golang_proto.RegisterType((*ListAuthorizedClientsResponse)(nil), "ttn.v3.ListAuthorizedClientsResponse")
	proto.RegisterType((*CreateApplicationRequest)(nil), "ttn.v3.CreateApplicationRequest")
	golang_proto.RegisterType((*CreateApplicationRequest)(nil), "ttn.v3.CreateApplicationRequest")
	proto.RegisterType((*ListApplicationsResponse)(nil), "ttn.v3.ListApplicationsResponse")
	golang_proto.RegisterType((*ListApplicationsResponse)(nil), "ttn.v3.ListApplicationsResponse")
	proto.RegisterType((*UpdateApplicationRequest)(nil), "ttn.v3.UpdateApplicationRequest")
	golang_proto.RegisterType((*UpdateApplicationRequest)(nil), "ttn.v3.UpdateApplicationRequest")
	proto.RegisterType((*GenerateApplicationAPIKeyRequest)(nil), "ttn.v3.GenerateApplicationAPIKeyRequest")
	golang_proto.RegisterType((*GenerateApplicationAPIKeyRequest)(nil), "ttn.v3.GenerateApplicationAPIKeyRequest")
	proto.RegisterType((*ListApplicationAPIKeysResponse)(nil), "ttn.v3.ListApplicationAPIKeysResponse")
	golang_proto.RegisterType((*ListApplicationAPIKeysResponse)(nil), "ttn.v3.ListApplicationAPIKeysResponse")
	proto.RegisterType((*UpdateApplicationAPIKeyRequest)(nil), "ttn.v3.UpdateApplicationAPIKeyRequest")
	golang_proto.RegisterType((*UpdateApplicationAPIKeyRequest)(nil), "ttn.v3.UpdateApplicationAPIKeyRequest")
	proto.RegisterType((*RemoveApplicationAPIKeyRequest)(nil), "ttn.v3.RemoveApplicationAPIKeyRequest")
	golang_proto.RegisterType((*RemoveApplicationAPIKeyRequest)(nil), "ttn.v3.RemoveApplicationAPIKeyRequest")
	proto.RegisterType((*SetApplicationCollaboratorRequest)(nil), "ttn.v3.SetApplicationCollaboratorRequest")
	golang_proto.RegisterType((*SetApplicationCollaboratorRequest)(nil), "ttn.v3.SetApplicationCollaboratorRequest")
	proto.RegisterType((*ListApplicationCollaboratorsResponse)(nil), "ttn.v3.ListApplicationCollaboratorsResponse")
	golang_proto.RegisterType((*ListApplicationCollaboratorsResponse)(nil), "ttn.v3.ListApplicationCollaboratorsResponse")
	proto.RegisterType((*CreateGatewayRequest)(nil), "ttn.v3.CreateGatewayRequest")
	golang_proto.RegisterType((*CreateGatewayRequest)(nil), "ttn.v3.CreateGatewayRequest")
	proto.RegisterType((*ListGatewaysResponse)(nil), "ttn.v3.ListGatewaysResponse")
	golang_proto.RegisterType((*ListGatewaysResponse)(nil), "ttn.v3.ListGatewaysResponse")
	proto.RegisterType((*UpdateGatewayRequest)(nil), "ttn.v3.UpdateGatewayRequest")
	golang_proto.RegisterType((*UpdateGatewayRequest)(nil), "ttn.v3.UpdateGatewayRequest")
	proto.RegisterType((*GenerateGatewayAPIKeyRequest)(nil), "ttn.v3.GenerateGatewayAPIKeyRequest")
	golang_proto.RegisterType((*GenerateGatewayAPIKeyRequest)(nil), "ttn.v3.GenerateGatewayAPIKeyRequest")
	proto.RegisterType((*ListGatewayAPIKeysResponse)(nil), "ttn.v3.ListGatewayAPIKeysResponse")
	golang_proto.RegisterType((*ListGatewayAPIKeysResponse)(nil), "ttn.v3.ListGatewayAPIKeysResponse")
	proto.RegisterType((*UpdateGatewayAPIKeyRequest)(nil), "ttn.v3.UpdateGatewayAPIKeyRequest")
	golang_proto.RegisterType((*UpdateGatewayAPIKeyRequest)(nil), "ttn.v3.UpdateGatewayAPIKeyRequest")
	proto.RegisterType((*RemoveGatewayAPIKeyRequest)(nil), "ttn.v3.RemoveGatewayAPIKeyRequest")
	golang_proto.RegisterType((*RemoveGatewayAPIKeyRequest)(nil), "ttn.v3.RemoveGatewayAPIKeyRequest")
	proto.RegisterType((*SetGatewayCollaboratorRequest)(nil), "ttn.v3.SetGatewayCollaboratorRequest")
	golang_proto.RegisterType((*SetGatewayCollaboratorRequest)(nil), "ttn.v3.SetGatewayCollaboratorRequest")
	proto.RegisterType((*ListGatewayCollaboratorsResponse)(nil), "ttn.v3.ListGatewayCollaboratorsResponse")
	golang_proto.RegisterType((*ListGatewayCollaboratorsResponse)(nil), "ttn.v3.ListGatewayCollaboratorsResponse")
	proto.RegisterType((*CreateClientRequest)(nil), "ttn.v3.CreateClientRequest")
	golang_proto.RegisterType((*CreateClientRequest)(nil), "ttn.v3.CreateClientRequest")
	proto.RegisterType((*ListClientsResponse)(nil), "ttn.v3.ListClientsResponse")
	golang_proto.RegisterType((*ListClientsResponse)(nil), "ttn.v3.ListClientsResponse")
	proto.RegisterType((*UpdateClientRequest)(nil), "ttn.v3.UpdateClientRequest")
	golang_proto.RegisterType((*UpdateClientRequest)(nil), "ttn.v3.UpdateClientRequest")
}
func (this *GetSettingsRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GetSettingsRequest)
	if !ok {
		that2, ok := that.(GetSettingsRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GetSettingsRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GetSettingsRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GetSettingsRequest but is not nil && this == nil")
	}
	if !this.ProjectionMask.Equal(that1.ProjectionMask) {
		return fmt.Errorf("ProjectionMask this(%v) Not Equal that(%v)", this.ProjectionMask, that1.ProjectionMask)
	}
	return nil
}
func (this *GetSettingsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetSettingsRequest)
	if !ok {
		that2, ok := that.(GetSettingsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ProjectionMask.Equal(that1.ProjectionMask) {
		return false
	}
	return true
}
func (this *UpdateSettingsRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UpdateSettingsRequest)
	if !ok {
		that2, ok := that.(UpdateSettingsRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UpdateSettingsRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UpdateSettingsRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UpdateSettingsRequest but is not nil && this == nil")
	}
	if !this.Settings.Equal(&that1.Settings) {
		return fmt.Errorf("Settings this(%v) Not Equal that(%v)", this.Settings, that1.Settings)
	}
	if !this.UpdateMask.Equal(&that1.UpdateMask) {
		return fmt.Errorf("UpdateMask this(%v) Not Equal that(%v)", this.UpdateMask, that1.UpdateMask)
	}
	return nil
}
func (this *UpdateSettingsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSettingsRequest)
	if !ok {
		that2, ok := that.(UpdateSettingsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Settings.Equal(&that1.Settings) {
		return false
	}
	if !this.UpdateMask.Equal(&that1.UpdateMask) {
		return false
	}
	return true
}
func (this *CreateUserRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CreateUserRequest)
	if !ok {
		that2, ok := that.(CreateUserRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CreateUserRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CreateUserRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CreateUserRequest but is not nil && this == nil")
	}
	if !this.User.Equal(&that1.User) {
		return fmt.Errorf("User this(%v) Not Equal that(%v)", this.User, that1.User)
	}
	if this.InvitationToken != that1.InvitationToken {
		return fmt.Errorf("InvitationToken this(%v) Not Equal that(%v)", this.InvitationToken, that1.InvitationToken)
	}
	return nil
}
func (this *CreateUserRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateUserRequest)
	if !ok {
		that2, ok := that.(CreateUserRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.User.Equal(&that1.User) {
		return false
	}
	if this.InvitationToken != that1.InvitationToken {
		return false
	}
	return true
}
func (this *UpdateUserRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UpdateUserRequest)
	if !ok {
		that2, ok := that.(UpdateUserRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UpdateUserRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UpdateUserRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UpdateUserRequest but is not nil && this == nil")
	}
	if !this.User.Equal(&that1.User) {
		return fmt.Errorf("User this(%v) Not Equal that(%v)", this.User, that1.User)
	}
	if !this.UpdateMask.Equal(&that1.UpdateMask) {
		return fmt.Errorf("UpdateMask this(%v) Not Equal that(%v)", this.UpdateMask, that1.UpdateMask)
	}
	return nil
}
func (this *UpdateUserRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateUserRequest)
	if !ok {
		that2, ok := that.(UpdateUserRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.User.Equal(&that1.User) {
		return false
	}
	if !this.UpdateMask.Equal(&that1.UpdateMask) {
		return false
	}
	return true
}
func (this *UpdateUserPasswordRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UpdateUserPasswordRequest)
	if !ok {
		that2, ok := that.(UpdateUserPasswordRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UpdateUserPasswordRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UpdateUserPasswordRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UpdateUserPasswordRequest but is not nil && this == nil")
	}
	if this.Old != that1.Old {
		return fmt.Errorf("Old this(%v) Not Equal that(%v)", this.Old, that1.Old)
	}
	if this.New != that1.New {
		return fmt.Errorf("New this(%v) Not Equal that(%v)", this.New, that1.New)
	}
	return nil
}
func (this *UpdateUserPasswordRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateUserPasswordRequest)
	if !ok {
		that2, ok := that.(UpdateUserPasswordRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Old != that1.Old {
		return false
	}
	if this.New != that1.New {
		return false
	}
	return true
}
func (this *GenerateUserAPIKeyRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GenerateUserAPIKeyRequest)
	if !ok {
		that2, ok := that.(GenerateUserAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GenerateUserAPIKeyRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GenerateUserAPIKeyRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GenerateUserAPIKeyRequest but is not nil && this == nil")
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if len(this.Rights) != len(that1.Rights) {
		return fmt.Errorf("Rights this(%v) Not Equal that(%v)", len(this.Rights), len(that1.Rights))
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return fmt.Errorf("Rights this[%v](%v) Not Equal that[%v](%v)", i, this.Rights[i], i, that1.Rights[i])
		}
	}
	return nil
}
func (this *GenerateUserAPIKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GenerateUserAPIKeyRequest)
	if !ok {
		that2, ok := that.(GenerateUserAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Rights) != len(that1.Rights) {
		return false
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return false
		}
	}
	return true
}
func (this *ListUserAPIKeysResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListUserAPIKeysResponse)
	if !ok {
		that2, ok := that.(ListUserAPIKeysResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListUserAPIKeysResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListUserAPIKeysResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListUserAPIKeysResponse but is not nil && this == nil")
	}
	if len(this.APIKeys) != len(that1.APIKeys) {
		return fmt.Errorf("APIKeys this(%v) Not Equal that(%v)", len(this.APIKeys), len(that1.APIKeys))
	}
	for i := range this.APIKeys {
		if !this.APIKeys[i].Equal(&that1.APIKeys[i]) {
			return fmt.Errorf("APIKeys this[%v](%v) Not Equal that[%v](%v)", i, this.APIKeys[i], i, that1.APIKeys[i])
		}
	}
	return nil
}
func (this *ListUserAPIKeysResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ListUserAPIKeysResponse)
	if !ok {
		that2, ok := that.(ListUserAPIKeysResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.APIKeys) != len(that1.APIKeys) {
		return false
	}
	for i := range this.APIKeys {
		if !this.APIKeys[i].Equal(&that1.APIKeys[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateUserAPIKeyRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UpdateUserAPIKeyRequest)
	if !ok {
		that2, ok := that.(UpdateUserAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UpdateUserAPIKeyRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UpdateUserAPIKeyRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UpdateUserAPIKeyRequest but is not nil && this == nil")
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if len(this.Rights) != len(that1.Rights) {
		return fmt.Errorf("Rights this(%v) Not Equal that(%v)", len(this.Rights), len(that1.Rights))
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return fmt.Errorf("Rights this[%v](%v) Not Equal that[%v](%v)", i, this.Rights[i], i, that1.Rights[i])
		}
	}
	return nil
}
func (this *UpdateUserAPIKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateUserAPIKeyRequest)
	if !ok {
		that2, ok := that.(UpdateUserAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Rights) != len(that1.Rights) {
		return false
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return false
		}
	}
	return true
}
func (this *RemoveUserAPIKeyRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RemoveUserAPIKeyRequest)
	if !ok {
		that2, ok := that.(RemoveUserAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RemoveUserAPIKeyRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RemoveUserAPIKeyRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RemoveUserAPIKeyRequest but is not nil && this == nil")
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	return nil
}
func (this *RemoveUserAPIKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RemoveUserAPIKeyRequest)
	if !ok {
		that2, ok := that.(RemoveUserAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *ValidateUserEmailRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ValidateUserEmailRequest)
	if !ok {
		that2, ok := that.(ValidateUserEmailRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ValidateUserEmailRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ValidateUserEmailRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ValidateUserEmailRequest but is not nil && this == nil")
	}
	if this.Token != that1.Token {
		return fmt.Errorf("Token this(%v) Not Equal that(%v)", this.Token, that1.Token)
	}
	return nil
}
func (this *ValidateUserEmailRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ValidateUserEmailRequest)
	if !ok {
		that2, ok := that.(ValidateUserEmailRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *ListAuthorizedClientsResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListAuthorizedClientsResponse)
	if !ok {
		that2, ok := that.(ListAuthorizedClientsResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListAuthorizedClientsResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListAuthorizedClientsResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListAuthorizedClientsResponse but is not nil && this == nil")
	}
	if len(this.Clients) != len(that1.Clients) {
		return fmt.Errorf("Clients this(%v) Not Equal that(%v)", len(this.Clients), len(that1.Clients))
	}
	for i := range this.Clients {
		if !this.Clients[i].Equal(&that1.Clients[i]) {
			return fmt.Errorf("Clients this[%v](%v) Not Equal that[%v](%v)", i, this.Clients[i], i, that1.Clients[i])
		}
	}
	return nil
}
func (this *ListAuthorizedClientsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ListAuthorizedClientsResponse)
	if !ok {
		that2, ok := that.(ListAuthorizedClientsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Clients) != len(that1.Clients) {
		return false
	}
	for i := range this.Clients {
		if !this.Clients[i].Equal(&that1.Clients[i]) {
			return false
		}
	}
	return true
}
func (this *CreateApplicationRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CreateApplicationRequest)
	if !ok {
		that2, ok := that.(CreateApplicationRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CreateApplicationRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CreateApplicationRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CreateApplicationRequest but is not nil && this == nil")
	}
	if !this.Application.Equal(&that1.Application) {
		return fmt.Errorf("Application this(%v) Not Equal that(%v)", this.Application, that1.Application)
	}
	return nil
}
func (this *CreateApplicationRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateApplicationRequest)
	if !ok {
		that2, ok := that.(CreateApplicationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Application.Equal(&that1.Application) {
		return false
	}
	return true
}
func (this *ListApplicationsResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListApplicationsResponse)
	if !ok {
		that2, ok := that.(ListApplicationsResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListApplicationsResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListApplicationsResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListApplicationsResponse but is not nil && this == nil")
	}
	if len(this.Applications) != len(that1.Applications) {
		return fmt.Errorf("Applications this(%v) Not Equal that(%v)", len(this.Applications), len(that1.Applications))
	}
	for i := range this.Applications {
		if !this.Applications[i].Equal(&that1.Applications[i]) {
			return fmt.Errorf("Applications this[%v](%v) Not Equal that[%v](%v)", i, this.Applications[i], i, that1.Applications[i])
		}
	}
	return nil
}
func (this *ListApplicationsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ListApplicationsResponse)
	if !ok {
		that2, ok := that.(ListApplicationsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Applications) != len(that1.Applications) {
		return false
	}
	for i := range this.Applications {
		if !this.Applications[i].Equal(&that1.Applications[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateApplicationRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UpdateApplicationRequest)
	if !ok {
		that2, ok := that.(UpdateApplicationRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UpdateApplicationRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UpdateApplicationRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UpdateApplicationRequest but is not nil && this == nil")
	}
	if !this.Application.Equal(&that1.Application) {
		return fmt.Errorf("Application this(%v) Not Equal that(%v)", this.Application, that1.Application)
	}
	if !this.UpdateMask.Equal(&that1.UpdateMask) {
		return fmt.Errorf("UpdateMask this(%v) Not Equal that(%v)", this.UpdateMask, that1.UpdateMask)
	}
	return nil
}
func (this *UpdateApplicationRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateApplicationRequest)
	if !ok {
		that2, ok := that.(UpdateApplicationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Application.Equal(&that1.Application) {
		return false
	}
	if !this.UpdateMask.Equal(&that1.UpdateMask) {
		return false
	}
	return true
}
func (this *GenerateApplicationAPIKeyRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GenerateApplicationAPIKeyRequest)
	if !ok {
		that2, ok := that.(GenerateApplicationAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GenerateApplicationAPIKeyRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GenerateApplicationAPIKeyRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GenerateApplicationAPIKeyRequest but is not nil && this == nil")
	}
	if !this.ApplicationIdentifier.Equal(&that1.ApplicationIdentifier) {
		return fmt.Errorf("ApplicationIdentifier this(%v) Not Equal that(%v)", this.ApplicationIdentifier, that1.ApplicationIdentifier)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if len(this.Rights) != len(that1.Rights) {
		return fmt.Errorf("Rights this(%v) Not Equal that(%v)", len(this.Rights), len(that1.Rights))
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return fmt.Errorf("Rights this[%v](%v) Not Equal that[%v](%v)", i, this.Rights[i], i, that1.Rights[i])
		}
	}
	return nil
}
func (this *GenerateApplicationAPIKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GenerateApplicationAPIKeyRequest)
	if !ok {
		that2, ok := that.(GenerateApplicationAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ApplicationIdentifier.Equal(&that1.ApplicationIdentifier) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Rights) != len(that1.Rights) {
		return false
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return false
		}
	}
	return true
}
func (this *ListApplicationAPIKeysResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListApplicationAPIKeysResponse)
	if !ok {
		that2, ok := that.(ListApplicationAPIKeysResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListApplicationAPIKeysResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListApplicationAPIKeysResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListApplicationAPIKeysResponse but is not nil && this == nil")
	}
	if len(this.APIKeys) != len(that1.APIKeys) {
		return fmt.Errorf("APIKeys this(%v) Not Equal that(%v)", len(this.APIKeys), len(that1.APIKeys))
	}
	for i := range this.APIKeys {
		if !this.APIKeys[i].Equal(&that1.APIKeys[i]) {
			return fmt.Errorf("APIKeys this[%v](%v) Not Equal that[%v](%v)", i, this.APIKeys[i], i, that1.APIKeys[i])
		}
	}
	return nil
}
func (this *ListApplicationAPIKeysResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ListApplicationAPIKeysResponse)
	if !ok {
		that2, ok := that.(ListApplicationAPIKeysResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.APIKeys) != len(that1.APIKeys) {
		return false
	}
	for i := range this.APIKeys {
		if !this.APIKeys[i].Equal(&that1.APIKeys[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateApplicationAPIKeyRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UpdateApplicationAPIKeyRequest)
	if !ok {
		that2, ok := that.(UpdateApplicationAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UpdateApplicationAPIKeyRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UpdateApplicationAPIKeyRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UpdateApplicationAPIKeyRequest but is not nil && this == nil")
	}
	if !this.ApplicationIdentifier.Equal(&that1.ApplicationIdentifier) {
		return fmt.Errorf("ApplicationIdentifier this(%v) Not Equal that(%v)", this.ApplicationIdentifier, that1.ApplicationIdentifier)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if len(this.Rights) != len(that1.Rights) {
		return fmt.Errorf("Rights this(%v) Not Equal that(%v)", len(this.Rights), len(that1.Rights))
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return fmt.Errorf("Rights this[%v](%v) Not Equal that[%v](%v)", i, this.Rights[i], i, that1.Rights[i])
		}
	}
	return nil
}
func (this *UpdateApplicationAPIKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateApplicationAPIKeyRequest)
	if !ok {
		that2, ok := that.(UpdateApplicationAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ApplicationIdentifier.Equal(&that1.ApplicationIdentifier) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Rights) != len(that1.Rights) {
		return false
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return false
		}
	}
	return true
}
func (this *RemoveApplicationAPIKeyRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RemoveApplicationAPIKeyRequest)
	if !ok {
		that2, ok := that.(RemoveApplicationAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RemoveApplicationAPIKeyRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RemoveApplicationAPIKeyRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RemoveApplicationAPIKeyRequest but is not nil && this == nil")
	}
	if !this.ApplicationIdentifier.Equal(&that1.ApplicationIdentifier) {
		return fmt.Errorf("ApplicationIdentifier this(%v) Not Equal that(%v)", this.ApplicationIdentifier, that1.ApplicationIdentifier)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	return nil
}
func (this *RemoveApplicationAPIKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RemoveApplicationAPIKeyRequest)
	if !ok {
		that2, ok := that.(RemoveApplicationAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ApplicationIdentifier.Equal(&that1.ApplicationIdentifier) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *SetApplicationCollaboratorRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SetApplicationCollaboratorRequest)
	if !ok {
		that2, ok := that.(SetApplicationCollaboratorRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SetApplicationCollaboratorRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SetApplicationCollaboratorRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SetApplicationCollaboratorRequest but is not nil && this == nil")
	}
	if !this.ApplicationIdentifier.Equal(&that1.ApplicationIdentifier) {
		return fmt.Errorf("ApplicationIdentifier this(%v) Not Equal that(%v)", this.ApplicationIdentifier, that1.ApplicationIdentifier)
	}
	if !this.Collaborator.Equal(&that1.Collaborator) {
		return fmt.Errorf("Collaborator this(%v) Not Equal that(%v)", this.Collaborator, that1.Collaborator)
	}
	return nil
}
func (this *SetApplicationCollaboratorRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SetApplicationCollaboratorRequest)
	if !ok {
		that2, ok := that.(SetApplicationCollaboratorRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ApplicationIdentifier.Equal(&that1.ApplicationIdentifier) {
		return false
	}
	if !this.Collaborator.Equal(&that1.Collaborator) {
		return false
	}
	return true
}
func (this *ListApplicationCollaboratorsResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListApplicationCollaboratorsResponse)
	if !ok {
		that2, ok := that.(ListApplicationCollaboratorsResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListApplicationCollaboratorsResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListApplicationCollaboratorsResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListApplicationCollaboratorsResponse but is not nil && this == nil")
	}
	if len(this.Collaborators) != len(that1.Collaborators) {
		return fmt.Errorf("Collaborators this(%v) Not Equal that(%v)", len(this.Collaborators), len(that1.Collaborators))
	}
	for i := range this.Collaborators {
		if !this.Collaborators[i].Equal(&that1.Collaborators[i]) {
			return fmt.Errorf("Collaborators this[%v](%v) Not Equal that[%v](%v)", i, this.Collaborators[i], i, that1.Collaborators[i])
		}
	}
	return nil
}
func (this *ListApplicationCollaboratorsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ListApplicationCollaboratorsResponse)
	if !ok {
		that2, ok := that.(ListApplicationCollaboratorsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Collaborators) != len(that1.Collaborators) {
		return false
	}
	for i := range this.Collaborators {
		if !this.Collaborators[i].Equal(&that1.Collaborators[i]) {
			return false
		}
	}
	return true
}
func (this *CreateGatewayRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CreateGatewayRequest)
	if !ok {
		that2, ok := that.(CreateGatewayRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CreateGatewayRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CreateGatewayRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CreateGatewayRequest but is not nil && this == nil")
	}
	if !this.Gateway.Equal(&that1.Gateway) {
		return fmt.Errorf("Gateway this(%v) Not Equal that(%v)", this.Gateway, that1.Gateway)
	}
	return nil
}
func (this *CreateGatewayRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateGatewayRequest)
	if !ok {
		that2, ok := that.(CreateGatewayRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Gateway.Equal(&that1.Gateway) {
		return false
	}
	return true
}
func (this *ListGatewaysResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListGatewaysResponse)
	if !ok {
		that2, ok := that.(ListGatewaysResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListGatewaysResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListGatewaysResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListGatewaysResponse but is not nil && this == nil")
	}
	if len(this.Gateways) != len(that1.Gateways) {
		return fmt.Errorf("Gateways this(%v) Not Equal that(%v)", len(this.Gateways), len(that1.Gateways))
	}
	for i := range this.Gateways {
		if !this.Gateways[i].Equal(&that1.Gateways[i]) {
			return fmt.Errorf("Gateways this[%v](%v) Not Equal that[%v](%v)", i, this.Gateways[i], i, that1.Gateways[i])
		}
	}
	return nil
}
func (this *ListGatewaysResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ListGatewaysResponse)
	if !ok {
		that2, ok := that.(ListGatewaysResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Gateways) != len(that1.Gateways) {
		return false
	}
	for i := range this.Gateways {
		if !this.Gateways[i].Equal(&that1.Gateways[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateGatewayRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UpdateGatewayRequest)
	if !ok {
		that2, ok := that.(UpdateGatewayRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UpdateGatewayRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UpdateGatewayRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UpdateGatewayRequest but is not nil && this == nil")
	}
	if !this.Gateway.Equal(&that1.Gateway) {
		return fmt.Errorf("Gateway this(%v) Not Equal that(%v)", this.Gateway, that1.Gateway)
	}
	if !this.UpdateMask.Equal(&that1.UpdateMask) {
		return fmt.Errorf("UpdateMask this(%v) Not Equal that(%v)", this.UpdateMask, that1.UpdateMask)
	}
	return nil
}
func (this *UpdateGatewayRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateGatewayRequest)
	if !ok {
		that2, ok := that.(UpdateGatewayRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Gateway.Equal(&that1.Gateway) {
		return false
	}
	if !this.UpdateMask.Equal(&that1.UpdateMask) {
		return false
	}
	return true
}
func (this *GenerateGatewayAPIKeyRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GenerateGatewayAPIKeyRequest)
	if !ok {
		that2, ok := that.(GenerateGatewayAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GenerateGatewayAPIKeyRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GenerateGatewayAPIKeyRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GenerateGatewayAPIKeyRequest but is not nil && this == nil")
	}
	if !this.GatewayIdentifier.Equal(&that1.GatewayIdentifier) {
		return fmt.Errorf("GatewayIdentifier this(%v) Not Equal that(%v)", this.GatewayIdentifier, that1.GatewayIdentifier)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if len(this.Rights) != len(that1.Rights) {
		return fmt.Errorf("Rights this(%v) Not Equal that(%v)", len(this.Rights), len(that1.Rights))
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return fmt.Errorf("Rights this[%v](%v) Not Equal that[%v](%v)", i, this.Rights[i], i, that1.Rights[i])
		}
	}
	return nil
}
func (this *GenerateGatewayAPIKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GenerateGatewayAPIKeyRequest)
	if !ok {
		that2, ok := that.(GenerateGatewayAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.GatewayIdentifier.Equal(&that1.GatewayIdentifier) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Rights) != len(that1.Rights) {
		return false
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return false
		}
	}
	return true
}
func (this *ListGatewayAPIKeysResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListGatewayAPIKeysResponse)
	if !ok {
		that2, ok := that.(ListGatewayAPIKeysResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListGatewayAPIKeysResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListGatewayAPIKeysResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListGatewayAPIKeysResponse but is not nil && this == nil")
	}
	if len(this.APIKeys) != len(that1.APIKeys) {
		return fmt.Errorf("APIKeys this(%v) Not Equal that(%v)", len(this.APIKeys), len(that1.APIKeys))
	}
	for i := range this.APIKeys {
		if !this.APIKeys[i].Equal(&that1.APIKeys[i]) {
			return fmt.Errorf("APIKeys this[%v](%v) Not Equal that[%v](%v)", i, this.APIKeys[i], i, that1.APIKeys[i])
		}
	}
	return nil
}
func (this *ListGatewayAPIKeysResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ListGatewayAPIKeysResponse)
	if !ok {
		that2, ok := that.(ListGatewayAPIKeysResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.APIKeys) != len(that1.APIKeys) {
		return false
	}
	for i := range this.APIKeys {
		if !this.APIKeys[i].Equal(&that1.APIKeys[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateGatewayAPIKeyRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UpdateGatewayAPIKeyRequest)
	if !ok {
		that2, ok := that.(UpdateGatewayAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UpdateGatewayAPIKeyRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UpdateGatewayAPIKeyRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UpdateGatewayAPIKeyRequest but is not nil && this == nil")
	}
	if !this.GatewayIdentifier.Equal(&that1.GatewayIdentifier) {
		return fmt.Errorf("GatewayIdentifier this(%v) Not Equal that(%v)", this.GatewayIdentifier, that1.GatewayIdentifier)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if len(this.Rights) != len(that1.Rights) {
		return fmt.Errorf("Rights this(%v) Not Equal that(%v)", len(this.Rights), len(that1.Rights))
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return fmt.Errorf("Rights this[%v](%v) Not Equal that[%v](%v)", i, this.Rights[i], i, that1.Rights[i])
		}
	}
	return nil
}
func (this *UpdateGatewayAPIKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateGatewayAPIKeyRequest)
	if !ok {
		that2, ok := that.(UpdateGatewayAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.GatewayIdentifier.Equal(&that1.GatewayIdentifier) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Rights) != len(that1.Rights) {
		return false
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return false
		}
	}
	return true
}
func (this *RemoveGatewayAPIKeyRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RemoveGatewayAPIKeyRequest)
	if !ok {
		that2, ok := that.(RemoveGatewayAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RemoveGatewayAPIKeyRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RemoveGatewayAPIKeyRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RemoveGatewayAPIKeyRequest but is not nil && this == nil")
	}
	if !this.GatewayIdentifier.Equal(&that1.GatewayIdentifier) {
		return fmt.Errorf("GatewayIdentifier this(%v) Not Equal that(%v)", this.GatewayIdentifier, that1.GatewayIdentifier)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	return nil
}
func (this *RemoveGatewayAPIKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RemoveGatewayAPIKeyRequest)
	if !ok {
		that2, ok := that.(RemoveGatewayAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.GatewayIdentifier.Equal(&that1.GatewayIdentifier) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *SetGatewayCollaboratorRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SetGatewayCollaboratorRequest)
	if !ok {
		that2, ok := that.(SetGatewayCollaboratorRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SetGatewayCollaboratorRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SetGatewayCollaboratorRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SetGatewayCollaboratorRequest but is not nil && this == nil")
	}
	if !this.GatewayIdentifier.Equal(&that1.GatewayIdentifier) {
		return fmt.Errorf("GatewayIdentifier this(%v) Not Equal that(%v)", this.GatewayIdentifier, that1.GatewayIdentifier)
	}
	if !this.Collaborator.Equal(&that1.Collaborator) {
		return fmt.Errorf("Collaborator this(%v) Not Equal that(%v)", this.Collaborator, that1.Collaborator)
	}
	return nil
}
func (this *SetGatewayCollaboratorRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SetGatewayCollaboratorRequest)
	if !ok {
		that2, ok := that.(SetGatewayCollaboratorRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.GatewayIdentifier.Equal(&that1.GatewayIdentifier) {
		return false
	}
	if !this.Collaborator.Equal(&that1.Collaborator) {
		return false
	}
	return true
}
func (this *ListGatewayCollaboratorsResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListGatewayCollaboratorsResponse)
	if !ok {
		that2, ok := that.(ListGatewayCollaboratorsResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListGatewayCollaboratorsResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListGatewayCollaboratorsResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListGatewayCollaboratorsResponse but is not nil && this == nil")
	}
	if len(this.Collaborators) != len(that1.Collaborators) {
		return fmt.Errorf("Collaborators this(%v) Not Equal that(%v)", len(this.Collaborators), len(that1.Collaborators))
	}
	for i := range this.Collaborators {
		if !this.Collaborators[i].Equal(&that1.Collaborators[i]) {
			return fmt.Errorf("Collaborators this[%v](%v) Not Equal that[%v](%v)", i, this.Collaborators[i], i, that1.Collaborators[i])
		}
	}
	return nil
}
func (this *ListGatewayCollaboratorsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ListGatewayCollaboratorsResponse)
	if !ok {
		that2, ok := that.(ListGatewayCollaboratorsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Collaborators) != len(that1.Collaborators) {
		return false
	}
	for i := range this.Collaborators {
		if !this.Collaborators[i].Equal(&that1.Collaborators[i]) {
			return false
		}
	}
	return true
}
func (this *CreateClientRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CreateClientRequest)
	if !ok {
		that2, ok := that.(CreateClientRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CreateClientRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CreateClientRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CreateClientRequest but is not nil && this == nil")
	}
	if !this.Client.Equal(&that1.Client) {
		return fmt.Errorf("Client this(%v) Not Equal that(%v)", this.Client, that1.Client)
	}
	return nil
}
func (this *CreateClientRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateClientRequest)
	if !ok {
		that2, ok := that.(CreateClientRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Client.Equal(&that1.Client) {
		return false
	}
	return true
}
func (this *ListClientsResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListClientsResponse)
	if !ok {
		that2, ok := that.(ListClientsResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListClientsResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListClientsResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListClientsResponse but is not nil && this == nil")
	}
	if len(this.Clients) != len(that1.Clients) {
		return fmt.Errorf("Clients this(%v) Not Equal that(%v)", len(this.Clients), len(that1.Clients))
	}
	for i := range this.Clients {
		if !this.Clients[i].Equal(&that1.Clients[i]) {
			return fmt.Errorf("Clients this[%v](%v) Not Equal that[%v](%v)", i, this.Clients[i], i, that1.Clients[i])
		}
	}
	return nil
}
func (this *ListClientsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ListClientsResponse)
	if !ok {
		that2, ok := that.(ListClientsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Clients) != len(that1.Clients) {
		return false
	}
	for i := range this.Clients {
		if !this.Clients[i].Equal(&that1.Clients[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateClientRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UpdateClientRequest)
	if !ok {
		that2, ok := that.(UpdateClientRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UpdateClientRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UpdateClientRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UpdateClientRequest but is not nil && this == nil")
	}
	if !this.Client.Equal(&that1.Client) {
		return fmt.Errorf("Client this(%v) Not Equal that(%v)", this.Client, that1.Client)
	}
	if !this.UpdateMask.Equal(&that1.UpdateMask) {
		return fmt.Errorf("UpdateMask this(%v) Not Equal that(%v)", this.UpdateMask, that1.UpdateMask)
	}
	return nil
}
func (this *UpdateClientRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateClientRequest)
	if !ok {
		that2, ok := that.(UpdateClientRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Client.Equal(&that1.Client) {
		return false
	}
	if !this.UpdateMask.Equal(&that1.UpdateMask) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GtwGr service

type GtwGrClient interface {
	// PullConfiguration sends a new GatewayConfiguration, with all the latest values,
	// at connection and when a gateway's configuration is updated.
	PullConfiguration(ctx context.Context, in *GatewayIdentifier, opts ...grpc.CallOption) (GtwGr_PullConfigurationClient, error)
}

type gtwGrClient struct {
	cc *grpc.ClientConn
}

func NewGtwGrClient(cc *grpc.ClientConn) GtwGrClient {
	return &gtwGrClient{cc}
}

func (c *gtwGrClient) PullConfiguration(ctx context.Context, in *GatewayIdentifier, opts ...grpc.CallOption) (GtwGr_PullConfigurationClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GtwGr_serviceDesc.Streams[0], c.cc, "/ttn.v3.GtwGr/PullConfiguration", opts...)
	if err != nil {
		return nil, err
	}
	x := &gtwGrPullConfigurationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GtwGr_PullConfigurationClient interface {
	Recv() (*GatewayConfiguration, error)
	grpc.ClientStream
}

type gtwGrPullConfigurationClient struct {
	grpc.ClientStream
}

func (x *gtwGrPullConfigurationClient) Recv() (*GatewayConfiguration, error) {
	m := new(GatewayConfiguration)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GtwGr service

type GtwGrServer interface {
	// PullConfiguration sends a new GatewayConfiguration, with all the latest values,
	// at connection and when a gateway's configuration is updated.
	PullConfiguration(*GatewayIdentifier, GtwGr_PullConfigurationServer) error
}

func RegisterGtwGrServer(s *grpc.Server, srv GtwGrServer) {
	s.RegisterService(&_GtwGr_serviceDesc, srv)
}

func _GtwGr_PullConfiguration_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GatewayIdentifier)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GtwGrServer).PullConfiguration(m, &gtwGrPullConfigurationServer{stream})
}

type GtwGr_PullConfigurationServer interface {
	Send(*GatewayConfiguration) error
	grpc.ServerStream
}

type gtwGrPullConfigurationServer struct {
	grpc.ServerStream
}

func (x *gtwGrPullConfigurationServer) Send(m *GatewayConfiguration) error {
	return x.ServerStream.SendMsg(m)
}

var _GtwGr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.v3.GtwGr",
	HandlerType: (*GtwGrServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullConfiguration",
			Handler:       _GtwGr_PullConfiguration_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/TheThingsNetwork/ttn/api/identityserver.proto",
}

// Client API for IsSettings service

type IsSettingsClient interface {
	// GetSettings returns the value of the specified settings.
	GetSettings(ctx context.Context, in *GetSettingsRequest, opts ...grpc.CallOption) (*IdentityServerSettings, error)
	// UpdateSettings updates the settings.
	UpdateSettings(ctx context.Context, in *UpdateSettingsRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
}

type isSettingsClient struct {
	cc *grpc.ClientConn
}

func NewIsSettingsClient(cc *grpc.ClientConn) IsSettingsClient {
	return &isSettingsClient{cc}
}

func (c *isSettingsClient) GetSettings(ctx context.Context, in *GetSettingsRequest, opts ...grpc.CallOption) (*IdentityServerSettings, error) {
	out := new(IdentityServerSettings)
	err := grpc.Invoke(ctx, "/ttn.v3.IsSettings/GetSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isSettingsClient) UpdateSettings(ctx context.Context, in *UpdateSettingsRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsSettings/UpdateSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IsSettings service

type IsSettingsServer interface {
	// GetSettings returns the value of the specified settings.
	GetSettings(context.Context, *GetSettingsRequest) (*IdentityServerSettings, error)
	// UpdateSettings updates the settings.
	UpdateSettings(context.Context, *UpdateSettingsRequest) (*google_protobuf2.Empty, error)
}

func RegisterIsSettingsServer(s *grpc.Server, srv IsSettingsServer) {
	s.RegisterService(&_IsSettings_serviceDesc, srv)
}

func _IsSettings_GetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsSettingsServer).GetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsSettings/GetSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsSettingsServer).GetSettings(ctx, req.(*GetSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsSettings_UpdateSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsSettingsServer).UpdateSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsSettings/UpdateSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsSettingsServer).UpdateSettings(ctx, req.(*UpdateSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IsSettings_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.v3.IsSettings",
	HandlerType: (*IsSettingsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSettings",
			Handler:    _IsSettings_GetSettings_Handler,
		},
		{
			MethodName: "UpdateSettings",
			Handler:    _IsSettings_UpdateSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/ttn/api/identityserver.proto",
}

// Client API for IsUser service

type IsUserClient interface {
	// CreateUser creates a new user on the network.
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// GetUser returns the profile of an user by ID. If the user identifier is empty it
	// returns the profile of the authenticated user.
	GetUser(ctx context.Context, in *UserIdentifier, opts ...grpc.CallOption) (*User, error)
	// UpdateUser edits the profile of the authenticated user.
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// UpdateUserPassword sets a new password for the authenticated user account.
	UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// DeleteUser permantly deletes the user account of the authenticated user.
	DeleteUser(ctx context.Context, in *google_protobuf2.Empty, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// GenerateUserAPIKey generates a new API key for the authenticated user and returns it.
	GenerateUserAPIKey(ctx context.Context, in *GenerateUserAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error)
	// ListUserAPIKeys returns all the user API keys that the authenticated user has.
	ListUserAPIKeys(ctx context.Context, in *google_protobuf2.Empty, opts ...grpc.CallOption) (*ListUserAPIKeysResponse, error)
	// UpdateUserAPIKey updates the rights of an API key of the authenticated user.
	UpdateUserAPIKey(ctx context.Context, in *UpdateUserAPIKeyRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// RemoveUserAPIKey removes an API key from the authenticated user.
	RemoveUserAPIKey(ctx context.Context, in *RemoveUserAPIKeyRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// ValidateUserEmail validates the user's email address of the authenticated
	// user by using the token sent to the user's email address.
	ValidateUserEmail(ctx context.Context, in *ValidateUserEmailRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// RequestUserEmailValidation re-issues a new email validation token and sends
	// it to the user's email address so he can validate it. Any previous validation
	// token that has not been used will be revoked.
	RequestUserEmailValidation(ctx context.Context, in *google_protobuf2.Empty, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// ListAuthorizedClients returns the list of clients that the authenticated user
	// has currently authorized to access its account.
	ListAuthorizedClients(ctx context.Context, in *google_protobuf2.Empty, opts ...grpc.CallOption) (*ListAuthorizedClientsResponse, error)
	// RevokeClient revokes the access of an authorized client to the authenticated
	// user's account.
	RevokeAuthorizedClient(ctx context.Context, in *ClientIdentifier, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
}

type isUserClient struct {
	cc *grpc.ClientConn
}

func NewIsUserClient(cc *grpc.ClientConn) IsUserClient {
	return &isUserClient{cc}
}

func (c *isUserClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsUser/CreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isUserClient) GetUser(ctx context.Context, in *UserIdentifier, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/ttn.v3.IsUser/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isUserClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsUser/UpdateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isUserClient) UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsUser/UpdateUserPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isUserClient) DeleteUser(ctx context.Context, in *google_protobuf2.Empty, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsUser/DeleteUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isUserClient) GenerateUserAPIKey(ctx context.Context, in *GenerateUserAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error) {
	out := new(APIKey)
	err := grpc.Invoke(ctx, "/ttn.v3.IsUser/GenerateUserAPIKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isUserClient) ListUserAPIKeys(ctx context.Context, in *google_protobuf2.Empty, opts ...grpc.CallOption) (*ListUserAPIKeysResponse, error) {
	out := new(ListUserAPIKeysResponse)
	err := grpc.Invoke(ctx, "/ttn.v3.IsUser/ListUserAPIKeys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isUserClient) UpdateUserAPIKey(ctx context.Context, in *UpdateUserAPIKeyRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsUser/UpdateUserAPIKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isUserClient) RemoveUserAPIKey(ctx context.Context, in *RemoveUserAPIKeyRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsUser/RemoveUserAPIKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isUserClient) ValidateUserEmail(ctx context.Context, in *ValidateUserEmailRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsUser/ValidateUserEmail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isUserClient) RequestUserEmailValidation(ctx context.Context, in *google_protobuf2.Empty, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsUser/RequestUserEmailValidation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isUserClient) ListAuthorizedClients(ctx context.Context, in *google_protobuf2.Empty, opts ...grpc.CallOption) (*ListAuthorizedClientsResponse, error) {
	out := new(ListAuthorizedClientsResponse)
	err := grpc.Invoke(ctx, "/ttn.v3.IsUser/ListAuthorizedClients", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isUserClient) RevokeAuthorizedClient(ctx context.Context, in *ClientIdentifier, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsUser/RevokeAuthorizedClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IsUser service

type IsUserServer interface {
	// CreateUser creates a new user on the network.
	CreateUser(context.Context, *CreateUserRequest) (*google_protobuf2.Empty, error)
	// GetUser returns the profile of an user by ID. If the user identifier is empty it
	// returns the profile of the authenticated user.
	GetUser(context.Context, *UserIdentifier) (*User, error)
	// UpdateUser edits the profile of the authenticated user.
	UpdateUser(context.Context, *UpdateUserRequest) (*google_protobuf2.Empty, error)
	// UpdateUserPassword sets a new password for the authenticated user account.
	UpdateUserPassword(context.Context, *UpdateUserPasswordRequest) (*google_protobuf2.Empty, error)
	// DeleteUser permantly deletes the user account of the authenticated user.
	DeleteUser(context.Context, *google_protobuf2.Empty) (*google_protobuf2.Empty, error)
	// GenerateUserAPIKey generates a new API key for the authenticated user and returns it.
	GenerateUserAPIKey(context.Context, *GenerateUserAPIKeyRequest) (*APIKey, error)
	// ListUserAPIKeys returns all the user API keys that the authenticated user has.
	ListUserAPIKeys(context.Context, *google_protobuf2.Empty) (*ListUserAPIKeysResponse, error)
	// UpdateUserAPIKey updates the rights of an API key of the authenticated user.
	UpdateUserAPIKey(context.Context, *UpdateUserAPIKeyRequest) (*google_protobuf2.Empty, error)
	// RemoveUserAPIKey removes an API key from the authenticated user.
	RemoveUserAPIKey(context.Context, *RemoveUserAPIKeyRequest) (*google_protobuf2.Empty, error)
	// ValidateUserEmail validates the user's email address of the authenticated
	// user by using the token sent to the user's email address.
	ValidateUserEmail(context.Context, *ValidateUserEmailRequest) (*google_protobuf2.Empty, error)
	// RequestUserEmailValidation re-issues a new email validation token and sends
	// it to the user's email address so he can validate it. Any previous validation
	// token that has not been used will be revoked.
	RequestUserEmailValidation(context.Context, *google_protobuf2.Empty) (*google_protobuf2.Empty, error)
	// ListAuthorizedClients returns the list of clients that the authenticated user
	// has currently authorized to access its account.
	ListAuthorizedClients(context.Context, *google_protobuf2.Empty) (*ListAuthorizedClientsResponse, error)
	// RevokeClient revokes the access of an authorized client to the authenticated
	// user's account.
	RevokeAuthorizedClient(context.Context, *ClientIdentifier) (*google_protobuf2.Empty, error)
}

func RegisterIsUserServer(s *grpc.Server, srv IsUserServer) {
	s.RegisterService(&_IsUser_serviceDesc, srv)
}

func _IsUser_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsUserServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsUser/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsUserServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsUser_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsUserServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsUser/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsUserServer).GetUser(ctx, req.(*UserIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsUser_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsUserServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsUser/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsUserServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsUser_UpdateUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsUserServer).UpdateUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsUser/UpdateUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsUserServer).UpdateUserPassword(ctx, req.(*UpdateUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsUser_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf2.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsUserServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsUser/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsUserServer).DeleteUser(ctx, req.(*google_protobuf2.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsUser_GenerateUserAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateUserAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsUserServer).GenerateUserAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsUser/GenerateUserAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsUserServer).GenerateUserAPIKey(ctx, req.(*GenerateUserAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsUser_ListUserAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf2.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsUserServer).ListUserAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsUser/ListUserAPIKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsUserServer).ListUserAPIKeys(ctx, req.(*google_protobuf2.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsUser_UpdateUserAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsUserServer).UpdateUserAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsUser/UpdateUserAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsUserServer).UpdateUserAPIKey(ctx, req.(*UpdateUserAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsUser_RemoveUserAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsUserServer).RemoveUserAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsUser/RemoveUserAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsUserServer).RemoveUserAPIKey(ctx, req.(*RemoveUserAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsUser_ValidateUserEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateUserEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsUserServer).ValidateUserEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsUser/ValidateUserEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsUserServer).ValidateUserEmail(ctx, req.(*ValidateUserEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsUser_RequestUserEmailValidation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf2.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsUserServer).RequestUserEmailValidation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsUser/RequestUserEmailValidation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsUserServer).RequestUserEmailValidation(ctx, req.(*google_protobuf2.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsUser_ListAuthorizedClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf2.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsUserServer).ListAuthorizedClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsUser/ListAuthorizedClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsUserServer).ListAuthorizedClients(ctx, req.(*google_protobuf2.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsUser_RevokeAuthorizedClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsUserServer).RevokeAuthorizedClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsUser/RevokeAuthorizedClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsUserServer).RevokeAuthorizedClient(ctx, req.(*ClientIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

var _IsUser_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.v3.IsUser",
	HandlerType: (*IsUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _IsUser_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _IsUser_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _IsUser_UpdateUser_Handler,
		},
		{
			MethodName: "UpdateUserPassword",
			Handler:    _IsUser_UpdateUserPassword_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _IsUser_DeleteUser_Handler,
		},
		{
			MethodName: "GenerateUserAPIKey",
			Handler:    _IsUser_GenerateUserAPIKey_Handler,
		},
		{
			MethodName: "ListUserAPIKeys",
			Handler:    _IsUser_ListUserAPIKeys_Handler,
		},
		{
			MethodName: "UpdateUserAPIKey",
			Handler:    _IsUser_UpdateUserAPIKey_Handler,
		},
		{
			MethodName: "RemoveUserAPIKey",
			Handler:    _IsUser_RemoveUserAPIKey_Handler,
		},
		{
			MethodName: "ValidateUserEmail",
			Handler:    _IsUser_ValidateUserEmail_Handler,
		},
		{
			MethodName: "RequestUserEmailValidation",
			Handler:    _IsUser_RequestUserEmailValidation_Handler,
		},
		{
			MethodName: "ListAuthorizedClients",
			Handler:    _IsUser_ListAuthorizedClients_Handler,
		},
		{
			MethodName: "RevokeAuthorizedClient",
			Handler:    _IsUser_RevokeAuthorizedClient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/ttn/api/identityserver.proto",
}

// Client API for IsApplication service

type IsApplicationClient interface {
	// CreateApplication creates a new application on the network.
	CreateApplication(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// GetApplication finds an application by ID and retrieves it.
	GetApplication(ctx context.Context, in *ApplicationIdentifier, opts ...grpc.CallOption) (*Application, error)
	// ListApplications returns all the applications where the authenticated user
	// has access to.
	ListApplications(ctx context.Context, in *google_protobuf2.Empty, opts ...grpc.CallOption) (*ListApplicationsResponse, error)
	// UpdateApplication edits an application.
	UpdateApplication(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// DeleteApplication permantly deletes an application.
	DeleteApplication(ctx context.Context, in *ApplicationIdentifier, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// GenerateApplicationAPIKey generates a new API key for a given application
	// and returns it.
	GenerateApplicationAPIKey(ctx context.Context, in *GenerateApplicationAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error)
	// ListApplicationAPIKeys returns all the application API keys that a given
	// application has.
	ListApplicationAPIKeys(ctx context.Context, in *ApplicationIdentifier, opts ...grpc.CallOption) (*ListApplicationAPIKeysResponse, error)
	// UpdateApplicationAPIKey updates the rights of a given application API key.
	UpdateApplicationAPIKey(ctx context.Context, in *UpdateApplicationAPIKeyRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// RemoveApplicationAPIKey removes a given API key from an application.
	RemoveApplicationAPIKey(ctx context.Context, in *RemoveApplicationAPIKeyRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// SetApplicationCollaborator sets a collaborator for a given application. If
	// the list of rights is empty the collaborator will be removed.
	SetApplicationCollaborator(ctx context.Context, in *SetApplicationCollaboratorRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// ListApplicationCollaborators returns all the collaborators for a given application.
	ListApplicationCollaborators(ctx context.Context, in *ApplicationIdentifier, opts ...grpc.CallOption) (*ListApplicationCollaboratorsResponse, error)
}

type isApplicationClient struct {
	cc *grpc.ClientConn
}

func NewIsApplicationClient(cc *grpc.ClientConn) IsApplicationClient {
	return &isApplicationClient{cc}
}

func (c *isApplicationClient) CreateApplication(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsApplication/CreateApplication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isApplicationClient) GetApplication(ctx context.Context, in *ApplicationIdentifier, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := grpc.Invoke(ctx, "/ttn.v3.IsApplication/GetApplication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isApplicationClient) ListApplications(ctx context.Context, in *google_protobuf2.Empty, opts ...grpc.CallOption) (*ListApplicationsResponse, error) {
	out := new(ListApplicationsResponse)
	err := grpc.Invoke(ctx, "/ttn.v3.IsApplication/ListApplications", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isApplicationClient) UpdateApplication(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsApplication/UpdateApplication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isApplicationClient) DeleteApplication(ctx context.Context, in *ApplicationIdentifier, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsApplication/DeleteApplication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isApplicationClient) GenerateApplicationAPIKey(ctx context.Context, in *GenerateApplicationAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error) {
	out := new(APIKey)
	err := grpc.Invoke(ctx, "/ttn.v3.IsApplication/GenerateApplicationAPIKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isApplicationClient) ListApplicationAPIKeys(ctx context.Context, in *ApplicationIdentifier, opts ...grpc.CallOption) (*ListApplicationAPIKeysResponse, error) {
	out := new(ListApplicationAPIKeysResponse)
	err := grpc.Invoke(ctx, "/ttn.v3.IsApplication/ListApplicationAPIKeys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isApplicationClient) UpdateApplicationAPIKey(ctx context.Context, in *UpdateApplicationAPIKeyRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsApplication/UpdateApplicationAPIKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isApplicationClient) RemoveApplicationAPIKey(ctx context.Context, in *RemoveApplicationAPIKeyRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsApplication/RemoveApplicationAPIKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isApplicationClient) SetApplicationCollaborator(ctx context.Context, in *SetApplicationCollaboratorRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsApplication/SetApplicationCollaborator", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isApplicationClient) ListApplicationCollaborators(ctx context.Context, in *ApplicationIdentifier, opts ...grpc.CallOption) (*ListApplicationCollaboratorsResponse, error) {
	out := new(ListApplicationCollaboratorsResponse)
	err := grpc.Invoke(ctx, "/ttn.v3.IsApplication/ListApplicationCollaborators", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IsApplication service

type IsApplicationServer interface {
	// CreateApplication creates a new application on the network.
	CreateApplication(context.Context, *CreateApplicationRequest) (*google_protobuf2.Empty, error)
	// GetApplication finds an application by ID and retrieves it.
	GetApplication(context.Context, *ApplicationIdentifier) (*Application, error)
	// ListApplications returns all the applications where the authenticated user
	// has access to.
	ListApplications(context.Context, *google_protobuf2.Empty) (*ListApplicationsResponse, error)
	// UpdateApplication edits an application.
	UpdateApplication(context.Context, *UpdateApplicationRequest) (*google_protobuf2.Empty, error)
	// DeleteApplication permantly deletes an application.
	DeleteApplication(context.Context, *ApplicationIdentifier) (*google_protobuf2.Empty, error)
	// GenerateApplicationAPIKey generates a new API key for a given application
	// and returns it.
	GenerateApplicationAPIKey(context.Context, *GenerateApplicationAPIKeyRequest) (*APIKey, error)
	// ListApplicationAPIKeys returns all the application API keys that a given
	// application has.
	ListApplicationAPIKeys(context.Context, *ApplicationIdentifier) (*ListApplicationAPIKeysResponse, error)
	// UpdateApplicationAPIKey updates the rights of a given application API key.
	UpdateApplicationAPIKey(context.Context, *UpdateApplicationAPIKeyRequest) (*google_protobuf2.Empty, error)
	// RemoveApplicationAPIKey removes a given API key from an application.
	RemoveApplicationAPIKey(context.Context, *RemoveApplicationAPIKeyRequest) (*google_protobuf2.Empty, error)
	// SetApplicationCollaborator sets a collaborator for a given application. If
	// the list of rights is empty the collaborator will be removed.
	SetApplicationCollaborator(context.Context, *SetApplicationCollaboratorRequest) (*google_protobuf2.Empty, error)
	// ListApplicationCollaborators returns all the collaborators for a given application.
	ListApplicationCollaborators(context.Context, *ApplicationIdentifier) (*ListApplicationCollaboratorsResponse, error)
}

func RegisterIsApplicationServer(s *grpc.Server, srv IsApplicationServer) {
	s.RegisterService(&_IsApplication_serviceDesc, srv)
}

func _IsApplication_CreateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsApplicationServer).CreateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsApplication/CreateApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsApplicationServer).CreateApplication(ctx, req.(*CreateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsApplication_GetApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsApplicationServer).GetApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsApplication/GetApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsApplicationServer).GetApplication(ctx, req.(*ApplicationIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsApplication_ListApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf2.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsApplicationServer).ListApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsApplication/ListApplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsApplicationServer).ListApplications(ctx, req.(*google_protobuf2.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsApplication_UpdateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsApplicationServer).UpdateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsApplication/UpdateApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsApplicationServer).UpdateApplication(ctx, req.(*UpdateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsApplication_DeleteApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsApplicationServer).DeleteApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsApplication/DeleteApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsApplicationServer).DeleteApplication(ctx, req.(*ApplicationIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsApplication_GenerateApplicationAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateApplicationAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsApplicationServer).GenerateApplicationAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsApplication/GenerateApplicationAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsApplicationServer).GenerateApplicationAPIKey(ctx, req.(*GenerateApplicationAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsApplication_ListApplicationAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsApplicationServer).ListApplicationAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsApplication/ListApplicationAPIKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsApplicationServer).ListApplicationAPIKeys(ctx, req.(*ApplicationIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsApplication_UpdateApplicationAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsApplicationServer).UpdateApplicationAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsApplication/UpdateApplicationAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsApplicationServer).UpdateApplicationAPIKey(ctx, req.(*UpdateApplicationAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsApplication_RemoveApplicationAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveApplicationAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsApplicationServer).RemoveApplicationAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsApplication/RemoveApplicationAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsApplicationServer).RemoveApplicationAPIKey(ctx, req.(*RemoveApplicationAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsApplication_SetApplicationCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetApplicationCollaboratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsApplicationServer).SetApplicationCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsApplication/SetApplicationCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsApplicationServer).SetApplicationCollaborator(ctx, req.(*SetApplicationCollaboratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsApplication_ListApplicationCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsApplicationServer).ListApplicationCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsApplication/ListApplicationCollaborators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsApplicationServer).ListApplicationCollaborators(ctx, req.(*ApplicationIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

var _IsApplication_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.v3.IsApplication",
	HandlerType: (*IsApplicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateApplication",
			Handler:    _IsApplication_CreateApplication_Handler,
		},
		{
			MethodName: "GetApplication",
			Handler:    _IsApplication_GetApplication_Handler,
		},
		{
			MethodName: "ListApplications",
			Handler:    _IsApplication_ListApplications_Handler,
		},
		{
			MethodName: "UpdateApplication",
			Handler:    _IsApplication_UpdateApplication_Handler,
		},
		{
			MethodName: "DeleteApplication",
			Handler:    _IsApplication_DeleteApplication_Handler,
		},
		{
			MethodName: "GenerateApplicationAPIKey",
			Handler:    _IsApplication_GenerateApplicationAPIKey_Handler,
		},
		{
			MethodName: "ListApplicationAPIKeys",
			Handler:    _IsApplication_ListApplicationAPIKeys_Handler,
		},
		{
			MethodName: "UpdateApplicationAPIKey",
			Handler:    _IsApplication_UpdateApplicationAPIKey_Handler,
		},
		{
			MethodName: "RemoveApplicationAPIKey",
			Handler:    _IsApplication_RemoveApplicationAPIKey_Handler,
		},
		{
			MethodName: "SetApplicationCollaborator",
			Handler:    _IsApplication_SetApplicationCollaborator_Handler,
		},
		{
			MethodName: "ListApplicationCollaborators",
			Handler:    _IsApplication_ListApplicationCollaborators_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/ttn/api/identityserver.proto",
}

// Client API for IsGateway service

type IsGatewayClient interface {
	// CreateGateway creates a new gateway on the network and returns it.
	CreateGateway(ctx context.Context, in *CreateGatewayRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// GetGateway finds a gateway by ID and retrieves it.
	GetGateway(ctx context.Context, in *GatewayIdentifier, opts ...grpc.CallOption) (*Gateway, error)
	// ListGateways returns all the gateways which the authenticated user
	// has access to.
	ListGateways(ctx context.Context, in *google_protobuf2.Empty, opts ...grpc.CallOption) (*ListGatewaysResponse, error)
	// UpdateGateway edits a gateway and retrieves the updated version.
	UpdateGateway(ctx context.Context, in *UpdateGatewayRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// DeleteGateway permantly deletes a gateway.
	DeleteGateway(ctx context.Context, in *GatewayIdentifier, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// GenerateGatewayAPIKey generates a new API key for a given gateway and
	// returns it.
	GenerateGatewayAPIKey(ctx context.Context, in *GenerateGatewayAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error)
	// ListGatewayAPIKeys returns all the gateway API keys that a given gateway has.
	ListGatewayAPIKeys(ctx context.Context, in *GatewayIdentifier, opts ...grpc.CallOption) (*ListGatewayAPIKeysResponse, error)
	// UpdateGatewayAPIKey updates the rights of a gateway API key.
	UpdateGatewayAPIKey(ctx context.Context, in *UpdateGatewayAPIKeyRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// RemoveGatewayAPIKey removes a given API key from a gateway.
	RemoveGatewayAPIKey(ctx context.Context, in *RemoveGatewayAPIKeyRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// SetGatewayCollaborator sets a collaborator for a given gateway. If the list
	// of rights is empty the collaborator will be removed.
	SetGatewayCollaborator(ctx context.Context, in *SetGatewayCollaboratorRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// ListGatewayCollaborators returns all the collaborators for a given gateway.
	ListGatewayCollaborators(ctx context.Context, in *GatewayIdentifier, opts ...grpc.CallOption) (*ListGatewayCollaboratorsResponse, error)
}

type isGatewayClient struct {
	cc *grpc.ClientConn
}

func NewIsGatewayClient(cc *grpc.ClientConn) IsGatewayClient {
	return &isGatewayClient{cc}
}

func (c *isGatewayClient) CreateGateway(ctx context.Context, in *CreateGatewayRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsGateway/CreateGateway", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isGatewayClient) GetGateway(ctx context.Context, in *GatewayIdentifier, opts ...grpc.CallOption) (*Gateway, error) {
	out := new(Gateway)
	err := grpc.Invoke(ctx, "/ttn.v3.IsGateway/GetGateway", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isGatewayClient) ListGateways(ctx context.Context, in *google_protobuf2.Empty, opts ...grpc.CallOption) (*ListGatewaysResponse, error) {
	out := new(ListGatewaysResponse)
	err := grpc.Invoke(ctx, "/ttn.v3.IsGateway/ListGateways", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isGatewayClient) UpdateGateway(ctx context.Context, in *UpdateGatewayRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsGateway/UpdateGateway", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isGatewayClient) DeleteGateway(ctx context.Context, in *GatewayIdentifier, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsGateway/DeleteGateway", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isGatewayClient) GenerateGatewayAPIKey(ctx context.Context, in *GenerateGatewayAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error) {
	out := new(APIKey)
	err := grpc.Invoke(ctx, "/ttn.v3.IsGateway/GenerateGatewayAPIKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isGatewayClient) ListGatewayAPIKeys(ctx context.Context, in *GatewayIdentifier, opts ...grpc.CallOption) (*ListGatewayAPIKeysResponse, error) {
	out := new(ListGatewayAPIKeysResponse)
	err := grpc.Invoke(ctx, "/ttn.v3.IsGateway/ListGatewayAPIKeys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isGatewayClient) UpdateGatewayAPIKey(ctx context.Context, in *UpdateGatewayAPIKeyRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsGateway/UpdateGatewayAPIKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isGatewayClient) RemoveGatewayAPIKey(ctx context.Context, in *RemoveGatewayAPIKeyRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsGateway/RemoveGatewayAPIKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isGatewayClient) SetGatewayCollaborator(ctx context.Context, in *SetGatewayCollaboratorRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsGateway/SetGatewayCollaborator", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isGatewayClient) ListGatewayCollaborators(ctx context.Context, in *GatewayIdentifier, opts ...grpc.CallOption) (*ListGatewayCollaboratorsResponse, error) {
	out := new(ListGatewayCollaboratorsResponse)
	err := grpc.Invoke(ctx, "/ttn.v3.IsGateway/ListGatewayCollaborators", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IsGateway service

type IsGatewayServer interface {
	// CreateGateway creates a new gateway on the network and returns it.
	CreateGateway(context.Context, *CreateGatewayRequest) (*google_protobuf2.Empty, error)
	// GetGateway finds a gateway by ID and retrieves it.
	GetGateway(context.Context, *GatewayIdentifier) (*Gateway, error)
	// ListGateways returns all the gateways which the authenticated user
	// has access to.
	ListGateways(context.Context, *google_protobuf2.Empty) (*ListGatewaysResponse, error)
	// UpdateGateway edits a gateway and retrieves the updated version.
	UpdateGateway(context.Context, *UpdateGatewayRequest) (*google_protobuf2.Empty, error)
	// DeleteGateway permantly deletes a gateway.
	DeleteGateway(context.Context, *GatewayIdentifier) (*google_protobuf2.Empty, error)
	// GenerateGatewayAPIKey generates a new API key for a given gateway and
	// returns it.
	GenerateGatewayAPIKey(context.Context, *GenerateGatewayAPIKeyRequest) (*APIKey, error)
	// ListGatewayAPIKeys returns all the gateway API keys that a given gateway has.
	ListGatewayAPIKeys(context.Context, *GatewayIdentifier) (*ListGatewayAPIKeysResponse, error)
	// UpdateGatewayAPIKey updates the rights of a gateway API key.
	UpdateGatewayAPIKey(context.Context, *UpdateGatewayAPIKeyRequest) (*google_protobuf2.Empty, error)
	// RemoveGatewayAPIKey removes a given API key from a gateway.
	RemoveGatewayAPIKey(context.Context, *RemoveGatewayAPIKeyRequest) (*google_protobuf2.Empty, error)
	// SetGatewayCollaborator sets a collaborator for a given gateway. If the list
	// of rights is empty the collaborator will be removed.
	SetGatewayCollaborator(context.Context, *SetGatewayCollaboratorRequest) (*google_protobuf2.Empty, error)
	// ListGatewayCollaborators returns all the collaborators for a given gateway.
	ListGatewayCollaborators(context.Context, *GatewayIdentifier) (*ListGatewayCollaboratorsResponse, error)
}

func RegisterIsGatewayServer(s *grpc.Server, srv IsGatewayServer) {
	s.RegisterService(&_IsGateway_serviceDesc, srv)
}

func _IsGateway_CreateGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsGatewayServer).CreateGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsGateway/CreateGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsGatewayServer).CreateGateway(ctx, req.(*CreateGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsGateway_GetGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsGatewayServer).GetGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsGateway/GetGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsGatewayServer).GetGateway(ctx, req.(*GatewayIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsGateway_ListGateways_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf2.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsGatewayServer).ListGateways(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsGateway/ListGateways",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsGatewayServer).ListGateways(ctx, req.(*google_protobuf2.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsGateway_UpdateGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsGatewayServer).UpdateGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsGateway/UpdateGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsGatewayServer).UpdateGateway(ctx, req.(*UpdateGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsGateway_DeleteGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsGatewayServer).DeleteGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsGateway/DeleteGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsGatewayServer).DeleteGateway(ctx, req.(*GatewayIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsGateway_GenerateGatewayAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateGatewayAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsGatewayServer).GenerateGatewayAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsGateway/GenerateGatewayAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsGatewayServer).GenerateGatewayAPIKey(ctx, req.(*GenerateGatewayAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsGateway_ListGatewayAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsGatewayServer).ListGatewayAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsGateway/ListGatewayAPIKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsGatewayServer).ListGatewayAPIKeys(ctx, req.(*GatewayIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsGateway_UpdateGatewayAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGatewayAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsGatewayServer).UpdateGatewayAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsGateway/UpdateGatewayAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsGatewayServer).UpdateGatewayAPIKey(ctx, req.(*UpdateGatewayAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsGateway_RemoveGatewayAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveGatewayAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsGatewayServer).RemoveGatewayAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsGateway/RemoveGatewayAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsGatewayServer).RemoveGatewayAPIKey(ctx, req.(*RemoveGatewayAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsGateway_SetGatewayCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGatewayCollaboratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsGatewayServer).SetGatewayCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsGateway/SetGatewayCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsGatewayServer).SetGatewayCollaborator(ctx, req.(*SetGatewayCollaboratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsGateway_ListGatewayCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsGatewayServer).ListGatewayCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsGateway/ListGatewayCollaborators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsGatewayServer).ListGatewayCollaborators(ctx, req.(*GatewayIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

var _IsGateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.v3.IsGateway",
	HandlerType: (*IsGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGateway",
			Handler:    _IsGateway_CreateGateway_Handler,
		},
		{
			MethodName: "GetGateway",
			Handler:    _IsGateway_GetGateway_Handler,
		},
		{
			MethodName: "ListGateways",
			Handler:    _IsGateway_ListGateways_Handler,
		},
		{
			MethodName: "UpdateGateway",
			Handler:    _IsGateway_UpdateGateway_Handler,
		},
		{
			MethodName: "DeleteGateway",
			Handler:    _IsGateway_DeleteGateway_Handler,
		},
		{
			MethodName: "GenerateGatewayAPIKey",
			Handler:    _IsGateway_GenerateGatewayAPIKey_Handler,
		},
		{
			MethodName: "ListGatewayAPIKeys",
			Handler:    _IsGateway_ListGatewayAPIKeys_Handler,
		},
		{
			MethodName: "UpdateGatewayAPIKey",
			Handler:    _IsGateway_UpdateGatewayAPIKey_Handler,
		},
		{
			MethodName: "RemoveGatewayAPIKey",
			Handler:    _IsGateway_RemoveGatewayAPIKey_Handler,
		},
		{
			MethodName: "SetGatewayCollaborator",
			Handler:    _IsGateway_SetGatewayCollaborator_Handler,
		},
		{
			MethodName: "ListGatewayCollaborators",
			Handler:    _IsGateway_ListGatewayCollaborators_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/ttn/api/identityserver.proto",
}

// Client API for IsClient service

type IsClientClient interface {
	// CreateClient sends a request to create a third-party client. The request
	// has to be approved by the admins.
	CreateClient(ctx context.Context, in *CreateClientRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// GetClient finds a client by ID and retrieves it.
	GetClient(ctx context.Context, in *ClientIdentifier, opts ...grpc.CallOption) (*Client, error)
	// ListClients returns all the clients the authenticated user has created.
	ListClients(ctx context.Context, in *google_protobuf2.Empty, opts ...grpc.CallOption) (*ListClientsResponse, error)
	// UpdateClient sends a request to update a client.
	UpdateClient(ctx context.Context, in *UpdateClientRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// DeleteClient permantly deletes a client.
	DeleteClient(ctx context.Context, in *ClientIdentifier, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
}

type isClientClient struct {
	cc *grpc.ClientConn
}

func NewIsClientClient(cc *grpc.ClientConn) IsClientClient {
	return &isClientClient{cc}
}

func (c *isClientClient) CreateClient(ctx context.Context, in *CreateClientRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsClient/CreateClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isClientClient) GetClient(ctx context.Context, in *ClientIdentifier, opts ...grpc.CallOption) (*Client, error) {
	out := new(Client)
	err := grpc.Invoke(ctx, "/ttn.v3.IsClient/GetClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isClientClient) ListClients(ctx context.Context, in *google_protobuf2.Empty, opts ...grpc.CallOption) (*ListClientsResponse, error) {
	out := new(ListClientsResponse)
	err := grpc.Invoke(ctx, "/ttn.v3.IsClient/ListClients", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isClientClient) UpdateClient(ctx context.Context, in *UpdateClientRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsClient/UpdateClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isClientClient) DeleteClient(ctx context.Context, in *ClientIdentifier, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.IsClient/DeleteClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IsClient service

type IsClientServer interface {
	// CreateClient sends a request to create a third-party client. The request
	// has to be approved by the admins.
	CreateClient(context.Context, *CreateClientRequest) (*google_protobuf2.Empty, error)
	// GetClient finds a client by ID and retrieves it.
	GetClient(context.Context, *ClientIdentifier) (*Client, error)
	// ListClients returns all the clients the authenticated user has created.
	ListClients(context.Context, *google_protobuf2.Empty) (*ListClientsResponse, error)
	// UpdateClient sends a request to update a client.
	UpdateClient(context.Context, *UpdateClientRequest) (*google_protobuf2.Empty, error)
	// DeleteClient permantly deletes a client.
	DeleteClient(context.Context, *ClientIdentifier) (*google_protobuf2.Empty, error)
}

func RegisterIsClientServer(s *grpc.Server, srv IsClientServer) {
	s.RegisterService(&_IsClient_serviceDesc, srv)
}

func _IsClient_CreateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsClientServer).CreateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsClient/CreateClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsClientServer).CreateClient(ctx, req.(*CreateClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsClient_GetClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsClientServer).GetClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsClient/GetClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsClientServer).GetClient(ctx, req.(*ClientIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsClient_ListClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf2.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsClientServer).ListClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsClient/ListClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsClientServer).ListClients(ctx, req.(*google_protobuf2.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsClient_UpdateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsClientServer).UpdateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsClient/UpdateClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsClientServer).UpdateClient(ctx, req.(*UpdateClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsClient_DeleteClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsClientServer).DeleteClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.IsClient/DeleteClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsClientServer).DeleteClient(ctx, req.(*ClientIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

var _IsClient_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.v3.IsClient",
	HandlerType: (*IsClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateClient",
			Handler:    _IsClient_CreateClient_Handler,
		},
		{
			MethodName: "GetClient",
			Handler:    _IsClient_GetClient_Handler,
		},
		{
			MethodName: "ListClients",
			Handler:    _IsClient_ListClients_Handler,
		},
		{
			MethodName: "UpdateClient",
			Handler:    _IsClient_UpdateClient_Handler,
		},
		{
			MethodName: "DeleteClient",
			Handler:    _IsClient_DeleteClient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/ttn/api/identityserver.proto",
}

func (m *GetSettingsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSettingsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProjectionMask != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(m.ProjectionMask.Size()))
		n1, err := m.ProjectionMask.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *UpdateSettingsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSettingsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.Settings.Size()))
	n2, err := m.Settings.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x12
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.UpdateMask.Size()))
	n3, err := m.UpdateMask.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	return i, nil
}

func (m *CreateUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateUserRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.User.Size()))
	n4, err := m.User.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if len(m.InvitationToken) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.InvitationToken)))
		i += copy(dAtA[i:], m.InvitationToken)
	}
	return i, nil
}

func (m *UpdateUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.User.Size()))
	n5, err := m.User.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x12
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.UpdateMask.Size()))
	n6, err := m.UpdateMask.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	return i, nil
}

func (m *UpdateUserPasswordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserPasswordRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Old) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Old)))
		i += copy(dAtA[i:], m.Old)
	}
	if len(m.New) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.New)))
		i += copy(dAtA[i:], m.New)
	}
	return i, nil
}

func (m *GenerateUserAPIKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenerateUserAPIKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Rights) > 0 {
		dAtA8 := make([]byte, len(m.Rights)*10)
		var j7 int
		for _, num := range m.Rights {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	return i, nil
}

func (m *ListUserAPIKeysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListUserAPIKeysResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.APIKeys) > 0 {
		for _, msg := range m.APIKeys {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIdentityserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateUserAPIKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserAPIKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Rights) > 0 {
		dAtA10 := make([]byte, len(m.Rights)*10)
		var j9 int
		for _, num := range m.Rights {
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(j9))
		i += copy(dAtA[i:], dAtA10[:j9])
	}
	return i, nil
}

func (m *RemoveUserAPIKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveUserAPIKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *ValidateUserEmailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateUserEmailRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	return i, nil
}

func (m *ListAuthorizedClientsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAuthorizedClientsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Clients) > 0 {
		for _, msg := range m.Clients {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIdentityserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CreateApplicationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateApplicationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.Application.Size()))
	n11, err := m.Application.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	return i, nil
}

func (m *ListApplicationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListApplicationsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Applications) > 0 {
		for _, msg := range m.Applications {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIdentityserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateApplicationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateApplicationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.Application.Size()))
	n12, err := m.Application.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	dAtA[i] = 0x12
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.UpdateMask.Size()))
	n13, err := m.UpdateMask.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	return i, nil
}

func (m *GenerateApplicationAPIKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenerateApplicationAPIKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.ApplicationIdentifier.Size()))
	n14, err := m.ApplicationIdentifier.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Rights) > 0 {
		dAtA16 := make([]byte, len(m.Rights)*10)
		var j15 int
		for _, num := range m.Rights {
			for num >= 1<<7 {
				dAtA16[j15] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j15++
			}
			dAtA16[j15] = uint8(num)
			j15++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(j15))
		i += copy(dAtA[i:], dAtA16[:j15])
	}
	return i, nil
}

func (m *ListApplicationAPIKeysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListApplicationAPIKeysResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.APIKeys) > 0 {
		for _, msg := range m.APIKeys {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIdentityserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateApplicationAPIKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateApplicationAPIKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.ApplicationIdentifier.Size()))
	n17, err := m.ApplicationIdentifier.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n17
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Rights) > 0 {
		dAtA19 := make([]byte, len(m.Rights)*10)
		var j18 int
		for _, num := range m.Rights {
			for num >= 1<<7 {
				dAtA19[j18] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j18++
			}
			dAtA19[j18] = uint8(num)
			j18++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(j18))
		i += copy(dAtA[i:], dAtA19[:j18])
	}
	return i, nil
}

func (m *RemoveApplicationAPIKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveApplicationAPIKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.ApplicationIdentifier.Size()))
	n20, err := m.ApplicationIdentifier.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n20
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *SetApplicationCollaboratorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetApplicationCollaboratorRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.ApplicationIdentifier.Size()))
	n21, err := m.ApplicationIdentifier.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n21
	dAtA[i] = 0x12
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.Collaborator.Size()))
	n22, err := m.Collaborator.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n22
	return i, nil
}

func (m *ListApplicationCollaboratorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListApplicationCollaboratorsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Collaborators) > 0 {
		for _, msg := range m.Collaborators {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIdentityserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CreateGatewayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateGatewayRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.Gateway.Size()))
	n23, err := m.Gateway.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n23
	return i, nil
}

func (m *ListGatewaysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListGatewaysResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Gateways) > 0 {
		for _, msg := range m.Gateways {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIdentityserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateGatewayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGatewayRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.Gateway.Size()))
	n24, err := m.Gateway.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n24
	dAtA[i] = 0x12
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.UpdateMask.Size()))
	n25, err := m.UpdateMask.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n25
	return i, nil
}

func (m *GenerateGatewayAPIKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenerateGatewayAPIKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.GatewayIdentifier.Size()))
	n26, err := m.GatewayIdentifier.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n26
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Rights) > 0 {
		dAtA28 := make([]byte, len(m.Rights)*10)
		var j27 int
		for _, num := range m.Rights {
			for num >= 1<<7 {
				dAtA28[j27] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j27++
			}
			dAtA28[j27] = uint8(num)
			j27++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(j27))
		i += copy(dAtA[i:], dAtA28[:j27])
	}
	return i, nil
}

func (m *ListGatewayAPIKeysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListGatewayAPIKeysResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.APIKeys) > 0 {
		for _, msg := range m.APIKeys {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIdentityserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateGatewayAPIKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGatewayAPIKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.GatewayIdentifier.Size()))
	n29, err := m.GatewayIdentifier.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n29
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Rights) > 0 {
		dAtA31 := make([]byte, len(m.Rights)*10)
		var j30 int
		for _, num := range m.Rights {
			for num >= 1<<7 {
				dAtA31[j30] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j30++
			}
			dAtA31[j30] = uint8(num)
			j30++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(j30))
		i += copy(dAtA[i:], dAtA31[:j30])
	}
	return i, nil
}

func (m *RemoveGatewayAPIKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveGatewayAPIKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.GatewayIdentifier.Size()))
	n32, err := m.GatewayIdentifier.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n32
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *SetGatewayCollaboratorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetGatewayCollaboratorRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.GatewayIdentifier.Size()))
	n33, err := m.GatewayIdentifier.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n33
	dAtA[i] = 0x12
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.Collaborator.Size()))
	n34, err := m.Collaborator.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n34
	return i, nil
}

func (m *ListGatewayCollaboratorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListGatewayCollaboratorsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Collaborators) > 0 {
		for _, msg := range m.Collaborators {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIdentityserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CreateClientRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateClientRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.Client.Size()))
	n35, err := m.Client.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n35
	return i, nil
}

func (m *ListClientsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListClientsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Clients) > 0 {
		for _, msg := range m.Clients {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIdentityserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateClientRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateClientRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.Client.Size()))
	n36, err := m.Client.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n36
	dAtA[i] = 0x12
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.UpdateMask.Size()))
	n37, err := m.UpdateMask.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n37
	return i, nil
}

func encodeVarintIdentityserver(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedGetSettingsRequest(r randyIdentityserver, easy bool) *GetSettingsRequest {
	this := &GetSettingsRequest{}
	if r.Intn(10) != 0 {
		this.ProjectionMask = google_protobuf5.NewPopulatedFieldMask(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateSettingsRequest(r randyIdentityserver, easy bool) *UpdateSettingsRequest {
	this := &UpdateSettingsRequest{}
	v1 := NewPopulatedIdentityServerSettings(r, easy)
	this.Settings = *v1
	v2 := google_protobuf5.NewPopulatedFieldMask(r, easy)
	this.UpdateMask = *v2
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateUserRequest(r randyIdentityserver, easy bool) *CreateUserRequest {
	this := &CreateUserRequest{}
	v3 := NewPopulatedUser(r, easy)
	this.User = *v3
	this.InvitationToken = string(randStringIdentityserver(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateUserRequest(r randyIdentityserver, easy bool) *UpdateUserRequest {
	this := &UpdateUserRequest{}
	v4 := NewPopulatedUser(r, easy)
	this.User = *v4
	v5 := google_protobuf5.NewPopulatedFieldMask(r, easy)
	this.UpdateMask = *v5
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateUserPasswordRequest(r randyIdentityserver, easy bool) *UpdateUserPasswordRequest {
	this := &UpdateUserPasswordRequest{}
	this.Old = string(randStringIdentityserver(r))
	this.New = string(randStringIdentityserver(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGenerateUserAPIKeyRequest(r randyIdentityserver, easy bool) *GenerateUserAPIKeyRequest {
	this := &GenerateUserAPIKeyRequest{}
	this.Name = string(randStringIdentityserver(r))
	v6 := r.Intn(10)
	this.Rights = make([]Right, v6)
	for i := 0; i < v6; i++ {
		this.Rights[i] = Right([]int32{0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 31, 32, 33, 34, 35, 36, 37, 38, 39, 51, 52, 53, 54, 55, 56, 57, 58}[r.Intn(31)])
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListUserAPIKeysResponse(r randyIdentityserver, easy bool) *ListUserAPIKeysResponse {
	this := &ListUserAPIKeysResponse{}
	if r.Intn(10) != 0 {
		v7 := r.Intn(5)
		this.APIKeys = make([]APIKey, v7)
		for i := 0; i < v7; i++ {
			v8 := NewPopulatedAPIKey(r, easy)
			this.APIKeys[i] = *v8
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateUserAPIKeyRequest(r randyIdentityserver, easy bool) *UpdateUserAPIKeyRequest {
	this := &UpdateUserAPIKeyRequest{}
	this.Name = string(randStringIdentityserver(r))
	v9 := r.Intn(10)
	this.Rights = make([]Right, v9)
	for i := 0; i < v9; i++ {
		this.Rights[i] = Right([]int32{0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 31, 32, 33, 34, 35, 36, 37, 38, 39, 51, 52, 53, 54, 55, 56, 57, 58}[r.Intn(31)])
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRemoveUserAPIKeyRequest(r randyIdentityserver, easy bool) *RemoveUserAPIKeyRequest {
	this := &RemoveUserAPIKeyRequest{}
	this.Name = string(randStringIdentityserver(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedValidateUserEmailRequest(r randyIdentityserver, easy bool) *ValidateUserEmailRequest {
	this := &ValidateUserEmailRequest{}
	this.Token = string(randStringIdentityserver(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListAuthorizedClientsResponse(r randyIdentityserver, easy bool) *ListAuthorizedClientsResponse {
	this := &ListAuthorizedClientsResponse{}
	if r.Intn(10) != 0 {
		v10 := r.Intn(5)
		this.Clients = make([]Client, v10)
		for i := 0; i < v10; i++ {
			v11 := NewPopulatedClient(r, easy)
			this.Clients[i] = *v11
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateApplicationRequest(r randyIdentityserver, easy bool) *CreateApplicationRequest {
	this := &CreateApplicationRequest{}
	v12 := NewPopulatedApplication(r, easy)
	this.Application = *v12
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListApplicationsResponse(r randyIdentityserver, easy bool) *ListApplicationsResponse {
	this := &ListApplicationsResponse{}
	if r.Intn(10) != 0 {
		v13 := r.Intn(5)
		this.Applications = make([]Application, v13)
		for i := 0; i < v13; i++ {
			v14 := NewPopulatedApplication(r, easy)
			this.Applications[i] = *v14
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateApplicationRequest(r randyIdentityserver, easy bool) *UpdateApplicationRequest {
	this := &UpdateApplicationRequest{}
	v15 := NewPopulatedApplication(r, easy)
	this.Application = *v15
	v16 := google_protobuf5.NewPopulatedFieldMask(r, easy)
	this.UpdateMask = *v16
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGenerateApplicationAPIKeyRequest(r randyIdentityserver, easy bool) *GenerateApplicationAPIKeyRequest {
	this := &GenerateApplicationAPIKeyRequest{}
	v17 := NewPopulatedApplicationIdentifier(r, easy)
	this.ApplicationIdentifier = *v17
	this.Name = string(randStringIdentityserver(r))
	v18 := r.Intn(10)
	this.Rights = make([]Right, v18)
	for i := 0; i < v18; i++ {
		this.Rights[i] = Right([]int32{0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 31, 32, 33, 34, 35, 36, 37, 38, 39, 51, 52, 53, 54, 55, 56, 57, 58}[r.Intn(31)])
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListApplicationAPIKeysResponse(r randyIdentityserver, easy bool) *ListApplicationAPIKeysResponse {
	this := &ListApplicationAPIKeysResponse{}
	if r.Intn(10) != 0 {
		v19 := r.Intn(5)
		this.APIKeys = make([]APIKey, v19)
		for i := 0; i < v19; i++ {
			v20 := NewPopulatedAPIKey(r, easy)
			this.APIKeys[i] = *v20
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateApplicationAPIKeyRequest(r randyIdentityserver, easy bool) *UpdateApplicationAPIKeyRequest {
	this := &UpdateApplicationAPIKeyRequest{}
	v21 := NewPopulatedApplicationIdentifier(r, easy)
	this.ApplicationIdentifier = *v21
	this.Name = string(randStringIdentityserver(r))
	v22 := r.Intn(10)
	this.Rights = make([]Right, v22)
	for i := 0; i < v22; i++ {
		this.Rights[i] = Right([]int32{0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 31, 32, 33, 34, 35, 36, 37, 38, 39, 51, 52, 53, 54, 55, 56, 57, 58}[r.Intn(31)])
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRemoveApplicationAPIKeyRequest(r randyIdentityserver, easy bool) *RemoveApplicationAPIKeyRequest {
	this := &RemoveApplicationAPIKeyRequest{}
	v23 := NewPopulatedApplicationIdentifier(r, easy)
	this.ApplicationIdentifier = *v23
	this.Name = string(randStringIdentityserver(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSetApplicationCollaboratorRequest(r randyIdentityserver, easy bool) *SetApplicationCollaboratorRequest {
	this := &SetApplicationCollaboratorRequest{}
	v24 := NewPopulatedApplicationIdentifier(r, easy)
	this.ApplicationIdentifier = *v24
	v25 := NewPopulatedCollaborator(r, easy)
	this.Collaborator = *v25
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListApplicationCollaboratorsResponse(r randyIdentityserver, easy bool) *ListApplicationCollaboratorsResponse {
	this := &ListApplicationCollaboratorsResponse{}
	if r.Intn(10) != 0 {
		v26 := r.Intn(5)
		this.Collaborators = make([]Collaborator, v26)
		for i := 0; i < v26; i++ {
			v27 := NewPopulatedCollaborator(r, easy)
			this.Collaborators[i] = *v27
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateGatewayRequest(r randyIdentityserver, easy bool) *CreateGatewayRequest {
	this := &CreateGatewayRequest{}
	v28 := NewPopulatedGateway(r, easy)
	this.Gateway = *v28
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListGatewaysResponse(r randyIdentityserver, easy bool) *ListGatewaysResponse {
	this := &ListGatewaysResponse{}
	if r.Intn(10) != 0 {
		v29 := r.Intn(5)
		this.Gateways = make([]Gateway, v29)
		for i := 0; i < v29; i++ {
			v30 := NewPopulatedGateway(r, easy)
			this.Gateways[i] = *v30
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateGatewayRequest(r randyIdentityserver, easy bool) *UpdateGatewayRequest {
	this := &UpdateGatewayRequest{}
	v31 := NewPopulatedGateway(r, easy)
	this.Gateway = *v31
	v32 := google_protobuf5.NewPopulatedFieldMask(r, easy)
	this.UpdateMask = *v32
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGenerateGatewayAPIKeyRequest(r randyIdentityserver, easy bool) *GenerateGatewayAPIKeyRequest {
	this := &GenerateGatewayAPIKeyRequest{}
	v33 := NewPopulatedGatewayIdentifier(r, easy)
	this.GatewayIdentifier = *v33
	this.Name = string(randStringIdentityserver(r))
	v34 := r.Intn(10)
	this.Rights = make([]Right, v34)
	for i := 0; i < v34; i++ {
		this.Rights[i] = Right([]int32{0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 31, 32, 33, 34, 35, 36, 37, 38, 39, 51, 52, 53, 54, 55, 56, 57, 58}[r.Intn(31)])
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListGatewayAPIKeysResponse(r randyIdentityserver, easy bool) *ListGatewayAPIKeysResponse {
	this := &ListGatewayAPIKeysResponse{}
	if r.Intn(10) != 0 {
		v35 := r.Intn(5)
		this.APIKeys = make([]APIKey, v35)
		for i := 0; i < v35; i++ {
			v36 := NewPopulatedAPIKey(r, easy)
			this.APIKeys[i] = *v36
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateGatewayAPIKeyRequest(r randyIdentityserver, easy bool) *UpdateGatewayAPIKeyRequest {
	this := &UpdateGatewayAPIKeyRequest{}
	v37 := NewPopulatedGatewayIdentifier(r, easy)
	this.GatewayIdentifier = *v37
	this.Name = string(randStringIdentityserver(r))
	v38 := r.Intn(10)
	this.Rights = make([]Right, v38)
	for i := 0; i < v38; i++ {
		this.Rights[i] = Right([]int32{0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 31, 32, 33, 34, 35, 36, 37, 38, 39, 51, 52, 53, 54, 55, 56, 57, 58}[r.Intn(31)])
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRemoveGatewayAPIKeyRequest(r randyIdentityserver, easy bool) *RemoveGatewayAPIKeyRequest {
	this := &RemoveGatewayAPIKeyRequest{}
	v39 := NewPopulatedGatewayIdentifier(r, easy)
	this.GatewayIdentifier = *v39
	this.Name = string(randStringIdentityserver(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSetGatewayCollaboratorRequest(r randyIdentityserver, easy bool) *SetGatewayCollaboratorRequest {
	this := &SetGatewayCollaboratorRequest{}
	v40 := NewPopulatedGatewayIdentifier(r, easy)
	this.GatewayIdentifier = *v40
	v41 := NewPopulatedCollaborator(r, easy)
	this.Collaborator = *v41
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListGatewayCollaboratorsResponse(r randyIdentityserver, easy bool) *ListGatewayCollaboratorsResponse {
	this := &ListGatewayCollaboratorsResponse{}
	if r.Intn(10) != 0 {
		v42 := r.Intn(5)
		this.Collaborators = make([]Collaborator, v42)
		for i := 0; i < v42; i++ {
			v43 := NewPopulatedCollaborator(r, easy)
			this.Collaborators[i] = *v43
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateClientRequest(r randyIdentityserver, easy bool) *CreateClientRequest {
	this := &CreateClientRequest{}
	v44 := NewPopulatedClient(r, easy)
	this.Client = *v44
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListClientsResponse(r randyIdentityserver, easy bool) *ListClientsResponse {
	this := &ListClientsResponse{}
	if r.Intn(10) != 0 {
		v45 := r.Intn(5)
		this.Clients = make([]Client, v45)
		for i := 0; i < v45; i++ {
			v46 := NewPopulatedClient(r, easy)
			this.Clients[i] = *v46
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateClientRequest(r randyIdentityserver, easy bool) *UpdateClientRequest {
	this := &UpdateClientRequest{}
	v47 := NewPopulatedClient(r, easy)
	this.Client = *v47
	v48 := google_protobuf5.NewPopulatedFieldMask(r, easy)
	this.UpdateMask = *v48
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyIdentityserver interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneIdentityserver(r randyIdentityserver) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringIdentityserver(r randyIdentityserver) string {
	v49 := r.Intn(100)
	tmps := make([]rune, v49)
	for i := 0; i < v49; i++ {
		tmps[i] = randUTF8RuneIdentityserver(r)
	}
	return string(tmps)
}
func randUnrecognizedIdentityserver(r randyIdentityserver, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldIdentityserver(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldIdentityserver(dAtA []byte, r randyIdentityserver, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateIdentityserver(dAtA, uint64(key))
		v50 := r.Int63()
		if r.Intn(2) == 0 {
			v50 *= -1
		}
		dAtA = encodeVarintPopulateIdentityserver(dAtA, uint64(v50))
	case 1:
		dAtA = encodeVarintPopulateIdentityserver(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateIdentityserver(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateIdentityserver(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateIdentityserver(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateIdentityserver(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *GetSettingsRequest) Size() (n int) {
	var l int
	_ = l
	if m.ProjectionMask != nil {
		l = m.ProjectionMask.Size()
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	return n
}

func (m *UpdateSettingsRequest) Size() (n int) {
	var l int
	_ = l
	l = m.Settings.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = m.UpdateMask.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	return n
}

func (m *CreateUserRequest) Size() (n int) {
	var l int
	_ = l
	l = m.User.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = len(m.InvitationToken)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	return n
}

func (m *UpdateUserRequest) Size() (n int) {
	var l int
	_ = l
	l = m.User.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = m.UpdateMask.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	return n
}

func (m *UpdateUserPasswordRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Old)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	l = len(m.New)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	return n
}

func (m *GenerateUserAPIKeyRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	if len(m.Rights) > 0 {
		l = 0
		for _, e := range m.Rights {
			l += sovIdentityserver(uint64(e))
		}
		n += 1 + sovIdentityserver(uint64(l)) + l
	}
	return n
}

func (m *ListUserAPIKeysResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.APIKeys) > 0 {
		for _, e := range m.APIKeys {
			l = e.Size()
			n += 1 + l + sovIdentityserver(uint64(l))
		}
	}
	return n
}

func (m *UpdateUserAPIKeyRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	if len(m.Rights) > 0 {
		l = 0
		for _, e := range m.Rights {
			l += sovIdentityserver(uint64(e))
		}
		n += 1 + sovIdentityserver(uint64(l)) + l
	}
	return n
}

func (m *RemoveUserAPIKeyRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	return n
}

func (m *ValidateUserEmailRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	return n
}

func (m *ListAuthorizedClientsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Clients) > 0 {
		for _, e := range m.Clients {
			l = e.Size()
			n += 1 + l + sovIdentityserver(uint64(l))
		}
	}
	return n
}

func (m *CreateApplicationRequest) Size() (n int) {
	var l int
	_ = l
	l = m.Application.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	return n
}

func (m *ListApplicationsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Applications) > 0 {
		for _, e := range m.Applications {
			l = e.Size()
			n += 1 + l + sovIdentityserver(uint64(l))
		}
	}
	return n
}

func (m *UpdateApplicationRequest) Size() (n int) {
	var l int
	_ = l
	l = m.Application.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = m.UpdateMask.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	return n
}

func (m *GenerateApplicationAPIKeyRequest) Size() (n int) {
	var l int
	_ = l
	l = m.ApplicationIdentifier.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	if len(m.Rights) > 0 {
		l = 0
		for _, e := range m.Rights {
			l += sovIdentityserver(uint64(e))
		}
		n += 1 + sovIdentityserver(uint64(l)) + l
	}
	return n
}

func (m *ListApplicationAPIKeysResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.APIKeys) > 0 {
		for _, e := range m.APIKeys {
			l = e.Size()
			n += 1 + l + sovIdentityserver(uint64(l))
		}
	}
	return n
}

func (m *UpdateApplicationAPIKeyRequest) Size() (n int) {
	var l int
	_ = l
	l = m.ApplicationIdentifier.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	if len(m.Rights) > 0 {
		l = 0
		for _, e := range m.Rights {
			l += sovIdentityserver(uint64(e))
		}
		n += 1 + sovIdentityserver(uint64(l)) + l
	}
	return n
}

func (m *RemoveApplicationAPIKeyRequest) Size() (n int) {
	var l int
	_ = l
	l = m.ApplicationIdentifier.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	return n
}

func (m *SetApplicationCollaboratorRequest) Size() (n int) {
	var l int
	_ = l
	l = m.ApplicationIdentifier.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = m.Collaborator.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	return n
}

func (m *ListApplicationCollaboratorsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Collaborators) > 0 {
		for _, e := range m.Collaborators {
			l = e.Size()
			n += 1 + l + sovIdentityserver(uint64(l))
		}
	}
	return n
}

func (m *CreateGatewayRequest) Size() (n int) {
	var l int
	_ = l
	l = m.Gateway.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	return n
}

func (m *ListGatewaysResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Gateways) > 0 {
		for _, e := range m.Gateways {
			l = e.Size()
			n += 1 + l + sovIdentityserver(uint64(l))
		}
	}
	return n
}

func (m *UpdateGatewayRequest) Size() (n int) {
	var l int
	_ = l
	l = m.Gateway.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = m.UpdateMask.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	return n
}

func (m *GenerateGatewayAPIKeyRequest) Size() (n int) {
	var l int
	_ = l
	l = m.GatewayIdentifier.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	if len(m.Rights) > 0 {
		l = 0
		for _, e := range m.Rights {
			l += sovIdentityserver(uint64(e))
		}
		n += 1 + sovIdentityserver(uint64(l)) + l
	}
	return n
}

func (m *ListGatewayAPIKeysResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.APIKeys) > 0 {
		for _, e := range m.APIKeys {
			l = e.Size()
			n += 1 + l + sovIdentityserver(uint64(l))
		}
	}
	return n
}

func (m *UpdateGatewayAPIKeyRequest) Size() (n int) {
	var l int
	_ = l
	l = m.GatewayIdentifier.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	if len(m.Rights) > 0 {
		l = 0
		for _, e := range m.Rights {
			l += sovIdentityserver(uint64(e))
		}
		n += 1 + sovIdentityserver(uint64(l)) + l
	}
	return n
}

func (m *RemoveGatewayAPIKeyRequest) Size() (n int) {
	var l int
	_ = l
	l = m.GatewayIdentifier.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	return n
}

func (m *SetGatewayCollaboratorRequest) Size() (n int) {
	var l int
	_ = l
	l = m.GatewayIdentifier.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = m.Collaborator.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	return n
}

func (m *ListGatewayCollaboratorsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Collaborators) > 0 {
		for _, e := range m.Collaborators {
			l = e.Size()
			n += 1 + l + sovIdentityserver(uint64(l))
		}
	}
	return n
}

func (m *CreateClientRequest) Size() (n int) {
	var l int
	_ = l
	l = m.Client.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	return n
}

func (m *ListClientsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Clients) > 0 {
		for _, e := range m.Clients {
			l = e.Size()
			n += 1 + l + sovIdentityserver(uint64(l))
		}
	}
	return n
}

func (m *UpdateClientRequest) Size() (n int) {
	var l int
	_ = l
	l = m.Client.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = m.UpdateMask.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	return n
}

func sovIdentityserver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozIdentityserver(x uint64) (n int) {
	return sovIdentityserver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetSettingsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSettingsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSettingsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectionMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProjectionMask == nil {
				m.ProjectionMask = &google_protobuf5.FieldMask{}
			}
			if err := m.ProjectionMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSettingsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSettingsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSettingsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpdateMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvitationToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvitationToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpdateMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserPasswordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserPasswordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserPasswordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Old", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Old = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field New", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.New = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenerateUserAPIKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenerateUserAPIKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenerateUserAPIKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v Right
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Right(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rights = append(m.Rights, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIdentityserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v Right
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIdentityserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Right(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rights = append(m.Rights, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rights", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListUserAPIKeysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListUserAPIKeysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListUserAPIKeysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field APIKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.APIKeys = append(m.APIKeys, APIKey{})
			if err := m.APIKeys[len(m.APIKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserAPIKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserAPIKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserAPIKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v Right
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Right(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rights = append(m.Rights, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIdentityserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v Right
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIdentityserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Right(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rights = append(m.Rights, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rights", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveUserAPIKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveUserAPIKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveUserAPIKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateUserEmailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateUserEmailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateUserEmailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAuthorizedClientsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAuthorizedClientsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAuthorizedClientsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Clients = append(m.Clients, Client{})
			if err := m.Clients[len(m.Clients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateApplicationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateApplicationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateApplicationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Application", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Application.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListApplicationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListApplicationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListApplicationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Applications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Applications = append(m.Applications, Application{})
			if err := m.Applications[len(m.Applications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateApplicationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateApplicationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateApplicationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Application", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Application.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpdateMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenerateApplicationAPIKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenerateApplicationAPIKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenerateApplicationAPIKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationIdentifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v Right
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Right(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rights = append(m.Rights, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIdentityserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v Right
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIdentityserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Right(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rights = append(m.Rights, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rights", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListApplicationAPIKeysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListApplicationAPIKeysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListApplicationAPIKeysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field APIKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.APIKeys = append(m.APIKeys, APIKey{})
			if err := m.APIKeys[len(m.APIKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateApplicationAPIKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateApplicationAPIKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateApplicationAPIKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationIdentifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v Right
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Right(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rights = append(m.Rights, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIdentityserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v Right
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIdentityserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Right(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rights = append(m.Rights, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rights", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveApplicationAPIKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveApplicationAPIKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveApplicationAPIKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationIdentifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetApplicationCollaboratorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetApplicationCollaboratorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetApplicationCollaboratorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationIdentifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collaborator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Collaborator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListApplicationCollaboratorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListApplicationCollaboratorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListApplicationCollaboratorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collaborators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collaborators = append(m.Collaborators, Collaborator{})
			if err := m.Collaborators[len(m.Collaborators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateGatewayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateGatewayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateGatewayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Gateway.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListGatewaysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListGatewaysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListGatewaysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateways", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateways = append(m.Gateways, Gateway{})
			if err := m.Gateways[len(m.Gateways)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGatewayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGatewayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGatewayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Gateway.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpdateMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenerateGatewayAPIKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenerateGatewayAPIKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenerateGatewayAPIKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GatewayIdentifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v Right
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Right(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rights = append(m.Rights, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIdentityserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v Right
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIdentityserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Right(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rights = append(m.Rights, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rights", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListGatewayAPIKeysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListGatewayAPIKeysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListGatewayAPIKeysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field APIKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.APIKeys = append(m.APIKeys, APIKey{})
			if err := m.APIKeys[len(m.APIKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGatewayAPIKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGatewayAPIKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGatewayAPIKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GatewayIdentifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v Right
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Right(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rights = append(m.Rights, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIdentityserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v Right
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIdentityserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Right(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rights = append(m.Rights, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rights", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveGatewayAPIKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveGatewayAPIKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveGatewayAPIKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GatewayIdentifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetGatewayCollaboratorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetGatewayCollaboratorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetGatewayCollaboratorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GatewayIdentifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collaborator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Collaborator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListGatewayCollaboratorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListGatewayCollaboratorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListGatewayCollaboratorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collaborators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collaborators = append(m.Collaborators, Collaborator{})
			if err := m.Collaborators[len(m.Collaborators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateClientRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateClientRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateClientRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Client.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListClientsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListClientsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListClientsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Clients = append(m.Clients, Client{})
			if err := m.Clients[len(m.Clients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateClientRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateClientRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateClientRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Client.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpdateMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIdentityserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthIdentityserver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipIdentityserver(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthIdentityserver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIdentityserver   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/identityserver.proto", fileDescriptorIdentityserver)
}
func init() {
	golang_proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/identityserver.proto", fileDescriptorIdentityserver)
}

var fileDescriptorIdentityserver = []byte{
	// 1767 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x59, 0x4d, 0x6c, 0x13, 0xd7,
	0x16, 0xf6, 0x4d, 0x20, 0x3f, 0x27, 0xff, 0x37, 0x21, 0x18, 0x13, 0x6e, 0xc2, 0x08, 0x50, 0x90,
	0xc0, 0x01, 0x23, 0x9e, 0xd0, 0xfb, 0x83, 0xc4, 0xe4, 0x59, 0xe6, 0x1f, 0x27, 0x81, 0x97, 0xa7,
	0x27, 0x45, 0x93, 0xf8, 0xc6, 0x99, 0x67, 0xc7, 0xe3, 0xe7, 0x19, 0x27, 0x4a, 0x17, 0x15, 0x8b,
	0xaa, 0x42, 0x5d, 0x75, 0x59, 0xf5, 0x47, 0x45, 0xea, 0x06, 0xa9, 0xaa, 0x84, 0xd4, 0x0d, 0xea,
	0x8a, 0x25, 0xdd, 0xd1, 0x1d, 0x2b, 0x84, 0xed, 0x0d, 0x4b, 0x96, 0x2c, 0xab, 0x99, 0x7b, 0xaf,
	0xe7, 0xf7, 0x3a, 0x0e, 0x31, 0x2d, 0xab, 0xd8, 0x33, 0xe7, 0x7c, 0xf7, 0x3b, 0x67, 0xce, 0x39,
	0x73, 0x3e, 0x07, 0x2e, 0xe5, 0x34, 0x73, 0xa3, 0xb2, 0x1a, 0x5f, 0xd3, 0x37, 0x67, 0x16, 0x37,
	0xe8, 0xe2, 0x86, 0x56, 0xcc, 0x19, 0xb7, 0xa8, 0xb9, 0xad, 0x97, 0xf3, 0x33, 0xa6, 0x59, 0x9c,
	0x51, 0x4b, 0xda, 0x8c, 0x96, 0xa5, 0x45, 0x53, 0x33, 0x77, 0x0c, 0x5a, 0xde, 0xa2, 0xe5, 0x78,
	0xa9, 0xac, 0x9b, 0x3a, 0xee, 0x32, 0xcd, 0x62, 0x7c, 0xeb, 0x42, 0xec, 0xac, 0x0b, 0x21, 0xa7,
	0xe7, 0xf4, 0x19, 0xfb, 0xf6, 0x6a, 0x65, 0xdd, 0xfe, 0x66, 0x7f, 0xb1, 0x3f, 0x31, 0xb7, 0xd8,
	0xc5, 0x56, 0x0e, 0x54, 0x4b, 0xa5, 0x82, 0xb6, 0xa6, 0x9a, 0x9a, 0x5e, 0xe4, 0x6e, 0xe7, 0x5a,
	0x71, 0x5b, 0x2b, 0x68, 0xb4, 0x68, 0x72, 0x8f, 0xbf, 0xb4, 0xe4, 0xa1, 0x17, 0x0a, 0xea, 0xaa,
	0x5e, 0x56, 0x4d, 0x9d, 0xc7, 0x15, 0x8b, 0xb7, 0x44, 0xb0, 0x62, 0x6e, 0xec, 0x85, 0x59, 0x59,
	0xcb, 0x6d, 0x98, 0xc6, 0x5e, 0x52, 0xc0, 0x72, 0xbe, 0xae, 0xd1, 0xb2, 0x70, 0x3b, 0xdf, 0x8a,
	0x5b, 0x4e, 0x35, 0xe9, 0xb6, 0xba, 0xb3, 0x97, 0x58, 0x2a, 0x86, 0x78, 0xa6, 0xb1, 0x44, 0x2b,
	0xf6, 0x06, 0x35, 0x4d, 0xeb, 0x3a, 0xf7, 0x39, 0x9a, 0xd3, 0xf5, 0x5c, 0x81, 0x3a, 0x8f, 0x9d,
	0x6e, 0x96, 0x4c, 0x41, 0x60, 0xca, 0x7f, 0x73, 0x5d, 0xa3, 0x85, 0xec, 0xca, 0xa6, 0x6a, 0xe4,
	0x99, 0x85, 0xb2, 0x0c, 0x38, 0x45, 0xcd, 0x05, 0x8e, 0x99, 0xa1, 0xff, 0xaf, 0x50, 0xc3, 0xc4,
	0x49, 0x18, 0x2a, 0x95, 0xf5, 0xff, 0xd1, 0x35, 0xab, 0x04, 0x6c, 0xf3, 0x28, 0x9a, 0x42, 0xd3,
	0x7d, 0x89, 0x58, 0x9c, 0x21, 0xc6, 0x05, 0x62, 0xfc, 0x5f, 0x16, 0xe2, 0x4d, 0xd5, 0xc8, 0x67,
	0x06, 0x1d, 0x17, 0xeb, 0xbb, 0xf2, 0x2d, 0x82, 0x43, 0x4b, 0xa5, 0xac, 0x6a, 0x52, 0x3f, 0xfc,
	0x15, 0xe8, 0x11, 0x51, 0x70, 0x5c, 0x12, 0x67, 0xe5, 0x1c, 0x4f, 0xf3, 0x5a, 0x5f, 0xb0, 0x6b,
	0x5d, 0x38, 0xce, 0x1d, 0x78, 0xfe, 0x6a, 0x32, 0x92, 0x69, 0x78, 0xe1, 0x59, 0xe8, 0xab, 0xd8,
	0xd0, 0x8c, 0x5c, 0xc7, 0x6e, 0xe4, 0x38, 0x00, 0x30, 0x27, 0x9b, 0xde, 0x3a, 0x8c, 0x24, 0xcb,
	0x54, 0x35, 0xe9, 0x92, 0x41, 0xcb, 0x82, 0xd9, 0x29, 0x38, 0x60, 0x3d, 0x0f, 0xce, 0xaa, 0x5f,
	0xb0, 0xb2, 0x4c, 0x38, 0x84, 0x7d, 0x1f, 0x9f, 0x86, 0x61, 0xad, 0xb8, 0xa5, 0x99, 0x76, 0x8f,
	0xac, 0x98, 0x7a, 0x9e, 0x16, 0x6d, 0x12, 0xbd, 0x99, 0x21, 0xe7, 0xfa, 0xa2, 0x75, 0x59, 0xf9,
	0x14, 0x46, 0x58, 0x16, 0xde, 0xe7, 0x9c, 0x36, 0xc4, 0x79, 0x19, 0x8e, 0x38, 0xe7, 0xdf, 0x51,
	0x0d, 0x63, 0x5b, 0x2f, 0x67, 0x05, 0x8f, 0x61, 0xe8, 0xd4, 0x0b, 0x59, 0x9b, 0x46, 0x6f, 0xc6,
	0xfa, 0x68, 0x5d, 0x29, 0xd2, 0x6d, 0x1e, 0x8c, 0xf5, 0x51, 0xb9, 0x07, 0x47, 0x52, 0xb4, 0x48,
	0xcb, 0x1c, 0x62, 0xf6, 0x4e, 0xfa, 0x3a, 0xdd, 0x11, 0x00, 0x18, 0x0e, 0x14, 0xd5, 0x4d, 0xca,
	0x11, 0xec, 0xcf, 0xf8, 0x24, 0x74, 0xb1, 0x86, 0x8b, 0x76, 0x4c, 0x75, 0x4e, 0x0f, 0x26, 0x06,
	0x44, 0x78, 0x19, 0xeb, 0x6a, 0x86, 0xdf, 0x54, 0x96, 0xe0, 0xf0, 0x0d, 0xcd, 0x30, 0x1d, 0x4c,
	0x23, 0x43, 0x8d, 0x92, 0x5e, 0x34, 0x28, 0xfe, 0x2b, 0xf4, 0xa8, 0x25, 0x6d, 0x25, 0x4f, 0x77,
	0xac, 0x02, 0xe9, 0x9c, 0xee, 0x4b, 0x0c, 0x0a, 0x0c, 0x66, 0x3a, 0x37, 0x64, 0xc5, 0x59, 0x7b,
	0x35, 0xd9, 0x2d, 0x5c, 0xbb, 0xd5, 0x92, 0x66, 0x7d, 0x50, 0x16, 0xe1, 0xb0, 0x13, 0x6f, 0xdb,
	0xc8, 0x9e, 0x85, 0xc3, 0x19, 0xba, 0xa9, 0x6f, 0xb5, 0x86, 0xaa, 0x9c, 0x83, 0xe8, 0x3d, 0xb5,
	0xa0, 0x09, 0x1a, 0xf3, 0x9b, 0xaa, 0x56, 0x10, 0xf6, 0x63, 0x70, 0x90, 0x15, 0x0c, 0x73, 0x60,
	0x5f, 0x94, 0xdb, 0x70, 0xcc, 0xca, 0xc6, 0x6c, 0xc5, 0xdc, 0xd0, 0xcb, 0xda, 0x27, 0x34, 0x9b,
	0xb4, 0xa7, 0xa9, 0x93, 0x93, 0x38, 0x74, 0xb3, 0x01, 0x1b, 0x48, 0x09, 0xb3, 0xe4, 0x8f, 0x5e,
	0x18, 0x29, 0xf7, 0x21, 0xca, 0xea, 0x7b, 0xd6, 0x99, 0xe6, 0x82, 0xc2, 0xdf, 0xa0, 0xcf, 0x35,
	0xe3, 0x79, 0x15, 0x8e, 0x36, 0x52, 0xec, 0xdc, 0xe2, 0xa0, 0x6e, 0x6b, 0x65, 0x19, 0xa2, 0x36,
	0x53, 0xe7, 0x92, 0x43, 0xf2, 0x1f, 0xd0, 0xef, 0x32, 0x15, 0x4c, 0x9b, 0x20, 0x7b, 0xcc, 0x95,
	0xaf, 0x11, 0x44, 0xd9, 0xc3, 0x6b, 0x33, 0xe9, 0x76, 0x34, 0xd2, 0x4f, 0x08, 0xa6, 0x44, 0x23,
	0xb8, 0x4e, 0xf3, 0x16, 0xc3, 0x2d, 0x18, 0x74, 0x1d, 0xbb, 0xa2, 0x65, 0x39, 0xcf, 0x63, 0x21,
	0x3c, 0xd3, 0x8d, 0x77, 0xcc, 0x5c, 0x8f, 0x75, 0xda, 0x8b, 0x57, 0x93, 0x28, 0x33, 0xa0, 0xba,
	0x0d, 0x1a, 0xc5, 0xd5, 0x11, 0x5a, 0xb2, 0x9d, 0xcd, 0x4a, 0xf6, 0xbf, 0x40, 0x7c, 0xcf, 0xa9,
	0x9d, 0x6d, 0xf6, 0x23, 0x02, 0x12, 0x78, 0x54, 0x1f, 0x6d, 0x2e, 0x3e, 0x43, 0x40, 0x58, 0xff,
	0xfe, 0x99, 0x6c, 0x95, 0x9f, 0x11, 0x1c, 0x5f, 0xa0, 0xee, 0x47, 0x92, 0x74, 0x6d, 0x40, 0x1f,
	0x8a, 0xc9, 0x3f, 0xa1, 0xdf, 0xbd, 0x68, 0xf1, 0xe2, 0x1f, 0x6b, 0x8c, 0x0f, 0xd7, 0x3d, 0xd1,
	0x95, 0x6e, 0x7b, 0x65, 0x03, 0x4e, 0xf8, 0x0a, 0xc9, 0xed, 0xe2, 0x94, 0xd3, 0x15, 0x18, 0x70,
	0xfb, 0x89, 0x9a, 0x6a, 0x76, 0x90, 0xd7, 0x41, 0x49, 0xc1, 0x18, 0x9b, 0x59, 0x29, 0xb6, 0x47,
	0x89, 0x8c, 0xcc, 0x40, 0x37, 0xdf, 0xac, 0x78, 0x2a, 0x86, 0x04, 0x26, 0x37, 0x14, 0xc3, 0x8f,
	0x5b, 0x29, 0x69, 0x18, 0xb3, 0x28, 0xf3, 0xbb, 0x0e, 0xc5, 0xf3, 0xd0, 0xc3, 0x4d, 0x04, 0x3b,
	0x09, 0x52, 0xc3, 0x4c, 0xf9, 0x02, 0xc1, 0x18, 0x2b, 0xf4, 0x7d, 0x92, 0x6a, 0xc7, 0x0c, 0xfa,
	0x0e, 0xc1, 0x84, 0x98, 0x41, 0xfc, 0x14, 0x6f, 0x15, 0xcf, 0x01, 0xf0, 0xe3, 0x9c, 0xba, 0x39,
	0xe2, 0xe3, 0x15, 0x5a, 0x33, 0xbd, 0x39, 0x71, 0x73, 0x3f, 0x7d, 0xf6, 0x6f, 0x88, 0xb9, 0xf2,
	0xde, 0xce, 0x79, 0xf3, 0x0d, 0x82, 0x98, 0xe7, 0x31, 0x7c, 0x54, 0x71, 0x9b, 0x10, 0x63, 0xe3,
	0xe5, 0x8f, 0x24, 0xa7, 0xfc, 0x80, 0xe0, 0xd8, 0x02, 0x15, 0xd9, 0x0e, 0x1b, 0x25, 0xed, 0x38,
	0x79, 0xbf, 0xe3, 0x23, 0x0b, 0x53, 0xae, 0x9a, 0xf8, 0x50, 0xa3, 0x23, 0x09, 0xa3, 0x6c, 0x74,
	0xb0, 0x6d, 0x48, 0x24, 0xe0, 0x0c, 0x74, 0xb1, 0x85, 0x88, 0x07, 0x1f, 0xbe, 0x34, 0x71, 0x1b,
	0x65, 0x1e, 0x46, 0x2d, 0xaa, 0xfb, 0x5d, 0xbd, 0x3e, 0x47, 0x30, 0xca, 0x6a, 0x75, 0x1f, 0x64,
	0xda, 0x30, 0x2e, 0x12, 0xf7, 0xe1, 0x60, 0xca, 0xdc, 0x4e, 0x95, 0xf1, 0x2d, 0x18, 0xb9, 0x53,
	0x29, 0x14, 0x92, 0x7a, 0x71, 0x5d, 0xcb, 0x55, 0xca, 0x6c, 0x27, 0x92, 0x17, 0x42, 0x6c, 0xc2,
	0x77, 0xcb, 0xe3, 0x78, 0x0e, 0x25, 0x1e, 0x21, 0x80, 0xb4, 0x21, 0xe4, 0x19, 0x4e, 0x43, 0x9f,
	0x4b, 0x45, 0xe2, 0x58, 0xc3, 0x3b, 0x20, 0x2d, 0x63, 0xbb, 0x28, 0x3d, 0x9c, 0x82, 0x41, 0xaf,
	0x68, 0xc4, 0x8d, 0xd7, 0x5e, 0xa8, 0x98, 0x8c, 0x8d, 0x07, 0x32, 0x32, 0x6f, 0x29, 0xe0, 0xc4,
	0x2f, 0xdd, 0xd0, 0x95, 0x36, 0xac, 0xed, 0x1b, 0x5f, 0x06, 0x70, 0xa4, 0x9e, 0x13, 0x76, 0x40,
	0xfe, 0xc9, 0xb0, 0xac, 0x51, 0x9f, 0xa2, 0xb6, 0x52, 0xc1, 0xe3, 0x6e, 0xad, 0xe6, 0xca, 0x98,
	0x47, 0xc3, 0x59, 0x27, 0x3a, 0x22, 0xc4, 0x39, 0x31, 0x20, 0x04, 0xa5, 0x27, 0xde, 0x06, 0x1c,
	0x54, 0x6d, 0xf8, 0x78, 0x10, 0xc8, 0xa7, 0xe8, 0xa4, 0x80, 0x7f, 0x07, 0xb8, 0x4a, 0x0b, 0x94,
	0x33, 0x92, 0x58, 0x49, 0xbd, 0x53, 0x80, 0x83, 0x1a, 0xd0, 0xa1, 0x23, 0xd5, 0x87, 0x31, 0xdf,
	0x80, 0xc7, 0xd7, 0x60, 0xc8, 0x27, 0xfa, 0xa4, 0x5c, 0x26, 0x85, 0xab, 0x4c, 0x25, 0x5e, 0x87,
	0x61, 0xbf, 0xd2, 0xc3, 0x93, 0xc1, 0x0c, 0x79, 0x09, 0xc9, 0x22, 0xbc, 0x0e, 0xc3, 0x7e, 0x81,
	0xe7, 0x80, 0x49, 0xa4, 0x9f, 0x14, 0xec, 0x26, 0x8c, 0x04, 0xe4, 0x1f, 0x9e, 0x12, 0x68, 0x32,
	0x65, 0x28, 0x85, 0xbb, 0x61, 0xbd, 0x5d, 0x6c, 0x93, 0x86, 0x0b, 0xc7, 0xb0, 0xda, 0x78, 0xaf,
	0xcf, 0xf2, 0x1e, 0x1c, 0x0a, 0x55, 0x9a, 0x52, 0xa0, 0x93, 0xee, 0x07, 0x21, 0x17, 0xa8, 0xd7,
	0x60, 0x3c, 0x43, 0xb7, 0xf4, 0x3c, 0xf5, 0x9b, 0xe0, 0xa8, 0x77, 0xce, 0xb9, 0xba, 0x46, 0xd6,
	0xbc, 0xbf, 0x76, 0xc3, 0x40, 0xda, 0x70, 0x6d, 0x9c, 0x56, 0x4a, 0x03, 0x72, 0xd6, 0x49, 0xa9,
	0x4c, 0xe9, 0x4a, 0x93, 0x70, 0x15, 0x06, 0x53, 0x9e, 0x45, 0x1c, 0x37, 0xdf, 0xae, 0x63, 0x61,
	0x42, 0x13, 0xdf, 0x80, 0x61, 0xbf, 0x14, 0x96, 0x66, 0x71, 0xca, 0x93, 0xc5, 0x30, 0xf1, 0x7c,
	0x53, 0xfc, 0x52, 0x14, 0x1a, 0xa2, 0x4c, 0x17, 0x4b, 0x43, 0xbc, 0x06, 0x23, 0xac, 0xe3, 0xf7,
	0x10, 0xa5, 0x0c, 0x6b, 0xc9, 0xf9, 0x0d, 0x28, 0x20, 0xa0, 0xf0, 0xb4, 0x7f, 0x0c, 0xc8, 0x34,
	0x56, 0x60, 0x1a, 0xac, 0xc0, 0x78, 0xb8, 0x44, 0xdd, 0x8d, 0xe7, 0x29, 0x49, 0x32, 0xfd, 0x23,
	0x62, 0x59, 0xfc, 0x18, 0x14, 0x64, 0x7d, 0x4a, 0x9a, 0xd8, 0xd6, 0x7a, 0x7c, 0x59, 0xfc, 0x22,
	0xd4, 0x04, 0xba, 0xb9, 0xe4, 0x94, 0x42, 0xaf, 0x40, 0x4c, 0xae, 0x12, 0xf1, 0x69, 0x81, 0xbe,
	0xab, 0x92, 0x94, 0x1e, 0x90, 0x87, 0x89, 0x66, 0x8a, 0x6e, 0xb7, 0xec, 0x9f, 0x91, 0x64, 0x3f,
	0x74, 0xb7, 0x4b, 0x54, 0xbb, 0xa0, 0x37, 0x6d, 0xf0, 0x45, 0x02, 0xcf, 0xc3, 0x80, 0x47, 0xe2,
	0xe1, 0x09, 0x6f, 0x0f, 0x7b, 0x45, 0x96, 0x34, 0x82, 0x4b, 0x00, 0xa9, 0xc6, 0xe6, 0xdb, 0x6c,
	0x93, 0xf1, 0x8b, 0x32, 0x7c, 0x15, 0xfa, 0xdd, 0xd2, 0x50, 0xda, 0xaf, 0x13, 0xee, 0x20, 0x03,
	0x42, 0x72, 0x1e, 0x06, 0x3c, 0x6a, 0xc4, 0x09, 0x23, 0x4c, 0x2b, 0x4a, 0xc3, 0x98, 0x83, 0x01,
	0xd6, 0xa3, 0x2d, 0x44, 0x22, 0x7f, 0xd9, 0x1c, 0x0a, 0x95, 0x84, 0xf8, 0x84, 0xbf, 0x2f, 0xc3,
	0xc4, 0x49, 0xa0, 0x27, 0x17, 0x00, 0x07, 0x25, 0x5c, 0x33, 0x5e, 0x4a, 0x48, 0xa2, 0xfc, 0x7d,
	0x78, 0x57, 0x2c, 0xc4, 0x5e, 0x86, 0x4a, 0x68, 0xd2, 0x5a, 0x6b, 0x92, 0xbb, 0x30, 0x1a, 0x22,
	0xb9, 0x1c, 0x48, 0xb9, 0x1e, 0x93, 0x42, 0xde, 0x87, 0xf1, 0x70, 0x39, 0x85, 0x4f, 0xba, 0x7a,
	0x4e, 0x2e, 0xb7, 0x9a, 0x34, 0x74, 0x54, 0x26, 0x81, 0x9a, 0x65, 0x76, 0x3a, 0x24, 0xb3, 0xe1,
	0x3d, 0xf6, 0x5b, 0x07, 0xf4, 0xa4, 0x0d, 0xfe, 0xba, 0x4d, 0x42, 0xbf, 0x5b, 0x0a, 0xe1, 0xa3,
	0xde, 0x0e, 0xf3, 0x68, 0x12, 0x29, 0xe5, 0x8b, 0xd0, 0x9b, 0xa2, 0xe6, 0xae, 0x2f, 0x70, 0x9f,
	0x84, 0xc1, 0x73, 0xd0, 0xe7, 0x52, 0x50, 0xd2, 0xe6, 0x3a, 0xea, 0x8e, 0xcc, 0xbf, 0x48, 0x24,
	0xa1, 0xdf, 0xad, 0x9e, 0x1c, 0xfe, 0x21, 0x9a, 0x4a, 0xca, 0xff, 0x0a, 0xf4, 0xb3, 0xce, 0x7a,
	0xdf, 0x1d, 0x64, 0xee, 0x7b, 0xf4, 0xbc, 0x4a, 0xd0, 0x8b, 0x2a, 0x41, 0x2f, 0xab, 0x04, 0xbd,
	0xae, 0x12, 0xf4, 0xa6, 0x4a, 0x22, 0x6f, 0xab, 0x24, 0xf2, 0xae, 0x4a, 0xd0, 0x83, 0x1a, 0x89,
	0x3c, 0xac, 0x91, 0xc8, 0xe3, 0x1a, 0x41, 0x4f, 0x6a, 0x24, 0xf2, 0xb4, 0x46, 0xd0, 0xb3, 0x1a,
	0x41, 0xcf, 0x6b, 0x04, 0xbd, 0xa8, 0x11, 0xf4, 0xb2, 0x46, 0x22, 0xaf, 0x6b, 0x04, 0xbd, 0xa9,
	0x91, 0xc8, 0xdb, 0x1a, 0x41, 0xef, 0x6a, 0x24, 0xf2, 0xa0, 0x4e, 0x22, 0x0f, 0xeb, 0x04, 0x7d,
	0x59, 0x27, 0x91, 0xaf, 0xea, 0x04, 0x3d, 0xaa, 0x93, 0xc8, 0xe3, 0x3a, 0x89, 0x3c, 0xa9, 0x13,
	0xf4, 0xb4, 0x4e, 0xd0, 0xb3, 0x3a, 0x41, 0xff, 0x39, 0xbd, 0xdb, 0x3f, 0x01, 0x4b, 0xf9, 0x9c,
	0xf5, 0xb7, 0xb4, 0xba, 0xda, 0x65, 0x33, 0xbe, 0xf0, 0x7b, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5b,
	0x49, 0xe7, 0x23, 0x46, 0x1e, 0x00, 0x00,
}
