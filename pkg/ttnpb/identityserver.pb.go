// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/TheThingsNetwork/ttn/api/identityserver.proto

package ttnpb

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/types"
import google_protobuf3 "github.com/gogo/protobuf/types"
import google_protobuf4 "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/types"

import time "time"

import context "context"
import grpc "google.golang.org/grpc"

import types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

type PullConfigurationRequest struct {
	// gateway_ids are the identifiers of the gateway to be fetched in the stream.
	GatewayIdentifiers `protobuf:"bytes,1,opt,name=gateway_ids,json=gatewayIds,embedded=gateway_ids" json:"gateway_ids"`
	// projection_mask is the symbolic set of fields that will be filtered in the
	// response. If empty all fields will be returned.
	ProjectionMask *google_protobuf4.FieldMask `protobuf:"bytes,2,opt,name=projection_mask,json=projectionMask" json:"projection_mask,omitempty"`
}

func (m *PullConfigurationRequest) Reset()         { *m = PullConfigurationRequest{} }
func (m *PullConfigurationRequest) String() string { return proto.CompactTextString(m) }
func (*PullConfigurationRequest) ProtoMessage()    {}
func (*PullConfigurationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{0}
}

func (m *PullConfigurationRequest) GetProjectionMask() *google_protobuf4.FieldMask {
	if m != nil {
		return m.ProjectionMask
	}
	return nil
}

type IdentityServerSettings struct {
	// updated_at is the last time the settings were updated.
	// This is a read-only field.
	UpdatedAt time.Time `protobuf:"bytes,1,opt,name=updated_at,json=updatedAt,stdtime" json:"updated_at" name:"-"`
	// blacklisted_ids is the list of IDs that are not allowed to use in the network.
	BlacklistedIDs []string `protobuf:"bytes,2,rep,name=blacklisted_ids,json=blacklistedIds" json:"blacklisted_ids,omitempty" name:"blacklisted-ids" description:"IDs that can not be registered in the network."`
	// user_registration are the settings used to configure the user registration flow.
	IdentityServerSettings_UserRegistrationFlow `protobuf:"bytes,3,opt,name=user_registration,json=userRegistration,embedded=user_registration" json:"user_registration" name:"user-registration"`
	// validation_token_ttl denotes the time an account validation token is valid
	// after being issued.
	ValidationTokenTTL time.Duration `protobuf:"bytes,4,opt,name=validation_token_ttl,json=validationTokenTtl,stdduration" json:"validation_token_ttl" name:"validation-token-ttl" description:"Validity of confirmation emails."`
	// allowed_emails is a list of globs to restrict emails to. If empty all emails are valid.
	AllowedEmails []string `protobuf:"bytes,5,rep,name=allowed_emails,json=allowedEmails" json:"allowed_emails,omitempty" name:"allowed-emails" description:"Allowed email address globs, if any."`
	// invitation_token_ttl denotes the time an invitation token is valid after being issued.
	InvitationTokenTTL time.Duration `protobuf:"bytes,6,opt,name=invitation_token_ttl,json=invitationTokenTtl,stdduration" json:"invitation_token_ttl" name:"invitation-token-ttl" description:"Validity of invitation emails."`
}

func (m *IdentityServerSettings) Reset()         { *m = IdentityServerSettings{} }
func (m *IdentityServerSettings) String() string { return proto.CompactTextString(m) }
func (*IdentityServerSettings) ProtoMessage()    {}
func (*IdentityServerSettings) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{1}
}

func (m *IdentityServerSettings) GetUpdatedAt() time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return time.Time{}
}

func (m *IdentityServerSettings) GetBlacklistedIDs() []string {
	if m != nil {
		return m.BlacklistedIDs
	}
	return nil
}

func (m *IdentityServerSettings) GetValidationTokenTTL() time.Duration {
	if m != nil {
		return m.ValidationTokenTTL
	}
	return 0
}

func (m *IdentityServerSettings) GetAllowedEmails() []string {
	if m != nil {
		return m.AllowedEmails
	}
	return nil
}

func (m *IdentityServerSettings) GetInvitationTokenTTL() time.Duration {
	if m != nil {
		return m.InvitationTokenTTL
	}
	return 0
}

type IdentityServerSettings_UserRegistrationFlow struct {
	// skip_validation denotes whether if users need to validate their email
	// account after registration or this step is skipped.
	SkipValidation bool `protobuf:"varint,1,opt,name=skip_validation,json=skipValidation,proto3" json:"skip_validation,omitempty" name:"skip-validation" description:"Do not require email validation for new users or modified emails."`
	// invitation_only denotes whether people can register themselves an user
	// account or they need to be granted an invitation to do so.
	InvitationOnly bool `protobuf:"varint,2,opt,name=invitation_only,json=invitationOnly,proto3" json:"invitation_only,omitempty" name:"invitation-only" description:"Require an invitation for new users."`
	// admin_approval denotes whether or not admins need to validate user accounts
	// after they are registered.
	AdminApproval bool `protobuf:"varint,3,opt,name=admin_approval,json=adminApproval,proto3" json:"admin_approval,omitempty" name:"admin-approval" description:"Require admin confirmation for new users."`
}

func (m *IdentityServerSettings_UserRegistrationFlow) Reset() {
	*m = IdentityServerSettings_UserRegistrationFlow{}
}
func (m *IdentityServerSettings_UserRegistrationFlow) String() string {
	return proto.CompactTextString(m)
}
func (*IdentityServerSettings_UserRegistrationFlow) ProtoMessage() {}
func (*IdentityServerSettings_UserRegistrationFlow) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{1, 0}
}

func (m *IdentityServerSettings_UserRegistrationFlow) GetSkipValidation() bool {
	if m != nil {
		return m.SkipValidation
	}
	return false
}

func (m *IdentityServerSettings_UserRegistrationFlow) GetInvitationOnly() bool {
	if m != nil {
		return m.InvitationOnly
	}
	return false
}

func (m *IdentityServerSettings_UserRegistrationFlow) GetAdminApproval() bool {
	if m != nil {
		return m.AdminApproval
	}
	return false
}

type UpdateSettingsRequest struct {
	// settings are the settings to be updated.
	Settings IdentityServerSettings `protobuf:"bytes,1,opt,name=settings" json:"settings"`
	// update_mask is the symbolic set of fields that will be affected in the update
	// operation. Fields not included in the update_mask are not changed and ignored
	// in the request. Must be non-empty.
	UpdateMask google_protobuf4.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask" json:"update_mask"`
}

func (m *UpdateSettingsRequest) Reset()         { *m = UpdateSettingsRequest{} }
func (m *UpdateSettingsRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateSettingsRequest) ProtoMessage()    {}
func (*UpdateSettingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{2}
}

func (m *UpdateSettingsRequest) GetSettings() IdentityServerSettings {
	if m != nil {
		return m.Settings
	}
	return IdentityServerSettings{}
}

func (m *UpdateSettingsRequest) GetUpdateMask() google_protobuf4.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return google_protobuf4.FieldMask{}
}

type ResetUserPasswordResponse struct {
	// password is the user's new auto-generated password.
	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *ResetUserPasswordResponse) Reset()         { *m = ResetUserPasswordResponse{} }
func (m *ResetUserPasswordResponse) String() string { return proto.CompactTextString(m) }
func (*ResetUserPasswordResponse) ProtoMessage()    {}
func (*ResetUserPasswordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{3}
}

func (m *ResetUserPasswordResponse) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type SendInvitationRequest struct {
	// email is the email the invitation will be sent at.
	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (m *SendInvitationRequest) Reset()         { *m = SendInvitationRequest{} }
func (m *SendInvitationRequest) String() string { return proto.CompactTextString(m) }
func (*SendInvitationRequest) ProtoMessage()    {}
func (*SendInvitationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{4}
}

func (m *SendInvitationRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type ListInvitationsResponse struct {
	// invitation is the list of sent invitations.
	Invitations []*ListInvitationsResponse_Invitation `protobuf:"bytes,1,rep,name=invitations" json:"invitations,omitempty"`
}

func (m *ListInvitationsResponse) Reset()         { *m = ListInvitationsResponse{} }
func (m *ListInvitationsResponse) String() string { return proto.CompactTextString(m) }
func (*ListInvitationsResponse) ProtoMessage()    {}
func (*ListInvitationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{5}
}

func (m *ListInvitationsResponse) GetInvitations() []*ListInvitationsResponse_Invitation {
	if m != nil {
		return m.Invitations
	}
	return nil
}

type ListInvitationsResponse_Invitation struct {
	// email is the email the invitation was sent at.
	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	// issued_at denotes when the invitation was issued.
	IssuedAt time.Time `protobuf:"bytes,2,opt,name=issued_at,json=issuedAt,stdtime" json:"issued_at"`
	// expires_at denotes the time the invitation will expire.
	// This timestamp is based on the setting `InvitationTokenTTL` and is set
	// on the time the invitation is issued.
	ExpiresAt time.Time `protobuf:"bytes,3,opt,name=expires_at,json=expiresAt,stdtime" json:"expires_at"`
}

func (m *ListInvitationsResponse_Invitation) Reset()         { *m = ListInvitationsResponse_Invitation{} }
func (m *ListInvitationsResponse_Invitation) String() string { return proto.CompactTextString(m) }
func (*ListInvitationsResponse_Invitation) ProtoMessage()    {}
func (*ListInvitationsResponse_Invitation) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{5, 0}
}

func (m *ListInvitationsResponse_Invitation) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *ListInvitationsResponse_Invitation) GetIssuedAt() time.Time {
	if m != nil {
		return m.IssuedAt
	}
	return time.Time{}
}

func (m *ListInvitationsResponse_Invitation) GetExpiresAt() time.Time {
	if m != nil {
		return m.ExpiresAt
	}
	return time.Time{}
}

type DeleteInvitationRequest struct {
	// email is the email the invitation was sent at.
	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (m *DeleteInvitationRequest) Reset()         { *m = DeleteInvitationRequest{} }
func (m *DeleteInvitationRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteInvitationRequest) ProtoMessage()    {}
func (*DeleteInvitationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{6}
}

func (m *DeleteInvitationRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type ListUsersRequest struct {
	// filter is a optional field to filter the response by the reviewing state.
	*ListUsersRequest_FilterState `protobuf:"bytes,1,opt,name=filter,embedded=filter" json:"filter,omitempty"`
}

func (m *ListUsersRequest) Reset()                    { *m = ListUsersRequest{} }
func (m *ListUsersRequest) String() string            { return proto.CompactTextString(m) }
func (*ListUsersRequest) ProtoMessage()               {}
func (*ListUsersRequest) Descriptor() ([]byte, []int) { return fileDescriptorIdentityserver, []int{7} }

type ListUsersRequest_FilterState struct {
	State ReviewingState `protobuf:"varint,1,opt,name=state,proto3,enum=ttn.lorawan.v3.ReviewingState" json:"state,omitempty"`
}

func (m *ListUsersRequest_FilterState) Reset()         { *m = ListUsersRequest_FilterState{} }
func (m *ListUsersRequest_FilterState) String() string { return proto.CompactTextString(m) }
func (*ListUsersRequest_FilterState) ProtoMessage()    {}
func (*ListUsersRequest_FilterState) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{7, 0}
}

func (m *ListUsersRequest_FilterState) GetState() ReviewingState {
	if m != nil {
		return m.State
	}
	return STATE_PENDING
}

type ListUsersResponse struct {
	Users []*User `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
}

func (m *ListUsersResponse) Reset()                    { *m = ListUsersResponse{} }
func (m *ListUsersResponse) String() string            { return proto.CompactTextString(m) }
func (*ListUsersResponse) ProtoMessage()               {}
func (*ListUsersResponse) Descriptor() ([]byte, []int) { return fileDescriptorIdentityserver, []int{8} }

func (m *ListUsersResponse) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

type ListClientsRequest struct {
	// filter_state is a optional field to filter the response by the reviewing state.
	*ListClientsRequest_FilterState `protobuf:"bytes,1,opt,name=filter_state,json=filterState,embedded=filter_state" json:"filter_state,omitempty"`
}

func (m *ListClientsRequest) Reset()                    { *m = ListClientsRequest{} }
func (m *ListClientsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListClientsRequest) ProtoMessage()               {}
func (*ListClientsRequest) Descriptor() ([]byte, []int) { return fileDescriptorIdentityserver, []int{9} }

type ListClientsRequest_FilterState struct {
	State ReviewingState `protobuf:"varint,1,opt,name=state,proto3,enum=ttn.lorawan.v3.ReviewingState" json:"state,omitempty"`
}

func (m *ListClientsRequest_FilterState) Reset()         { *m = ListClientsRequest_FilterState{} }
func (m *ListClientsRequest_FilterState) String() string { return proto.CompactTextString(m) }
func (*ListClientsRequest_FilterState) ProtoMessage()    {}
func (*ListClientsRequest_FilterState) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{9, 0}
}

func (m *ListClientsRequest_FilterState) GetState() ReviewingState {
	if m != nil {
		return m.State
	}
	return STATE_PENDING
}

type CreateUserRequest struct {
	// user is the user to be created.
	User User `protobuf:"bytes,1,opt,name=user" json:"user"`
	// invitation_token is the token provided within the registration process to
	// be able to create an user account.
	// This token can be issued by an admin and is only required when the Identity Server
	// registration mode is set to "invitation only", otherwise it will be ignored.
	InvitationToken string `protobuf:"bytes,2,opt,name=invitation_token,json=invitationToken,proto3" json:"invitation_token,omitempty"`
}

func (m *CreateUserRequest) Reset()                    { *m = CreateUserRequest{} }
func (m *CreateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateUserRequest) ProtoMessage()               {}
func (*CreateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptorIdentityserver, []int{10} }

func (m *CreateUserRequest) GetUser() User {
	if m != nil {
		return m.User
	}
	return User{}
}

func (m *CreateUserRequest) GetInvitationToken() string {
	if m != nil {
		return m.InvitationToken
	}
	return ""
}

type UpdateUserRequest struct {
	// User is the user to be updated.
	User User `protobuf:"bytes,1,opt,name=user" json:"user"`
	// update_mask is the symbolic set of fields that will be affected in the update
	// operation. Fields not included in the update_mask are not changed and ignored
	// in the request. Must be non-empty.
	UpdateMask google_protobuf4.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask" json:"update_mask"`
}

func (m *UpdateUserRequest) Reset()                    { *m = UpdateUserRequest{} }
func (m *UpdateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserRequest) ProtoMessage()               {}
func (*UpdateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptorIdentityserver, []int{11} }

func (m *UpdateUserRequest) GetUser() User {
	if m != nil {
		return m.User
	}
	return User{}
}

func (m *UpdateUserRequest) GetUpdateMask() google_protobuf4.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return google_protobuf4.FieldMask{}
}

type UpdateUserPasswordRequest struct {
	// old is the user's old password.
	Old string `protobuf:"bytes,1,opt,name=old,proto3" json:"old,omitempty"`
	// new is the user's new password.
	New string `protobuf:"bytes,2,opt,name=new,proto3" json:"new,omitempty"`
}

func (m *UpdateUserPasswordRequest) Reset()         { *m = UpdateUserPasswordRequest{} }
func (m *UpdateUserPasswordRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateUserPasswordRequest) ProtoMessage()    {}
func (*UpdateUserPasswordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{12}
}

func (m *UpdateUserPasswordRequest) GetOld() string {
	if m != nil {
		return m.Old
	}
	return ""
}

func (m *UpdateUserPasswordRequest) GetNew() string {
	if m != nil {
		return m.New
	}
	return ""
}

type GenerateUserAPIKeyRequest struct {
	// name is the name of the API key to be generated.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// rights the are rights the generated API key will bear.
	Rights []Right `protobuf:"varint,2,rep,packed,name=rights,enum=ttn.lorawan.v3.Right" json:"rights,omitempty"`
}

func (m *GenerateUserAPIKeyRequest) Reset()         { *m = GenerateUserAPIKeyRequest{} }
func (m *GenerateUserAPIKeyRequest) String() string { return proto.CompactTextString(m) }
func (*GenerateUserAPIKeyRequest) ProtoMessage()    {}
func (*GenerateUserAPIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{13}
}

func (m *GenerateUserAPIKeyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GenerateUserAPIKeyRequest) GetRights() []Right {
	if m != nil {
		return m.Rights
	}
	return nil
}

type ListUserAPIKeysResponse struct {
	// api_keys are the API keys that the user has currently registered.
	APIKeys []*APIKey `protobuf:"bytes,1,rep,name=api_keys,json=apiKeys" json:"api_keys,omitempty"`
}

func (m *ListUserAPIKeysResponse) Reset()         { *m = ListUserAPIKeysResponse{} }
func (m *ListUserAPIKeysResponse) String() string { return proto.CompactTextString(m) }
func (*ListUserAPIKeysResponse) ProtoMessage()    {}
func (*ListUserAPIKeysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{14}
}

func (m *ListUserAPIKeysResponse) GetAPIKeys() []*APIKey {
	if m != nil {
		return m.APIKeys
	}
	return nil
}

type UpdateUserAPIKeyRequest struct {
	// name is the name of the API key to be generated.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// rights the are rights the generated API key will bear.
	Rights []Right `protobuf:"varint,2,rep,packed,name=rights,enum=ttn.lorawan.v3.Right" json:"rights,omitempty"`
}

func (m *UpdateUserAPIKeyRequest) Reset()         { *m = UpdateUserAPIKeyRequest{} }
func (m *UpdateUserAPIKeyRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateUserAPIKeyRequest) ProtoMessage()    {}
func (*UpdateUserAPIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{15}
}

func (m *UpdateUserAPIKeyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateUserAPIKeyRequest) GetRights() []Right {
	if m != nil {
		return m.Rights
	}
	return nil
}

type RemoveUserAPIKeyRequest struct {
	// name is the name of the user API key to be removed.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *RemoveUserAPIKeyRequest) Reset()         { *m = RemoveUserAPIKeyRequest{} }
func (m *RemoveUserAPIKeyRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveUserAPIKeyRequest) ProtoMessage()    {}
func (*RemoveUserAPIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{16}
}

func (m *RemoveUserAPIKeyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ValidateUserEmailRequest struct {
	// token is the token sent to the user's email address in order to validate it.
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *ValidateUserEmailRequest) Reset()         { *m = ValidateUserEmailRequest{} }
func (m *ValidateUserEmailRequest) String() string { return proto.CompactTextString(m) }
func (*ValidateUserEmailRequest) ProtoMessage()    {}
func (*ValidateUserEmailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{17}
}

func (m *ValidateUserEmailRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type ListAuthorizedClientsResponse struct {
	// clients is the list of clients an user has currently authorized.
	Clients []*Client `protobuf:"bytes,1,rep,name=clients" json:"clients,omitempty"`
}

func (m *ListAuthorizedClientsResponse) Reset()         { *m = ListAuthorizedClientsResponse{} }
func (m *ListAuthorizedClientsResponse) String() string { return proto.CompactTextString(m) }
func (*ListAuthorizedClientsResponse) ProtoMessage()    {}
func (*ListAuthorizedClientsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{18}
}

func (m *ListAuthorizedClientsResponse) GetClients() []*Client {
	if m != nil {
		return m.Clients
	}
	return nil
}

type CreateApplicationRequest struct {
	// application is the application to be created.
	Application Application `protobuf:"bytes,1,opt,name=application" json:"application"`
	// organization_ids is the optional organization's ID that creates the application.
	OrganizationIdentifiers `protobuf:"bytes,2,opt,name=organization_ids,json=organizationIds,embedded=organization_ids" json:"organization_ids"`
}

func (m *CreateApplicationRequest) Reset()         { *m = CreateApplicationRequest{} }
func (m *CreateApplicationRequest) String() string { return proto.CompactTextString(m) }
func (*CreateApplicationRequest) ProtoMessage()    {}
func (*CreateApplicationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{19}
}

func (m *CreateApplicationRequest) GetApplication() Application {
	if m != nil {
		return m.Application
	}
	return Application{}
}

type ListApplicationsRequest struct {
	// organization_ids is the optional organization's ID whose applications will be
	// listed of.
	OrganizationIdentifiers `protobuf:"bytes,1,opt,name=organization_ids,json=organizationIds,embedded=organization_ids" json:"organization_ids"`
}

func (m *ListApplicationsRequest) Reset()         { *m = ListApplicationsRequest{} }
func (m *ListApplicationsRequest) String() string { return proto.CompactTextString(m) }
func (*ListApplicationsRequest) ProtoMessage()    {}
func (*ListApplicationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{20}
}

type ListApplicationsResponse struct {
	// applications is the list of applications the authenticated user has access to.
	Applications []*Application `protobuf:"bytes,1,rep,name=applications" json:"applications,omitempty"`
}

func (m *ListApplicationsResponse) Reset()         { *m = ListApplicationsResponse{} }
func (m *ListApplicationsResponse) String() string { return proto.CompactTextString(m) }
func (*ListApplicationsResponse) ProtoMessage()    {}
func (*ListApplicationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{21}
}

func (m *ListApplicationsResponse) GetApplications() []*Application {
	if m != nil {
		return m.Applications
	}
	return nil
}

type UpdateApplicationRequest struct {
	// application is the application to be updated.
	Application Application `protobuf:"bytes,1,opt,name=application" json:"application"`
	// update_mask is the set of field paths that will be affected in the update
	// operation. Fields not included in the update_mask are not changed and ignored
	// in the request. Must be non-empty.
	UpdateMask google_protobuf4.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask" json:"update_mask"`
}

func (m *UpdateApplicationRequest) Reset()         { *m = UpdateApplicationRequest{} }
func (m *UpdateApplicationRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateApplicationRequest) ProtoMessage()    {}
func (*UpdateApplicationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{22}
}

func (m *UpdateApplicationRequest) GetApplication() Application {
	if m != nil {
		return m.Application
	}
	return Application{}
}

func (m *UpdateApplicationRequest) GetUpdateMask() google_protobuf4.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return google_protobuf4.FieldMask{}
}

type GenerateApplicationAPIKeyRequest struct {
	// application_ids is the application's ID which API key will be added to.
	ApplicationIdentifiers `protobuf:"bytes,1,opt,name=application_ids,json=applicationIds,embedded=application_ids" json:"application_ids"`
	// name is the name of the API key to be generated.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// rights the are rights the generated API key will bear.
	Rights []Right `protobuf:"varint,3,rep,packed,name=rights,enum=ttn.lorawan.v3.Right" json:"rights,omitempty"`
}

func (m *GenerateApplicationAPIKeyRequest) Reset()         { *m = GenerateApplicationAPIKeyRequest{} }
func (m *GenerateApplicationAPIKeyRequest) String() string { return proto.CompactTextString(m) }
func (*GenerateApplicationAPIKeyRequest) ProtoMessage()    {}
func (*GenerateApplicationAPIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{23}
}

func (m *GenerateApplicationAPIKeyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GenerateApplicationAPIKeyRequest) GetRights() []Right {
	if m != nil {
		return m.Rights
	}
	return nil
}

type ListApplicationAPIKeysResponse struct {
	// api_keys are the API keys that the application has currently registered.
	APIKeys []*APIKey `protobuf:"bytes,1,rep,name=api_keys,json=apiKeys" json:"api_keys,omitempty"`
}

func (m *ListApplicationAPIKeysResponse) Reset()         { *m = ListApplicationAPIKeysResponse{} }
func (m *ListApplicationAPIKeysResponse) String() string { return proto.CompactTextString(m) }
func (*ListApplicationAPIKeysResponse) ProtoMessage()    {}
func (*ListApplicationAPIKeysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{24}
}

func (m *ListApplicationAPIKeysResponse) GetAPIKeys() []*APIKey {
	if m != nil {
		return m.APIKeys
	}
	return nil
}

type UpdateApplicationAPIKeyRequest struct {
	// application_ids is the application's ID which an API key will be modified.
	ApplicationIdentifiers `protobuf:"bytes,1,opt,name=application_ids,json=applicationIds,embedded=application_ids" json:"application_ids"`
	// name is the name of the application API key to be updated.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// rights are the list of rights that will be set.
	Rights []Right `protobuf:"varint,3,rep,packed,name=rights,enum=ttn.lorawan.v3.Right" json:"rights,omitempty"`
}

func (m *UpdateApplicationAPIKeyRequest) Reset()         { *m = UpdateApplicationAPIKeyRequest{} }
func (m *UpdateApplicationAPIKeyRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateApplicationAPIKeyRequest) ProtoMessage()    {}
func (*UpdateApplicationAPIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{25}
}

func (m *UpdateApplicationAPIKeyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateApplicationAPIKeyRequest) GetRights() []Right {
	if m != nil {
		return m.Rights
	}
	return nil
}

type RemoveApplicationAPIKeyRequest struct {
	// application_ids is the application's ID which the API key will be removed from.
	ApplicationIdentifiers `protobuf:"bytes,1,opt,name=application_ids,json=applicationIds,embedded=application_ids" json:"application_ids"`
	// name is the name of the application API key to be removed.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *RemoveApplicationAPIKeyRequest) Reset()         { *m = RemoveApplicationAPIKeyRequest{} }
func (m *RemoveApplicationAPIKeyRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveApplicationAPIKeyRequest) ProtoMessage()    {}
func (*RemoveApplicationAPIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{26}
}

func (m *RemoveApplicationAPIKeyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListApplicationCollaboratorsResponse struct {
	// collaborators is the list of collaborators the application has.
	Collaborators []*ApplicationCollaborator `protobuf:"bytes,1,rep,name=collaborators" json:"collaborators,omitempty"`
}

func (m *ListApplicationCollaboratorsResponse) Reset()         { *m = ListApplicationCollaboratorsResponse{} }
func (m *ListApplicationCollaboratorsResponse) String() string { return proto.CompactTextString(m) }
func (*ListApplicationCollaboratorsResponse) ProtoMessage()    {}
func (*ListApplicationCollaboratorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{27}
}

func (m *ListApplicationCollaboratorsResponse) GetCollaborators() []*ApplicationCollaborator {
	if m != nil {
		return m.Collaborators
	}
	return nil
}

type ListApplicationRightsResponse struct {
	// rights are the rights that a caller has to an application.
	Rights []Right `protobuf:"varint,1,rep,packed,name=rights,enum=ttn.lorawan.v3.Right" json:"rights,omitempty"`
}

func (m *ListApplicationRightsResponse) Reset()         { *m = ListApplicationRightsResponse{} }
func (m *ListApplicationRightsResponse) String() string { return proto.CompactTextString(m) }
func (*ListApplicationRightsResponse) ProtoMessage()    {}
func (*ListApplicationRightsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{28}
}

func (m *ListApplicationRightsResponse) GetRights() []Right {
	if m != nil {
		return m.Rights
	}
	return nil
}

type CreateGatewayRequest struct {
	// gateway is the gateway to be created.
	Gateway Gateway `protobuf:"bytes,1,opt,name=gateway" json:"gateway"`
	// organization_ids is the optional organization's ID that creates the gateway.
	OrganizationIdentifiers `protobuf:"bytes,2,opt,name=organization_ids,json=organizationIds,embedded=organization_ids" json:"organization_ids"`
}

func (m *CreateGatewayRequest) Reset()         { *m = CreateGatewayRequest{} }
func (m *CreateGatewayRequest) String() string { return proto.CompactTextString(m) }
func (*CreateGatewayRequest) ProtoMessage()    {}
func (*CreateGatewayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{29}
}

func (m *CreateGatewayRequest) GetGateway() Gateway {
	if m != nil {
		return m.Gateway
	}
	return Gateway{}
}

type ListGatewaysRequest struct {
	// organization_ids is the optional organization's ID whose gateways will be listed of.
	OrganizationIdentifiers `protobuf:"bytes,1,opt,name=organization_ids,json=organizationIds,embedded=organization_ids" json:"organization_ids"`
}

func (m *ListGatewaysRequest) Reset()         { *m = ListGatewaysRequest{} }
func (m *ListGatewaysRequest) String() string { return proto.CompactTextString(m) }
func (*ListGatewaysRequest) ProtoMessage()    {}
func (*ListGatewaysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{30}
}

type ListGatewaysResponse struct {
	// gateways it the list of gateways the authenticated user has access to.
	Gateways []*Gateway `protobuf:"bytes,1,rep,name=gateways" json:"gateways,omitempty"`
}

func (m *ListGatewaysResponse) Reset()         { *m = ListGatewaysResponse{} }
func (m *ListGatewaysResponse) String() string { return proto.CompactTextString(m) }
func (*ListGatewaysResponse) ProtoMessage()    {}
func (*ListGatewaysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{31}
}

func (m *ListGatewaysResponse) GetGateways() []*Gateway {
	if m != nil {
		return m.Gateways
	}
	return nil
}

type UpdateGatewayRequest struct {
	// gateway is the gateway to be updated.
	Gateway Gateway `protobuf:"bytes,1,opt,name=gateway" json:"gateway"`
	// update_mask is the set of field paths that will be affected in the update
	// operation. Fields not included in the update_mask are not changed and ignored
	// in the request. Must be non-empty.
	UpdateMask google_protobuf4.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask" json:"update_mask"`
}

func (m *UpdateGatewayRequest) Reset()         { *m = UpdateGatewayRequest{} }
func (m *UpdateGatewayRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateGatewayRequest) ProtoMessage()    {}
func (*UpdateGatewayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{32}
}

func (m *UpdateGatewayRequest) GetGateway() Gateway {
	if m != nil {
		return m.Gateway
	}
	return Gateway{}
}

func (m *UpdateGatewayRequest) GetUpdateMask() google_protobuf4.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return google_protobuf4.FieldMask{}
}

type GenerateGatewayAPIKeyRequest struct {
	// gateway_ids is the gateway's ID which API key will be added to.
	GatewayIdentifiers `protobuf:"bytes,1,opt,name=gateway_ids,json=gatewayIds,embedded=gateway_ids" json:"gateway_ids"`
	// name is the name of the API key to be generated.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// rights the are rights the generated API key will bear.
	Rights []Right `protobuf:"varint,3,rep,packed,name=rights,enum=ttn.lorawan.v3.Right" json:"rights,omitempty"`
}

func (m *GenerateGatewayAPIKeyRequest) Reset()         { *m = GenerateGatewayAPIKeyRequest{} }
func (m *GenerateGatewayAPIKeyRequest) String() string { return proto.CompactTextString(m) }
func (*GenerateGatewayAPIKeyRequest) ProtoMessage()    {}
func (*GenerateGatewayAPIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{33}
}

func (m *GenerateGatewayAPIKeyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GenerateGatewayAPIKeyRequest) GetRights() []Right {
	if m != nil {
		return m.Rights
	}
	return nil
}

type ListGatewayAPIKeysResponse struct {
	// api_keys are the API keys that the gateways has currently registered.
	APIKeys []*APIKey `protobuf:"bytes,1,rep,name=api_keys,json=apiKeys" json:"api_keys,omitempty"`
}

func (m *ListGatewayAPIKeysResponse) Reset()         { *m = ListGatewayAPIKeysResponse{} }
func (m *ListGatewayAPIKeysResponse) String() string { return proto.CompactTextString(m) }
func (*ListGatewayAPIKeysResponse) ProtoMessage()    {}
func (*ListGatewayAPIKeysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{34}
}

func (m *ListGatewayAPIKeysResponse) GetAPIKeys() []*APIKey {
	if m != nil {
		return m.APIKeys
	}
	return nil
}

type UpdateGatewayAPIKeyRequest struct {
	// gateway_ids is the gateway's ID which an API key will be modified.
	GatewayIdentifiers `protobuf:"bytes,1,opt,name=gateway_ids,json=gatewayIds,embedded=gateway_ids" json:"gateway_ids"`
	// name is the name of the gateway API key to be updated.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// rights are the list of rights that will be set.
	Rights []Right `protobuf:"varint,3,rep,packed,name=rights,enum=ttn.lorawan.v3.Right" json:"rights,omitempty"`
}

func (m *UpdateGatewayAPIKeyRequest) Reset()         { *m = UpdateGatewayAPIKeyRequest{} }
func (m *UpdateGatewayAPIKeyRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateGatewayAPIKeyRequest) ProtoMessage()    {}
func (*UpdateGatewayAPIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{35}
}

func (m *UpdateGatewayAPIKeyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateGatewayAPIKeyRequest) GetRights() []Right {
	if m != nil {
		return m.Rights
	}
	return nil
}

type RemoveGatewayAPIKeyRequest struct {
	// gateway_ids is the gateway's ID which API key will be removed from.
	GatewayIdentifiers `protobuf:"bytes,1,opt,name=gateway_ids,json=gatewayIds,embedded=gateway_ids" json:"gateway_ids"`
	// name is the name of the gateway API key to be removed.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *RemoveGatewayAPIKeyRequest) Reset()         { *m = RemoveGatewayAPIKeyRequest{} }
func (m *RemoveGatewayAPIKeyRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveGatewayAPIKeyRequest) ProtoMessage()    {}
func (*RemoveGatewayAPIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{36}
}

func (m *RemoveGatewayAPIKeyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListGatewayCollaboratorsResponse struct {
	// collaborators is the list of collaborators a gateway has.
	Collaborators []*GatewayCollaborator `protobuf:"bytes,1,rep,name=collaborators" json:"collaborators,omitempty"`
}

func (m *ListGatewayCollaboratorsResponse) Reset()         { *m = ListGatewayCollaboratorsResponse{} }
func (m *ListGatewayCollaboratorsResponse) String() string { return proto.CompactTextString(m) }
func (*ListGatewayCollaboratorsResponse) ProtoMessage()    {}
func (*ListGatewayCollaboratorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{37}
}

func (m *ListGatewayCollaboratorsResponse) GetCollaborators() []*GatewayCollaborator {
	if m != nil {
		return m.Collaborators
	}
	return nil
}

type ListGatewayRightsResponse struct {
	// rights are the rights that a caller has to a gateway.
	Rights []Right `protobuf:"varint,1,rep,packed,name=rights,enum=ttn.lorawan.v3.Right" json:"rights,omitempty"`
}

func (m *ListGatewayRightsResponse) Reset()         { *m = ListGatewayRightsResponse{} }
func (m *ListGatewayRightsResponse) String() string { return proto.CompactTextString(m) }
func (*ListGatewayRightsResponse) ProtoMessage()    {}
func (*ListGatewayRightsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{38}
}

func (m *ListGatewayRightsResponse) GetRights() []Right {
	if m != nil {
		return m.Rights
	}
	return nil
}

type CreateClientRequest struct {
	// client is the client to be created.
	Client Client `protobuf:"bytes,1,opt,name=client" json:"client"`
}

func (m *CreateClientRequest) Reset()         { *m = CreateClientRequest{} }
func (m *CreateClientRequest) String() string { return proto.CompactTextString(m) }
func (*CreateClientRequest) ProtoMessage()    {}
func (*CreateClientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{39}
}

func (m *CreateClientRequest) GetClient() Client {
	if m != nil {
		return m.Client
	}
	return Client{}
}

type ListClientsResponse struct {
	// clients is a list of third-party clients.
	Clients []*Client `protobuf:"bytes,1,rep,name=clients" json:"clients,omitempty"`
}

func (m *ListClientsResponse) Reset()         { *m = ListClientsResponse{} }
func (m *ListClientsResponse) String() string { return proto.CompactTextString(m) }
func (*ListClientsResponse) ProtoMessage()    {}
func (*ListClientsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{40}
}

func (m *ListClientsResponse) GetClients() []*Client {
	if m != nil {
		return m.Clients
	}
	return nil
}

type UpdateClientRequest struct {
	// client is the client to be updated.
	Client Client `protobuf:"bytes,1,opt,name=client" json:"client"`
	// update_mask is the set of field paths that will be affected in the update
	// operation. Fields not included in the update_mask are not changed and ignored
	// in the request. Must be non-empty.
	UpdateMask google_protobuf4.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask" json:"update_mask"`
}

func (m *UpdateClientRequest) Reset()         { *m = UpdateClientRequest{} }
func (m *UpdateClientRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateClientRequest) ProtoMessage()    {}
func (*UpdateClientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{41}
}

func (m *UpdateClientRequest) GetClient() Client {
	if m != nil {
		return m.Client
	}
	return Client{}
}

func (m *UpdateClientRequest) GetUpdateMask() google_protobuf4.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return google_protobuf4.FieldMask{}
}

type CreateOrganizationRequest struct {
	// organization is the organization to be created.
	Organization Organization `protobuf:"bytes,1,opt,name=organization" json:"organization"`
}

func (m *CreateOrganizationRequest) Reset()         { *m = CreateOrganizationRequest{} }
func (m *CreateOrganizationRequest) String() string { return proto.CompactTextString(m) }
func (*CreateOrganizationRequest) ProtoMessage()    {}
func (*CreateOrganizationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{42}
}

func (m *CreateOrganizationRequest) GetOrganization() Organization {
	if m != nil {
		return m.Organization
	}
	return Organization{}
}

type ListOrganizationsResponse struct {
	// organizations is the list of organizations an user is member of.
	Organizations []*Organization `protobuf:"bytes,1,rep,name=organizations" json:"organizations,omitempty"`
}

func (m *ListOrganizationsResponse) Reset()         { *m = ListOrganizationsResponse{} }
func (m *ListOrganizationsResponse) String() string { return proto.CompactTextString(m) }
func (*ListOrganizationsResponse) ProtoMessage()    {}
func (*ListOrganizationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{43}
}

func (m *ListOrganizationsResponse) GetOrganizations() []*Organization {
	if m != nil {
		return m.Organizations
	}
	return nil
}

type UpdateOrganizationRequest struct {
	// organization is the organization to be updated.
	Organization Organization               `protobuf:"bytes,1,opt,name=organization" json:"organization"`
	UpdateMask   google_protobuf4.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask" json:"update_mask"`
}

func (m *UpdateOrganizationRequest) Reset()         { *m = UpdateOrganizationRequest{} }
func (m *UpdateOrganizationRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateOrganizationRequest) ProtoMessage()    {}
func (*UpdateOrganizationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{44}
}

func (m *UpdateOrganizationRequest) GetOrganization() Organization {
	if m != nil {
		return m.Organization
	}
	return Organization{}
}

func (m *UpdateOrganizationRequest) GetUpdateMask() google_protobuf4.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return google_protobuf4.FieldMask{}
}

type GenerateOrganizationAPIKeyRequest struct {
	// organization_ids is the organization's ID which API key will be added to.
	OrganizationIdentifiers `protobuf:"bytes,1,opt,name=organization_ids,json=organizationIds,embedded=organization_ids" json:"organization_ids"`
	// name is the name of the API key to be generated.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// rights the are rights the generated API key will bear.
	Rights []Right `protobuf:"varint,3,rep,packed,name=rights,enum=ttn.lorawan.v3.Right" json:"rights,omitempty"`
}

func (m *GenerateOrganizationAPIKeyRequest) Reset()         { *m = GenerateOrganizationAPIKeyRequest{} }
func (m *GenerateOrganizationAPIKeyRequest) String() string { return proto.CompactTextString(m) }
func (*GenerateOrganizationAPIKeyRequest) ProtoMessage()    {}
func (*GenerateOrganizationAPIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{45}
}

func (m *GenerateOrganizationAPIKeyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GenerateOrganizationAPIKeyRequest) GetRights() []Right {
	if m != nil {
		return m.Rights
	}
	return nil
}

type ListOrganizationAPIKeysResponse struct {
	// api_keys are the API keys that the organization has currently registered.
	APIKeys []*APIKey `protobuf:"bytes,1,rep,name=api_keys,json=apiKeys" json:"api_keys,omitempty"`
}

func (m *ListOrganizationAPIKeysResponse) Reset()         { *m = ListOrganizationAPIKeysResponse{} }
func (m *ListOrganizationAPIKeysResponse) String() string { return proto.CompactTextString(m) }
func (*ListOrganizationAPIKeysResponse) ProtoMessage()    {}
func (*ListOrganizationAPIKeysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{46}
}

func (m *ListOrganizationAPIKeysResponse) GetAPIKeys() []*APIKey {
	if m != nil {
		return m.APIKeys
	}
	return nil
}

type UpdateOrganizationAPIKeyRequest struct {
	// organization_ids is the organization's ID which API key will be added to.
	OrganizationIdentifiers `protobuf:"bytes,1,opt,name=organization_ids,json=organizationIds,embedded=organization_ids" json:"organization_ids"`
	// name is the name of the gateway API key to be updated.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// rights are the list of rights that will be set.
	Rights []Right `protobuf:"varint,3,rep,packed,name=rights,enum=ttn.lorawan.v3.Right" json:"rights,omitempty"`
}

func (m *UpdateOrganizationAPIKeyRequest) Reset()         { *m = UpdateOrganizationAPIKeyRequest{} }
func (m *UpdateOrganizationAPIKeyRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateOrganizationAPIKeyRequest) ProtoMessage()    {}
func (*UpdateOrganizationAPIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{47}
}

func (m *UpdateOrganizationAPIKeyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateOrganizationAPIKeyRequest) GetRights() []Right {
	if m != nil {
		return m.Rights
	}
	return nil
}

type RemoveOrganizationAPIKeyRequest struct {
	// organization_ids is the organization's ID which API key will be removed from.
	OrganizationIdentifiers `protobuf:"bytes,1,opt,name=organization_ids,json=organizationIds,embedded=organization_ids" json:"organization_ids"`
	// name is the name of the organization API key to be removed.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *RemoveOrganizationAPIKeyRequest) Reset()         { *m = RemoveOrganizationAPIKeyRequest{} }
func (m *RemoveOrganizationAPIKeyRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveOrganizationAPIKeyRequest) ProtoMessage()    {}
func (*RemoveOrganizationAPIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{48}
}

func (m *RemoveOrganizationAPIKeyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListOrganizationMembersResponse struct {
	// members is the list of members that are part of the organization.
	Members []*OrganizationMember `protobuf:"bytes,1,rep,name=members" json:"members,omitempty"`
}

func (m *ListOrganizationMembersResponse) Reset()         { *m = ListOrganizationMembersResponse{} }
func (m *ListOrganizationMembersResponse) String() string { return proto.CompactTextString(m) }
func (*ListOrganizationMembersResponse) ProtoMessage()    {}
func (*ListOrganizationMembersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{49}
}

func (m *ListOrganizationMembersResponse) GetMembers() []*OrganizationMember {
	if m != nil {
		return m.Members
	}
	return nil
}

type ListOrganizationRightsResponse struct {
	// rights is the list of rights the caller bears to the organization.
	Rights []Right `protobuf:"varint,1,rep,packed,name=rights,enum=ttn.lorawan.v3.Right" json:"rights,omitempty"`
}

func (m *ListOrganizationRightsResponse) Reset()         { *m = ListOrganizationRightsResponse{} }
func (m *ListOrganizationRightsResponse) String() string { return proto.CompactTextString(m) }
func (*ListOrganizationRightsResponse) ProtoMessage()    {}
func (*ListOrganizationRightsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorIdentityserver, []int{50}
}

func (m *ListOrganizationRightsResponse) GetRights() []Right {
	if m != nil {
		return m.Rights
	}
	return nil
}

func init() {
	proto.RegisterType((*PullConfigurationRequest)(nil), "ttn.lorawan.v3.PullConfigurationRequest")
	golang_proto.RegisterType((*PullConfigurationRequest)(nil), "ttn.lorawan.v3.PullConfigurationRequest")
	proto.RegisterType((*IdentityServerSettings)(nil), "ttn.lorawan.v3.IdentityServerSettings")
	golang_proto.RegisterType((*IdentityServerSettings)(nil), "ttn.lorawan.v3.IdentityServerSettings")
	proto.RegisterType((*IdentityServerSettings_UserRegistrationFlow)(nil), "ttn.lorawan.v3.IdentityServerSettings.UserRegistrationFlow")
	golang_proto.RegisterType((*IdentityServerSettings_UserRegistrationFlow)(nil), "ttn.lorawan.v3.IdentityServerSettings.UserRegistrationFlow")
	proto.RegisterType((*UpdateSettingsRequest)(nil), "ttn.lorawan.v3.UpdateSettingsRequest")
	golang_proto.RegisterType((*UpdateSettingsRequest)(nil), "ttn.lorawan.v3.UpdateSettingsRequest")
	proto.RegisterType((*ResetUserPasswordResponse)(nil), "ttn.lorawan.v3.ResetUserPasswordResponse")
	golang_proto.RegisterType((*ResetUserPasswordResponse)(nil), "ttn.lorawan.v3.ResetUserPasswordResponse")
	proto.RegisterType((*SendInvitationRequest)(nil), "ttn.lorawan.v3.SendInvitationRequest")
	golang_proto.RegisterType((*SendInvitationRequest)(nil), "ttn.lorawan.v3.SendInvitationRequest")
	proto.RegisterType((*ListInvitationsResponse)(nil), "ttn.lorawan.v3.ListInvitationsResponse")
	golang_proto.RegisterType((*ListInvitationsResponse)(nil), "ttn.lorawan.v3.ListInvitationsResponse")
	proto.RegisterType((*ListInvitationsResponse_Invitation)(nil), "ttn.lorawan.v3.ListInvitationsResponse.Invitation")
	golang_proto.RegisterType((*ListInvitationsResponse_Invitation)(nil), "ttn.lorawan.v3.ListInvitationsResponse.Invitation")
	proto.RegisterType((*DeleteInvitationRequest)(nil), "ttn.lorawan.v3.DeleteInvitationRequest")
	golang_proto.RegisterType((*DeleteInvitationRequest)(nil), "ttn.lorawan.v3.DeleteInvitationRequest")
	proto.RegisterType((*ListUsersRequest)(nil), "ttn.lorawan.v3.ListUsersRequest")
	golang_proto.RegisterType((*ListUsersRequest)(nil), "ttn.lorawan.v3.ListUsersRequest")
	proto.RegisterType((*ListUsersRequest_FilterState)(nil), "ttn.lorawan.v3.ListUsersRequest.FilterState")
	golang_proto.RegisterType((*ListUsersRequest_FilterState)(nil), "ttn.lorawan.v3.ListUsersRequest.FilterState")
	proto.RegisterType((*ListUsersResponse)(nil), "ttn.lorawan.v3.ListUsersResponse")
	golang_proto.RegisterType((*ListUsersResponse)(nil), "ttn.lorawan.v3.ListUsersResponse")
	proto.RegisterType((*ListClientsRequest)(nil), "ttn.lorawan.v3.ListClientsRequest")
	golang_proto.RegisterType((*ListClientsRequest)(nil), "ttn.lorawan.v3.ListClientsRequest")
	proto.RegisterType((*ListClientsRequest_FilterState)(nil), "ttn.lorawan.v3.ListClientsRequest.FilterState")
	golang_proto.RegisterType((*ListClientsRequest_FilterState)(nil), "ttn.lorawan.v3.ListClientsRequest.FilterState")
	proto.RegisterType((*CreateUserRequest)(nil), "ttn.lorawan.v3.CreateUserRequest")
	golang_proto.RegisterType((*CreateUserRequest)(nil), "ttn.lorawan.v3.CreateUserRequest")
	proto.RegisterType((*UpdateUserRequest)(nil), "ttn.lorawan.v3.UpdateUserRequest")
	golang_proto.RegisterType((*UpdateUserRequest)(nil), "ttn.lorawan.v3.UpdateUserRequest")
	proto.RegisterType((*UpdateUserPasswordRequest)(nil), "ttn.lorawan.v3.UpdateUserPasswordRequest")
	golang_proto.RegisterType((*UpdateUserPasswordRequest)(nil), "ttn.lorawan.v3.UpdateUserPasswordRequest")
	proto.RegisterType((*GenerateUserAPIKeyRequest)(nil), "ttn.lorawan.v3.GenerateUserAPIKeyRequest")
	golang_proto.RegisterType((*GenerateUserAPIKeyRequest)(nil), "ttn.lorawan.v3.GenerateUserAPIKeyRequest")
	proto.RegisterType((*ListUserAPIKeysResponse)(nil), "ttn.lorawan.v3.ListUserAPIKeysResponse")
	golang_proto.RegisterType((*ListUserAPIKeysResponse)(nil), "ttn.lorawan.v3.ListUserAPIKeysResponse")
	proto.RegisterType((*UpdateUserAPIKeyRequest)(nil), "ttn.lorawan.v3.UpdateUserAPIKeyRequest")
	golang_proto.RegisterType((*UpdateUserAPIKeyRequest)(nil), "ttn.lorawan.v3.UpdateUserAPIKeyRequest")
	proto.RegisterType((*RemoveUserAPIKeyRequest)(nil), "ttn.lorawan.v3.RemoveUserAPIKeyRequest")
	golang_proto.RegisterType((*RemoveUserAPIKeyRequest)(nil), "ttn.lorawan.v3.RemoveUserAPIKeyRequest")
	proto.RegisterType((*ValidateUserEmailRequest)(nil), "ttn.lorawan.v3.ValidateUserEmailRequest")
	golang_proto.RegisterType((*ValidateUserEmailRequest)(nil), "ttn.lorawan.v3.ValidateUserEmailRequest")
	proto.RegisterType((*ListAuthorizedClientsResponse)(nil), "ttn.lorawan.v3.ListAuthorizedClientsResponse")
	golang_proto.RegisterType((*ListAuthorizedClientsResponse)(nil), "ttn.lorawan.v3.ListAuthorizedClientsResponse")
	proto.RegisterType((*CreateApplicationRequest)(nil), "ttn.lorawan.v3.CreateApplicationRequest")
	golang_proto.RegisterType((*CreateApplicationRequest)(nil), "ttn.lorawan.v3.CreateApplicationRequest")
	proto.RegisterType((*ListApplicationsRequest)(nil), "ttn.lorawan.v3.ListApplicationsRequest")
	golang_proto.RegisterType((*ListApplicationsRequest)(nil), "ttn.lorawan.v3.ListApplicationsRequest")
	proto.RegisterType((*ListApplicationsResponse)(nil), "ttn.lorawan.v3.ListApplicationsResponse")
	golang_proto.RegisterType((*ListApplicationsResponse)(nil), "ttn.lorawan.v3.ListApplicationsResponse")
	proto.RegisterType((*UpdateApplicationRequest)(nil), "ttn.lorawan.v3.UpdateApplicationRequest")
	golang_proto.RegisterType((*UpdateApplicationRequest)(nil), "ttn.lorawan.v3.UpdateApplicationRequest")
	proto.RegisterType((*GenerateApplicationAPIKeyRequest)(nil), "ttn.lorawan.v3.GenerateApplicationAPIKeyRequest")
	golang_proto.RegisterType((*GenerateApplicationAPIKeyRequest)(nil), "ttn.lorawan.v3.GenerateApplicationAPIKeyRequest")
	proto.RegisterType((*ListApplicationAPIKeysResponse)(nil), "ttn.lorawan.v3.ListApplicationAPIKeysResponse")
	golang_proto.RegisterType((*ListApplicationAPIKeysResponse)(nil), "ttn.lorawan.v3.ListApplicationAPIKeysResponse")
	proto.RegisterType((*UpdateApplicationAPIKeyRequest)(nil), "ttn.lorawan.v3.UpdateApplicationAPIKeyRequest")
	golang_proto.RegisterType((*UpdateApplicationAPIKeyRequest)(nil), "ttn.lorawan.v3.UpdateApplicationAPIKeyRequest")
	proto.RegisterType((*RemoveApplicationAPIKeyRequest)(nil), "ttn.lorawan.v3.RemoveApplicationAPIKeyRequest")
	golang_proto.RegisterType((*RemoveApplicationAPIKeyRequest)(nil), "ttn.lorawan.v3.RemoveApplicationAPIKeyRequest")
	proto.RegisterType((*ListApplicationCollaboratorsResponse)(nil), "ttn.lorawan.v3.ListApplicationCollaboratorsResponse")
	golang_proto.RegisterType((*ListApplicationCollaboratorsResponse)(nil), "ttn.lorawan.v3.ListApplicationCollaboratorsResponse")
	proto.RegisterType((*ListApplicationRightsResponse)(nil), "ttn.lorawan.v3.ListApplicationRightsResponse")
	golang_proto.RegisterType((*ListApplicationRightsResponse)(nil), "ttn.lorawan.v3.ListApplicationRightsResponse")
	proto.RegisterType((*CreateGatewayRequest)(nil), "ttn.lorawan.v3.CreateGatewayRequest")
	golang_proto.RegisterType((*CreateGatewayRequest)(nil), "ttn.lorawan.v3.CreateGatewayRequest")
	proto.RegisterType((*ListGatewaysRequest)(nil), "ttn.lorawan.v3.ListGatewaysRequest")
	golang_proto.RegisterType((*ListGatewaysRequest)(nil), "ttn.lorawan.v3.ListGatewaysRequest")
	proto.RegisterType((*ListGatewaysResponse)(nil), "ttn.lorawan.v3.ListGatewaysResponse")
	golang_proto.RegisterType((*ListGatewaysResponse)(nil), "ttn.lorawan.v3.ListGatewaysResponse")
	proto.RegisterType((*UpdateGatewayRequest)(nil), "ttn.lorawan.v3.UpdateGatewayRequest")
	golang_proto.RegisterType((*UpdateGatewayRequest)(nil), "ttn.lorawan.v3.UpdateGatewayRequest")
	proto.RegisterType((*GenerateGatewayAPIKeyRequest)(nil), "ttn.lorawan.v3.GenerateGatewayAPIKeyRequest")
	golang_proto.RegisterType((*GenerateGatewayAPIKeyRequest)(nil), "ttn.lorawan.v3.GenerateGatewayAPIKeyRequest")
	proto.RegisterType((*ListGatewayAPIKeysResponse)(nil), "ttn.lorawan.v3.ListGatewayAPIKeysResponse")
	golang_proto.RegisterType((*ListGatewayAPIKeysResponse)(nil), "ttn.lorawan.v3.ListGatewayAPIKeysResponse")
	proto.RegisterType((*UpdateGatewayAPIKeyRequest)(nil), "ttn.lorawan.v3.UpdateGatewayAPIKeyRequest")
	golang_proto.RegisterType((*UpdateGatewayAPIKeyRequest)(nil), "ttn.lorawan.v3.UpdateGatewayAPIKeyRequest")
	proto.RegisterType((*RemoveGatewayAPIKeyRequest)(nil), "ttn.lorawan.v3.RemoveGatewayAPIKeyRequest")
	golang_proto.RegisterType((*RemoveGatewayAPIKeyRequest)(nil), "ttn.lorawan.v3.RemoveGatewayAPIKeyRequest")
	proto.RegisterType((*ListGatewayCollaboratorsResponse)(nil), "ttn.lorawan.v3.ListGatewayCollaboratorsResponse")
	golang_proto.RegisterType((*ListGatewayCollaboratorsResponse)(nil), "ttn.lorawan.v3.ListGatewayCollaboratorsResponse")
	proto.RegisterType((*ListGatewayRightsResponse)(nil), "ttn.lorawan.v3.ListGatewayRightsResponse")
	golang_proto.RegisterType((*ListGatewayRightsResponse)(nil), "ttn.lorawan.v3.ListGatewayRightsResponse")
	proto.RegisterType((*CreateClientRequest)(nil), "ttn.lorawan.v3.CreateClientRequest")
	golang_proto.RegisterType((*CreateClientRequest)(nil), "ttn.lorawan.v3.CreateClientRequest")
	proto.RegisterType((*ListClientsResponse)(nil), "ttn.lorawan.v3.ListClientsResponse")
	golang_proto.RegisterType((*ListClientsResponse)(nil), "ttn.lorawan.v3.ListClientsResponse")
	proto.RegisterType((*UpdateClientRequest)(nil), "ttn.lorawan.v3.UpdateClientRequest")
	golang_proto.RegisterType((*UpdateClientRequest)(nil), "ttn.lorawan.v3.UpdateClientRequest")
	proto.RegisterType((*CreateOrganizationRequest)(nil), "ttn.lorawan.v3.CreateOrganizationRequest")
	golang_proto.RegisterType((*CreateOrganizationRequest)(nil), "ttn.lorawan.v3.CreateOrganizationRequest")
	proto.RegisterType((*ListOrganizationsResponse)(nil), "ttn.lorawan.v3.ListOrganizationsResponse")
	golang_proto.RegisterType((*ListOrganizationsResponse)(nil), "ttn.lorawan.v3.ListOrganizationsResponse")
	proto.RegisterType((*UpdateOrganizationRequest)(nil), "ttn.lorawan.v3.UpdateOrganizationRequest")
	golang_proto.RegisterType((*UpdateOrganizationRequest)(nil), "ttn.lorawan.v3.UpdateOrganizationRequest")
	proto.RegisterType((*GenerateOrganizationAPIKeyRequest)(nil), "ttn.lorawan.v3.GenerateOrganizationAPIKeyRequest")
	golang_proto.RegisterType((*GenerateOrganizationAPIKeyRequest)(nil), "ttn.lorawan.v3.GenerateOrganizationAPIKeyRequest")
	proto.RegisterType((*ListOrganizationAPIKeysResponse)(nil), "ttn.lorawan.v3.ListOrganizationAPIKeysResponse")
	golang_proto.RegisterType((*ListOrganizationAPIKeysResponse)(nil), "ttn.lorawan.v3.ListOrganizationAPIKeysResponse")
	proto.RegisterType((*UpdateOrganizationAPIKeyRequest)(nil), "ttn.lorawan.v3.UpdateOrganizationAPIKeyRequest")
	golang_proto.RegisterType((*UpdateOrganizationAPIKeyRequest)(nil), "ttn.lorawan.v3.UpdateOrganizationAPIKeyRequest")
	proto.RegisterType((*RemoveOrganizationAPIKeyRequest)(nil), "ttn.lorawan.v3.RemoveOrganizationAPIKeyRequest")
	golang_proto.RegisterType((*RemoveOrganizationAPIKeyRequest)(nil), "ttn.lorawan.v3.RemoveOrganizationAPIKeyRequest")
	proto.RegisterType((*ListOrganizationMembersResponse)(nil), "ttn.lorawan.v3.ListOrganizationMembersResponse")
	golang_proto.RegisterType((*ListOrganizationMembersResponse)(nil), "ttn.lorawan.v3.ListOrganizationMembersResponse")
	proto.RegisterType((*ListOrganizationRightsResponse)(nil), "ttn.lorawan.v3.ListOrganizationRightsResponse")
	golang_proto.RegisterType((*ListOrganizationRightsResponse)(nil), "ttn.lorawan.v3.ListOrganizationRightsResponse")
}
func (this *PullConfigurationRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PullConfigurationRequest)
	if !ok {
		that2, ok := that.(PullConfigurationRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PullConfigurationRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PullConfigurationRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PullConfigurationRequest but is not nil && this == nil")
	}
	if !this.GatewayIdentifiers.Equal(&that1.GatewayIdentifiers) {
		return fmt.Errorf("GatewayIdentifiers this(%v) Not Equal that(%v)", this.GatewayIdentifiers, that1.GatewayIdentifiers)
	}
	if !this.ProjectionMask.Equal(that1.ProjectionMask) {
		return fmt.Errorf("ProjectionMask this(%v) Not Equal that(%v)", this.ProjectionMask, that1.ProjectionMask)
	}
	return nil
}
func (this *PullConfigurationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PullConfigurationRequest)
	if !ok {
		that2, ok := that.(PullConfigurationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GatewayIdentifiers.Equal(&that1.GatewayIdentifiers) {
		return false
	}
	if !this.ProjectionMask.Equal(that1.ProjectionMask) {
		return false
	}
	return true
}
func (this *IdentityServerSettings) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*IdentityServerSettings)
	if !ok {
		that2, ok := that.(IdentityServerSettings)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *IdentityServerSettings")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *IdentityServerSettings but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *IdentityServerSettings but is not nil && this == nil")
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return fmt.Errorf("UpdatedAt this(%v) Not Equal that(%v)", this.UpdatedAt, that1.UpdatedAt)
	}
	if len(this.BlacklistedIDs) != len(that1.BlacklistedIDs) {
		return fmt.Errorf("BlacklistedIDs this(%v) Not Equal that(%v)", len(this.BlacklistedIDs), len(that1.BlacklistedIDs))
	}
	for i := range this.BlacklistedIDs {
		if this.BlacklistedIDs[i] != that1.BlacklistedIDs[i] {
			return fmt.Errorf("BlacklistedIDs this[%v](%v) Not Equal that[%v](%v)", i, this.BlacklistedIDs[i], i, that1.BlacklistedIDs[i])
		}
	}
	if !this.IdentityServerSettings_UserRegistrationFlow.Equal(&that1.IdentityServerSettings_UserRegistrationFlow) {
		return fmt.Errorf("IdentityServerSettings_UserRegistrationFlow this(%v) Not Equal that(%v)", this.IdentityServerSettings_UserRegistrationFlow, that1.IdentityServerSettings_UserRegistrationFlow)
	}
	if this.ValidationTokenTTL != that1.ValidationTokenTTL {
		return fmt.Errorf("ValidationTokenTTL this(%v) Not Equal that(%v)", this.ValidationTokenTTL, that1.ValidationTokenTTL)
	}
	if len(this.AllowedEmails) != len(that1.AllowedEmails) {
		return fmt.Errorf("AllowedEmails this(%v) Not Equal that(%v)", len(this.AllowedEmails), len(that1.AllowedEmails))
	}
	for i := range this.AllowedEmails {
		if this.AllowedEmails[i] != that1.AllowedEmails[i] {
			return fmt.Errorf("AllowedEmails this[%v](%v) Not Equal that[%v](%v)", i, this.AllowedEmails[i], i, that1.AllowedEmails[i])
		}
	}
	if this.InvitationTokenTTL != that1.InvitationTokenTTL {
		return fmt.Errorf("InvitationTokenTTL this(%v) Not Equal that(%v)", this.InvitationTokenTTL, that1.InvitationTokenTTL)
	}
	return nil
}
func (this *IdentityServerSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IdentityServerSettings)
	if !ok {
		that2, ok := that.(IdentityServerSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if len(this.BlacklistedIDs) != len(that1.BlacklistedIDs) {
		return false
	}
	for i := range this.BlacklistedIDs {
		if this.BlacklistedIDs[i] != that1.BlacklistedIDs[i] {
			return false
		}
	}
	if !this.IdentityServerSettings_UserRegistrationFlow.Equal(&that1.IdentityServerSettings_UserRegistrationFlow) {
		return false
	}
	if this.ValidationTokenTTL != that1.ValidationTokenTTL {
		return false
	}
	if len(this.AllowedEmails) != len(that1.AllowedEmails) {
		return false
	}
	for i := range this.AllowedEmails {
		if this.AllowedEmails[i] != that1.AllowedEmails[i] {
			return false
		}
	}
	if this.InvitationTokenTTL != that1.InvitationTokenTTL {
		return false
	}
	return true
}
func (this *IdentityServerSettings_UserRegistrationFlow) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*IdentityServerSettings_UserRegistrationFlow)
	if !ok {
		that2, ok := that.(IdentityServerSettings_UserRegistrationFlow)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *IdentityServerSettings_UserRegistrationFlow")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *IdentityServerSettings_UserRegistrationFlow but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *IdentityServerSettings_UserRegistrationFlow but is not nil && this == nil")
	}
	if this.SkipValidation != that1.SkipValidation {
		return fmt.Errorf("SkipValidation this(%v) Not Equal that(%v)", this.SkipValidation, that1.SkipValidation)
	}
	if this.InvitationOnly != that1.InvitationOnly {
		return fmt.Errorf("InvitationOnly this(%v) Not Equal that(%v)", this.InvitationOnly, that1.InvitationOnly)
	}
	if this.AdminApproval != that1.AdminApproval {
		return fmt.Errorf("AdminApproval this(%v) Not Equal that(%v)", this.AdminApproval, that1.AdminApproval)
	}
	return nil
}
func (this *IdentityServerSettings_UserRegistrationFlow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IdentityServerSettings_UserRegistrationFlow)
	if !ok {
		that2, ok := that.(IdentityServerSettings_UserRegistrationFlow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SkipValidation != that1.SkipValidation {
		return false
	}
	if this.InvitationOnly != that1.InvitationOnly {
		return false
	}
	if this.AdminApproval != that1.AdminApproval {
		return false
	}
	return true
}
func (this *UpdateSettingsRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UpdateSettingsRequest)
	if !ok {
		that2, ok := that.(UpdateSettingsRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UpdateSettingsRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UpdateSettingsRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UpdateSettingsRequest but is not nil && this == nil")
	}
	if !this.Settings.Equal(&that1.Settings) {
		return fmt.Errorf("Settings this(%v) Not Equal that(%v)", this.Settings, that1.Settings)
	}
	if !this.UpdateMask.Equal(&that1.UpdateMask) {
		return fmt.Errorf("UpdateMask this(%v) Not Equal that(%v)", this.UpdateMask, that1.UpdateMask)
	}
	return nil
}
func (this *UpdateSettingsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSettingsRequest)
	if !ok {
		that2, ok := that.(UpdateSettingsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Settings.Equal(&that1.Settings) {
		return false
	}
	if !this.UpdateMask.Equal(&that1.UpdateMask) {
		return false
	}
	return true
}
func (this *ResetUserPasswordResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ResetUserPasswordResponse)
	if !ok {
		that2, ok := that.(ResetUserPasswordResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ResetUserPasswordResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ResetUserPasswordResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ResetUserPasswordResponse but is not nil && this == nil")
	}
	if this.Password != that1.Password {
		return fmt.Errorf("Password this(%v) Not Equal that(%v)", this.Password, that1.Password)
	}
	return nil
}
func (this *ResetUserPasswordResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResetUserPasswordResponse)
	if !ok {
		that2, ok := that.(ResetUserPasswordResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	return true
}
func (this *SendInvitationRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SendInvitationRequest)
	if !ok {
		that2, ok := that.(SendInvitationRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SendInvitationRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SendInvitationRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SendInvitationRequest but is not nil && this == nil")
	}
	if this.Email != that1.Email {
		return fmt.Errorf("Email this(%v) Not Equal that(%v)", this.Email, that1.Email)
	}
	return nil
}
func (this *SendInvitationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SendInvitationRequest)
	if !ok {
		that2, ok := that.(SendInvitationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	return true
}
func (this *ListInvitationsResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListInvitationsResponse)
	if !ok {
		that2, ok := that.(ListInvitationsResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListInvitationsResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListInvitationsResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListInvitationsResponse but is not nil && this == nil")
	}
	if len(this.Invitations) != len(that1.Invitations) {
		return fmt.Errorf("Invitations this(%v) Not Equal that(%v)", len(this.Invitations), len(that1.Invitations))
	}
	for i := range this.Invitations {
		if !this.Invitations[i].Equal(that1.Invitations[i]) {
			return fmt.Errorf("Invitations this[%v](%v) Not Equal that[%v](%v)", i, this.Invitations[i], i, that1.Invitations[i])
		}
	}
	return nil
}
func (this *ListInvitationsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListInvitationsResponse)
	if !ok {
		that2, ok := that.(ListInvitationsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Invitations) != len(that1.Invitations) {
		return false
	}
	for i := range this.Invitations {
		if !this.Invitations[i].Equal(that1.Invitations[i]) {
			return false
		}
	}
	return true
}
func (this *ListInvitationsResponse_Invitation) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListInvitationsResponse_Invitation)
	if !ok {
		that2, ok := that.(ListInvitationsResponse_Invitation)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListInvitationsResponse_Invitation")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListInvitationsResponse_Invitation but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListInvitationsResponse_Invitation but is not nil && this == nil")
	}
	if this.Email != that1.Email {
		return fmt.Errorf("Email this(%v) Not Equal that(%v)", this.Email, that1.Email)
	}
	if !this.IssuedAt.Equal(that1.IssuedAt) {
		return fmt.Errorf("IssuedAt this(%v) Not Equal that(%v)", this.IssuedAt, that1.IssuedAt)
	}
	if !this.ExpiresAt.Equal(that1.ExpiresAt) {
		return fmt.Errorf("ExpiresAt this(%v) Not Equal that(%v)", this.ExpiresAt, that1.ExpiresAt)
	}
	return nil
}
func (this *ListInvitationsResponse_Invitation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListInvitationsResponse_Invitation)
	if !ok {
		that2, ok := that.(ListInvitationsResponse_Invitation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if !this.IssuedAt.Equal(that1.IssuedAt) {
		return false
	}
	if !this.ExpiresAt.Equal(that1.ExpiresAt) {
		return false
	}
	return true
}
func (this *DeleteInvitationRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DeleteInvitationRequest)
	if !ok {
		that2, ok := that.(DeleteInvitationRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DeleteInvitationRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DeleteInvitationRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DeleteInvitationRequest but is not nil && this == nil")
	}
	if this.Email != that1.Email {
		return fmt.Errorf("Email this(%v) Not Equal that(%v)", this.Email, that1.Email)
	}
	return nil
}
func (this *DeleteInvitationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteInvitationRequest)
	if !ok {
		that2, ok := that.(DeleteInvitationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	return true
}
func (this *ListUsersRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListUsersRequest)
	if !ok {
		that2, ok := that.(ListUsersRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListUsersRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListUsersRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListUsersRequest but is not nil && this == nil")
	}
	if !this.ListUsersRequest_FilterState.Equal(that1.ListUsersRequest_FilterState) {
		return fmt.Errorf("ListUsersRequest_FilterState this(%v) Not Equal that(%v)", this.ListUsersRequest_FilterState, that1.ListUsersRequest_FilterState)
	}
	return nil
}
func (this *ListUsersRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListUsersRequest)
	if !ok {
		that2, ok := that.(ListUsersRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ListUsersRequest_FilterState.Equal(that1.ListUsersRequest_FilterState) {
		return false
	}
	return true
}
func (this *ListUsersRequest_FilterState) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListUsersRequest_FilterState)
	if !ok {
		that2, ok := that.(ListUsersRequest_FilterState)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListUsersRequest_FilterState")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListUsersRequest_FilterState but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListUsersRequest_FilterState but is not nil && this == nil")
	}
	if this.State != that1.State {
		return fmt.Errorf("State this(%v) Not Equal that(%v)", this.State, that1.State)
	}
	return nil
}
func (this *ListUsersRequest_FilterState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListUsersRequest_FilterState)
	if !ok {
		that2, ok := that.(ListUsersRequest_FilterState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	return true
}
func (this *ListUsersResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListUsersResponse)
	if !ok {
		that2, ok := that.(ListUsersResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListUsersResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListUsersResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListUsersResponse but is not nil && this == nil")
	}
	if len(this.Users) != len(that1.Users) {
		return fmt.Errorf("Users this(%v) Not Equal that(%v)", len(this.Users), len(that1.Users))
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return fmt.Errorf("Users this[%v](%v) Not Equal that[%v](%v)", i, this.Users[i], i, that1.Users[i])
		}
	}
	return nil
}
func (this *ListUsersResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListUsersResponse)
	if !ok {
		that2, ok := that.(ListUsersResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	return true
}
func (this *ListClientsRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListClientsRequest)
	if !ok {
		that2, ok := that.(ListClientsRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListClientsRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListClientsRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListClientsRequest but is not nil && this == nil")
	}
	if !this.ListClientsRequest_FilterState.Equal(that1.ListClientsRequest_FilterState) {
		return fmt.Errorf("ListClientsRequest_FilterState this(%v) Not Equal that(%v)", this.ListClientsRequest_FilterState, that1.ListClientsRequest_FilterState)
	}
	return nil
}
func (this *ListClientsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListClientsRequest)
	if !ok {
		that2, ok := that.(ListClientsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ListClientsRequest_FilterState.Equal(that1.ListClientsRequest_FilterState) {
		return false
	}
	return true
}
func (this *ListClientsRequest_FilterState) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListClientsRequest_FilterState)
	if !ok {
		that2, ok := that.(ListClientsRequest_FilterState)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListClientsRequest_FilterState")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListClientsRequest_FilterState but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListClientsRequest_FilterState but is not nil && this == nil")
	}
	if this.State != that1.State {
		return fmt.Errorf("State this(%v) Not Equal that(%v)", this.State, that1.State)
	}
	return nil
}
func (this *ListClientsRequest_FilterState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListClientsRequest_FilterState)
	if !ok {
		that2, ok := that.(ListClientsRequest_FilterState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	return true
}
func (this *CreateUserRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CreateUserRequest)
	if !ok {
		that2, ok := that.(CreateUserRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CreateUserRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CreateUserRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CreateUserRequest but is not nil && this == nil")
	}
	if !this.User.Equal(&that1.User) {
		return fmt.Errorf("User this(%v) Not Equal that(%v)", this.User, that1.User)
	}
	if this.InvitationToken != that1.InvitationToken {
		return fmt.Errorf("InvitationToken this(%v) Not Equal that(%v)", this.InvitationToken, that1.InvitationToken)
	}
	return nil
}
func (this *CreateUserRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateUserRequest)
	if !ok {
		that2, ok := that.(CreateUserRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.User.Equal(&that1.User) {
		return false
	}
	if this.InvitationToken != that1.InvitationToken {
		return false
	}
	return true
}
func (this *UpdateUserRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UpdateUserRequest)
	if !ok {
		that2, ok := that.(UpdateUserRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UpdateUserRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UpdateUserRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UpdateUserRequest but is not nil && this == nil")
	}
	if !this.User.Equal(&that1.User) {
		return fmt.Errorf("User this(%v) Not Equal that(%v)", this.User, that1.User)
	}
	if !this.UpdateMask.Equal(&that1.UpdateMask) {
		return fmt.Errorf("UpdateMask this(%v) Not Equal that(%v)", this.UpdateMask, that1.UpdateMask)
	}
	return nil
}
func (this *UpdateUserRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateUserRequest)
	if !ok {
		that2, ok := that.(UpdateUserRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.User.Equal(&that1.User) {
		return false
	}
	if !this.UpdateMask.Equal(&that1.UpdateMask) {
		return false
	}
	return true
}
func (this *UpdateUserPasswordRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UpdateUserPasswordRequest)
	if !ok {
		that2, ok := that.(UpdateUserPasswordRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UpdateUserPasswordRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UpdateUserPasswordRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UpdateUserPasswordRequest but is not nil && this == nil")
	}
	if this.Old != that1.Old {
		return fmt.Errorf("Old this(%v) Not Equal that(%v)", this.Old, that1.Old)
	}
	if this.New != that1.New {
		return fmt.Errorf("New this(%v) Not Equal that(%v)", this.New, that1.New)
	}
	return nil
}
func (this *UpdateUserPasswordRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateUserPasswordRequest)
	if !ok {
		that2, ok := that.(UpdateUserPasswordRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Old != that1.Old {
		return false
	}
	if this.New != that1.New {
		return false
	}
	return true
}
func (this *GenerateUserAPIKeyRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GenerateUserAPIKeyRequest)
	if !ok {
		that2, ok := that.(GenerateUserAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GenerateUserAPIKeyRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GenerateUserAPIKeyRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GenerateUserAPIKeyRequest but is not nil && this == nil")
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if len(this.Rights) != len(that1.Rights) {
		return fmt.Errorf("Rights this(%v) Not Equal that(%v)", len(this.Rights), len(that1.Rights))
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return fmt.Errorf("Rights this[%v](%v) Not Equal that[%v](%v)", i, this.Rights[i], i, that1.Rights[i])
		}
	}
	return nil
}
func (this *GenerateUserAPIKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GenerateUserAPIKeyRequest)
	if !ok {
		that2, ok := that.(GenerateUserAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Rights) != len(that1.Rights) {
		return false
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return false
		}
	}
	return true
}
func (this *ListUserAPIKeysResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListUserAPIKeysResponse)
	if !ok {
		that2, ok := that.(ListUserAPIKeysResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListUserAPIKeysResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListUserAPIKeysResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListUserAPIKeysResponse but is not nil && this == nil")
	}
	if len(this.APIKeys) != len(that1.APIKeys) {
		return fmt.Errorf("APIKeys this(%v) Not Equal that(%v)", len(this.APIKeys), len(that1.APIKeys))
	}
	for i := range this.APIKeys {
		if !this.APIKeys[i].Equal(that1.APIKeys[i]) {
			return fmt.Errorf("APIKeys this[%v](%v) Not Equal that[%v](%v)", i, this.APIKeys[i], i, that1.APIKeys[i])
		}
	}
	return nil
}
func (this *ListUserAPIKeysResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListUserAPIKeysResponse)
	if !ok {
		that2, ok := that.(ListUserAPIKeysResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.APIKeys) != len(that1.APIKeys) {
		return false
	}
	for i := range this.APIKeys {
		if !this.APIKeys[i].Equal(that1.APIKeys[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateUserAPIKeyRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UpdateUserAPIKeyRequest)
	if !ok {
		that2, ok := that.(UpdateUserAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UpdateUserAPIKeyRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UpdateUserAPIKeyRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UpdateUserAPIKeyRequest but is not nil && this == nil")
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if len(this.Rights) != len(that1.Rights) {
		return fmt.Errorf("Rights this(%v) Not Equal that(%v)", len(this.Rights), len(that1.Rights))
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return fmt.Errorf("Rights this[%v](%v) Not Equal that[%v](%v)", i, this.Rights[i], i, that1.Rights[i])
		}
	}
	return nil
}
func (this *UpdateUserAPIKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateUserAPIKeyRequest)
	if !ok {
		that2, ok := that.(UpdateUserAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Rights) != len(that1.Rights) {
		return false
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return false
		}
	}
	return true
}
func (this *RemoveUserAPIKeyRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RemoveUserAPIKeyRequest)
	if !ok {
		that2, ok := that.(RemoveUserAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RemoveUserAPIKeyRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RemoveUserAPIKeyRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RemoveUserAPIKeyRequest but is not nil && this == nil")
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	return nil
}
func (this *RemoveUserAPIKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveUserAPIKeyRequest)
	if !ok {
		that2, ok := that.(RemoveUserAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *ValidateUserEmailRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ValidateUserEmailRequest)
	if !ok {
		that2, ok := that.(ValidateUserEmailRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ValidateUserEmailRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ValidateUserEmailRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ValidateUserEmailRequest but is not nil && this == nil")
	}
	if this.Token != that1.Token {
		return fmt.Errorf("Token this(%v) Not Equal that(%v)", this.Token, that1.Token)
	}
	return nil
}
func (this *ValidateUserEmailRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidateUserEmailRequest)
	if !ok {
		that2, ok := that.(ValidateUserEmailRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *ListAuthorizedClientsResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListAuthorizedClientsResponse)
	if !ok {
		that2, ok := that.(ListAuthorizedClientsResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListAuthorizedClientsResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListAuthorizedClientsResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListAuthorizedClientsResponse but is not nil && this == nil")
	}
	if len(this.Clients) != len(that1.Clients) {
		return fmt.Errorf("Clients this(%v) Not Equal that(%v)", len(this.Clients), len(that1.Clients))
	}
	for i := range this.Clients {
		if !this.Clients[i].Equal(that1.Clients[i]) {
			return fmt.Errorf("Clients this[%v](%v) Not Equal that[%v](%v)", i, this.Clients[i], i, that1.Clients[i])
		}
	}
	return nil
}
func (this *ListAuthorizedClientsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListAuthorizedClientsResponse)
	if !ok {
		that2, ok := that.(ListAuthorizedClientsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Clients) != len(that1.Clients) {
		return false
	}
	for i := range this.Clients {
		if !this.Clients[i].Equal(that1.Clients[i]) {
			return false
		}
	}
	return true
}
func (this *CreateApplicationRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CreateApplicationRequest)
	if !ok {
		that2, ok := that.(CreateApplicationRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CreateApplicationRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CreateApplicationRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CreateApplicationRequest but is not nil && this == nil")
	}
	if !this.Application.Equal(&that1.Application) {
		return fmt.Errorf("Application this(%v) Not Equal that(%v)", this.Application, that1.Application)
	}
	if !this.OrganizationIdentifiers.Equal(&that1.OrganizationIdentifiers) {
		return fmt.Errorf("OrganizationIdentifiers this(%v) Not Equal that(%v)", this.OrganizationIdentifiers, that1.OrganizationIdentifiers)
	}
	return nil
}
func (this *CreateApplicationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateApplicationRequest)
	if !ok {
		that2, ok := that.(CreateApplicationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Application.Equal(&that1.Application) {
		return false
	}
	if !this.OrganizationIdentifiers.Equal(&that1.OrganizationIdentifiers) {
		return false
	}
	return true
}
func (this *ListApplicationsRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListApplicationsRequest)
	if !ok {
		that2, ok := that.(ListApplicationsRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListApplicationsRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListApplicationsRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListApplicationsRequest but is not nil && this == nil")
	}
	if !this.OrganizationIdentifiers.Equal(&that1.OrganizationIdentifiers) {
		return fmt.Errorf("OrganizationIdentifiers this(%v) Not Equal that(%v)", this.OrganizationIdentifiers, that1.OrganizationIdentifiers)
	}
	return nil
}
func (this *ListApplicationsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListApplicationsRequest)
	if !ok {
		that2, ok := that.(ListApplicationsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OrganizationIdentifiers.Equal(&that1.OrganizationIdentifiers) {
		return false
	}
	return true
}
func (this *ListApplicationsResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListApplicationsResponse)
	if !ok {
		that2, ok := that.(ListApplicationsResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListApplicationsResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListApplicationsResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListApplicationsResponse but is not nil && this == nil")
	}
	if len(this.Applications) != len(that1.Applications) {
		return fmt.Errorf("Applications this(%v) Not Equal that(%v)", len(this.Applications), len(that1.Applications))
	}
	for i := range this.Applications {
		if !this.Applications[i].Equal(that1.Applications[i]) {
			return fmt.Errorf("Applications this[%v](%v) Not Equal that[%v](%v)", i, this.Applications[i], i, that1.Applications[i])
		}
	}
	return nil
}
func (this *ListApplicationsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListApplicationsResponse)
	if !ok {
		that2, ok := that.(ListApplicationsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Applications) != len(that1.Applications) {
		return false
	}
	for i := range this.Applications {
		if !this.Applications[i].Equal(that1.Applications[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateApplicationRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UpdateApplicationRequest)
	if !ok {
		that2, ok := that.(UpdateApplicationRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UpdateApplicationRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UpdateApplicationRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UpdateApplicationRequest but is not nil && this == nil")
	}
	if !this.Application.Equal(&that1.Application) {
		return fmt.Errorf("Application this(%v) Not Equal that(%v)", this.Application, that1.Application)
	}
	if !this.UpdateMask.Equal(&that1.UpdateMask) {
		return fmt.Errorf("UpdateMask this(%v) Not Equal that(%v)", this.UpdateMask, that1.UpdateMask)
	}
	return nil
}
func (this *UpdateApplicationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateApplicationRequest)
	if !ok {
		that2, ok := that.(UpdateApplicationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Application.Equal(&that1.Application) {
		return false
	}
	if !this.UpdateMask.Equal(&that1.UpdateMask) {
		return false
	}
	return true
}
func (this *GenerateApplicationAPIKeyRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GenerateApplicationAPIKeyRequest)
	if !ok {
		that2, ok := that.(GenerateApplicationAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GenerateApplicationAPIKeyRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GenerateApplicationAPIKeyRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GenerateApplicationAPIKeyRequest but is not nil && this == nil")
	}
	if !this.ApplicationIdentifiers.Equal(&that1.ApplicationIdentifiers) {
		return fmt.Errorf("ApplicationIdentifiers this(%v) Not Equal that(%v)", this.ApplicationIdentifiers, that1.ApplicationIdentifiers)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if len(this.Rights) != len(that1.Rights) {
		return fmt.Errorf("Rights this(%v) Not Equal that(%v)", len(this.Rights), len(that1.Rights))
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return fmt.Errorf("Rights this[%v](%v) Not Equal that[%v](%v)", i, this.Rights[i], i, that1.Rights[i])
		}
	}
	return nil
}
func (this *GenerateApplicationAPIKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GenerateApplicationAPIKeyRequest)
	if !ok {
		that2, ok := that.(GenerateApplicationAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationIdentifiers.Equal(&that1.ApplicationIdentifiers) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Rights) != len(that1.Rights) {
		return false
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return false
		}
	}
	return true
}
func (this *ListApplicationAPIKeysResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListApplicationAPIKeysResponse)
	if !ok {
		that2, ok := that.(ListApplicationAPIKeysResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListApplicationAPIKeysResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListApplicationAPIKeysResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListApplicationAPIKeysResponse but is not nil && this == nil")
	}
	if len(this.APIKeys) != len(that1.APIKeys) {
		return fmt.Errorf("APIKeys this(%v) Not Equal that(%v)", len(this.APIKeys), len(that1.APIKeys))
	}
	for i := range this.APIKeys {
		if !this.APIKeys[i].Equal(that1.APIKeys[i]) {
			return fmt.Errorf("APIKeys this[%v](%v) Not Equal that[%v](%v)", i, this.APIKeys[i], i, that1.APIKeys[i])
		}
	}
	return nil
}
func (this *ListApplicationAPIKeysResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListApplicationAPIKeysResponse)
	if !ok {
		that2, ok := that.(ListApplicationAPIKeysResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.APIKeys) != len(that1.APIKeys) {
		return false
	}
	for i := range this.APIKeys {
		if !this.APIKeys[i].Equal(that1.APIKeys[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateApplicationAPIKeyRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UpdateApplicationAPIKeyRequest)
	if !ok {
		that2, ok := that.(UpdateApplicationAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UpdateApplicationAPIKeyRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UpdateApplicationAPIKeyRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UpdateApplicationAPIKeyRequest but is not nil && this == nil")
	}
	if !this.ApplicationIdentifiers.Equal(&that1.ApplicationIdentifiers) {
		return fmt.Errorf("ApplicationIdentifiers this(%v) Not Equal that(%v)", this.ApplicationIdentifiers, that1.ApplicationIdentifiers)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if len(this.Rights) != len(that1.Rights) {
		return fmt.Errorf("Rights this(%v) Not Equal that(%v)", len(this.Rights), len(that1.Rights))
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return fmt.Errorf("Rights this[%v](%v) Not Equal that[%v](%v)", i, this.Rights[i], i, that1.Rights[i])
		}
	}
	return nil
}
func (this *UpdateApplicationAPIKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateApplicationAPIKeyRequest)
	if !ok {
		that2, ok := that.(UpdateApplicationAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationIdentifiers.Equal(&that1.ApplicationIdentifiers) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Rights) != len(that1.Rights) {
		return false
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return false
		}
	}
	return true
}
func (this *RemoveApplicationAPIKeyRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RemoveApplicationAPIKeyRequest)
	if !ok {
		that2, ok := that.(RemoveApplicationAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RemoveApplicationAPIKeyRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RemoveApplicationAPIKeyRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RemoveApplicationAPIKeyRequest but is not nil && this == nil")
	}
	if !this.ApplicationIdentifiers.Equal(&that1.ApplicationIdentifiers) {
		return fmt.Errorf("ApplicationIdentifiers this(%v) Not Equal that(%v)", this.ApplicationIdentifiers, that1.ApplicationIdentifiers)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	return nil
}
func (this *RemoveApplicationAPIKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveApplicationAPIKeyRequest)
	if !ok {
		that2, ok := that.(RemoveApplicationAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationIdentifiers.Equal(&that1.ApplicationIdentifiers) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *ListApplicationCollaboratorsResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListApplicationCollaboratorsResponse)
	if !ok {
		that2, ok := that.(ListApplicationCollaboratorsResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListApplicationCollaboratorsResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListApplicationCollaboratorsResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListApplicationCollaboratorsResponse but is not nil && this == nil")
	}
	if len(this.Collaborators) != len(that1.Collaborators) {
		return fmt.Errorf("Collaborators this(%v) Not Equal that(%v)", len(this.Collaborators), len(that1.Collaborators))
	}
	for i := range this.Collaborators {
		if !this.Collaborators[i].Equal(that1.Collaborators[i]) {
			return fmt.Errorf("Collaborators this[%v](%v) Not Equal that[%v](%v)", i, this.Collaborators[i], i, that1.Collaborators[i])
		}
	}
	return nil
}
func (this *ListApplicationCollaboratorsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListApplicationCollaboratorsResponse)
	if !ok {
		that2, ok := that.(ListApplicationCollaboratorsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Collaborators) != len(that1.Collaborators) {
		return false
	}
	for i := range this.Collaborators {
		if !this.Collaborators[i].Equal(that1.Collaborators[i]) {
			return false
		}
	}
	return true
}
func (this *ListApplicationRightsResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListApplicationRightsResponse)
	if !ok {
		that2, ok := that.(ListApplicationRightsResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListApplicationRightsResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListApplicationRightsResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListApplicationRightsResponse but is not nil && this == nil")
	}
	if len(this.Rights) != len(that1.Rights) {
		return fmt.Errorf("Rights this(%v) Not Equal that(%v)", len(this.Rights), len(that1.Rights))
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return fmt.Errorf("Rights this[%v](%v) Not Equal that[%v](%v)", i, this.Rights[i], i, that1.Rights[i])
		}
	}
	return nil
}
func (this *ListApplicationRightsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListApplicationRightsResponse)
	if !ok {
		that2, ok := that.(ListApplicationRightsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rights) != len(that1.Rights) {
		return false
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return false
		}
	}
	return true
}
func (this *CreateGatewayRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CreateGatewayRequest)
	if !ok {
		that2, ok := that.(CreateGatewayRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CreateGatewayRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CreateGatewayRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CreateGatewayRequest but is not nil && this == nil")
	}
	if !this.Gateway.Equal(&that1.Gateway) {
		return fmt.Errorf("Gateway this(%v) Not Equal that(%v)", this.Gateway, that1.Gateway)
	}
	if !this.OrganizationIdentifiers.Equal(&that1.OrganizationIdentifiers) {
		return fmt.Errorf("OrganizationIdentifiers this(%v) Not Equal that(%v)", this.OrganizationIdentifiers, that1.OrganizationIdentifiers)
	}
	return nil
}
func (this *CreateGatewayRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateGatewayRequest)
	if !ok {
		that2, ok := that.(CreateGatewayRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Gateway.Equal(&that1.Gateway) {
		return false
	}
	if !this.OrganizationIdentifiers.Equal(&that1.OrganizationIdentifiers) {
		return false
	}
	return true
}
func (this *ListGatewaysRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListGatewaysRequest)
	if !ok {
		that2, ok := that.(ListGatewaysRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListGatewaysRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListGatewaysRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListGatewaysRequest but is not nil && this == nil")
	}
	if !this.OrganizationIdentifiers.Equal(&that1.OrganizationIdentifiers) {
		return fmt.Errorf("OrganizationIdentifiers this(%v) Not Equal that(%v)", this.OrganizationIdentifiers, that1.OrganizationIdentifiers)
	}
	return nil
}
func (this *ListGatewaysRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListGatewaysRequest)
	if !ok {
		that2, ok := that.(ListGatewaysRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OrganizationIdentifiers.Equal(&that1.OrganizationIdentifiers) {
		return false
	}
	return true
}
func (this *ListGatewaysResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListGatewaysResponse)
	if !ok {
		that2, ok := that.(ListGatewaysResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListGatewaysResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListGatewaysResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListGatewaysResponse but is not nil && this == nil")
	}
	if len(this.Gateways) != len(that1.Gateways) {
		return fmt.Errorf("Gateways this(%v) Not Equal that(%v)", len(this.Gateways), len(that1.Gateways))
	}
	for i := range this.Gateways {
		if !this.Gateways[i].Equal(that1.Gateways[i]) {
			return fmt.Errorf("Gateways this[%v](%v) Not Equal that[%v](%v)", i, this.Gateways[i], i, that1.Gateways[i])
		}
	}
	return nil
}
func (this *ListGatewaysResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListGatewaysResponse)
	if !ok {
		that2, ok := that.(ListGatewaysResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Gateways) != len(that1.Gateways) {
		return false
	}
	for i := range this.Gateways {
		if !this.Gateways[i].Equal(that1.Gateways[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateGatewayRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UpdateGatewayRequest)
	if !ok {
		that2, ok := that.(UpdateGatewayRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UpdateGatewayRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UpdateGatewayRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UpdateGatewayRequest but is not nil && this == nil")
	}
	if !this.Gateway.Equal(&that1.Gateway) {
		return fmt.Errorf("Gateway this(%v) Not Equal that(%v)", this.Gateway, that1.Gateway)
	}
	if !this.UpdateMask.Equal(&that1.UpdateMask) {
		return fmt.Errorf("UpdateMask this(%v) Not Equal that(%v)", this.UpdateMask, that1.UpdateMask)
	}
	return nil
}
func (this *UpdateGatewayRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateGatewayRequest)
	if !ok {
		that2, ok := that.(UpdateGatewayRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Gateway.Equal(&that1.Gateway) {
		return false
	}
	if !this.UpdateMask.Equal(&that1.UpdateMask) {
		return false
	}
	return true
}
func (this *GenerateGatewayAPIKeyRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GenerateGatewayAPIKeyRequest)
	if !ok {
		that2, ok := that.(GenerateGatewayAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GenerateGatewayAPIKeyRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GenerateGatewayAPIKeyRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GenerateGatewayAPIKeyRequest but is not nil && this == nil")
	}
	if !this.GatewayIdentifiers.Equal(&that1.GatewayIdentifiers) {
		return fmt.Errorf("GatewayIdentifiers this(%v) Not Equal that(%v)", this.GatewayIdentifiers, that1.GatewayIdentifiers)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if len(this.Rights) != len(that1.Rights) {
		return fmt.Errorf("Rights this(%v) Not Equal that(%v)", len(this.Rights), len(that1.Rights))
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return fmt.Errorf("Rights this[%v](%v) Not Equal that[%v](%v)", i, this.Rights[i], i, that1.Rights[i])
		}
	}
	return nil
}
func (this *GenerateGatewayAPIKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GenerateGatewayAPIKeyRequest)
	if !ok {
		that2, ok := that.(GenerateGatewayAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GatewayIdentifiers.Equal(&that1.GatewayIdentifiers) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Rights) != len(that1.Rights) {
		return false
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return false
		}
	}
	return true
}
func (this *ListGatewayAPIKeysResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListGatewayAPIKeysResponse)
	if !ok {
		that2, ok := that.(ListGatewayAPIKeysResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListGatewayAPIKeysResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListGatewayAPIKeysResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListGatewayAPIKeysResponse but is not nil && this == nil")
	}
	if len(this.APIKeys) != len(that1.APIKeys) {
		return fmt.Errorf("APIKeys this(%v) Not Equal that(%v)", len(this.APIKeys), len(that1.APIKeys))
	}
	for i := range this.APIKeys {
		if !this.APIKeys[i].Equal(that1.APIKeys[i]) {
			return fmt.Errorf("APIKeys this[%v](%v) Not Equal that[%v](%v)", i, this.APIKeys[i], i, that1.APIKeys[i])
		}
	}
	return nil
}
func (this *ListGatewayAPIKeysResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListGatewayAPIKeysResponse)
	if !ok {
		that2, ok := that.(ListGatewayAPIKeysResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.APIKeys) != len(that1.APIKeys) {
		return false
	}
	for i := range this.APIKeys {
		if !this.APIKeys[i].Equal(that1.APIKeys[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateGatewayAPIKeyRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UpdateGatewayAPIKeyRequest)
	if !ok {
		that2, ok := that.(UpdateGatewayAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UpdateGatewayAPIKeyRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UpdateGatewayAPIKeyRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UpdateGatewayAPIKeyRequest but is not nil && this == nil")
	}
	if !this.GatewayIdentifiers.Equal(&that1.GatewayIdentifiers) {
		return fmt.Errorf("GatewayIdentifiers this(%v) Not Equal that(%v)", this.GatewayIdentifiers, that1.GatewayIdentifiers)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if len(this.Rights) != len(that1.Rights) {
		return fmt.Errorf("Rights this(%v) Not Equal that(%v)", len(this.Rights), len(that1.Rights))
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return fmt.Errorf("Rights this[%v](%v) Not Equal that[%v](%v)", i, this.Rights[i], i, that1.Rights[i])
		}
	}
	return nil
}
func (this *UpdateGatewayAPIKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateGatewayAPIKeyRequest)
	if !ok {
		that2, ok := that.(UpdateGatewayAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GatewayIdentifiers.Equal(&that1.GatewayIdentifiers) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Rights) != len(that1.Rights) {
		return false
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return false
		}
	}
	return true
}
func (this *RemoveGatewayAPIKeyRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RemoveGatewayAPIKeyRequest)
	if !ok {
		that2, ok := that.(RemoveGatewayAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RemoveGatewayAPIKeyRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RemoveGatewayAPIKeyRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RemoveGatewayAPIKeyRequest but is not nil && this == nil")
	}
	if !this.GatewayIdentifiers.Equal(&that1.GatewayIdentifiers) {
		return fmt.Errorf("GatewayIdentifiers this(%v) Not Equal that(%v)", this.GatewayIdentifiers, that1.GatewayIdentifiers)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	return nil
}
func (this *RemoveGatewayAPIKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveGatewayAPIKeyRequest)
	if !ok {
		that2, ok := that.(RemoveGatewayAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GatewayIdentifiers.Equal(&that1.GatewayIdentifiers) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *ListGatewayCollaboratorsResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListGatewayCollaboratorsResponse)
	if !ok {
		that2, ok := that.(ListGatewayCollaboratorsResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListGatewayCollaboratorsResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListGatewayCollaboratorsResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListGatewayCollaboratorsResponse but is not nil && this == nil")
	}
	if len(this.Collaborators) != len(that1.Collaborators) {
		return fmt.Errorf("Collaborators this(%v) Not Equal that(%v)", len(this.Collaborators), len(that1.Collaborators))
	}
	for i := range this.Collaborators {
		if !this.Collaborators[i].Equal(that1.Collaborators[i]) {
			return fmt.Errorf("Collaborators this[%v](%v) Not Equal that[%v](%v)", i, this.Collaborators[i], i, that1.Collaborators[i])
		}
	}
	return nil
}
func (this *ListGatewayCollaboratorsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListGatewayCollaboratorsResponse)
	if !ok {
		that2, ok := that.(ListGatewayCollaboratorsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Collaborators) != len(that1.Collaborators) {
		return false
	}
	for i := range this.Collaborators {
		if !this.Collaborators[i].Equal(that1.Collaborators[i]) {
			return false
		}
	}
	return true
}
func (this *ListGatewayRightsResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListGatewayRightsResponse)
	if !ok {
		that2, ok := that.(ListGatewayRightsResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListGatewayRightsResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListGatewayRightsResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListGatewayRightsResponse but is not nil && this == nil")
	}
	if len(this.Rights) != len(that1.Rights) {
		return fmt.Errorf("Rights this(%v) Not Equal that(%v)", len(this.Rights), len(that1.Rights))
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return fmt.Errorf("Rights this[%v](%v) Not Equal that[%v](%v)", i, this.Rights[i], i, that1.Rights[i])
		}
	}
	return nil
}
func (this *ListGatewayRightsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListGatewayRightsResponse)
	if !ok {
		that2, ok := that.(ListGatewayRightsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rights) != len(that1.Rights) {
		return false
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return false
		}
	}
	return true
}
func (this *CreateClientRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CreateClientRequest)
	if !ok {
		that2, ok := that.(CreateClientRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CreateClientRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CreateClientRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CreateClientRequest but is not nil && this == nil")
	}
	if !this.Client.Equal(&that1.Client) {
		return fmt.Errorf("Client this(%v) Not Equal that(%v)", this.Client, that1.Client)
	}
	return nil
}
func (this *CreateClientRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateClientRequest)
	if !ok {
		that2, ok := that.(CreateClientRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Client.Equal(&that1.Client) {
		return false
	}
	return true
}
func (this *ListClientsResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListClientsResponse)
	if !ok {
		that2, ok := that.(ListClientsResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListClientsResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListClientsResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListClientsResponse but is not nil && this == nil")
	}
	if len(this.Clients) != len(that1.Clients) {
		return fmt.Errorf("Clients this(%v) Not Equal that(%v)", len(this.Clients), len(that1.Clients))
	}
	for i := range this.Clients {
		if !this.Clients[i].Equal(that1.Clients[i]) {
			return fmt.Errorf("Clients this[%v](%v) Not Equal that[%v](%v)", i, this.Clients[i], i, that1.Clients[i])
		}
	}
	return nil
}
func (this *ListClientsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListClientsResponse)
	if !ok {
		that2, ok := that.(ListClientsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Clients) != len(that1.Clients) {
		return false
	}
	for i := range this.Clients {
		if !this.Clients[i].Equal(that1.Clients[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateClientRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UpdateClientRequest)
	if !ok {
		that2, ok := that.(UpdateClientRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UpdateClientRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UpdateClientRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UpdateClientRequest but is not nil && this == nil")
	}
	if !this.Client.Equal(&that1.Client) {
		return fmt.Errorf("Client this(%v) Not Equal that(%v)", this.Client, that1.Client)
	}
	if !this.UpdateMask.Equal(&that1.UpdateMask) {
		return fmt.Errorf("UpdateMask this(%v) Not Equal that(%v)", this.UpdateMask, that1.UpdateMask)
	}
	return nil
}
func (this *UpdateClientRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateClientRequest)
	if !ok {
		that2, ok := that.(UpdateClientRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Client.Equal(&that1.Client) {
		return false
	}
	if !this.UpdateMask.Equal(&that1.UpdateMask) {
		return false
	}
	return true
}
func (this *CreateOrganizationRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CreateOrganizationRequest)
	if !ok {
		that2, ok := that.(CreateOrganizationRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CreateOrganizationRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CreateOrganizationRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CreateOrganizationRequest but is not nil && this == nil")
	}
	if !this.Organization.Equal(&that1.Organization) {
		return fmt.Errorf("Organization this(%v) Not Equal that(%v)", this.Organization, that1.Organization)
	}
	return nil
}
func (this *CreateOrganizationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateOrganizationRequest)
	if !ok {
		that2, ok := that.(CreateOrganizationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Organization.Equal(&that1.Organization) {
		return false
	}
	return true
}
func (this *ListOrganizationsResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListOrganizationsResponse)
	if !ok {
		that2, ok := that.(ListOrganizationsResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListOrganizationsResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListOrganizationsResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListOrganizationsResponse but is not nil && this == nil")
	}
	if len(this.Organizations) != len(that1.Organizations) {
		return fmt.Errorf("Organizations this(%v) Not Equal that(%v)", len(this.Organizations), len(that1.Organizations))
	}
	for i := range this.Organizations {
		if !this.Organizations[i].Equal(that1.Organizations[i]) {
			return fmt.Errorf("Organizations this[%v](%v) Not Equal that[%v](%v)", i, this.Organizations[i], i, that1.Organizations[i])
		}
	}
	return nil
}
func (this *ListOrganizationsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListOrganizationsResponse)
	if !ok {
		that2, ok := that.(ListOrganizationsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Organizations) != len(that1.Organizations) {
		return false
	}
	for i := range this.Organizations {
		if !this.Organizations[i].Equal(that1.Organizations[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateOrganizationRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UpdateOrganizationRequest)
	if !ok {
		that2, ok := that.(UpdateOrganizationRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UpdateOrganizationRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UpdateOrganizationRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UpdateOrganizationRequest but is not nil && this == nil")
	}
	if !this.Organization.Equal(&that1.Organization) {
		return fmt.Errorf("Organization this(%v) Not Equal that(%v)", this.Organization, that1.Organization)
	}
	if !this.UpdateMask.Equal(&that1.UpdateMask) {
		return fmt.Errorf("UpdateMask this(%v) Not Equal that(%v)", this.UpdateMask, that1.UpdateMask)
	}
	return nil
}
func (this *UpdateOrganizationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateOrganizationRequest)
	if !ok {
		that2, ok := that.(UpdateOrganizationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Organization.Equal(&that1.Organization) {
		return false
	}
	if !this.UpdateMask.Equal(&that1.UpdateMask) {
		return false
	}
	return true
}
func (this *GenerateOrganizationAPIKeyRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GenerateOrganizationAPIKeyRequest)
	if !ok {
		that2, ok := that.(GenerateOrganizationAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GenerateOrganizationAPIKeyRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GenerateOrganizationAPIKeyRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GenerateOrganizationAPIKeyRequest but is not nil && this == nil")
	}
	if !this.OrganizationIdentifiers.Equal(&that1.OrganizationIdentifiers) {
		return fmt.Errorf("OrganizationIdentifiers this(%v) Not Equal that(%v)", this.OrganizationIdentifiers, that1.OrganizationIdentifiers)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if len(this.Rights) != len(that1.Rights) {
		return fmt.Errorf("Rights this(%v) Not Equal that(%v)", len(this.Rights), len(that1.Rights))
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return fmt.Errorf("Rights this[%v](%v) Not Equal that[%v](%v)", i, this.Rights[i], i, that1.Rights[i])
		}
	}
	return nil
}
func (this *GenerateOrganizationAPIKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GenerateOrganizationAPIKeyRequest)
	if !ok {
		that2, ok := that.(GenerateOrganizationAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OrganizationIdentifiers.Equal(&that1.OrganizationIdentifiers) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Rights) != len(that1.Rights) {
		return false
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return false
		}
	}
	return true
}
func (this *ListOrganizationAPIKeysResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListOrganizationAPIKeysResponse)
	if !ok {
		that2, ok := that.(ListOrganizationAPIKeysResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListOrganizationAPIKeysResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListOrganizationAPIKeysResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListOrganizationAPIKeysResponse but is not nil && this == nil")
	}
	if len(this.APIKeys) != len(that1.APIKeys) {
		return fmt.Errorf("APIKeys this(%v) Not Equal that(%v)", len(this.APIKeys), len(that1.APIKeys))
	}
	for i := range this.APIKeys {
		if !this.APIKeys[i].Equal(that1.APIKeys[i]) {
			return fmt.Errorf("APIKeys this[%v](%v) Not Equal that[%v](%v)", i, this.APIKeys[i], i, that1.APIKeys[i])
		}
	}
	return nil
}
func (this *ListOrganizationAPIKeysResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListOrganizationAPIKeysResponse)
	if !ok {
		that2, ok := that.(ListOrganizationAPIKeysResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.APIKeys) != len(that1.APIKeys) {
		return false
	}
	for i := range this.APIKeys {
		if !this.APIKeys[i].Equal(that1.APIKeys[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateOrganizationAPIKeyRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UpdateOrganizationAPIKeyRequest)
	if !ok {
		that2, ok := that.(UpdateOrganizationAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UpdateOrganizationAPIKeyRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UpdateOrganizationAPIKeyRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UpdateOrganizationAPIKeyRequest but is not nil && this == nil")
	}
	if !this.OrganizationIdentifiers.Equal(&that1.OrganizationIdentifiers) {
		return fmt.Errorf("OrganizationIdentifiers this(%v) Not Equal that(%v)", this.OrganizationIdentifiers, that1.OrganizationIdentifiers)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if len(this.Rights) != len(that1.Rights) {
		return fmt.Errorf("Rights this(%v) Not Equal that(%v)", len(this.Rights), len(that1.Rights))
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return fmt.Errorf("Rights this[%v](%v) Not Equal that[%v](%v)", i, this.Rights[i], i, that1.Rights[i])
		}
	}
	return nil
}
func (this *UpdateOrganizationAPIKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateOrganizationAPIKeyRequest)
	if !ok {
		that2, ok := that.(UpdateOrganizationAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OrganizationIdentifiers.Equal(&that1.OrganizationIdentifiers) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Rights) != len(that1.Rights) {
		return false
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return false
		}
	}
	return true
}
func (this *RemoveOrganizationAPIKeyRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RemoveOrganizationAPIKeyRequest)
	if !ok {
		that2, ok := that.(RemoveOrganizationAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RemoveOrganizationAPIKeyRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RemoveOrganizationAPIKeyRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RemoveOrganizationAPIKeyRequest but is not nil && this == nil")
	}
	if !this.OrganizationIdentifiers.Equal(&that1.OrganizationIdentifiers) {
		return fmt.Errorf("OrganizationIdentifiers this(%v) Not Equal that(%v)", this.OrganizationIdentifiers, that1.OrganizationIdentifiers)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	return nil
}
func (this *RemoveOrganizationAPIKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveOrganizationAPIKeyRequest)
	if !ok {
		that2, ok := that.(RemoveOrganizationAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OrganizationIdentifiers.Equal(&that1.OrganizationIdentifiers) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *ListOrganizationMembersResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListOrganizationMembersResponse)
	if !ok {
		that2, ok := that.(ListOrganizationMembersResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListOrganizationMembersResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListOrganizationMembersResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListOrganizationMembersResponse but is not nil && this == nil")
	}
	if len(this.Members) != len(that1.Members) {
		return fmt.Errorf("Members this(%v) Not Equal that(%v)", len(this.Members), len(that1.Members))
	}
	for i := range this.Members {
		if !this.Members[i].Equal(that1.Members[i]) {
			return fmt.Errorf("Members this[%v](%v) Not Equal that[%v](%v)", i, this.Members[i], i, that1.Members[i])
		}
	}
	return nil
}
func (this *ListOrganizationMembersResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListOrganizationMembersResponse)
	if !ok {
		that2, ok := that.(ListOrganizationMembersResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Members) != len(that1.Members) {
		return false
	}
	for i := range this.Members {
		if !this.Members[i].Equal(that1.Members[i]) {
			return false
		}
	}
	return true
}
func (this *ListOrganizationRightsResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListOrganizationRightsResponse)
	if !ok {
		that2, ok := that.(ListOrganizationRightsResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListOrganizationRightsResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListOrganizationRightsResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListOrganizationRightsResponse but is not nil && this == nil")
	}
	if len(this.Rights) != len(that1.Rights) {
		return fmt.Errorf("Rights this(%v) Not Equal that(%v)", len(this.Rights), len(that1.Rights))
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return fmt.Errorf("Rights this[%v](%v) Not Equal that[%v](%v)", i, this.Rights[i], i, that1.Rights[i])
		}
	}
	return nil
}
func (this *ListOrganizationRightsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListOrganizationRightsResponse)
	if !ok {
		that2, ok := that.(ListOrganizationRightsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rights) != len(that1.Rights) {
		return false
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return false
		}
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GtwGr service

type GtwGrClient interface {
	// PullConfiguration sends a new DeviceConfiguration, with all the latest values,
	// at connection and when a gateway's configuration is updated.
	PullConfiguration(ctx context.Context, in *PullConfigurationRequest, opts ...grpc.CallOption) (GtwGr_PullConfigurationClient, error)
}

type gtwGrClient struct {
	cc *grpc.ClientConn
}

func NewGtwGrClient(cc *grpc.ClientConn) GtwGrClient {
	return &gtwGrClient{cc}
}

func (c *gtwGrClient) PullConfiguration(ctx context.Context, in *PullConfigurationRequest, opts ...grpc.CallOption) (GtwGr_PullConfigurationClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GtwGr_serviceDesc.Streams[0], c.cc, "/ttn.lorawan.v3.GtwGr/PullConfiguration", opts...)
	if err != nil {
		return nil, err
	}
	x := &gtwGrPullConfigurationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GtwGr_PullConfigurationClient interface {
	Recv() (*Gateway, error)
	grpc.ClientStream
}

type gtwGrPullConfigurationClient struct {
	grpc.ClientStream
}

func (x *gtwGrPullConfigurationClient) Recv() (*Gateway, error) {
	m := new(Gateway)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GtwGr service

type GtwGrServer interface {
	// PullConfiguration sends a new DeviceConfiguration, with all the latest values,
	// at connection and when a gateway's configuration is updated.
	PullConfiguration(*PullConfigurationRequest, GtwGr_PullConfigurationServer) error
}

func RegisterGtwGrServer(s *grpc.Server, srv GtwGrServer) {
	s.RegisterService(&_GtwGr_serviceDesc, srv)
}

func _GtwGr_PullConfiguration_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullConfigurationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GtwGrServer).PullConfiguration(m, &gtwGrPullConfigurationServer{stream})
}

type GtwGr_PullConfigurationServer interface {
	Send(*Gateway) error
	grpc.ServerStream
}

type gtwGrPullConfigurationServer struct {
	grpc.ServerStream
}

func (x *gtwGrPullConfigurationServer) Send(m *Gateway) error {
	return x.ServerStream.SendMsg(m)
}

var _GtwGr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.GtwGr",
	HandlerType: (*GtwGrServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullConfiguration",
			Handler:       _GtwGr_PullConfiguration_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/TheThingsNetwork/ttn/api/identityserver.proto",
}

// Client API for IsAdmin service

type IsAdminClient interface {
	// GetSettings returns the values of the editable settings.
	GetSettings(ctx context.Context, in *google_protobuf3.Empty, opts ...grpc.CallOption) (*IdentityServerSettings, error)
	// UpdateSettings updates the editable settings.
	UpdateSettings(ctx context.Context, in *UpdateSettingsRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// CreateUser creates an account on behalf of an user.
	// A password is generated and sent to the user's email.
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// GetUser returns the user account that matches the identifier.
	GetUser(ctx context.Context, in *UserIdentifiers, opts ...grpc.CallOption) (*User, error)
	// ListUsers returns a list of users with optional filtering.
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	// UpdateUser updates an user.
	// If email address is updated it sends an email to validate it if and only if
	// the `SkipValidation` setting is disabled.
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// ResetUserPassword sets an autogenerated password to the user that matches
	// the identifier. The new password is returned on the response but also send
	// by email to the user.
	ResetUserPassword(ctx context.Context, in *UserIdentifiers, opts ...grpc.CallOption) (*ResetUserPasswordResponse, error)
	// DeleteUser deletes an user.
	DeleteUser(ctx context.Context, in *UserIdentifiers, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// SendInvitation sends by email a token that can be used to create a new account.
	// All invitations are expirable and the TTL is defined on a setitngs variable.
	SendInvitation(ctx context.Context, in *SendInvitationRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// ListInvitations lists all the sent invitations.
	ListInvitations(ctx context.Context, in *google_protobuf3.Empty, opts ...grpc.CallOption) (*ListInvitationsResponse, error)
	// DeleteInvitation revokes an unused invitation or deletes an expired one.
	DeleteInvitation(ctx context.Context, in *DeleteInvitationRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// GetClient returns the client that matches the identifier.
	GetClient(ctx context.Context, in *ClientIdentifiers, opts ...grpc.CallOption) (*Client, error)
	// ListClients returns a list of third-party clients with optional filtering.
	ListClients(ctx context.Context, in *ListClientsRequest, opts ...grpc.CallOption) (*ListClientsResponse, error)
	// UpdateClient updates a third-party client.
	UpdateClient(ctx context.Context, in *UpdateClientRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// DeleteClient deletes the client that matches the identifier and revokes all
	// user authorizations.
	DeleteClient(ctx context.Context, in *ClientIdentifiers, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
}

type isAdminClient struct {
	cc *grpc.ClientConn
}

func NewIsAdminClient(cc *grpc.ClientConn) IsAdminClient {
	return &isAdminClient{cc}
}

func (c *isAdminClient) GetSettings(ctx context.Context, in *google_protobuf3.Empty, opts ...grpc.CallOption) (*IdentityServerSettings, error) {
	out := new(IdentityServerSettings)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsAdmin/GetSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isAdminClient) UpdateSettings(ctx context.Context, in *UpdateSettingsRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsAdmin/UpdateSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isAdminClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsAdmin/CreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isAdminClient) GetUser(ctx context.Context, in *UserIdentifiers, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsAdmin/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isAdminClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	out := new(ListUsersResponse)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsAdmin/ListUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isAdminClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsAdmin/UpdateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isAdminClient) ResetUserPassword(ctx context.Context, in *UserIdentifiers, opts ...grpc.CallOption) (*ResetUserPasswordResponse, error) {
	out := new(ResetUserPasswordResponse)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsAdmin/ResetUserPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isAdminClient) DeleteUser(ctx context.Context, in *UserIdentifiers, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsAdmin/DeleteUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isAdminClient) SendInvitation(ctx context.Context, in *SendInvitationRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsAdmin/SendInvitation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isAdminClient) ListInvitations(ctx context.Context, in *google_protobuf3.Empty, opts ...grpc.CallOption) (*ListInvitationsResponse, error) {
	out := new(ListInvitationsResponse)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsAdmin/ListInvitations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isAdminClient) DeleteInvitation(ctx context.Context, in *DeleteInvitationRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsAdmin/DeleteInvitation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isAdminClient) GetClient(ctx context.Context, in *ClientIdentifiers, opts ...grpc.CallOption) (*Client, error) {
	out := new(Client)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsAdmin/GetClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isAdminClient) ListClients(ctx context.Context, in *ListClientsRequest, opts ...grpc.CallOption) (*ListClientsResponse, error) {
	out := new(ListClientsResponse)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsAdmin/ListClients", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isAdminClient) UpdateClient(ctx context.Context, in *UpdateClientRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsAdmin/UpdateClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isAdminClient) DeleteClient(ctx context.Context, in *ClientIdentifiers, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsAdmin/DeleteClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IsAdmin service

type IsAdminServer interface {
	// GetSettings returns the values of the editable settings.
	GetSettings(context.Context, *google_protobuf3.Empty) (*IdentityServerSettings, error)
	// UpdateSettings updates the editable settings.
	UpdateSettings(context.Context, *UpdateSettingsRequest) (*google_protobuf3.Empty, error)
	// CreateUser creates an account on behalf of an user.
	// A password is generated and sent to the user's email.
	CreateUser(context.Context, *CreateUserRequest) (*google_protobuf3.Empty, error)
	// GetUser returns the user account that matches the identifier.
	GetUser(context.Context, *UserIdentifiers) (*User, error)
	// ListUsers returns a list of users with optional filtering.
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	// UpdateUser updates an user.
	// If email address is updated it sends an email to validate it if and only if
	// the `SkipValidation` setting is disabled.
	UpdateUser(context.Context, *UpdateUserRequest) (*google_protobuf3.Empty, error)
	// ResetUserPassword sets an autogenerated password to the user that matches
	// the identifier. The new password is returned on the response but also send
	// by email to the user.
	ResetUserPassword(context.Context, *UserIdentifiers) (*ResetUserPasswordResponse, error)
	// DeleteUser deletes an user.
	DeleteUser(context.Context, *UserIdentifiers) (*google_protobuf3.Empty, error)
	// SendInvitation sends by email a token that can be used to create a new account.
	// All invitations are expirable and the TTL is defined on a setitngs variable.
	SendInvitation(context.Context, *SendInvitationRequest) (*google_protobuf3.Empty, error)
	// ListInvitations lists all the sent invitations.
	ListInvitations(context.Context, *google_protobuf3.Empty) (*ListInvitationsResponse, error)
	// DeleteInvitation revokes an unused invitation or deletes an expired one.
	DeleteInvitation(context.Context, *DeleteInvitationRequest) (*google_protobuf3.Empty, error)
	// GetClient returns the client that matches the identifier.
	GetClient(context.Context, *ClientIdentifiers) (*Client, error)
	// ListClients returns a list of third-party clients with optional filtering.
	ListClients(context.Context, *ListClientsRequest) (*ListClientsResponse, error)
	// UpdateClient updates a third-party client.
	UpdateClient(context.Context, *UpdateClientRequest) (*google_protobuf3.Empty, error)
	// DeleteClient deletes the client that matches the identifier and revokes all
	// user authorizations.
	DeleteClient(context.Context, *ClientIdentifiers) (*google_protobuf3.Empty, error)
}

func RegisterIsAdminServer(s *grpc.Server, srv IsAdminServer) {
	s.RegisterService(&_IsAdmin_serviceDesc, srv)
}

func _IsAdmin_GetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf3.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsAdminServer).GetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsAdmin/GetSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsAdminServer).GetSettings(ctx, req.(*google_protobuf3.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsAdmin_UpdateSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsAdminServer).UpdateSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsAdmin/UpdateSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsAdminServer).UpdateSettings(ctx, req.(*UpdateSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsAdmin_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsAdminServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsAdmin/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsAdminServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsAdmin_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsAdminServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsAdmin/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsAdminServer).GetUser(ctx, req.(*UserIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsAdmin_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsAdminServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsAdmin/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsAdminServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsAdmin_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsAdminServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsAdmin/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsAdminServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsAdmin_ResetUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsAdminServer).ResetUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsAdmin/ResetUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsAdminServer).ResetUserPassword(ctx, req.(*UserIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsAdmin_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsAdminServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsAdmin/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsAdminServer).DeleteUser(ctx, req.(*UserIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsAdmin_SendInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsAdminServer).SendInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsAdmin/SendInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsAdminServer).SendInvitation(ctx, req.(*SendInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsAdmin_ListInvitations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf3.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsAdminServer).ListInvitations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsAdmin/ListInvitations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsAdminServer).ListInvitations(ctx, req.(*google_protobuf3.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsAdmin_DeleteInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsAdminServer).DeleteInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsAdmin/DeleteInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsAdminServer).DeleteInvitation(ctx, req.(*DeleteInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsAdmin_GetClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsAdminServer).GetClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsAdmin/GetClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsAdminServer).GetClient(ctx, req.(*ClientIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsAdmin_ListClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsAdminServer).ListClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsAdmin/ListClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsAdminServer).ListClients(ctx, req.(*ListClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsAdmin_UpdateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsAdminServer).UpdateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsAdmin/UpdateClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsAdminServer).UpdateClient(ctx, req.(*UpdateClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsAdmin_DeleteClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsAdminServer).DeleteClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsAdmin/DeleteClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsAdminServer).DeleteClient(ctx, req.(*ClientIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _IsAdmin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.IsAdmin",
	HandlerType: (*IsAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSettings",
			Handler:    _IsAdmin_GetSettings_Handler,
		},
		{
			MethodName: "UpdateSettings",
			Handler:    _IsAdmin_UpdateSettings_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _IsAdmin_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _IsAdmin_GetUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _IsAdmin_ListUsers_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _IsAdmin_UpdateUser_Handler,
		},
		{
			MethodName: "ResetUserPassword",
			Handler:    _IsAdmin_ResetUserPassword_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _IsAdmin_DeleteUser_Handler,
		},
		{
			MethodName: "SendInvitation",
			Handler:    _IsAdmin_SendInvitation_Handler,
		},
		{
			MethodName: "ListInvitations",
			Handler:    _IsAdmin_ListInvitations_Handler,
		},
		{
			MethodName: "DeleteInvitation",
			Handler:    _IsAdmin_DeleteInvitation_Handler,
		},
		{
			MethodName: "GetClient",
			Handler:    _IsAdmin_GetClient_Handler,
		},
		{
			MethodName: "ListClients",
			Handler:    _IsAdmin_ListClients_Handler,
		},
		{
			MethodName: "UpdateClient",
			Handler:    _IsAdmin_UpdateClient_Handler,
		},
		{
			MethodName: "DeleteClient",
			Handler:    _IsAdmin_DeleteClient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/ttn/api/identityserver.proto",
}

// Client API for IsUser service

type IsUserClient interface {
	// CreateUser creates a new user on the network.
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// GetUser returns the current user.
	GetUser(ctx context.Context, in *google_protobuf3.Empty, opts ...grpc.CallOption) (*User, error)
	// UpdateUser edits the profile of the authenticated user.
	// If email address is updated it sends an email to validate it if and only if
	// the `SkipValidation` setting is disabled.
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// UpdateUserPassword sets a new password for the authenticated user account.
	UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// DeleteUser permantly deletes the user account of the authenticated user.
	DeleteUser(ctx context.Context, in *google_protobuf3.Empty, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// GenerateUserAPIKey generates a new API key for the authenticated user and returns it.
	GenerateUserAPIKey(ctx context.Context, in *GenerateUserAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error)
	// ListUserAPIKeys returns all the user API keys that the authenticated user has.
	ListUserAPIKeys(ctx context.Context, in *google_protobuf3.Empty, opts ...grpc.CallOption) (*ListUserAPIKeysResponse, error)
	// UpdateUserAPIKey updates the rights of an API key of the authenticated user.
	UpdateUserAPIKey(ctx context.Context, in *UpdateUserAPIKeyRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// RemoveUserAPIKey removes an API key from the authenticated user.
	RemoveUserAPIKey(ctx context.Context, in *RemoveUserAPIKeyRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// ValidateUserEmail validates the user's email address of the authenticated
	// user by using the token sent to the user's email address.
	ValidateUserEmail(ctx context.Context, in *ValidateUserEmailRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// RequestUserEmailValidation re-issues a new email validation token and sends
	// it to the user's email address so he can validate it. Any previous validation
	// token that has not been used will be revoked.
	RequestUserEmailValidation(ctx context.Context, in *google_protobuf3.Empty, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// ListAuthorizedClients returns the list of clients that the authenticated user
	// has currently authorized to access its account.
	ListAuthorizedClients(ctx context.Context, in *google_protobuf3.Empty, opts ...grpc.CallOption) (*ListAuthorizedClientsResponse, error)
	// RevokeClient revokes the access of an authorized client to the authenticated
	// user's account.
	RevokeAuthorizedClient(ctx context.Context, in *ClientIdentifiers, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
}

type isUserClient struct {
	cc *grpc.ClientConn
}

func NewIsUserClient(cc *grpc.ClientConn) IsUserClient {
	return &isUserClient{cc}
}

func (c *isUserClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsUser/CreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isUserClient) GetUser(ctx context.Context, in *google_protobuf3.Empty, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsUser/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isUserClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsUser/UpdateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isUserClient) UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsUser/UpdateUserPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isUserClient) DeleteUser(ctx context.Context, in *google_protobuf3.Empty, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsUser/DeleteUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isUserClient) GenerateUserAPIKey(ctx context.Context, in *GenerateUserAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error) {
	out := new(APIKey)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsUser/GenerateUserAPIKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isUserClient) ListUserAPIKeys(ctx context.Context, in *google_protobuf3.Empty, opts ...grpc.CallOption) (*ListUserAPIKeysResponse, error) {
	out := new(ListUserAPIKeysResponse)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsUser/ListUserAPIKeys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isUserClient) UpdateUserAPIKey(ctx context.Context, in *UpdateUserAPIKeyRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsUser/UpdateUserAPIKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isUserClient) RemoveUserAPIKey(ctx context.Context, in *RemoveUserAPIKeyRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsUser/RemoveUserAPIKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isUserClient) ValidateUserEmail(ctx context.Context, in *ValidateUserEmailRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsUser/ValidateUserEmail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isUserClient) RequestUserEmailValidation(ctx context.Context, in *google_protobuf3.Empty, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsUser/RequestUserEmailValidation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isUserClient) ListAuthorizedClients(ctx context.Context, in *google_protobuf3.Empty, opts ...grpc.CallOption) (*ListAuthorizedClientsResponse, error) {
	out := new(ListAuthorizedClientsResponse)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsUser/ListAuthorizedClients", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isUserClient) RevokeAuthorizedClient(ctx context.Context, in *ClientIdentifiers, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsUser/RevokeAuthorizedClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IsUser service

type IsUserServer interface {
	// CreateUser creates a new user on the network.
	CreateUser(context.Context, *CreateUserRequest) (*google_protobuf3.Empty, error)
	// GetUser returns the current user.
	GetUser(context.Context, *google_protobuf3.Empty) (*User, error)
	// UpdateUser edits the profile of the authenticated user.
	// If email address is updated it sends an email to validate it if and only if
	// the `SkipValidation` setting is disabled.
	UpdateUser(context.Context, *UpdateUserRequest) (*google_protobuf3.Empty, error)
	// UpdateUserPassword sets a new password for the authenticated user account.
	UpdateUserPassword(context.Context, *UpdateUserPasswordRequest) (*google_protobuf3.Empty, error)
	// DeleteUser permantly deletes the user account of the authenticated user.
	DeleteUser(context.Context, *google_protobuf3.Empty) (*google_protobuf3.Empty, error)
	// GenerateUserAPIKey generates a new API key for the authenticated user and returns it.
	GenerateUserAPIKey(context.Context, *GenerateUserAPIKeyRequest) (*APIKey, error)
	// ListUserAPIKeys returns all the user API keys that the authenticated user has.
	ListUserAPIKeys(context.Context, *google_protobuf3.Empty) (*ListUserAPIKeysResponse, error)
	// UpdateUserAPIKey updates the rights of an API key of the authenticated user.
	UpdateUserAPIKey(context.Context, *UpdateUserAPIKeyRequest) (*google_protobuf3.Empty, error)
	// RemoveUserAPIKey removes an API key from the authenticated user.
	RemoveUserAPIKey(context.Context, *RemoveUserAPIKeyRequest) (*google_protobuf3.Empty, error)
	// ValidateUserEmail validates the user's email address of the authenticated
	// user by using the token sent to the user's email address.
	ValidateUserEmail(context.Context, *ValidateUserEmailRequest) (*google_protobuf3.Empty, error)
	// RequestUserEmailValidation re-issues a new email validation token and sends
	// it to the user's email address so he can validate it. Any previous validation
	// token that has not been used will be revoked.
	RequestUserEmailValidation(context.Context, *google_protobuf3.Empty) (*google_protobuf3.Empty, error)
	// ListAuthorizedClients returns the list of clients that the authenticated user
	// has currently authorized to access its account.
	ListAuthorizedClients(context.Context, *google_protobuf3.Empty) (*ListAuthorizedClientsResponse, error)
	// RevokeClient revokes the access of an authorized client to the authenticated
	// user's account.
	RevokeAuthorizedClient(context.Context, *ClientIdentifiers) (*google_protobuf3.Empty, error)
}

func RegisterIsUserServer(s *grpc.Server, srv IsUserServer) {
	s.RegisterService(&_IsUser_serviceDesc, srv)
}

func _IsUser_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsUserServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsUser/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsUserServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsUser_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf3.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsUserServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsUser/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsUserServer).GetUser(ctx, req.(*google_protobuf3.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsUser_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsUserServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsUser/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsUserServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsUser_UpdateUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsUserServer).UpdateUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsUser/UpdateUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsUserServer).UpdateUserPassword(ctx, req.(*UpdateUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsUser_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf3.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsUserServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsUser/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsUserServer).DeleteUser(ctx, req.(*google_protobuf3.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsUser_GenerateUserAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateUserAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsUserServer).GenerateUserAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsUser/GenerateUserAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsUserServer).GenerateUserAPIKey(ctx, req.(*GenerateUserAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsUser_ListUserAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf3.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsUserServer).ListUserAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsUser/ListUserAPIKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsUserServer).ListUserAPIKeys(ctx, req.(*google_protobuf3.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsUser_UpdateUserAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsUserServer).UpdateUserAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsUser/UpdateUserAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsUserServer).UpdateUserAPIKey(ctx, req.(*UpdateUserAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsUser_RemoveUserAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsUserServer).RemoveUserAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsUser/RemoveUserAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsUserServer).RemoveUserAPIKey(ctx, req.(*RemoveUserAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsUser_ValidateUserEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateUserEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsUserServer).ValidateUserEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsUser/ValidateUserEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsUserServer).ValidateUserEmail(ctx, req.(*ValidateUserEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsUser_RequestUserEmailValidation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf3.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsUserServer).RequestUserEmailValidation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsUser/RequestUserEmailValidation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsUserServer).RequestUserEmailValidation(ctx, req.(*google_protobuf3.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsUser_ListAuthorizedClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf3.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsUserServer).ListAuthorizedClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsUser/ListAuthorizedClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsUserServer).ListAuthorizedClients(ctx, req.(*google_protobuf3.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsUser_RevokeAuthorizedClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsUserServer).RevokeAuthorizedClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsUser/RevokeAuthorizedClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsUserServer).RevokeAuthorizedClient(ctx, req.(*ClientIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _IsUser_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.IsUser",
	HandlerType: (*IsUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _IsUser_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _IsUser_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _IsUser_UpdateUser_Handler,
		},
		{
			MethodName: "UpdateUserPassword",
			Handler:    _IsUser_UpdateUserPassword_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _IsUser_DeleteUser_Handler,
		},
		{
			MethodName: "GenerateUserAPIKey",
			Handler:    _IsUser_GenerateUserAPIKey_Handler,
		},
		{
			MethodName: "ListUserAPIKeys",
			Handler:    _IsUser_ListUserAPIKeys_Handler,
		},
		{
			MethodName: "UpdateUserAPIKey",
			Handler:    _IsUser_UpdateUserAPIKey_Handler,
		},
		{
			MethodName: "RemoveUserAPIKey",
			Handler:    _IsUser_RemoveUserAPIKey_Handler,
		},
		{
			MethodName: "ValidateUserEmail",
			Handler:    _IsUser_ValidateUserEmail_Handler,
		},
		{
			MethodName: "RequestUserEmailValidation",
			Handler:    _IsUser_RequestUserEmailValidation_Handler,
		},
		{
			MethodName: "ListAuthorizedClients",
			Handler:    _IsUser_ListAuthorizedClients_Handler,
		},
		{
			MethodName: "RevokeAuthorizedClient",
			Handler:    _IsUser_RevokeAuthorizedClient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/ttn/api/identityserver.proto",
}

// Client API for IsApplication service

type IsApplicationClient interface {
	// CreateApplication creates a new application on the network and adds the
	// authenticated user as collaborator with all the possible rights. If an
	// organization identifier is provided the application will be created under
	// the organization whose will be added as collaborator with all the possible
	// rights if and only if the authenticated user is member of the organization
	// with enough rights.
	CreateApplication(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// GetApplication returns the application that matches the identifier.
	GetApplication(ctx context.Context, in *ApplicationIdentifiers, opts ...grpc.CallOption) (*Application, error)
	// ListApplications returns either all the applications which the authenticated
	// user has access to or the applications that the organization that matches the
	// identifier is collaborator of if and only if the authenticated user has enough
	// rights.
	ListApplications(ctx context.Context, in *ListApplicationsRequest, opts ...grpc.CallOption) (*ListApplicationsResponse, error)
	// UpdateApplication edits an application.
	UpdateApplication(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// DeleteApplication permantly deletes an application.
	DeleteApplication(ctx context.Context, in *ApplicationIdentifiers, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// GenerateApplicationAPIKey generates a new API key for a given application
	// and returns it.
	GenerateApplicationAPIKey(ctx context.Context, in *GenerateApplicationAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error)
	// ListApplicationAPIKeys returns all the application API keys that a given
	// application has.
	ListApplicationAPIKeys(ctx context.Context, in *ApplicationIdentifiers, opts ...grpc.CallOption) (*ListApplicationAPIKeysResponse, error)
	// UpdateApplicationAPIKey updates the rights of a given application API key.
	UpdateApplicationAPIKey(ctx context.Context, in *UpdateApplicationAPIKeyRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// RemoveApplicationAPIKey removes a given API key from an application.
	RemoveApplicationAPIKey(ctx context.Context, in *RemoveApplicationAPIKeyRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// SetApplicationCollaborator sets a collaborationship between an user and an
	// application upon a given set of rights.
	//
	// The call will return error if after perform the operation the sum of rights
	// that all collaborators with `RIGHT_APPLICATION_SETTINGS_COLLABORATORS` right
	// is not equal to entire set of available `RIGHT_APPLICATION_XXXXXX` rights.
	SetApplicationCollaborator(ctx context.Context, in *ApplicationCollaborator, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// ListApplicationCollaborators returns all the collaborators for a given application.
	ListApplicationCollaborators(ctx context.Context, in *ApplicationIdentifiers, opts ...grpc.CallOption) (*ListApplicationCollaboratorsResponse, error)
	// ListApplicationRights returns all the rights that the caller has to the specified application.
	ListApplicationRights(ctx context.Context, in *ApplicationIdentifiers, opts ...grpc.CallOption) (*ListApplicationRightsResponse, error)
}

type isApplicationClient struct {
	cc *grpc.ClientConn
}

func NewIsApplicationClient(cc *grpc.ClientConn) IsApplicationClient {
	return &isApplicationClient{cc}
}

func (c *isApplicationClient) CreateApplication(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsApplication/CreateApplication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isApplicationClient) GetApplication(ctx context.Context, in *ApplicationIdentifiers, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsApplication/GetApplication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isApplicationClient) ListApplications(ctx context.Context, in *ListApplicationsRequest, opts ...grpc.CallOption) (*ListApplicationsResponse, error) {
	out := new(ListApplicationsResponse)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsApplication/ListApplications", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isApplicationClient) UpdateApplication(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsApplication/UpdateApplication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isApplicationClient) DeleteApplication(ctx context.Context, in *ApplicationIdentifiers, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsApplication/DeleteApplication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isApplicationClient) GenerateApplicationAPIKey(ctx context.Context, in *GenerateApplicationAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error) {
	out := new(APIKey)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsApplication/GenerateApplicationAPIKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isApplicationClient) ListApplicationAPIKeys(ctx context.Context, in *ApplicationIdentifiers, opts ...grpc.CallOption) (*ListApplicationAPIKeysResponse, error) {
	out := new(ListApplicationAPIKeysResponse)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsApplication/ListApplicationAPIKeys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isApplicationClient) UpdateApplicationAPIKey(ctx context.Context, in *UpdateApplicationAPIKeyRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsApplication/UpdateApplicationAPIKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isApplicationClient) RemoveApplicationAPIKey(ctx context.Context, in *RemoveApplicationAPIKeyRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsApplication/RemoveApplicationAPIKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isApplicationClient) SetApplicationCollaborator(ctx context.Context, in *ApplicationCollaborator, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsApplication/SetApplicationCollaborator", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isApplicationClient) ListApplicationCollaborators(ctx context.Context, in *ApplicationIdentifiers, opts ...grpc.CallOption) (*ListApplicationCollaboratorsResponse, error) {
	out := new(ListApplicationCollaboratorsResponse)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsApplication/ListApplicationCollaborators", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isApplicationClient) ListApplicationRights(ctx context.Context, in *ApplicationIdentifiers, opts ...grpc.CallOption) (*ListApplicationRightsResponse, error) {
	out := new(ListApplicationRightsResponse)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsApplication/ListApplicationRights", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IsApplication service

type IsApplicationServer interface {
	// CreateApplication creates a new application on the network and adds the
	// authenticated user as collaborator with all the possible rights. If an
	// organization identifier is provided the application will be created under
	// the organization whose will be added as collaborator with all the possible
	// rights if and only if the authenticated user is member of the organization
	// with enough rights.
	CreateApplication(context.Context, *CreateApplicationRequest) (*google_protobuf3.Empty, error)
	// GetApplication returns the application that matches the identifier.
	GetApplication(context.Context, *ApplicationIdentifiers) (*Application, error)
	// ListApplications returns either all the applications which the authenticated
	// user has access to or the applications that the organization that matches the
	// identifier is collaborator of if and only if the authenticated user has enough
	// rights.
	ListApplications(context.Context, *ListApplicationsRequest) (*ListApplicationsResponse, error)
	// UpdateApplication edits an application.
	UpdateApplication(context.Context, *UpdateApplicationRequest) (*google_protobuf3.Empty, error)
	// DeleteApplication permantly deletes an application.
	DeleteApplication(context.Context, *ApplicationIdentifiers) (*google_protobuf3.Empty, error)
	// GenerateApplicationAPIKey generates a new API key for a given application
	// and returns it.
	GenerateApplicationAPIKey(context.Context, *GenerateApplicationAPIKeyRequest) (*APIKey, error)
	// ListApplicationAPIKeys returns all the application API keys that a given
	// application has.
	ListApplicationAPIKeys(context.Context, *ApplicationIdentifiers) (*ListApplicationAPIKeysResponse, error)
	// UpdateApplicationAPIKey updates the rights of a given application API key.
	UpdateApplicationAPIKey(context.Context, *UpdateApplicationAPIKeyRequest) (*google_protobuf3.Empty, error)
	// RemoveApplicationAPIKey removes a given API key from an application.
	RemoveApplicationAPIKey(context.Context, *RemoveApplicationAPIKeyRequest) (*google_protobuf3.Empty, error)
	// SetApplicationCollaborator sets a collaborationship between an user and an
	// application upon a given set of rights.
	//
	// The call will return error if after perform the operation the sum of rights
	// that all collaborators with `RIGHT_APPLICATION_SETTINGS_COLLABORATORS` right
	// is not equal to entire set of available `RIGHT_APPLICATION_XXXXXX` rights.
	SetApplicationCollaborator(context.Context, *ApplicationCollaborator) (*google_protobuf3.Empty, error)
	// ListApplicationCollaborators returns all the collaborators for a given application.
	ListApplicationCollaborators(context.Context, *ApplicationIdentifiers) (*ListApplicationCollaboratorsResponse, error)
	// ListApplicationRights returns all the rights that the caller has to the specified application.
	ListApplicationRights(context.Context, *ApplicationIdentifiers) (*ListApplicationRightsResponse, error)
}

func RegisterIsApplicationServer(s *grpc.Server, srv IsApplicationServer) {
	s.RegisterService(&_IsApplication_serviceDesc, srv)
}

func _IsApplication_CreateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsApplicationServer).CreateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsApplication/CreateApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsApplicationServer).CreateApplication(ctx, req.(*CreateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsApplication_GetApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsApplicationServer).GetApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsApplication/GetApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsApplicationServer).GetApplication(ctx, req.(*ApplicationIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsApplication_ListApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsApplicationServer).ListApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsApplication/ListApplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsApplicationServer).ListApplications(ctx, req.(*ListApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsApplication_UpdateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsApplicationServer).UpdateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsApplication/UpdateApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsApplicationServer).UpdateApplication(ctx, req.(*UpdateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsApplication_DeleteApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsApplicationServer).DeleteApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsApplication/DeleteApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsApplicationServer).DeleteApplication(ctx, req.(*ApplicationIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsApplication_GenerateApplicationAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateApplicationAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsApplicationServer).GenerateApplicationAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsApplication/GenerateApplicationAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsApplicationServer).GenerateApplicationAPIKey(ctx, req.(*GenerateApplicationAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsApplication_ListApplicationAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsApplicationServer).ListApplicationAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsApplication/ListApplicationAPIKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsApplicationServer).ListApplicationAPIKeys(ctx, req.(*ApplicationIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsApplication_UpdateApplicationAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsApplicationServer).UpdateApplicationAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsApplication/UpdateApplicationAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsApplicationServer).UpdateApplicationAPIKey(ctx, req.(*UpdateApplicationAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsApplication_RemoveApplicationAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveApplicationAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsApplicationServer).RemoveApplicationAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsApplication/RemoveApplicationAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsApplicationServer).RemoveApplicationAPIKey(ctx, req.(*RemoveApplicationAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsApplication_SetApplicationCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationCollaborator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsApplicationServer).SetApplicationCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsApplication/SetApplicationCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsApplicationServer).SetApplicationCollaborator(ctx, req.(*ApplicationCollaborator))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsApplication_ListApplicationCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsApplicationServer).ListApplicationCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsApplication/ListApplicationCollaborators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsApplicationServer).ListApplicationCollaborators(ctx, req.(*ApplicationIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsApplication_ListApplicationRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsApplicationServer).ListApplicationRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsApplication/ListApplicationRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsApplicationServer).ListApplicationRights(ctx, req.(*ApplicationIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _IsApplication_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.IsApplication",
	HandlerType: (*IsApplicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateApplication",
			Handler:    _IsApplication_CreateApplication_Handler,
		},
		{
			MethodName: "GetApplication",
			Handler:    _IsApplication_GetApplication_Handler,
		},
		{
			MethodName: "ListApplications",
			Handler:    _IsApplication_ListApplications_Handler,
		},
		{
			MethodName: "UpdateApplication",
			Handler:    _IsApplication_UpdateApplication_Handler,
		},
		{
			MethodName: "DeleteApplication",
			Handler:    _IsApplication_DeleteApplication_Handler,
		},
		{
			MethodName: "GenerateApplicationAPIKey",
			Handler:    _IsApplication_GenerateApplicationAPIKey_Handler,
		},
		{
			MethodName: "ListApplicationAPIKeys",
			Handler:    _IsApplication_ListApplicationAPIKeys_Handler,
		},
		{
			MethodName: "UpdateApplicationAPIKey",
			Handler:    _IsApplication_UpdateApplicationAPIKey_Handler,
		},
		{
			MethodName: "RemoveApplicationAPIKey",
			Handler:    _IsApplication_RemoveApplicationAPIKey_Handler,
		},
		{
			MethodName: "SetApplicationCollaborator",
			Handler:    _IsApplication_SetApplicationCollaborator_Handler,
		},
		{
			MethodName: "ListApplicationCollaborators",
			Handler:    _IsApplication_ListApplicationCollaborators_Handler,
		},
		{
			MethodName: "ListApplicationRights",
			Handler:    _IsApplication_ListApplicationRights_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/ttn/api/identityserver.proto",
}

// Client API for IsGateway service

type IsGatewayClient interface {
	// CreateGateway creates a new gateway on the network and adds the authenticated
	// user as collaborator with all the possible rights. If an organization identifier
	// is provided the application will be created under the organization whose
	// will be added as collaborator with all the possible rights if and only if
	// the authenticated user is member of the organization with enough rights.
	CreateGateway(ctx context.Context, in *CreateGatewayRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// GetGateway returns the gateway that matches the identifier.
	GetGateway(ctx context.Context, in *GatewayIdentifiers, opts ...grpc.CallOption) (*Gateway, error)
	// ListGateways returns either all the gateways which the authenticated user
	// has access to or the gateways that the organization that matches the identifier
	// is collaborator if and only if the authenticated user has enough rights.
	ListGateways(ctx context.Context, in *ListGatewaysRequest, opts ...grpc.CallOption) (*ListGatewaysResponse, error)
	// UpdateGateway edits a gateway and retrieves the updated version.
	UpdateGateway(ctx context.Context, in *UpdateGatewayRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// DeleteGateway permantly deletes a gateway.
	DeleteGateway(ctx context.Context, in *GatewayIdentifiers, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// GenerateGatewayAPIKey generates a new API key for a given gateway and
	// returns it.
	GenerateGatewayAPIKey(ctx context.Context, in *GenerateGatewayAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error)
	// ListGatewayAPIKeys returns all the gateway API keys that a given gateway has.
	ListGatewayAPIKeys(ctx context.Context, in *GatewayIdentifiers, opts ...grpc.CallOption) (*ListGatewayAPIKeysResponse, error)
	// UpdateGatewayAPIKey updates the rights of a gateway API key.
	UpdateGatewayAPIKey(ctx context.Context, in *UpdateGatewayAPIKeyRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// RemoveGatewayAPIKey removes a given API key from a gateway.
	RemoveGatewayAPIKey(ctx context.Context, in *RemoveGatewayAPIKeyRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// SetGatewayCollaborator sets a collaborationship between an user and an
	// gateway upon a given set of rights.
	//
	// The call will return error if after perform the operation the sum of rights
	// that all collaborators with `RIGHT_GATEWAY_SETTINGS_COLLABORATORS` right
	// is not equal to entire set of available `RIGHT_GATEWAY_XXXXXX` rights.
	SetGatewayCollaborator(ctx context.Context, in *GatewayCollaborator, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// ListGatewayCollaborators returns all the collaborators for a given gateway.
	ListGatewayCollaborators(ctx context.Context, in *GatewayIdentifiers, opts ...grpc.CallOption) (*ListGatewayCollaboratorsResponse, error)
	// ListGatewayRights returns all the rights that the caller has to the specified gateway.
	ListGatewayRights(ctx context.Context, in *GatewayIdentifiers, opts ...grpc.CallOption) (*ListGatewayRightsResponse, error)
}

type isGatewayClient struct {
	cc *grpc.ClientConn
}

func NewIsGatewayClient(cc *grpc.ClientConn) IsGatewayClient {
	return &isGatewayClient{cc}
}

func (c *isGatewayClient) CreateGateway(ctx context.Context, in *CreateGatewayRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsGateway/CreateGateway", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isGatewayClient) GetGateway(ctx context.Context, in *GatewayIdentifiers, opts ...grpc.CallOption) (*Gateway, error) {
	out := new(Gateway)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsGateway/GetGateway", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isGatewayClient) ListGateways(ctx context.Context, in *ListGatewaysRequest, opts ...grpc.CallOption) (*ListGatewaysResponse, error) {
	out := new(ListGatewaysResponse)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsGateway/ListGateways", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isGatewayClient) UpdateGateway(ctx context.Context, in *UpdateGatewayRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsGateway/UpdateGateway", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isGatewayClient) DeleteGateway(ctx context.Context, in *GatewayIdentifiers, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsGateway/DeleteGateway", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isGatewayClient) GenerateGatewayAPIKey(ctx context.Context, in *GenerateGatewayAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error) {
	out := new(APIKey)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsGateway/GenerateGatewayAPIKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isGatewayClient) ListGatewayAPIKeys(ctx context.Context, in *GatewayIdentifiers, opts ...grpc.CallOption) (*ListGatewayAPIKeysResponse, error) {
	out := new(ListGatewayAPIKeysResponse)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsGateway/ListGatewayAPIKeys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isGatewayClient) UpdateGatewayAPIKey(ctx context.Context, in *UpdateGatewayAPIKeyRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsGateway/UpdateGatewayAPIKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isGatewayClient) RemoveGatewayAPIKey(ctx context.Context, in *RemoveGatewayAPIKeyRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsGateway/RemoveGatewayAPIKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isGatewayClient) SetGatewayCollaborator(ctx context.Context, in *GatewayCollaborator, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsGateway/SetGatewayCollaborator", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isGatewayClient) ListGatewayCollaborators(ctx context.Context, in *GatewayIdentifiers, opts ...grpc.CallOption) (*ListGatewayCollaboratorsResponse, error) {
	out := new(ListGatewayCollaboratorsResponse)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsGateway/ListGatewayCollaborators", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isGatewayClient) ListGatewayRights(ctx context.Context, in *GatewayIdentifiers, opts ...grpc.CallOption) (*ListGatewayRightsResponse, error) {
	out := new(ListGatewayRightsResponse)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsGateway/ListGatewayRights", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IsGateway service

type IsGatewayServer interface {
	// CreateGateway creates a new gateway on the network and adds the authenticated
	// user as collaborator with all the possible rights. If an organization identifier
	// is provided the application will be created under the organization whose
	// will be added as collaborator with all the possible rights if and only if
	// the authenticated user is member of the organization with enough rights.
	CreateGateway(context.Context, *CreateGatewayRequest) (*google_protobuf3.Empty, error)
	// GetGateway returns the gateway that matches the identifier.
	GetGateway(context.Context, *GatewayIdentifiers) (*Gateway, error)
	// ListGateways returns either all the gateways which the authenticated user
	// has access to or the gateways that the organization that matches the identifier
	// is collaborator if and only if the authenticated user has enough rights.
	ListGateways(context.Context, *ListGatewaysRequest) (*ListGatewaysResponse, error)
	// UpdateGateway edits a gateway and retrieves the updated version.
	UpdateGateway(context.Context, *UpdateGatewayRequest) (*google_protobuf3.Empty, error)
	// DeleteGateway permantly deletes a gateway.
	DeleteGateway(context.Context, *GatewayIdentifiers) (*google_protobuf3.Empty, error)
	// GenerateGatewayAPIKey generates a new API key for a given gateway and
	// returns it.
	GenerateGatewayAPIKey(context.Context, *GenerateGatewayAPIKeyRequest) (*APIKey, error)
	// ListGatewayAPIKeys returns all the gateway API keys that a given gateway has.
	ListGatewayAPIKeys(context.Context, *GatewayIdentifiers) (*ListGatewayAPIKeysResponse, error)
	// UpdateGatewayAPIKey updates the rights of a gateway API key.
	UpdateGatewayAPIKey(context.Context, *UpdateGatewayAPIKeyRequest) (*google_protobuf3.Empty, error)
	// RemoveGatewayAPIKey removes a given API key from a gateway.
	RemoveGatewayAPIKey(context.Context, *RemoveGatewayAPIKeyRequest) (*google_protobuf3.Empty, error)
	// SetGatewayCollaborator sets a collaborationship between an user and an
	// gateway upon a given set of rights.
	//
	// The call will return error if after perform the operation the sum of rights
	// that all collaborators with `RIGHT_GATEWAY_SETTINGS_COLLABORATORS` right
	// is not equal to entire set of available `RIGHT_GATEWAY_XXXXXX` rights.
	SetGatewayCollaborator(context.Context, *GatewayCollaborator) (*google_protobuf3.Empty, error)
	// ListGatewayCollaborators returns all the collaborators for a given gateway.
	ListGatewayCollaborators(context.Context, *GatewayIdentifiers) (*ListGatewayCollaboratorsResponse, error)
	// ListGatewayRights returns all the rights that the caller has to the specified gateway.
	ListGatewayRights(context.Context, *GatewayIdentifiers) (*ListGatewayRightsResponse, error)
}

func RegisterIsGatewayServer(s *grpc.Server, srv IsGatewayServer) {
	s.RegisterService(&_IsGateway_serviceDesc, srv)
}

func _IsGateway_CreateGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsGatewayServer).CreateGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsGateway/CreateGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsGatewayServer).CreateGateway(ctx, req.(*CreateGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsGateway_GetGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsGatewayServer).GetGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsGateway/GetGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsGatewayServer).GetGateway(ctx, req.(*GatewayIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsGateway_ListGateways_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGatewaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsGatewayServer).ListGateways(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsGateway/ListGateways",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsGatewayServer).ListGateways(ctx, req.(*ListGatewaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsGateway_UpdateGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsGatewayServer).UpdateGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsGateway/UpdateGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsGatewayServer).UpdateGateway(ctx, req.(*UpdateGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsGateway_DeleteGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsGatewayServer).DeleteGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsGateway/DeleteGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsGatewayServer).DeleteGateway(ctx, req.(*GatewayIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsGateway_GenerateGatewayAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateGatewayAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsGatewayServer).GenerateGatewayAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsGateway/GenerateGatewayAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsGatewayServer).GenerateGatewayAPIKey(ctx, req.(*GenerateGatewayAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsGateway_ListGatewayAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsGatewayServer).ListGatewayAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsGateway/ListGatewayAPIKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsGatewayServer).ListGatewayAPIKeys(ctx, req.(*GatewayIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsGateway_UpdateGatewayAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGatewayAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsGatewayServer).UpdateGatewayAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsGateway/UpdateGatewayAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsGatewayServer).UpdateGatewayAPIKey(ctx, req.(*UpdateGatewayAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsGateway_RemoveGatewayAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveGatewayAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsGatewayServer).RemoveGatewayAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsGateway/RemoveGatewayAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsGatewayServer).RemoveGatewayAPIKey(ctx, req.(*RemoveGatewayAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsGateway_SetGatewayCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayCollaborator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsGatewayServer).SetGatewayCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsGateway/SetGatewayCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsGatewayServer).SetGatewayCollaborator(ctx, req.(*GatewayCollaborator))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsGateway_ListGatewayCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsGatewayServer).ListGatewayCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsGateway/ListGatewayCollaborators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsGatewayServer).ListGatewayCollaborators(ctx, req.(*GatewayIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsGateway_ListGatewayRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsGatewayServer).ListGatewayRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsGateway/ListGatewayRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsGatewayServer).ListGatewayRights(ctx, req.(*GatewayIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _IsGateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.IsGateway",
	HandlerType: (*IsGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGateway",
			Handler:    _IsGateway_CreateGateway_Handler,
		},
		{
			MethodName: "GetGateway",
			Handler:    _IsGateway_GetGateway_Handler,
		},
		{
			MethodName: "ListGateways",
			Handler:    _IsGateway_ListGateways_Handler,
		},
		{
			MethodName: "UpdateGateway",
			Handler:    _IsGateway_UpdateGateway_Handler,
		},
		{
			MethodName: "DeleteGateway",
			Handler:    _IsGateway_DeleteGateway_Handler,
		},
		{
			MethodName: "GenerateGatewayAPIKey",
			Handler:    _IsGateway_GenerateGatewayAPIKey_Handler,
		},
		{
			MethodName: "ListGatewayAPIKeys",
			Handler:    _IsGateway_ListGatewayAPIKeys_Handler,
		},
		{
			MethodName: "UpdateGatewayAPIKey",
			Handler:    _IsGateway_UpdateGatewayAPIKey_Handler,
		},
		{
			MethodName: "RemoveGatewayAPIKey",
			Handler:    _IsGateway_RemoveGatewayAPIKey_Handler,
		},
		{
			MethodName: "SetGatewayCollaborator",
			Handler:    _IsGateway_SetGatewayCollaborator_Handler,
		},
		{
			MethodName: "ListGatewayCollaborators",
			Handler:    _IsGateway_ListGatewayCollaborators_Handler,
		},
		{
			MethodName: "ListGatewayRights",
			Handler:    _IsGateway_ListGatewayRights_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/ttn/api/identityserver.proto",
}

// Client API for IsClient service

type IsClientClient interface {
	// CreateClient sends a request to create a third-party client. The request
	// has to be approved by the admins.
	CreateClient(ctx context.Context, in *CreateClientRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// GetClient returns the client that matches the identifier.
	// It allows to be called without authorization credentials, in this case it
	// will only return the publicly information available about the client.
	GetClient(ctx context.Context, in *ClientIdentifiers, opts ...grpc.CallOption) (*Client, error)
	// ListClients returns all the clients the authenticated user has created.
	ListClients(ctx context.Context, in *google_protobuf3.Empty, opts ...grpc.CallOption) (*ListClientsResponse, error)
	// UpdateClient sends a request to update a client.
	UpdateClient(ctx context.Context, in *UpdateClientRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// DeleteClient deletes the client that matches the identifier and revokes all
	// user authorizations.
	DeleteClient(ctx context.Context, in *ClientIdentifiers, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
}

type isClientClient struct {
	cc *grpc.ClientConn
}

func NewIsClientClient(cc *grpc.ClientConn) IsClientClient {
	return &isClientClient{cc}
}

func (c *isClientClient) CreateClient(ctx context.Context, in *CreateClientRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsClient/CreateClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isClientClient) GetClient(ctx context.Context, in *ClientIdentifiers, opts ...grpc.CallOption) (*Client, error) {
	out := new(Client)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsClient/GetClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isClientClient) ListClients(ctx context.Context, in *google_protobuf3.Empty, opts ...grpc.CallOption) (*ListClientsResponse, error) {
	out := new(ListClientsResponse)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsClient/ListClients", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isClientClient) UpdateClient(ctx context.Context, in *UpdateClientRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsClient/UpdateClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isClientClient) DeleteClient(ctx context.Context, in *ClientIdentifiers, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsClient/DeleteClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IsClient service

type IsClientServer interface {
	// CreateClient sends a request to create a third-party client. The request
	// has to be approved by the admins.
	CreateClient(context.Context, *CreateClientRequest) (*google_protobuf3.Empty, error)
	// GetClient returns the client that matches the identifier.
	// It allows to be called without authorization credentials, in this case it
	// will only return the publicly information available about the client.
	GetClient(context.Context, *ClientIdentifiers) (*Client, error)
	// ListClients returns all the clients the authenticated user has created.
	ListClients(context.Context, *google_protobuf3.Empty) (*ListClientsResponse, error)
	// UpdateClient sends a request to update a client.
	UpdateClient(context.Context, *UpdateClientRequest) (*google_protobuf3.Empty, error)
	// DeleteClient deletes the client that matches the identifier and revokes all
	// user authorizations.
	DeleteClient(context.Context, *ClientIdentifiers) (*google_protobuf3.Empty, error)
}

func RegisterIsClientServer(s *grpc.Server, srv IsClientServer) {
	s.RegisterService(&_IsClient_serviceDesc, srv)
}

func _IsClient_CreateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsClientServer).CreateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsClient/CreateClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsClientServer).CreateClient(ctx, req.(*CreateClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsClient_GetClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsClientServer).GetClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsClient/GetClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsClientServer).GetClient(ctx, req.(*ClientIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsClient_ListClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf3.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsClientServer).ListClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsClient/ListClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsClientServer).ListClients(ctx, req.(*google_protobuf3.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsClient_UpdateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsClientServer).UpdateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsClient/UpdateClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsClientServer).UpdateClient(ctx, req.(*UpdateClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsClient_DeleteClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsClientServer).DeleteClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsClient/DeleteClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsClientServer).DeleteClient(ctx, req.(*ClientIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _IsClient_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.IsClient",
	HandlerType: (*IsClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateClient",
			Handler:    _IsClient_CreateClient_Handler,
		},
		{
			MethodName: "GetClient",
			Handler:    _IsClient_GetClient_Handler,
		},
		{
			MethodName: "ListClients",
			Handler:    _IsClient_ListClients_Handler,
		},
		{
			MethodName: "UpdateClient",
			Handler:    _IsClient_UpdateClient_Handler,
		},
		{
			MethodName: "DeleteClient",
			Handler:    _IsClient_DeleteClient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/ttn/api/identityserver.proto",
}

// Client API for IsOrganization service

type IsOrganizationClient interface {
	// CreateOrganization creates an organization.
	CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// GetOrganization returns an organization.
	GetOrganization(ctx context.Context, in *OrganizationIdentifiers, opts ...grpc.CallOption) (*Organization, error)
	// ListOrganizations returns the list of organizations the caller is member of.
	ListOrganizations(ctx context.Context, in *google_protobuf3.Empty, opts ...grpc.CallOption) (*ListOrganizationsResponse, error)
	// UpdateOrganization updates an organization.
	UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// DeleteOrganization deletes an organization.
	DeleteOrganization(ctx context.Context, in *OrganizationIdentifiers, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// GenerateOrganizationAPIKey generates an API key and returns it.
	GenerateOrganizationAPIKey(ctx context.Context, in *GenerateOrganizationAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error)
	// ListOrganizationAPIKeys list the API keys the organization has.
	ListOrganizationAPIKeys(ctx context.Context, in *OrganizationIdentifiers, opts ...grpc.CallOption) (*ListOrganizationAPIKeysResponse, error)
	// UpdateOrganizationAPIKey updates an organization's API key.
	UpdateOrganizationAPIKey(ctx context.Context, in *UpdateOrganizationAPIKeyRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// RemoveOrganizationAPIKey removes an organization's API key.
	RemoveOrganizationAPIKey(ctx context.Context, in *RemoveOrganizationAPIKeyRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// SetOrganizationMember sets a membership between an user and an organization
	// upon a given set of rights.
	//
	// The call will return error if after perform the operation the sum of rights
	// that all members with `RIGHT_ORGANIZATION_SETTINGS_COLLABORATORS` right
	// is not equal to entire set of available `RIGHT_ORGANIZATION_XXXXXX` rights.
	SetOrganizationMember(ctx context.Context, in *OrganizationMember, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// ListOrganizationMembers returns a list of all the members that belong to an organization.
	ListOrganizationMembers(ctx context.Context, in *OrganizationIdentifiers, opts ...grpc.CallOption) (*ListOrganizationMembersResponse, error)
	// ListOrganizationRights returns the rights the caller has to an organization.
	ListOrganizationRights(ctx context.Context, in *OrganizationIdentifiers, opts ...grpc.CallOption) (*ListOrganizationRightsResponse, error)
}

type isOrganizationClient struct {
	cc *grpc.ClientConn
}

func NewIsOrganizationClient(cc *grpc.ClientConn) IsOrganizationClient {
	return &isOrganizationClient{cc}
}

func (c *isOrganizationClient) CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsOrganization/CreateOrganization", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isOrganizationClient) GetOrganization(ctx context.Context, in *OrganizationIdentifiers, opts ...grpc.CallOption) (*Organization, error) {
	out := new(Organization)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsOrganization/GetOrganization", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isOrganizationClient) ListOrganizations(ctx context.Context, in *google_protobuf3.Empty, opts ...grpc.CallOption) (*ListOrganizationsResponse, error) {
	out := new(ListOrganizationsResponse)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsOrganization/ListOrganizations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isOrganizationClient) UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsOrganization/UpdateOrganization", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isOrganizationClient) DeleteOrganization(ctx context.Context, in *OrganizationIdentifiers, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsOrganization/DeleteOrganization", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isOrganizationClient) GenerateOrganizationAPIKey(ctx context.Context, in *GenerateOrganizationAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error) {
	out := new(APIKey)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsOrganization/GenerateOrganizationAPIKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isOrganizationClient) ListOrganizationAPIKeys(ctx context.Context, in *OrganizationIdentifiers, opts ...grpc.CallOption) (*ListOrganizationAPIKeysResponse, error) {
	out := new(ListOrganizationAPIKeysResponse)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsOrganization/ListOrganizationAPIKeys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isOrganizationClient) UpdateOrganizationAPIKey(ctx context.Context, in *UpdateOrganizationAPIKeyRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsOrganization/UpdateOrganizationAPIKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isOrganizationClient) RemoveOrganizationAPIKey(ctx context.Context, in *RemoveOrganizationAPIKeyRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsOrganization/RemoveOrganizationAPIKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isOrganizationClient) SetOrganizationMember(ctx context.Context, in *OrganizationMember, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsOrganization/SetOrganizationMember", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isOrganizationClient) ListOrganizationMembers(ctx context.Context, in *OrganizationIdentifiers, opts ...grpc.CallOption) (*ListOrganizationMembersResponse, error) {
	out := new(ListOrganizationMembersResponse)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsOrganization/ListOrganizationMembers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isOrganizationClient) ListOrganizationRights(ctx context.Context, in *OrganizationIdentifiers, opts ...grpc.CallOption) (*ListOrganizationRightsResponse, error) {
	out := new(ListOrganizationRightsResponse)
	err := grpc.Invoke(ctx, "/ttn.lorawan.v3.IsOrganization/ListOrganizationRights", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IsOrganization service

type IsOrganizationServer interface {
	// CreateOrganization creates an organization.
	CreateOrganization(context.Context, *CreateOrganizationRequest) (*google_protobuf3.Empty, error)
	// GetOrganization returns an organization.
	GetOrganization(context.Context, *OrganizationIdentifiers) (*Organization, error)
	// ListOrganizations returns the list of organizations the caller is member of.
	ListOrganizations(context.Context, *google_protobuf3.Empty) (*ListOrganizationsResponse, error)
	// UpdateOrganization updates an organization.
	UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*google_protobuf3.Empty, error)
	// DeleteOrganization deletes an organization.
	DeleteOrganization(context.Context, *OrganizationIdentifiers) (*google_protobuf3.Empty, error)
	// GenerateOrganizationAPIKey generates an API key and returns it.
	GenerateOrganizationAPIKey(context.Context, *GenerateOrganizationAPIKeyRequest) (*APIKey, error)
	// ListOrganizationAPIKeys list the API keys the organization has.
	ListOrganizationAPIKeys(context.Context, *OrganizationIdentifiers) (*ListOrganizationAPIKeysResponse, error)
	// UpdateOrganizationAPIKey updates an organization's API key.
	UpdateOrganizationAPIKey(context.Context, *UpdateOrganizationAPIKeyRequest) (*google_protobuf3.Empty, error)
	// RemoveOrganizationAPIKey removes an organization's API key.
	RemoveOrganizationAPIKey(context.Context, *RemoveOrganizationAPIKeyRequest) (*google_protobuf3.Empty, error)
	// SetOrganizationMember sets a membership between an user and an organization
	// upon a given set of rights.
	//
	// The call will return error if after perform the operation the sum of rights
	// that all members with `RIGHT_ORGANIZATION_SETTINGS_COLLABORATORS` right
	// is not equal to entire set of available `RIGHT_ORGANIZATION_XXXXXX` rights.
	SetOrganizationMember(context.Context, *OrganizationMember) (*google_protobuf3.Empty, error)
	// ListOrganizationMembers returns a list of all the members that belong to an organization.
	ListOrganizationMembers(context.Context, *OrganizationIdentifiers) (*ListOrganizationMembersResponse, error)
	// ListOrganizationRights returns the rights the caller has to an organization.
	ListOrganizationRights(context.Context, *OrganizationIdentifiers) (*ListOrganizationRightsResponse, error)
}

func RegisterIsOrganizationServer(s *grpc.Server, srv IsOrganizationServer) {
	s.RegisterService(&_IsOrganization_serviceDesc, srv)
}

func _IsOrganization_CreateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsOrganizationServer).CreateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsOrganization/CreateOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsOrganizationServer).CreateOrganization(ctx, req.(*CreateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsOrganization_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsOrganizationServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsOrganization/GetOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsOrganizationServer).GetOrganization(ctx, req.(*OrganizationIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsOrganization_ListOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf3.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsOrganizationServer).ListOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsOrganization/ListOrganizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsOrganizationServer).ListOrganizations(ctx, req.(*google_protobuf3.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsOrganization_UpdateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsOrganizationServer).UpdateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsOrganization/UpdateOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsOrganizationServer).UpdateOrganization(ctx, req.(*UpdateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsOrganization_DeleteOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsOrganizationServer).DeleteOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsOrganization/DeleteOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsOrganizationServer).DeleteOrganization(ctx, req.(*OrganizationIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsOrganization_GenerateOrganizationAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateOrganizationAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsOrganizationServer).GenerateOrganizationAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsOrganization/GenerateOrganizationAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsOrganizationServer).GenerateOrganizationAPIKey(ctx, req.(*GenerateOrganizationAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsOrganization_ListOrganizationAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsOrganizationServer).ListOrganizationAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsOrganization/ListOrganizationAPIKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsOrganizationServer).ListOrganizationAPIKeys(ctx, req.(*OrganizationIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsOrganization_UpdateOrganizationAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsOrganizationServer).UpdateOrganizationAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsOrganization/UpdateOrganizationAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsOrganizationServer).UpdateOrganizationAPIKey(ctx, req.(*UpdateOrganizationAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsOrganization_RemoveOrganizationAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOrganizationAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsOrganizationServer).RemoveOrganizationAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsOrganization/RemoveOrganizationAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsOrganizationServer).RemoveOrganizationAPIKey(ctx, req.(*RemoveOrganizationAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsOrganization_SetOrganizationMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsOrganizationServer).SetOrganizationMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsOrganization/SetOrganizationMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsOrganizationServer).SetOrganizationMember(ctx, req.(*OrganizationMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsOrganization_ListOrganizationMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsOrganizationServer).ListOrganizationMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsOrganization/ListOrganizationMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsOrganizationServer).ListOrganizationMembers(ctx, req.(*OrganizationIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsOrganization_ListOrganizationRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsOrganizationServer).ListOrganizationRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.IsOrganization/ListOrganizationRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsOrganizationServer).ListOrganizationRights(ctx, req.(*OrganizationIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _IsOrganization_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.IsOrganization",
	HandlerType: (*IsOrganizationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganization",
			Handler:    _IsOrganization_CreateOrganization_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _IsOrganization_GetOrganization_Handler,
		},
		{
			MethodName: "ListOrganizations",
			Handler:    _IsOrganization_ListOrganizations_Handler,
		},
		{
			MethodName: "UpdateOrganization",
			Handler:    _IsOrganization_UpdateOrganization_Handler,
		},
		{
			MethodName: "DeleteOrganization",
			Handler:    _IsOrganization_DeleteOrganization_Handler,
		},
		{
			MethodName: "GenerateOrganizationAPIKey",
			Handler:    _IsOrganization_GenerateOrganizationAPIKey_Handler,
		},
		{
			MethodName: "ListOrganizationAPIKeys",
			Handler:    _IsOrganization_ListOrganizationAPIKeys_Handler,
		},
		{
			MethodName: "UpdateOrganizationAPIKey",
			Handler:    _IsOrganization_UpdateOrganizationAPIKey_Handler,
		},
		{
			MethodName: "RemoveOrganizationAPIKey",
			Handler:    _IsOrganization_RemoveOrganizationAPIKey_Handler,
		},
		{
			MethodName: "SetOrganizationMember",
			Handler:    _IsOrganization_SetOrganizationMember_Handler,
		},
		{
			MethodName: "ListOrganizationMembers",
			Handler:    _IsOrganization_ListOrganizationMembers_Handler,
		},
		{
			MethodName: "ListOrganizationRights",
			Handler:    _IsOrganization_ListOrganizationRights_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/ttn/api/identityserver.proto",
}

func (m *PullConfigurationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PullConfigurationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.GatewayIdentifiers.Size()))
	n1, err := m.GatewayIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.ProjectionMask != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(m.ProjectionMask.Size()))
		n2, err := m.ProjectionMask.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *IdentityServerSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IdentityServerSettings) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(types.SizeOfStdTime(m.UpdatedAt)))
	n3, err := types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if len(m.BlacklistedIDs) > 0 {
		for _, s := range m.BlacklistedIDs {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.IdentityServerSettings_UserRegistrationFlow.Size()))
	n4, err := m.IdentityServerSettings_UserRegistrationFlow.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x22
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(types.SizeOfStdDuration(m.ValidationTokenTTL)))
	n5, err := types.StdDurationMarshalTo(m.ValidationTokenTTL, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if len(m.AllowedEmails) > 0 {
		for _, s := range m.AllowedEmails {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x32
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(types.SizeOfStdDuration(m.InvitationTokenTTL)))
	n6, err := types.StdDurationMarshalTo(m.InvitationTokenTTL, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	return i, nil
}

func (m *IdentityServerSettings_UserRegistrationFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IdentityServerSettings_UserRegistrationFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SkipValidation {
		dAtA[i] = 0x8
		i++
		if m.SkipValidation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.InvitationOnly {
		dAtA[i] = 0x10
		i++
		if m.InvitationOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AdminApproval {
		dAtA[i] = 0x18
		i++
		if m.AdminApproval {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *UpdateSettingsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSettingsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.Settings.Size()))
	n7, err := m.Settings.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x12
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.UpdateMask.Size()))
	n8, err := m.UpdateMask.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	return i, nil
}

func (m *ResetUserPasswordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResetUserPasswordResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Password) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	return i, nil
}

func (m *SendInvitationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendInvitationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Email) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	return i, nil
}

func (m *ListInvitationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListInvitationsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Invitations) > 0 {
		for _, msg := range m.Invitations {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIdentityserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ListInvitationsResponse_Invitation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListInvitationsResponse_Invitation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Email) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(types.SizeOfStdTime(m.IssuedAt)))
	n9, err := types.StdTimeMarshalTo(m.IssuedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	dAtA[i] = 0x1a
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(types.SizeOfStdTime(m.ExpiresAt)))
	n10, err := types.StdTimeMarshalTo(m.ExpiresAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	return i, nil
}

func (m *DeleteInvitationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteInvitationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Email) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	return i, nil
}

func (m *ListUsersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListUsersRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ListUsersRequest_FilterState != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(m.ListUsersRequest_FilterState.Size()))
		n11, err := m.ListUsersRequest_FilterState.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *ListUsersRequest_FilterState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListUsersRequest_FilterState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(m.State))
	}
	return i, nil
}

func (m *ListUsersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListUsersResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIdentityserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ListClientsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListClientsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ListClientsRequest_FilterState != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(m.ListClientsRequest_FilterState.Size()))
		n12, err := m.ListClientsRequest_FilterState.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *ListClientsRequest_FilterState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListClientsRequest_FilterState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(m.State))
	}
	return i, nil
}

func (m *CreateUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateUserRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.User.Size()))
	n13, err := m.User.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	if len(m.InvitationToken) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.InvitationToken)))
		i += copy(dAtA[i:], m.InvitationToken)
	}
	return i, nil
}

func (m *UpdateUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.User.Size()))
	n14, err := m.User.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	dAtA[i] = 0x12
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.UpdateMask.Size()))
	n15, err := m.UpdateMask.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	return i, nil
}

func (m *UpdateUserPasswordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserPasswordRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Old) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Old)))
		i += copy(dAtA[i:], m.Old)
	}
	if len(m.New) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.New)))
		i += copy(dAtA[i:], m.New)
	}
	return i, nil
}

func (m *GenerateUserAPIKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenerateUserAPIKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Rights) > 0 {
		dAtA17 := make([]byte, len(m.Rights)*10)
		var j16 int
		for _, num := range m.Rights {
			for num >= 1<<7 {
				dAtA17[j16] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j16++
			}
			dAtA17[j16] = uint8(num)
			j16++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(j16))
		i += copy(dAtA[i:], dAtA17[:j16])
	}
	return i, nil
}

func (m *ListUserAPIKeysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListUserAPIKeysResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.APIKeys) > 0 {
		for _, msg := range m.APIKeys {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIdentityserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateUserAPIKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserAPIKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Rights) > 0 {
		dAtA19 := make([]byte, len(m.Rights)*10)
		var j18 int
		for _, num := range m.Rights {
			for num >= 1<<7 {
				dAtA19[j18] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j18++
			}
			dAtA19[j18] = uint8(num)
			j18++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(j18))
		i += copy(dAtA[i:], dAtA19[:j18])
	}
	return i, nil
}

func (m *RemoveUserAPIKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveUserAPIKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *ValidateUserEmailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateUserEmailRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	return i, nil
}

func (m *ListAuthorizedClientsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAuthorizedClientsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Clients) > 0 {
		for _, msg := range m.Clients {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIdentityserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CreateApplicationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateApplicationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.Application.Size()))
	n20, err := m.Application.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n20
	dAtA[i] = 0x12
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.OrganizationIdentifiers.Size()))
	n21, err := m.OrganizationIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n21
	return i, nil
}

func (m *ListApplicationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListApplicationsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.OrganizationIdentifiers.Size()))
	n22, err := m.OrganizationIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n22
	return i, nil
}

func (m *ListApplicationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListApplicationsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Applications) > 0 {
		for _, msg := range m.Applications {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIdentityserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateApplicationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateApplicationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.Application.Size()))
	n23, err := m.Application.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n23
	dAtA[i] = 0x12
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.UpdateMask.Size()))
	n24, err := m.UpdateMask.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n24
	return i, nil
}

func (m *GenerateApplicationAPIKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenerateApplicationAPIKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.ApplicationIdentifiers.Size()))
	n25, err := m.ApplicationIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n25
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Rights) > 0 {
		dAtA27 := make([]byte, len(m.Rights)*10)
		var j26 int
		for _, num := range m.Rights {
			for num >= 1<<7 {
				dAtA27[j26] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j26++
			}
			dAtA27[j26] = uint8(num)
			j26++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(j26))
		i += copy(dAtA[i:], dAtA27[:j26])
	}
	return i, nil
}

func (m *ListApplicationAPIKeysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListApplicationAPIKeysResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.APIKeys) > 0 {
		for _, msg := range m.APIKeys {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIdentityserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateApplicationAPIKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateApplicationAPIKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.ApplicationIdentifiers.Size()))
	n28, err := m.ApplicationIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n28
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Rights) > 0 {
		dAtA30 := make([]byte, len(m.Rights)*10)
		var j29 int
		for _, num := range m.Rights {
			for num >= 1<<7 {
				dAtA30[j29] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j29++
			}
			dAtA30[j29] = uint8(num)
			j29++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(j29))
		i += copy(dAtA[i:], dAtA30[:j29])
	}
	return i, nil
}

func (m *RemoveApplicationAPIKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveApplicationAPIKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.ApplicationIdentifiers.Size()))
	n31, err := m.ApplicationIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n31
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *ListApplicationCollaboratorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListApplicationCollaboratorsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Collaborators) > 0 {
		for _, msg := range m.Collaborators {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIdentityserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ListApplicationRightsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListApplicationRightsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Rights) > 0 {
		dAtA33 := make([]byte, len(m.Rights)*10)
		var j32 int
		for _, num := range m.Rights {
			for num >= 1<<7 {
				dAtA33[j32] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j32++
			}
			dAtA33[j32] = uint8(num)
			j32++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(j32))
		i += copy(dAtA[i:], dAtA33[:j32])
	}
	return i, nil
}

func (m *CreateGatewayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateGatewayRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.Gateway.Size()))
	n34, err := m.Gateway.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n34
	dAtA[i] = 0x12
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.OrganizationIdentifiers.Size()))
	n35, err := m.OrganizationIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n35
	return i, nil
}

func (m *ListGatewaysRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListGatewaysRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.OrganizationIdentifiers.Size()))
	n36, err := m.OrganizationIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n36
	return i, nil
}

func (m *ListGatewaysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListGatewaysResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Gateways) > 0 {
		for _, msg := range m.Gateways {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIdentityserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateGatewayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGatewayRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.Gateway.Size()))
	n37, err := m.Gateway.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n37
	dAtA[i] = 0x12
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.UpdateMask.Size()))
	n38, err := m.UpdateMask.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n38
	return i, nil
}

func (m *GenerateGatewayAPIKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenerateGatewayAPIKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.GatewayIdentifiers.Size()))
	n39, err := m.GatewayIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n39
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Rights) > 0 {
		dAtA41 := make([]byte, len(m.Rights)*10)
		var j40 int
		for _, num := range m.Rights {
			for num >= 1<<7 {
				dAtA41[j40] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j40++
			}
			dAtA41[j40] = uint8(num)
			j40++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(j40))
		i += copy(dAtA[i:], dAtA41[:j40])
	}
	return i, nil
}

func (m *ListGatewayAPIKeysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListGatewayAPIKeysResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.APIKeys) > 0 {
		for _, msg := range m.APIKeys {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIdentityserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateGatewayAPIKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGatewayAPIKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.GatewayIdentifiers.Size()))
	n42, err := m.GatewayIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n42
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Rights) > 0 {
		dAtA44 := make([]byte, len(m.Rights)*10)
		var j43 int
		for _, num := range m.Rights {
			for num >= 1<<7 {
				dAtA44[j43] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j43++
			}
			dAtA44[j43] = uint8(num)
			j43++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(j43))
		i += copy(dAtA[i:], dAtA44[:j43])
	}
	return i, nil
}

func (m *RemoveGatewayAPIKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveGatewayAPIKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.GatewayIdentifiers.Size()))
	n45, err := m.GatewayIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n45
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *ListGatewayCollaboratorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListGatewayCollaboratorsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Collaborators) > 0 {
		for _, msg := range m.Collaborators {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIdentityserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ListGatewayRightsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListGatewayRightsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Rights) > 0 {
		dAtA47 := make([]byte, len(m.Rights)*10)
		var j46 int
		for _, num := range m.Rights {
			for num >= 1<<7 {
				dAtA47[j46] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j46++
			}
			dAtA47[j46] = uint8(num)
			j46++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(j46))
		i += copy(dAtA[i:], dAtA47[:j46])
	}
	return i, nil
}

func (m *CreateClientRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateClientRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.Client.Size()))
	n48, err := m.Client.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n48
	return i, nil
}

func (m *ListClientsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListClientsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Clients) > 0 {
		for _, msg := range m.Clients {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIdentityserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateClientRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateClientRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.Client.Size()))
	n49, err := m.Client.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n49
	dAtA[i] = 0x12
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.UpdateMask.Size()))
	n50, err := m.UpdateMask.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n50
	return i, nil
}

func (m *CreateOrganizationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateOrganizationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.Organization.Size()))
	n51, err := m.Organization.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n51
	return i, nil
}

func (m *ListOrganizationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListOrganizationsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Organizations) > 0 {
		for _, msg := range m.Organizations {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIdentityserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateOrganizationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateOrganizationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.Organization.Size()))
	n52, err := m.Organization.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n52
	dAtA[i] = 0x12
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.UpdateMask.Size()))
	n53, err := m.UpdateMask.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n53
	return i, nil
}

func (m *GenerateOrganizationAPIKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenerateOrganizationAPIKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.OrganizationIdentifiers.Size()))
	n54, err := m.OrganizationIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n54
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Rights) > 0 {
		dAtA56 := make([]byte, len(m.Rights)*10)
		var j55 int
		for _, num := range m.Rights {
			for num >= 1<<7 {
				dAtA56[j55] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j55++
			}
			dAtA56[j55] = uint8(num)
			j55++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(j55))
		i += copy(dAtA[i:], dAtA56[:j55])
	}
	return i, nil
}

func (m *ListOrganizationAPIKeysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListOrganizationAPIKeysResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.APIKeys) > 0 {
		for _, msg := range m.APIKeys {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIdentityserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateOrganizationAPIKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateOrganizationAPIKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.OrganizationIdentifiers.Size()))
	n57, err := m.OrganizationIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n57
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Rights) > 0 {
		dAtA59 := make([]byte, len(m.Rights)*10)
		var j58 int
		for _, num := range m.Rights {
			for num >= 1<<7 {
				dAtA59[j58] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j58++
			}
			dAtA59[j58] = uint8(num)
			j58++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(j58))
		i += copy(dAtA[i:], dAtA59[:j58])
	}
	return i, nil
}

func (m *RemoveOrganizationAPIKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveOrganizationAPIKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintIdentityserver(dAtA, i, uint64(m.OrganizationIdentifiers.Size()))
	n60, err := m.OrganizationIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n60
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *ListOrganizationMembersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListOrganizationMembersResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Members) > 0 {
		for _, msg := range m.Members {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIdentityserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ListOrganizationRightsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListOrganizationRightsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Rights) > 0 {
		dAtA62 := make([]byte, len(m.Rights)*10)
		var j61 int
		for _, num := range m.Rights {
			for num >= 1<<7 {
				dAtA62[j61] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j61++
			}
			dAtA62[j61] = uint8(num)
			j61++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintIdentityserver(dAtA, i, uint64(j61))
		i += copy(dAtA[i:], dAtA62[:j61])
	}
	return i, nil
}

func encodeVarintIdentityserver(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedPullConfigurationRequest(r randyIdentityserver, easy bool) *PullConfigurationRequest {
	this := &PullConfigurationRequest{}
	v1 := NewPopulatedGatewayIdentifiers(r, easy)
	this.GatewayIdentifiers = *v1
	if r.Intn(10) != 0 {
		this.ProjectionMask = google_protobuf4.NewPopulatedFieldMask(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedIdentityServerSettings(r randyIdentityserver, easy bool) *IdentityServerSettings {
	this := &IdentityServerSettings{}
	v2 := types.NewPopulatedStdTime(r, easy)
	this.UpdatedAt = *v2
	v3 := r.Intn(10)
	this.BlacklistedIDs = make([]string, v3)
	for i := 0; i < v3; i++ {
		this.BlacklistedIDs[i] = randStringIdentityserver(r)
	}
	v4 := NewPopulatedIdentityServerSettings_UserRegistrationFlow(r, easy)
	this.IdentityServerSettings_UserRegistrationFlow = *v4
	v5 := types.NewPopulatedStdDuration(r, easy)
	this.ValidationTokenTTL = *v5
	v6 := r.Intn(10)
	this.AllowedEmails = make([]string, v6)
	for i := 0; i < v6; i++ {
		this.AllowedEmails[i] = randStringIdentityserver(r)
	}
	v7 := types.NewPopulatedStdDuration(r, easy)
	this.InvitationTokenTTL = *v7
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedIdentityServerSettings_UserRegistrationFlow(r randyIdentityserver, easy bool) *IdentityServerSettings_UserRegistrationFlow {
	this := &IdentityServerSettings_UserRegistrationFlow{}
	this.SkipValidation = bool(r.Intn(2) == 0)
	this.InvitationOnly = bool(r.Intn(2) == 0)
	this.AdminApproval = bool(r.Intn(2) == 0)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateSettingsRequest(r randyIdentityserver, easy bool) *UpdateSettingsRequest {
	this := &UpdateSettingsRequest{}
	v8 := NewPopulatedIdentityServerSettings(r, easy)
	this.Settings = *v8
	v9 := google_protobuf4.NewPopulatedFieldMask(r, easy)
	this.UpdateMask = *v9
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedResetUserPasswordResponse(r randyIdentityserver, easy bool) *ResetUserPasswordResponse {
	this := &ResetUserPasswordResponse{}
	this.Password = randStringIdentityserver(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSendInvitationRequest(r randyIdentityserver, easy bool) *SendInvitationRequest {
	this := &SendInvitationRequest{}
	this.Email = randStringIdentityserver(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListInvitationsResponse(r randyIdentityserver, easy bool) *ListInvitationsResponse {
	this := &ListInvitationsResponse{}
	if r.Intn(10) != 0 {
		v10 := r.Intn(5)
		this.Invitations = make([]*ListInvitationsResponse_Invitation, v10)
		for i := 0; i < v10; i++ {
			this.Invitations[i] = NewPopulatedListInvitationsResponse_Invitation(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListInvitationsResponse_Invitation(r randyIdentityserver, easy bool) *ListInvitationsResponse_Invitation {
	this := &ListInvitationsResponse_Invitation{}
	this.Email = randStringIdentityserver(r)
	v11 := types.NewPopulatedStdTime(r, easy)
	this.IssuedAt = *v11
	v12 := types.NewPopulatedStdTime(r, easy)
	this.ExpiresAt = *v12
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDeleteInvitationRequest(r randyIdentityserver, easy bool) *DeleteInvitationRequest {
	this := &DeleteInvitationRequest{}
	this.Email = randStringIdentityserver(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListUsersRequest(r randyIdentityserver, easy bool) *ListUsersRequest {
	this := &ListUsersRequest{}
	if r.Intn(10) != 0 {
		this.ListUsersRequest_FilterState = NewPopulatedListUsersRequest_FilterState(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListUsersRequest_FilterState(r randyIdentityserver, easy bool) *ListUsersRequest_FilterState {
	this := &ListUsersRequest_FilterState{}
	this.State = ReviewingState([]int32{0, 1, 2}[r.Intn(3)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListUsersResponse(r randyIdentityserver, easy bool) *ListUsersResponse {
	this := &ListUsersResponse{}
	if r.Intn(10) != 0 {
		v13 := r.Intn(5)
		this.Users = make([]*User, v13)
		for i := 0; i < v13; i++ {
			this.Users[i] = NewPopulatedUser(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListClientsRequest(r randyIdentityserver, easy bool) *ListClientsRequest {
	this := &ListClientsRequest{}
	if r.Intn(10) != 0 {
		this.ListClientsRequest_FilterState = NewPopulatedListClientsRequest_FilterState(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListClientsRequest_FilterState(r randyIdentityserver, easy bool) *ListClientsRequest_FilterState {
	this := &ListClientsRequest_FilterState{}
	this.State = ReviewingState([]int32{0, 1, 2}[r.Intn(3)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateUserRequest(r randyIdentityserver, easy bool) *CreateUserRequest {
	this := &CreateUserRequest{}
	v14 := NewPopulatedUser(r, easy)
	this.User = *v14
	this.InvitationToken = randStringIdentityserver(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateUserRequest(r randyIdentityserver, easy bool) *UpdateUserRequest {
	this := &UpdateUserRequest{}
	v15 := NewPopulatedUser(r, easy)
	this.User = *v15
	v16 := google_protobuf4.NewPopulatedFieldMask(r, easy)
	this.UpdateMask = *v16
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateUserPasswordRequest(r randyIdentityserver, easy bool) *UpdateUserPasswordRequest {
	this := &UpdateUserPasswordRequest{}
	this.Old = randStringIdentityserver(r)
	this.New = randStringIdentityserver(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGenerateUserAPIKeyRequest(r randyIdentityserver, easy bool) *GenerateUserAPIKeyRequest {
	this := &GenerateUserAPIKeyRequest{}
	this.Name = randStringIdentityserver(r)
	v17 := r.Intn(10)
	this.Rights = make([]Right, v17)
	for i := 0; i < v17; i++ {
		this.Rights[i] = Right([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43}[r.Intn(44)])
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListUserAPIKeysResponse(r randyIdentityserver, easy bool) *ListUserAPIKeysResponse {
	this := &ListUserAPIKeysResponse{}
	if r.Intn(10) != 0 {
		v18 := r.Intn(5)
		this.APIKeys = make([]*APIKey, v18)
		for i := 0; i < v18; i++ {
			this.APIKeys[i] = NewPopulatedAPIKey(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateUserAPIKeyRequest(r randyIdentityserver, easy bool) *UpdateUserAPIKeyRequest {
	this := &UpdateUserAPIKeyRequest{}
	this.Name = randStringIdentityserver(r)
	v19 := r.Intn(10)
	this.Rights = make([]Right, v19)
	for i := 0; i < v19; i++ {
		this.Rights[i] = Right([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43}[r.Intn(44)])
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRemoveUserAPIKeyRequest(r randyIdentityserver, easy bool) *RemoveUserAPIKeyRequest {
	this := &RemoveUserAPIKeyRequest{}
	this.Name = randStringIdentityserver(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedValidateUserEmailRequest(r randyIdentityserver, easy bool) *ValidateUserEmailRequest {
	this := &ValidateUserEmailRequest{}
	this.Token = randStringIdentityserver(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListAuthorizedClientsResponse(r randyIdentityserver, easy bool) *ListAuthorizedClientsResponse {
	this := &ListAuthorizedClientsResponse{}
	if r.Intn(10) != 0 {
		v20 := r.Intn(5)
		this.Clients = make([]*Client, v20)
		for i := 0; i < v20; i++ {
			this.Clients[i] = NewPopulatedClient(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateApplicationRequest(r randyIdentityserver, easy bool) *CreateApplicationRequest {
	this := &CreateApplicationRequest{}
	v21 := NewPopulatedApplication(r, easy)
	this.Application = *v21
	v22 := NewPopulatedOrganizationIdentifiers(r, easy)
	this.OrganizationIdentifiers = *v22
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListApplicationsRequest(r randyIdentityserver, easy bool) *ListApplicationsRequest {
	this := &ListApplicationsRequest{}
	v23 := NewPopulatedOrganizationIdentifiers(r, easy)
	this.OrganizationIdentifiers = *v23
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListApplicationsResponse(r randyIdentityserver, easy bool) *ListApplicationsResponse {
	this := &ListApplicationsResponse{}
	if r.Intn(10) != 0 {
		v24 := r.Intn(5)
		this.Applications = make([]*Application, v24)
		for i := 0; i < v24; i++ {
			this.Applications[i] = NewPopulatedApplication(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateApplicationRequest(r randyIdentityserver, easy bool) *UpdateApplicationRequest {
	this := &UpdateApplicationRequest{}
	v25 := NewPopulatedApplication(r, easy)
	this.Application = *v25
	v26 := google_protobuf4.NewPopulatedFieldMask(r, easy)
	this.UpdateMask = *v26
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGenerateApplicationAPIKeyRequest(r randyIdentityserver, easy bool) *GenerateApplicationAPIKeyRequest {
	this := &GenerateApplicationAPIKeyRequest{}
	v27 := NewPopulatedApplicationIdentifiers(r, easy)
	this.ApplicationIdentifiers = *v27
	this.Name = randStringIdentityserver(r)
	v28 := r.Intn(10)
	this.Rights = make([]Right, v28)
	for i := 0; i < v28; i++ {
		this.Rights[i] = Right([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43}[r.Intn(44)])
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListApplicationAPIKeysResponse(r randyIdentityserver, easy bool) *ListApplicationAPIKeysResponse {
	this := &ListApplicationAPIKeysResponse{}
	if r.Intn(10) != 0 {
		v29 := r.Intn(5)
		this.APIKeys = make([]*APIKey, v29)
		for i := 0; i < v29; i++ {
			this.APIKeys[i] = NewPopulatedAPIKey(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateApplicationAPIKeyRequest(r randyIdentityserver, easy bool) *UpdateApplicationAPIKeyRequest {
	this := &UpdateApplicationAPIKeyRequest{}
	v30 := NewPopulatedApplicationIdentifiers(r, easy)
	this.ApplicationIdentifiers = *v30
	this.Name = randStringIdentityserver(r)
	v31 := r.Intn(10)
	this.Rights = make([]Right, v31)
	for i := 0; i < v31; i++ {
		this.Rights[i] = Right([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43}[r.Intn(44)])
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRemoveApplicationAPIKeyRequest(r randyIdentityserver, easy bool) *RemoveApplicationAPIKeyRequest {
	this := &RemoveApplicationAPIKeyRequest{}
	v32 := NewPopulatedApplicationIdentifiers(r, easy)
	this.ApplicationIdentifiers = *v32
	this.Name = randStringIdentityserver(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListApplicationCollaboratorsResponse(r randyIdentityserver, easy bool) *ListApplicationCollaboratorsResponse {
	this := &ListApplicationCollaboratorsResponse{}
	if r.Intn(10) != 0 {
		v33 := r.Intn(5)
		this.Collaborators = make([]*ApplicationCollaborator, v33)
		for i := 0; i < v33; i++ {
			this.Collaborators[i] = NewPopulatedApplicationCollaborator(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListApplicationRightsResponse(r randyIdentityserver, easy bool) *ListApplicationRightsResponse {
	this := &ListApplicationRightsResponse{}
	v34 := r.Intn(10)
	this.Rights = make([]Right, v34)
	for i := 0; i < v34; i++ {
		this.Rights[i] = Right([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43}[r.Intn(44)])
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateGatewayRequest(r randyIdentityserver, easy bool) *CreateGatewayRequest {
	this := &CreateGatewayRequest{}
	v35 := NewPopulatedGateway(r, easy)
	this.Gateway = *v35
	v36 := NewPopulatedOrganizationIdentifiers(r, easy)
	this.OrganizationIdentifiers = *v36
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListGatewaysRequest(r randyIdentityserver, easy bool) *ListGatewaysRequest {
	this := &ListGatewaysRequest{}
	v37 := NewPopulatedOrganizationIdentifiers(r, easy)
	this.OrganizationIdentifiers = *v37
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListGatewaysResponse(r randyIdentityserver, easy bool) *ListGatewaysResponse {
	this := &ListGatewaysResponse{}
	if r.Intn(10) != 0 {
		v38 := r.Intn(5)
		this.Gateways = make([]*Gateway, v38)
		for i := 0; i < v38; i++ {
			this.Gateways[i] = NewPopulatedGateway(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateGatewayRequest(r randyIdentityserver, easy bool) *UpdateGatewayRequest {
	this := &UpdateGatewayRequest{}
	v39 := NewPopulatedGateway(r, easy)
	this.Gateway = *v39
	v40 := google_protobuf4.NewPopulatedFieldMask(r, easy)
	this.UpdateMask = *v40
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGenerateGatewayAPIKeyRequest(r randyIdentityserver, easy bool) *GenerateGatewayAPIKeyRequest {
	this := &GenerateGatewayAPIKeyRequest{}
	v41 := NewPopulatedGatewayIdentifiers(r, easy)
	this.GatewayIdentifiers = *v41
	this.Name = randStringIdentityserver(r)
	v42 := r.Intn(10)
	this.Rights = make([]Right, v42)
	for i := 0; i < v42; i++ {
		this.Rights[i] = Right([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43}[r.Intn(44)])
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListGatewayAPIKeysResponse(r randyIdentityserver, easy bool) *ListGatewayAPIKeysResponse {
	this := &ListGatewayAPIKeysResponse{}
	if r.Intn(10) != 0 {
		v43 := r.Intn(5)
		this.APIKeys = make([]*APIKey, v43)
		for i := 0; i < v43; i++ {
			this.APIKeys[i] = NewPopulatedAPIKey(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateGatewayAPIKeyRequest(r randyIdentityserver, easy bool) *UpdateGatewayAPIKeyRequest {
	this := &UpdateGatewayAPIKeyRequest{}
	v44 := NewPopulatedGatewayIdentifiers(r, easy)
	this.GatewayIdentifiers = *v44
	this.Name = randStringIdentityserver(r)
	v45 := r.Intn(10)
	this.Rights = make([]Right, v45)
	for i := 0; i < v45; i++ {
		this.Rights[i] = Right([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43}[r.Intn(44)])
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRemoveGatewayAPIKeyRequest(r randyIdentityserver, easy bool) *RemoveGatewayAPIKeyRequest {
	this := &RemoveGatewayAPIKeyRequest{}
	v46 := NewPopulatedGatewayIdentifiers(r, easy)
	this.GatewayIdentifiers = *v46
	this.Name = randStringIdentityserver(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListGatewayCollaboratorsResponse(r randyIdentityserver, easy bool) *ListGatewayCollaboratorsResponse {
	this := &ListGatewayCollaboratorsResponse{}
	if r.Intn(10) != 0 {
		v47 := r.Intn(5)
		this.Collaborators = make([]*GatewayCollaborator, v47)
		for i := 0; i < v47; i++ {
			this.Collaborators[i] = NewPopulatedGatewayCollaborator(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListGatewayRightsResponse(r randyIdentityserver, easy bool) *ListGatewayRightsResponse {
	this := &ListGatewayRightsResponse{}
	v48 := r.Intn(10)
	this.Rights = make([]Right, v48)
	for i := 0; i < v48; i++ {
		this.Rights[i] = Right([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43}[r.Intn(44)])
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateClientRequest(r randyIdentityserver, easy bool) *CreateClientRequest {
	this := &CreateClientRequest{}
	v49 := NewPopulatedClient(r, easy)
	this.Client = *v49
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListClientsResponse(r randyIdentityserver, easy bool) *ListClientsResponse {
	this := &ListClientsResponse{}
	if r.Intn(10) != 0 {
		v50 := r.Intn(5)
		this.Clients = make([]*Client, v50)
		for i := 0; i < v50; i++ {
			this.Clients[i] = NewPopulatedClient(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateClientRequest(r randyIdentityserver, easy bool) *UpdateClientRequest {
	this := &UpdateClientRequest{}
	v51 := NewPopulatedClient(r, easy)
	this.Client = *v51
	v52 := google_protobuf4.NewPopulatedFieldMask(r, easy)
	this.UpdateMask = *v52
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateOrganizationRequest(r randyIdentityserver, easy bool) *CreateOrganizationRequest {
	this := &CreateOrganizationRequest{}
	v53 := NewPopulatedOrganization(r, easy)
	this.Organization = *v53
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListOrganizationsResponse(r randyIdentityserver, easy bool) *ListOrganizationsResponse {
	this := &ListOrganizationsResponse{}
	if r.Intn(10) != 0 {
		v54 := r.Intn(5)
		this.Organizations = make([]*Organization, v54)
		for i := 0; i < v54; i++ {
			this.Organizations[i] = NewPopulatedOrganization(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateOrganizationRequest(r randyIdentityserver, easy bool) *UpdateOrganizationRequest {
	this := &UpdateOrganizationRequest{}
	v55 := NewPopulatedOrganization(r, easy)
	this.Organization = *v55
	v56 := google_protobuf4.NewPopulatedFieldMask(r, easy)
	this.UpdateMask = *v56
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGenerateOrganizationAPIKeyRequest(r randyIdentityserver, easy bool) *GenerateOrganizationAPIKeyRequest {
	this := &GenerateOrganizationAPIKeyRequest{}
	v57 := NewPopulatedOrganizationIdentifiers(r, easy)
	this.OrganizationIdentifiers = *v57
	this.Name = randStringIdentityserver(r)
	v58 := r.Intn(10)
	this.Rights = make([]Right, v58)
	for i := 0; i < v58; i++ {
		this.Rights[i] = Right([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43}[r.Intn(44)])
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListOrganizationAPIKeysResponse(r randyIdentityserver, easy bool) *ListOrganizationAPIKeysResponse {
	this := &ListOrganizationAPIKeysResponse{}
	if r.Intn(10) != 0 {
		v59 := r.Intn(5)
		this.APIKeys = make([]*APIKey, v59)
		for i := 0; i < v59; i++ {
			this.APIKeys[i] = NewPopulatedAPIKey(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateOrganizationAPIKeyRequest(r randyIdentityserver, easy bool) *UpdateOrganizationAPIKeyRequest {
	this := &UpdateOrganizationAPIKeyRequest{}
	v60 := NewPopulatedOrganizationIdentifiers(r, easy)
	this.OrganizationIdentifiers = *v60
	this.Name = randStringIdentityserver(r)
	v61 := r.Intn(10)
	this.Rights = make([]Right, v61)
	for i := 0; i < v61; i++ {
		this.Rights[i] = Right([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43}[r.Intn(44)])
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRemoveOrganizationAPIKeyRequest(r randyIdentityserver, easy bool) *RemoveOrganizationAPIKeyRequest {
	this := &RemoveOrganizationAPIKeyRequest{}
	v62 := NewPopulatedOrganizationIdentifiers(r, easy)
	this.OrganizationIdentifiers = *v62
	this.Name = randStringIdentityserver(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListOrganizationMembersResponse(r randyIdentityserver, easy bool) *ListOrganizationMembersResponse {
	this := &ListOrganizationMembersResponse{}
	if r.Intn(10) != 0 {
		v63 := r.Intn(5)
		this.Members = make([]*OrganizationMember, v63)
		for i := 0; i < v63; i++ {
			this.Members[i] = NewPopulatedOrganizationMember(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListOrganizationRightsResponse(r randyIdentityserver, easy bool) *ListOrganizationRightsResponse {
	this := &ListOrganizationRightsResponse{}
	v64 := r.Intn(10)
	this.Rights = make([]Right, v64)
	for i := 0; i < v64; i++ {
		this.Rights[i] = Right([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43}[r.Intn(44)])
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyIdentityserver interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneIdentityserver(r randyIdentityserver) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringIdentityserver(r randyIdentityserver) string {
	v65 := r.Intn(100)
	tmps := make([]rune, v65)
	for i := 0; i < v65; i++ {
		tmps[i] = randUTF8RuneIdentityserver(r)
	}
	return string(tmps)
}
func randUnrecognizedIdentityserver(r randyIdentityserver, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldIdentityserver(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldIdentityserver(dAtA []byte, r randyIdentityserver, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateIdentityserver(dAtA, uint64(key))
		v66 := r.Int63()
		if r.Intn(2) == 0 {
			v66 *= -1
		}
		dAtA = encodeVarintPopulateIdentityserver(dAtA, uint64(v66))
	case 1:
		dAtA = encodeVarintPopulateIdentityserver(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateIdentityserver(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateIdentityserver(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateIdentityserver(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateIdentityserver(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *PullConfigurationRequest) Size() (n int) {
	var l int
	_ = l
	l = m.GatewayIdentifiers.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	if m.ProjectionMask != nil {
		l = m.ProjectionMask.Size()
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	return n
}

func (m *IdentityServerSettings) Size() (n int) {
	var l int
	_ = l
	l = types.SizeOfStdTime(m.UpdatedAt)
	n += 1 + l + sovIdentityserver(uint64(l))
	if len(m.BlacklistedIDs) > 0 {
		for _, s := range m.BlacklistedIDs {
			l = len(s)
			n += 1 + l + sovIdentityserver(uint64(l))
		}
	}
	l = m.IdentityServerSettings_UserRegistrationFlow.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = types.SizeOfStdDuration(m.ValidationTokenTTL)
	n += 1 + l + sovIdentityserver(uint64(l))
	if len(m.AllowedEmails) > 0 {
		for _, s := range m.AllowedEmails {
			l = len(s)
			n += 1 + l + sovIdentityserver(uint64(l))
		}
	}
	l = types.SizeOfStdDuration(m.InvitationTokenTTL)
	n += 1 + l + sovIdentityserver(uint64(l))
	return n
}

func (m *IdentityServerSettings_UserRegistrationFlow) Size() (n int) {
	var l int
	_ = l
	if m.SkipValidation {
		n += 2
	}
	if m.InvitationOnly {
		n += 2
	}
	if m.AdminApproval {
		n += 2
	}
	return n
}

func (m *UpdateSettingsRequest) Size() (n int) {
	var l int
	_ = l
	l = m.Settings.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = m.UpdateMask.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	return n
}

func (m *ResetUserPasswordResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	return n
}

func (m *SendInvitationRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	return n
}

func (m *ListInvitationsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Invitations) > 0 {
		for _, e := range m.Invitations {
			l = e.Size()
			n += 1 + l + sovIdentityserver(uint64(l))
		}
	}
	return n
}

func (m *ListInvitationsResponse_Invitation) Size() (n int) {
	var l int
	_ = l
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	l = types.SizeOfStdTime(m.IssuedAt)
	n += 1 + l + sovIdentityserver(uint64(l))
	l = types.SizeOfStdTime(m.ExpiresAt)
	n += 1 + l + sovIdentityserver(uint64(l))
	return n
}

func (m *DeleteInvitationRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	return n
}

func (m *ListUsersRequest) Size() (n int) {
	var l int
	_ = l
	if m.ListUsersRequest_FilterState != nil {
		l = m.ListUsersRequest_FilterState.Size()
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	return n
}

func (m *ListUsersRequest_FilterState) Size() (n int) {
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovIdentityserver(uint64(m.State))
	}
	return n
}

func (m *ListUsersResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovIdentityserver(uint64(l))
		}
	}
	return n
}

func (m *ListClientsRequest) Size() (n int) {
	var l int
	_ = l
	if m.ListClientsRequest_FilterState != nil {
		l = m.ListClientsRequest_FilterState.Size()
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	return n
}

func (m *ListClientsRequest_FilterState) Size() (n int) {
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovIdentityserver(uint64(m.State))
	}
	return n
}

func (m *CreateUserRequest) Size() (n int) {
	var l int
	_ = l
	l = m.User.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = len(m.InvitationToken)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	return n
}

func (m *UpdateUserRequest) Size() (n int) {
	var l int
	_ = l
	l = m.User.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = m.UpdateMask.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	return n
}

func (m *UpdateUserPasswordRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Old)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	l = len(m.New)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	return n
}

func (m *GenerateUserAPIKeyRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	if len(m.Rights) > 0 {
		l = 0
		for _, e := range m.Rights {
			l += sovIdentityserver(uint64(e))
		}
		n += 1 + sovIdentityserver(uint64(l)) + l
	}
	return n
}

func (m *ListUserAPIKeysResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.APIKeys) > 0 {
		for _, e := range m.APIKeys {
			l = e.Size()
			n += 1 + l + sovIdentityserver(uint64(l))
		}
	}
	return n
}

func (m *UpdateUserAPIKeyRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	if len(m.Rights) > 0 {
		l = 0
		for _, e := range m.Rights {
			l += sovIdentityserver(uint64(e))
		}
		n += 1 + sovIdentityserver(uint64(l)) + l
	}
	return n
}

func (m *RemoveUserAPIKeyRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	return n
}

func (m *ValidateUserEmailRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	return n
}

func (m *ListAuthorizedClientsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Clients) > 0 {
		for _, e := range m.Clients {
			l = e.Size()
			n += 1 + l + sovIdentityserver(uint64(l))
		}
	}
	return n
}

func (m *CreateApplicationRequest) Size() (n int) {
	var l int
	_ = l
	l = m.Application.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = m.OrganizationIdentifiers.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	return n
}

func (m *ListApplicationsRequest) Size() (n int) {
	var l int
	_ = l
	l = m.OrganizationIdentifiers.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	return n
}

func (m *ListApplicationsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Applications) > 0 {
		for _, e := range m.Applications {
			l = e.Size()
			n += 1 + l + sovIdentityserver(uint64(l))
		}
	}
	return n
}

func (m *UpdateApplicationRequest) Size() (n int) {
	var l int
	_ = l
	l = m.Application.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = m.UpdateMask.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	return n
}

func (m *GenerateApplicationAPIKeyRequest) Size() (n int) {
	var l int
	_ = l
	l = m.ApplicationIdentifiers.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	if len(m.Rights) > 0 {
		l = 0
		for _, e := range m.Rights {
			l += sovIdentityserver(uint64(e))
		}
		n += 1 + sovIdentityserver(uint64(l)) + l
	}
	return n
}

func (m *ListApplicationAPIKeysResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.APIKeys) > 0 {
		for _, e := range m.APIKeys {
			l = e.Size()
			n += 1 + l + sovIdentityserver(uint64(l))
		}
	}
	return n
}

func (m *UpdateApplicationAPIKeyRequest) Size() (n int) {
	var l int
	_ = l
	l = m.ApplicationIdentifiers.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	if len(m.Rights) > 0 {
		l = 0
		for _, e := range m.Rights {
			l += sovIdentityserver(uint64(e))
		}
		n += 1 + sovIdentityserver(uint64(l)) + l
	}
	return n
}

func (m *RemoveApplicationAPIKeyRequest) Size() (n int) {
	var l int
	_ = l
	l = m.ApplicationIdentifiers.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	return n
}

func (m *ListApplicationCollaboratorsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Collaborators) > 0 {
		for _, e := range m.Collaborators {
			l = e.Size()
			n += 1 + l + sovIdentityserver(uint64(l))
		}
	}
	return n
}

func (m *ListApplicationRightsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Rights) > 0 {
		l = 0
		for _, e := range m.Rights {
			l += sovIdentityserver(uint64(e))
		}
		n += 1 + sovIdentityserver(uint64(l)) + l
	}
	return n
}

func (m *CreateGatewayRequest) Size() (n int) {
	var l int
	_ = l
	l = m.Gateway.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = m.OrganizationIdentifiers.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	return n
}

func (m *ListGatewaysRequest) Size() (n int) {
	var l int
	_ = l
	l = m.OrganizationIdentifiers.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	return n
}

func (m *ListGatewaysResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Gateways) > 0 {
		for _, e := range m.Gateways {
			l = e.Size()
			n += 1 + l + sovIdentityserver(uint64(l))
		}
	}
	return n
}

func (m *UpdateGatewayRequest) Size() (n int) {
	var l int
	_ = l
	l = m.Gateway.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = m.UpdateMask.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	return n
}

func (m *GenerateGatewayAPIKeyRequest) Size() (n int) {
	var l int
	_ = l
	l = m.GatewayIdentifiers.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	if len(m.Rights) > 0 {
		l = 0
		for _, e := range m.Rights {
			l += sovIdentityserver(uint64(e))
		}
		n += 1 + sovIdentityserver(uint64(l)) + l
	}
	return n
}

func (m *ListGatewayAPIKeysResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.APIKeys) > 0 {
		for _, e := range m.APIKeys {
			l = e.Size()
			n += 1 + l + sovIdentityserver(uint64(l))
		}
	}
	return n
}

func (m *UpdateGatewayAPIKeyRequest) Size() (n int) {
	var l int
	_ = l
	l = m.GatewayIdentifiers.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	if len(m.Rights) > 0 {
		l = 0
		for _, e := range m.Rights {
			l += sovIdentityserver(uint64(e))
		}
		n += 1 + sovIdentityserver(uint64(l)) + l
	}
	return n
}

func (m *RemoveGatewayAPIKeyRequest) Size() (n int) {
	var l int
	_ = l
	l = m.GatewayIdentifiers.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	return n
}

func (m *ListGatewayCollaboratorsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Collaborators) > 0 {
		for _, e := range m.Collaborators {
			l = e.Size()
			n += 1 + l + sovIdentityserver(uint64(l))
		}
	}
	return n
}

func (m *ListGatewayRightsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Rights) > 0 {
		l = 0
		for _, e := range m.Rights {
			l += sovIdentityserver(uint64(e))
		}
		n += 1 + sovIdentityserver(uint64(l)) + l
	}
	return n
}

func (m *CreateClientRequest) Size() (n int) {
	var l int
	_ = l
	l = m.Client.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	return n
}

func (m *ListClientsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Clients) > 0 {
		for _, e := range m.Clients {
			l = e.Size()
			n += 1 + l + sovIdentityserver(uint64(l))
		}
	}
	return n
}

func (m *UpdateClientRequest) Size() (n int) {
	var l int
	_ = l
	l = m.Client.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = m.UpdateMask.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	return n
}

func (m *CreateOrganizationRequest) Size() (n int) {
	var l int
	_ = l
	l = m.Organization.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	return n
}

func (m *ListOrganizationsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Organizations) > 0 {
		for _, e := range m.Organizations {
			l = e.Size()
			n += 1 + l + sovIdentityserver(uint64(l))
		}
	}
	return n
}

func (m *UpdateOrganizationRequest) Size() (n int) {
	var l int
	_ = l
	l = m.Organization.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = m.UpdateMask.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	return n
}

func (m *GenerateOrganizationAPIKeyRequest) Size() (n int) {
	var l int
	_ = l
	l = m.OrganizationIdentifiers.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	if len(m.Rights) > 0 {
		l = 0
		for _, e := range m.Rights {
			l += sovIdentityserver(uint64(e))
		}
		n += 1 + sovIdentityserver(uint64(l)) + l
	}
	return n
}

func (m *ListOrganizationAPIKeysResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.APIKeys) > 0 {
		for _, e := range m.APIKeys {
			l = e.Size()
			n += 1 + l + sovIdentityserver(uint64(l))
		}
	}
	return n
}

func (m *UpdateOrganizationAPIKeyRequest) Size() (n int) {
	var l int
	_ = l
	l = m.OrganizationIdentifiers.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	if len(m.Rights) > 0 {
		l = 0
		for _, e := range m.Rights {
			l += sovIdentityserver(uint64(e))
		}
		n += 1 + sovIdentityserver(uint64(l)) + l
	}
	return n
}

func (m *RemoveOrganizationAPIKeyRequest) Size() (n int) {
	var l int
	_ = l
	l = m.OrganizationIdentifiers.Size()
	n += 1 + l + sovIdentityserver(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIdentityserver(uint64(l))
	}
	return n
}

func (m *ListOrganizationMembersResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovIdentityserver(uint64(l))
		}
	}
	return n
}

func (m *ListOrganizationRightsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Rights) > 0 {
		l = 0
		for _, e := range m.Rights {
			l += sovIdentityserver(uint64(e))
		}
		n += 1 + sovIdentityserver(uint64(l)) + l
	}
	return n
}

func sovIdentityserver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozIdentityserver(x uint64) (n int) {
	return sovIdentityserver((x << 1) ^ uint64((int64(x) >> 63)))
}
func (m *PullConfigurationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullConfigurationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullConfigurationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GatewayIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectionMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProjectionMask == nil {
				m.ProjectionMask = &google_protobuf4.FieldMask{}
			}
			if err := m.ProjectionMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IdentityServerSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IdentityServerSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IdentityServerSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlacklistedIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlacklistedIDs = append(m.BlacklistedIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityServerSettings_UserRegistrationFlow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IdentityServerSettings_UserRegistrationFlow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationTokenTTL", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdDurationUnmarshal(&m.ValidationTokenTTL, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedEmails", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedEmails = append(m.AllowedEmails, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvitationTokenTTL", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdDurationUnmarshal(&m.InvitationTokenTTL, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IdentityServerSettings_UserRegistrationFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserRegistrationFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserRegistrationFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipValidation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SkipValidation = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvitationOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InvitationOnly = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminApproval", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdminApproval = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSettingsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSettingsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSettingsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpdateMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResetUserPasswordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetUserPasswordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetUserPasswordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendInvitationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendInvitationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendInvitationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListInvitationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListInvitationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListInvitationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invitations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Invitations = append(m.Invitations, &ListInvitationsResponse_Invitation{})
			if err := m.Invitations[len(m.Invitations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListInvitationsResponse_Invitation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Invitation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Invitation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdTimeUnmarshal(&m.IssuedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdTimeUnmarshal(&m.ExpiresAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteInvitationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteInvitationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteInvitationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListUsersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListUsersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListUsersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListUsersRequest_FilterState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ListUsersRequest_FilterState == nil {
				m.ListUsersRequest_FilterState = &ListUsersRequest_FilterState{}
			}
			if err := m.ListUsersRequest_FilterState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListUsersRequest_FilterState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FilterState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FilterState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (ReviewingState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListUsersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListUsersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListUsersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListClientsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListClientsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListClientsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListClientsRequest_FilterState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ListClientsRequest_FilterState == nil {
				m.ListClientsRequest_FilterState = &ListClientsRequest_FilterState{}
			}
			if err := m.ListClientsRequest_FilterState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListClientsRequest_FilterState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FilterState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FilterState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (ReviewingState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvitationToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvitationToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpdateMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserPasswordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserPasswordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserPasswordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Old", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Old = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field New", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.New = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenerateUserAPIKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenerateUserAPIKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenerateUserAPIKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v Right
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Right(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rights = append(m.Rights, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIdentityserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v Right
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIdentityserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Right(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rights = append(m.Rights, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rights", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListUserAPIKeysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListUserAPIKeysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListUserAPIKeysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field APIKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.APIKeys = append(m.APIKeys, &APIKey{})
			if err := m.APIKeys[len(m.APIKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserAPIKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserAPIKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserAPIKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v Right
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Right(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rights = append(m.Rights, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIdentityserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v Right
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIdentityserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Right(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rights = append(m.Rights, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rights", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveUserAPIKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveUserAPIKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveUserAPIKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateUserEmailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateUserEmailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateUserEmailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAuthorizedClientsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAuthorizedClientsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAuthorizedClientsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Clients = append(m.Clients, &Client{})
			if err := m.Clients[len(m.Clients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateApplicationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateApplicationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateApplicationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Application", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Application.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OrganizationIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListApplicationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListApplicationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListApplicationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OrganizationIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListApplicationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListApplicationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListApplicationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Applications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Applications = append(m.Applications, &Application{})
			if err := m.Applications[len(m.Applications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateApplicationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateApplicationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateApplicationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Application", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Application.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpdateMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenerateApplicationAPIKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenerateApplicationAPIKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenerateApplicationAPIKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v Right
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Right(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rights = append(m.Rights, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIdentityserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v Right
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIdentityserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Right(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rights = append(m.Rights, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rights", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListApplicationAPIKeysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListApplicationAPIKeysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListApplicationAPIKeysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field APIKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.APIKeys = append(m.APIKeys, &APIKey{})
			if err := m.APIKeys[len(m.APIKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateApplicationAPIKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateApplicationAPIKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateApplicationAPIKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v Right
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Right(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rights = append(m.Rights, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIdentityserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v Right
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIdentityserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Right(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rights = append(m.Rights, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rights", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveApplicationAPIKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveApplicationAPIKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveApplicationAPIKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListApplicationCollaboratorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListApplicationCollaboratorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListApplicationCollaboratorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collaborators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collaborators = append(m.Collaborators, &ApplicationCollaborator{})
			if err := m.Collaborators[len(m.Collaborators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListApplicationRightsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListApplicationRightsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListApplicationRightsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v Right
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Right(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rights = append(m.Rights, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIdentityserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v Right
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIdentityserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Right(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rights = append(m.Rights, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rights", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateGatewayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateGatewayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateGatewayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Gateway.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OrganizationIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListGatewaysRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListGatewaysRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListGatewaysRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OrganizationIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListGatewaysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListGatewaysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListGatewaysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateways", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateways = append(m.Gateways, &Gateway{})
			if err := m.Gateways[len(m.Gateways)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGatewayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGatewayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGatewayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Gateway.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpdateMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenerateGatewayAPIKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenerateGatewayAPIKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenerateGatewayAPIKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GatewayIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v Right
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Right(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rights = append(m.Rights, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIdentityserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v Right
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIdentityserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Right(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rights = append(m.Rights, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rights", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListGatewayAPIKeysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListGatewayAPIKeysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListGatewayAPIKeysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field APIKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.APIKeys = append(m.APIKeys, &APIKey{})
			if err := m.APIKeys[len(m.APIKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGatewayAPIKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGatewayAPIKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGatewayAPIKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GatewayIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v Right
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Right(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rights = append(m.Rights, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIdentityserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v Right
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIdentityserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Right(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rights = append(m.Rights, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rights", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveGatewayAPIKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveGatewayAPIKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveGatewayAPIKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GatewayIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListGatewayCollaboratorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListGatewayCollaboratorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListGatewayCollaboratorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collaborators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collaborators = append(m.Collaborators, &GatewayCollaborator{})
			if err := m.Collaborators[len(m.Collaborators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListGatewayRightsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListGatewayRightsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListGatewayRightsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v Right
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Right(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rights = append(m.Rights, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIdentityserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v Right
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIdentityserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Right(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rights = append(m.Rights, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rights", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateClientRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateClientRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateClientRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Client.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListClientsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListClientsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListClientsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Clients = append(m.Clients, &Client{})
			if err := m.Clients[len(m.Clients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateClientRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateClientRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateClientRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Client.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpdateMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateOrganizationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateOrganizationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateOrganizationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Organization.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListOrganizationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListOrganizationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListOrganizationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organizations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organizations = append(m.Organizations, &Organization{})
			if err := m.Organizations[len(m.Organizations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateOrganizationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateOrganizationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateOrganizationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Organization.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpdateMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenerateOrganizationAPIKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenerateOrganizationAPIKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenerateOrganizationAPIKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OrganizationIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v Right
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Right(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rights = append(m.Rights, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIdentityserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v Right
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIdentityserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Right(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rights = append(m.Rights, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rights", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListOrganizationAPIKeysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListOrganizationAPIKeysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListOrganizationAPIKeysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field APIKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.APIKeys = append(m.APIKeys, &APIKey{})
			if err := m.APIKeys[len(m.APIKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateOrganizationAPIKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateOrganizationAPIKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateOrganizationAPIKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OrganizationIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v Right
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Right(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rights = append(m.Rights, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIdentityserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v Right
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIdentityserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Right(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rights = append(m.Rights, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rights", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveOrganizationAPIKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveOrganizationAPIKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveOrganizationAPIKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OrganizationIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListOrganizationMembersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListOrganizationMembersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListOrganizationMembersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &OrganizationMember{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListOrganizationRightsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListOrganizationRightsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListOrganizationRightsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v Right
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Right(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rights = append(m.Rights, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIdentityserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v Right
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIdentityserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Right(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rights = append(m.Rights, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rights", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIdentityserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIdentityserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIdentityserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthIdentityserver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowIdentityserver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipIdentityserver(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthIdentityserver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIdentityserver   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/identityserver.proto", fileDescriptorIdentityserver)
}
func init() {
	golang_proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/identityserver.proto", fileDescriptorIdentityserver)
}

var fileDescriptorIdentityserver = []byte{
	// 3940 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x5c, 0x5d, 0x70, 0x1b, 0xd7,
	0x75, 0xe6, 0xd5, 0x2f, 0x79, 0x28, 0x82, 0xe4, 0x15, 0x25, 0x91, 0xb0, 0xbc, 0x80, 0x56, 0x92,
	0x45, 0xc1, 0x02, 0x20, 0x43, 0x72, 0x9c, 0xa8, 0x4e, 0x54, 0x92, 0xb2, 0x68, 0xd8, 0x56, 0xe4,
	0x40, 0x72, 0xd3, 0xa8, 0x4e, 0x99, 0x25, 0x71, 0x09, 0xae, 0x09, 0xec, 0x42, 0xd8, 0x25, 0x19,
	0x9a, 0x65, 0xe3, 0xc9, 0x4c, 0x5b, 0x3f, 0x74, 0x52, 0x37, 0x9e, 0xce, 0x78, 0x26, 0x99, 0x36,
	0x69, 0xd3, 0x8e, 0xd3, 0x49, 0x53, 0xa7, 0xd3, 0x9f, 0xf4, 0xa1, 0x1d, 0x4f, 0x27, 0x0f, 0x7e,
	0xea, 0x78, 0xa6, 0x2f, 0x79, 0xa2, 0x23, 0xb0, 0x0f, 0x79, 0xcc, 0xe8, 0x29, 0x4f, 0x9d, 0xce,
	0xfd, 0x59, 0xec, 0xdd, 0x9f, 0x0b, 0x2c, 0x45, 0xb8, 0xb5, 0x9f, 0x04, 0x60, 0xef, 0x3d, 0xe7,
	0xbb, 0xdf, 0x39, 0xf7, 0xdc, 0xbb, 0xe7, 0x1c, 0x0a, 0x3e, 0x5b, 0x33, 0xdd, 0x95, 0xb5, 0xc5,
	0xc2, 0x92, 0xdd, 0x28, 0xde, 0x5d, 0x21, 0x77, 0x57, 0x4c, 0xab, 0xe6, 0x7c, 0x91, 0xb8, 0x1b,
	0x76, 0x6b, 0xb5, 0xe8, 0xba, 0x56, 0xd1, 0x68, 0x9a, 0x45, 0xb3, 0x4a, 0x2c, 0xd7, 0x74, 0x37,
	0x1d, 0xd2, 0x5a, 0x27, 0xad, 0x42, 0xb3, 0x65, 0xbb, 0x36, 0x4e, 0xb9, 0xae, 0x55, 0xa8, 0xdb,
	0x2d, 0x63, 0xc3, 0xb0, 0x0a, 0xeb, 0x57, 0xd2, 0x4f, 0x27, 0x91, 0x64, 0x34, 0x9b, 0x75, 0x73,
	0xc9, 0x70, 0x4d, 0xdb, 0xe2, 0x62, 0xd2, 0x85, 0x44, 0xd3, 0xd6, 0xdc, 0x15, 0x31, 0xfe, 0x72,
	0x92, 0xf1, 0x4b, 0x75, 0x93, 0x58, 0xae, 0x98, 0xf1, 0x99, 0x44, 0x33, 0xec, 0x7a, 0xdd, 0x58,
	0xb4, 0x5b, 0x86, 0x6b, 0x8b, 0x05, 0xa6, 0x9f, 0x4a, 0x32, 0xaf, 0x66, 0xb8, 0x64, 0xc3, 0xd8,
	0x14, 0x53, 0x9e, 0x4e, 0xce, 0xe6, 0xb2, 0x49, 0x5a, 0x8e, 0x98, 0x56, 0x4a, 0x32, 0xad, 0x41,
	0x5c, 0xa3, 0x6a, 0xb8, 0xc6, 0x5e, 0x56, 0x65, 0xb7, 0x6a, 0x86, 0x65, 0xbe, 0x2e, 0xf3, 0x9d,
	0x88, 0xbf, 0x96, 0x59, 0x5b, 0x71, 0x9d, 0xbd, 0x58, 0x68, 0xcd, 0xf1, 0x1c, 0x23, 0x9d, 0x97,
	0xc6, 0xd7, 0xec, 0x9a, 0x5d, 0x64, 0x3f, 0x2f, 0xae, 0x2d, 0xb3, 0x6f, 0xec, 0x0b, 0xfb, 0x24,
	0x86, 0x9f, 0xae, 0xd9, 0x76, 0xad, 0x4e, 0xb8, 0x9d, 0x2d, 0xcb, 0x76, 0x19, 0x5a, 0x4f, 0xb9,
	0x26, 0x9e, 0x76, 0x64, 0x54, 0xd7, 0x5a, 0xf2, 0x72, 0x1e, 0x0b, 0x3f, 0x27, 0x8d, 0xa6, 0xeb,
	0x99, 0x23, 0x1b, 0x7e, 0xb8, 0x6c, 0x92, 0x7a, 0x75, 0xa1, 0x61, 0x38, 0xab, 0x62, 0x44, 0x26,
	0x3c, 0xc2, 0x35, 0x1b, 0xc4, 0x71, 0x8d, 0x46, 0x93, 0x0f, 0xd0, 0x7f, 0x8c, 0x60, 0xf2, 0xe5,
	0xb5, 0x7a, 0x7d, 0xce, 0xb6, 0x96, 0xcd, 0x9a, 0xd0, 0x5d, 0x21, 0xf7, 0xd7, 0x88, 0xe3, 0xe2,
	0x5b, 0x30, 0x2c, 0xec, 0xbf, 0x60, 0x56, 0x9d, 0x49, 0x94, 0x45, 0xd3, 0xc3, 0x25, 0xbd, 0x10,
	0xdc, 0x18, 0x85, 0x79, 0x3e, 0xa4, 0xec, 0x9b, 0x7d, 0x76, 0xf0, 0x83, 0x9d, 0xcc, 0xc0, 0x87,
	0x3b, 0x19, 0x54, 0x81, 0x9a, 0xf7, 0xd4, 0xc1, 0x73, 0x30, 0xda, 0x6c, 0xd9, 0xaf, 0x91, 0x25,
	0xaa, 0x83, 0xa1, 0x9c, 0x3c, 0xc0, 0x44, 0xa6, 0x0b, 0x1c, 0x66, 0xc1, 0x83, 0x59, 0xb8, 0x49,
	0x17, 0x72, 0xcb, 0x70, 0x56, 0x2b, 0x29, 0x7f, 0x0a, 0xfd, 0xae, 0x7f, 0x07, 0xe0, 0x64, 0x59,
	0xec, 0xd7, 0x3b, 0x6c, 0xbf, 0xde, 0x21, 0xae, 0x4b, 0x4d, 0x86, 0x6f, 0x03, 0xac, 0x35, 0xab,
	0x86, 0x4b, 0xaa, 0x0b, 0x86, 0x2b, 0xd0, 0x46, 0x45, 0xdf, 0xf5, 0x18, 0x98, 0x9d, 0xa0, 0x28,
	0x1f, 0xee, 0x64, 0x06, 0x2d, 0xa3, 0x41, 0xae, 0xe9, 0x79, 0xfd, 0xad, 0x8f, 0x32, 0xa8, 0x32,
	0x24, 0x64, 0xcc, 0xb8, 0xf8, 0xdb, 0x08, 0x46, 0x17, 0xeb, 0xc6, 0xd2, 0x6a, 0xdd, 0x74, 0xa8,
	0x54, 0x4a, 0xc2, 0x81, 0xec, 0xc1, 0xe9, 0xa1, 0x59, 0xb3, 0xbd, 0x93, 0x49, 0xcd, 0xfa, 0x8f,
	0xca, 0x37, 0x9c, 0x87, 0x3b, 0x99, 0x3b, 0x5c, 0x90, 0x34, 0x25, 0x6f, 0x56, 0x1d, 0x3d, 0x5b,
	0x25, 0xce, 0x52, 0xcb, 0x6c, 0xd2, 0x35, 0x5c, 0xd3, 0xcb, 0x37, 0x9c, 0xac, 0xbb, 0x62, 0xb8,
	0xd9, 0x25, 0xc3, 0xca, 0x5a, 0xb6, 0x9b, 0x5d, 0x24, 0xd9, 0x16, 0xa9, 0xd1, 0xe1, 0x2d, 0x52,
	0xcd, 0x9a, 0x56, 0xd6, 0x5d, 0x21, 0x59, 0x8b, 0xfb, 0x5f, 0x41, 0xaf, 0xa4, 0x24, 0x71, 0x94,
	0xc5, 0x6f, 0x21, 0x18, 0xa7, 0xde, 0xb8, 0xc0, 0x27, 0x71, 0x8b, 0x4d, 0x1e, 0x64, 0xab, 0xfd,
	0x8d, 0xb0, 0x6d, 0xe2, 0x99, 0x2a, 0xbc, 0xe2, 0x90, 0x56, 0x45, 0x9a, 0x7e, 0xb3, 0x6e, 0x6f,
	0xcc, 0x9e, 0xf3, 0x8c, 0xf6, 0x70, 0x27, 0x33, 0xc9, 0x57, 0x42, 0xf5, 0xe4, 0x65, 0x3d, 0x7a,
	0x65, 0x6c, 0x2d, 0x34, 0x17, 0xff, 0x2b, 0x82, 0x89, 0x75, 0xa3, 0x6e, 0x56, 0xd9, 0xd7, 0x05,
	0xd7, 0x5e, 0x25, 0xd6, 0x82, 0xeb, 0xd6, 0x27, 0x0f, 0x31, 0x4c, 0x53, 0x11, 0x0b, 0xdc, 0x10,
	0x6e, 0x36, 0x5b, 0xa7, 0x1a, 0xdb, 0x3b, 0x19, 0xfc, 0x5b, 0x9d, 0xe9, 0x77, 0xe9, 0xec, 0xbb,
	0x77, 0x5f, 0x7a, 0xb8, 0x93, 0x79, 0x81, 0x63, 0xf0, 0x45, 0xe7, 0x99, 0xe8, 0xbc, 0xeb, 0xd6,
	0x43, 0x94, 0xb2, 0xe9, 0xa6, 0xbb, 0x99, 0xb5, 0x97, 0xb3, 0x4b, 0xd4, 0x91, 0x5b, 0x0d, 0x36,
	0x21, 0x4b, 0x1a, 0x86, 0x59, 0x77, 0x0a, 0xfa, 0x3b, 0xd4, 0xb0, 0x78, 0x3d, 0xa4, 0xc5, 0xad,
	0x63, 0x07, 0x52, 0x46, 0xbd, 0x6e, 0x6f, 0x90, 0xea, 0x02, 0x1f, 0x3b, 0x79, 0x98, 0xd9, 0x97,
	0xea, 0x7f, 0x9e, 0xeb, 0x17, 0xcf, 0xf3, 0xfc, 0x79, 0x48, 0xf3, 0x0c, 0x7f, 0xc8, 0x15, 0x65,
	0x8d, 0x6a, 0xb5, 0x45, 0x1c, 0x27, 0x5b, 0xab, 0xdb, 0x8b, 0xce, 0xa5, 0xac, 0xb9, 0x9c, 0x35,
	0xac, 0xcd, 0x82, 0x5e, 0x19, 0x11, 0x32, 0x9e, 0x63, 0x22, 0xf0, 0xbf, 0x20, 0x98, 0x30, 0xad,
	0x75, 0xd3, 0x0d, 0x13, 0x76, 0xa4, 0x17, 0x61, 0xaf, 0x79, 0x84, 0x95, 0x3b, 0xd3, 0x25, 0xc2,
	0x04, 0x60, 0x5f, 0x74, 0x22, 0xc2, 0xfc, 0xe1, 0x21, 0xba, 0xcc, 0x90, 0x0e, 0xb7, 0x9e, 0xfe,
	0xf3, 0x83, 0x30, 0x11, 0xe7, 0x3b, 0xf8, 0x6d, 0x04, 0xa3, 0xce, 0xaa, 0xd9, 0x5c, 0xf0, 0x39,
	0x66, 0x1b, 0x70, 0x70, 0xf6, 0xb5, 0x87, 0x3b, 0x99, 0x65, 0x0e, 0x8c, 0x0e, 0xc8, 0xfb, 0x03,
	0x42, 0x98, 0x6e, 0xd8, 0x6c, 0x37, 0xb4, 0xc8, 0xfd, 0x35, 0xb3, 0x45, 0x04, 0xa3, 0xfe, 0xe8,
	0xec, 0xb2, 0xdd, 0xca, 0x5a, 0x64, 0x23, 0x4b, 0xfd, 0xcf, 0xc9, 0xda, 0xad, 0x6c, 0xc3, 0xae,
	0xd2, 0x70, 0x53, 0xed, 0xc0, 0xae, 0xa4, 0xa8, 0x06, 0xdf, 0x97, 0xf0, 0x3a, 0x8c, 0x4a, 0x3c,
	0xdb, 0x56, 0x7d, 0x93, 0x05, 0x9c, 0xc1, 0xd9, 0x5b, 0x0f, 0x77, 0x32, 0xe5, 0x08, 0x5b, 0x74,
	0x40, 0x08, 0x54, 0x45, 0xa0, 0x31, 0x2c, 0x99, 0xa7, 0x00, 0x14, 0xaa, 0xd7, 0x7f, 0x76, 0xdb,
	0xaa, 0x6f, 0xe2, 0xaf, 0x43, 0xca, 0xa8, 0x36, 0x4c, 0x6b, 0xc1, 0x68, 0x36, 0x5b, 0xf6, 0xba,
	0x51, 0x67, 0xdb, 0x73, 0x70, 0xf6, 0x4b, 0x0f, 0x77, 0x32, 0xb7, 0x84, 0x57, 0xd1, 0xe7, 0x79,
	0xef, 0xb9, 0x4a, 0x2b, 0x1d, 0x14, 0xf4, 0xe8, 0xb0, 0xea, 0x11, 0x36, 0x66, 0xc6, 0x93, 0xf3,
	0x03, 0x04, 0x27, 0x5e, 0x61, 0xf1, 0xcb, 0xdb, 0xeb, 0x5e, 0x2c, 0x7f, 0x1e, 0x06, 0x1d, 0xf1,
	0x93, 0x08, 0x8d, 0x4f, 0x24, 0x0b, 0x16, 0xb3, 0x87, 0xa8, 0xd3, 0x55, 0x3a, 0xb3, 0xf1, 0x0c,
	0x0c, 0xf3, 0x10, 0x99, 0x30, 0x84, 0x0b, 0x01, 0x22, 0x36, 0xb3, 0x20, 0xfe, 0x0c, 0x4c, 0x55,
	0x88, 0x43, 0x5c, 0xea, 0x4b, 0x2f, 0x1b, 0x8e, 0xb3, 0x61, 0xb7, 0xaa, 0x15, 0xe2, 0x34, 0x6d,
	0xcb, 0x21, 0x38, 0x0d, 0x83, 0x4d, 0xf1, 0x1b, 0x43, 0x3a, 0x54, 0xe9, 0x7c, 0xd7, 0xf3, 0x70,
	0xe2, 0x0e, 0xb1, 0xaa, 0xbe, 0xfb, 0x7b, 0xcb, 0x9b, 0x80, 0xc3, 0xcc, 0x0d, 0xc4, 0x0c, 0xfe,
	0x45, 0xff, 0xee, 0x01, 0x38, 0xf5, 0x92, 0xe9, 0xb8, 0xfe, 0x78, 0xa7, 0xa3, 0xe6, 0x2e, 0x0c,
	0xfb, 0x66, 0xa3, 0x9c, 0x1c, 0x9c, 0x1e, 0x2e, 0x95, 0xc2, 0x9c, 0x28, 0x66, 0x17, 0x24, 0x04,
	0xb2, 0x98, 0xf4, 0xdf, 0x22, 0x00, 0xff, 0x59, 0x3c, 0x2c, 0x3c, 0x03, 0x43, 0xa6, 0xe3, 0xac,
	0xf1, 0x73, 0xea, 0x40, 0xcf, 0x73, 0x8a, 0x9d, 0xa6, 0xec, 0x6c, 0x1a, 0xe4, 0xd3, 0x66, 0x5c,
	0x3c, 0x07, 0x40, 0xbe, 0xde, 0x34, 0x5b, 0xc4, 0xa1, 0x32, 0x0e, 0xee, 0x41, 0xc6, 0x90, 0x98,
	0x37, 0xe3, 0xea, 0x45, 0x38, 0x75, 0x83, 0xd4, 0x89, 0x4b, 0x92, 0xf2, 0xf9, 0x57, 0x08, 0xc6,
	0x28, 0x23, 0xd4, 0x6e, 0x1d, 0xcf, 0x7a, 0x01, 0x8e, 0x2c, 0x9b, 0x75, 0x97, 0xb4, 0x84, 0x5f,
	0x5d, 0x8a, 0xe3, 0x50, 0x9e, 0x51, 0xb8, 0xc9, 0x86, 0xdf, 0x71, 0x0d, 0x97, 0xcc, 0x1e, 0x62,
	0xd7, 0x04, 0x21, 0x21, 0x3d, 0x07, 0xc3, 0xd2, 0x43, 0x7c, 0x15, 0x0e, 0x3b, 0xf4, 0x03, 0x93,
	0x9c, 0x2a, 0x69, 0x61, 0xc9, 0x15, 0xb2, 0x6e, 0x92, 0x0d, 0xd3, 0xaa, 0xb1, 0xe1, 0x15, 0x3e,
	0x58, 0xbf, 0x0e, 0xe3, 0x92, 0x4a, 0x61, 0xee, 0x1c, 0x1c, 0x66, 0x7b, 0x46, 0x18, 0x7a, 0x22,
	0x2c, 0x8a, 0x85, 0x35, 0x3e, 0x44, 0xff, 0x07, 0x04, 0x98, 0x4a, 0x98, 0x63, 0xd7, 0xec, 0xce,
	0x42, 0xbf, 0x0c, 0xc7, 0x38, 0xcc, 0x05, 0x1f, 0xd4, 0x70, 0xa9, 0x10, 0xb7, 0xdc, 0xe0, 0xcc,
	0x98, 0x05, 0x0f, 0x2f, 0xfb, 0x3f, 0xf5, 0x67, 0xd5, 0x16, 0x8c, 0xcf, 0xb5, 0x88, 0xe1, 0x12,
	0x1e, 0xa0, 0x39, 0xe4, 0x02, 0x1c, 0xa2, 0x4b, 0x12, 0x50, 0x63, 0x17, 0x2d, 0xb6, 0x27, 0x1b,
	0x87, 0x2f, 0xc2, 0x58, 0xf8, 0x64, 0x62, 0x0e, 0x3a, 0x54, 0x19, 0x0d, 0x1d, 0x07, 0xfa, 0x1f,
	0x22, 0x18, 0xe7, 0xa1, 0x66, 0x3f, 0x0a, 0xfb, 0x10, 0x4c, 0xae, 0xc3, 0x94, 0x8f, 0xc3, 0x8f,
	0x26, 0x1c, 0xcf, 0x18, 0x1c, 0xb4, 0xeb, 0x5e, 0x1c, 0xa1, 0x1f, 0xe9, 0x2f, 0x16, 0xd9, 0x10,
	0xab, 0xa2, 0x1f, 0xf5, 0xdf, 0x85, 0xa9, 0x79, 0x62, 0x91, 0x96, 0x10, 0x31, 0xf3, 0x72, 0xf9,
	0x45, 0xb2, 0xe9, 0x09, 0xc0, 0x70, 0x88, 0x46, 0x6c, 0x21, 0x81, 0x7d, 0xc6, 0x79, 0x38, 0xc2,
	0xdf, 0x20, 0xd8, 0x6d, 0x30, 0x55, 0x3a, 0x11, 0xb1, 0x10, 0x7d, 0x5a, 0x11, 0x83, 0xf4, 0xaf,
	0xf0, 0x20, 0xe4, 0xcb, 0xf6, 0xbd, 0xf2, 0x0b, 0x30, 0x68, 0x34, 0xcd, 0x85, 0x55, 0xb2, 0xe9,
	0x39, 0xe6, 0xc9, 0xb0, 0x2c, 0x3e, 0x65, 0x76, 0xb8, 0xbd, 0x93, 0x39, 0xea, 0x4d, 0x3f, 0x6a,
	0x34, 0x4d, 0xfa, 0x41, 0x7f, 0x15, 0x4e, 0xf9, 0x6b, 0xef, 0x3b, 0xf0, 0x3c, 0x9c, 0xaa, 0x90,
	0x86, 0xbd, 0x9e, 0x4c, 0xba, 0x7e, 0x19, 0x26, 0xc5, 0xe1, 0xcb, 0x26, 0xb0, 0xdb, 0x8e, 0x14,
	0x4f, 0xb8, 0x37, 0x89, 0x78, 0xc2, 0xbe, 0xe8, 0x5f, 0x82, 0xc7, 0x29, 0x33, 0x33, 0x6b, 0xee,
	0x8a, 0xdd, 0x32, 0x5f, 0x27, 0xd5, 0xce, 0xbe, 0x11, 0xfc, 0x5c, 0x86, 0xa3, 0xfc, 0x5d, 0x57,
	0x49, 0x0f, 0x9f, 0x51, 0xf1, 0x86, 0xe9, 0xff, 0x86, 0x60, 0x92, 0xef, 0x83, 0x19, 0xff, 0x5d,
	0xdc, 0x43, 0x31, 0x07, 0xc3, 0xd2, 0x1b, 0xba, 0x70, 0xd2, 0xc7, 0x22, 0x8c, 0xfb, 0x43, 0x84,
	0xbb, 0xc9, 0xb3, 0xf0, 0xab, 0x30, 0x26, 0xbf, 0x77, 0x8a, 0xb7, 0x02, 0x2a, 0xe9, 0x42, 0x58,
	0xd2, 0x6d, 0x69, 0x5c, 0xfc, 0xfb, 0xd1, 0xa8, 0x1d, 0x18, 0xe2, 0xe8, 0x1b, 0xdc, 0x59, 0x24,
	0x0c, 0x9d, 0xf8, 0x13, 0xa7, 0x18, 0xf5, 0x4d, 0xf1, 0xef, 0xc0, 0x64, 0x54, 0xb1, 0x30, 0xc3,
	0x75, 0x38, 0x26, 0x31, 0xe0, 0xd9, 0xa2, 0x1b, 0x71, 0x95, 0xc0, 0x04, 0xfd, 0x2f, 0x11, 0x4c,
	0x72, 0x47, 0xfd, 0xb8, 0xac, 0xd2, 0x87, 0x40, 0xf2, 0x3e, 0x82, 0xac, 0x17, 0x08, 0x24, 0x6d,
	0x41, 0xc7, 0xff, 0x0a, 0x8c, 0x4a, 0x6a, 0x25, 0x1b, 0x3c, 0xd1, 0x05, 0x70, 0xbc, 0x09, 0x52,
	0x86, 0x3c, 0xc2, 0xe9, 0xec, 0xa9, 0x03, 0xb1, 0x3b, 0xf6, 0x60, 0x92, 0x1d, 0xfb, 0x35, 0xd0,
	0x42, 0x46, 0xec, 0x77, 0xc4, 0xf9, 0x77, 0x04, 0x5a, 0xc4, 0x92, 0x9f, 0x26, 0x8a, 0xfe, 0x04,
	0x81, 0xc6, 0xa3, 0xda, 0x27, 0x64, 0x01, 0xfa, 0x1a, 0x9c, 0x0b, 0x19, 0x6d, 0x4e, 0xca, 0xd6,
	0xf9, 0xa6, 0xbb, 0x05, 0x23, 0x72, 0x1a, 0xcf, 0xb3, 0xdf, 0x85, 0x2e, 0xa0, 0x64, 0x41, 0x95,
	0xe0, 0x6c, 0xfd, 0x8b, 0x22, 0xf8, 0x4a, 0x1b, 0x92, 0x31, 0xd4, 0xd1, 0xe7, 0x13, 0x8b, 0x92,
	0x10, 0xfb, 0x77, 0x08, 0x26, 0x78, 0xe4, 0x15, 0x19, 0x21, 0x8f, 0xce, 0x67, 0xe0, 0xa8, 0xc8,
	0x02, 0x09, 0x1a, 0x4f, 0x29, 0x52, 0x48, 0x62, 0x4f, 0x7a, 0xa3, 0x3f, 0xe6, 0x48, 0xeb, 0xc0,
	0x71, 0xba, 0x7e, 0xa1, 0xfb, 0xff, 0x28, 0xca, 0xbe, 0x08, 0x13, 0x41, 0xa5, 0x82, 0xeb, 0x2b,
	0x30, 0x28, 0x56, 0xed, 0x99, 0x55, 0x45, 0x52, 0xa5, 0x33, 0x50, 0xff, 0x36, 0x82, 0x09, 0xbe,
	0x17, 0xfb, 0xc5, 0x78, 0x1f, 0xa2, 0xe8, 0x7b, 0x08, 0x4e, 0x7b, 0x51, 0x54, 0x68, 0x09, 0xee,
	0xae, 0x3e, 0x67, 0x15, 0xfb, 0x10, 0x12, 0x5e, 0x85, 0xb4, 0x64, 0x94, 0x7e, 0x47, 0xcc, 0x1f,
	0x23, 0x48, 0x07, 0xac, 0xf4, 0x49, 0xa7, 0xe3, 0x1b, 0x90, 0xe6, 0x01, 0xf2, 0xff, 0x09, 0xaf,
	0xde, 0x80, 0xac, 0x64, 0x8f, 0xf8, 0x60, 0x58, 0x8e, 0x0f, 0x86, 0x67, 0x15, 0x40, 0xba, 0x05,
	0xc2, 0x17, 0x60, 0x4a, 0x52, 0xb7, 0xbf, 0x20, 0xf8, 0x22, 0x1c, 0xe7, 0x31, 0x50, 0xdc, 0x4b,
	0x05, 0x69, 0x57, 0xe1, 0x08, 0xbf, 0xa0, 0x0a, 0xbe, 0x14, 0xd7, 0x58, 0xb1, 0x9d, 0xc4, 0x58,
	0x7d, 0x9e, 0x47, 0xa8, 0xfd, 0x5f, 0x8a, 0xbf, 0x85, 0xe0, 0x38, 0x77, 0xc1, 0x3e, 0xc0, 0xea,
	0x47, 0x90, 0x58, 0x82, 0x29, 0x4e, 0x93, 0x1c, 0x42, 0x3d, 0x54, 0x37, 0xe1, 0x98, 0x1c, 0x36,
	0x05, 0xb6, 0xd3, 0xdd, 0xa2, 0xaf, 0x50, 0x11, 0x98, 0xa7, 0x2f, 0x70, 0xbb, 0xca, 0xe3, 0x7c,
	0x12, 0x67, 0x61, 0x44, 0x1e, 0xec, 0x51, 0xd9, 0x55, 0x4b, 0x25, 0x38, 0x45, 0xff, 0x1b, 0xe4,
	0xbd, 0x7a, 0x7e, 0x8c, 0xcb, 0xe8, 0x07, 0xdd, 0x3f, 0x43, 0x70, 0xc6, 0x8b, 0xc9, 0xb2, 0xbe,
	0xe0, 0xce, 0xfe, 0x58, 0x4f, 0xbe, 0x7e, 0x04, 0x26, 0x03, 0x32, 0x61, 0x83, 0xf6, 0x3b, 0x58,
	0xff, 0x07, 0x82, 0x4c, 0xd4, 0xa4, 0x9f, 0x32, 0x9e, 0xde, 0x46, 0x90, 0xe1, 0x11, 0xfc, 0x13,
	0xb4, 0x08, 0x7d, 0x21, 0x6a, 0xbd, 0x5b, 0xa4, 0xb1, 0x28, 0x27, 0xe9, 0x9e, 0x85, 0xa3, 0x0d,
	0xfe, 0x93, 0x30, 0x9e, 0xde, 0x0d, 0x0b, 0x9f, 0x5d, 0xf1, 0xa6, 0xe8, 0xb7, 0xf9, 0xcb, 0x4f,
	0x60, 0x2f, 0xee, 0x27, 0x98, 0x97, 0x0c, 0x38, 0x3c, 0xef, 0x6e, 0xcc, 0xb7, 0xf0, 0x6f, 0xc3,
	0x78, 0xa4, 0x48, 0x8a, 0xa7, 0xc3, 0x93, 0x55, 0x75, 0xd4, 0xb4, 0xea, 0xf6, 0x75, 0x19, 0x95,
	0x3e, 0x18, 0x81, 0xa3, 0x65, 0x67, 0xa6, 0xda, 0x30, 0x2d, 0x6c, 0xc2, 0xf0, 0x3c, 0x71, 0x3b,
	0xe5, 0xcc, 0x93, 0x91, 0x2d, 0xfe, 0x5c, 0xa3, 0xe9, 0x6e, 0xa6, 0x13, 0xe6, 0xed, 0xf5, 0xf4,
	0x37, 0xff, 0xeb, 0xbf, 0xdf, 0x3e, 0x30, 0x81, 0x71, 0xd1, 0x74, 0x8a, 0xac, 0x4c, 0x50, 0xec,
	0xe4, 0xf0, 0x2d, 0x48, 0x05, 0xcb, 0x04, 0xf8, 0x7c, 0x24, 0x55, 0x17, 0x57, 0x46, 0x48, 0x2b,
	0x40, 0xe9, 0x8f, 0x33, 0x65, 0xa7, 0x4a, 0x31, 0xca, 0xae, 0xa1, 0x1c, 0x5e, 0x02, 0xf0, 0x93,
	0x93, 0xf8, 0x4c, 0xe4, 0x98, 0x09, 0x27, 0x2e, 0x95, 0x7a, 0xc4, 0xa2, 0xf4, 0x51, 0x5f, 0x0f,
	0xcb, 0xd9, 0x72, 0x25, 0x47, 0xe7, 0x79, 0x4d, 0x01, 0x67, 0xe2, 0x12, 0x8f, 0x92, 0xef, 0xa6,
	0x63, 0x33, 0x93, 0xfa, 0x19, 0x26, 0xfd, 0x31, 0x3c, 0x15, 0x92, 0x5e, 0xdc, 0x62, 0x15, 0x57,
	0xb3, 0xba, 0x8d, 0x4d, 0x18, 0xea, 0x24, 0x97, 0x71, 0xb6, 0x57, 0xaa, 0x3b, 0x7d, 0xa6, 0xcb,
	0x08, 0xee, 0x94, 0xfa, 0x29, 0xa6, 0x74, 0x1c, 0x87, 0x97, 0x84, 0xd7, 0x01, 0xfc, 0xe4, 0x5e,
	0x94, 0xb4, 0x48, 0xf2, 0x55, 0x49, 0x5a, 0x9e, 0x69, 0xb8, 0x50, 0xd2, 0x63, 0x97, 0x55, 0x30,
	0xab, 0x4e, 0xc1, 0x5b, 0x1f, 0xe5, 0xf1, 0x4f, 0x11, 0x8c, 0x47, 0xca, 0x33, 0xbd, 0x29, 0xbd,
	0x18, 0xcd, 0x53, 0x2b, 0x4a, 0x3c, 0xfa, 0x65, 0x06, 0x28, 0xa7, 0x4f, 0x2b, 0x79, 0x2e, 0xb6,
	0xe8, 0xe4, 0xbc, 0x57, 0xf8, 0xc1, 0x2b, 0x00, 0xbc, 0x54, 0x91, 0xcc, 0xbc, 0x2a, 0x26, 0x84,
	0x81, 0x73, 0x5d, 0x0c, 0x7c, 0x1f, 0x52, 0xc1, 0x12, 0x53, 0x74, 0x6b, 0xc4, 0x96, 0xa0, 0x94,
	0x3a, 0xb3, 0x4c, 0x67, 0x5a, 0x3f, 0xe1, 0xeb, 0x94, 0x2a, 0x46, 0x94, 0xf0, 0xfb, 0x30, 0x1a,
	0xaa, 0x33, 0x29, 0x37, 0xff, 0x85, 0x84, 0x05, 0x2a, 0x6f, 0x43, 0xe2, 0x78, 0xad, 0xf8, 0x75,
	0x18, 0x0b, 0x97, 0x7e, 0x70, 0x44, 0xb6, 0xa2, 0x38, 0xa4, 0x5c, 0xe9, 0x79, 0xa6, 0x33, 0x93,
	0x7b, 0x3c, 0x56, 0x67, 0x71, 0x8b, 0x15, 0x91, 0xb6, 0x71, 0x03, 0x86, 0xe6, 0x89, 0xb8, 0xd5,
	0xc6, 0xc4, 0x02, 0xf6, 0x7b, 0xd0, 0x98, 0xb1, 0x43, 0x3c, 0x75, 0x58, 0x52, 0x27, 0x2e, 0xbc,
	0xc5, 0x2d, 0xfe, 0x41, 0x18, 0x74, 0x58, 0xba, 0x45, 0x63, 0xbd, 0x77, 0xbd, 0x26, 0x7d, 0xb6,
	0xeb, 0x18, 0xc1, 0xf0, 0x14, 0x53, 0x7f, 0x1c, 0x8f, 0x47, 0xd4, 0xe3, 0x37, 0x10, 0x1c, 0x93,
	0xef, 0xdb, 0xf8, 0x6c, 0xfc, 0xe6, 0x0d, 0xdc, 0xc6, 0x95, 0xb4, 0x5e, 0x61, 0x8a, 0xf2, 0xa5,
	0x69, 0xe5, 0x3a, 0xd9, 0x16, 0xf6, 0x97, 0x4c, 0x7d, 0xaa, 0x09, 0xc7, 0xb8, 0xf9, 0xf6, 0xc2,
	0x73, 0x62, 0xb3, 0xc6, 0xf0, 0x5c, 0xfa, 0x68, 0x18, 0x8e, 0x94, 0x1d, 0xb6, 0x3f, 0xbf, 0xda,
	0xaf, 0x70, 0x3f, 0xc1, 0x54, 0xa7, 0xf4, 0x21, 0xaa, 0xba, 0x13, 0xe8, 0x6f, 0xf9, 0x81, 0x5e,
	0xb5, 0x4f, 0xe2, 0xe3, 0xbb, 0x10, 0x87, 0x8f, 0x75, 0xc4, 0x15, 0x1b, 0x04, 0x7f, 0xad, 0x5f,
	0x71, 0x56, 0x44, 0xf2, 0x52, 0x40, 0x3c, 0x05, 0xbc, 0x09, 0x38, 0x5a, 0xa2, 0xc2, 0x17, 0xd5,
	0x9a, 0x42, 0x65, 0xac, 0x5e, 0xb1, 0x25, 0x7d, 0x42, 0xd6, 0x58, 0xf4, 0xa2, 0x26, 0x55, 0x5d,
	0x09, 0x04, 0x4e, 0x15, 0x5d, 0x3d, 0xf8, 0xcf, 0x05, 0x09, 0xdb, 0x04, 0x1c, 0x2d, 0x98, 0x45,
	0x97, 0xa3, 0x2c, 0xaa, 0xa5, 0x15, 0x77, 0xf2, 0x60, 0xa8, 0xec, 0x2c, 0xc7, 0x68, 0x9a, 0x79,
	0x7a, 0xa1, 0x97, 0x42, 0xa5, 0x54, 0x4b, 0xdb, 0x5b, 0xa8, 0x8c, 0x29, 0xc2, 0x05, 0x43, 0x65,
	0x44, 0x2b, 0xfe, 0x3d, 0x18, 0x0b, 0xd7, 0xd8, 0xa2, 0xa1, 0x52, 0x51, 0x85, 0x53, 0x12, 0x7b,
	0x81, 0xe9, 0x3c, 0x53, 0x3a, 0x1d, 0xab, 0xb3, 0xb8, 0x45, 0x6f, 0xcc, 0xdb, 0xdc, 0x75, 0xc6,
	0xc2, 0x35, 0xb8, 0xa8, 0x76, 0x45, 0x95, 0x4e, 0xa9, 0xfd, 0x1c, 0xd3, 0xae, 0xe5, 0xba, 0x6a,
	0xc7, 0xdb, 0x30, 0x1e, 0xa9, 0xe7, 0x45, 0x6f, 0xbd, 0xaa, 0x92, 0x9f, 0x52, 0xf9, 0x13, 0x4c,
	0x79, 0x56, 0x7f, 0x2c, 0xa0, 0x5c, 0x74, 0xfa, 0x10, 0xde, 0x67, 0x45, 0x57, 0xbe, 0x05, 0x69,
	0x21, 0xaa, 0x23, 0x5a, 0xea, 0xed, 0xd9, 0xab, 0x27, 0x8b, 0x3b, 0x90, 0x7e, 0xbe, 0x8b, 0xd6,
	0xe2, 0xd2, 0x8a, 0x51, 0xaf, 0x13, 0xab, 0x46, 0xf0, 0x1f, 0x21, 0x38, 0x11, 0x5b, 0x9a, 0x54,
	0x2a, 0xce, 0xc7, 0xb9, 0x9b, 0xb2, 0xb2, 0xe9, 0x39, 0x00, 0xce, 0x04, 0x4d, 0xd0, 0x19, 0x9f,
	0xf7, 0xce, 0x92, 0x37, 0x11, 0x9c, 0xac, 0x90, 0x75, 0x7b, 0x95, 0x84, 0x85, 0xed, 0x27, 0xa6,
	0x8b, 0x33, 0x25, 0xf7, 0x64, 0x0f, 0xf5, 0x81, 0x08, 0xff, 0x3f, 0xa3, 0x30, 0x52, 0x76, 0xa4,
	0x82, 0x01, 0xfe, 0x4f, 0xe4, 0x75, 0x1d, 0xc8, 0xbf, 0x4e, 0xc7, 0x07, 0xfc, 0x68, 0xe9, 0x4f,
	0x09, 0x6f, 0x83, 0xc1, 0xbb, 0xaf, 0x8f, 0xb1, 0x23, 0x47, 0xaa, 0x24, 0x5e, 0x93, 0x8b, 0x7e,
	0xf7, 0x5e, 0xd6, 0x67, 0xe8, 0x80, 0x40, 0x56, 0xa6, 0xb8, 0x15, 0x7e, 0xaf, 0x2d, 0x84, 0x7e,
	0xd8, 0x56, 0x4b, 0xa4, 0x27, 0x77, 0x6a, 0x9e, 0xc8, 0x45, 0x11, 0x9c, 0xb0, 0xe8, 0x93, 0xee,
	0x56, 0xb1, 0xd4, 0x2f, 0xb2, 0x05, 0x9d, 0xc5, 0x67, 0xc2, 0x0b, 0x2a, 0x6e, 0x05, 0x4b, 0x4d,
	0xdb, 0xf8, 0x67, 0xa2, 0xc9, 0x46, 0xae, 0xc4, 0xe2, 0xd8, 0x60, 0x16, 0x53, 0x24, 0x4e, 0x4f,
	0xf7, 0x1e, 0x28, 0x3c, 0xf0, 0xab, 0x0c, 0xd2, 0x97, 0x71, 0x84, 0xe3, 0x7b, 0x73, 0x78, 0xff,
	0xb4, 0xe2, 0xb7, 0x3b, 0xfd, 0x21, 0x5d, 0x5d, 0x43, 0x55, 0x15, 0x56, 0xba, 0xc6, 0xb3, 0x0c,
	0xf6, 0x67, 0x4a, 0x4f, 0x75, 0x65, 0x92, 0xdd, 0x88, 0x42, 0xcc, 0xd2, 0xa0, 0xf2, 0xfb, 0x30,
	0xce, 0x8f, 0xc3, 0x47, 0xb1, 0xb0, 0x0a, 0x92, 0x30, 0x6e, 0x2e, 0x81, 0x71, 0x7f, 0x84, 0xfc,
	0x66, 0x93, 0x48, 0xfd, 0x11, 0x5f, 0x56, 0x1d, 0xa1, 0xaa, 0x52, 0xa5, 0xf2, 0x24, 0x7d, 0x8e,
	0x41, 0xba, 0xae, 0x5f, 0xeb, 0x05, 0x29, 0xc2, 0x52, 0xe0, 0xb8, 0xfd, 0x01, 0x82, 0x93, 0xf1,
	0x05, 0xe5, 0xc4, 0xa4, 0x15, 0x7a, 0x38, 0x64, 0xf8, 0x34, 0x2e, 0x31, 0xe4, 0x97, 0x70, 0xae,
	0x27, 0x99, 0xfe, 0x11, 0xfd, 0xf7, 0xc8, 0xeb, 0x83, 0x89, 0x72, 0x5a, 0xe8, 0xe9, 0x71, 0xc9,
	0xce, 0xcc, 0x97, 0x18, 0xae, 0x9b, 0xa5, 0x99, 0x47, 0x67, 0x54, 0x3a, 0xd6, 0x7f, 0x84, 0xbc,
	0xde, 0x9a, 0x04, 0x88, 0xbb, 0x97, 0xab, 0x95, 0x88, 0xcb, 0x0c, 0xf1, 0x5c, 0x6e, 0xff, 0x88,
	0xf1, 0x0f, 0x11, 0xa4, 0xef, 0x10, 0x55, 0x89, 0x1a, 0x27, 0x2d, 0x41, 0x2b, 0xa1, 0xbe, 0xc0,
	0xa0, 0xde, 0xd0, 0xaf, 0xef, 0x1d, 0x6a, 0xa0, 0x96, 0x43, 0xa9, 0xfd, 0x27, 0x04, 0xa7, 0xbb,
	0xd5, 0xd3, 0x13, 0x7b, 0xee, 0xd5, 0x1e, 0x9e, 0x1b, 0x5b, 0x98, 0xd2, 0x9f, 0x61, 0x4b, 0x79,
	0x0a, 0x17, 0x7b, 0xfb, 0x6f, 0x00, 0x3a, 0xfe, 0x9e, 0x77, 0xe5, 0x08, 0x17, 0xe4, 0x13, 0x03,
	0xce, 0xf7, 0x00, 0x1c, 0xcc, 0x86, 0x7a, 0x59, 0x18, 0x3c, 0xdd, 0x1b, 0xa9, 0x48, 0x88, 0xbe,
	0x99, 0x82, 0xa1, 0xb2, 0x23, 0xb2, 0x97, 0xf8, 0x9f, 0x11, 0x8c, 0x04, 0x0a, 0xfe, 0xf8, 0x5c,
	0xfc, 0xc1, 0x1f, 0xac, 0x4e, 0x2b, 0x9d, 0xa0, 0xc6, 0xf0, 0x18, 0x3a, 0x7b, 0xd9, 0xf0, 0x8a,
	0xdc, 0xd7, 0xbc, 0xda, 0xf4, 0xbd, 0xe7, 0xf5, 0xcf, 0x3f, 0xd2, 0xa9, 0x14, 0x91, 0x84, 0xeb,
	0x00, 0xf3, 0xc4, 0xab, 0xf7, 0xe1, 0x04, 0xb5, 0x4b, 0x65, 0x06, 0x37, 0x98, 0x31, 0xf4, 0x34,
	0x15, 0xb7, 0xfc, 0x0a, 0xe9, 0x36, 0x7e, 0x0f, 0xc1, 0x31, 0xb9, 0xe6, 0x8f, 0x63, 0xb3, 0x0b,
	0xa1, 0x36, 0x84, 0xf4, 0xb9, 0xee, 0x83, 0x84, 0x09, 0x5f, 0x61, 0xea, 0x6f, 0xe3, 0x00, 0x65,
	0xf7, 0xae, 0xe3, 0xfd, 0x31, 0x85, 0xbf, 0x01, 0x23, 0x81, 0x8a, 0x75, 0xd4, 0xb0, 0x71, 0x6d,
	0x07, 0x4a, 0xc3, 0x0a, 0x47, 0x2b, 0x9d, 0x8f, 0x25, 0x89, 0x1d, 0xd5, 0x12, 0x61, 0x74, 0x0f,
	0x5b, 0x30, 0xc2, 0x8f, 0xe9, 0xbd, 0x18, 0x29, 0x51, 0xd2, 0x2f, 0xde, 0x46, 0xef, 0x20, 0x38,
	0x11, 0xdb, 0xb4, 0x80, 0x2f, 0xa9, 0x8e, 0xe4, 0xb8, 0xe2, 0xb8, 0xf2, 0x38, 0xfe, 0x1c, 0x83,
	0x70, 0x45, 0x2f, 0xa8, 0x20, 0x04, 0x18, 0x08, 0x1c, 0xc1, 0x6f, 0x89, 0x66, 0xe4, 0x60, 0x77,
	0x42, 0x22, 0x42, 0x72, 0x5d, 0x7c, 0x28, 0x7c, 0xec, 0xe6, 0x18, 0xc2, 0x73, 0x58, 0x57, 0x92,
	0xe4, 0x1f, 0xb7, 0xdf, 0xe9, 0x94, 0x93, 0x83, 0x5c, 0xe5, 0xba, 0x7a, 0x49, 0xb2, 0x43, 0xeb,
	0x37, 0x19, 0x8e, 0x6b, 0xa5, 0xa7, 0xf7, 0xc6, 0x94, 0x74, 0xb4, 0xbe, 0x83, 0xe0, 0x78, 0x4c,
	0xff, 0x42, 0x14, 0x9d, 0xba, 0xc9, 0x41, 0x89, 0xee, 0xf3, 0x0c, 0xdd, 0x33, 0xb9, 0x47, 0x43,
	0x87, 0xff, 0x0c, 0xc1, 0xc9, 0x3b, 0x24, 0xae, 0xb1, 0x01, 0x27, 0x69, 0x5c, 0x50, 0xc2, 0xfa,
	0x02, 0x83, 0xf5, 0x59, 0xfd, 0x4a, 0x32, 0x58, 0x91, 0x23, 0xf3, 0xfb, 0x88, 0x37, 0x7f, 0xc6,
	0x75, 0x5c, 0x24, 0xf2, 0xb4, 0xcb, 0x5d, 0x3c, 0x2d, 0xfe, 0x98, 0x2c, 0x32, 0xc8, 0x17, 0xf1,
	0x05, 0xb5, 0xbf, 0x05, 0x8f, 0xc7, 0x3f, 0x46, 0xbc, 0xad, 0x3f, 0xd0, 0xa6, 0x91, 0x08, 0xdc,
	0xc5, 0x2e, 0xe0, 0x42, 0x47, 0xe2, 0x34, 0x43, 0xa5, 0xe3, 0xac, 0x1a, 0x95, 0x38, 0x0a, 0xbf,
	0x7f, 0x08, 0x06, 0xcb, 0x8e, 0x78, 0x11, 0x5f, 0x82, 0x63, 0x72, 0xd7, 0x47, 0xd4, 0x98, 0x31,
	0x3d, 0x21, 0x4a, 0x63, 0x9e, 0x64, 0x18, 0xc6, 0xf4, 0x61, 0x8a, 0x41, 0xbc, 0x86, 0x53, 0x23,
	0xd5, 0xfa, 0x94, 0x36, 0xcf, 0x30, 0xf9, 0x53, 0xf8, 0x94, 0x24, 0x3f, 0x90, 0x30, 0x5f, 0x08,
	0x26, 0xcc, 0x55, 0x09, 0x8f, 0x44, 0x49, 0xf2, 0xe3, 0x4c, 0xd9, 0x08, 0x96, 0x17, 0x83, 0x5f,
	0xef, 0x67, 0x76, 0x3c, 0x50, 0xdc, 0xea, 0x9d, 0x17, 0x7f, 0xad, 0x7f, 0x79, 0x71, 0x41, 0x64,
	0x4e, 0x45, 0x64, 0xe9, 0xa3, 0x14, 0xa4, 0xca, 0x8e, 0x5c, 0x8f, 0xc6, 0x6b, 0x80, 0xa3, 0x8d,
	0x2f, 0xd1, 0xd4, 0xa9, 0xb2, 0x39, 0x46, 0x09, 0xe6, 0x34, 0x03, 0x73, 0x52, 0x1f, 0x8f, 0x9c,
	0xfc, 0x74, 0xd5, 0x7f, 0x80, 0x60, 0x74, 0x9e, 0x04, 0x4a, 0xe3, 0x38, 0x69, 0x9d, 0x3f, 0xdd,
	0xb5, 0x65, 0x45, 0x7f, 0x92, 0x29, 0x3e, 0x8f, 0xcf, 0xf6, 0xbe, 0x72, 0x6c, 0xe3, 0xfb, 0x7c,
	0x0f, 0x07, 0x5a, 0x72, 0x94, 0x0e, 0x16, 0xbb, 0x6f, 0x63, 0xbb, 0x79, 0x82, 0xb5, 0x98, 0x00,
	0x08, 0x7a, 0x1c, 0xe0, 0x68, 0x47, 0x87, 0x2a, 0xf9, 0xbe, 0x17, 0xca, 0xaf, 0x33, 0xa5, 0x9f,
	0x2b, 0x5d, 0xed, 0xb1, 0xf2, 0x42, 0xdc, 0x65, 0x8b, 0x5a, 0xe5, 0x9b, 0x08, 0x30, 0x77, 0xc6,
	0x47, 0x33, 0x8c, 0x0a, 0x98, 0x30, 0x49, 0x2e, 0x91, 0x49, 0x7e, 0x82, 0x20, 0xad, 0xee, 0x0d,
	0xc2, 0x4f, 0xa9, 0xee, 0x3f, 0xca, 0xd6, 0x12, 0xe5, 0x25, 0xe8, 0x79, 0x06, 0x6b, 0xf6, 0x11,
	0xaf, 0xf1, 0xf2, 0x9d, 0xe8, 0x87, 0x88, 0xff, 0x95, 0x44, 0x4c, 0x27, 0x50, 0x72, 0xf6, 0x8a,
	0xbd, 0xdc, 0x2b, 0x7c, 0x45, 0xba, 0xca, 0xf0, 0x17, 0xf0, 0xa5, 0x04, 0xb4, 0xfa, 0x97, 0xa5,
	0x7f, 0xec, 0xfc, 0xe9, 0x43, 0x0c, 0xbb, 0xc5, 0xde, 0x5e, 0x98, 0xec, 0x62, 0x72, 0x9b, 0x61,
	0x2b, 0x97, 0x6e, 0xec, 0x8b, 0x5b, 0xe9, 0x16, 0xf5, 0x13, 0x04, 0x93, 0xaa, 0x1e, 0xa2, 0x28,
	0xec, 0x1e, 0xdd, 0x46, 0xbd, 0x92, 0x2a, 0xb9, 0xbe, 0xc0, 0xc6, 0xdf, 0x45, 0x70, 0xe2, 0x0e,
	0x89, 0xe9, 0x30, 0xc2, 0x09, 0xfa, 0x88, 0x94, 0x18, 0xe7, 0x19, 0xc6, 0x19, 0xfd, 0xd9, 0x47,
	0xc2, 0x28, 0x9a, 0x93, 0x28, 0xa5, 0xef, 0xc6, 0x78, 0xad, 0xe8, 0x80, 0xea, 0xa3, 0xd7, 0x86,
	0x7a, 0xaa, 0xbc, 0x4c, 0x3f, 0x7e, 0x32, 0x89, 0xd7, 0x0a, 0xb4, 0xf8, 0xaf, 0x45, 0xde, 0x2f,
	0xda, 0x4b, 0x95, 0x1c, 0x69, 0xa1, 0x17, 0xd2, 0xd0, 0xdd, 0x2b, 0x90, 0xf8, 0xeb, 0x05, 0x94,
	0xdf, 0xc2, 0x66, 0xff, 0x02, 0x7d, 0xf0, 0x40, 0x43, 0x1f, 0x3e, 0xd0, 0xd0, 0xcf, 0x1f, 0x68,
	0xe8, 0x17, 0x0f, 0x34, 0xf4, 0xcb, 0x07, 0xda, 0xc0, 0xaf, 0x1e, 0x68, 0x03, 0xbf, 0x7e, 0xa0,
	0xa1, 0x37, 0xda, 0xda, 0xc0, 0x9b, 0x6d, 0x6d, 0xe0, 0xdd, 0xb6, 0x86, 0xde, 0x6b, 0x6b, 0x03,
	0x3f, 0x6d, 0x6b, 0xe8, 0xfd, 0xb6, 0x86, 0x3e, 0x68, 0x6b, 0xe8, 0xc3, 0xb6, 0x86, 0x7e, 0xde,
	0xd6, 0x06, 0x7e, 0xd1, 0xd6, 0xd0, 0x2f, 0xdb, 0xda, 0xc0, 0xaf, 0xda, 0x1a, 0xfa, 0x75, 0x5b,
	0x1b, 0x78, 0x63, 0x57, 0x1b, 0x78, 0x73, 0x57, 0x43, 0x6f, 0xed, 0x6a, 0x03, 0xef, 0xec, 0x6a,
	0xe8, 0x7b, 0xbb, 0xda, 0xc0, 0xbb, 0xbb, 0xda, 0xc0, 0x7b, 0xbb, 0x1a, 0xfa, 0xe9, 0xae, 0x86,
	0xde, 0xdf, 0xd5, 0xd0, 0xbd, 0x8b, 0xbd, 0xfe, 0xcb, 0x90, 0xe6, 0x6a, 0x8d, 0xfe, 0xdb, 0x5c,
	0x5c, 0x3c, 0xc2, 0xbc, 0xe9, 0xca, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x6e, 0x56, 0x95,
	0x89, 0x46, 0x00, 0x00,
}
