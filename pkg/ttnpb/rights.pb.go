// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/TheThingsNetwork/ttn/api/rights.proto

package ttnpb

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Right is the enum that defines all the different rights to do something in
// the network.
type Right int32

const (
	RIGHT_APPLICATION_DELETE        Right = 0
	RIGHT_APPLICATION_SETTINGS      Right = 1
	RIGHT_APPLICATION_COLLABORATORS Right = 2
	RIGHT_GATEWAY_OWNER             Right = 10
)

var Right_name = map[int32]string{
	0:  "RIGHT_APPLICATION_DELETE",
	1:  "RIGHT_APPLICATION_SETTINGS",
	2:  "RIGHT_APPLICATION_COLLABORATORS",
	10: "RIGHT_GATEWAY_OWNER",
}
var Right_value = map[string]int32{
	"RIGHT_APPLICATION_DELETE":        0,
	"RIGHT_APPLICATION_SETTINGS":      1,
	"RIGHT_APPLICATION_COLLABORATORS": 2,
	"RIGHT_GATEWAY_OWNER":             10,
}

func (Right) EnumDescriptor() ([]byte, []int) { return fileDescriptorRights, []int{0} }

type APIKey struct {
	// name is the API key name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// key is the actual API key.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// rights are the rights this API key bears.
	Rights []Right `protobuf:"varint,3,rep,packed,name=rights,enum=ttn.v3.Right" json:"rights,omitempty"`
}

func (m *APIKey) Reset()                    { *m = APIKey{} }
func (m *APIKey) String() string            { return proto.CompactTextString(m) }
func (*APIKey) ProtoMessage()               {}
func (*APIKey) Descriptor() ([]byte, []int) { return fileDescriptorRights, []int{0} }

func (m *APIKey) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *APIKey) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *APIKey) GetRights() []Right {
	if m != nil {
		return m.Rights
	}
	return nil
}

func init() {
	proto.RegisterType((*APIKey)(nil), "ttn.v3.APIKey")
	golang_proto.RegisterType((*APIKey)(nil), "ttn.v3.APIKey")
	proto.RegisterEnum("ttn.v3.Right", Right_name, Right_value)
	golang_proto.RegisterEnum("ttn.v3.Right", Right_name, Right_value)
}
func (x Right) String() string {
	s, ok := Right_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *APIKey) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*APIKey)
	if !ok {
		that2, ok := that.(APIKey)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *APIKey")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *APIKey but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *APIKey but is not nil && this == nil")
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Key != that1.Key {
		return fmt.Errorf("Key this(%v) Not Equal that(%v)", this.Key, that1.Key)
	}
	if len(this.Rights) != len(that1.Rights) {
		return fmt.Errorf("Rights this(%v) Not Equal that(%v)", len(this.Rights), len(that1.Rights))
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return fmt.Errorf("Rights this[%v](%v) Not Equal that[%v](%v)", i, this.Rights[i], i, that1.Rights[i])
		}
	}
	return nil
}
func (this *APIKey) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*APIKey)
	if !ok {
		that2, ok := that.(APIKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if len(this.Rights) != len(that1.Rights) {
		return false
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return false
		}
	}
	return true
}
func (m *APIKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRights(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRights(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Rights) > 0 {
		dAtA2 := make([]byte, len(m.Rights)*10)
		var j1 int
		for _, num := range m.Rights {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRights(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func encodeVarintRights(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedAPIKey(r randyRights, easy bool) *APIKey {
	this := &APIKey{}
	this.Name = string(randStringRights(r))
	this.Key = string(randStringRights(r))
	v1 := r.Intn(10)
	this.Rights = make([]Right, v1)
	for i := 0; i < v1; i++ {
		this.Rights[i] = Right([]int32{0, 1, 2, 10}[r.Intn(4)])
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyRights interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneRights(r randyRights) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringRights(r randyRights) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneRights(r)
	}
	return string(tmps)
}
func randUnrecognizedRights(r randyRights, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldRights(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldRights(dAtA []byte, r randyRights, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateRights(dAtA, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		dAtA = encodeVarintPopulateRights(dAtA, uint64(v3))
	case 1:
		dAtA = encodeVarintPopulateRights(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateRights(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateRights(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateRights(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateRights(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *APIKey) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRights(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovRights(uint64(l))
	}
	if len(m.Rights) > 0 {
		l = 0
		for _, e := range m.Rights {
			l += sovRights(uint64(e))
		}
		n += 1 + sovRights(uint64(l)) + l
	}
	return n
}

func sovRights(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRights(x uint64) (n int) {
	return sovRights(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *APIKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRights
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRights
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRights
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRights
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRights
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v Right
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRights
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Right(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rights = append(m.Rights, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRights
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRights
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v Right
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRights
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Right(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rights = append(m.Rights, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rights", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRights(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRights
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRights(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRights
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRights
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRights
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRights
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRights
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRights(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRights = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRights   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/rights.proto", fileDescriptorRights)
}
func init() {
	golang_proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/rights.proto", fileDescriptorRights)
}

var fileDescriptorRights = []byte{
	// 397 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xb1, 0x6f, 0xd3, 0x40,
	0x18, 0xc5, 0xef, 0x6b, 0x8a, 0x25, 0x4e, 0x02, 0x59, 0xc7, 0x80, 0x15, 0xa1, 0x8f, 0x0a, 0x84,
	0x54, 0x90, 0xb0, 0x11, 0xfd, 0x0b, 0xdc, 0x62, 0x05, 0x0b, 0xcb, 0x8e, 0x9c, 0x43, 0x15, 0x2c,
	0x51, 0x8d, 0x8c, 0x6d, 0x45, 0xb5, 0xad, 0xf4, 0x0a, 0xea, 0xd6, 0x31, 0x6c, 0x8c, 0x6c, 0x20,
	0xb1, 0x74, 0xec, 0xd8, 0xb1, 0x63, 0xc6, 0x8c, 0x19, 0xe3, 0xbb, 0x25, 0x63, 0xc6, 0x8c, 0x28,
	0x67, 0x06, 0xa4, 0x0c, 0x4c, 0xf7, 0xbe, 0xf7, 0xbb, 0xa7, 0x37, 0x3c, 0xfa, 0x2a, 0x2b, 0x44,
	0x7e, 0x9e, 0xd8, 0x9f, 0xaa, 0x53, 0x87, 0xe7, 0x29, 0xcf, 0x8b, 0x32, 0x3b, 0x0b, 0x53, 0xf1,
	0xb5, 0x1a, 0x8f, 0x1c, 0x21, 0x4a, 0xe7, 0xa4, 0x2e, 0x9c, 0x71, 0x91, 0xe5, 0xe2, 0xcc, 0xae,
	0xc7, 0x95, 0xa8, 0x98, 0x21, 0x44, 0x69, 0x7f, 0x39, 0xe8, 0xbe, 0xfc, 0x27, 0x99, 0x55, 0x59,
	0xe5, 0x68, 0x9c, 0x9c, 0x7f, 0xd6, 0x97, 0x3e, 0xb4, 0x6a, 0x63, 0x4f, 0xde, 0x53, 0xc3, 0xed,
	0xfb, 0xef, 0xd2, 0x0b, 0xc6, 0xe8, 0x6e, 0x79, 0x72, 0x9a, 0x5a, 0xb0, 0x07, 0xfb, 0x77, 0x63,
	0xad, 0x99, 0x49, 0x3b, 0xa3, 0xf4, 0xc2, 0xda, 0xd1, 0xd6, 0x46, 0xb2, 0x67, 0xd4, 0x68, 0x6b,
	0xad, 0xce, 0x5e, 0x67, 0xff, 0xfe, 0xeb, 0x7b, 0x76, 0xdb, 0x6b, 0xc7, 0x1b, 0x37, 0xfe, 0x0b,
	0x5f, 0x7c, 0x03, 0x7a, 0x47, 0x3b, 0xec, 0x11, 0xb5, 0x62, 0xbf, 0xf7, 0x96, 0x0f, 0xdd, 0x7e,
	0x3f, 0xf0, 0x8f, 0x5c, 0xee, 0x47, 0xe1, 0xf0, 0x8d, 0x17, 0x78, 0xdc, 0x33, 0x09, 0x43, 0xda,
	0xdd, 0xa6, 0x03, 0x8f, 0x73, 0x3f, 0xec, 0x0d, 0x4c, 0x60, 0x4f, 0xe9, 0xe3, 0x6d, 0x7e, 0x14,
	0x05, 0x81, 0x7b, 0x18, 0xc5, 0x2e, 0x8f, 0xe2, 0x81, 0xb9, 0xc3, 0x1e, 0xd2, 0x07, 0xed, 0xa7,
	0x9e, 0xcb, 0xbd, 0x63, 0xf7, 0xc3, 0x30, 0x3a, 0x0e, 0xbd, 0xd8, 0xa4, 0xdd, 0xdd, 0xc9, 0x6f,
	0x24, 0x87, 0x3f, 0x61, 0xda, 0x20, 0xcc, 0x1a, 0x84, 0x79, 0x83, 0xb0, 0x68, 0x10, 0x96, 0x0d,
	0x92, 0x55, 0x83, 0x64, 0xdd, 0x20, 0x5c, 0x4a, 0x24, 0x13, 0x89, 0xe4, 0x4a, 0x22, 0x5c, 0x4b,
	0x24, 0x37, 0x12, 0xe1, 0x56, 0x22, 0x4c, 0x25, 0xc2, 0x4c, 0x22, 0xcc, 0x25, 0x92, 0x85, 0x44,
	0x58, 0x4a, 0x24, 0x2b, 0x89, 0xb0, 0x96, 0x48, 0x2e, 0x15, 0x92, 0x89, 0x42, 0xf8, 0xae, 0x90,
	0xfc, 0x50, 0x08, 0xbf, 0x14, 0x92, 0x2b, 0x85, 0xe4, 0x5a, 0x21, 0xdc, 0x28, 0x84, 0x5b, 0x85,
	0xf0, 0xf1, 0xf9, 0xff, 0x26, 0xac, 0x47, 0xd9, 0xe6, 0xad, 0x93, 0xc4, 0xd0, 0x5b, 0x1c, 0xfc,
	0x09, 0x00, 0x00, 0xff, 0xff, 0xe5, 0x67, 0x2d, 0xe2, 0xf6, 0x01, 0x00, 0x00,
}
