// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/regional.proto

package ttnpb // import "go.thethings.network/lorawan-stack/pkg/ttnpb"

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"

import time "time"

import encoding_binary "encoding/binary"
import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// FrequencyPlan contains the defined frequency plan.
// This entity is stored in the frequency plan repository.
type FrequencyPlan struct {
	// BandID of the band to support.
	BandID              string                   `protobuf:"bytes,1,opt,name=band_id,json=bandId,proto3" json:"band_id,omitempty" yaml:"band-id"`
	Channels            []*FrequencyPlan_Channel `protobuf:"bytes,2,rep,name=channels" json:"channels,omitempty" yaml:"channels"`
	LoraStandardChannel *FrequencyPlan_Channel   `protobuf:"bytes,3,opt,name=lora_standard_channel,json=loraStandardChannel" json:"lora_standard_channel,omitempty" yaml:"lora-standard-channel,omitempty"`
	FSKChannel          *FrequencyPlan_Channel   `protobuf:"bytes,4,opt,name=fsk_channel,json=fskChannel" json:"fsk_channel,omitempty" yaml:"fsk-channel,omitempty"`
	// LBT configuration.
	LBT *FrequencyPlan_LBTConfiguration `protobuf:"bytes,5,opt,name=lbt" json:"lbt,omitempty" yaml:"lbt,omitempty"`
	// TimeOffAir to abide to after transmission.
	TimeOffAir *FrequencyPlan_TimeOffAir `protobuf:"bytes,6,opt,name=time_off_air,json=timeOffAir" json:"time_off_air,omitempty" yaml:"time-off-air,omitempty"`
	// Dwell time configuration.
	DwellTime *FrequencyPlan_DwellTime `protobuf:"bytes,7,opt,name=dwell_time,json=dwellTime" json:"dwell_time,omitempty" yaml:"dwell-time,omitempty"`
	// Override band settings for the class B ping slot.
	PingSlot *FrequencyPlan_Channel `protobuf:"bytes,8,opt,name=ping_slot,json=pingSlot" json:"ping_slot,omitempty" yaml:"ping-slot,omitempty"`
	// Override band settings for Rx2.
	Rx2 *FrequencyPlan_Channel `protobuf:"bytes,9,opt,name=rx2" json:"rx2,omitempty" yaml:"rx2,omitempty"`
	// Override MaxEIRP devices should respect (in dBm).
	MaxEIRP              float32  `protobuf:"fixed32,10,opt,name=max_eirp,json=maxEirp,proto3" json:"max_eirp,omitempty" yaml:"max-eirp"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FrequencyPlan) Reset()      { *m = FrequencyPlan{} }
func (*FrequencyPlan) ProtoMessage() {}
func (*FrequencyPlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_regional_22ed6f2a6c0cd55b, []int{0}
}
func (m *FrequencyPlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FrequencyPlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FrequencyPlan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FrequencyPlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrequencyPlan.Merge(dst, src)
}
func (m *FrequencyPlan) XXX_Size() int {
	return m.Size()
}
func (m *FrequencyPlan) XXX_DiscardUnknown() {
	xxx_messageInfo_FrequencyPlan.DiscardUnknown(m)
}

var xxx_messageInfo_FrequencyPlan proto.InternalMessageInfo

func (m *FrequencyPlan) GetBandID() string {
	if m != nil {
		return m.BandID
	}
	return ""
}

func (m *FrequencyPlan) GetChannels() []*FrequencyPlan_Channel {
	if m != nil {
		return m.Channels
	}
	return nil
}

func (m *FrequencyPlan) GetLoraStandardChannel() *FrequencyPlan_Channel {
	if m != nil {
		return m.LoraStandardChannel
	}
	return nil
}

func (m *FrequencyPlan) GetFSKChannel() *FrequencyPlan_Channel {
	if m != nil {
		return m.FSKChannel
	}
	return nil
}

func (m *FrequencyPlan) GetLBT() *FrequencyPlan_LBTConfiguration {
	if m != nil {
		return m.LBT
	}
	return nil
}

func (m *FrequencyPlan) GetTimeOffAir() *FrequencyPlan_TimeOffAir {
	if m != nil {
		return m.TimeOffAir
	}
	return nil
}

func (m *FrequencyPlan) GetDwellTime() *FrequencyPlan_DwellTime {
	if m != nil {
		return m.DwellTime
	}
	return nil
}

func (m *FrequencyPlan) GetPingSlot() *FrequencyPlan_Channel {
	if m != nil {
		return m.PingSlot
	}
	return nil
}

func (m *FrequencyPlan) GetRx2() *FrequencyPlan_Channel {
	if m != nil {
		return m.Rx2
	}
	return nil
}

func (m *FrequencyPlan) GetMaxEIRP() float32 {
	if m != nil {
		return m.MaxEIRP
	}
	return 0
}

type FrequencyPlan_DwellTime struct {
	// Enabled for uplinks.
	Uplinks bool `protobuf:"varint,1,opt,name=uplinks,proto3" json:"uplinks,omitempty" yaml:"uplinks"`
	// Enabled for downlinks.
	Downlinks bool `protobuf:"varint,2,opt,name=downlinks,proto3" json:"downlinks,omitempty" yaml:"downlinks"`
	// Duration of dwell time.
	Duration             *time.Duration `protobuf:"bytes,3,opt,name=duration,stdduration" json:"duration,omitempty" yaml:"duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *FrequencyPlan_DwellTime) Reset()      { *m = FrequencyPlan_DwellTime{} }
func (*FrequencyPlan_DwellTime) ProtoMessage() {}
func (*FrequencyPlan_DwellTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_regional_22ed6f2a6c0cd55b, []int{0, 0}
}
func (m *FrequencyPlan_DwellTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FrequencyPlan_DwellTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FrequencyPlan_DwellTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FrequencyPlan_DwellTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrequencyPlan_DwellTime.Merge(dst, src)
}
func (m *FrequencyPlan_DwellTime) XXX_Size() int {
	return m.Size()
}
func (m *FrequencyPlan_DwellTime) XXX_DiscardUnknown() {
	xxx_messageInfo_FrequencyPlan_DwellTime.DiscardUnknown(m)
}

var xxx_messageInfo_FrequencyPlan_DwellTime proto.InternalMessageInfo

func (m *FrequencyPlan_DwellTime) GetUplinks() bool {
	if m != nil {
		return m.Uplinks
	}
	return false
}

func (m *FrequencyPlan_DwellTime) GetDownlinks() bool {
	if m != nil {
		return m.Downlinks
	}
	return false
}

func (m *FrequencyPlan_DwellTime) GetDuration() *time.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

type FrequencyPlan_Channel struct {
	Frequency            uint64                               `protobuf:"varint,1,opt,name=frequency,proto3" json:"frequency,omitempty" yaml:"frequency"`
	DataRate             *FrequencyPlan_Channel_ForceDataRate `protobuf:"bytes,2,opt,name=data_rate,json=dataRate" json:"data_rate,omitempty" yaml:"data-rate,omitempty"`
	DwellTime            *FrequencyPlan_DwellTime             `protobuf:"bytes,3,opt,name=dwell_time,json=dwellTime" json:"dwell_time,omitempty" yaml:"dwell-time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *FrequencyPlan_Channel) Reset()      { *m = FrequencyPlan_Channel{} }
func (*FrequencyPlan_Channel) ProtoMessage() {}
func (*FrequencyPlan_Channel) Descriptor() ([]byte, []int) {
	return fileDescriptor_regional_22ed6f2a6c0cd55b, []int{0, 1}
}
func (m *FrequencyPlan_Channel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FrequencyPlan_Channel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FrequencyPlan_Channel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FrequencyPlan_Channel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrequencyPlan_Channel.Merge(dst, src)
}
func (m *FrequencyPlan_Channel) XXX_Size() int {
	return m.Size()
}
func (m *FrequencyPlan_Channel) XXX_DiscardUnknown() {
	xxx_messageInfo_FrequencyPlan_Channel.DiscardUnknown(m)
}

var xxx_messageInfo_FrequencyPlan_Channel proto.InternalMessageInfo

func (m *FrequencyPlan_Channel) GetFrequency() uint64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *FrequencyPlan_Channel) GetDataRate() *FrequencyPlan_Channel_ForceDataRate {
	if m != nil {
		return m.DataRate
	}
	return nil
}

func (m *FrequencyPlan_Channel) GetDwellTime() *FrequencyPlan_DwellTime {
	if m != nil {
		return m.DwellTime
	}
	return nil
}

type FrequencyPlan_Channel_ForceDataRate struct {
	Index                uint32   `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty" yaml:"index"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FrequencyPlan_Channel_ForceDataRate) Reset()      { *m = FrequencyPlan_Channel_ForceDataRate{} }
func (*FrequencyPlan_Channel_ForceDataRate) ProtoMessage() {}
func (*FrequencyPlan_Channel_ForceDataRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_regional_22ed6f2a6c0cd55b, []int{0, 1, 0}
}
func (m *FrequencyPlan_Channel_ForceDataRate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FrequencyPlan_Channel_ForceDataRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FrequencyPlan_Channel_ForceDataRate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FrequencyPlan_Channel_ForceDataRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrequencyPlan_Channel_ForceDataRate.Merge(dst, src)
}
func (m *FrequencyPlan_Channel_ForceDataRate) XXX_Size() int {
	return m.Size()
}
func (m *FrequencyPlan_Channel_ForceDataRate) XXX_DiscardUnknown() {
	xxx_messageInfo_FrequencyPlan_Channel_ForceDataRate.DiscardUnknown(m)
}

var xxx_messageInfo_FrequencyPlan_Channel_ForceDataRate proto.InternalMessageInfo

func (m *FrequencyPlan_Channel_ForceDataRate) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type FrequencyPlan_LBTConfiguration struct {
	RSSITarget float32 `protobuf:"fixed32,1,opt,name=rssi_target,json=rssiTarget,proto3" json:"rssi_target,omitempty" yaml:"rssi-target"`
	// RSSIOffset describes the LBT config-specific RSSI offset.
	RSSIOffset           float32  `protobuf:"fixed32,2,opt,name=rssi_offset,json=rssiOffset,proto3" json:"rssi_offset,omitempty" yaml:"rssi-offset"`
	ScanTime             int32    `protobuf:"varint,3,opt,name=scan_time,json=scanTime,proto3" json:"scan_time,omitempty" yaml:"scan-time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FrequencyPlan_LBTConfiguration) Reset()      { *m = FrequencyPlan_LBTConfiguration{} }
func (*FrequencyPlan_LBTConfiguration) ProtoMessage() {}
func (*FrequencyPlan_LBTConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_regional_22ed6f2a6c0cd55b, []int{0, 2}
}
func (m *FrequencyPlan_LBTConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FrequencyPlan_LBTConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FrequencyPlan_LBTConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FrequencyPlan_LBTConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrequencyPlan_LBTConfiguration.Merge(dst, src)
}
func (m *FrequencyPlan_LBTConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *FrequencyPlan_LBTConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_FrequencyPlan_LBTConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_FrequencyPlan_LBTConfiguration proto.InternalMessageInfo

func (m *FrequencyPlan_LBTConfiguration) GetRSSITarget() float32 {
	if m != nil {
		return m.RSSITarget
	}
	return 0
}

func (m *FrequencyPlan_LBTConfiguration) GetRSSIOffset() float32 {
	if m != nil {
		return m.RSSIOffset
	}
	return 0
}

func (m *FrequencyPlan_LBTConfiguration) GetScanTime() int32 {
	if m != nil {
		return m.ScanTime
	}
	return 0
}

type FrequencyPlan_TimeOffAir struct {
	// Fraction of the time on air of a Tx emission to account as cooloff after emission.
	Fraction float32 `protobuf:"fixed32,1,opt,name=fraction,proto3" json:"fraction,omitempty" yaml:"fraction,omitempty"`
	// Cooloff after a Tx emission.
	Duration             *time.Duration `protobuf:"bytes,2,opt,name=duration,stdduration" json:"duration,omitempty" yaml:"duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *FrequencyPlan_TimeOffAir) Reset()      { *m = FrequencyPlan_TimeOffAir{} }
func (*FrequencyPlan_TimeOffAir) ProtoMessage() {}
func (*FrequencyPlan_TimeOffAir) Descriptor() ([]byte, []int) {
	return fileDescriptor_regional_22ed6f2a6c0cd55b, []int{0, 3}
}
func (m *FrequencyPlan_TimeOffAir) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FrequencyPlan_TimeOffAir) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FrequencyPlan_TimeOffAir.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FrequencyPlan_TimeOffAir) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrequencyPlan_TimeOffAir.Merge(dst, src)
}
func (m *FrequencyPlan_TimeOffAir) XXX_Size() int {
	return m.Size()
}
func (m *FrequencyPlan_TimeOffAir) XXX_DiscardUnknown() {
	xxx_messageInfo_FrequencyPlan_TimeOffAir.DiscardUnknown(m)
}

var xxx_messageInfo_FrequencyPlan_TimeOffAir proto.InternalMessageInfo

func (m *FrequencyPlan_TimeOffAir) GetFraction() float32 {
	if m != nil {
		return m.Fraction
	}
	return 0
}

func (m *FrequencyPlan_TimeOffAir) GetDuration() *time.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

func init() {
	proto.RegisterType((*FrequencyPlan)(nil), "ttn.lorawan.v3.FrequencyPlan")
	golang_proto.RegisterType((*FrequencyPlan)(nil), "ttn.lorawan.v3.FrequencyPlan")
	proto.RegisterType((*FrequencyPlan_DwellTime)(nil), "ttn.lorawan.v3.FrequencyPlan.DwellTime")
	golang_proto.RegisterType((*FrequencyPlan_DwellTime)(nil), "ttn.lorawan.v3.FrequencyPlan.DwellTime")
	proto.RegisterType((*FrequencyPlan_Channel)(nil), "ttn.lorawan.v3.FrequencyPlan.Channel")
	golang_proto.RegisterType((*FrequencyPlan_Channel)(nil), "ttn.lorawan.v3.FrequencyPlan.Channel")
	proto.RegisterType((*FrequencyPlan_Channel_ForceDataRate)(nil), "ttn.lorawan.v3.FrequencyPlan.Channel.ForceDataRate")
	golang_proto.RegisterType((*FrequencyPlan_Channel_ForceDataRate)(nil), "ttn.lorawan.v3.FrequencyPlan.Channel.ForceDataRate")
	proto.RegisterType((*FrequencyPlan_LBTConfiguration)(nil), "ttn.lorawan.v3.FrequencyPlan.LBTConfiguration")
	golang_proto.RegisterType((*FrequencyPlan_LBTConfiguration)(nil), "ttn.lorawan.v3.FrequencyPlan.LBTConfiguration")
	proto.RegisterType((*FrequencyPlan_TimeOffAir)(nil), "ttn.lorawan.v3.FrequencyPlan.TimeOffAir")
	golang_proto.RegisterType((*FrequencyPlan_TimeOffAir)(nil), "ttn.lorawan.v3.FrequencyPlan.TimeOffAir")
}
func (this *FrequencyPlan) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FrequencyPlan)
	if !ok {
		that2, ok := that.(FrequencyPlan)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BandID != that1.BandID {
		return false
	}
	if len(this.Channels) != len(that1.Channels) {
		return false
	}
	for i := range this.Channels {
		if !this.Channels[i].Equal(that1.Channels[i]) {
			return false
		}
	}
	if !this.LoraStandardChannel.Equal(that1.LoraStandardChannel) {
		return false
	}
	if !this.FSKChannel.Equal(that1.FSKChannel) {
		return false
	}
	if !this.LBT.Equal(that1.LBT) {
		return false
	}
	if !this.TimeOffAir.Equal(that1.TimeOffAir) {
		return false
	}
	if !this.DwellTime.Equal(that1.DwellTime) {
		return false
	}
	if !this.PingSlot.Equal(that1.PingSlot) {
		return false
	}
	if !this.Rx2.Equal(that1.Rx2) {
		return false
	}
	if this.MaxEIRP != that1.MaxEIRP {
		return false
	}
	return true
}
func (this *FrequencyPlan_DwellTime) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FrequencyPlan_DwellTime)
	if !ok {
		that2, ok := that.(FrequencyPlan_DwellTime)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uplinks != that1.Uplinks {
		return false
	}
	if this.Downlinks != that1.Downlinks {
		return false
	}
	if this.Duration != nil && that1.Duration != nil {
		if *this.Duration != *that1.Duration {
			return false
		}
	} else if this.Duration != nil {
		return false
	} else if that1.Duration != nil {
		return false
	}
	return true
}
func (this *FrequencyPlan_Channel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FrequencyPlan_Channel)
	if !ok {
		that2, ok := that.(FrequencyPlan_Channel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Frequency != that1.Frequency {
		return false
	}
	if !this.DataRate.Equal(that1.DataRate) {
		return false
	}
	if !this.DwellTime.Equal(that1.DwellTime) {
		return false
	}
	return true
}
func (this *FrequencyPlan_Channel_ForceDataRate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FrequencyPlan_Channel_ForceDataRate)
	if !ok {
		that2, ok := that.(FrequencyPlan_Channel_ForceDataRate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	return true
}
func (this *FrequencyPlan_LBTConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FrequencyPlan_LBTConfiguration)
	if !ok {
		that2, ok := that.(FrequencyPlan_LBTConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RSSITarget != that1.RSSITarget {
		return false
	}
	if this.RSSIOffset != that1.RSSIOffset {
		return false
	}
	if this.ScanTime != that1.ScanTime {
		return false
	}
	return true
}
func (this *FrequencyPlan_TimeOffAir) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FrequencyPlan_TimeOffAir)
	if !ok {
		that2, ok := that.(FrequencyPlan_TimeOffAir)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Fraction != that1.Fraction {
		return false
	}
	if this.Duration != nil && that1.Duration != nil {
		if *this.Duration != *that1.Duration {
			return false
		}
	} else if this.Duration != nil {
		return false
	} else if that1.Duration != nil {
		return false
	}
	return true
}
func (m *FrequencyPlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrequencyPlan) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BandID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegional(dAtA, i, uint64(len(m.BandID)))
		i += copy(dAtA[i:], m.BandID)
	}
	if len(m.Channels) > 0 {
		for _, msg := range m.Channels {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRegional(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.LoraStandardChannel != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRegional(dAtA, i, uint64(m.LoraStandardChannel.Size()))
		n1, err := m.LoraStandardChannel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.FSKChannel != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRegional(dAtA, i, uint64(m.FSKChannel.Size()))
		n2, err := m.FSKChannel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.LBT != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRegional(dAtA, i, uint64(m.LBT.Size()))
		n3, err := m.LBT.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.TimeOffAir != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRegional(dAtA, i, uint64(m.TimeOffAir.Size()))
		n4, err := m.TimeOffAir.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.DwellTime != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintRegional(dAtA, i, uint64(m.DwellTime.Size()))
		n5, err := m.DwellTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.PingSlot != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintRegional(dAtA, i, uint64(m.PingSlot.Size()))
		n6, err := m.PingSlot.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Rx2 != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintRegional(dAtA, i, uint64(m.Rx2.Size()))
		n7, err := m.Rx2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.MaxEIRP != 0 {
		dAtA[i] = 0x55
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], math.Float32bits(m.MaxEIRP))
		i += 4
	}
	return i, nil
}

func (m *FrequencyPlan_DwellTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrequencyPlan_DwellTime) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uplinks {
		dAtA[i] = 0x8
		i++
		if m.Uplinks {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Downlinks {
		dAtA[i] = 0x10
		i++
		if m.Downlinks {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Duration != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRegional(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdDuration(*m.Duration)))
		n8, err := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.Duration, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *FrequencyPlan_Channel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrequencyPlan_Channel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Frequency != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegional(dAtA, i, m.Frequency)
	}
	if m.DataRate != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegional(dAtA, i, uint64(m.DataRate.Size()))
		n9, err := m.DataRate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.DwellTime != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRegional(dAtA, i, uint64(m.DwellTime.Size()))
		n10, err := m.DwellTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *FrequencyPlan_Channel_ForceDataRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrequencyPlan_Channel_ForceDataRate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegional(dAtA, i, uint64(m.Index))
	}
	return i, nil
}

func (m *FrequencyPlan_LBTConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrequencyPlan_LBTConfiguration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RSSITarget != 0 {
		dAtA[i] = 0xd
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], math.Float32bits(m.RSSITarget))
		i += 4
	}
	if m.RSSIOffset != 0 {
		dAtA[i] = 0x15
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], math.Float32bits(m.RSSIOffset))
		i += 4
	}
	if m.ScanTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRegional(dAtA, i, uint64(m.ScanTime))
	}
	return i, nil
}

func (m *FrequencyPlan_TimeOffAir) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrequencyPlan_TimeOffAir) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fraction != 0 {
		dAtA[i] = 0xd
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], math.Float32bits(m.Fraction))
		i += 4
	}
	if m.Duration != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegional(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdDuration(*m.Duration)))
		n11, err := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.Duration, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func encodeVarintRegional(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedFrequencyPlan(r randyRegional, easy bool) *FrequencyPlan {
	this := &FrequencyPlan{}
	this.BandID = randStringRegional(r)
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Channels = make([]*FrequencyPlan_Channel, v1)
		for i := 0; i < v1; i++ {
			this.Channels[i] = NewPopulatedFrequencyPlan_Channel(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.LoraStandardChannel = NewPopulatedFrequencyPlan_Channel(r, easy)
	}
	if r.Intn(10) != 0 {
		this.FSKChannel = NewPopulatedFrequencyPlan_Channel(r, easy)
	}
	if r.Intn(10) != 0 {
		this.LBT = NewPopulatedFrequencyPlan_LBTConfiguration(r, easy)
	}
	if r.Intn(10) != 0 {
		this.TimeOffAir = NewPopulatedFrequencyPlan_TimeOffAir(r, easy)
	}
	if r.Intn(10) != 0 {
		this.DwellTime = NewPopulatedFrequencyPlan_DwellTime(r, easy)
	}
	if r.Intn(10) != 0 {
		this.PingSlot = NewPopulatedFrequencyPlan_Channel(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Rx2 = NewPopulatedFrequencyPlan_Channel(r, easy)
	}
	this.MaxEIRP = r.Float32()
	if r.Intn(2) == 0 {
		this.MaxEIRP *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFrequencyPlan_DwellTime(r randyRegional, easy bool) *FrequencyPlan_DwellTime {
	this := &FrequencyPlan_DwellTime{}
	this.Uplinks = bool(r.Intn(2) == 0)
	this.Downlinks = bool(r.Intn(2) == 0)
	if r.Intn(10) != 0 {
		this.Duration = github_com_gogo_protobuf_types.NewPopulatedStdDuration(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFrequencyPlan_Channel(r randyRegional, easy bool) *FrequencyPlan_Channel {
	this := &FrequencyPlan_Channel{}
	this.Frequency = uint64(r.Uint32())
	if r.Intn(10) != 0 {
		this.DataRate = NewPopulatedFrequencyPlan_Channel_ForceDataRate(r, easy)
	}
	if r.Intn(10) != 0 {
		this.DwellTime = NewPopulatedFrequencyPlan_DwellTime(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFrequencyPlan_Channel_ForceDataRate(r randyRegional, easy bool) *FrequencyPlan_Channel_ForceDataRate {
	this := &FrequencyPlan_Channel_ForceDataRate{}
	this.Index = r.Uint32()
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFrequencyPlan_LBTConfiguration(r randyRegional, easy bool) *FrequencyPlan_LBTConfiguration {
	this := &FrequencyPlan_LBTConfiguration{}
	this.RSSITarget = r.Float32()
	if r.Intn(2) == 0 {
		this.RSSITarget *= -1
	}
	this.RSSIOffset = r.Float32()
	if r.Intn(2) == 0 {
		this.RSSIOffset *= -1
	}
	this.ScanTime = r.Int31()
	if r.Intn(2) == 0 {
		this.ScanTime *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFrequencyPlan_TimeOffAir(r randyRegional, easy bool) *FrequencyPlan_TimeOffAir {
	this := &FrequencyPlan_TimeOffAir{}
	this.Fraction = r.Float32()
	if r.Intn(2) == 0 {
		this.Fraction *= -1
	}
	if r.Intn(10) != 0 {
		this.Duration = github_com_gogo_protobuf_types.NewPopulatedStdDuration(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyRegional interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneRegional(r randyRegional) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringRegional(r randyRegional) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneRegional(r)
	}
	return string(tmps)
}
func randUnrecognizedRegional(r randyRegional, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldRegional(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldRegional(dAtA []byte, r randyRegional, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateRegional(dAtA, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		dAtA = encodeVarintPopulateRegional(dAtA, uint64(v3))
	case 1:
		dAtA = encodeVarintPopulateRegional(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateRegional(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateRegional(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateRegional(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateRegional(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *FrequencyPlan) Size() (n int) {
	var l int
	_ = l
	l = len(m.BandID)
	if l > 0 {
		n += 1 + l + sovRegional(uint64(l))
	}
	if len(m.Channels) > 0 {
		for _, e := range m.Channels {
			l = e.Size()
			n += 1 + l + sovRegional(uint64(l))
		}
	}
	if m.LoraStandardChannel != nil {
		l = m.LoraStandardChannel.Size()
		n += 1 + l + sovRegional(uint64(l))
	}
	if m.FSKChannel != nil {
		l = m.FSKChannel.Size()
		n += 1 + l + sovRegional(uint64(l))
	}
	if m.LBT != nil {
		l = m.LBT.Size()
		n += 1 + l + sovRegional(uint64(l))
	}
	if m.TimeOffAir != nil {
		l = m.TimeOffAir.Size()
		n += 1 + l + sovRegional(uint64(l))
	}
	if m.DwellTime != nil {
		l = m.DwellTime.Size()
		n += 1 + l + sovRegional(uint64(l))
	}
	if m.PingSlot != nil {
		l = m.PingSlot.Size()
		n += 1 + l + sovRegional(uint64(l))
	}
	if m.Rx2 != nil {
		l = m.Rx2.Size()
		n += 1 + l + sovRegional(uint64(l))
	}
	if m.MaxEIRP != 0 {
		n += 5
	}
	return n
}

func (m *FrequencyPlan_DwellTime) Size() (n int) {
	var l int
	_ = l
	if m.Uplinks {
		n += 2
	}
	if m.Downlinks {
		n += 2
	}
	if m.Duration != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.Duration)
		n += 1 + l + sovRegional(uint64(l))
	}
	return n
}

func (m *FrequencyPlan_Channel) Size() (n int) {
	var l int
	_ = l
	if m.Frequency != 0 {
		n += 1 + sovRegional(m.Frequency)
	}
	if m.DataRate != nil {
		l = m.DataRate.Size()
		n += 1 + l + sovRegional(uint64(l))
	}
	if m.DwellTime != nil {
		l = m.DwellTime.Size()
		n += 1 + l + sovRegional(uint64(l))
	}
	return n
}

func (m *FrequencyPlan_Channel_ForceDataRate) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovRegional(uint64(m.Index))
	}
	return n
}

func (m *FrequencyPlan_LBTConfiguration) Size() (n int) {
	var l int
	_ = l
	if m.RSSITarget != 0 {
		n += 5
	}
	if m.RSSIOffset != 0 {
		n += 5
	}
	if m.ScanTime != 0 {
		n += 1 + sovRegional(uint64(m.ScanTime))
	}
	return n
}

func (m *FrequencyPlan_TimeOffAir) Size() (n int) {
	var l int
	_ = l
	if m.Fraction != 0 {
		n += 5
	}
	if m.Duration != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.Duration)
		n += 1 + l + sovRegional(uint64(l))
	}
	return n
}

func sovRegional(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRegional(x uint64) (n int) {
	return sovRegional((x << 1) ^ uint64((int64(x) >> 63)))
}
func (this *FrequencyPlan) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FrequencyPlan{`,
		`BandID:` + fmt.Sprintf("%v", this.BandID) + `,`,
		`Channels:` + strings.Replace(fmt.Sprintf("%v", this.Channels), "FrequencyPlan_Channel", "FrequencyPlan_Channel", 1) + `,`,
		`LoraStandardChannel:` + strings.Replace(fmt.Sprintf("%v", this.LoraStandardChannel), "FrequencyPlan_Channel", "FrequencyPlan_Channel", 1) + `,`,
		`FSKChannel:` + strings.Replace(fmt.Sprintf("%v", this.FSKChannel), "FrequencyPlan_Channel", "FrequencyPlan_Channel", 1) + `,`,
		`LBT:` + strings.Replace(fmt.Sprintf("%v", this.LBT), "FrequencyPlan_LBTConfiguration", "FrequencyPlan_LBTConfiguration", 1) + `,`,
		`TimeOffAir:` + strings.Replace(fmt.Sprintf("%v", this.TimeOffAir), "FrequencyPlan_TimeOffAir", "FrequencyPlan_TimeOffAir", 1) + `,`,
		`DwellTime:` + strings.Replace(fmt.Sprintf("%v", this.DwellTime), "FrequencyPlan_DwellTime", "FrequencyPlan_DwellTime", 1) + `,`,
		`PingSlot:` + strings.Replace(fmt.Sprintf("%v", this.PingSlot), "FrequencyPlan_Channel", "FrequencyPlan_Channel", 1) + `,`,
		`Rx2:` + strings.Replace(fmt.Sprintf("%v", this.Rx2), "FrequencyPlan_Channel", "FrequencyPlan_Channel", 1) + `,`,
		`MaxEIRP:` + fmt.Sprintf("%v", this.MaxEIRP) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FrequencyPlan_DwellTime) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FrequencyPlan_DwellTime{`,
		`Uplinks:` + fmt.Sprintf("%v", this.Uplinks) + `,`,
		`Downlinks:` + fmt.Sprintf("%v", this.Downlinks) + `,`,
		`Duration:` + strings.Replace(fmt.Sprintf("%v", this.Duration), "Duration", "types.Duration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FrequencyPlan_Channel) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FrequencyPlan_Channel{`,
		`Frequency:` + fmt.Sprintf("%v", this.Frequency) + `,`,
		`DataRate:` + strings.Replace(fmt.Sprintf("%v", this.DataRate), "FrequencyPlan_Channel_ForceDataRate", "FrequencyPlan_Channel_ForceDataRate", 1) + `,`,
		`DwellTime:` + strings.Replace(fmt.Sprintf("%v", this.DwellTime), "FrequencyPlan_DwellTime", "FrequencyPlan_DwellTime", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FrequencyPlan_Channel_ForceDataRate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FrequencyPlan_Channel_ForceDataRate{`,
		`Index:` + fmt.Sprintf("%v", this.Index) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FrequencyPlan_LBTConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FrequencyPlan_LBTConfiguration{`,
		`RSSITarget:` + fmt.Sprintf("%v", this.RSSITarget) + `,`,
		`RSSIOffset:` + fmt.Sprintf("%v", this.RSSIOffset) + `,`,
		`ScanTime:` + fmt.Sprintf("%v", this.ScanTime) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FrequencyPlan_TimeOffAir) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FrequencyPlan_TimeOffAir{`,
		`Fraction:` + fmt.Sprintf("%v", this.Fraction) + `,`,
		`Duration:` + strings.Replace(fmt.Sprintf("%v", this.Duration), "Duration", "types.Duration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRegional(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FrequencyPlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegional
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FrequencyPlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FrequencyPlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BandID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegional
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegional
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BandID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegional
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegional
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channels = append(m.Channels, &FrequencyPlan_Channel{})
			if err := m.Channels[len(m.Channels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoraStandardChannel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegional
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegional
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LoraStandardChannel == nil {
				m.LoraStandardChannel = &FrequencyPlan_Channel{}
			}
			if err := m.LoraStandardChannel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FSKChannel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegional
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegional
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FSKChannel == nil {
				m.FSKChannel = &FrequencyPlan_Channel{}
			}
			if err := m.FSKChannel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LBT", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegional
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegional
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LBT == nil {
				m.LBT = &FrequencyPlan_LBTConfiguration{}
			}
			if err := m.LBT.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeOffAir", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegional
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegional
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeOffAir == nil {
				m.TimeOffAir = &FrequencyPlan_TimeOffAir{}
			}
			if err := m.TimeOffAir.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DwellTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegional
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegional
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DwellTime == nil {
				m.DwellTime = &FrequencyPlan_DwellTime{}
			}
			if err := m.DwellTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingSlot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegional
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegional
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PingSlot == nil {
				m.PingSlot = &FrequencyPlan_Channel{}
			}
			if err := m.PingSlot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegional
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegional
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rx2 == nil {
				m.Rx2 = &FrequencyPlan_Channel{}
			}
			if err := m.Rx2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxEIRP", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:])
			iNdEx += 4
			m.MaxEIRP = math.Float32frombits(v)
		default:
			iNdEx = preIndex
			skippy, err := skipRegional(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegional
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FrequencyPlan_DwellTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegional
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DwellTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DwellTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uplinks", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegional
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Uplinks = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Downlinks", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegional
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Downlinks = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegional
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegional
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Duration == nil {
				m.Duration = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.Duration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegional(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegional
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FrequencyPlan_Channel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegional
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Channel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Channel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			m.Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegional
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegional
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegional
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataRate == nil {
				m.DataRate = &FrequencyPlan_Channel_ForceDataRate{}
			}
			if err := m.DataRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DwellTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegional
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegional
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DwellTime == nil {
				m.DwellTime = &FrequencyPlan_DwellTime{}
			}
			if err := m.DwellTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegional(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegional
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FrequencyPlan_Channel_ForceDataRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegional
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForceDataRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForceDataRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegional
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegional(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegional
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FrequencyPlan_LBTConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegional
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LBTConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LBTConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RSSITarget", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:])
			iNdEx += 4
			m.RSSITarget = math.Float32frombits(v)
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RSSIOffset", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:])
			iNdEx += 4
			m.RSSIOffset = math.Float32frombits(v)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanTime", wireType)
			}
			m.ScanTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegional
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScanTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegional(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegional
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FrequencyPlan_TimeOffAir) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegional
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeOffAir: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeOffAir: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fraction", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:])
			iNdEx += 4
			m.Fraction = math.Float32frombits(v)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegional
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegional
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Duration == nil {
				m.Duration = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.Duration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegional(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegional
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRegional(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRegional
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegional
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegional
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRegional
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRegional
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRegional(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRegional = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRegional   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("lorawan-stack/api/regional.proto", fileDescriptor_regional_22ed6f2a6c0cd55b)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/regional.proto", fileDescriptor_regional_22ed6f2a6c0cd55b)
}

var fileDescriptor_regional_22ed6f2a6c0cd55b = []byte{
	// 1018 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x96, 0x3b, 0x6c, 0xdb, 0x46,
	0x18, 0xc7, 0x79, 0x52, 0x6c, 0x49, 0xe7, 0xd8, 0x35, 0x98, 0x14, 0x50, 0xd4, 0xe4, 0xe8, 0x12,
	0x6d, 0x6a, 0x14, 0x26, 0x85, 0xca, 0x28, 0x8a, 0x76, 0x2b, 0x63, 0x1b, 0x30, 0x9a, 0x22, 0x01,
	0x6d, 0x14, 0x41, 0x17, 0xe1, 0x24, 0x3e, 0x7c, 0x10, 0xc5, 0x63, 0x8f, 0xe7, 0x58, 0xde, 0xb2,
	0x14, 0xc8, 0xd8, 0x31, 0x63, 0xdb, 0x29, 0x63, 0xc6, 0x8c, 0xd9, 0x9a, 0x31, 0x45, 0x97, 0x4c,
	0x6c, 0x44, 0x2d, 0x41, 0xa7, 0x80, 0x53, 0xc6, 0xe2, 0x8e, 0xa4, 0x1e, 0x46, 0x61, 0xc4, 0x40,
	0xb3, 0xf1, 0xee, 0xfb, 0xeb, 0xf7, 0xbf, 0xef, 0x71, 0x07, 0xc1, 0x8d, 0x80, 0x32, 0x7c, 0x82,
	0x43, 0x23, 0xe6, 0xb8, 0x3f, 0x68, 0xe3, 0x88, 0xb4, 0x99, 0xeb, 0x13, 0x1a, 0xe2, 0xc0, 0x8c,
	0x18, 0xe5, 0x54, 0x5d, 0xe3, 0x3c, 0x34, 0x0b, 0x95, 0x79, 0x7f, 0xbb, 0x65, 0xf8, 0x84, 0x1f,
	0x1d, 0xf7, 0xcc, 0x3e, 0x1d, 0xb6, 0x7d, 0xea, 0xd3, 0xb6, 0x94, 0xf5, 0x8e, 0x3d, 0xb9, 0x92,
	0x0b, 0xf9, 0x95, 0xff, 0xbc, 0x85, 0x7c, 0x4a, 0xfd, 0xc0, 0x9d, 0xa9, 0x9c, 0x63, 0x86, 0x39,
	0xa1, 0x61, 0x1e, 0xd7, 0xff, 0x59, 0x83, 0xab, 0x7b, 0xcc, 0xfd, 0xe9, 0xd8, 0x0d, 0xfb, 0xa7,
	0x77, 0x03, 0x1c, 0xaa, 0x5f, 0xc2, 0x5a, 0x0f, 0x87, 0x4e, 0x97, 0x38, 0x4d, 0xb0, 0x01, 0x36,
	0x1b, 0xd6, 0xf5, 0x34, 0xd1, 0x96, 0x2d, 0x1c, 0x3a, 0xfb, 0x3b, 0x59, 0xa2, 0xad, 0x9d, 0xe2,
	0x61, 0xf0, 0x8d, 0x2e, 0x24, 0x06, 0x71, 0x74, 0x7b, 0x59, 0x7c, 0xed, 0x3b, 0xea, 0x0f, 0xb0,
	0xde, 0x3f, 0xc2, 0x61, 0xe8, 0x06, 0x71, 0xb3, 0xb2, 0x51, 0xdd, 0x5c, 0xe9, 0x7c, 0x6a, 0x2e,
	0x1e, 0xdd, 0x5c, 0xf0, 0x31, 0x6f, 0xe5, 0x6a, 0xeb, 0x4a, 0x96, 0x68, 0x1f, 0xe4, 0xd0, 0x12,
	0xa0, 0xdb, 0x53, 0x96, 0xfa, 0x33, 0x80, 0x1f, 0x0a, 0x46, 0x37, 0xe6, 0x38, 0x74, 0x30, 0x73,
	0xba, 0x45, 0xa8, 0x59, 0xdd, 0x00, 0xef, 0xee, 0xf2, 0x79, 0x96, 0x68, 0x37, 0x73, 0x17, 0xa1,
	0x35, 0x4a, 0x9a, 0x51, 0xd0, 0xb6, 0xe8, 0x90, 0x70, 0x77, 0x18, 0xf1, 0x53, 0xdd, 0xbe, 0x22,
	0x14, 0x07, 0x85, 0xa0, 0x00, 0xa8, 0xf7, 0xe1, 0x8a, 0x17, 0x0f, 0xa6, 0xe6, 0x97, 0x2e, 0x62,
	0x6e, 0xa6, 0x89, 0x06, 0xf7, 0x0e, 0xbe, 0x2b, 0xd6, 0x59, 0xa2, 0x5d, 0xcf, 0x8f, 0xe2, 0xc5,
	0x83, 0xff, 0x3a, 0x00, 0xf4, 0xe2, 0x41, 0xe9, 0x8b, 0x61, 0x35, 0xe8, 0xf1, 0xe6, 0x92, 0xf4,
	0x33, 0xcf, 0xf7, 0xbb, 0x6d, 0x1d, 0xde, 0xa2, 0xa1, 0x47, 0xfc, 0xa2, 0xc7, 0x96, 0x96, 0x26,
	0x5a, 0xf5, 0xb6, 0x75, 0x98, 0x25, 0xda, 0xd5, 0x22, 0xf9, 0x1e, 0x9f, 0x77, 0x12, 0x6c, 0x75,
	0x08, 0x2f, 0x73, 0x32, 0x74, 0xbb, 0xd4, 0xf3, 0xba, 0x98, 0xb0, 0xe6, 0xb2, 0xf4, 0xda, 0x3c,
	0xdf, 0xeb, 0x90, 0x0c, 0xdd, 0x3b, 0x9e, 0xf7, 0x2d, 0x61, 0xd6, 0xc7, 0x59, 0xa2, 0xdd, 0xc8,
	0xf1, 0x82, 0x63, 0x50, 0xcf, 0x33, 0x30, 0x61, 0x0b, 0x19, 0xf1, 0xa9, 0x5c, 0xf5, 0x21, 0x74,
	0x4e, 0xdc, 0x20, 0xe8, 0x8a, 0xbd, 0x66, 0x4d, 0x9a, 0x7d, 0x76, 0xbe, 0xd9, 0x8e, 0xd0, 0x0b,
	0x47, 0x4b, 0xcb, 0x12, 0xed, 0xa3, 0xdc, 0x4b, 0x42, 0x0c, 0x01, 0x99, 0x77, 0x6a, 0x38, 0xa5,
	0x56, 0xed, 0xc1, 0x46, 0x44, 0x42, 0xbf, 0x1b, 0x07, 0x94, 0x37, 0xeb, 0x17, 0x69, 0x18, 0xca,
	0x12, 0xad, 0x95, 0xbb, 0x08, 0x82, 0x21, 0x08, 0xf3, 0x26, 0x75, 0xb1, 0x7b, 0x10, 0x50, 0xae,
	0xde, 0x83, 0x55, 0x36, 0xea, 0x34, 0x1b, 0x17, 0xa1, 0xcb, 0xae, 0xd8, 0xa3, 0xce, 0xac, 0x2b,
	0x6c, 0xd4, 0x59, 0xe8, 0x0a, 0x1b, 0x75, 0xd4, 0xaf, 0x61, 0x7d, 0x88, 0x47, 0x5d, 0x97, 0xb0,
	0xa8, 0x09, 0x37, 0xc0, 0x66, 0xc5, 0x42, 0x69, 0xa2, 0xd5, 0xbe, 0xc7, 0xa3, 0xdd, 0x7d, 0xfb,
	0xee, 0xec, 0xd2, 0x0c, 0xf1, 0xc8, 0x10, 0x22, 0xdd, 0xae, 0x0d, 0xf1, 0x68, 0x97, 0xb0, 0xa8,
	0xf5, 0x07, 0x80, 0x8d, 0x69, 0xc9, 0xd4, 0x2d, 0x58, 0x3b, 0x8e, 0x02, 0x12, 0x0e, 0x62, 0x79,
	0xa1, 0xeb, 0x96, 0x3a, 0xbb, 0xc6, 0x45, 0x40, 0xb7, 0x4b, 0x89, 0xda, 0x81, 0x0d, 0x87, 0x9e,
	0x84, 0xb9, 0xbe, 0x22, 0xf5, 0x57, 0xb3, 0x44, 0x5b, 0x2f, 0x6a, 0x5e, 0x86, 0x44, 0xa1, 0xcb,
	0x6f, 0xf5, 0x1e, 0xac, 0x97, 0xcf, 0x4a, 0x71, 0x2b, 0xaf, 0x99, 0xf9, 0xbb, 0x63, 0x96, 0xef,
	0x8e, 0xb9, 0x53, 0xce, 0xa4, 0x98, 0x96, 0x6b, 0x05, 0xad, 0xd8, 0x9b, 0xcb, 0xfd, 0xd1, 0xdf,
	0x1a, 0xb0, 0xa7, 0xb4, 0xd6, 0x9f, 0x15, 0x58, 0x2b, 0x6f, 0x42, 0x07, 0x36, 0xbc, 0xb2, 0x9e,
	0x32, 0x93, 0x4b, 0xf3, 0x27, 0x9b, 0x86, 0x74, 0x7b, 0x26, 0x53, 0x23, 0xd8, 0x70, 0x30, 0xc7,
	0x5d, 0x86, 0xb9, 0x2b, 0xb3, 0x59, 0xe9, 0x6c, 0xbf, 0x53, 0x93, 0xcc, 0x3d, 0xca, 0xfa, 0xee,
	0x0e, 0xe6, 0xd8, 0xc6, 0xdc, 0x9d, 0x1f, 0x08, 0xc1, 0x33, 0x04, 0x6f, 0x61, 0x20, 0x9c, 0x42,
	0x79, 0x66, 0xba, 0xab, 0xef, 0x6d, 0xba, 0x5b, 0x5f, 0xc1, 0xd5, 0x85, 0x33, 0xaa, 0x37, 0xe1,
	0x12, 0x09, 0x1d, 0x77, 0x24, 0x6b, 0xb3, 0x6a, 0xad, 0x67, 0x89, 0x76, 0x39, 0x67, 0xc9, 0x6d,
	0xdd, 0xce, 0xc3, 0xad, 0xbf, 0x00, 0x5c, 0x3f, 0xfb, 0x52, 0xa8, 0xbb, 0x70, 0x85, 0xc5, 0x31,
	0xe9, 0x72, 0xcc, 0x7c, 0x97, 0x4b, 0x44, 0xc5, 0xfa, 0x44, 0xbc, 0x5b, 0xf6, 0xc1, 0xc1, 0xfe,
	0xa1, 0xdc, 0xcd, 0x12, 0x4d, 0x2d, 0xe6, 0x35, 0x8e, 0x89, 0x91, 0x4b, 0x75, 0x1b, 0x8a, 0x55,
	0xae, 0x98, 0x62, 0xa8, 0xe7, 0xc5, 0x2e, 0x97, 0x15, 0x9f, 0xc3, 0xdc, 0x91, 0xbb, 0x67, 0x30,
	0xb9, 0xb4, 0xc0, 0xe4, 0x0a, 0xf5, 0x0b, 0xd8, 0x88, 0xfb, 0x38, 0x9c, 0xd5, 0x70, 0x69, 0xbe,
	0xd5, 0x22, 0x24, 0x2b, 0xa3, 0xdb, 0x75, 0xf1, 0x2d, 0xcb, 0xf1, 0x1b, 0x80, 0x70, 0xf6, 0x26,
	0x89, 0xdb, 0xe3, 0x31, 0xdc, 0x97, 0x23, 0x99, 0x27, 0x73, 0x63, 0x36, 0x77, 0x65, 0x64, 0xa1,
	0x83, 0xe5, 0xe6, 0xc2, 0x34, 0x57, 0xfe, 0xcf, 0x69, 0xb6, 0x7e, 0x07, 0xcf, 0xc7, 0x08, 0xbc,
	0x18, 0x23, 0xf0, 0x72, 0x8c, 0x94, 0x57, 0x63, 0xa4, 0xbc, 0x1e, 0x23, 0xe5, 0xcd, 0x18, 0x29,
	0x6f, 0xc7, 0x08, 0x3c, 0x48, 0x11, 0x78, 0x98, 0x22, 0xe5, 0x71, 0x8a, 0xc0, 0x93, 0x14, 0x29,
	0x4f, 0x53, 0xa4, 0x3c, 0x4b, 0x91, 0xf2, 0x3c, 0x45, 0xe0, 0x45, 0x8a, 0xc0, 0xcb, 0x14, 0x29,
	0xaf, 0x52, 0x04, 0x5e, 0xa7, 0x48, 0x79, 0x93, 0x22, 0xf0, 0x36, 0x45, 0xca, 0x83, 0x09, 0x52,
	0x1e, 0x4e, 0x10, 0xf8, 0x65, 0x82, 0x94, 0x47, 0x13, 0x04, 0x7e, 0x9d, 0x20, 0xe5, 0xf1, 0x04,
	0x29, 0x4f, 0x26, 0x08, 0x3c, 0x9d, 0x20, 0xf0, 0x6c, 0x82, 0xc0, 0x8f, 0x5b, 0x3e, 0x35, 0xf9,
	0x91, 0xcb, 0x8f, 0x48, 0xe8, 0xc7, 0x66, 0xe8, 0xf2, 0x13, 0xca, 0x06, 0xed, 0xc5, 0x7f, 0x1e,
	0xd1, 0xc0, 0x6f, 0x73, 0x1e, 0x46, 0xbd, 0xde, 0xb2, 0x4c, 0x72, 0xfb, 0xdf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x48, 0xf1, 0xbc, 0x87, 0x9b, 0x08, 0x00, 0x00,
}
