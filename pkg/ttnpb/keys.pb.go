// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/keys.proto

package ttnpb // import "go.thethings.network/lorawan-stack/pkg/ttnpb"

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type KeyEnvelope struct {
	// The (encrypted) key.
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The label of the RFC 3394 key-encryption-key (KEK) that was used to encrypt the key.
	KEKLabel             string   `protobuf:"bytes,2,opt,name=kek_label,json=kekLabel,proto3" json:"kek_label,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyEnvelope) Reset()      { *m = KeyEnvelope{} }
func (*KeyEnvelope) ProtoMessage() {}
func (*KeyEnvelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_keys_c00360eac8cb235e, []int{0}
}
func (m *KeyEnvelope) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyEnvelope.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *KeyEnvelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyEnvelope.Merge(dst, src)
}
func (m *KeyEnvelope) XXX_Size() int {
	return m.Size()
}
func (m *KeyEnvelope) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_KeyEnvelope proto.InternalMessageInfo

func (m *KeyEnvelope) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *KeyEnvelope) GetKEKLabel() string {
	if m != nil {
		return m.KEKLabel
	}
	return ""
}

// Root keys for a LoRaWAN device.
// These are stored on the Join Server.
type RootKeys struct {
	// Join Server issued identifier for the root keys.
	RootKeyID string `protobuf:"bytes,1,opt,name=root_key_id,json=rootKeyId,proto3" json:"root_key_id,omitempty"`
	// The (encrypted) Application Key.
	AppKey *KeyEnvelope `protobuf:"bytes,2,opt,name=app_key,json=appKey,proto3" json:"app_key,omitempty"`
	// The (encrypted) Network Key.
	NwkKey               *KeyEnvelope `protobuf:"bytes,3,opt,name=nwk_key,json=nwkKey,proto3" json:"nwk_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *RootKeys) Reset()      { *m = RootKeys{} }
func (*RootKeys) ProtoMessage() {}
func (*RootKeys) Descriptor() ([]byte, []int) {
	return fileDescriptor_keys_c00360eac8cb235e, []int{1}
}
func (m *RootKeys) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RootKeys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RootKeys.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RootKeys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RootKeys.Merge(dst, src)
}
func (m *RootKeys) XXX_Size() int {
	return m.Size()
}
func (m *RootKeys) XXX_DiscardUnknown() {
	xxx_messageInfo_RootKeys.DiscardUnknown(m)
}

var xxx_messageInfo_RootKeys proto.InternalMessageInfo

func (m *RootKeys) GetRootKeyID() string {
	if m != nil {
		return m.RootKeyID
	}
	return ""
}

func (m *RootKeys) GetAppKey() *KeyEnvelope {
	if m != nil {
		return m.AppKey
	}
	return nil
}

func (m *RootKeys) GetNwkKey() *KeyEnvelope {
	if m != nil {
		return m.NwkKey
	}
	return nil
}

// Session keys for a LoRaWAN session.
// Only the components for which the keys were meant, will have the key-encryption-key (KEK) to decrypt the individual keys.
type SessionKeys struct {
	// Join Server issued identifier for the session keys.
	// This ID can be used to request the keys from the Join Server in case the are lost.
	SessionKeyID []byte `protobuf:"bytes,1,opt,name=session_key_id,json=sessionKeyId,proto3" json:"session_key_id,omitempty"`
	// The (encrypted) Forwarding Network Session Integrity Key (or Network Session Key in 1.0 compatibility mode).
	// This key is stored by the (forwarding) Network Server.
	FNwkSIntKey *KeyEnvelope `protobuf:"bytes,2,opt,name=f_nwk_s_int_key,json=fNwkSIntKey,proto3" json:"f_nwk_s_int_key,omitempty"`
	// The (encrypted) Serving Network Session Integrity Key.
	// This key is stored by the (serving) Network Server.
	SNwkSIntKey *KeyEnvelope `protobuf:"bytes,3,opt,name=s_nwk_s_int_key,json=sNwkSIntKey,proto3" json:"s_nwk_s_int_key,omitempty"`
	// The (encrypted) Network Session Encryption Key.
	// This key is stored by the (serving) Network Server.
	NwkSEncKey *KeyEnvelope `protobuf:"bytes,4,opt,name=nwk_s_enc_key,json=nwkSEncKey,proto3" json:"nwk_s_enc_key,omitempty"`
	// The (encrypted) Application Session Key.
	// This key is stored by the Application Server.
	AppSKey              *KeyEnvelope `protobuf:"bytes,5,opt,name=app_s_key,json=appSKey,proto3" json:"app_s_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SessionKeys) Reset()      { *m = SessionKeys{} }
func (*SessionKeys) ProtoMessage() {}
func (*SessionKeys) Descriptor() ([]byte, []int) {
	return fileDescriptor_keys_c00360eac8cb235e, []int{2}
}
func (m *SessionKeys) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionKeys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionKeys.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SessionKeys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionKeys.Merge(dst, src)
}
func (m *SessionKeys) XXX_Size() int {
	return m.Size()
}
func (m *SessionKeys) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionKeys.DiscardUnknown(m)
}

var xxx_messageInfo_SessionKeys proto.InternalMessageInfo

func (m *SessionKeys) GetSessionKeyID() []byte {
	if m != nil {
		return m.SessionKeyID
	}
	return nil
}

func (m *SessionKeys) GetFNwkSIntKey() *KeyEnvelope {
	if m != nil {
		return m.FNwkSIntKey
	}
	return nil
}

func (m *SessionKeys) GetSNwkSIntKey() *KeyEnvelope {
	if m != nil {
		return m.SNwkSIntKey
	}
	return nil
}

func (m *SessionKeys) GetNwkSEncKey() *KeyEnvelope {
	if m != nil {
		return m.NwkSEncKey
	}
	return nil
}

func (m *SessionKeys) GetAppSKey() *KeyEnvelope {
	if m != nil {
		return m.AppSKey
	}
	return nil
}

func init() {
	proto.RegisterType((*KeyEnvelope)(nil), "ttn.lorawan.v3.KeyEnvelope")
	golang_proto.RegisterType((*KeyEnvelope)(nil), "ttn.lorawan.v3.KeyEnvelope")
	proto.RegisterType((*RootKeys)(nil), "ttn.lorawan.v3.RootKeys")
	golang_proto.RegisterType((*RootKeys)(nil), "ttn.lorawan.v3.RootKeys")
	proto.RegisterType((*SessionKeys)(nil), "ttn.lorawan.v3.SessionKeys")
	golang_proto.RegisterType((*SessionKeys)(nil), "ttn.lorawan.v3.SessionKeys")
}
func (this *KeyEnvelope) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KeyEnvelope)
	if !ok {
		that2, ok := that.(KeyEnvelope)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Key, that1.Key) {
		return false
	}
	if this.KEKLabel != that1.KEKLabel {
		return false
	}
	return true
}
func (this *RootKeys) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RootKeys)
	if !ok {
		that2, ok := that.(RootKeys)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RootKeyID != that1.RootKeyID {
		return false
	}
	if !this.AppKey.Equal(that1.AppKey) {
		return false
	}
	if !this.NwkKey.Equal(that1.NwkKey) {
		return false
	}
	return true
}
func (this *SessionKeys) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SessionKeys)
	if !ok {
		that2, ok := that.(SessionKeys)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.SessionKeyID, that1.SessionKeyID) {
		return false
	}
	if !this.FNwkSIntKey.Equal(that1.FNwkSIntKey) {
		return false
	}
	if !this.SNwkSIntKey.Equal(that1.SNwkSIntKey) {
		return false
	}
	if !this.NwkSEncKey.Equal(that1.NwkSEncKey) {
		return false
	}
	if !this.AppSKey.Equal(that1.AppSKey) {
		return false
	}
	return true
}
func (m *KeyEnvelope) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyEnvelope) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintKeys(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.KEKLabel) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintKeys(dAtA, i, uint64(len(m.KEKLabel)))
		i += copy(dAtA[i:], m.KEKLabel)
	}
	return i, nil
}

func (m *RootKeys) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RootKeys) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RootKeyID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintKeys(dAtA, i, uint64(len(m.RootKeyID)))
		i += copy(dAtA[i:], m.RootKeyID)
	}
	if m.AppKey != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintKeys(dAtA, i, uint64(m.AppKey.Size()))
		n1, err := m.AppKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.NwkKey != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintKeys(dAtA, i, uint64(m.NwkKey.Size()))
		n2, err := m.NwkKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *SessionKeys) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionKeys) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SessionKeyID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintKeys(dAtA, i, uint64(len(m.SessionKeyID)))
		i += copy(dAtA[i:], m.SessionKeyID)
	}
	if m.FNwkSIntKey != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintKeys(dAtA, i, uint64(m.FNwkSIntKey.Size()))
		n3, err := m.FNwkSIntKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.SNwkSIntKey != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintKeys(dAtA, i, uint64(m.SNwkSIntKey.Size()))
		n4, err := m.SNwkSIntKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.NwkSEncKey != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintKeys(dAtA, i, uint64(m.NwkSEncKey.Size()))
		n5, err := m.NwkSEncKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.AppSKey != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintKeys(dAtA, i, uint64(m.AppSKey.Size()))
		n6, err := m.AppSKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func encodeVarintKeys(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedKeyEnvelope(r randyKeys, easy bool) *KeyEnvelope {
	this := &KeyEnvelope{}
	v1 := r.Intn(100)
	this.Key = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.Key[i] = byte(r.Intn(256))
	}
	this.KEKLabel = randStringKeys(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRootKeys(r randyKeys, easy bool) *RootKeys {
	this := &RootKeys{}
	this.RootKeyID = randStringKeys(r)
	if r.Intn(10) != 0 {
		this.AppKey = NewPopulatedKeyEnvelope(r, easy)
	}
	if r.Intn(10) != 0 {
		this.NwkKey = NewPopulatedKeyEnvelope(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyKeys interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneKeys(r randyKeys) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringKeys(r randyKeys) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneKeys(r)
	}
	return string(tmps)
}
func randUnrecognizedKeys(r randyKeys, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldKeys(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldKeys(dAtA []byte, r randyKeys, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateKeys(dAtA, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		dAtA = encodeVarintPopulateKeys(dAtA, uint64(v3))
	case 1:
		dAtA = encodeVarintPopulateKeys(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateKeys(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateKeys(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateKeys(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateKeys(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *KeyEnvelope) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovKeys(uint64(l))
	}
	l = len(m.KEKLabel)
	if l > 0 {
		n += 1 + l + sovKeys(uint64(l))
	}
	return n
}

func (m *RootKeys) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RootKeyID)
	if l > 0 {
		n += 1 + l + sovKeys(uint64(l))
	}
	if m.AppKey != nil {
		l = m.AppKey.Size()
		n += 1 + l + sovKeys(uint64(l))
	}
	if m.NwkKey != nil {
		l = m.NwkKey.Size()
		n += 1 + l + sovKeys(uint64(l))
	}
	return n
}

func (m *SessionKeys) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionKeyID)
	if l > 0 {
		n += 1 + l + sovKeys(uint64(l))
	}
	if m.FNwkSIntKey != nil {
		l = m.FNwkSIntKey.Size()
		n += 1 + l + sovKeys(uint64(l))
	}
	if m.SNwkSIntKey != nil {
		l = m.SNwkSIntKey.Size()
		n += 1 + l + sovKeys(uint64(l))
	}
	if m.NwkSEncKey != nil {
		l = m.NwkSEncKey.Size()
		n += 1 + l + sovKeys(uint64(l))
	}
	if m.AppSKey != nil {
		l = m.AppSKey.Size()
		n += 1 + l + sovKeys(uint64(l))
	}
	return n
}

func sovKeys(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozKeys(x uint64) (n int) {
	return sovKeys((x << 1) ^ uint64((int64(x) >> 63)))
}
func (this *KeyEnvelope) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KeyEnvelope{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`KEKLabel:` + fmt.Sprintf("%v", this.KEKLabel) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RootKeys) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RootKeys{`,
		`RootKeyID:` + fmt.Sprintf("%v", this.RootKeyID) + `,`,
		`AppKey:` + strings.Replace(fmt.Sprintf("%v", this.AppKey), "KeyEnvelope", "KeyEnvelope", 1) + `,`,
		`NwkKey:` + strings.Replace(fmt.Sprintf("%v", this.NwkKey), "KeyEnvelope", "KeyEnvelope", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SessionKeys) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SessionKeys{`,
		`SessionKeyID:` + fmt.Sprintf("%v", this.SessionKeyID) + `,`,
		`FNwkSIntKey:` + strings.Replace(fmt.Sprintf("%v", this.FNwkSIntKey), "KeyEnvelope", "KeyEnvelope", 1) + `,`,
		`SNwkSIntKey:` + strings.Replace(fmt.Sprintf("%v", this.SNwkSIntKey), "KeyEnvelope", "KeyEnvelope", 1) + `,`,
		`NwkSEncKey:` + strings.Replace(fmt.Sprintf("%v", this.NwkSEncKey), "KeyEnvelope", "KeyEnvelope", 1) + `,`,
		`AppSKey:` + strings.Replace(fmt.Sprintf("%v", this.AppSKey), "KeyEnvelope", "KeyEnvelope", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringKeys(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *KeyEnvelope) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyEnvelope: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyEnvelope: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeys
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KEKLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeys
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KEKLabel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RootKeys) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RootKeys: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RootKeys: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootKeyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeys
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootKeyID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeys
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppKey == nil {
				m.AppKey = &KeyEnvelope{}
			}
			if err := m.AppKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NwkKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeys
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NwkKey == nil {
				m.NwkKey = &KeyEnvelope{}
			}
			if err := m.NwkKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionKeys) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionKeys: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionKeys: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionKeyID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeys
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionKeyID = append(m.SessionKeyID[:0], dAtA[iNdEx:postIndex]...)
			if m.SessionKeyID == nil {
				m.SessionKeyID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FNwkSIntKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeys
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FNwkSIntKey == nil {
				m.FNwkSIntKey = &KeyEnvelope{}
			}
			if err := m.FNwkSIntKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SNwkSIntKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeys
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SNwkSIntKey == nil {
				m.SNwkSIntKey = &KeyEnvelope{}
			}
			if err := m.SNwkSIntKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NwkSEncKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeys
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NwkSEncKey == nil {
				m.NwkSEncKey = &KeyEnvelope{}
			}
			if err := m.NwkSEncKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppSKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeys
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppSKey == nil {
				m.AppSKey = &KeyEnvelope{}
			}
			if err := m.AppSKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipKeys(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowKeys
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeys
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeys
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthKeys
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowKeys
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipKeys(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthKeys = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowKeys   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("lorawan-stack/api/keys.proto", fileDescriptor_keys_c00360eac8cb235e) }
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/keys.proto", fileDescriptor_keys_c00360eac8cb235e)
}

var fileDescriptor_keys_c00360eac8cb235e = []byte{
	// 512 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x31, 0x4c, 0xdb, 0x4c,
	0x18, 0xbd, 0x03, 0x7e, 0x7e, 0x7c, 0x0e, 0x14, 0x79, 0x42, 0x6d, 0xf5, 0x05, 0x65, 0xa2, 0x52,
	0x63, 0x4b, 0xa5, 0x6a, 0xa5, 0x0e, 0x95, 0x1a, 0x91, 0x21, 0x75, 0xd5, 0xc1, 0xd9, 0xba, 0x44,
	0x4e, 0x72, 0x71, 0xac, 0x4b, 0xef, 0xac, 0xdc, 0x81, 0xe5, 0x8d, 0x91, 0xb1, 0x63, 0x47, 0x54,
	0xa9, 0x12, 0x23, 0x63, 0x46, 0x46, 0xd4, 0x89, 0x91, 0x29, 0xc2, 0xe7, 0x85, 0x91, 0x91, 0xb1,
	0xf2, 0x25, 0x12, 0xa1, 0x0b, 0xd9, 0xde, 0xb3, 0xde, 0x7b, 0xdf, 0xfb, 0x7c, 0x77, 0xe4, 0xe5,
	0x48, 0x8c, 0xc3, 0x34, 0xe4, 0x75, 0xa9, 0xc2, 0x1e, 0xf3, 0xc2, 0x24, 0xf6, 0x18, 0xcd, 0xa4,
	0x9b, 0x8c, 0x85, 0x12, 0xce, 0x96, 0x52, 0xdc, 0x9d, 0x2b, 0xdc, 0xa3, 0xfd, 0xe7, 0xf5, 0x28,
	0x56, 0xc3, 0xc3, 0xae, 0xdb, 0x13, 0xdf, 0xbd, 0x48, 0x44, 0xc2, 0x33, 0xb2, 0xee, 0xe1, 0xc0,
	0x30, 0x43, 0x0c, 0x9a, 0xd9, 0x6b, 0x9f, 0x89, 0xed, 0xd3, 0xac, 0xc9, 0x8f, 0xe8, 0x48, 0x24,
	0xd4, 0xd9, 0x26, 0xab, 0x8c, 0x66, 0x3b, 0x78, 0x17, 0xef, 0x55, 0x82, 0x12, 0x3a, 0xaf, 0x88,
	0xc5, 0x28, 0xeb, 0x8c, 0xc2, 0x2e, 0x1d, 0xed, 0xac, 0xec, 0xe2, 0x3d, 0xab, 0x51, 0xd1, 0xd3,
	0xea, 0x86, 0xdf, 0xf4, 0xbf, 0x94, 0xdf, 0x82, 0x0d, 0x46, 0x99, 0x41, 0xb5, 0xdf, 0x98, 0x6c,
	0x04, 0x42, 0x28, 0x9f, 0x66, 0xd2, 0xa9, 0x13, 0x7b, 0x2c, 0x84, 0xea, 0x30, 0x9a, 0x75, 0xe2,
	0xbe, 0x49, 0xb4, 0x1a, 0x9b, 0x7a, 0x5a, 0xb5, 0xe6, 0x92, 0xd6, 0x41, 0x60, 0x8d, 0xe7, 0xb0,
	0xef, 0xbc, 0x25, 0xff, 0x87, 0x49, 0x52, 0xaa, 0xcd, 0x10, 0xfb, 0xcd, 0x0b, 0xf7, 0xf1, 0x62,
	0xee, 0x42, 0xcd, 0x60, 0x3d, 0x4c, 0x12, 0x9f, 0x66, 0xa5, 0x8b, 0xa7, 0xcc, 0xb8, 0x56, 0x97,
	0x70, 0xf1, 0x94, 0xf9, 0x34, 0xab, 0xfd, 0x59, 0x21, 0x76, 0x9b, 0x4a, 0x19, 0x0b, 0x6e, 0xaa,
	0xbe, 0x23, 0x5b, 0x72, 0x46, 0x17, 0xdb, 0x56, 0x1a, 0xdb, 0x7a, 0x5a, 0xad, 0x3c, 0x08, 0x5b,
	0x07, 0x41, 0x45, 0x3e, 0xb0, 0xbe, 0xf3, 0x89, 0x3c, 0x1b, 0x74, 0xca, 0xf9, 0xb2, 0x13, 0x73,
	0xb5, 0x6c, 0x77, 0x7b, 0xf0, 0x35, 0x65, 0xed, 0x16, 0x2f, 0x17, 0x2f, 0x23, 0xe4, 0x3f, 0x11,
	0x4b, 0x2c, 0x62, 0xcb, 0x85, 0x88, 0x8f, 0x64, 0x73, 0x16, 0x40, 0x79, 0xcf, 0x04, 0xac, 0x3d,
	0x1d, 0x40, 0x78, 0xca, 0xda, 0x4d, 0xde, 0x2b, 0xfd, 0xef, 0x89, 0x55, 0xfe, 0x79, 0x69, 0xbc,
	0xff, 0x3d, 0xed, 0x2d, 0xcf, 0xa9, 0xed, 0xd3, 0xec, 0xc3, 0xda, 0xe4, 0xb4, 0x8a, 0x1a, 0xbf,
	0xf0, 0x65, 0x0e, 0xf8, 0x2a, 0x07, 0x7c, 0x9d, 0x03, 0xba, 0xc9, 0x01, 0xdd, 0xe6, 0x80, 0xee,
	0x72, 0x40, 0xf7, 0x39, 0xe0, 0x63, 0x0d, 0xf8, 0x44, 0x03, 0x3a, 0xd3, 0x80, 0xcf, 0x35, 0xa0,
	0x89, 0x06, 0x74, 0xa1, 0x01, 0x5d, 0x6a, 0xc0, 0x57, 0x1a, 0xf0, 0xb5, 0x06, 0x74, 0xa3, 0x01,
	0xdf, 0x6a, 0x40, 0x77, 0x1a, 0xf0, 0xbd, 0x06, 0x74, 0x5c, 0x00, 0x3a, 0x29, 0x00, 0xff, 0x28,
	0x00, 0xfd, 0x2c, 0x00, 0x9f, 0x16, 0x80, 0xce, 0x0a, 0x40, 0xe7, 0x05, 0xe0, 0x49, 0x01, 0xf8,
	0xa2, 0x00, 0xfc, 0xed, 0x75, 0x24, 0x5c, 0x35, 0xa4, 0x6a, 0x18, 0xf3, 0x48, 0xba, 0x9c, 0xaa,
	0x54, 0x8c, 0x99, 0xf7, 0xf8, 0xa5, 0x24, 0x2c, 0xf2, 0x94, 0xe2, 0x49, 0xb7, 0xbb, 0x6e, 0x2e,
	0xfb, 0xfe, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2e, 0xea, 0xdd, 0xde, 0x4b, 0x03, 0x00, 0x00,
}
