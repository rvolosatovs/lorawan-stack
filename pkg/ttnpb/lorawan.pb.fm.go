// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import (
	fmt "fmt"
	time "time"

	go_thethings_network_lorawan_stack_pkg_types "go.thethings.network/lorawan-stack/pkg/types"
)

var MessageFieldPathsNested = []string{
	"Payload",
	"Payload.join_accept_payload",
	"Payload.join_accept_payload.cf_list",
	"Payload.join_accept_payload.cf_list.ch_masks",
	"Payload.join_accept_payload.cf_list.freq",
	"Payload.join_accept_payload.cf_list.type",
	"Payload.join_accept_payload.dev_addr",
	"Payload.join_accept_payload.dl_settings",
	"Payload.join_accept_payload.dl_settings.opt_neg",
	"Payload.join_accept_payload.dl_settings.rx1_dr_offset",
	"Payload.join_accept_payload.dl_settings.rx2_dr",
	"Payload.join_accept_payload.encrypted",
	"Payload.join_accept_payload.join_nonce",
	"Payload.join_accept_payload.net_id",
	"Payload.join_accept_payload.rx_delay",
	"Payload.join_request_payload",
	"Payload.join_request_payload.dev_eui",
	"Payload.join_request_payload.dev_nonce",
	"Payload.join_request_payload.join_eui",
	"Payload.mac_payload",
	"Payload.mac_payload.decoded_payload",
	"Payload.mac_payload.f_hdr",
	"Payload.mac_payload.f_hdr.dev_addr",
	"Payload.mac_payload.f_hdr.f_cnt",
	"Payload.mac_payload.f_hdr.f_ctrl",
	"Payload.mac_payload.f_hdr.f_ctrl.ack",
	"Payload.mac_payload.f_hdr.f_ctrl.adr",
	"Payload.mac_payload.f_hdr.f_ctrl.adr_ack_req",
	"Payload.mac_payload.f_hdr.f_ctrl.class_b",
	"Payload.mac_payload.f_hdr.f_ctrl.f_pending",
	"Payload.mac_payload.f_hdr.f_opts",
	"Payload.mac_payload.f_port",
	"Payload.mac_payload.frm_payload",
	"Payload.rejoin_request_payload",
	"Payload.rejoin_request_payload.dev_eui",
	"Payload.rejoin_request_payload.join_eui",
	"Payload.rejoin_request_payload.net_id",
	"Payload.rejoin_request_payload.rejoin_cnt",
	"Payload.rejoin_request_payload.rejoin_type",
	"m_hdr",
	"m_hdr.m_type",
	"m_hdr.major",
	"mic",
}

var MessageFieldPathsTopLevel = []string{
	"Payload",
	"m_hdr",
	"mic",
}

func (dst *Message) SetFields(src *Message, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "m_hdr":
			if len(subs) > 0 {
				newDst := &dst.MHDR
				var newSrc *MHDR
				if src != nil {
					newSrc = &src.MHDR
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.MHDR = src.MHDR
				} else {
					var zero MHDR
					dst.MHDR = zero
				}
			}
		case "mic":
			if len(subs) > 0 {
				return fmt.Errorf("'mic' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.MIC = src.MIC
			} else {
				var zero []byte
				dst.MIC = zero
			}

		case "Payload":
			if len(subs) == 0 && src == nil {
				dst.Payload = nil
				continue
			} else if len(subs) == 0 {
				dst.Payload = src.Payload
				continue
			}

			subPathMap := _processPaths(subs)
			if len(subPathMap) > 1 {
				return fmt.Errorf("more than one field specified for oneof field '%s'", name)
			}
			for oneofName, oneofSubs := range subPathMap {
				switch oneofName {
				case "mac_payload":
					if _, ok := dst.Payload.(*Message_MACPayload); !ok {
						dst.Payload = &Message_MACPayload{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Payload.(*Message_MACPayload).MACPayload
						if newDst == nil {
							newDst = &MACPayload{}
							dst.Payload.(*Message_MACPayload).MACPayload = newDst
						}
						var newSrc *MACPayload
						if src != nil {
							newSrc = src.GetMACPayload()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Payload.(*Message_MACPayload).MACPayload = src.GetMACPayload()
						} else {
							dst.Payload.(*Message_MACPayload).MACPayload = nil
						}
					}
				case "join_request_payload":
					if _, ok := dst.Payload.(*Message_JoinRequestPayload); !ok {
						dst.Payload = &Message_JoinRequestPayload{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Payload.(*Message_JoinRequestPayload).JoinRequestPayload
						if newDst == nil {
							newDst = &JoinRequestPayload{}
							dst.Payload.(*Message_JoinRequestPayload).JoinRequestPayload = newDst
						}
						var newSrc *JoinRequestPayload
						if src != nil {
							newSrc = src.GetJoinRequestPayload()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Payload.(*Message_JoinRequestPayload).JoinRequestPayload = src.GetJoinRequestPayload()
						} else {
							dst.Payload.(*Message_JoinRequestPayload).JoinRequestPayload = nil
						}
					}
				case "join_accept_payload":
					if _, ok := dst.Payload.(*Message_JoinAcceptPayload); !ok {
						dst.Payload = &Message_JoinAcceptPayload{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload
						if newDst == nil {
							newDst = &JoinAcceptPayload{}
							dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload = newDst
						}
						var newSrc *JoinAcceptPayload
						if src != nil {
							newSrc = src.GetJoinAcceptPayload()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload = src.GetJoinAcceptPayload()
						} else {
							dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload = nil
						}
					}
				case "rejoin_request_payload":
					if _, ok := dst.Payload.(*Message_RejoinRequestPayload); !ok {
						dst.Payload = &Message_RejoinRequestPayload{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Payload.(*Message_RejoinRequestPayload).RejoinRequestPayload
						if newDst == nil {
							newDst = &RejoinRequestPayload{}
							dst.Payload.(*Message_RejoinRequestPayload).RejoinRequestPayload = newDst
						}
						var newSrc *RejoinRequestPayload
						if src != nil {
							newSrc = src.GetRejoinRequestPayload()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Payload.(*Message_RejoinRequestPayload).RejoinRequestPayload = src.GetRejoinRequestPayload()
						} else {
							dst.Payload.(*Message_RejoinRequestPayload).RejoinRequestPayload = nil
						}
					}

				default:
					return fmt.Errorf("invalid oneof field: '%s.%s'", name, oneofName)
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var MHDRFieldPathsNested = []string{
	"m_type",
	"major",
}

var MHDRFieldPathsTopLevel = []string{
	"m_type",
	"major",
}

func (dst *MHDR) SetFields(src *MHDR, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "m_type":
			if len(subs) > 0 {
				return fmt.Errorf("'m_type' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.MType = src.MType
			} else {
				var zero MType
				dst.MType = zero
			}
		case "major":
			if len(subs) > 0 {
				return fmt.Errorf("'major' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Major = src.Major
			} else {
				var zero Major
				dst.Major = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var MACPayloadFieldPathsNested = []string{
	"decoded_payload",
	"f_hdr",
	"f_hdr.dev_addr",
	"f_hdr.f_cnt",
	"f_hdr.f_ctrl",
	"f_hdr.f_ctrl.ack",
	"f_hdr.f_ctrl.adr",
	"f_hdr.f_ctrl.adr_ack_req",
	"f_hdr.f_ctrl.class_b",
	"f_hdr.f_ctrl.f_pending",
	"f_hdr.f_opts",
	"f_port",
	"frm_payload",
}

var MACPayloadFieldPathsTopLevel = []string{
	"decoded_payload",
	"f_hdr",
	"f_port",
	"frm_payload",
}

func (dst *MACPayload) SetFields(src *MACPayload, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "f_hdr":
			if len(subs) > 0 {
				newDst := &dst.FHDR
				var newSrc *FHDR
				if src != nil {
					newSrc = &src.FHDR
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.FHDR = src.FHDR
				} else {
					var zero FHDR
					dst.FHDR = zero
				}
			}
		case "f_port":
			if len(subs) > 0 {
				return fmt.Errorf("'f_port' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FPort = src.FPort
			} else {
				var zero uint32
				dst.FPort = zero
			}
		case "frm_payload":
			if len(subs) > 0 {
				return fmt.Errorf("'frm_payload' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FRMPayload = src.FRMPayload
			} else {
				var zero []byte
				dst.FRMPayload = zero
			}
		case "decoded_payload":
			if len(subs) > 0 {
				return fmt.Errorf("'decoded_payload' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DecodedPayload = src.DecodedPayload
			} else {
				dst.DecodedPayload = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var FHDRFieldPathsNested = []string{
	"dev_addr",
	"f_cnt",
	"f_ctrl",
	"f_ctrl.ack",
	"f_ctrl.adr",
	"f_ctrl.adr_ack_req",
	"f_ctrl.class_b",
	"f_ctrl.f_pending",
	"f_opts",
}

var FHDRFieldPathsTopLevel = []string{
	"dev_addr",
	"f_cnt",
	"f_ctrl",
	"f_opts",
}

func (dst *FHDR) SetFields(src *FHDR, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "dev_addr":
			if len(subs) > 0 {
				return fmt.Errorf("'dev_addr' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DevAddr = src.DevAddr
			} else {
				var zero go_thethings_network_lorawan_stack_pkg_types.DevAddr
				dst.DevAddr = zero
			}
		case "f_ctrl":
			if len(subs) > 0 {
				newDst := &dst.FCtrl
				var newSrc *FCtrl
				if src != nil {
					newSrc = &src.FCtrl
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.FCtrl = src.FCtrl
				} else {
					var zero FCtrl
					dst.FCtrl = zero
				}
			}
		case "f_cnt":
			if len(subs) > 0 {
				return fmt.Errorf("'f_cnt' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FCnt = src.FCnt
			} else {
				var zero uint32
				dst.FCnt = zero
			}
		case "f_opts":
			if len(subs) > 0 {
				return fmt.Errorf("'f_opts' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FOpts = src.FOpts
			} else {
				var zero []byte
				dst.FOpts = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var FCtrlFieldPathsNested = []string{
	"ack",
	"adr",
	"adr_ack_req",
	"class_b",
	"f_pending",
}

var FCtrlFieldPathsTopLevel = []string{
	"ack",
	"adr",
	"adr_ack_req",
	"class_b",
	"f_pending",
}

func (dst *FCtrl) SetFields(src *FCtrl, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "adr":
			if len(subs) > 0 {
				return fmt.Errorf("'adr' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ADR = src.ADR
			} else {
				var zero bool
				dst.ADR = zero
			}
		case "adr_ack_req":
			if len(subs) > 0 {
				return fmt.Errorf("'adr_ack_req' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ADRAckReq = src.ADRAckReq
			} else {
				var zero bool
				dst.ADRAckReq = zero
			}
		case "ack":
			if len(subs) > 0 {
				return fmt.Errorf("'ack' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Ack = src.Ack
			} else {
				var zero bool
				dst.Ack = zero
			}
		case "f_pending":
			if len(subs) > 0 {
				return fmt.Errorf("'f_pending' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FPending = src.FPending
			} else {
				var zero bool
				dst.FPending = zero
			}
		case "class_b":
			if len(subs) > 0 {
				return fmt.Errorf("'class_b' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ClassB = src.ClassB
			} else {
				var zero bool
				dst.ClassB = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var JoinRequestPayloadFieldPathsNested = []string{
	"dev_eui",
	"dev_nonce",
	"join_eui",
}

var JoinRequestPayloadFieldPathsTopLevel = []string{
	"dev_eui",
	"dev_nonce",
	"join_eui",
}

func (dst *JoinRequestPayload) SetFields(src *JoinRequestPayload, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "join_eui":
			if len(subs) > 0 {
				return fmt.Errorf("'join_eui' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.JoinEUI = src.JoinEUI
			} else {
				var zero go_thethings_network_lorawan_stack_pkg_types.EUI64
				dst.JoinEUI = zero
			}
		case "dev_eui":
			if len(subs) > 0 {
				return fmt.Errorf("'dev_eui' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DevEUI = src.DevEUI
			} else {
				var zero go_thethings_network_lorawan_stack_pkg_types.EUI64
				dst.DevEUI = zero
			}
		case "dev_nonce":
			if len(subs) > 0 {
				return fmt.Errorf("'dev_nonce' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DevNonce = src.DevNonce
			} else {
				var zero go_thethings_network_lorawan_stack_pkg_types.DevNonce
				dst.DevNonce = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var RejoinRequestPayloadFieldPathsNested = []string{
	"dev_eui",
	"join_eui",
	"net_id",
	"rejoin_cnt",
	"rejoin_type",
}

var RejoinRequestPayloadFieldPathsTopLevel = []string{
	"dev_eui",
	"join_eui",
	"net_id",
	"rejoin_cnt",
	"rejoin_type",
}

func (dst *RejoinRequestPayload) SetFields(src *RejoinRequestPayload, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "rejoin_type":
			if len(subs) > 0 {
				return fmt.Errorf("'rejoin_type' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.RejoinType = src.RejoinType
			} else {
				var zero RejoinType
				dst.RejoinType = zero
			}
		case "net_id":
			if len(subs) > 0 {
				return fmt.Errorf("'net_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.NetID = src.NetID
			} else {
				var zero go_thethings_network_lorawan_stack_pkg_types.NetID
				dst.NetID = zero
			}
		case "join_eui":
			if len(subs) > 0 {
				return fmt.Errorf("'join_eui' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.JoinEUI = src.JoinEUI
			} else {
				var zero go_thethings_network_lorawan_stack_pkg_types.EUI64
				dst.JoinEUI = zero
			}
		case "dev_eui":
			if len(subs) > 0 {
				return fmt.Errorf("'dev_eui' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DevEUI = src.DevEUI
			} else {
				var zero go_thethings_network_lorawan_stack_pkg_types.EUI64
				dst.DevEUI = zero
			}
		case "rejoin_cnt":
			if len(subs) > 0 {
				return fmt.Errorf("'rejoin_cnt' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.RejoinCnt = src.RejoinCnt
			} else {
				var zero uint32
				dst.RejoinCnt = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var JoinAcceptPayloadFieldPathsNested = []string{
	"cf_list",
	"cf_list.ch_masks",
	"cf_list.freq",
	"cf_list.type",
	"dev_addr",
	"dl_settings",
	"dl_settings.opt_neg",
	"dl_settings.rx1_dr_offset",
	"dl_settings.rx2_dr",
	"encrypted",
	"join_nonce",
	"net_id",
	"rx_delay",
}

var JoinAcceptPayloadFieldPathsTopLevel = []string{
	"cf_list",
	"dev_addr",
	"dl_settings",
	"encrypted",
	"join_nonce",
	"net_id",
	"rx_delay",
}

func (dst *JoinAcceptPayload) SetFields(src *JoinAcceptPayload, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "encrypted":
			if len(subs) > 0 {
				return fmt.Errorf("'encrypted' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Encrypted = src.Encrypted
			} else {
				var zero []byte
				dst.Encrypted = zero
			}
		case "join_nonce":
			if len(subs) > 0 {
				return fmt.Errorf("'join_nonce' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.JoinNonce = src.JoinNonce
			} else {
				var zero go_thethings_network_lorawan_stack_pkg_types.JoinNonce
				dst.JoinNonce = zero
			}
		case "net_id":
			if len(subs) > 0 {
				return fmt.Errorf("'net_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.NetID = src.NetID
			} else {
				var zero go_thethings_network_lorawan_stack_pkg_types.NetID
				dst.NetID = zero
			}
		case "dev_addr":
			if len(subs) > 0 {
				return fmt.Errorf("'dev_addr' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DevAddr = src.DevAddr
			} else {
				var zero go_thethings_network_lorawan_stack_pkg_types.DevAddr
				dst.DevAddr = zero
			}
		case "dl_settings":
			if len(subs) > 0 {
				newDst := &dst.DLSettings
				var newSrc *DLSettings
				if src != nil {
					newSrc = &src.DLSettings
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.DLSettings = src.DLSettings
				} else {
					var zero DLSettings
					dst.DLSettings = zero
				}
			}
		case "rx_delay":
			if len(subs) > 0 {
				return fmt.Errorf("'rx_delay' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.RxDelay = src.RxDelay
			} else {
				var zero RxDelay
				dst.RxDelay = zero
			}
		case "cf_list":
			if len(subs) > 0 {
				newDst := dst.CFList
				if newDst == nil {
					newDst = &CFList{}
					dst.CFList = newDst
				}
				var newSrc *CFList
				if src != nil {
					newSrc = src.CFList
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.CFList = src.CFList
				} else {
					dst.CFList = nil
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var DLSettingsFieldPathsNested = []string{
	"opt_neg",
	"rx1_dr_offset",
	"rx2_dr",
}

var DLSettingsFieldPathsTopLevel = []string{
	"opt_neg",
	"rx1_dr_offset",
	"rx2_dr",
}

func (dst *DLSettings) SetFields(src *DLSettings, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "rx1_dr_offset":
			if len(subs) > 0 {
				return fmt.Errorf("'rx1_dr_offset' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Rx1DROffset = src.Rx1DROffset
			} else {
				var zero uint32
				dst.Rx1DROffset = zero
			}
		case "rx2_dr":
			if len(subs) > 0 {
				return fmt.Errorf("'rx2_dr' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Rx2DR = src.Rx2DR
			} else {
				var zero DataRateIndex
				dst.Rx2DR = zero
			}
		case "opt_neg":
			if len(subs) > 0 {
				return fmt.Errorf("'opt_neg' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.OptNeg = src.OptNeg
			} else {
				var zero bool
				dst.OptNeg = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var CFListFieldPathsNested = []string{
	"ch_masks",
	"freq",
	"type",
}

var CFListFieldPathsTopLevel = []string{
	"ch_masks",
	"freq",
	"type",
}

func (dst *CFList) SetFields(src *CFList, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "type":
			if len(subs) > 0 {
				return fmt.Errorf("'type' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Type = src.Type
			} else {
				var zero CFListType
				dst.Type = zero
			}
		case "freq":
			if len(subs) > 0 {
				return fmt.Errorf("'freq' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Freq = src.Freq
			} else {
				dst.Freq = nil
			}
		case "ch_masks":
			if len(subs) > 0 {
				return fmt.Errorf("'ch_masks' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ChMasks = src.ChMasks
			} else {
				dst.ChMasks = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var TxSettingsFieldPathsNested = []string{
	"bandwidth",
	"bit_rate",
	"channel_index",
	"coding_rate",
	"data_rate_index",
	"enable_crc",
	"frequency",
	"invert_polarization",
	"modulation",
	"spreading_factor",
	"time",
	"timestamp",
	"tx_power",
}

var TxSettingsFieldPathsTopLevel = []string{
	"bandwidth",
	"bit_rate",
	"channel_index",
	"coding_rate",
	"data_rate_index",
	"enable_crc",
	"frequency",
	"invert_polarization",
	"modulation",
	"spreading_factor",
	"time",
	"timestamp",
	"tx_power",
}

func (dst *TxSettings) SetFields(src *TxSettings, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "modulation":
			if len(subs) > 0 {
				return fmt.Errorf("'modulation' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Modulation = src.Modulation
			} else {
				var zero Modulation
				dst.Modulation = zero
			}
		case "data_rate_index":
			if len(subs) > 0 {
				return fmt.Errorf("'data_rate_index' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DataRateIndex = src.DataRateIndex
			} else {
				var zero DataRateIndex
				dst.DataRateIndex = zero
			}
		case "bandwidth":
			if len(subs) > 0 {
				return fmt.Errorf("'bandwidth' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Bandwidth = src.Bandwidth
			} else {
				var zero uint32
				dst.Bandwidth = zero
			}
		case "spreading_factor":
			if len(subs) > 0 {
				return fmt.Errorf("'spreading_factor' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.SpreadingFactor = src.SpreadingFactor
			} else {
				var zero uint32
				dst.SpreadingFactor = zero
			}
		case "bit_rate":
			if len(subs) > 0 {
				return fmt.Errorf("'bit_rate' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.BitRate = src.BitRate
			} else {
				var zero uint32
				dst.BitRate = zero
			}
		case "coding_rate":
			if len(subs) > 0 {
				return fmt.Errorf("'coding_rate' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.CodingRate = src.CodingRate
			} else {
				var zero string
				dst.CodingRate = zero
			}
		case "frequency":
			if len(subs) > 0 {
				return fmt.Errorf("'frequency' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Frequency = src.Frequency
			} else {
				var zero uint64
				dst.Frequency = zero
			}
		case "tx_power":
			if len(subs) > 0 {
				return fmt.Errorf("'tx_power' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.TxPower = src.TxPower
			} else {
				var zero int32
				dst.TxPower = zero
			}
		case "invert_polarization":
			if len(subs) > 0 {
				return fmt.Errorf("'invert_polarization' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.InvertPolarization = src.InvertPolarization
			} else {
				var zero bool
				dst.InvertPolarization = zero
			}
		case "channel_index":
			if len(subs) > 0 {
				return fmt.Errorf("'channel_index' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ChannelIndex = src.ChannelIndex
			} else {
				var zero uint32
				dst.ChannelIndex = zero
			}
		case "enable_crc":
			if len(subs) > 0 {
				return fmt.Errorf("'enable_crc' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.EnableCRC = src.EnableCRC
			} else {
				var zero bool
				dst.EnableCRC = zero
			}
		case "timestamp":
			if len(subs) > 0 {
				return fmt.Errorf("'timestamp' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Timestamp = src.Timestamp
			} else {
				var zero uint32
				dst.Timestamp = zero
			}
		case "time":
			if len(subs) > 0 {
				return fmt.Errorf("'time' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Time = src.Time
			} else {
				dst.Time = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var GatewayAntennaIdentifiersFieldPathsNested = []string{
	"antenna_index",
	"gateway_ids",
	"gateway_ids.eui",
	"gateway_ids.gateway_id",
}

var GatewayAntennaIdentifiersFieldPathsTopLevel = []string{
	"antenna_index",
	"gateway_ids",
}

func (dst *GatewayAntennaIdentifiers) SetFields(src *GatewayAntennaIdentifiers, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "gateway_ids":
			if len(subs) > 0 {
				newDst := &dst.GatewayIdentifiers
				var newSrc *GatewayIdentifiers
				if src != nil {
					newSrc = &src.GatewayIdentifiers
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.GatewayIdentifiers = src.GatewayIdentifiers
				} else {
					var zero GatewayIdentifiers
					dst.GatewayIdentifiers = zero
				}
			}
		case "antenna_index":
			if len(subs) > 0 {
				return fmt.Errorf("'antenna_index' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.AntennaIndex = src.AntennaIndex
			} else {
				var zero uint32
				dst.AntennaIndex = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var UplinkTokenFieldPathsNested = []string{
	"ids",
	"ids.antenna_index",
	"ids.gateway_ids",
	"ids.gateway_ids.eui",
	"ids.gateway_ids.gateway_id",
	"timestamp",
}

var UplinkTokenFieldPathsTopLevel = []string{
	"ids",
	"timestamp",
}

func (dst *UplinkToken) SetFields(src *UplinkToken, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "ids":
			if len(subs) > 0 {
				newDst := &dst.GatewayAntennaIdentifiers
				var newSrc *GatewayAntennaIdentifiers
				if src != nil {
					newSrc = &src.GatewayAntennaIdentifiers
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.GatewayAntennaIdentifiers = src.GatewayAntennaIdentifiers
				} else {
					var zero GatewayAntennaIdentifiers
					dst.GatewayAntennaIdentifiers = zero
				}
			}
		case "timestamp":
			if len(subs) > 0 {
				return fmt.Errorf("'timestamp' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Timestamp = src.Timestamp
			} else {
				var zero uint32
				dst.Timestamp = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var DownlinkPathFieldPathsNested = []string{
	"path",
	"path.fixed",
	"path.fixed.antenna_index",
	"path.fixed.gateway_ids",
	"path.fixed.gateway_ids.eui",
	"path.fixed.gateway_ids.gateway_id",
	"path.uplink_token",
}

var DownlinkPathFieldPathsTopLevel = []string{
	"path",
}

func (dst *DownlinkPath) SetFields(src *DownlinkPath, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {

		case "path":
			if len(subs) == 0 && src == nil {
				dst.Path = nil
				continue
			} else if len(subs) == 0 {
				dst.Path = src.Path
				continue
			}

			subPathMap := _processPaths(subs)
			if len(subPathMap) > 1 {
				return fmt.Errorf("more than one field specified for oneof field '%s'", name)
			}
			for oneofName, oneofSubs := range subPathMap {
				switch oneofName {
				case "uplink_token":
					if _, ok := dst.Path.(*DownlinkPath_UplinkToken); !ok {
						dst.Path = &DownlinkPath_UplinkToken{}
					}
					if len(oneofSubs) > 0 {
						return fmt.Errorf("'uplink_token' has no subfields, but %s were specified", oneofSubs)
					}
					if src != nil {
						dst.Path.(*DownlinkPath_UplinkToken).UplinkToken = src.GetUplinkToken()
					} else {
						var zero []byte
						dst.Path.(*DownlinkPath_UplinkToken).UplinkToken = zero
					}
				case "fixed":
					if _, ok := dst.Path.(*DownlinkPath_Fixed); !ok {
						dst.Path = &DownlinkPath_Fixed{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Path.(*DownlinkPath_Fixed).Fixed
						if newDst == nil {
							newDst = &GatewayAntennaIdentifiers{}
							dst.Path.(*DownlinkPath_Fixed).Fixed = newDst
						}
						var newSrc *GatewayAntennaIdentifiers
						if src != nil {
							newSrc = src.GetFixed()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Path.(*DownlinkPath_Fixed).Fixed = src.GetFixed()
						} else {
							dst.Path.(*DownlinkPath_Fixed).Fixed = nil
						}
					}

				default:
					return fmt.Errorf("invalid oneof field: '%s.%s'", name, oneofName)
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var TxRequestFieldPathsNested = []string{
	"absolute_time",
	"advanced",
	"class",
	"downlink_paths",
	"priority",
	"rx1_data_rate_index",
	"rx1_delay",
	"rx1_frequency",
	"rx2_data_rate_index",
	"rx2_frequency",
}

var TxRequestFieldPathsTopLevel = []string{
	"absolute_time",
	"advanced",
	"class",
	"downlink_paths",
	"priority",
	"rx1_data_rate_index",
	"rx1_delay",
	"rx1_frequency",
	"rx2_data_rate_index",
	"rx2_frequency",
}

func (dst *TxRequest) SetFields(src *TxRequest, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "class":
			if len(subs) > 0 {
				return fmt.Errorf("'class' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Class = src.Class
			} else {
				var zero Class
				dst.Class = zero
			}
		case "downlink_paths":
			if len(subs) > 0 {
				return fmt.Errorf("'downlink_paths' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DownlinkPaths = src.DownlinkPaths
			} else {
				dst.DownlinkPaths = nil
			}
		case "rx1_delay":
			if len(subs) > 0 {
				return fmt.Errorf("'rx1_delay' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Rx1Delay = src.Rx1Delay
			} else {
				var zero RxDelay
				dst.Rx1Delay = zero
			}
		case "rx1_data_rate_index":
			if len(subs) > 0 {
				return fmt.Errorf("'rx1_data_rate_index' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Rx1DataRateIndex = src.Rx1DataRateIndex
			} else {
				var zero DataRateIndex
				dst.Rx1DataRateIndex = zero
			}
		case "rx1_frequency":
			if len(subs) > 0 {
				return fmt.Errorf("'rx1_frequency' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Rx1Frequency = src.Rx1Frequency
			} else {
				var zero uint64
				dst.Rx1Frequency = zero
			}
		case "rx2_data_rate_index":
			if len(subs) > 0 {
				return fmt.Errorf("'rx2_data_rate_index' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Rx2DataRateIndex = src.Rx2DataRateIndex
			} else {
				var zero DataRateIndex
				dst.Rx2DataRateIndex = zero
			}
		case "rx2_frequency":
			if len(subs) > 0 {
				return fmt.Errorf("'rx2_frequency' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Rx2Frequency = src.Rx2Frequency
			} else {
				var zero uint64
				dst.Rx2Frequency = zero
			}
		case "priority":
			if len(subs) > 0 {
				return fmt.Errorf("'priority' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Priority = src.Priority
			} else {
				var zero TxSchedulePriority
				dst.Priority = zero
			}
		case "absolute_time":
			if len(subs) > 0 {
				return fmt.Errorf("'absolute_time' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.AbsoluteTime = src.AbsoluteTime
			} else {
				dst.AbsoluteTime = nil
			}
		case "advanced":
			if len(subs) > 0 {
				return fmt.Errorf("'advanced' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Advanced = src.Advanced
			} else {
				dst.Advanced = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var MACCommandFieldPathsNested = []string{
	"cid",
	"payload",
	"payload.adr_param_setup_req",
	"payload.adr_param_setup_req.adr_ack_delay_exponent",
	"payload.adr_param_setup_req.adr_ack_limit_exponent",
	"payload.beacon_freq_ans",
	"payload.beacon_freq_ans.frequency_ack",
	"payload.beacon_freq_req",
	"payload.beacon_freq_req.frequency",
	"payload.beacon_timing_ans",
	"payload.beacon_timing_ans.channel_index",
	"payload.beacon_timing_ans.delay",
	"payload.dev_status_ans",
	"payload.dev_status_ans.battery",
	"payload.dev_status_ans.margin",
	"payload.device_mode_conf",
	"payload.device_mode_conf.class",
	"payload.device_mode_ind",
	"payload.device_mode_ind.class",
	"payload.device_time_ans",
	"payload.device_time_ans.time",
	"payload.dl_channel_ans",
	"payload.dl_channel_ans.channel_index_ack",
	"payload.dl_channel_ans.frequency_ack",
	"payload.dl_channel_req",
	"payload.dl_channel_req.channel_index",
	"payload.dl_channel_req.frequency",
	"payload.duty_cycle_req",
	"payload.duty_cycle_req.max_duty_cycle",
	"payload.force_rejoin_req",
	"payload.force_rejoin_req.data_rate_index",
	"payload.force_rejoin_req.max_retries",
	"payload.force_rejoin_req.period_exponent",
	"payload.force_rejoin_req.rejoin_type",
	"payload.link_adr_ans",
	"payload.link_adr_ans.channel_mask_ack",
	"payload.link_adr_ans.data_rate_index_ack",
	"payload.link_adr_ans.tx_power_index_ack",
	"payload.link_adr_req",
	"payload.link_adr_req.channel_mask",
	"payload.link_adr_req.channel_mask_control",
	"payload.link_adr_req.data_rate_index",
	"payload.link_adr_req.nb_trans",
	"payload.link_adr_req.tx_power_index",
	"payload.link_check_ans",
	"payload.link_check_ans.gateway_count",
	"payload.link_check_ans.margin",
	"payload.new_channel_ans",
	"payload.new_channel_ans.data_rate_ack",
	"payload.new_channel_ans.frequency_ack",
	"payload.new_channel_req",
	"payload.new_channel_req.channel_index",
	"payload.new_channel_req.frequency",
	"payload.new_channel_req.max_data_rate_index",
	"payload.new_channel_req.min_data_rate_index",
	"payload.ping_slot_channel_ans",
	"payload.ping_slot_channel_ans.data_rate_index_ack",
	"payload.ping_slot_channel_ans.frequency_ack",
	"payload.ping_slot_channel_req",
	"payload.ping_slot_channel_req.data_rate_index",
	"payload.ping_slot_channel_req.frequency",
	"payload.ping_slot_info_req",
	"payload.ping_slot_info_req.period",
	"payload.raw_payload",
	"payload.rejoin_param_setup_ans",
	"payload.rejoin_param_setup_ans.max_time_exponent_ack",
	"payload.rejoin_param_setup_req",
	"payload.rejoin_param_setup_req.max_count_exponent",
	"payload.rejoin_param_setup_req.max_time_exponent",
	"payload.rekey_conf",
	"payload.rekey_conf.minor_version",
	"payload.rekey_ind",
	"payload.rekey_ind.minor_version",
	"payload.reset_conf",
	"payload.reset_conf.minor_version",
	"payload.reset_ind",
	"payload.reset_ind.minor_version",
	"payload.rx_param_setup_ans",
	"payload.rx_param_setup_ans.rx1_data_rate_offset_ack",
	"payload.rx_param_setup_ans.rx2_data_rate_index_ack",
	"payload.rx_param_setup_ans.rx2_frequency_ack",
	"payload.rx_param_setup_req",
	"payload.rx_param_setup_req.rx1_data_rate_offset",
	"payload.rx_param_setup_req.rx2_data_rate_index",
	"payload.rx_param_setup_req.rx2_frequency",
	"payload.rx_timing_setup_req",
	"payload.rx_timing_setup_req.delay",
	"payload.tx_param_setup_req",
	"payload.tx_param_setup_req.downlink_dwell_time",
	"payload.tx_param_setup_req.max_eirp_index",
	"payload.tx_param_setup_req.uplink_dwell_time",
}

var MACCommandFieldPathsTopLevel = []string{
	"cid",
	"payload",
}

func (dst *MACCommand) SetFields(src *MACCommand, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "cid":
			if len(subs) > 0 {
				return fmt.Errorf("'cid' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.CID = src.CID
			} else {
				var zero MACCommandIdentifier
				dst.CID = zero
			}

		case "payload":
			if len(subs) == 0 && src == nil {
				dst.Payload = nil
				continue
			} else if len(subs) == 0 {
				dst.Payload = src.Payload
				continue
			}

			subPathMap := _processPaths(subs)
			if len(subPathMap) > 1 {
				return fmt.Errorf("more than one field specified for oneof field '%s'", name)
			}
			for oneofName, oneofSubs := range subPathMap {
				switch oneofName {
				case "raw_payload":
					if _, ok := dst.Payload.(*MACCommand_RawPayload); !ok {
						dst.Payload = &MACCommand_RawPayload{}
					}
					if len(oneofSubs) > 0 {
						return fmt.Errorf("'raw_payload' has no subfields, but %s were specified", oneofSubs)
					}
					if src != nil {
						dst.Payload.(*MACCommand_RawPayload).RawPayload = src.GetRawPayload()
					} else {
						var zero []byte
						dst.Payload.(*MACCommand_RawPayload).RawPayload = zero
					}
				case "reset_ind":
					if _, ok := dst.Payload.(*MACCommand_ResetInd_); !ok {
						dst.Payload = &MACCommand_ResetInd_{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Payload.(*MACCommand_ResetInd_).ResetInd
						if newDst == nil {
							newDst = &MACCommand_ResetInd{}
							dst.Payload.(*MACCommand_ResetInd_).ResetInd = newDst
						}
						var newSrc *MACCommand_ResetInd
						if src != nil {
							newSrc = src.GetResetInd()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Payload.(*MACCommand_ResetInd_).ResetInd = src.GetResetInd()
						} else {
							dst.Payload.(*MACCommand_ResetInd_).ResetInd = nil
						}
					}
				case "reset_conf":
					if _, ok := dst.Payload.(*MACCommand_ResetConf_); !ok {
						dst.Payload = &MACCommand_ResetConf_{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Payload.(*MACCommand_ResetConf_).ResetConf
						if newDst == nil {
							newDst = &MACCommand_ResetConf{}
							dst.Payload.(*MACCommand_ResetConf_).ResetConf = newDst
						}
						var newSrc *MACCommand_ResetConf
						if src != nil {
							newSrc = src.GetResetConf()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Payload.(*MACCommand_ResetConf_).ResetConf = src.GetResetConf()
						} else {
							dst.Payload.(*MACCommand_ResetConf_).ResetConf = nil
						}
					}
				case "link_check_ans":
					if _, ok := dst.Payload.(*MACCommand_LinkCheckAns_); !ok {
						dst.Payload = &MACCommand_LinkCheckAns_{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Payload.(*MACCommand_LinkCheckAns_).LinkCheckAns
						if newDst == nil {
							newDst = &MACCommand_LinkCheckAns{}
							dst.Payload.(*MACCommand_LinkCheckAns_).LinkCheckAns = newDst
						}
						var newSrc *MACCommand_LinkCheckAns
						if src != nil {
							newSrc = src.GetLinkCheckAns()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Payload.(*MACCommand_LinkCheckAns_).LinkCheckAns = src.GetLinkCheckAns()
						} else {
							dst.Payload.(*MACCommand_LinkCheckAns_).LinkCheckAns = nil
						}
					}
				case "link_adr_req":
					if _, ok := dst.Payload.(*MACCommand_LinkADRReq_); !ok {
						dst.Payload = &MACCommand_LinkADRReq_{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Payload.(*MACCommand_LinkADRReq_).LinkADRReq
						if newDst == nil {
							newDst = &MACCommand_LinkADRReq{}
							dst.Payload.(*MACCommand_LinkADRReq_).LinkADRReq = newDst
						}
						var newSrc *MACCommand_LinkADRReq
						if src != nil {
							newSrc = src.GetLinkADRReq()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Payload.(*MACCommand_LinkADRReq_).LinkADRReq = src.GetLinkADRReq()
						} else {
							dst.Payload.(*MACCommand_LinkADRReq_).LinkADRReq = nil
						}
					}
				case "link_adr_ans":
					if _, ok := dst.Payload.(*MACCommand_LinkADRAns_); !ok {
						dst.Payload = &MACCommand_LinkADRAns_{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Payload.(*MACCommand_LinkADRAns_).LinkADRAns
						if newDst == nil {
							newDst = &MACCommand_LinkADRAns{}
							dst.Payload.(*MACCommand_LinkADRAns_).LinkADRAns = newDst
						}
						var newSrc *MACCommand_LinkADRAns
						if src != nil {
							newSrc = src.GetLinkADRAns()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Payload.(*MACCommand_LinkADRAns_).LinkADRAns = src.GetLinkADRAns()
						} else {
							dst.Payload.(*MACCommand_LinkADRAns_).LinkADRAns = nil
						}
					}
				case "duty_cycle_req":
					if _, ok := dst.Payload.(*MACCommand_DutyCycleReq_); !ok {
						dst.Payload = &MACCommand_DutyCycleReq_{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Payload.(*MACCommand_DutyCycleReq_).DutyCycleReq
						if newDst == nil {
							newDst = &MACCommand_DutyCycleReq{}
							dst.Payload.(*MACCommand_DutyCycleReq_).DutyCycleReq = newDst
						}
						var newSrc *MACCommand_DutyCycleReq
						if src != nil {
							newSrc = src.GetDutyCycleReq()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Payload.(*MACCommand_DutyCycleReq_).DutyCycleReq = src.GetDutyCycleReq()
						} else {
							dst.Payload.(*MACCommand_DutyCycleReq_).DutyCycleReq = nil
						}
					}
				case "rx_param_setup_req":
					if _, ok := dst.Payload.(*MACCommand_RxParamSetupReq_); !ok {
						dst.Payload = &MACCommand_RxParamSetupReq_{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Payload.(*MACCommand_RxParamSetupReq_).RxParamSetupReq
						if newDst == nil {
							newDst = &MACCommand_RxParamSetupReq{}
							dst.Payload.(*MACCommand_RxParamSetupReq_).RxParamSetupReq = newDst
						}
						var newSrc *MACCommand_RxParamSetupReq
						if src != nil {
							newSrc = src.GetRxParamSetupReq()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Payload.(*MACCommand_RxParamSetupReq_).RxParamSetupReq = src.GetRxParamSetupReq()
						} else {
							dst.Payload.(*MACCommand_RxParamSetupReq_).RxParamSetupReq = nil
						}
					}
				case "rx_param_setup_ans":
					if _, ok := dst.Payload.(*MACCommand_RxParamSetupAns_); !ok {
						dst.Payload = &MACCommand_RxParamSetupAns_{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Payload.(*MACCommand_RxParamSetupAns_).RxParamSetupAns
						if newDst == nil {
							newDst = &MACCommand_RxParamSetupAns{}
							dst.Payload.(*MACCommand_RxParamSetupAns_).RxParamSetupAns = newDst
						}
						var newSrc *MACCommand_RxParamSetupAns
						if src != nil {
							newSrc = src.GetRxParamSetupAns()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Payload.(*MACCommand_RxParamSetupAns_).RxParamSetupAns = src.GetRxParamSetupAns()
						} else {
							dst.Payload.(*MACCommand_RxParamSetupAns_).RxParamSetupAns = nil
						}
					}
				case "dev_status_ans":
					if _, ok := dst.Payload.(*MACCommand_DevStatusAns_); !ok {
						dst.Payload = &MACCommand_DevStatusAns_{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Payload.(*MACCommand_DevStatusAns_).DevStatusAns
						if newDst == nil {
							newDst = &MACCommand_DevStatusAns{}
							dst.Payload.(*MACCommand_DevStatusAns_).DevStatusAns = newDst
						}
						var newSrc *MACCommand_DevStatusAns
						if src != nil {
							newSrc = src.GetDevStatusAns()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Payload.(*MACCommand_DevStatusAns_).DevStatusAns = src.GetDevStatusAns()
						} else {
							dst.Payload.(*MACCommand_DevStatusAns_).DevStatusAns = nil
						}
					}
				case "new_channel_req":
					if _, ok := dst.Payload.(*MACCommand_NewChannelReq_); !ok {
						dst.Payload = &MACCommand_NewChannelReq_{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Payload.(*MACCommand_NewChannelReq_).NewChannelReq
						if newDst == nil {
							newDst = &MACCommand_NewChannelReq{}
							dst.Payload.(*MACCommand_NewChannelReq_).NewChannelReq = newDst
						}
						var newSrc *MACCommand_NewChannelReq
						if src != nil {
							newSrc = src.GetNewChannelReq()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Payload.(*MACCommand_NewChannelReq_).NewChannelReq = src.GetNewChannelReq()
						} else {
							dst.Payload.(*MACCommand_NewChannelReq_).NewChannelReq = nil
						}
					}
				case "new_channel_ans":
					if _, ok := dst.Payload.(*MACCommand_NewChannelAns_); !ok {
						dst.Payload = &MACCommand_NewChannelAns_{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Payload.(*MACCommand_NewChannelAns_).NewChannelAns
						if newDst == nil {
							newDst = &MACCommand_NewChannelAns{}
							dst.Payload.(*MACCommand_NewChannelAns_).NewChannelAns = newDst
						}
						var newSrc *MACCommand_NewChannelAns
						if src != nil {
							newSrc = src.GetNewChannelAns()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Payload.(*MACCommand_NewChannelAns_).NewChannelAns = src.GetNewChannelAns()
						} else {
							dst.Payload.(*MACCommand_NewChannelAns_).NewChannelAns = nil
						}
					}
				case "dl_channel_req":
					if _, ok := dst.Payload.(*MACCommand_DLChannelReq_); !ok {
						dst.Payload = &MACCommand_DLChannelReq_{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Payload.(*MACCommand_DLChannelReq_).DLChannelReq
						if newDst == nil {
							newDst = &MACCommand_DLChannelReq{}
							dst.Payload.(*MACCommand_DLChannelReq_).DLChannelReq = newDst
						}
						var newSrc *MACCommand_DLChannelReq
						if src != nil {
							newSrc = src.GetDLChannelReq()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Payload.(*MACCommand_DLChannelReq_).DLChannelReq = src.GetDLChannelReq()
						} else {
							dst.Payload.(*MACCommand_DLChannelReq_).DLChannelReq = nil
						}
					}
				case "dl_channel_ans":
					if _, ok := dst.Payload.(*MACCommand_DLChannelAns_); !ok {
						dst.Payload = &MACCommand_DLChannelAns_{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Payload.(*MACCommand_DLChannelAns_).DLChannelAns
						if newDst == nil {
							newDst = &MACCommand_DLChannelAns{}
							dst.Payload.(*MACCommand_DLChannelAns_).DLChannelAns = newDst
						}
						var newSrc *MACCommand_DLChannelAns
						if src != nil {
							newSrc = src.GetDLChannelAns()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Payload.(*MACCommand_DLChannelAns_).DLChannelAns = src.GetDLChannelAns()
						} else {
							dst.Payload.(*MACCommand_DLChannelAns_).DLChannelAns = nil
						}
					}
				case "rx_timing_setup_req":
					if _, ok := dst.Payload.(*MACCommand_RxTimingSetupReq_); !ok {
						dst.Payload = &MACCommand_RxTimingSetupReq_{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Payload.(*MACCommand_RxTimingSetupReq_).RxTimingSetupReq
						if newDst == nil {
							newDst = &MACCommand_RxTimingSetupReq{}
							dst.Payload.(*MACCommand_RxTimingSetupReq_).RxTimingSetupReq = newDst
						}
						var newSrc *MACCommand_RxTimingSetupReq
						if src != nil {
							newSrc = src.GetRxTimingSetupReq()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Payload.(*MACCommand_RxTimingSetupReq_).RxTimingSetupReq = src.GetRxTimingSetupReq()
						} else {
							dst.Payload.(*MACCommand_RxTimingSetupReq_).RxTimingSetupReq = nil
						}
					}
				case "tx_param_setup_req":
					if _, ok := dst.Payload.(*MACCommand_TxParamSetupReq_); !ok {
						dst.Payload = &MACCommand_TxParamSetupReq_{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Payload.(*MACCommand_TxParamSetupReq_).TxParamSetupReq
						if newDst == nil {
							newDst = &MACCommand_TxParamSetupReq{}
							dst.Payload.(*MACCommand_TxParamSetupReq_).TxParamSetupReq = newDst
						}
						var newSrc *MACCommand_TxParamSetupReq
						if src != nil {
							newSrc = src.GetTxParamSetupReq()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Payload.(*MACCommand_TxParamSetupReq_).TxParamSetupReq = src.GetTxParamSetupReq()
						} else {
							dst.Payload.(*MACCommand_TxParamSetupReq_).TxParamSetupReq = nil
						}
					}
				case "rekey_ind":
					if _, ok := dst.Payload.(*MACCommand_RekeyInd_); !ok {
						dst.Payload = &MACCommand_RekeyInd_{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Payload.(*MACCommand_RekeyInd_).RekeyInd
						if newDst == nil {
							newDst = &MACCommand_RekeyInd{}
							dst.Payload.(*MACCommand_RekeyInd_).RekeyInd = newDst
						}
						var newSrc *MACCommand_RekeyInd
						if src != nil {
							newSrc = src.GetRekeyInd()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Payload.(*MACCommand_RekeyInd_).RekeyInd = src.GetRekeyInd()
						} else {
							dst.Payload.(*MACCommand_RekeyInd_).RekeyInd = nil
						}
					}
				case "rekey_conf":
					if _, ok := dst.Payload.(*MACCommand_RekeyConf_); !ok {
						dst.Payload = &MACCommand_RekeyConf_{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Payload.(*MACCommand_RekeyConf_).RekeyConf
						if newDst == nil {
							newDst = &MACCommand_RekeyConf{}
							dst.Payload.(*MACCommand_RekeyConf_).RekeyConf = newDst
						}
						var newSrc *MACCommand_RekeyConf
						if src != nil {
							newSrc = src.GetRekeyConf()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Payload.(*MACCommand_RekeyConf_).RekeyConf = src.GetRekeyConf()
						} else {
							dst.Payload.(*MACCommand_RekeyConf_).RekeyConf = nil
						}
					}
				case "adr_param_setup_req":
					if _, ok := dst.Payload.(*MACCommand_ADRParamSetupReq_); !ok {
						dst.Payload = &MACCommand_ADRParamSetupReq_{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Payload.(*MACCommand_ADRParamSetupReq_).ADRParamSetupReq
						if newDst == nil {
							newDst = &MACCommand_ADRParamSetupReq{}
							dst.Payload.(*MACCommand_ADRParamSetupReq_).ADRParamSetupReq = newDst
						}
						var newSrc *MACCommand_ADRParamSetupReq
						if src != nil {
							newSrc = src.GetADRParamSetupReq()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Payload.(*MACCommand_ADRParamSetupReq_).ADRParamSetupReq = src.GetADRParamSetupReq()
						} else {
							dst.Payload.(*MACCommand_ADRParamSetupReq_).ADRParamSetupReq = nil
						}
					}
				case "device_time_ans":
					if _, ok := dst.Payload.(*MACCommand_DeviceTimeAns_); !ok {
						dst.Payload = &MACCommand_DeviceTimeAns_{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Payload.(*MACCommand_DeviceTimeAns_).DeviceTimeAns
						if newDst == nil {
							newDst = &MACCommand_DeviceTimeAns{}
							dst.Payload.(*MACCommand_DeviceTimeAns_).DeviceTimeAns = newDst
						}
						var newSrc *MACCommand_DeviceTimeAns
						if src != nil {
							newSrc = src.GetDeviceTimeAns()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Payload.(*MACCommand_DeviceTimeAns_).DeviceTimeAns = src.GetDeviceTimeAns()
						} else {
							dst.Payload.(*MACCommand_DeviceTimeAns_).DeviceTimeAns = nil
						}
					}
				case "force_rejoin_req":
					if _, ok := dst.Payload.(*MACCommand_ForceRejoinReq_); !ok {
						dst.Payload = &MACCommand_ForceRejoinReq_{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Payload.(*MACCommand_ForceRejoinReq_).ForceRejoinReq
						if newDst == nil {
							newDst = &MACCommand_ForceRejoinReq{}
							dst.Payload.(*MACCommand_ForceRejoinReq_).ForceRejoinReq = newDst
						}
						var newSrc *MACCommand_ForceRejoinReq
						if src != nil {
							newSrc = src.GetForceRejoinReq()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Payload.(*MACCommand_ForceRejoinReq_).ForceRejoinReq = src.GetForceRejoinReq()
						} else {
							dst.Payload.(*MACCommand_ForceRejoinReq_).ForceRejoinReq = nil
						}
					}
				case "rejoin_param_setup_req":
					if _, ok := dst.Payload.(*MACCommand_RejoinParamSetupReq_); !ok {
						dst.Payload = &MACCommand_RejoinParamSetupReq_{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Payload.(*MACCommand_RejoinParamSetupReq_).RejoinParamSetupReq
						if newDst == nil {
							newDst = &MACCommand_RejoinParamSetupReq{}
							dst.Payload.(*MACCommand_RejoinParamSetupReq_).RejoinParamSetupReq = newDst
						}
						var newSrc *MACCommand_RejoinParamSetupReq
						if src != nil {
							newSrc = src.GetRejoinParamSetupReq()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Payload.(*MACCommand_RejoinParamSetupReq_).RejoinParamSetupReq = src.GetRejoinParamSetupReq()
						} else {
							dst.Payload.(*MACCommand_RejoinParamSetupReq_).RejoinParamSetupReq = nil
						}
					}
				case "rejoin_param_setup_ans":
					if _, ok := dst.Payload.(*MACCommand_RejoinParamSetupAns_); !ok {
						dst.Payload = &MACCommand_RejoinParamSetupAns_{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Payload.(*MACCommand_RejoinParamSetupAns_).RejoinParamSetupAns
						if newDst == nil {
							newDst = &MACCommand_RejoinParamSetupAns{}
							dst.Payload.(*MACCommand_RejoinParamSetupAns_).RejoinParamSetupAns = newDst
						}
						var newSrc *MACCommand_RejoinParamSetupAns
						if src != nil {
							newSrc = src.GetRejoinParamSetupAns()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Payload.(*MACCommand_RejoinParamSetupAns_).RejoinParamSetupAns = src.GetRejoinParamSetupAns()
						} else {
							dst.Payload.(*MACCommand_RejoinParamSetupAns_).RejoinParamSetupAns = nil
						}
					}
				case "ping_slot_info_req":
					if _, ok := dst.Payload.(*MACCommand_PingSlotInfoReq_); !ok {
						dst.Payload = &MACCommand_PingSlotInfoReq_{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Payload.(*MACCommand_PingSlotInfoReq_).PingSlotInfoReq
						if newDst == nil {
							newDst = &MACCommand_PingSlotInfoReq{}
							dst.Payload.(*MACCommand_PingSlotInfoReq_).PingSlotInfoReq = newDst
						}
						var newSrc *MACCommand_PingSlotInfoReq
						if src != nil {
							newSrc = src.GetPingSlotInfoReq()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Payload.(*MACCommand_PingSlotInfoReq_).PingSlotInfoReq = src.GetPingSlotInfoReq()
						} else {
							dst.Payload.(*MACCommand_PingSlotInfoReq_).PingSlotInfoReq = nil
						}
					}
				case "ping_slot_channel_req":
					if _, ok := dst.Payload.(*MACCommand_PingSlotChannelReq_); !ok {
						dst.Payload = &MACCommand_PingSlotChannelReq_{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Payload.(*MACCommand_PingSlotChannelReq_).PingSlotChannelReq
						if newDst == nil {
							newDst = &MACCommand_PingSlotChannelReq{}
							dst.Payload.(*MACCommand_PingSlotChannelReq_).PingSlotChannelReq = newDst
						}
						var newSrc *MACCommand_PingSlotChannelReq
						if src != nil {
							newSrc = src.GetPingSlotChannelReq()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Payload.(*MACCommand_PingSlotChannelReq_).PingSlotChannelReq = src.GetPingSlotChannelReq()
						} else {
							dst.Payload.(*MACCommand_PingSlotChannelReq_).PingSlotChannelReq = nil
						}
					}
				case "ping_slot_channel_ans":
					if _, ok := dst.Payload.(*MACCommand_PingSlotChannelAns_); !ok {
						dst.Payload = &MACCommand_PingSlotChannelAns_{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Payload.(*MACCommand_PingSlotChannelAns_).PingSlotChannelAns
						if newDst == nil {
							newDst = &MACCommand_PingSlotChannelAns{}
							dst.Payload.(*MACCommand_PingSlotChannelAns_).PingSlotChannelAns = newDst
						}
						var newSrc *MACCommand_PingSlotChannelAns
						if src != nil {
							newSrc = src.GetPingSlotChannelAns()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Payload.(*MACCommand_PingSlotChannelAns_).PingSlotChannelAns = src.GetPingSlotChannelAns()
						} else {
							dst.Payload.(*MACCommand_PingSlotChannelAns_).PingSlotChannelAns = nil
						}
					}
				case "beacon_timing_ans":
					if _, ok := dst.Payload.(*MACCommand_BeaconTimingAns_); !ok {
						dst.Payload = &MACCommand_BeaconTimingAns_{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Payload.(*MACCommand_BeaconTimingAns_).BeaconTimingAns
						if newDst == nil {
							newDst = &MACCommand_BeaconTimingAns{}
							dst.Payload.(*MACCommand_BeaconTimingAns_).BeaconTimingAns = newDst
						}
						var newSrc *MACCommand_BeaconTimingAns
						if src != nil {
							newSrc = src.GetBeaconTimingAns()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Payload.(*MACCommand_BeaconTimingAns_).BeaconTimingAns = src.GetBeaconTimingAns()
						} else {
							dst.Payload.(*MACCommand_BeaconTimingAns_).BeaconTimingAns = nil
						}
					}
				case "beacon_freq_req":
					if _, ok := dst.Payload.(*MACCommand_BeaconFreqReq_); !ok {
						dst.Payload = &MACCommand_BeaconFreqReq_{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Payload.(*MACCommand_BeaconFreqReq_).BeaconFreqReq
						if newDst == nil {
							newDst = &MACCommand_BeaconFreqReq{}
							dst.Payload.(*MACCommand_BeaconFreqReq_).BeaconFreqReq = newDst
						}
						var newSrc *MACCommand_BeaconFreqReq
						if src != nil {
							newSrc = src.GetBeaconFreqReq()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Payload.(*MACCommand_BeaconFreqReq_).BeaconFreqReq = src.GetBeaconFreqReq()
						} else {
							dst.Payload.(*MACCommand_BeaconFreqReq_).BeaconFreqReq = nil
						}
					}
				case "beacon_freq_ans":
					if _, ok := dst.Payload.(*MACCommand_BeaconFreqAns_); !ok {
						dst.Payload = &MACCommand_BeaconFreqAns_{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Payload.(*MACCommand_BeaconFreqAns_).BeaconFreqAns
						if newDst == nil {
							newDst = &MACCommand_BeaconFreqAns{}
							dst.Payload.(*MACCommand_BeaconFreqAns_).BeaconFreqAns = newDst
						}
						var newSrc *MACCommand_BeaconFreqAns
						if src != nil {
							newSrc = src.GetBeaconFreqAns()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Payload.(*MACCommand_BeaconFreqAns_).BeaconFreqAns = src.GetBeaconFreqAns()
						} else {
							dst.Payload.(*MACCommand_BeaconFreqAns_).BeaconFreqAns = nil
						}
					}
				case "device_mode_ind":
					if _, ok := dst.Payload.(*MACCommand_DeviceModeInd_); !ok {
						dst.Payload = &MACCommand_DeviceModeInd_{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Payload.(*MACCommand_DeviceModeInd_).DeviceModeInd
						if newDst == nil {
							newDst = &MACCommand_DeviceModeInd{}
							dst.Payload.(*MACCommand_DeviceModeInd_).DeviceModeInd = newDst
						}
						var newSrc *MACCommand_DeviceModeInd
						if src != nil {
							newSrc = src.GetDeviceModeInd()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Payload.(*MACCommand_DeviceModeInd_).DeviceModeInd = src.GetDeviceModeInd()
						} else {
							dst.Payload.(*MACCommand_DeviceModeInd_).DeviceModeInd = nil
						}
					}
				case "device_mode_conf":
					if _, ok := dst.Payload.(*MACCommand_DeviceModeConf_); !ok {
						dst.Payload = &MACCommand_DeviceModeConf_{}
					}
					if len(oneofSubs) > 0 {
						newDst := dst.Payload.(*MACCommand_DeviceModeConf_).DeviceModeConf
						if newDst == nil {
							newDst = &MACCommand_DeviceModeConf{}
							dst.Payload.(*MACCommand_DeviceModeConf_).DeviceModeConf = newDst
						}
						var newSrc *MACCommand_DeviceModeConf
						if src != nil {
							newSrc = src.GetDeviceModeConf()
						}
						if err := newDst.SetFields(newSrc, subs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Payload.(*MACCommand_DeviceModeConf_).DeviceModeConf = src.GetDeviceModeConf()
						} else {
							dst.Payload.(*MACCommand_DeviceModeConf_).DeviceModeConf = nil
						}
					}

				default:
					return fmt.Errorf("invalid oneof field: '%s.%s'", name, oneofName)
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var MACCommand_ResetIndFieldPathsNested = []string{
	"minor_version",
}

var MACCommand_ResetIndFieldPathsTopLevel = []string{
	"minor_version",
}

func (dst *MACCommand_ResetInd) SetFields(src *MACCommand_ResetInd, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "minor_version":
			if len(subs) > 0 {
				return fmt.Errorf("'minor_version' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.MinorVersion = src.MinorVersion
			} else {
				var zero Minor
				dst.MinorVersion = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var MACCommand_ResetConfFieldPathsNested = []string{
	"minor_version",
}

var MACCommand_ResetConfFieldPathsTopLevel = []string{
	"minor_version",
}

func (dst *MACCommand_ResetConf) SetFields(src *MACCommand_ResetConf, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "minor_version":
			if len(subs) > 0 {
				return fmt.Errorf("'minor_version' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.MinorVersion = src.MinorVersion
			} else {
				var zero Minor
				dst.MinorVersion = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var MACCommand_LinkCheckAnsFieldPathsNested = []string{
	"gateway_count",
	"margin",
}

var MACCommand_LinkCheckAnsFieldPathsTopLevel = []string{
	"gateway_count",
	"margin",
}

func (dst *MACCommand_LinkCheckAns) SetFields(src *MACCommand_LinkCheckAns, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "margin":
			if len(subs) > 0 {
				return fmt.Errorf("'margin' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Margin = src.Margin
			} else {
				var zero uint32
				dst.Margin = zero
			}
		case "gateway_count":
			if len(subs) > 0 {
				return fmt.Errorf("'gateway_count' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.GatewayCount = src.GatewayCount
			} else {
				var zero uint32
				dst.GatewayCount = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var MACCommand_LinkADRReqFieldPathsNested = []string{
	"channel_mask",
	"channel_mask_control",
	"data_rate_index",
	"nb_trans",
	"tx_power_index",
}

var MACCommand_LinkADRReqFieldPathsTopLevel = []string{
	"channel_mask",
	"channel_mask_control",
	"data_rate_index",
	"nb_trans",
	"tx_power_index",
}

func (dst *MACCommand_LinkADRReq) SetFields(src *MACCommand_LinkADRReq, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "data_rate_index":
			if len(subs) > 0 {
				return fmt.Errorf("'data_rate_index' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DataRateIndex = src.DataRateIndex
			} else {
				var zero DataRateIndex
				dst.DataRateIndex = zero
			}
		case "tx_power_index":
			if len(subs) > 0 {
				return fmt.Errorf("'tx_power_index' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.TxPowerIndex = src.TxPowerIndex
			} else {
				var zero uint32
				dst.TxPowerIndex = zero
			}
		case "channel_mask":
			if len(subs) > 0 {
				return fmt.Errorf("'channel_mask' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ChannelMask = src.ChannelMask
			} else {
				dst.ChannelMask = nil
			}
		case "channel_mask_control":
			if len(subs) > 0 {
				return fmt.Errorf("'channel_mask_control' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ChannelMaskControl = src.ChannelMaskControl
			} else {
				var zero uint32
				dst.ChannelMaskControl = zero
			}
		case "nb_trans":
			if len(subs) > 0 {
				return fmt.Errorf("'nb_trans' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.NbTrans = src.NbTrans
			} else {
				var zero uint32
				dst.NbTrans = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var MACCommand_LinkADRAnsFieldPathsNested = []string{
	"channel_mask_ack",
	"data_rate_index_ack",
	"tx_power_index_ack",
}

var MACCommand_LinkADRAnsFieldPathsTopLevel = []string{
	"channel_mask_ack",
	"data_rate_index_ack",
	"tx_power_index_ack",
}

func (dst *MACCommand_LinkADRAns) SetFields(src *MACCommand_LinkADRAns, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "channel_mask_ack":
			if len(subs) > 0 {
				return fmt.Errorf("'channel_mask_ack' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ChannelMaskAck = src.ChannelMaskAck
			} else {
				var zero bool
				dst.ChannelMaskAck = zero
			}
		case "data_rate_index_ack":
			if len(subs) > 0 {
				return fmt.Errorf("'data_rate_index_ack' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DataRateIndexAck = src.DataRateIndexAck
			} else {
				var zero bool
				dst.DataRateIndexAck = zero
			}
		case "tx_power_index_ack":
			if len(subs) > 0 {
				return fmt.Errorf("'tx_power_index_ack' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.TxPowerIndexAck = src.TxPowerIndexAck
			} else {
				var zero bool
				dst.TxPowerIndexAck = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var MACCommand_DutyCycleReqFieldPathsNested = []string{
	"max_duty_cycle",
}

var MACCommand_DutyCycleReqFieldPathsTopLevel = []string{
	"max_duty_cycle",
}

func (dst *MACCommand_DutyCycleReq) SetFields(src *MACCommand_DutyCycleReq, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "max_duty_cycle":
			if len(subs) > 0 {
				return fmt.Errorf("'max_duty_cycle' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.MaxDutyCycle = src.MaxDutyCycle
			} else {
				var zero AggregatedDutyCycle
				dst.MaxDutyCycle = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var MACCommand_RxParamSetupReqFieldPathsNested = []string{
	"rx1_data_rate_offset",
	"rx2_data_rate_index",
	"rx2_frequency",
}

var MACCommand_RxParamSetupReqFieldPathsTopLevel = []string{
	"rx1_data_rate_offset",
	"rx2_data_rate_index",
	"rx2_frequency",
}

func (dst *MACCommand_RxParamSetupReq) SetFields(src *MACCommand_RxParamSetupReq, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "rx2_data_rate_index":
			if len(subs) > 0 {
				return fmt.Errorf("'rx2_data_rate_index' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Rx2DataRateIndex = src.Rx2DataRateIndex
			} else {
				var zero DataRateIndex
				dst.Rx2DataRateIndex = zero
			}
		case "rx1_data_rate_offset":
			if len(subs) > 0 {
				return fmt.Errorf("'rx1_data_rate_offset' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Rx1DataRateOffset = src.Rx1DataRateOffset
			} else {
				var zero uint32
				dst.Rx1DataRateOffset = zero
			}
		case "rx2_frequency":
			if len(subs) > 0 {
				return fmt.Errorf("'rx2_frequency' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Rx2Frequency = src.Rx2Frequency
			} else {
				var zero uint64
				dst.Rx2Frequency = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var MACCommand_RxParamSetupAnsFieldPathsNested = []string{
	"rx1_data_rate_offset_ack",
	"rx2_data_rate_index_ack",
	"rx2_frequency_ack",
}

var MACCommand_RxParamSetupAnsFieldPathsTopLevel = []string{
	"rx1_data_rate_offset_ack",
	"rx2_data_rate_index_ack",
	"rx2_frequency_ack",
}

func (dst *MACCommand_RxParamSetupAns) SetFields(src *MACCommand_RxParamSetupAns, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "rx2_data_rate_index_ack":
			if len(subs) > 0 {
				return fmt.Errorf("'rx2_data_rate_index_ack' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Rx2DataRateIndexAck = src.Rx2DataRateIndexAck
			} else {
				var zero bool
				dst.Rx2DataRateIndexAck = zero
			}
		case "rx1_data_rate_offset_ack":
			if len(subs) > 0 {
				return fmt.Errorf("'rx1_data_rate_offset_ack' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Rx1DataRateOffsetAck = src.Rx1DataRateOffsetAck
			} else {
				var zero bool
				dst.Rx1DataRateOffsetAck = zero
			}
		case "rx2_frequency_ack":
			if len(subs) > 0 {
				return fmt.Errorf("'rx2_frequency_ack' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Rx2FrequencyAck = src.Rx2FrequencyAck
			} else {
				var zero bool
				dst.Rx2FrequencyAck = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var MACCommand_DevStatusAnsFieldPathsNested = []string{
	"battery",
	"margin",
}

var MACCommand_DevStatusAnsFieldPathsTopLevel = []string{
	"battery",
	"margin",
}

func (dst *MACCommand_DevStatusAns) SetFields(src *MACCommand_DevStatusAns, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "battery":
			if len(subs) > 0 {
				return fmt.Errorf("'battery' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Battery = src.Battery
			} else {
				var zero uint32
				dst.Battery = zero
			}
		case "margin":
			if len(subs) > 0 {
				return fmt.Errorf("'margin' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Margin = src.Margin
			} else {
				var zero int32
				dst.Margin = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var MACCommand_NewChannelReqFieldPathsNested = []string{
	"channel_index",
	"frequency",
	"max_data_rate_index",
	"min_data_rate_index",
}

var MACCommand_NewChannelReqFieldPathsTopLevel = []string{
	"channel_index",
	"frequency",
	"max_data_rate_index",
	"min_data_rate_index",
}

func (dst *MACCommand_NewChannelReq) SetFields(src *MACCommand_NewChannelReq, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "channel_index":
			if len(subs) > 0 {
				return fmt.Errorf("'channel_index' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ChannelIndex = src.ChannelIndex
			} else {
				var zero uint32
				dst.ChannelIndex = zero
			}
		case "frequency":
			if len(subs) > 0 {
				return fmt.Errorf("'frequency' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Frequency = src.Frequency
			} else {
				var zero uint64
				dst.Frequency = zero
			}
		case "min_data_rate_index":
			if len(subs) > 0 {
				return fmt.Errorf("'min_data_rate_index' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.MinDataRateIndex = src.MinDataRateIndex
			} else {
				var zero DataRateIndex
				dst.MinDataRateIndex = zero
			}
		case "max_data_rate_index":
			if len(subs) > 0 {
				return fmt.Errorf("'max_data_rate_index' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.MaxDataRateIndex = src.MaxDataRateIndex
			} else {
				var zero DataRateIndex
				dst.MaxDataRateIndex = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var MACCommand_NewChannelAnsFieldPathsNested = []string{
	"data_rate_ack",
	"frequency_ack",
}

var MACCommand_NewChannelAnsFieldPathsTopLevel = []string{
	"data_rate_ack",
	"frequency_ack",
}

func (dst *MACCommand_NewChannelAns) SetFields(src *MACCommand_NewChannelAns, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "frequency_ack":
			if len(subs) > 0 {
				return fmt.Errorf("'frequency_ack' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FrequencyAck = src.FrequencyAck
			} else {
				var zero bool
				dst.FrequencyAck = zero
			}
		case "data_rate_ack":
			if len(subs) > 0 {
				return fmt.Errorf("'data_rate_ack' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DataRateAck = src.DataRateAck
			} else {
				var zero bool
				dst.DataRateAck = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var MACCommand_DLChannelReqFieldPathsNested = []string{
	"channel_index",
	"frequency",
}

var MACCommand_DLChannelReqFieldPathsTopLevel = []string{
	"channel_index",
	"frequency",
}

func (dst *MACCommand_DLChannelReq) SetFields(src *MACCommand_DLChannelReq, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "channel_index":
			if len(subs) > 0 {
				return fmt.Errorf("'channel_index' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ChannelIndex = src.ChannelIndex
			} else {
				var zero uint32
				dst.ChannelIndex = zero
			}
		case "frequency":
			if len(subs) > 0 {
				return fmt.Errorf("'frequency' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Frequency = src.Frequency
			} else {
				var zero uint64
				dst.Frequency = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var MACCommand_DLChannelAnsFieldPathsNested = []string{
	"channel_index_ack",
	"frequency_ack",
}

var MACCommand_DLChannelAnsFieldPathsTopLevel = []string{
	"channel_index_ack",
	"frequency_ack",
}

func (dst *MACCommand_DLChannelAns) SetFields(src *MACCommand_DLChannelAns, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "channel_index_ack":
			if len(subs) > 0 {
				return fmt.Errorf("'channel_index_ack' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ChannelIndexAck = src.ChannelIndexAck
			} else {
				var zero bool
				dst.ChannelIndexAck = zero
			}
		case "frequency_ack":
			if len(subs) > 0 {
				return fmt.Errorf("'frequency_ack' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FrequencyAck = src.FrequencyAck
			} else {
				var zero bool
				dst.FrequencyAck = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var MACCommand_RxTimingSetupReqFieldPathsNested = []string{
	"delay",
}

var MACCommand_RxTimingSetupReqFieldPathsTopLevel = []string{
	"delay",
}

func (dst *MACCommand_RxTimingSetupReq) SetFields(src *MACCommand_RxTimingSetupReq, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "delay":
			if len(subs) > 0 {
				return fmt.Errorf("'delay' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Delay = src.Delay
			} else {
				var zero RxDelay
				dst.Delay = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var MACCommand_TxParamSetupReqFieldPathsNested = []string{
	"downlink_dwell_time",
	"max_eirp_index",
	"uplink_dwell_time",
}

var MACCommand_TxParamSetupReqFieldPathsTopLevel = []string{
	"downlink_dwell_time",
	"max_eirp_index",
	"uplink_dwell_time",
}

func (dst *MACCommand_TxParamSetupReq) SetFields(src *MACCommand_TxParamSetupReq, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "max_eirp_index":
			if len(subs) > 0 {
				return fmt.Errorf("'max_eirp_index' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.MaxEIRPIndex = src.MaxEIRPIndex
			} else {
				var zero DeviceEIRP
				dst.MaxEIRPIndex = zero
			}
		case "uplink_dwell_time":
			if len(subs) > 0 {
				return fmt.Errorf("'uplink_dwell_time' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.UplinkDwellTime = src.UplinkDwellTime
			} else {
				var zero bool
				dst.UplinkDwellTime = zero
			}
		case "downlink_dwell_time":
			if len(subs) > 0 {
				return fmt.Errorf("'downlink_dwell_time' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DownlinkDwellTime = src.DownlinkDwellTime
			} else {
				var zero bool
				dst.DownlinkDwellTime = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var MACCommand_RekeyIndFieldPathsNested = []string{
	"minor_version",
}

var MACCommand_RekeyIndFieldPathsTopLevel = []string{
	"minor_version",
}

func (dst *MACCommand_RekeyInd) SetFields(src *MACCommand_RekeyInd, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "minor_version":
			if len(subs) > 0 {
				return fmt.Errorf("'minor_version' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.MinorVersion = src.MinorVersion
			} else {
				var zero Minor
				dst.MinorVersion = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var MACCommand_RekeyConfFieldPathsNested = []string{
	"minor_version",
}

var MACCommand_RekeyConfFieldPathsTopLevel = []string{
	"minor_version",
}

func (dst *MACCommand_RekeyConf) SetFields(src *MACCommand_RekeyConf, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "minor_version":
			if len(subs) > 0 {
				return fmt.Errorf("'minor_version' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.MinorVersion = src.MinorVersion
			} else {
				var zero Minor
				dst.MinorVersion = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var MACCommand_ADRParamSetupReqFieldPathsNested = []string{
	"adr_ack_delay_exponent",
	"adr_ack_limit_exponent",
}

var MACCommand_ADRParamSetupReqFieldPathsTopLevel = []string{
	"adr_ack_delay_exponent",
	"adr_ack_limit_exponent",
}

func (dst *MACCommand_ADRParamSetupReq) SetFields(src *MACCommand_ADRParamSetupReq, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "adr_ack_limit_exponent":
			if len(subs) > 0 {
				return fmt.Errorf("'adr_ack_limit_exponent' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ADRAckLimitExponent = src.ADRAckLimitExponent
			} else {
				var zero ADRAckLimitExponent
				dst.ADRAckLimitExponent = zero
			}
		case "adr_ack_delay_exponent":
			if len(subs) > 0 {
				return fmt.Errorf("'adr_ack_delay_exponent' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ADRAckDelayExponent = src.ADRAckDelayExponent
			} else {
				var zero ADRAckDelayExponent
				dst.ADRAckDelayExponent = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var MACCommand_DeviceTimeAnsFieldPathsNested = []string{
	"time",
}

var MACCommand_DeviceTimeAnsFieldPathsTopLevel = []string{
	"time",
}

func (dst *MACCommand_DeviceTimeAns) SetFields(src *MACCommand_DeviceTimeAns, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "time":
			if len(subs) > 0 {
				return fmt.Errorf("'time' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Time = src.Time
			} else {
				var zero time.Time
				dst.Time = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var MACCommand_ForceRejoinReqFieldPathsNested = []string{
	"data_rate_index",
	"max_retries",
	"period_exponent",
	"rejoin_type",
}

var MACCommand_ForceRejoinReqFieldPathsTopLevel = []string{
	"data_rate_index",
	"max_retries",
	"period_exponent",
	"rejoin_type",
}

func (dst *MACCommand_ForceRejoinReq) SetFields(src *MACCommand_ForceRejoinReq, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "rejoin_type":
			if len(subs) > 0 {
				return fmt.Errorf("'rejoin_type' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.RejoinType = src.RejoinType
			} else {
				var zero uint32
				dst.RejoinType = zero
			}
		case "data_rate_index":
			if len(subs) > 0 {
				return fmt.Errorf("'data_rate_index' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DataRateIndex = src.DataRateIndex
			} else {
				var zero DataRateIndex
				dst.DataRateIndex = zero
			}
		case "max_retries":
			if len(subs) > 0 {
				return fmt.Errorf("'max_retries' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.MaxRetries = src.MaxRetries
			} else {
				var zero uint32
				dst.MaxRetries = zero
			}
		case "period_exponent":
			if len(subs) > 0 {
				return fmt.Errorf("'period_exponent' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.PeriodExponent = src.PeriodExponent
			} else {
				var zero RejoinPeriodExponent
				dst.PeriodExponent = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var MACCommand_RejoinParamSetupReqFieldPathsNested = []string{
	"max_count_exponent",
	"max_time_exponent",
}

var MACCommand_RejoinParamSetupReqFieldPathsTopLevel = []string{
	"max_count_exponent",
	"max_time_exponent",
}

func (dst *MACCommand_RejoinParamSetupReq) SetFields(src *MACCommand_RejoinParamSetupReq, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "max_count_exponent":
			if len(subs) > 0 {
				return fmt.Errorf("'max_count_exponent' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.MaxCountExponent = src.MaxCountExponent
			} else {
				var zero RejoinCountExponent
				dst.MaxCountExponent = zero
			}
		case "max_time_exponent":
			if len(subs) > 0 {
				return fmt.Errorf("'max_time_exponent' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.MaxTimeExponent = src.MaxTimeExponent
			} else {
				var zero RejoinTimeExponent
				dst.MaxTimeExponent = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var MACCommand_RejoinParamSetupAnsFieldPathsNested = []string{
	"max_time_exponent_ack",
}

var MACCommand_RejoinParamSetupAnsFieldPathsTopLevel = []string{
	"max_time_exponent_ack",
}

func (dst *MACCommand_RejoinParamSetupAns) SetFields(src *MACCommand_RejoinParamSetupAns, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "max_time_exponent_ack":
			if len(subs) > 0 {
				return fmt.Errorf("'max_time_exponent_ack' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.MaxTimeExponentAck = src.MaxTimeExponentAck
			} else {
				var zero bool
				dst.MaxTimeExponentAck = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var MACCommand_PingSlotInfoReqFieldPathsNested = []string{
	"period",
}

var MACCommand_PingSlotInfoReqFieldPathsTopLevel = []string{
	"period",
}

func (dst *MACCommand_PingSlotInfoReq) SetFields(src *MACCommand_PingSlotInfoReq, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "period":
			if len(subs) > 0 {
				return fmt.Errorf("'period' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Period = src.Period
			} else {
				var zero PingSlotPeriod
				dst.Period = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var MACCommand_PingSlotChannelReqFieldPathsNested = []string{
	"data_rate_index",
	"frequency",
}

var MACCommand_PingSlotChannelReqFieldPathsTopLevel = []string{
	"data_rate_index",
	"frequency",
}

func (dst *MACCommand_PingSlotChannelReq) SetFields(src *MACCommand_PingSlotChannelReq, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "frequency":
			if len(subs) > 0 {
				return fmt.Errorf("'frequency' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Frequency = src.Frequency
			} else {
				var zero uint64
				dst.Frequency = zero
			}
		case "data_rate_index":
			if len(subs) > 0 {
				return fmt.Errorf("'data_rate_index' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DataRateIndex = src.DataRateIndex
			} else {
				var zero DataRateIndex
				dst.DataRateIndex = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var MACCommand_PingSlotChannelAnsFieldPathsNested = []string{
	"data_rate_index_ack",
	"frequency_ack",
}

var MACCommand_PingSlotChannelAnsFieldPathsTopLevel = []string{
	"data_rate_index_ack",
	"frequency_ack",
}

func (dst *MACCommand_PingSlotChannelAns) SetFields(src *MACCommand_PingSlotChannelAns, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "frequency_ack":
			if len(subs) > 0 {
				return fmt.Errorf("'frequency_ack' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FrequencyAck = src.FrequencyAck
			} else {
				var zero bool
				dst.FrequencyAck = zero
			}
		case "data_rate_index_ack":
			if len(subs) > 0 {
				return fmt.Errorf("'data_rate_index_ack' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DataRateIndexAck = src.DataRateIndexAck
			} else {
				var zero bool
				dst.DataRateIndexAck = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var MACCommand_BeaconTimingAnsFieldPathsNested = []string{
	"channel_index",
	"delay",
}

var MACCommand_BeaconTimingAnsFieldPathsTopLevel = []string{
	"channel_index",
	"delay",
}

func (dst *MACCommand_BeaconTimingAns) SetFields(src *MACCommand_BeaconTimingAns, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "delay":
			if len(subs) > 0 {
				return fmt.Errorf("'delay' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Delay = src.Delay
			} else {
				var zero uint32
				dst.Delay = zero
			}
		case "channel_index":
			if len(subs) > 0 {
				return fmt.Errorf("'channel_index' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ChannelIndex = src.ChannelIndex
			} else {
				var zero uint32
				dst.ChannelIndex = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var MACCommand_BeaconFreqReqFieldPathsNested = []string{
	"frequency",
}

var MACCommand_BeaconFreqReqFieldPathsTopLevel = []string{
	"frequency",
}

func (dst *MACCommand_BeaconFreqReq) SetFields(src *MACCommand_BeaconFreqReq, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "frequency":
			if len(subs) > 0 {
				return fmt.Errorf("'frequency' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Frequency = src.Frequency
			} else {
				var zero uint64
				dst.Frequency = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var MACCommand_BeaconFreqAnsFieldPathsNested = []string{
	"frequency_ack",
}

var MACCommand_BeaconFreqAnsFieldPathsTopLevel = []string{
	"frequency_ack",
}

func (dst *MACCommand_BeaconFreqAns) SetFields(src *MACCommand_BeaconFreqAns, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "frequency_ack":
			if len(subs) > 0 {
				return fmt.Errorf("'frequency_ack' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FrequencyAck = src.FrequencyAck
			} else {
				var zero bool
				dst.FrequencyAck = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var MACCommand_DeviceModeIndFieldPathsNested = []string{
	"class",
}

var MACCommand_DeviceModeIndFieldPathsTopLevel = []string{
	"class",
}

func (dst *MACCommand_DeviceModeInd) SetFields(src *MACCommand_DeviceModeInd, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "class":
			if len(subs) > 0 {
				return fmt.Errorf("'class' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Class = src.Class
			} else {
				var zero Class
				dst.Class = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

var MACCommand_DeviceModeConfFieldPathsNested = []string{
	"class",
}

var MACCommand_DeviceModeConfFieldPathsTopLevel = []string{
	"class",
}

func (dst *MACCommand_DeviceModeConf) SetFields(src *MACCommand_DeviceModeConf, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "class":
			if len(subs) > 0 {
				return fmt.Errorf("'class' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Class = src.Class
			} else {
				var zero Class
				dst.Class = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}
