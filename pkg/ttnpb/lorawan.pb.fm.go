// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import fmt "fmt"

var _MessageFieldPaths = [...]string{
	"join_accept_payload",
	"join_accept_payload.cf_list",
	"join_accept_payload.cf_list.ch_masks",
	"join_accept_payload.cf_list.freq",
	"join_accept_payload.cf_list.type",
	"join_accept_payload.dev_addr",
	"join_accept_payload.dl_settings",
	"join_accept_payload.dl_settings.opt_neg",
	"join_accept_payload.dl_settings.rx1_dr_offset",
	"join_accept_payload.dl_settings.rx2_dr",
	"join_accept_payload.encrypted",
	"join_accept_payload.join_nonce",
	"join_accept_payload.net_id",
	"join_accept_payload.rx_delay",
	"join_request_payload",
	"join_request_payload.dev_eui",
	"join_request_payload.dev_nonce",
	"join_request_payload.join_eui",
	"m_hdr",
	"m_hdr.m_type",
	"m_hdr.major",
	"mac_payload",
	"mac_payload.decoded_payload",
	"mac_payload.f_hdr",
	"mac_payload.f_hdr.dev_addr",
	"mac_payload.f_hdr.f_cnt",
	"mac_payload.f_hdr.f_ctrl",
	"mac_payload.f_hdr.f_ctrl.ack",
	"mac_payload.f_hdr.f_ctrl.adr",
	"mac_payload.f_hdr.f_ctrl.adr_ack_req",
	"mac_payload.f_hdr.f_ctrl.class_b",
	"mac_payload.f_hdr.f_ctrl.f_pending",
	"mac_payload.f_hdr.f_opts",
	"mac_payload.f_port",
	"mac_payload.frm_payload",
	"mic",
	"rejoin_request_payload",
	"rejoin_request_payload.dev_eui",
	"rejoin_request_payload.join_eui",
	"rejoin_request_payload.net_id",
	"rejoin_request_payload.rejoin_cnt",
	"rejoin_request_payload.rejoin_type",
}

func (*Message) FieldMaskPaths() []string {
	ret := make([]string, len(_MessageFieldPaths))
	copy(ret, _MessageFieldPaths[:])
	return ret
}

func (dst *Message) SetFields(src *Message, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "join_accept_payload":
			if dst.Payload == nil {
				dst.Payload = &Message_JoinAcceptPayload{}
			}
			dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload = src.GetJoinAcceptPayload()
		case "join_accept_payload.cf_list":
			if dst.Payload == nil {
				dst.Payload = &Message_JoinAcceptPayload{}
			}
			if dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload == nil {
				dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload = &JoinAcceptPayload{}
			}
			dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload.SetFields(src.GetJoinAcceptPayload(), _pathsWithoutPrefix("join_accept_payload", paths)...)
		case "join_accept_payload.cf_list.ch_masks":
			if dst.Payload == nil {
				dst.Payload = &Message_JoinAcceptPayload{}
			}
			if dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload == nil {
				dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload = &JoinAcceptPayload{}
			}
			dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload.SetFields(src.GetJoinAcceptPayload(), _pathsWithoutPrefix("join_accept_payload", paths)...)
		case "join_accept_payload.cf_list.freq":
			if dst.Payload == nil {
				dst.Payload = &Message_JoinAcceptPayload{}
			}
			if dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload == nil {
				dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload = &JoinAcceptPayload{}
			}
			dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload.SetFields(src.GetJoinAcceptPayload(), _pathsWithoutPrefix("join_accept_payload", paths)...)
		case "join_accept_payload.cf_list.type":
			if dst.Payload == nil {
				dst.Payload = &Message_JoinAcceptPayload{}
			}
			if dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload == nil {
				dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload = &JoinAcceptPayload{}
			}
			dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload.SetFields(src.GetJoinAcceptPayload(), _pathsWithoutPrefix("join_accept_payload", paths)...)
		case "join_accept_payload.dev_addr":
			if dst.Payload == nil {
				dst.Payload = &Message_JoinAcceptPayload{}
			}
			if dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload == nil {
				dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload = &JoinAcceptPayload{}
			}
			dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload.SetFields(src.GetJoinAcceptPayload(), _pathsWithoutPrefix("join_accept_payload", paths)...)
		case "join_accept_payload.dl_settings":
			if dst.Payload == nil {
				dst.Payload = &Message_JoinAcceptPayload{}
			}
			if dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload == nil {
				dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload = &JoinAcceptPayload{}
			}
			dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload.SetFields(src.GetJoinAcceptPayload(), _pathsWithoutPrefix("join_accept_payload", paths)...)
		case "join_accept_payload.dl_settings.opt_neg":
			if dst.Payload == nil {
				dst.Payload = &Message_JoinAcceptPayload{}
			}
			if dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload == nil {
				dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload = &JoinAcceptPayload{}
			}
			dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload.SetFields(src.GetJoinAcceptPayload(), _pathsWithoutPrefix("join_accept_payload", paths)...)
		case "join_accept_payload.dl_settings.rx1_dr_offset":
			if dst.Payload == nil {
				dst.Payload = &Message_JoinAcceptPayload{}
			}
			if dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload == nil {
				dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload = &JoinAcceptPayload{}
			}
			dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload.SetFields(src.GetJoinAcceptPayload(), _pathsWithoutPrefix("join_accept_payload", paths)...)
		case "join_accept_payload.dl_settings.rx2_dr":
			if dst.Payload == nil {
				dst.Payload = &Message_JoinAcceptPayload{}
			}
			if dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload == nil {
				dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload = &JoinAcceptPayload{}
			}
			dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload.SetFields(src.GetJoinAcceptPayload(), _pathsWithoutPrefix("join_accept_payload", paths)...)
		case "join_accept_payload.encrypted":
			if dst.Payload == nil {
				dst.Payload = &Message_JoinAcceptPayload{}
			}
			if dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload == nil {
				dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload = &JoinAcceptPayload{}
			}
			dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload.SetFields(src.GetJoinAcceptPayload(), _pathsWithoutPrefix("join_accept_payload", paths)...)
		case "join_accept_payload.join_nonce":
			if dst.Payload == nil {
				dst.Payload = &Message_JoinAcceptPayload{}
			}
			if dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload == nil {
				dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload = &JoinAcceptPayload{}
			}
			dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload.SetFields(src.GetJoinAcceptPayload(), _pathsWithoutPrefix("join_accept_payload", paths)...)
		case "join_accept_payload.net_id":
			if dst.Payload == nil {
				dst.Payload = &Message_JoinAcceptPayload{}
			}
			if dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload == nil {
				dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload = &JoinAcceptPayload{}
			}
			dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload.SetFields(src.GetJoinAcceptPayload(), _pathsWithoutPrefix("join_accept_payload", paths)...)
		case "join_accept_payload.rx_delay":
			if dst.Payload == nil {
				dst.Payload = &Message_JoinAcceptPayload{}
			}
			if dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload == nil {
				dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload = &JoinAcceptPayload{}
			}
			dst.Payload.(*Message_JoinAcceptPayload).JoinAcceptPayload.SetFields(src.GetJoinAcceptPayload(), _pathsWithoutPrefix("join_accept_payload", paths)...)
		case "join_request_payload":
			if dst.Payload == nil {
				dst.Payload = &Message_JoinRequestPayload{}
			}
			dst.Payload.(*Message_JoinRequestPayload).JoinRequestPayload = src.GetJoinRequestPayload()
		case "join_request_payload.dev_eui":
			if dst.Payload == nil {
				dst.Payload = &Message_JoinRequestPayload{}
			}
			if dst.Payload.(*Message_JoinRequestPayload).JoinRequestPayload == nil {
				dst.Payload.(*Message_JoinRequestPayload).JoinRequestPayload = &JoinRequestPayload{}
			}
			dst.Payload.(*Message_JoinRequestPayload).JoinRequestPayload.SetFields(src.GetJoinRequestPayload(), _pathsWithoutPrefix("join_request_payload", paths)...)
		case "join_request_payload.dev_nonce":
			if dst.Payload == nil {
				dst.Payload = &Message_JoinRequestPayload{}
			}
			if dst.Payload.(*Message_JoinRequestPayload).JoinRequestPayload == nil {
				dst.Payload.(*Message_JoinRequestPayload).JoinRequestPayload = &JoinRequestPayload{}
			}
			dst.Payload.(*Message_JoinRequestPayload).JoinRequestPayload.SetFields(src.GetJoinRequestPayload(), _pathsWithoutPrefix("join_request_payload", paths)...)
		case "join_request_payload.join_eui":
			if dst.Payload == nil {
				dst.Payload = &Message_JoinRequestPayload{}
			}
			if dst.Payload.(*Message_JoinRequestPayload).JoinRequestPayload == nil {
				dst.Payload.(*Message_JoinRequestPayload).JoinRequestPayload = &JoinRequestPayload{}
			}
			dst.Payload.(*Message_JoinRequestPayload).JoinRequestPayload.SetFields(src.GetJoinRequestPayload(), _pathsWithoutPrefix("join_request_payload", paths)...)
		case "m_hdr":
			dst.MHDR = src.MHDR
		case "m_hdr.m_type":
			dst.MHDR.SetFields(&src.MHDR, _pathsWithoutPrefix("m_hdr", paths)...)
		case "m_hdr.major":
			dst.MHDR.SetFields(&src.MHDR, _pathsWithoutPrefix("m_hdr", paths)...)
		case "mac_payload":
			if dst.Payload == nil {
				dst.Payload = &Message_MACPayload{}
			}
			dst.Payload.(*Message_MACPayload).MACPayload = src.GetMACPayload()
		case "mac_payload.decoded_payload":
			if dst.Payload == nil {
				dst.Payload = &Message_MACPayload{}
			}
			if dst.Payload.(*Message_MACPayload).MACPayload == nil {
				dst.Payload.(*Message_MACPayload).MACPayload = &MACPayload{}
			}
			dst.Payload.(*Message_MACPayload).MACPayload.SetFields(src.GetMACPayload(), _pathsWithoutPrefix("mac_payload", paths)...)
		case "mac_payload.f_hdr":
			if dst.Payload == nil {
				dst.Payload = &Message_MACPayload{}
			}
			if dst.Payload.(*Message_MACPayload).MACPayload == nil {
				dst.Payload.(*Message_MACPayload).MACPayload = &MACPayload{}
			}
			dst.Payload.(*Message_MACPayload).MACPayload.SetFields(src.GetMACPayload(), _pathsWithoutPrefix("mac_payload", paths)...)
		case "mac_payload.f_hdr.dev_addr":
			if dst.Payload == nil {
				dst.Payload = &Message_MACPayload{}
			}
			if dst.Payload.(*Message_MACPayload).MACPayload == nil {
				dst.Payload.(*Message_MACPayload).MACPayload = &MACPayload{}
			}
			dst.Payload.(*Message_MACPayload).MACPayload.SetFields(src.GetMACPayload(), _pathsWithoutPrefix("mac_payload", paths)...)
		case "mac_payload.f_hdr.f_cnt":
			if dst.Payload == nil {
				dst.Payload = &Message_MACPayload{}
			}
			if dst.Payload.(*Message_MACPayload).MACPayload == nil {
				dst.Payload.(*Message_MACPayload).MACPayload = &MACPayload{}
			}
			dst.Payload.(*Message_MACPayload).MACPayload.SetFields(src.GetMACPayload(), _pathsWithoutPrefix("mac_payload", paths)...)
		case "mac_payload.f_hdr.f_ctrl":
			if dst.Payload == nil {
				dst.Payload = &Message_MACPayload{}
			}
			if dst.Payload.(*Message_MACPayload).MACPayload == nil {
				dst.Payload.(*Message_MACPayload).MACPayload = &MACPayload{}
			}
			dst.Payload.(*Message_MACPayload).MACPayload.SetFields(src.GetMACPayload(), _pathsWithoutPrefix("mac_payload", paths)...)
		case "mac_payload.f_hdr.f_ctrl.ack":
			if dst.Payload == nil {
				dst.Payload = &Message_MACPayload{}
			}
			if dst.Payload.(*Message_MACPayload).MACPayload == nil {
				dst.Payload.(*Message_MACPayload).MACPayload = &MACPayload{}
			}
			dst.Payload.(*Message_MACPayload).MACPayload.SetFields(src.GetMACPayload(), _pathsWithoutPrefix("mac_payload", paths)...)
		case "mac_payload.f_hdr.f_ctrl.adr":
			if dst.Payload == nil {
				dst.Payload = &Message_MACPayload{}
			}
			if dst.Payload.(*Message_MACPayload).MACPayload == nil {
				dst.Payload.(*Message_MACPayload).MACPayload = &MACPayload{}
			}
			dst.Payload.(*Message_MACPayload).MACPayload.SetFields(src.GetMACPayload(), _pathsWithoutPrefix("mac_payload", paths)...)
		case "mac_payload.f_hdr.f_ctrl.adr_ack_req":
			if dst.Payload == nil {
				dst.Payload = &Message_MACPayload{}
			}
			if dst.Payload.(*Message_MACPayload).MACPayload == nil {
				dst.Payload.(*Message_MACPayload).MACPayload = &MACPayload{}
			}
			dst.Payload.(*Message_MACPayload).MACPayload.SetFields(src.GetMACPayload(), _pathsWithoutPrefix("mac_payload", paths)...)
		case "mac_payload.f_hdr.f_ctrl.class_b":
			if dst.Payload == nil {
				dst.Payload = &Message_MACPayload{}
			}
			if dst.Payload.(*Message_MACPayload).MACPayload == nil {
				dst.Payload.(*Message_MACPayload).MACPayload = &MACPayload{}
			}
			dst.Payload.(*Message_MACPayload).MACPayload.SetFields(src.GetMACPayload(), _pathsWithoutPrefix("mac_payload", paths)...)
		case "mac_payload.f_hdr.f_ctrl.f_pending":
			if dst.Payload == nil {
				dst.Payload = &Message_MACPayload{}
			}
			if dst.Payload.(*Message_MACPayload).MACPayload == nil {
				dst.Payload.(*Message_MACPayload).MACPayload = &MACPayload{}
			}
			dst.Payload.(*Message_MACPayload).MACPayload.SetFields(src.GetMACPayload(), _pathsWithoutPrefix("mac_payload", paths)...)
		case "mac_payload.f_hdr.f_opts":
			if dst.Payload == nil {
				dst.Payload = &Message_MACPayload{}
			}
			if dst.Payload.(*Message_MACPayload).MACPayload == nil {
				dst.Payload.(*Message_MACPayload).MACPayload = &MACPayload{}
			}
			dst.Payload.(*Message_MACPayload).MACPayload.SetFields(src.GetMACPayload(), _pathsWithoutPrefix("mac_payload", paths)...)
		case "mac_payload.f_port":
			if dst.Payload == nil {
				dst.Payload = &Message_MACPayload{}
			}
			if dst.Payload.(*Message_MACPayload).MACPayload == nil {
				dst.Payload.(*Message_MACPayload).MACPayload = &MACPayload{}
			}
			dst.Payload.(*Message_MACPayload).MACPayload.SetFields(src.GetMACPayload(), _pathsWithoutPrefix("mac_payload", paths)...)
		case "mac_payload.frm_payload":
			if dst.Payload == nil {
				dst.Payload = &Message_MACPayload{}
			}
			if dst.Payload.(*Message_MACPayload).MACPayload == nil {
				dst.Payload.(*Message_MACPayload).MACPayload = &MACPayload{}
			}
			dst.Payload.(*Message_MACPayload).MACPayload.SetFields(src.GetMACPayload(), _pathsWithoutPrefix("mac_payload", paths)...)
		case "mic":
			dst.MIC = src.MIC
		case "rejoin_request_payload":
			if dst.Payload == nil {
				dst.Payload = &Message_RejoinRequestPayload{}
			}
			dst.Payload.(*Message_RejoinRequestPayload).RejoinRequestPayload = src.GetRejoinRequestPayload()
		case "rejoin_request_payload.dev_eui":
			if dst.Payload == nil {
				dst.Payload = &Message_RejoinRequestPayload{}
			}
			if dst.Payload.(*Message_RejoinRequestPayload).RejoinRequestPayload == nil {
				dst.Payload.(*Message_RejoinRequestPayload).RejoinRequestPayload = &RejoinRequestPayload{}
			}
			dst.Payload.(*Message_RejoinRequestPayload).RejoinRequestPayload.SetFields(src.GetRejoinRequestPayload(), _pathsWithoutPrefix("rejoin_request_payload", paths)...)
		case "rejoin_request_payload.join_eui":
			if dst.Payload == nil {
				dst.Payload = &Message_RejoinRequestPayload{}
			}
			if dst.Payload.(*Message_RejoinRequestPayload).RejoinRequestPayload == nil {
				dst.Payload.(*Message_RejoinRequestPayload).RejoinRequestPayload = &RejoinRequestPayload{}
			}
			dst.Payload.(*Message_RejoinRequestPayload).RejoinRequestPayload.SetFields(src.GetRejoinRequestPayload(), _pathsWithoutPrefix("rejoin_request_payload", paths)...)
		case "rejoin_request_payload.net_id":
			if dst.Payload == nil {
				dst.Payload = &Message_RejoinRequestPayload{}
			}
			if dst.Payload.(*Message_RejoinRequestPayload).RejoinRequestPayload == nil {
				dst.Payload.(*Message_RejoinRequestPayload).RejoinRequestPayload = &RejoinRequestPayload{}
			}
			dst.Payload.(*Message_RejoinRequestPayload).RejoinRequestPayload.SetFields(src.GetRejoinRequestPayload(), _pathsWithoutPrefix("rejoin_request_payload", paths)...)
		case "rejoin_request_payload.rejoin_cnt":
			if dst.Payload == nil {
				dst.Payload = &Message_RejoinRequestPayload{}
			}
			if dst.Payload.(*Message_RejoinRequestPayload).RejoinRequestPayload == nil {
				dst.Payload.(*Message_RejoinRequestPayload).RejoinRequestPayload = &RejoinRequestPayload{}
			}
			dst.Payload.(*Message_RejoinRequestPayload).RejoinRequestPayload.SetFields(src.GetRejoinRequestPayload(), _pathsWithoutPrefix("rejoin_request_payload", paths)...)
		case "rejoin_request_payload.rejoin_type":
			if dst.Payload == nil {
				dst.Payload = &Message_RejoinRequestPayload{}
			}
			if dst.Payload.(*Message_RejoinRequestPayload).RejoinRequestPayload == nil {
				dst.Payload.(*Message_RejoinRequestPayload).RejoinRequestPayload = &RejoinRequestPayload{}
			}
			dst.Payload.(*Message_RejoinRequestPayload).RejoinRequestPayload.SetFields(src.GetRejoinRequestPayload(), _pathsWithoutPrefix("rejoin_request_payload", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _MHDRFieldPaths = [...]string{
	"m_type",
	"major",
}

func (*MHDR) FieldMaskPaths() []string {
	ret := make([]string, len(_MHDRFieldPaths))
	copy(ret, _MHDRFieldPaths[:])
	return ret
}

func (dst *MHDR) SetFields(src *MHDR, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "m_type":
			dst.MType = src.MType
		case "major":
			dst.Major = src.Major
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _MACPayloadFieldPaths = [...]string{
	"decoded_payload",
	"f_hdr",
	"f_hdr.dev_addr",
	"f_hdr.f_cnt",
	"f_hdr.f_ctrl",
	"f_hdr.f_ctrl.ack",
	"f_hdr.f_ctrl.adr",
	"f_hdr.f_ctrl.adr_ack_req",
	"f_hdr.f_ctrl.class_b",
	"f_hdr.f_ctrl.f_pending",
	"f_hdr.f_opts",
	"f_port",
	"frm_payload",
}

func (*MACPayload) FieldMaskPaths() []string {
	ret := make([]string, len(_MACPayloadFieldPaths))
	copy(ret, _MACPayloadFieldPaths[:])
	return ret
}

func (dst *MACPayload) SetFields(src *MACPayload, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "decoded_payload":
			dst.DecodedPayload = src.DecodedPayload
		case "f_hdr":
			dst.FHDR = src.FHDR
		case "f_hdr.dev_addr":
			dst.FHDR.SetFields(&src.FHDR, _pathsWithoutPrefix("f_hdr", paths)...)
		case "f_hdr.f_cnt":
			dst.FHDR.SetFields(&src.FHDR, _pathsWithoutPrefix("f_hdr", paths)...)
		case "f_hdr.f_ctrl":
			dst.FHDR.SetFields(&src.FHDR, _pathsWithoutPrefix("f_hdr", paths)...)
		case "f_hdr.f_ctrl.ack":
			dst.FHDR.SetFields(&src.FHDR, _pathsWithoutPrefix("f_hdr", paths)...)
		case "f_hdr.f_ctrl.adr":
			dst.FHDR.SetFields(&src.FHDR, _pathsWithoutPrefix("f_hdr", paths)...)
		case "f_hdr.f_ctrl.adr_ack_req":
			dst.FHDR.SetFields(&src.FHDR, _pathsWithoutPrefix("f_hdr", paths)...)
		case "f_hdr.f_ctrl.class_b":
			dst.FHDR.SetFields(&src.FHDR, _pathsWithoutPrefix("f_hdr", paths)...)
		case "f_hdr.f_ctrl.f_pending":
			dst.FHDR.SetFields(&src.FHDR, _pathsWithoutPrefix("f_hdr", paths)...)
		case "f_hdr.f_opts":
			dst.FHDR.SetFields(&src.FHDR, _pathsWithoutPrefix("f_hdr", paths)...)
		case "f_port":
			dst.FPort = src.FPort
		case "frm_payload":
			dst.FRMPayload = src.FRMPayload
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _FHDRFieldPaths = [...]string{
	"dev_addr",
	"f_cnt",
	"f_ctrl",
	"f_ctrl.ack",
	"f_ctrl.adr",
	"f_ctrl.adr_ack_req",
	"f_ctrl.class_b",
	"f_ctrl.f_pending",
	"f_opts",
}

func (*FHDR) FieldMaskPaths() []string {
	ret := make([]string, len(_FHDRFieldPaths))
	copy(ret, _FHDRFieldPaths[:])
	return ret
}

func (dst *FHDR) SetFields(src *FHDR, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "dev_addr":
			dst.DevAddr = src.DevAddr
		case "f_cnt":
			dst.FCnt = src.FCnt
		case "f_ctrl":
			dst.FCtrl = src.FCtrl
		case "f_ctrl.ack":
			dst.FCtrl.SetFields(&src.FCtrl, _pathsWithoutPrefix("f_ctrl", paths)...)
		case "f_ctrl.adr":
			dst.FCtrl.SetFields(&src.FCtrl, _pathsWithoutPrefix("f_ctrl", paths)...)
		case "f_ctrl.adr_ack_req":
			dst.FCtrl.SetFields(&src.FCtrl, _pathsWithoutPrefix("f_ctrl", paths)...)
		case "f_ctrl.class_b":
			dst.FCtrl.SetFields(&src.FCtrl, _pathsWithoutPrefix("f_ctrl", paths)...)
		case "f_ctrl.f_pending":
			dst.FCtrl.SetFields(&src.FCtrl, _pathsWithoutPrefix("f_ctrl", paths)...)
		case "f_opts":
			dst.FOpts = src.FOpts
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _FCtrlFieldPaths = [...]string{
	"ack",
	"adr",
	"adr_ack_req",
	"class_b",
	"f_pending",
}

func (*FCtrl) FieldMaskPaths() []string {
	ret := make([]string, len(_FCtrlFieldPaths))
	copy(ret, _FCtrlFieldPaths[:])
	return ret
}

func (dst *FCtrl) SetFields(src *FCtrl, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "ack":
			dst.Ack = src.Ack
		case "adr":
			dst.ADR = src.ADR
		case "adr_ack_req":
			dst.ADRAckReq = src.ADRAckReq
		case "class_b":
			dst.ClassB = src.ClassB
		case "f_pending":
			dst.FPending = src.FPending
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _JoinRequestPayloadFieldPaths = [...]string{
	"dev_eui",
	"dev_nonce",
	"join_eui",
}

func (*JoinRequestPayload) FieldMaskPaths() []string {
	ret := make([]string, len(_JoinRequestPayloadFieldPaths))
	copy(ret, _JoinRequestPayloadFieldPaths[:])
	return ret
}

func (dst *JoinRequestPayload) SetFields(src *JoinRequestPayload, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "dev_eui":
			dst.DevEUI = src.DevEUI
		case "dev_nonce":
			dst.DevNonce = src.DevNonce
		case "join_eui":
			dst.JoinEUI = src.JoinEUI
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _RejoinRequestPayloadFieldPaths = [...]string{
	"dev_eui",
	"join_eui",
	"net_id",
	"rejoin_cnt",
	"rejoin_type",
}

func (*RejoinRequestPayload) FieldMaskPaths() []string {
	ret := make([]string, len(_RejoinRequestPayloadFieldPaths))
	copy(ret, _RejoinRequestPayloadFieldPaths[:])
	return ret
}

func (dst *RejoinRequestPayload) SetFields(src *RejoinRequestPayload, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "dev_eui":
			dst.DevEUI = src.DevEUI
		case "join_eui":
			dst.JoinEUI = src.JoinEUI
		case "net_id":
			dst.NetID = src.NetID
		case "rejoin_cnt":
			dst.RejoinCnt = src.RejoinCnt
		case "rejoin_type":
			dst.RejoinType = src.RejoinType
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _JoinAcceptPayloadFieldPaths = [...]string{
	"cf_list",
	"cf_list.ch_masks",
	"cf_list.freq",
	"cf_list.type",
	"dev_addr",
	"dl_settings",
	"dl_settings.opt_neg",
	"dl_settings.rx1_dr_offset",
	"dl_settings.rx2_dr",
	"encrypted",
	"join_nonce",
	"net_id",
	"rx_delay",
}

func (*JoinAcceptPayload) FieldMaskPaths() []string {
	ret := make([]string, len(_JoinAcceptPayloadFieldPaths))
	copy(ret, _JoinAcceptPayloadFieldPaths[:])
	return ret
}

func (dst *JoinAcceptPayload) SetFields(src *JoinAcceptPayload, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "cf_list":
			dst.CFList = src.CFList
		case "cf_list.ch_masks":
			if dst.CFList == nil {
				dst.CFList = &CFList{}
			}
			dst.CFList.SetFields(src.CFList, _pathsWithoutPrefix("cf_list", paths)...)
		case "cf_list.freq":
			if dst.CFList == nil {
				dst.CFList = &CFList{}
			}
			dst.CFList.SetFields(src.CFList, _pathsWithoutPrefix("cf_list", paths)...)
		case "cf_list.type":
			if dst.CFList == nil {
				dst.CFList = &CFList{}
			}
			dst.CFList.SetFields(src.CFList, _pathsWithoutPrefix("cf_list", paths)...)
		case "dev_addr":
			dst.DevAddr = src.DevAddr
		case "dl_settings":
			dst.DLSettings = src.DLSettings
		case "dl_settings.opt_neg":
			dst.DLSettings.SetFields(&src.DLSettings, _pathsWithoutPrefix("dl_settings", paths)...)
		case "dl_settings.rx1_dr_offset":
			dst.DLSettings.SetFields(&src.DLSettings, _pathsWithoutPrefix("dl_settings", paths)...)
		case "dl_settings.rx2_dr":
			dst.DLSettings.SetFields(&src.DLSettings, _pathsWithoutPrefix("dl_settings", paths)...)
		case "encrypted":
			dst.Encrypted = src.Encrypted
		case "join_nonce":
			dst.JoinNonce = src.JoinNonce
		case "net_id":
			dst.NetID = src.NetID
		case "rx_delay":
			dst.RxDelay = src.RxDelay
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _DLSettingsFieldPaths = [...]string{
	"opt_neg",
	"rx1_dr_offset",
	"rx2_dr",
}

func (*DLSettings) FieldMaskPaths() []string {
	ret := make([]string, len(_DLSettingsFieldPaths))
	copy(ret, _DLSettingsFieldPaths[:])
	return ret
}

func (dst *DLSettings) SetFields(src *DLSettings, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "opt_neg":
			dst.OptNeg = src.OptNeg
		case "rx1_dr_offset":
			dst.Rx1DROffset = src.Rx1DROffset
		case "rx2_dr":
			dst.Rx2DR = src.Rx2DR
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _CFListFieldPaths = [...]string{
	"ch_masks",
	"freq",
	"type",
}

func (*CFList) FieldMaskPaths() []string {
	ret := make([]string, len(_CFListFieldPaths))
	copy(ret, _CFListFieldPaths[:])
	return ret
}

func (dst *CFList) SetFields(src *CFList, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "ch_masks":
			dst.ChMasks = src.ChMasks
		case "freq":
			dst.Freq = src.Freq
		case "type":
			dst.Type = src.Type
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _TxSettingsFieldPaths = [...]string{
	"bandwidth",
	"bit_rate",
	"channel_index",
	"coding_rate",
	"data_rate_index",
	"enable_crc",
	"frequency",
	"invert_polarization",
	"modulation",
	"spreading_factor",
	"tx_power",
}

func (*TxSettings) FieldMaskPaths() []string {
	ret := make([]string, len(_TxSettingsFieldPaths))
	copy(ret, _TxSettingsFieldPaths[:])
	return ret
}

func (dst *TxSettings) SetFields(src *TxSettings, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "bandwidth":
			dst.Bandwidth = src.Bandwidth
		case "bit_rate":
			dst.BitRate = src.BitRate
		case "channel_index":
			dst.ChannelIndex = src.ChannelIndex
		case "coding_rate":
			dst.CodingRate = src.CodingRate
		case "data_rate_index":
			dst.DataRateIndex = src.DataRateIndex
		case "enable_crc":
			dst.EnableCRC = src.EnableCRC
		case "frequency":
			dst.Frequency = src.Frequency
		case "invert_polarization":
			dst.InvertPolarization = src.InvertPolarization
		case "modulation":
			dst.Modulation = src.Modulation
		case "spreading_factor":
			dst.SpreadingFactor = src.SpreadingFactor
		case "tx_power":
			dst.TxPower = src.TxPower
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _MACCommandFieldPaths = [...]string{
	"adr_param_setup_req",
	"adr_param_setup_req.adr_ack_delay_exponent",
	"adr_param_setup_req.adr_ack_limit_exponent",
	"beacon_freq_ans",
	"beacon_freq_ans.frequency_ack",
	"beacon_freq_req",
	"beacon_freq_req.frequency",
	"beacon_timing_ans",
	"beacon_timing_ans.channel_index",
	"beacon_timing_ans.delay",
	"cid",
	"dev_status_ans",
	"dev_status_ans.battery",
	"dev_status_ans.margin",
	"device_mode_conf",
	"device_mode_conf.class",
	"device_mode_ind",
	"device_mode_ind.class",
	"device_time_ans",
	"device_time_ans.time",
	"dl_channel_ans",
	"dl_channel_ans.channel_index_ack",
	"dl_channel_ans.frequency_ack",
	"dl_channel_req",
	"dl_channel_req.channel_index",
	"dl_channel_req.frequency",
	"duty_cycle_req",
	"duty_cycle_req.max_duty_cycle",
	"force_rejoin_req",
	"force_rejoin_req.data_rate_index",
	"force_rejoin_req.max_retries",
	"force_rejoin_req.period_exponent",
	"force_rejoin_req.rejoin_type",
	"link_adr_ans",
	"link_adr_ans.channel_mask_ack",
	"link_adr_ans.data_rate_index_ack",
	"link_adr_ans.tx_power_index_ack",
	"link_adr_req",
	"link_adr_req.channel_mask",
	"link_adr_req.channel_mask_control",
	"link_adr_req.data_rate_index",
	"link_adr_req.nb_trans",
	"link_adr_req.tx_power_index",
	"link_check_ans",
	"link_check_ans.gateway_count",
	"link_check_ans.margin",
	"new_channel_ans",
	"new_channel_ans.data_rate_ack",
	"new_channel_ans.frequency_ack",
	"new_channel_req",
	"new_channel_req.channel_index",
	"new_channel_req.frequency",
	"new_channel_req.max_data_rate_index",
	"new_channel_req.min_data_rate_index",
	"ping_slot_channel_ans",
	"ping_slot_channel_ans.data_rate_index_ack",
	"ping_slot_channel_ans.frequency_ack",
	"ping_slot_channel_req",
	"ping_slot_channel_req.data_rate_index",
	"ping_slot_channel_req.frequency",
	"ping_slot_info_req",
	"ping_slot_info_req.period",
	"raw_payload",
	"rejoin_param_setup_ans",
	"rejoin_param_setup_ans.max_time_exponent_ack",
	"rejoin_param_setup_req",
	"rejoin_param_setup_req.max_count_exponent",
	"rejoin_param_setup_req.max_time_exponent",
	"rekey_conf",
	"rekey_conf.minor_version",
	"rekey_ind",
	"rekey_ind.minor_version",
	"reset_conf",
	"reset_conf.minor_version",
	"reset_ind",
	"reset_ind.minor_version",
	"rx_param_setup_ans",
	"rx_param_setup_ans.rx1_data_rate_offset_ack",
	"rx_param_setup_ans.rx2_data_rate_index_ack",
	"rx_param_setup_ans.rx2_frequency_ack",
	"rx_param_setup_req",
	"rx_param_setup_req.rx1_data_rate_offset",
	"rx_param_setup_req.rx2_data_rate_index",
	"rx_param_setup_req.rx2_frequency",
	"rx_timing_setup_req",
	"rx_timing_setup_req.delay",
	"tx_param_setup_req",
	"tx_param_setup_req.downlink_dwell_time",
	"tx_param_setup_req.max_eirp_index",
	"tx_param_setup_req.uplink_dwell_time",
}

func (*MACCommand) FieldMaskPaths() []string {
	ret := make([]string, len(_MACCommandFieldPaths))
	copy(ret, _MACCommandFieldPaths[:])
	return ret
}

func (dst *MACCommand) SetFields(src *MACCommand, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "adr_param_setup_req":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_ADRParamSetupReq_{}
			}
			dst.Payload.(*MACCommand_ADRParamSetupReq_).ADRParamSetupReq = src.GetADRParamSetupReq()
		case "adr_param_setup_req.adr_ack_delay_exponent":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_ADRParamSetupReq_{}
			}
			if dst.Payload.(*MACCommand_ADRParamSetupReq_).ADRParamSetupReq == nil {
				dst.Payload.(*MACCommand_ADRParamSetupReq_).ADRParamSetupReq = &MACCommand_ADRParamSetupReq{}
			}
			dst.Payload.(*MACCommand_ADRParamSetupReq_).ADRParamSetupReq.SetFields(src.GetADRParamSetupReq(), _pathsWithoutPrefix("adr_param_setup_req", paths)...)
		case "adr_param_setup_req.adr_ack_limit_exponent":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_ADRParamSetupReq_{}
			}
			if dst.Payload.(*MACCommand_ADRParamSetupReq_).ADRParamSetupReq == nil {
				dst.Payload.(*MACCommand_ADRParamSetupReq_).ADRParamSetupReq = &MACCommand_ADRParamSetupReq{}
			}
			dst.Payload.(*MACCommand_ADRParamSetupReq_).ADRParamSetupReq.SetFields(src.GetADRParamSetupReq(), _pathsWithoutPrefix("adr_param_setup_req", paths)...)
		case "beacon_freq_ans":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_BeaconFreqAns_{}
			}
			dst.Payload.(*MACCommand_BeaconFreqAns_).BeaconFreqAns = src.GetBeaconFreqAns()
		case "beacon_freq_ans.frequency_ack":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_BeaconFreqAns_{}
			}
			if dst.Payload.(*MACCommand_BeaconFreqAns_).BeaconFreqAns == nil {
				dst.Payload.(*MACCommand_BeaconFreqAns_).BeaconFreqAns = &MACCommand_BeaconFreqAns{}
			}
			dst.Payload.(*MACCommand_BeaconFreqAns_).BeaconFreqAns.SetFields(src.GetBeaconFreqAns(), _pathsWithoutPrefix("beacon_freq_ans", paths)...)
		case "beacon_freq_req":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_BeaconFreqReq_{}
			}
			dst.Payload.(*MACCommand_BeaconFreqReq_).BeaconFreqReq = src.GetBeaconFreqReq()
		case "beacon_freq_req.frequency":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_BeaconFreqReq_{}
			}
			if dst.Payload.(*MACCommand_BeaconFreqReq_).BeaconFreqReq == nil {
				dst.Payload.(*MACCommand_BeaconFreqReq_).BeaconFreqReq = &MACCommand_BeaconFreqReq{}
			}
			dst.Payload.(*MACCommand_BeaconFreqReq_).BeaconFreqReq.SetFields(src.GetBeaconFreqReq(), _pathsWithoutPrefix("beacon_freq_req", paths)...)
		case "beacon_timing_ans":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_BeaconTimingAns_{}
			}
			dst.Payload.(*MACCommand_BeaconTimingAns_).BeaconTimingAns = src.GetBeaconTimingAns()
		case "beacon_timing_ans.channel_index":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_BeaconTimingAns_{}
			}
			if dst.Payload.(*MACCommand_BeaconTimingAns_).BeaconTimingAns == nil {
				dst.Payload.(*MACCommand_BeaconTimingAns_).BeaconTimingAns = &MACCommand_BeaconTimingAns{}
			}
			dst.Payload.(*MACCommand_BeaconTimingAns_).BeaconTimingAns.SetFields(src.GetBeaconTimingAns(), _pathsWithoutPrefix("beacon_timing_ans", paths)...)
		case "beacon_timing_ans.delay":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_BeaconTimingAns_{}
			}
			if dst.Payload.(*MACCommand_BeaconTimingAns_).BeaconTimingAns == nil {
				dst.Payload.(*MACCommand_BeaconTimingAns_).BeaconTimingAns = &MACCommand_BeaconTimingAns{}
			}
			dst.Payload.(*MACCommand_BeaconTimingAns_).BeaconTimingAns.SetFields(src.GetBeaconTimingAns(), _pathsWithoutPrefix("beacon_timing_ans", paths)...)
		case "cid":
			dst.CID = src.CID
		case "dev_status_ans":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_DevStatusAns_{}
			}
			dst.Payload.(*MACCommand_DevStatusAns_).DevStatusAns = src.GetDevStatusAns()
		case "dev_status_ans.battery":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_DevStatusAns_{}
			}
			if dst.Payload.(*MACCommand_DevStatusAns_).DevStatusAns == nil {
				dst.Payload.(*MACCommand_DevStatusAns_).DevStatusAns = &MACCommand_DevStatusAns{}
			}
			dst.Payload.(*MACCommand_DevStatusAns_).DevStatusAns.SetFields(src.GetDevStatusAns(), _pathsWithoutPrefix("dev_status_ans", paths)...)
		case "dev_status_ans.margin":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_DevStatusAns_{}
			}
			if dst.Payload.(*MACCommand_DevStatusAns_).DevStatusAns == nil {
				dst.Payload.(*MACCommand_DevStatusAns_).DevStatusAns = &MACCommand_DevStatusAns{}
			}
			dst.Payload.(*MACCommand_DevStatusAns_).DevStatusAns.SetFields(src.GetDevStatusAns(), _pathsWithoutPrefix("dev_status_ans", paths)...)
		case "device_mode_conf":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_DeviceModeConf_{}
			}
			dst.Payload.(*MACCommand_DeviceModeConf_).DeviceModeConf = src.GetDeviceModeConf()
		case "device_mode_conf.class":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_DeviceModeConf_{}
			}
			if dst.Payload.(*MACCommand_DeviceModeConf_).DeviceModeConf == nil {
				dst.Payload.(*MACCommand_DeviceModeConf_).DeviceModeConf = &MACCommand_DeviceModeConf{}
			}
			dst.Payload.(*MACCommand_DeviceModeConf_).DeviceModeConf.SetFields(src.GetDeviceModeConf(), _pathsWithoutPrefix("device_mode_conf", paths)...)
		case "device_mode_ind":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_DeviceModeInd_{}
			}
			dst.Payload.(*MACCommand_DeviceModeInd_).DeviceModeInd = src.GetDeviceModeInd()
		case "device_mode_ind.class":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_DeviceModeInd_{}
			}
			if dst.Payload.(*MACCommand_DeviceModeInd_).DeviceModeInd == nil {
				dst.Payload.(*MACCommand_DeviceModeInd_).DeviceModeInd = &MACCommand_DeviceModeInd{}
			}
			dst.Payload.(*MACCommand_DeviceModeInd_).DeviceModeInd.SetFields(src.GetDeviceModeInd(), _pathsWithoutPrefix("device_mode_ind", paths)...)
		case "device_time_ans":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_DeviceTimeAns_{}
			}
			dst.Payload.(*MACCommand_DeviceTimeAns_).DeviceTimeAns = src.GetDeviceTimeAns()
		case "device_time_ans.time":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_DeviceTimeAns_{}
			}
			if dst.Payload.(*MACCommand_DeviceTimeAns_).DeviceTimeAns == nil {
				dst.Payload.(*MACCommand_DeviceTimeAns_).DeviceTimeAns = &MACCommand_DeviceTimeAns{}
			}
			dst.Payload.(*MACCommand_DeviceTimeAns_).DeviceTimeAns.SetFields(src.GetDeviceTimeAns(), _pathsWithoutPrefix("device_time_ans", paths)...)
		case "dl_channel_ans":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_DlChannelAns{}
			}
			dst.Payload.(*MACCommand_DlChannelAns).DlChannelAns = src.GetDlChannelAns()
		case "dl_channel_ans.channel_index_ack":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_DlChannelAns{}
			}
			if dst.Payload.(*MACCommand_DlChannelAns).DlChannelAns == nil {
				dst.Payload.(*MACCommand_DlChannelAns).DlChannelAns = &MACCommand_DLChannelAns{}
			}
			dst.Payload.(*MACCommand_DlChannelAns).DlChannelAns.SetFields(src.GetDlChannelAns(), _pathsWithoutPrefix("dl_channel_ans", paths)...)
		case "dl_channel_ans.frequency_ack":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_DlChannelAns{}
			}
			if dst.Payload.(*MACCommand_DlChannelAns).DlChannelAns == nil {
				dst.Payload.(*MACCommand_DlChannelAns).DlChannelAns = &MACCommand_DLChannelAns{}
			}
			dst.Payload.(*MACCommand_DlChannelAns).DlChannelAns.SetFields(src.GetDlChannelAns(), _pathsWithoutPrefix("dl_channel_ans", paths)...)
		case "dl_channel_req":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_DlChannelReq{}
			}
			dst.Payload.(*MACCommand_DlChannelReq).DlChannelReq = src.GetDlChannelReq()
		case "dl_channel_req.channel_index":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_DlChannelReq{}
			}
			if dst.Payload.(*MACCommand_DlChannelReq).DlChannelReq == nil {
				dst.Payload.(*MACCommand_DlChannelReq).DlChannelReq = &MACCommand_DLChannelReq{}
			}
			dst.Payload.(*MACCommand_DlChannelReq).DlChannelReq.SetFields(src.GetDlChannelReq(), _pathsWithoutPrefix("dl_channel_req", paths)...)
		case "dl_channel_req.frequency":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_DlChannelReq{}
			}
			if dst.Payload.(*MACCommand_DlChannelReq).DlChannelReq == nil {
				dst.Payload.(*MACCommand_DlChannelReq).DlChannelReq = &MACCommand_DLChannelReq{}
			}
			dst.Payload.(*MACCommand_DlChannelReq).DlChannelReq.SetFields(src.GetDlChannelReq(), _pathsWithoutPrefix("dl_channel_req", paths)...)
		case "duty_cycle_req":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_DutyCycleReq_{}
			}
			dst.Payload.(*MACCommand_DutyCycleReq_).DutyCycleReq = src.GetDutyCycleReq()
		case "duty_cycle_req.max_duty_cycle":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_DutyCycleReq_{}
			}
			if dst.Payload.(*MACCommand_DutyCycleReq_).DutyCycleReq == nil {
				dst.Payload.(*MACCommand_DutyCycleReq_).DutyCycleReq = &MACCommand_DutyCycleReq{}
			}
			dst.Payload.(*MACCommand_DutyCycleReq_).DutyCycleReq.SetFields(src.GetDutyCycleReq(), _pathsWithoutPrefix("duty_cycle_req", paths)...)
		case "force_rejoin_req":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_ForceRejoinReq_{}
			}
			dst.Payload.(*MACCommand_ForceRejoinReq_).ForceRejoinReq = src.GetForceRejoinReq()
		case "force_rejoin_req.data_rate_index":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_ForceRejoinReq_{}
			}
			if dst.Payload.(*MACCommand_ForceRejoinReq_).ForceRejoinReq == nil {
				dst.Payload.(*MACCommand_ForceRejoinReq_).ForceRejoinReq = &MACCommand_ForceRejoinReq{}
			}
			dst.Payload.(*MACCommand_ForceRejoinReq_).ForceRejoinReq.SetFields(src.GetForceRejoinReq(), _pathsWithoutPrefix("force_rejoin_req", paths)...)
		case "force_rejoin_req.max_retries":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_ForceRejoinReq_{}
			}
			if dst.Payload.(*MACCommand_ForceRejoinReq_).ForceRejoinReq == nil {
				dst.Payload.(*MACCommand_ForceRejoinReq_).ForceRejoinReq = &MACCommand_ForceRejoinReq{}
			}
			dst.Payload.(*MACCommand_ForceRejoinReq_).ForceRejoinReq.SetFields(src.GetForceRejoinReq(), _pathsWithoutPrefix("force_rejoin_req", paths)...)
		case "force_rejoin_req.period_exponent":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_ForceRejoinReq_{}
			}
			if dst.Payload.(*MACCommand_ForceRejoinReq_).ForceRejoinReq == nil {
				dst.Payload.(*MACCommand_ForceRejoinReq_).ForceRejoinReq = &MACCommand_ForceRejoinReq{}
			}
			dst.Payload.(*MACCommand_ForceRejoinReq_).ForceRejoinReq.SetFields(src.GetForceRejoinReq(), _pathsWithoutPrefix("force_rejoin_req", paths)...)
		case "force_rejoin_req.rejoin_type":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_ForceRejoinReq_{}
			}
			if dst.Payload.(*MACCommand_ForceRejoinReq_).ForceRejoinReq == nil {
				dst.Payload.(*MACCommand_ForceRejoinReq_).ForceRejoinReq = &MACCommand_ForceRejoinReq{}
			}
			dst.Payload.(*MACCommand_ForceRejoinReq_).ForceRejoinReq.SetFields(src.GetForceRejoinReq(), _pathsWithoutPrefix("force_rejoin_req", paths)...)
		case "link_adr_ans":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_LinkADRAns_{}
			}
			dst.Payload.(*MACCommand_LinkADRAns_).LinkADRAns = src.GetLinkADRAns()
		case "link_adr_ans.channel_mask_ack":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_LinkADRAns_{}
			}
			if dst.Payload.(*MACCommand_LinkADRAns_).LinkADRAns == nil {
				dst.Payload.(*MACCommand_LinkADRAns_).LinkADRAns = &MACCommand_LinkADRAns{}
			}
			dst.Payload.(*MACCommand_LinkADRAns_).LinkADRAns.SetFields(src.GetLinkADRAns(), _pathsWithoutPrefix("link_adr_ans", paths)...)
		case "link_adr_ans.data_rate_index_ack":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_LinkADRAns_{}
			}
			if dst.Payload.(*MACCommand_LinkADRAns_).LinkADRAns == nil {
				dst.Payload.(*MACCommand_LinkADRAns_).LinkADRAns = &MACCommand_LinkADRAns{}
			}
			dst.Payload.(*MACCommand_LinkADRAns_).LinkADRAns.SetFields(src.GetLinkADRAns(), _pathsWithoutPrefix("link_adr_ans", paths)...)
		case "link_adr_ans.tx_power_index_ack":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_LinkADRAns_{}
			}
			if dst.Payload.(*MACCommand_LinkADRAns_).LinkADRAns == nil {
				dst.Payload.(*MACCommand_LinkADRAns_).LinkADRAns = &MACCommand_LinkADRAns{}
			}
			dst.Payload.(*MACCommand_LinkADRAns_).LinkADRAns.SetFields(src.GetLinkADRAns(), _pathsWithoutPrefix("link_adr_ans", paths)...)
		case "link_adr_req":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_LinkADRReq_{}
			}
			dst.Payload.(*MACCommand_LinkADRReq_).LinkADRReq = src.GetLinkADRReq()
		case "link_adr_req.channel_mask":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_LinkADRReq_{}
			}
			if dst.Payload.(*MACCommand_LinkADRReq_).LinkADRReq == nil {
				dst.Payload.(*MACCommand_LinkADRReq_).LinkADRReq = &MACCommand_LinkADRReq{}
			}
			dst.Payload.(*MACCommand_LinkADRReq_).LinkADRReq.SetFields(src.GetLinkADRReq(), _pathsWithoutPrefix("link_adr_req", paths)...)
		case "link_adr_req.channel_mask_control":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_LinkADRReq_{}
			}
			if dst.Payload.(*MACCommand_LinkADRReq_).LinkADRReq == nil {
				dst.Payload.(*MACCommand_LinkADRReq_).LinkADRReq = &MACCommand_LinkADRReq{}
			}
			dst.Payload.(*MACCommand_LinkADRReq_).LinkADRReq.SetFields(src.GetLinkADRReq(), _pathsWithoutPrefix("link_adr_req", paths)...)
		case "link_adr_req.data_rate_index":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_LinkADRReq_{}
			}
			if dst.Payload.(*MACCommand_LinkADRReq_).LinkADRReq == nil {
				dst.Payload.(*MACCommand_LinkADRReq_).LinkADRReq = &MACCommand_LinkADRReq{}
			}
			dst.Payload.(*MACCommand_LinkADRReq_).LinkADRReq.SetFields(src.GetLinkADRReq(), _pathsWithoutPrefix("link_adr_req", paths)...)
		case "link_adr_req.nb_trans":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_LinkADRReq_{}
			}
			if dst.Payload.(*MACCommand_LinkADRReq_).LinkADRReq == nil {
				dst.Payload.(*MACCommand_LinkADRReq_).LinkADRReq = &MACCommand_LinkADRReq{}
			}
			dst.Payload.(*MACCommand_LinkADRReq_).LinkADRReq.SetFields(src.GetLinkADRReq(), _pathsWithoutPrefix("link_adr_req", paths)...)
		case "link_adr_req.tx_power_index":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_LinkADRReq_{}
			}
			if dst.Payload.(*MACCommand_LinkADRReq_).LinkADRReq == nil {
				dst.Payload.(*MACCommand_LinkADRReq_).LinkADRReq = &MACCommand_LinkADRReq{}
			}
			dst.Payload.(*MACCommand_LinkADRReq_).LinkADRReq.SetFields(src.GetLinkADRReq(), _pathsWithoutPrefix("link_adr_req", paths)...)
		case "link_check_ans":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_LinkCheckAns_{}
			}
			dst.Payload.(*MACCommand_LinkCheckAns_).LinkCheckAns = src.GetLinkCheckAns()
		case "link_check_ans.gateway_count":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_LinkCheckAns_{}
			}
			if dst.Payload.(*MACCommand_LinkCheckAns_).LinkCheckAns == nil {
				dst.Payload.(*MACCommand_LinkCheckAns_).LinkCheckAns = &MACCommand_LinkCheckAns{}
			}
			dst.Payload.(*MACCommand_LinkCheckAns_).LinkCheckAns.SetFields(src.GetLinkCheckAns(), _pathsWithoutPrefix("link_check_ans", paths)...)
		case "link_check_ans.margin":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_LinkCheckAns_{}
			}
			if dst.Payload.(*MACCommand_LinkCheckAns_).LinkCheckAns == nil {
				dst.Payload.(*MACCommand_LinkCheckAns_).LinkCheckAns = &MACCommand_LinkCheckAns{}
			}
			dst.Payload.(*MACCommand_LinkCheckAns_).LinkCheckAns.SetFields(src.GetLinkCheckAns(), _pathsWithoutPrefix("link_check_ans", paths)...)
		case "new_channel_ans":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_NewChannelAns_{}
			}
			dst.Payload.(*MACCommand_NewChannelAns_).NewChannelAns = src.GetNewChannelAns()
		case "new_channel_ans.data_rate_ack":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_NewChannelAns_{}
			}
			if dst.Payload.(*MACCommand_NewChannelAns_).NewChannelAns == nil {
				dst.Payload.(*MACCommand_NewChannelAns_).NewChannelAns = &MACCommand_NewChannelAns{}
			}
			dst.Payload.(*MACCommand_NewChannelAns_).NewChannelAns.SetFields(src.GetNewChannelAns(), _pathsWithoutPrefix("new_channel_ans", paths)...)
		case "new_channel_ans.frequency_ack":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_NewChannelAns_{}
			}
			if dst.Payload.(*MACCommand_NewChannelAns_).NewChannelAns == nil {
				dst.Payload.(*MACCommand_NewChannelAns_).NewChannelAns = &MACCommand_NewChannelAns{}
			}
			dst.Payload.(*MACCommand_NewChannelAns_).NewChannelAns.SetFields(src.GetNewChannelAns(), _pathsWithoutPrefix("new_channel_ans", paths)...)
		case "new_channel_req":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_NewChannelReq_{}
			}
			dst.Payload.(*MACCommand_NewChannelReq_).NewChannelReq = src.GetNewChannelReq()
		case "new_channel_req.channel_index":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_NewChannelReq_{}
			}
			if dst.Payload.(*MACCommand_NewChannelReq_).NewChannelReq == nil {
				dst.Payload.(*MACCommand_NewChannelReq_).NewChannelReq = &MACCommand_NewChannelReq{}
			}
			dst.Payload.(*MACCommand_NewChannelReq_).NewChannelReq.SetFields(src.GetNewChannelReq(), _pathsWithoutPrefix("new_channel_req", paths)...)
		case "new_channel_req.frequency":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_NewChannelReq_{}
			}
			if dst.Payload.(*MACCommand_NewChannelReq_).NewChannelReq == nil {
				dst.Payload.(*MACCommand_NewChannelReq_).NewChannelReq = &MACCommand_NewChannelReq{}
			}
			dst.Payload.(*MACCommand_NewChannelReq_).NewChannelReq.SetFields(src.GetNewChannelReq(), _pathsWithoutPrefix("new_channel_req", paths)...)
		case "new_channel_req.max_data_rate_index":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_NewChannelReq_{}
			}
			if dst.Payload.(*MACCommand_NewChannelReq_).NewChannelReq == nil {
				dst.Payload.(*MACCommand_NewChannelReq_).NewChannelReq = &MACCommand_NewChannelReq{}
			}
			dst.Payload.(*MACCommand_NewChannelReq_).NewChannelReq.SetFields(src.GetNewChannelReq(), _pathsWithoutPrefix("new_channel_req", paths)...)
		case "new_channel_req.min_data_rate_index":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_NewChannelReq_{}
			}
			if dst.Payload.(*MACCommand_NewChannelReq_).NewChannelReq == nil {
				dst.Payload.(*MACCommand_NewChannelReq_).NewChannelReq = &MACCommand_NewChannelReq{}
			}
			dst.Payload.(*MACCommand_NewChannelReq_).NewChannelReq.SetFields(src.GetNewChannelReq(), _pathsWithoutPrefix("new_channel_req", paths)...)
		case "ping_slot_channel_ans":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_PingSlotChannelAns_{}
			}
			dst.Payload.(*MACCommand_PingSlotChannelAns_).PingSlotChannelAns = src.GetPingSlotChannelAns()
		case "ping_slot_channel_ans.data_rate_index_ack":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_PingSlotChannelAns_{}
			}
			if dst.Payload.(*MACCommand_PingSlotChannelAns_).PingSlotChannelAns == nil {
				dst.Payload.(*MACCommand_PingSlotChannelAns_).PingSlotChannelAns = &MACCommand_PingSlotChannelAns{}
			}
			dst.Payload.(*MACCommand_PingSlotChannelAns_).PingSlotChannelAns.SetFields(src.GetPingSlotChannelAns(), _pathsWithoutPrefix("ping_slot_channel_ans", paths)...)
		case "ping_slot_channel_ans.frequency_ack":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_PingSlotChannelAns_{}
			}
			if dst.Payload.(*MACCommand_PingSlotChannelAns_).PingSlotChannelAns == nil {
				dst.Payload.(*MACCommand_PingSlotChannelAns_).PingSlotChannelAns = &MACCommand_PingSlotChannelAns{}
			}
			dst.Payload.(*MACCommand_PingSlotChannelAns_).PingSlotChannelAns.SetFields(src.GetPingSlotChannelAns(), _pathsWithoutPrefix("ping_slot_channel_ans", paths)...)
		case "ping_slot_channel_req":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_PingSlotChannelReq_{}
			}
			dst.Payload.(*MACCommand_PingSlotChannelReq_).PingSlotChannelReq = src.GetPingSlotChannelReq()
		case "ping_slot_channel_req.data_rate_index":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_PingSlotChannelReq_{}
			}
			if dst.Payload.(*MACCommand_PingSlotChannelReq_).PingSlotChannelReq == nil {
				dst.Payload.(*MACCommand_PingSlotChannelReq_).PingSlotChannelReq = &MACCommand_PingSlotChannelReq{}
			}
			dst.Payload.(*MACCommand_PingSlotChannelReq_).PingSlotChannelReq.SetFields(src.GetPingSlotChannelReq(), _pathsWithoutPrefix("ping_slot_channel_req", paths)...)
		case "ping_slot_channel_req.frequency":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_PingSlotChannelReq_{}
			}
			if dst.Payload.(*MACCommand_PingSlotChannelReq_).PingSlotChannelReq == nil {
				dst.Payload.(*MACCommand_PingSlotChannelReq_).PingSlotChannelReq = &MACCommand_PingSlotChannelReq{}
			}
			dst.Payload.(*MACCommand_PingSlotChannelReq_).PingSlotChannelReq.SetFields(src.GetPingSlotChannelReq(), _pathsWithoutPrefix("ping_slot_channel_req", paths)...)
		case "ping_slot_info_req":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_PingSlotInfoReq_{}
			}
			dst.Payload.(*MACCommand_PingSlotInfoReq_).PingSlotInfoReq = src.GetPingSlotInfoReq()
		case "ping_slot_info_req.period":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_PingSlotInfoReq_{}
			}
			if dst.Payload.(*MACCommand_PingSlotInfoReq_).PingSlotInfoReq == nil {
				dst.Payload.(*MACCommand_PingSlotInfoReq_).PingSlotInfoReq = &MACCommand_PingSlotInfoReq{}
			}
			dst.Payload.(*MACCommand_PingSlotInfoReq_).PingSlotInfoReq.SetFields(src.GetPingSlotInfoReq(), _pathsWithoutPrefix("ping_slot_info_req", paths)...)
		case "raw_payload":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_RawPayload{}
			}
			dst.Payload.(*MACCommand_RawPayload).RawPayload = src.GetRawPayload()
		case "rejoin_param_setup_ans":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_RejoinParamSetupAns_{}
			}
			dst.Payload.(*MACCommand_RejoinParamSetupAns_).RejoinParamSetupAns = src.GetRejoinParamSetupAns()
		case "rejoin_param_setup_ans.max_time_exponent_ack":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_RejoinParamSetupAns_{}
			}
			if dst.Payload.(*MACCommand_RejoinParamSetupAns_).RejoinParamSetupAns == nil {
				dst.Payload.(*MACCommand_RejoinParamSetupAns_).RejoinParamSetupAns = &MACCommand_RejoinParamSetupAns{}
			}
			dst.Payload.(*MACCommand_RejoinParamSetupAns_).RejoinParamSetupAns.SetFields(src.GetRejoinParamSetupAns(), _pathsWithoutPrefix("rejoin_param_setup_ans", paths)...)
		case "rejoin_param_setup_req":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_RejoinParamSetupReq_{}
			}
			dst.Payload.(*MACCommand_RejoinParamSetupReq_).RejoinParamSetupReq = src.GetRejoinParamSetupReq()
		case "rejoin_param_setup_req.max_count_exponent":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_RejoinParamSetupReq_{}
			}
			if dst.Payload.(*MACCommand_RejoinParamSetupReq_).RejoinParamSetupReq == nil {
				dst.Payload.(*MACCommand_RejoinParamSetupReq_).RejoinParamSetupReq = &MACCommand_RejoinParamSetupReq{}
			}
			dst.Payload.(*MACCommand_RejoinParamSetupReq_).RejoinParamSetupReq.SetFields(src.GetRejoinParamSetupReq(), _pathsWithoutPrefix("rejoin_param_setup_req", paths)...)
		case "rejoin_param_setup_req.max_time_exponent":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_RejoinParamSetupReq_{}
			}
			if dst.Payload.(*MACCommand_RejoinParamSetupReq_).RejoinParamSetupReq == nil {
				dst.Payload.(*MACCommand_RejoinParamSetupReq_).RejoinParamSetupReq = &MACCommand_RejoinParamSetupReq{}
			}
			dst.Payload.(*MACCommand_RejoinParamSetupReq_).RejoinParamSetupReq.SetFields(src.GetRejoinParamSetupReq(), _pathsWithoutPrefix("rejoin_param_setup_req", paths)...)
		case "rekey_conf":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_RekeyConf_{}
			}
			dst.Payload.(*MACCommand_RekeyConf_).RekeyConf = src.GetRekeyConf()
		case "rekey_conf.minor_version":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_RekeyConf_{}
			}
			if dst.Payload.(*MACCommand_RekeyConf_).RekeyConf == nil {
				dst.Payload.(*MACCommand_RekeyConf_).RekeyConf = &MACCommand_RekeyConf{}
			}
			dst.Payload.(*MACCommand_RekeyConf_).RekeyConf.SetFields(src.GetRekeyConf(), _pathsWithoutPrefix("rekey_conf", paths)...)
		case "rekey_ind":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_RekeyInd_{}
			}
			dst.Payload.(*MACCommand_RekeyInd_).RekeyInd = src.GetRekeyInd()
		case "rekey_ind.minor_version":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_RekeyInd_{}
			}
			if dst.Payload.(*MACCommand_RekeyInd_).RekeyInd == nil {
				dst.Payload.(*MACCommand_RekeyInd_).RekeyInd = &MACCommand_RekeyInd{}
			}
			dst.Payload.(*MACCommand_RekeyInd_).RekeyInd.SetFields(src.GetRekeyInd(), _pathsWithoutPrefix("rekey_ind", paths)...)
		case "reset_conf":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_ResetConf_{}
			}
			dst.Payload.(*MACCommand_ResetConf_).ResetConf = src.GetResetConf()
		case "reset_conf.minor_version":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_ResetConf_{}
			}
			if dst.Payload.(*MACCommand_ResetConf_).ResetConf == nil {
				dst.Payload.(*MACCommand_ResetConf_).ResetConf = &MACCommand_ResetConf{}
			}
			dst.Payload.(*MACCommand_ResetConf_).ResetConf.SetFields(src.GetResetConf(), _pathsWithoutPrefix("reset_conf", paths)...)
		case "reset_ind":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_ResetInd_{}
			}
			dst.Payload.(*MACCommand_ResetInd_).ResetInd = src.GetResetInd()
		case "reset_ind.minor_version":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_ResetInd_{}
			}
			if dst.Payload.(*MACCommand_ResetInd_).ResetInd == nil {
				dst.Payload.(*MACCommand_ResetInd_).ResetInd = &MACCommand_ResetInd{}
			}
			dst.Payload.(*MACCommand_ResetInd_).ResetInd.SetFields(src.GetResetInd(), _pathsWithoutPrefix("reset_ind", paths)...)
		case "rx_param_setup_ans":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_RxParamSetupAns_{}
			}
			dst.Payload.(*MACCommand_RxParamSetupAns_).RxParamSetupAns = src.GetRxParamSetupAns()
		case "rx_param_setup_ans.rx1_data_rate_offset_ack":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_RxParamSetupAns_{}
			}
			if dst.Payload.(*MACCommand_RxParamSetupAns_).RxParamSetupAns == nil {
				dst.Payload.(*MACCommand_RxParamSetupAns_).RxParamSetupAns = &MACCommand_RxParamSetupAns{}
			}
			dst.Payload.(*MACCommand_RxParamSetupAns_).RxParamSetupAns.SetFields(src.GetRxParamSetupAns(), _pathsWithoutPrefix("rx_param_setup_ans", paths)...)
		case "rx_param_setup_ans.rx2_data_rate_index_ack":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_RxParamSetupAns_{}
			}
			if dst.Payload.(*MACCommand_RxParamSetupAns_).RxParamSetupAns == nil {
				dst.Payload.(*MACCommand_RxParamSetupAns_).RxParamSetupAns = &MACCommand_RxParamSetupAns{}
			}
			dst.Payload.(*MACCommand_RxParamSetupAns_).RxParamSetupAns.SetFields(src.GetRxParamSetupAns(), _pathsWithoutPrefix("rx_param_setup_ans", paths)...)
		case "rx_param_setup_ans.rx2_frequency_ack":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_RxParamSetupAns_{}
			}
			if dst.Payload.(*MACCommand_RxParamSetupAns_).RxParamSetupAns == nil {
				dst.Payload.(*MACCommand_RxParamSetupAns_).RxParamSetupAns = &MACCommand_RxParamSetupAns{}
			}
			dst.Payload.(*MACCommand_RxParamSetupAns_).RxParamSetupAns.SetFields(src.GetRxParamSetupAns(), _pathsWithoutPrefix("rx_param_setup_ans", paths)...)
		case "rx_param_setup_req":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_RxParamSetupReq_{}
			}
			dst.Payload.(*MACCommand_RxParamSetupReq_).RxParamSetupReq = src.GetRxParamSetupReq()
		case "rx_param_setup_req.rx1_data_rate_offset":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_RxParamSetupReq_{}
			}
			if dst.Payload.(*MACCommand_RxParamSetupReq_).RxParamSetupReq == nil {
				dst.Payload.(*MACCommand_RxParamSetupReq_).RxParamSetupReq = &MACCommand_RxParamSetupReq{}
			}
			dst.Payload.(*MACCommand_RxParamSetupReq_).RxParamSetupReq.SetFields(src.GetRxParamSetupReq(), _pathsWithoutPrefix("rx_param_setup_req", paths)...)
		case "rx_param_setup_req.rx2_data_rate_index":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_RxParamSetupReq_{}
			}
			if dst.Payload.(*MACCommand_RxParamSetupReq_).RxParamSetupReq == nil {
				dst.Payload.(*MACCommand_RxParamSetupReq_).RxParamSetupReq = &MACCommand_RxParamSetupReq{}
			}
			dst.Payload.(*MACCommand_RxParamSetupReq_).RxParamSetupReq.SetFields(src.GetRxParamSetupReq(), _pathsWithoutPrefix("rx_param_setup_req", paths)...)
		case "rx_param_setup_req.rx2_frequency":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_RxParamSetupReq_{}
			}
			if dst.Payload.(*MACCommand_RxParamSetupReq_).RxParamSetupReq == nil {
				dst.Payload.(*MACCommand_RxParamSetupReq_).RxParamSetupReq = &MACCommand_RxParamSetupReq{}
			}
			dst.Payload.(*MACCommand_RxParamSetupReq_).RxParamSetupReq.SetFields(src.GetRxParamSetupReq(), _pathsWithoutPrefix("rx_param_setup_req", paths)...)
		case "rx_timing_setup_req":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_RxTimingSetupReq_{}
			}
			dst.Payload.(*MACCommand_RxTimingSetupReq_).RxTimingSetupReq = src.GetRxTimingSetupReq()
		case "rx_timing_setup_req.delay":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_RxTimingSetupReq_{}
			}
			if dst.Payload.(*MACCommand_RxTimingSetupReq_).RxTimingSetupReq == nil {
				dst.Payload.(*MACCommand_RxTimingSetupReq_).RxTimingSetupReq = &MACCommand_RxTimingSetupReq{}
			}
			dst.Payload.(*MACCommand_RxTimingSetupReq_).RxTimingSetupReq.SetFields(src.GetRxTimingSetupReq(), _pathsWithoutPrefix("rx_timing_setup_req", paths)...)
		case "tx_param_setup_req":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_TxParamSetupReq_{}
			}
			dst.Payload.(*MACCommand_TxParamSetupReq_).TxParamSetupReq = src.GetTxParamSetupReq()
		case "tx_param_setup_req.downlink_dwell_time":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_TxParamSetupReq_{}
			}
			if dst.Payload.(*MACCommand_TxParamSetupReq_).TxParamSetupReq == nil {
				dst.Payload.(*MACCommand_TxParamSetupReq_).TxParamSetupReq = &MACCommand_TxParamSetupReq{}
			}
			dst.Payload.(*MACCommand_TxParamSetupReq_).TxParamSetupReq.SetFields(src.GetTxParamSetupReq(), _pathsWithoutPrefix("tx_param_setup_req", paths)...)
		case "tx_param_setup_req.max_eirp_index":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_TxParamSetupReq_{}
			}
			if dst.Payload.(*MACCommand_TxParamSetupReq_).TxParamSetupReq == nil {
				dst.Payload.(*MACCommand_TxParamSetupReq_).TxParamSetupReq = &MACCommand_TxParamSetupReq{}
			}
			dst.Payload.(*MACCommand_TxParamSetupReq_).TxParamSetupReq.SetFields(src.GetTxParamSetupReq(), _pathsWithoutPrefix("tx_param_setup_req", paths)...)
		case "tx_param_setup_req.uplink_dwell_time":
			if dst.Payload == nil {
				dst.Payload = &MACCommand_TxParamSetupReq_{}
			}
			if dst.Payload.(*MACCommand_TxParamSetupReq_).TxParamSetupReq == nil {
				dst.Payload.(*MACCommand_TxParamSetupReq_).TxParamSetupReq = &MACCommand_TxParamSetupReq{}
			}
			dst.Payload.(*MACCommand_TxParamSetupReq_).TxParamSetupReq.SetFields(src.GetTxParamSetupReq(), _pathsWithoutPrefix("tx_param_setup_req", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _MACCommand_ResetIndFieldPaths = [...]string{
	"minor_version",
}

func (*MACCommand_ResetInd) FieldMaskPaths() []string {
	ret := make([]string, len(_MACCommand_ResetIndFieldPaths))
	copy(ret, _MACCommand_ResetIndFieldPaths[:])
	return ret
}

func (dst *MACCommand_ResetInd) SetFields(src *MACCommand_ResetInd, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "minor_version":
			dst.MinorVersion = src.MinorVersion
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _MACCommand_ResetConfFieldPaths = [...]string{
	"minor_version",
}

func (*MACCommand_ResetConf) FieldMaskPaths() []string {
	ret := make([]string, len(_MACCommand_ResetConfFieldPaths))
	copy(ret, _MACCommand_ResetConfFieldPaths[:])
	return ret
}

func (dst *MACCommand_ResetConf) SetFields(src *MACCommand_ResetConf, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "minor_version":
			dst.MinorVersion = src.MinorVersion
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _MACCommand_LinkCheckAnsFieldPaths = [...]string{
	"gateway_count",
	"margin",
}

func (*MACCommand_LinkCheckAns) FieldMaskPaths() []string {
	ret := make([]string, len(_MACCommand_LinkCheckAnsFieldPaths))
	copy(ret, _MACCommand_LinkCheckAnsFieldPaths[:])
	return ret
}

func (dst *MACCommand_LinkCheckAns) SetFields(src *MACCommand_LinkCheckAns, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "gateway_count":
			dst.GatewayCount = src.GatewayCount
		case "margin":
			dst.Margin = src.Margin
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _MACCommand_LinkADRReqFieldPaths = [...]string{
	"channel_mask",
	"channel_mask_control",
	"data_rate_index",
	"nb_trans",
	"tx_power_index",
}

func (*MACCommand_LinkADRReq) FieldMaskPaths() []string {
	ret := make([]string, len(_MACCommand_LinkADRReqFieldPaths))
	copy(ret, _MACCommand_LinkADRReqFieldPaths[:])
	return ret
}

func (dst *MACCommand_LinkADRReq) SetFields(src *MACCommand_LinkADRReq, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "channel_mask":
			dst.ChannelMask = src.ChannelMask
		case "channel_mask_control":
			dst.ChannelMaskControl = src.ChannelMaskControl
		case "data_rate_index":
			dst.DataRateIndex = src.DataRateIndex
		case "nb_trans":
			dst.NbTrans = src.NbTrans
		case "tx_power_index":
			dst.TxPowerIndex = src.TxPowerIndex
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _MACCommand_LinkADRAnsFieldPaths = [...]string{
	"channel_mask_ack",
	"data_rate_index_ack",
	"tx_power_index_ack",
}

func (*MACCommand_LinkADRAns) FieldMaskPaths() []string {
	ret := make([]string, len(_MACCommand_LinkADRAnsFieldPaths))
	copy(ret, _MACCommand_LinkADRAnsFieldPaths[:])
	return ret
}

func (dst *MACCommand_LinkADRAns) SetFields(src *MACCommand_LinkADRAns, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "channel_mask_ack":
			dst.ChannelMaskAck = src.ChannelMaskAck
		case "data_rate_index_ack":
			dst.DataRateIndexAck = src.DataRateIndexAck
		case "tx_power_index_ack":
			dst.TxPowerIndexAck = src.TxPowerIndexAck
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _MACCommand_DutyCycleReqFieldPaths = [...]string{
	"max_duty_cycle",
}

func (*MACCommand_DutyCycleReq) FieldMaskPaths() []string {
	ret := make([]string, len(_MACCommand_DutyCycleReqFieldPaths))
	copy(ret, _MACCommand_DutyCycleReqFieldPaths[:])
	return ret
}

func (dst *MACCommand_DutyCycleReq) SetFields(src *MACCommand_DutyCycleReq, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "max_duty_cycle":
			dst.MaxDutyCycle = src.MaxDutyCycle
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _MACCommand_RxParamSetupReqFieldPaths = [...]string{
	"rx1_data_rate_offset",
	"rx2_data_rate_index",
	"rx2_frequency",
}

func (*MACCommand_RxParamSetupReq) FieldMaskPaths() []string {
	ret := make([]string, len(_MACCommand_RxParamSetupReqFieldPaths))
	copy(ret, _MACCommand_RxParamSetupReqFieldPaths[:])
	return ret
}

func (dst *MACCommand_RxParamSetupReq) SetFields(src *MACCommand_RxParamSetupReq, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "rx1_data_rate_offset":
			dst.Rx1DataRateOffset = src.Rx1DataRateOffset
		case "rx2_data_rate_index":
			dst.Rx2DataRateIndex = src.Rx2DataRateIndex
		case "rx2_frequency":
			dst.Rx2Frequency = src.Rx2Frequency
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _MACCommand_RxParamSetupAnsFieldPaths = [...]string{
	"rx1_data_rate_offset_ack",
	"rx2_data_rate_index_ack",
	"rx2_frequency_ack",
}

func (*MACCommand_RxParamSetupAns) FieldMaskPaths() []string {
	ret := make([]string, len(_MACCommand_RxParamSetupAnsFieldPaths))
	copy(ret, _MACCommand_RxParamSetupAnsFieldPaths[:])
	return ret
}

func (dst *MACCommand_RxParamSetupAns) SetFields(src *MACCommand_RxParamSetupAns, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "rx1_data_rate_offset_ack":
			dst.Rx1DataRateOffsetAck = src.Rx1DataRateOffsetAck
		case "rx2_data_rate_index_ack":
			dst.Rx2DataRateIndexAck = src.Rx2DataRateIndexAck
		case "rx2_frequency_ack":
			dst.Rx2FrequencyAck = src.Rx2FrequencyAck
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _MACCommand_DevStatusAnsFieldPaths = [...]string{
	"battery",
	"margin",
}

func (*MACCommand_DevStatusAns) FieldMaskPaths() []string {
	ret := make([]string, len(_MACCommand_DevStatusAnsFieldPaths))
	copy(ret, _MACCommand_DevStatusAnsFieldPaths[:])
	return ret
}

func (dst *MACCommand_DevStatusAns) SetFields(src *MACCommand_DevStatusAns, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "battery":
			dst.Battery = src.Battery
		case "margin":
			dst.Margin = src.Margin
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _MACCommand_NewChannelReqFieldPaths = [...]string{
	"channel_index",
	"frequency",
	"max_data_rate_index",
	"min_data_rate_index",
}

func (*MACCommand_NewChannelReq) FieldMaskPaths() []string {
	ret := make([]string, len(_MACCommand_NewChannelReqFieldPaths))
	copy(ret, _MACCommand_NewChannelReqFieldPaths[:])
	return ret
}

func (dst *MACCommand_NewChannelReq) SetFields(src *MACCommand_NewChannelReq, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "channel_index":
			dst.ChannelIndex = src.ChannelIndex
		case "frequency":
			dst.Frequency = src.Frequency
		case "max_data_rate_index":
			dst.MaxDataRateIndex = src.MaxDataRateIndex
		case "min_data_rate_index":
			dst.MinDataRateIndex = src.MinDataRateIndex
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _MACCommand_NewChannelAnsFieldPaths = [...]string{
	"data_rate_ack",
	"frequency_ack",
}

func (*MACCommand_NewChannelAns) FieldMaskPaths() []string {
	ret := make([]string, len(_MACCommand_NewChannelAnsFieldPaths))
	copy(ret, _MACCommand_NewChannelAnsFieldPaths[:])
	return ret
}

func (dst *MACCommand_NewChannelAns) SetFields(src *MACCommand_NewChannelAns, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "data_rate_ack":
			dst.DataRateAck = src.DataRateAck
		case "frequency_ack":
			dst.FrequencyAck = src.FrequencyAck
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _MACCommand_DLChannelReqFieldPaths = [...]string{
	"channel_index",
	"frequency",
}

func (*MACCommand_DLChannelReq) FieldMaskPaths() []string {
	ret := make([]string, len(_MACCommand_DLChannelReqFieldPaths))
	copy(ret, _MACCommand_DLChannelReqFieldPaths[:])
	return ret
}

func (dst *MACCommand_DLChannelReq) SetFields(src *MACCommand_DLChannelReq, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "channel_index":
			dst.ChannelIndex = src.ChannelIndex
		case "frequency":
			dst.Frequency = src.Frequency
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _MACCommand_DLChannelAnsFieldPaths = [...]string{
	"channel_index_ack",
	"frequency_ack",
}

func (*MACCommand_DLChannelAns) FieldMaskPaths() []string {
	ret := make([]string, len(_MACCommand_DLChannelAnsFieldPaths))
	copy(ret, _MACCommand_DLChannelAnsFieldPaths[:])
	return ret
}

func (dst *MACCommand_DLChannelAns) SetFields(src *MACCommand_DLChannelAns, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "channel_index_ack":
			dst.ChannelIndexAck = src.ChannelIndexAck
		case "frequency_ack":
			dst.FrequencyAck = src.FrequencyAck
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _MACCommand_RxTimingSetupReqFieldPaths = [...]string{
	"delay",
}

func (*MACCommand_RxTimingSetupReq) FieldMaskPaths() []string {
	ret := make([]string, len(_MACCommand_RxTimingSetupReqFieldPaths))
	copy(ret, _MACCommand_RxTimingSetupReqFieldPaths[:])
	return ret
}

func (dst *MACCommand_RxTimingSetupReq) SetFields(src *MACCommand_RxTimingSetupReq, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "delay":
			dst.Delay = src.Delay
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _MACCommand_TxParamSetupReqFieldPaths = [...]string{
	"downlink_dwell_time",
	"max_eirp_index",
	"uplink_dwell_time",
}

func (*MACCommand_TxParamSetupReq) FieldMaskPaths() []string {
	ret := make([]string, len(_MACCommand_TxParamSetupReqFieldPaths))
	copy(ret, _MACCommand_TxParamSetupReqFieldPaths[:])
	return ret
}

func (dst *MACCommand_TxParamSetupReq) SetFields(src *MACCommand_TxParamSetupReq, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "downlink_dwell_time":
			dst.DownlinkDwellTime = src.DownlinkDwellTime
		case "max_eirp_index":
			dst.MaxEIRPIndex = src.MaxEIRPIndex
		case "uplink_dwell_time":
			dst.UplinkDwellTime = src.UplinkDwellTime
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _MACCommand_RekeyIndFieldPaths = [...]string{
	"minor_version",
}

func (*MACCommand_RekeyInd) FieldMaskPaths() []string {
	ret := make([]string, len(_MACCommand_RekeyIndFieldPaths))
	copy(ret, _MACCommand_RekeyIndFieldPaths[:])
	return ret
}

func (dst *MACCommand_RekeyInd) SetFields(src *MACCommand_RekeyInd, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "minor_version":
			dst.MinorVersion = src.MinorVersion
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _MACCommand_RekeyConfFieldPaths = [...]string{
	"minor_version",
}

func (*MACCommand_RekeyConf) FieldMaskPaths() []string {
	ret := make([]string, len(_MACCommand_RekeyConfFieldPaths))
	copy(ret, _MACCommand_RekeyConfFieldPaths[:])
	return ret
}

func (dst *MACCommand_RekeyConf) SetFields(src *MACCommand_RekeyConf, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "minor_version":
			dst.MinorVersion = src.MinorVersion
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _MACCommand_ADRParamSetupReqFieldPaths = [...]string{
	"adr_ack_delay_exponent",
	"adr_ack_limit_exponent",
}

func (*MACCommand_ADRParamSetupReq) FieldMaskPaths() []string {
	ret := make([]string, len(_MACCommand_ADRParamSetupReqFieldPaths))
	copy(ret, _MACCommand_ADRParamSetupReqFieldPaths[:])
	return ret
}

func (dst *MACCommand_ADRParamSetupReq) SetFields(src *MACCommand_ADRParamSetupReq, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "adr_ack_delay_exponent":
			dst.ADRAckDelayExponent = src.ADRAckDelayExponent
		case "adr_ack_limit_exponent":
			dst.ADRAckLimitExponent = src.ADRAckLimitExponent
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _MACCommand_DeviceTimeAnsFieldPaths = [...]string{
	"time",
}

func (*MACCommand_DeviceTimeAns) FieldMaskPaths() []string {
	ret := make([]string, len(_MACCommand_DeviceTimeAnsFieldPaths))
	copy(ret, _MACCommand_DeviceTimeAnsFieldPaths[:])
	return ret
}

func (dst *MACCommand_DeviceTimeAns) SetFields(src *MACCommand_DeviceTimeAns, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "time":
			dst.Time = src.Time
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _MACCommand_ForceRejoinReqFieldPaths = [...]string{
	"data_rate_index",
	"max_retries",
	"period_exponent",
	"rejoin_type",
}

func (*MACCommand_ForceRejoinReq) FieldMaskPaths() []string {
	ret := make([]string, len(_MACCommand_ForceRejoinReqFieldPaths))
	copy(ret, _MACCommand_ForceRejoinReqFieldPaths[:])
	return ret
}

func (dst *MACCommand_ForceRejoinReq) SetFields(src *MACCommand_ForceRejoinReq, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "data_rate_index":
			dst.DataRateIndex = src.DataRateIndex
		case "max_retries":
			dst.MaxRetries = src.MaxRetries
		case "period_exponent":
			dst.PeriodExponent = src.PeriodExponent
		case "rejoin_type":
			dst.RejoinType = src.RejoinType
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _MACCommand_RejoinParamSetupReqFieldPaths = [...]string{
	"max_count_exponent",
	"max_time_exponent",
}

func (*MACCommand_RejoinParamSetupReq) FieldMaskPaths() []string {
	ret := make([]string, len(_MACCommand_RejoinParamSetupReqFieldPaths))
	copy(ret, _MACCommand_RejoinParamSetupReqFieldPaths[:])
	return ret
}

func (dst *MACCommand_RejoinParamSetupReq) SetFields(src *MACCommand_RejoinParamSetupReq, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "max_count_exponent":
			dst.MaxCountExponent = src.MaxCountExponent
		case "max_time_exponent":
			dst.MaxTimeExponent = src.MaxTimeExponent
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _MACCommand_RejoinParamSetupAnsFieldPaths = [...]string{
	"max_time_exponent_ack",
}

func (*MACCommand_RejoinParamSetupAns) FieldMaskPaths() []string {
	ret := make([]string, len(_MACCommand_RejoinParamSetupAnsFieldPaths))
	copy(ret, _MACCommand_RejoinParamSetupAnsFieldPaths[:])
	return ret
}

func (dst *MACCommand_RejoinParamSetupAns) SetFields(src *MACCommand_RejoinParamSetupAns, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "max_time_exponent_ack":
			dst.MaxTimeExponentAck = src.MaxTimeExponentAck
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _MACCommand_PingSlotInfoReqFieldPaths = [...]string{
	"period",
}

func (*MACCommand_PingSlotInfoReq) FieldMaskPaths() []string {
	ret := make([]string, len(_MACCommand_PingSlotInfoReqFieldPaths))
	copy(ret, _MACCommand_PingSlotInfoReqFieldPaths[:])
	return ret
}

func (dst *MACCommand_PingSlotInfoReq) SetFields(src *MACCommand_PingSlotInfoReq, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "period":
			dst.Period = src.Period
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _MACCommand_PingSlotChannelReqFieldPaths = [...]string{
	"data_rate_index",
	"frequency",
}

func (*MACCommand_PingSlotChannelReq) FieldMaskPaths() []string {
	ret := make([]string, len(_MACCommand_PingSlotChannelReqFieldPaths))
	copy(ret, _MACCommand_PingSlotChannelReqFieldPaths[:])
	return ret
}

func (dst *MACCommand_PingSlotChannelReq) SetFields(src *MACCommand_PingSlotChannelReq, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "data_rate_index":
			dst.DataRateIndex = src.DataRateIndex
		case "frequency":
			dst.Frequency = src.Frequency
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _MACCommand_PingSlotChannelAnsFieldPaths = [...]string{
	"data_rate_index_ack",
	"frequency_ack",
}

func (*MACCommand_PingSlotChannelAns) FieldMaskPaths() []string {
	ret := make([]string, len(_MACCommand_PingSlotChannelAnsFieldPaths))
	copy(ret, _MACCommand_PingSlotChannelAnsFieldPaths[:])
	return ret
}

func (dst *MACCommand_PingSlotChannelAns) SetFields(src *MACCommand_PingSlotChannelAns, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "data_rate_index_ack":
			dst.DataRateIndexAck = src.DataRateIndexAck
		case "frequency_ack":
			dst.FrequencyAck = src.FrequencyAck
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _MACCommand_BeaconTimingAnsFieldPaths = [...]string{
	"channel_index",
	"delay",
}

func (*MACCommand_BeaconTimingAns) FieldMaskPaths() []string {
	ret := make([]string, len(_MACCommand_BeaconTimingAnsFieldPaths))
	copy(ret, _MACCommand_BeaconTimingAnsFieldPaths[:])
	return ret
}

func (dst *MACCommand_BeaconTimingAns) SetFields(src *MACCommand_BeaconTimingAns, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "channel_index":
			dst.ChannelIndex = src.ChannelIndex
		case "delay":
			dst.Delay = src.Delay
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _MACCommand_BeaconFreqReqFieldPaths = [...]string{
	"frequency",
}

func (*MACCommand_BeaconFreqReq) FieldMaskPaths() []string {
	ret := make([]string, len(_MACCommand_BeaconFreqReqFieldPaths))
	copy(ret, _MACCommand_BeaconFreqReqFieldPaths[:])
	return ret
}

func (dst *MACCommand_BeaconFreqReq) SetFields(src *MACCommand_BeaconFreqReq, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "frequency":
			dst.Frequency = src.Frequency
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _MACCommand_BeaconFreqAnsFieldPaths = [...]string{
	"frequency_ack",
}

func (*MACCommand_BeaconFreqAns) FieldMaskPaths() []string {
	ret := make([]string, len(_MACCommand_BeaconFreqAnsFieldPaths))
	copy(ret, _MACCommand_BeaconFreqAnsFieldPaths[:])
	return ret
}

func (dst *MACCommand_BeaconFreqAns) SetFields(src *MACCommand_BeaconFreqAns, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "frequency_ack":
			dst.FrequencyAck = src.FrequencyAck
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _MACCommand_DeviceModeIndFieldPaths = [...]string{
	"class",
}

func (*MACCommand_DeviceModeInd) FieldMaskPaths() []string {
	ret := make([]string, len(_MACCommand_DeviceModeIndFieldPaths))
	copy(ret, _MACCommand_DeviceModeIndFieldPaths[:])
	return ret
}

func (dst *MACCommand_DeviceModeInd) SetFields(src *MACCommand_DeviceModeInd, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "class":
			dst.Class = src.Class
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _MACCommand_DeviceModeConfFieldPaths = [...]string{
	"class",
}

func (*MACCommand_DeviceModeConf) FieldMaskPaths() []string {
	ret := make([]string, len(_MACCommand_DeviceModeConfFieldPaths))
	copy(ret, _MACCommand_DeviceModeConfFieldPaths[:])
	return ret
}

func (dst *MACCommand_DeviceModeConf) SetFields(src *MACCommand_DeviceModeConf, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "class":
			dst.Class = src.Class
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}
