// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/applicationserver_pubsub.proto

package ttnpb

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
	time "time"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// The service type for the PubSub.
type ApplicationPubSub_Service int32

const (
	ApplicationPubSub_AWSSNSSQS ApplicationPubSub_Service = 0
	ApplicationPubSub_AZURESB   ApplicationPubSub_Service = 1
	ApplicationPubSub_GCPPUBSUB ApplicationPubSub_Service = 2
	ApplicationPubSub_KAFKA     ApplicationPubSub_Service = 3
	ApplicationPubSub_NATS      ApplicationPubSub_Service = 4
	ApplicationPubSub_RABBIT    ApplicationPubSub_Service = 5
)

var ApplicationPubSub_Service_name = map[int32]string{
	0: "AWSSNSSQS",
	1: "AZURESB",
	2: "GCPPUBSUB",
	3: "KAFKA",
	4: "NATS",
	5: "RABBIT",
}

var ApplicationPubSub_Service_value = map[string]int32{
	"AWSSNSSQS": 0,
	"AZURESB":   1,
	"GCPPUBSUB": 2,
	"KAFKA":     3,
	"NATS":      4,
	"RABBIT":    5,
}

func (ApplicationPubSub_Service) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1dce56ec18597200, []int{1, 0}
}

type ApplicationPubSubIdentifiers struct {
	ApplicationIdentifiers `protobuf:"bytes,1,opt,name=application_ids,json=applicationIds,proto3,embedded=application_ids" json:"application_ids"`
	PubSubID               string   `protobuf:"bytes,2,opt,name=pubsub_id,json=pubsubId,proto3" json:"pubsub_id,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *ApplicationPubSubIdentifiers) Reset()      { *m = ApplicationPubSubIdentifiers{} }
func (*ApplicationPubSubIdentifiers) ProtoMessage() {}
func (*ApplicationPubSubIdentifiers) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dce56ec18597200, []int{0}
}
func (m *ApplicationPubSubIdentifiers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationPubSubIdentifiers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationPubSubIdentifiers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationPubSubIdentifiers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationPubSubIdentifiers.Merge(m, src)
}
func (m *ApplicationPubSubIdentifiers) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationPubSubIdentifiers) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationPubSubIdentifiers.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationPubSubIdentifiers proto.InternalMessageInfo

func (m *ApplicationPubSubIdentifiers) GetPubSubID() string {
	if m != nil {
		return m.PubSubID
	}
	return ""
}

type ApplicationPubSub struct {
	ApplicationPubSubIdentifiers `protobuf:"bytes,1,opt,name=ids,proto3,embedded=ids" json:"ids"`
	CreatedAt                    time.Time `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
	UpdatedAt                    time.Time `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at"`
	// Service specific strings used for authentication and settings.
	Attributes map[string]string `protobuf:"bytes,4,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The format to use for the body.
	// Supported values depend on the Application Server configuration.
	Format  string                    `protobuf:"bytes,5,opt,name=format,proto3" json:"format,omitempty"`
	Service ApplicationPubSub_Service `protobuf:"varint,6,opt,name=service,proto3,enum=ttn.lorawan.v3.ApplicationPubSub_Service" json:"service,omitempty"`
	// The topic to which the Application Server subscribes for downlink queue push operations.
	DownlinkPushTopic string `protobuf:"bytes,7,opt,name=downlink_push_topic,json=downlinkPushTopic,proto3" json:"downlink_push_topic,omitempty"`
	// The topic to which the Application Server subscribes for downlink queue replace operations.
	DownlinkReplaceTopic string                     `protobuf:"bytes,8,opt,name=downlink_replace_topic,json=downlinkReplaceTopic,proto3" json:"downlink_replace_topic,omitempty"`
	UplinkMessage        *ApplicationPubSub_Message `protobuf:"bytes,9,opt,name=uplink_message,json=uplinkMessage,proto3" json:"uplink_message,omitempty"`
	JoinAccept           *ApplicationPubSub_Message `protobuf:"bytes,10,opt,name=join_accept,json=joinAccept,proto3" json:"join_accept,omitempty"`
	DownlinkAck          *ApplicationPubSub_Message `protobuf:"bytes,11,opt,name=downlink_ack,json=downlinkAck,proto3" json:"downlink_ack,omitempty"`
	DownlinkNack         *ApplicationPubSub_Message `protobuf:"bytes,12,opt,name=downlink_nack,json=downlinkNack,proto3" json:"downlink_nack,omitempty"`
	DownlinkSent         *ApplicationPubSub_Message `protobuf:"bytes,13,opt,name=downlink_sent,json=downlinkSent,proto3" json:"downlink_sent,omitempty"`
	DownlinkFailed       *ApplicationPubSub_Message `protobuf:"bytes,14,opt,name=downlink_failed,json=downlinkFailed,proto3" json:"downlink_failed,omitempty"`
	DownlinkQueued       *ApplicationPubSub_Message `protobuf:"bytes,15,opt,name=downlink_queued,json=downlinkQueued,proto3" json:"downlink_queued,omitempty"`
	LocationSolved       *ApplicationPubSub_Message `protobuf:"bytes,16,opt,name=location_solved,json=locationSolved,proto3" json:"location_solved,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ApplicationPubSub) Reset()      { *m = ApplicationPubSub{} }
func (*ApplicationPubSub) ProtoMessage() {}
func (*ApplicationPubSub) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dce56ec18597200, []int{1}
}
func (m *ApplicationPubSub) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationPubSub) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationPubSub.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationPubSub) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationPubSub.Merge(m, src)
}
func (m *ApplicationPubSub) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationPubSub) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationPubSub.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationPubSub proto.InternalMessageInfo

func (m *ApplicationPubSub) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *ApplicationPubSub) GetUpdatedAt() time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return time.Time{}
}

func (m *ApplicationPubSub) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *ApplicationPubSub) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *ApplicationPubSub) GetService() ApplicationPubSub_Service {
	if m != nil {
		return m.Service
	}
	return ApplicationPubSub_AWSSNSSQS
}

func (m *ApplicationPubSub) GetDownlinkPushTopic() string {
	if m != nil {
		return m.DownlinkPushTopic
	}
	return ""
}

func (m *ApplicationPubSub) GetDownlinkReplaceTopic() string {
	if m != nil {
		return m.DownlinkReplaceTopic
	}
	return ""
}

func (m *ApplicationPubSub) GetUplinkMessage() *ApplicationPubSub_Message {
	if m != nil {
		return m.UplinkMessage
	}
	return nil
}

func (m *ApplicationPubSub) GetJoinAccept() *ApplicationPubSub_Message {
	if m != nil {
		return m.JoinAccept
	}
	return nil
}

func (m *ApplicationPubSub) GetDownlinkAck() *ApplicationPubSub_Message {
	if m != nil {
		return m.DownlinkAck
	}
	return nil
}

func (m *ApplicationPubSub) GetDownlinkNack() *ApplicationPubSub_Message {
	if m != nil {
		return m.DownlinkNack
	}
	return nil
}

func (m *ApplicationPubSub) GetDownlinkSent() *ApplicationPubSub_Message {
	if m != nil {
		return m.DownlinkSent
	}
	return nil
}

func (m *ApplicationPubSub) GetDownlinkFailed() *ApplicationPubSub_Message {
	if m != nil {
		return m.DownlinkFailed
	}
	return nil
}

func (m *ApplicationPubSub) GetDownlinkQueued() *ApplicationPubSub_Message {
	if m != nil {
		return m.DownlinkQueued
	}
	return nil
}

func (m *ApplicationPubSub) GetLocationSolved() *ApplicationPubSub_Message {
	if m != nil {
		return m.LocationSolved
	}
	return nil
}

type ApplicationPubSub_Message struct {
	// The topic on which the Application Server publishes the messages.
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplicationPubSub_Message) Reset()      { *m = ApplicationPubSub_Message{} }
func (*ApplicationPubSub_Message) ProtoMessage() {}
func (*ApplicationPubSub_Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dce56ec18597200, []int{1, 1}
}
func (m *ApplicationPubSub_Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationPubSub_Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationPubSub_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationPubSub_Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationPubSub_Message.Merge(m, src)
}
func (m *ApplicationPubSub_Message) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationPubSub_Message) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationPubSub_Message.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationPubSub_Message proto.InternalMessageInfo

func (m *ApplicationPubSub_Message) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

type ApplicationPubSubs struct {
	Pubsubs              []*ApplicationPubSub `protobuf:"bytes,1,rep,name=pubsubs,proto3" json:"pubsubs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ApplicationPubSubs) Reset()      { *m = ApplicationPubSubs{} }
func (*ApplicationPubSubs) ProtoMessage() {}
func (*ApplicationPubSubs) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dce56ec18597200, []int{2}
}
func (m *ApplicationPubSubs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationPubSubs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationPubSubs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationPubSubs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationPubSubs.Merge(m, src)
}
func (m *ApplicationPubSubs) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationPubSubs) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationPubSubs.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationPubSubs proto.InternalMessageInfo

func (m *ApplicationPubSubs) GetPubsubs() []*ApplicationPubSub {
	if m != nil {
		return m.Pubsubs
	}
	return nil
}

type ApplicationPubSubFormats struct {
	// Format and description.
	Formats              map[string]string `protobuf:"bytes,1,rep,name=formats,proto3" json:"formats,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ApplicationPubSubFormats) Reset()      { *m = ApplicationPubSubFormats{} }
func (*ApplicationPubSubFormats) ProtoMessage() {}
func (*ApplicationPubSubFormats) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dce56ec18597200, []int{3}
}
func (m *ApplicationPubSubFormats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationPubSubFormats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationPubSubFormats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationPubSubFormats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationPubSubFormats.Merge(m, src)
}
func (m *ApplicationPubSubFormats) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationPubSubFormats) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationPubSubFormats.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationPubSubFormats proto.InternalMessageInfo

func (m *ApplicationPubSubFormats) GetFormats() map[string]string {
	if m != nil {
		return m.Formats
	}
	return nil
}

type GetApplicationPubSubRequest struct {
	ApplicationPubSubIdentifiers `protobuf:"bytes,1,opt,name=ids,proto3,embedded=ids" json:"ids"`
	FieldMask                    types.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask"`
	XXX_NoUnkeyedLiteral         struct{}        `json:"-"`
	XXX_sizecache                int32           `json:"-"`
}

func (m *GetApplicationPubSubRequest) Reset()      { *m = GetApplicationPubSubRequest{} }
func (*GetApplicationPubSubRequest) ProtoMessage() {}
func (*GetApplicationPubSubRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dce56ec18597200, []int{4}
}
func (m *GetApplicationPubSubRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetApplicationPubSubRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetApplicationPubSubRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetApplicationPubSubRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetApplicationPubSubRequest.Merge(m, src)
}
func (m *GetApplicationPubSubRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetApplicationPubSubRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetApplicationPubSubRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetApplicationPubSubRequest proto.InternalMessageInfo

func (m *GetApplicationPubSubRequest) GetFieldMask() types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return types.FieldMask{}
}

type ListApplicationPubSubsRequest struct {
	ApplicationIdentifiers `protobuf:"bytes,1,opt,name=application_ids,json=applicationIds,proto3,embedded=application_ids" json:"application_ids"`
	FieldMask              types.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask"`
	XXX_NoUnkeyedLiteral   struct{}        `json:"-"`
	XXX_sizecache          int32           `json:"-"`
}

func (m *ListApplicationPubSubsRequest) Reset()      { *m = ListApplicationPubSubsRequest{} }
func (*ListApplicationPubSubsRequest) ProtoMessage() {}
func (*ListApplicationPubSubsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dce56ec18597200, []int{5}
}
func (m *ListApplicationPubSubsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListApplicationPubSubsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListApplicationPubSubsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListApplicationPubSubsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListApplicationPubSubsRequest.Merge(m, src)
}
func (m *ListApplicationPubSubsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListApplicationPubSubsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListApplicationPubSubsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListApplicationPubSubsRequest proto.InternalMessageInfo

func (m *ListApplicationPubSubsRequest) GetFieldMask() types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return types.FieldMask{}
}

type SetApplicationPubSubRequest struct {
	ApplicationPubSub    `protobuf:"bytes,1,opt,name=pubsub,proto3,embedded=pubsub" json:"pubsub"`
	FieldMask            types.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SetApplicationPubSubRequest) Reset()      { *m = SetApplicationPubSubRequest{} }
func (*SetApplicationPubSubRequest) ProtoMessage() {}
func (*SetApplicationPubSubRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dce56ec18597200, []int{6}
}
func (m *SetApplicationPubSubRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetApplicationPubSubRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetApplicationPubSubRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetApplicationPubSubRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetApplicationPubSubRequest.Merge(m, src)
}
func (m *SetApplicationPubSubRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetApplicationPubSubRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetApplicationPubSubRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetApplicationPubSubRequest proto.InternalMessageInfo

func (m *SetApplicationPubSubRequest) GetFieldMask() types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return types.FieldMask{}
}

func init() {
	proto.RegisterEnum("ttn.lorawan.v3.ApplicationPubSub_Service", ApplicationPubSub_Service_name, ApplicationPubSub_Service_value)
	golang_proto.RegisterEnum("ttn.lorawan.v3.ApplicationPubSub_Service", ApplicationPubSub_Service_name, ApplicationPubSub_Service_value)
	proto.RegisterType((*ApplicationPubSubIdentifiers)(nil), "ttn.lorawan.v3.ApplicationPubSubIdentifiers")
	golang_proto.RegisterType((*ApplicationPubSubIdentifiers)(nil), "ttn.lorawan.v3.ApplicationPubSubIdentifiers")
	proto.RegisterType((*ApplicationPubSub)(nil), "ttn.lorawan.v3.ApplicationPubSub")
	golang_proto.RegisterType((*ApplicationPubSub)(nil), "ttn.lorawan.v3.ApplicationPubSub")
	proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.ApplicationPubSub.AttributesEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.ApplicationPubSub.AttributesEntry")
	proto.RegisterType((*ApplicationPubSub_Message)(nil), "ttn.lorawan.v3.ApplicationPubSub.Message")
	golang_proto.RegisterType((*ApplicationPubSub_Message)(nil), "ttn.lorawan.v3.ApplicationPubSub.Message")
	proto.RegisterType((*ApplicationPubSubs)(nil), "ttn.lorawan.v3.ApplicationPubSubs")
	golang_proto.RegisterType((*ApplicationPubSubs)(nil), "ttn.lorawan.v3.ApplicationPubSubs")
	proto.RegisterType((*ApplicationPubSubFormats)(nil), "ttn.lorawan.v3.ApplicationPubSubFormats")
	golang_proto.RegisterType((*ApplicationPubSubFormats)(nil), "ttn.lorawan.v3.ApplicationPubSubFormats")
	proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.ApplicationPubSubFormats.FormatsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.ApplicationPubSubFormats.FormatsEntry")
	proto.RegisterType((*GetApplicationPubSubRequest)(nil), "ttn.lorawan.v3.GetApplicationPubSubRequest")
	golang_proto.RegisterType((*GetApplicationPubSubRequest)(nil), "ttn.lorawan.v3.GetApplicationPubSubRequest")
	proto.RegisterType((*ListApplicationPubSubsRequest)(nil), "ttn.lorawan.v3.ListApplicationPubSubsRequest")
	golang_proto.RegisterType((*ListApplicationPubSubsRequest)(nil), "ttn.lorawan.v3.ListApplicationPubSubsRequest")
	proto.RegisterType((*SetApplicationPubSubRequest)(nil), "ttn.lorawan.v3.SetApplicationPubSubRequest")
	golang_proto.RegisterType((*SetApplicationPubSubRequest)(nil), "ttn.lorawan.v3.SetApplicationPubSubRequest")
}

func init() {
	proto.RegisterFile("lorawan-stack/api/applicationserver_pubsub.proto", fileDescriptor_1dce56ec18597200)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/applicationserver_pubsub.proto", fileDescriptor_1dce56ec18597200)
}

var fileDescriptor_1dce56ec18597200 = []byte{
	// 1335 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x97, 0x4f, 0x6c, 0x13, 0xc7,
	0x17, 0xc7, 0x77, 0xe2, 0x24, 0x8e, 0x9f, 0x49, 0x62, 0xe6, 0x17, 0xa1, 0xfd, 0x19, 0x3a, 0x49,
	0xb7, 0xa8, 0x0a, 0x7f, 0xbc, 0xa6, 0xa6, 0xb4, 0x25, 0xa8, 0x8a, 0xd6, 0x40, 0x22, 0x0a, 0x49,
	0x93, 0xdd, 0x44, 0x55, 0x41, 0xd4, 0x5a, 0xdb, 0x13, 0x67, 0xb1, 0xbd, 0xbb, 0x78, 0x67, 0x43,
	0x53, 0x84, 0x84, 0x38, 0xa1, 0x1e, 0x0a, 0x52, 0xa5, 0xaa, 0xa7, 0xaa, 0xea, 0xa5, 0x5c, 0x2a,
	0xa1, 0x9e, 0x50, 0xd5, 0x03, 0x97, 0x4a, 0x1c, 0x91, 0x7a, 0x28, 0x87, 0x8a, 0xe2, 0x75, 0x0f,
	0xf4, 0x52, 0x71, 0xe4, 0x58, 0xed, 0x3f, 0xdb, 0xd8, 0x21, 0xc6, 0xa0, 0xf6, 0x94, 0x99, 0xbc,
	0xf7, 0x3e, 0xf3, 0x7d, 0x6f, 0xde, 0xbe, 0x5d, 0xc3, 0xa1, 0x8a, 0x51, 0x53, 0x2f, 0xa9, 0x7a,
	0xca, 0x62, 0x6a, 0xa1, 0x9c, 0x56, 0x4d, 0x2d, 0xad, 0x9a, 0x66, 0x45, 0x2b, 0xa8, 0x4c, 0x33,
	0x74, 0x8b, 0xd6, 0x36, 0x68, 0x2d, 0x67, 0xda, 0x79, 0xcb, 0xce, 0x8b, 0x66, 0xcd, 0x60, 0x06,
	0x1e, 0x63, 0x4c, 0x17, 0x83, 0x28, 0x71, 0xe3, 0x70, 0x52, 0x2a, 0x69, 0x6c, 0xdd, 0xce, 0x8b,
	0x05, 0xa3, 0x9a, 0xa6, 0xfa, 0x86, 0xb1, 0x69, 0xd6, 0x8c, 0x4f, 0x37, 0xd3, 0x9e, 0x73, 0x21,
	0x55, 0xa2, 0x7a, 0x6a, 0x43, 0xad, 0x68, 0x45, 0x95, 0xd1, 0x74, 0xd7, 0xc2, 0x47, 0x26, 0x53,
	0x6d, 0x88, 0x92, 0x51, 0x32, 0xfc, 0xe0, 0xbc, 0xbd, 0xe6, 0xed, 0xbc, 0x8d, 0xb7, 0x0a, 0xdc,
	0xf7, 0x94, 0x0c, 0xa3, 0x54, 0xa1, 0xbe, 0x58, 0x5d, 0x37, 0x98, 0xaf, 0x35, 0xb0, 0xee, 0x0e,
	0xac, 0x4d, 0x06, 0xad, 0x9a, 0x6c, 0x33, 0x30, 0x4e, 0x75, 0x1a, 0xd7, 0x34, 0x5a, 0x29, 0xe6,
	0xaa, 0xaa, 0x55, 0x0e, 0x3c, 0x26, 0x3b, 0x3d, 0x98, 0x56, 0xa5, 0x16, 0x53, 0xab, 0x66, 0xe0,
	0xf0, 0x46, 0x77, 0xc5, 0xb4, 0x22, 0xd5, 0x99, 0xb6, 0xa6, 0xd1, 0x5a, 0x20, 0x42, 0xf8, 0x0d,
	0xc1, 0x1e, 0xa9, 0x55, 0xc7, 0x25, 0x3b, 0xaf, 0xd8, 0xf9, 0x53, 0x2d, 0x37, 0x5c, 0x80, 0xf1,
	0xb6, 0x3a, 0xe7, 0xb4, 0xa2, 0xc5, 0xa3, 0x29, 0x34, 0x1d, 0xcf, 0xbc, 0x29, 0x3e, 0x5b, 0x5f,
	0xb1, 0x0d, 0xd3, 0x06, 0xc8, 0xe2, 0x7b, 0x0f, 0x27, 0xb9, 0xfb, 0x0f, 0x27, 0xd1, 0x4f, 0x7f,
	0xdd, 0x8d, 0x0c, 0x7d, 0x8e, 0x06, 0x12, 0x48, 0x1e, 0x53, 0xdb, 0x7d, 0x2d, 0x2c, 0x43, 0xcc,
	0xbf, 0xba, 0x9c, 0x56, 0xe4, 0x07, 0xa6, 0xd0, 0x74, 0x2c, 0x7b, 0xc4, 0x79, 0x38, 0x39, 0x12,
	0xc8, 0x39, 0xe1, 0x86, 0xee, 0xad, 0x09, 0xfc, 0xde, 0x0c, 0xf9, 0xe4, 0x9c, 0x9a, 0xfa, 0xec,
	0x50, 0xea, 0xe8, 0xf9, 0xe9, 0xd9, 0x99, 0x73, 0xa9, 0xf3, 0xb3, 0xe1, 0x76, 0xdf, 0xe5, 0xcc,
	0xc1, 0x2b, 0x7b, 0xe5, 0x11, 0x9f, 0x73, 0xaa, 0x28, 0xfc, 0x0e, 0xb0, 0xb3, 0x2b, 0x33, 0x2c,
	0x43, 0xa4, 0x95, 0xc2, 0xc1, 0x6d, 0x52, 0xe8, 0xaa, 0xc4, 0x96, 0x89, 0xb8, 0x30, 0x7c, 0x1c,
	0xa0, 0x50, 0xa3, 0x2a, 0xa3, 0xc5, 0x9c, 0xca, 0x3c, 0xf9, 0xf1, 0x4c, 0x52, 0xf4, 0xaf, 0x47,
	0x0c, 0xaf, 0x47, 0x5c, 0x09, 0xaf, 0x27, 0x3b, 0xe2, 0x82, 0x6e, 0xfe, 0x31, 0x89, 0xe4, 0x58,
	0x10, 0x27, 0x31, 0x17, 0x62, 0x9b, 0xc5, 0x10, 0x12, 0xe9, 0x07, 0x12, 0xc4, 0x49, 0x0c, 0x2f,
	0x03, 0xa8, 0x8c, 0xd5, 0xb4, 0xbc, 0xcd, 0xa8, 0xc5, 0x0f, 0x4e, 0x45, 0xa6, 0xe3, 0x99, 0xb7,
	0x7a, 0x26, 0x29, 0x4a, 0xcd, 0x98, 0x93, 0x3a, 0xab, 0x6d, 0xca, 0x6d, 0x10, 0xbc, 0x0b, 0x86,
	0xd7, 0x8c, 0x5a, 0x55, 0x65, 0xfc, 0x90, 0x7b, 0x2f, 0x72, 0xb0, 0xc3, 0x1f, 0x43, 0xd4, 0x7d,
	0xe8, 0xb4, 0x02, 0xe5, 0x87, 0xa7, 0xd0, 0xf4, 0x58, 0x66, 0x5f, 0xef, 0x73, 0x14, 0x3f, 0x20,
	0x3b, 0xd1, 0xaa, 0xa0, 0xb7, 0xba, 0xe6, 0xd5, 0x32, 0xe4, 0x61, 0x11, 0xfe, 0x57, 0x34, 0x2e,
	0xe9, 0x15, 0x4d, 0x2f, 0xe7, 0x4c, 0xdb, 0x5a, 0xcf, 0x31, 0xc3, 0xd4, 0x0a, 0x7c, 0xd4, 0x3b,
	0x7f, 0x67, 0x68, 0x5a, 0xb2, 0xad, 0xf5, 0x15, 0xd7, 0x80, 0xdf, 0x86, 0x5d, 0x4d, 0xff, 0x1a,
	0x35, 0x2b, 0x6a, 0x81, 0x06, 0x21, 0x23, 0x5e, 0xc8, 0x44, 0x68, 0x95, 0x7d, 0xa3, 0x1f, 0xb5,
	0x04, 0x63, 0xb6, 0xe9, 0xc5, 0x54, 0xa9, 0x65, 0xa9, 0x25, 0xca, 0xc7, 0xbc, 0xa2, 0xbf, 0x40,
	0x1e, 0x0b, 0x7e, 0x80, 0x3c, 0xea, 0x03, 0x82, 0x2d, 0xfe, 0x00, 0xe2, 0x17, 0x0c, 0x4d, 0xcf,
	0xa9, 0x85, 0x02, 0x35, 0x19, 0x0f, 0xfd, 0xe2, 0xc0, 0x8d, 0x96, 0xbc, 0x60, 0x7c, 0x06, 0x76,
	0x34, 0x73, 0x52, 0x0b, 0x65, 0x3e, 0xde, 0x2f, 0x2c, 0x1e, 0x86, 0x4b, 0x85, 0x32, 0x5e, 0x84,
	0xd1, 0x26, 0x4d, 0x77, 0x71, 0x3b, 0xfa, 0xc5, 0x35, 0xd5, 0x2c, 0xaa, 0x1d, 0x3c, 0x8b, 0xea,
	0x8c, 0x1f, 0x7d, 0x69, 0x9e, 0x42, 0x75, 0x86, 0x65, 0x18, 0x6f, 0xf2, 0xd6, 0x54, 0xad, 0x42,
	0x8b, 0xfc, 0x58, 0xbf, 0xc4, 0xb1, 0x90, 0x30, 0xe7, 0x01, 0x9e, 0x61, 0x5e, 0xb4, 0xa9, 0x4d,
	0x8b, 0xfc, 0xf8, 0x4b, 0x33, 0x97, 0x3d, 0x80, 0xcb, 0xac, 0x18, 0xc1, 0x24, 0xb4, 0x8c, 0xca,
	0x06, 0x2d, 0xf2, 0x89, 0xbe, 0x99, 0x21, 0x41, 0xf1, 0x00, 0xc9, 0xf7, 0x61, 0xbc, 0xe3, 0xf9,
	0xc3, 0x09, 0x88, 0x94, 0xe9, 0xa6, 0x37, 0xa4, 0x62, 0xb2, 0xbb, 0xc4, 0x13, 0x30, 0xb4, 0xa1,
	0x56, 0x6c, 0xea, 0x0f, 0x47, 0xd9, 0xdf, 0xcc, 0x0c, 0xbc, 0x87, 0x92, 0x93, 0x10, 0x0d, 0xfb,
	0x6f, 0x02, 0x86, 0xfc, 0xb6, 0xf7, 0x03, 0xfd, 0x8d, 0xb0, 0x0a, 0xd1, 0xe0, 0xb9, 0xc3, 0xa3,
	0x10, 0x93, 0x3e, 0x52, 0x94, 0x45, 0x45, 0x59, 0x56, 0x12, 0x1c, 0x8e, 0x43, 0x54, 0x3a, 0xbb,
	0x2a, 0x9f, 0x54, 0xb2, 0x09, 0xe4, 0xda, 0xe6, 0x8f, 0x2f, 0x2d, 0xad, 0x66, 0x95, 0xd5, 0x6c,
	0x62, 0x00, 0xc7, 0x60, 0xe8, 0xb4, 0x34, 0x77, 0x5a, 0x4a, 0x44, 0xf0, 0x08, 0x0c, 0x2e, 0x4a,
	0x2b, 0x4a, 0x62, 0x10, 0x03, 0x0c, 0xcb, 0x52, 0x36, 0x7b, 0x6a, 0x25, 0x31, 0x24, 0x2c, 0x03,
	0xee, 0xca, 0xd1, 0xc2, 0xc7, 0x20, 0xea, 0x0f, 0x60, 0x77, 0xc4, 0xba, 0xd3, 0xe7, 0xf5, 0x9e,
	0x85, 0x91, 0xc3, 0x08, 0xe1, 0x7b, 0x04, 0x7c, 0x97, 0x79, 0xce, 0x1b, 0x37, 0x16, 0xfe, 0x10,
	0xa2, 0xfe, 0xe4, 0x09, 0xc9, 0x47, 0x7a, 0x92, 0x83, 0x50, 0x31, 0xf8, 0xeb, 0xcf, 0xb6, 0x90,
	0x92, 0x9c, 0x81, 0x1d, 0xed, 0x86, 0x7e, 0x8a, 0x2e, 0xfc, 0x88, 0x60, 0xf7, 0x3c, 0x65, 0xdd,
	0xb9, 0xd0, 0x8b, 0x36, 0xb5, 0xd8, 0xbf, 0xf2, 0x96, 0x99, 0x05, 0x68, 0x7d, 0x03, 0x3c, 0xf7,
	0x2d, 0x33, 0xe7, 0xba, 0x2c, 0xa8, 0x56, 0x39, 0x3b, 0xe8, 0x82, 0xe4, 0xd8, 0x5a, 0xf8, 0x0f,
	0xe1, 0x17, 0x04, 0xaf, 0x9d, 0xd1, 0xac, 0x6e, 0xd5, 0x56, 0x28, 0xfb, 0x3f, 0x79, 0xd7, 0xbf,
	0x72, 0x1e, 0x3f, 0x20, 0xd8, 0xad, 0x6c, 0x53, 0xfc, 0x05, 0x18, 0xf6, 0x3b, 0x2a, 0x10, 0xdf,
	0xbb, 0x05, 0xb7, 0xd4, 0x1d, 0x40, 0x5e, 0x59, 0x6f, 0xe6, 0xe7, 0x61, 0xf8, 0xff, 0x16, 0x62,
	0x4b, 0x9a, 0xe5, 0xb6, 0xdd, 0x05, 0x80, 0x79, 0xca, 0xc2, 0x2e, 0xdf, 0xd5, 0x05, 0x3e, 0xe9,
	0x7e, 0x14, 0x26, 0xa7, 0x5f, 0xb4, 0xd9, 0x85, 0xe4, 0xb5, 0x5f, 0xff, 0xfc, 0x72, 0x60, 0x02,
	0xe3, 0xb4, 0x6a, 0xa5, 0xfd, 0x14, 0x52, 0x41, 0xcb, 0xe3, 0x6f, 0x10, 0x44, 0xe6, 0x29, 0xc3,
	0x07, 0x3a, 0x69, 0xdb, 0xf4, 0x72, 0xb2, 0x77, 0xf9, 0x84, 0x79, 0xef, 0x4c, 0x09, 0xcf, 0xb6,
	0xce, 0x4c, 0x5f, 0xd6, 0x8a, 0x96, 0xd8, 0xd1, 0x4d, 0x1d, 0xfb, 0x2b, 0xbe, 0x53, 0xf3, 0xcb,
	0xef, 0x0a, 0xfe, 0x02, 0xc1, 0xa0, 0xdb, 0xa2, 0x38, 0xd5, 0x79, 0xe8, 0xb6, 0x8d, 0x9b, 0x14,
	0x7a, 0x6a, 0xb4, 0x84, 0xc3, 0x9e, 0xc8, 0x14, 0x3e, 0xd0, 0x2e, 0xb2, 0x87, 0x40, 0xfc, 0x37,
	0x82, 0x88, 0xb2, 0x55, 0xc5, 0x94, 0x57, 0xab, 0xd8, 0x57, 0xc8, 0x53, 0x73, 0x03, 0x25, 0x17,
	0xda, 0xe5, 0x04, 0xbf, 0x5f, 0x5e, 0xa8, 0x74, 0x6d, 0xbe, 0xad, 0x0a, 0xce, 0xa0, 0xfd, 0x67,
	0x8f, 0x09, 0xef, 0xbc, 0x1c, 0x73, 0x06, 0xed, 0xc7, 0x37, 0x10, 0x0c, 0x9f, 0xa0, 0x15, 0xca,
	0x28, 0xee, 0x6b, 0x6e, 0x25, 0x9f, 0xd3, 0xb9, 0xc2, 0xac, 0x97, 0xe8, 0xd1, 0xfd, 0xef, 0xf6,
	0x51, 0xf6, 0x50, 0xb4, 0xbb, 0xce, 0x7e, 0x87, 0xee, 0xd5, 0x09, 0xba, 0x5f, 0x27, 0xe8, 0x41,
	0x9d, 0x70, 0x8f, 0xea, 0x84, 0x7b, 0x5c, 0x27, 0xdc, 0x93, 0x3a, 0xe1, 0x9e, 0xd6, 0x09, 0xba,
	0xea, 0x10, 0x74, 0xdd, 0x21, 0xdc, 0x2d, 0x87, 0xa0, 0xdb, 0x0e, 0xe1, 0xee, 0x38, 0x84, 0xbb,
	0xeb, 0x10, 0xee, 0x9e, 0x43, 0xd0, 0x7d, 0x87, 0xa0, 0x07, 0x0e, 0xe1, 0x1e, 0x39, 0x04, 0x3d,
	0x76, 0x08, 0xf7, 0xc4, 0x21, 0xe8, 0xa9, 0x43, 0xb8, 0xab, 0x0d, 0xc2, 0x5d, 0x6f, 0x10, 0x74,
	0xb3, 0x41, 0xb8, 0xaf, 0x1b, 0x04, 0x7d, 0xdb, 0x20, 0xdc, 0xad, 0x06, 0xe1, 0x6e, 0x37, 0x08,
	0xba, 0xd3, 0x20, 0xe8, 0x6e, 0x83, 0xa0, 0xb3, 0x07, 0x4b, 0x86, 0xc8, 0xd6, 0x29, 0x5b, 0xd7,
	0xf4, 0x92, 0x25, 0xea, 0x94, 0x5d, 0x32, 0x6a, 0xe5, 0xf4, 0xb3, 0x3f, 0xa9, 0xcc, 0x72, 0x29,
	0xcd, 0x98, 0x6e, 0xe6, 0xf3, 0xc3, 0x5e, 0xd6, 0x87, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x18,
	0x5d, 0x23, 0xbd, 0xa6, 0x0e, 0x00, 0x00,
}

func (x ApplicationPubSub_Service) String() string {
	s, ok := ApplicationPubSub_Service_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ApplicationPubSubIdentifiers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationPubSubIdentifiers)
	if !ok {
		that2, ok := that.(ApplicationPubSubIdentifiers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationIdentifiers.Equal(&that1.ApplicationIdentifiers) {
		return false
	}
	if this.PubSubID != that1.PubSubID {
		return false
	}
	return true
}
func (this *ApplicationPubSub) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationPubSub)
	if !ok {
		that2, ok := that.(ApplicationPubSub)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationPubSubIdentifiers.Equal(&that1.ApplicationPubSubIdentifiers) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return false
	}
	for i := range this.Attributes {
		if this.Attributes[i] != that1.Attributes[i] {
			return false
		}
	}
	if this.Format != that1.Format {
		return false
	}
	if this.Service != that1.Service {
		return false
	}
	if this.DownlinkPushTopic != that1.DownlinkPushTopic {
		return false
	}
	if this.DownlinkReplaceTopic != that1.DownlinkReplaceTopic {
		return false
	}
	if !this.UplinkMessage.Equal(that1.UplinkMessage) {
		return false
	}
	if !this.JoinAccept.Equal(that1.JoinAccept) {
		return false
	}
	if !this.DownlinkAck.Equal(that1.DownlinkAck) {
		return false
	}
	if !this.DownlinkNack.Equal(that1.DownlinkNack) {
		return false
	}
	if !this.DownlinkSent.Equal(that1.DownlinkSent) {
		return false
	}
	if !this.DownlinkFailed.Equal(that1.DownlinkFailed) {
		return false
	}
	if !this.DownlinkQueued.Equal(that1.DownlinkQueued) {
		return false
	}
	if !this.LocationSolved.Equal(that1.LocationSolved) {
		return false
	}
	return true
}
func (this *ApplicationPubSub_Message) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationPubSub_Message)
	if !ok {
		that2, ok := that.(ApplicationPubSub_Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Topic != that1.Topic {
		return false
	}
	return true
}
func (this *ApplicationPubSubs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationPubSubs)
	if !ok {
		that2, ok := that.(ApplicationPubSubs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Pubsubs) != len(that1.Pubsubs) {
		return false
	}
	for i := range this.Pubsubs {
		if !this.Pubsubs[i].Equal(that1.Pubsubs[i]) {
			return false
		}
	}
	return true
}
func (this *ApplicationPubSubFormats) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationPubSubFormats)
	if !ok {
		that2, ok := that.(ApplicationPubSubFormats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Formats) != len(that1.Formats) {
		return false
	}
	for i := range this.Formats {
		if this.Formats[i] != that1.Formats[i] {
			return false
		}
	}
	return true
}
func (this *GetApplicationPubSubRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetApplicationPubSubRequest)
	if !ok {
		that2, ok := that.(GetApplicationPubSubRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationPubSubIdentifiers.Equal(&that1.ApplicationPubSubIdentifiers) {
		return false
	}
	if !this.FieldMask.Equal(&that1.FieldMask) {
		return false
	}
	return true
}
func (this *ListApplicationPubSubsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListApplicationPubSubsRequest)
	if !ok {
		that2, ok := that.(ListApplicationPubSubsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationIdentifiers.Equal(&that1.ApplicationIdentifiers) {
		return false
	}
	if !this.FieldMask.Equal(&that1.FieldMask) {
		return false
	}
	return true
}
func (this *SetApplicationPubSubRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetApplicationPubSubRequest)
	if !ok {
		that2, ok := that.(SetApplicationPubSubRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationPubSub.Equal(&that1.ApplicationPubSub) {
		return false
	}
	if !this.FieldMask.Equal(&that1.FieldMask) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ApplicationPubSubRegistryClient is the client API for ApplicationPubSubRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApplicationPubSubRegistryClient interface {
	GetFormats(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*ApplicationPubSubFormats, error)
	Get(ctx context.Context, in *GetApplicationPubSubRequest, opts ...grpc.CallOption) (*ApplicationPubSub, error)
	List(ctx context.Context, in *ListApplicationPubSubsRequest, opts ...grpc.CallOption) (*ApplicationPubSubs, error)
	Set(ctx context.Context, in *SetApplicationPubSubRequest, opts ...grpc.CallOption) (*ApplicationPubSub, error)
	Delete(ctx context.Context, in *ApplicationPubSubIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
}

type applicationPubSubRegistryClient struct {
	cc *grpc.ClientConn
}

func NewApplicationPubSubRegistryClient(cc *grpc.ClientConn) ApplicationPubSubRegistryClient {
	return &applicationPubSubRegistryClient{cc}
}

func (c *applicationPubSubRegistryClient) GetFormats(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*ApplicationPubSubFormats, error) {
	out := new(ApplicationPubSubFormats)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationPubSubRegistry/GetFormats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationPubSubRegistryClient) Get(ctx context.Context, in *GetApplicationPubSubRequest, opts ...grpc.CallOption) (*ApplicationPubSub, error) {
	out := new(ApplicationPubSub)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationPubSubRegistry/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationPubSubRegistryClient) List(ctx context.Context, in *ListApplicationPubSubsRequest, opts ...grpc.CallOption) (*ApplicationPubSubs, error) {
	out := new(ApplicationPubSubs)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationPubSubRegistry/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationPubSubRegistryClient) Set(ctx context.Context, in *SetApplicationPubSubRequest, opts ...grpc.CallOption) (*ApplicationPubSub, error) {
	out := new(ApplicationPubSub)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationPubSubRegistry/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationPubSubRegistryClient) Delete(ctx context.Context, in *ApplicationPubSubIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationPubSubRegistry/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationPubSubRegistryServer is the server API for ApplicationPubSubRegistry service.
type ApplicationPubSubRegistryServer interface {
	GetFormats(context.Context, *types.Empty) (*ApplicationPubSubFormats, error)
	Get(context.Context, *GetApplicationPubSubRequest) (*ApplicationPubSub, error)
	List(context.Context, *ListApplicationPubSubsRequest) (*ApplicationPubSubs, error)
	Set(context.Context, *SetApplicationPubSubRequest) (*ApplicationPubSub, error)
	Delete(context.Context, *ApplicationPubSubIdentifiers) (*types.Empty, error)
}

func RegisterApplicationPubSubRegistryServer(s *grpc.Server, srv ApplicationPubSubRegistryServer) {
	s.RegisterService(&_ApplicationPubSubRegistry_serviceDesc, srv)
}

func _ApplicationPubSubRegistry_GetFormats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationPubSubRegistryServer).GetFormats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationPubSubRegistry/GetFormats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationPubSubRegistryServer).GetFormats(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationPubSubRegistry_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationPubSubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationPubSubRegistryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationPubSubRegistry/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationPubSubRegistryServer).Get(ctx, req.(*GetApplicationPubSubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationPubSubRegistry_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicationPubSubsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationPubSubRegistryServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationPubSubRegistry/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationPubSubRegistryServer).List(ctx, req.(*ListApplicationPubSubsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationPubSubRegistry_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetApplicationPubSubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationPubSubRegistryServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationPubSubRegistry/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationPubSubRegistryServer).Set(ctx, req.(*SetApplicationPubSubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationPubSubRegistry_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationPubSubIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationPubSubRegistryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationPubSubRegistry/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationPubSubRegistryServer).Delete(ctx, req.(*ApplicationPubSubIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApplicationPubSubRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.ApplicationPubSubRegistry",
	HandlerType: (*ApplicationPubSubRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFormats",
			Handler:    _ApplicationPubSubRegistry_GetFormats_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ApplicationPubSubRegistry_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ApplicationPubSubRegistry_List_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _ApplicationPubSubRegistry_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ApplicationPubSubRegistry_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/applicationserver_pubsub.proto",
}

func (m *ApplicationPubSubIdentifiers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationPubSubIdentifiers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(m.ApplicationIdentifiers.Size()))
	n1, err := m.ApplicationIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.PubSubID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(len(m.PubSubID)))
		i += copy(dAtA[i:], m.PubSubID)
	}
	return i, nil
}

func (m *ApplicationPubSub) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationPubSub) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(m.ApplicationPubSubIdentifiers.Size()))
	n2, err := m.ApplicationPubSubIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x12
	i++
	i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)))
	n3, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x1a
	i++
	i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)))
	n4, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if len(m.Attributes) > 0 {
		for k := range m.Attributes {
			dAtA[i] = 0x22
			i++
			v := m.Attributes[k]
			mapSize := 1 + len(k) + sovApplicationserverPubsub(uint64(len(k))) + 1 + len(v) + sovApplicationserverPubsub(uint64(len(v)))
			i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Format) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(len(m.Format)))
		i += copy(dAtA[i:], m.Format)
	}
	if m.Service != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(m.Service))
	}
	if len(m.DownlinkPushTopic) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(len(m.DownlinkPushTopic)))
		i += copy(dAtA[i:], m.DownlinkPushTopic)
	}
	if len(m.DownlinkReplaceTopic) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(len(m.DownlinkReplaceTopic)))
		i += copy(dAtA[i:], m.DownlinkReplaceTopic)
	}
	if m.UplinkMessage != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(m.UplinkMessage.Size()))
		n5, err := m.UplinkMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.JoinAccept != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(m.JoinAccept.Size()))
		n6, err := m.JoinAccept.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.DownlinkAck != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(m.DownlinkAck.Size()))
		n7, err := m.DownlinkAck.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.DownlinkNack != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(m.DownlinkNack.Size()))
		n8, err := m.DownlinkNack.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.DownlinkSent != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(m.DownlinkSent.Size()))
		n9, err := m.DownlinkSent.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.DownlinkFailed != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(m.DownlinkFailed.Size()))
		n10, err := m.DownlinkFailed.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.DownlinkQueued != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(m.DownlinkQueued.Size()))
		n11, err := m.DownlinkQueued.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.LocationSolved != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(m.LocationSolved.Size()))
		n12, err := m.LocationSolved.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *ApplicationPubSub_Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationPubSub_Message) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Topic) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(len(m.Topic)))
		i += copy(dAtA[i:], m.Topic)
	}
	return i, nil
}

func (m *ApplicationPubSubs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationPubSubs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Pubsubs) > 0 {
		for _, msg := range m.Pubsubs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ApplicationPubSubFormats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationPubSubFormats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Formats) > 0 {
		for k := range m.Formats {
			dAtA[i] = 0xa
			i++
			v := m.Formats[k]
			mapSize := 1 + len(k) + sovApplicationserverPubsub(uint64(len(k))) + 1 + len(v) + sovApplicationserverPubsub(uint64(len(v)))
			i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *GetApplicationPubSubRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetApplicationPubSubRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(m.ApplicationPubSubIdentifiers.Size()))
	n13, err := m.ApplicationPubSubIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	dAtA[i] = 0x12
	i++
	i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(m.FieldMask.Size()))
	n14, err := m.FieldMask.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	return i, nil
}

func (m *ListApplicationPubSubsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListApplicationPubSubsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(m.ApplicationIdentifiers.Size()))
	n15, err := m.ApplicationIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	dAtA[i] = 0x12
	i++
	i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(m.FieldMask.Size()))
	n16, err := m.FieldMask.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	return i, nil
}

func (m *SetApplicationPubSubRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetApplicationPubSubRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(m.ApplicationPubSub.Size()))
	n17, err := m.ApplicationPubSub.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n17
	dAtA[i] = 0x12
	i++
	i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(m.FieldMask.Size()))
	n18, err := m.FieldMask.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n18
	return i, nil
}

func encodeVarintApplicationserverPubsub(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedApplicationPubSubIdentifiers(r randyApplicationserverPubsub, easy bool) *ApplicationPubSubIdentifiers {
	this := &ApplicationPubSubIdentifiers{}
	v1 := NewPopulatedApplicationIdentifiers(r, easy)
	this.ApplicationIdentifiers = *v1
	this.PubSubID = randStringApplicationserverPubsub(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedApplicationPubSub(r randyApplicationserverPubsub, easy bool) *ApplicationPubSub {
	this := &ApplicationPubSub{}
	v2 := NewPopulatedApplicationPubSubIdentifiers(r, easy)
	this.ApplicationPubSubIdentifiers = *v2
	v3 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.CreatedAt = *v3
	v4 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.UpdatedAt = *v4
	if r.Intn(10) != 0 {
		v5 := r.Intn(10)
		this.Attributes = make(map[string]string)
		for i := 0; i < v5; i++ {
			this.Attributes[randStringApplicationserverPubsub(r)] = randStringApplicationserverPubsub(r)
		}
	}
	this.Format = randStringApplicationserverPubsub(r)
	this.Service = ApplicationPubSub_Service([]int32{0, 1, 2, 3, 4, 5}[r.Intn(6)])
	this.DownlinkPushTopic = randStringApplicationserverPubsub(r)
	this.DownlinkReplaceTopic = randStringApplicationserverPubsub(r)
	if r.Intn(10) != 0 {
		this.UplinkMessage = NewPopulatedApplicationPubSub_Message(r, easy)
	}
	if r.Intn(10) != 0 {
		this.JoinAccept = NewPopulatedApplicationPubSub_Message(r, easy)
	}
	if r.Intn(10) != 0 {
		this.DownlinkAck = NewPopulatedApplicationPubSub_Message(r, easy)
	}
	if r.Intn(10) != 0 {
		this.DownlinkNack = NewPopulatedApplicationPubSub_Message(r, easy)
	}
	if r.Intn(10) != 0 {
		this.DownlinkSent = NewPopulatedApplicationPubSub_Message(r, easy)
	}
	if r.Intn(10) != 0 {
		this.DownlinkFailed = NewPopulatedApplicationPubSub_Message(r, easy)
	}
	if r.Intn(10) != 0 {
		this.DownlinkQueued = NewPopulatedApplicationPubSub_Message(r, easy)
	}
	if r.Intn(10) != 0 {
		this.LocationSolved = NewPopulatedApplicationPubSub_Message(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedApplicationPubSub_Message(r randyApplicationserverPubsub, easy bool) *ApplicationPubSub_Message {
	this := &ApplicationPubSub_Message{}
	this.Topic = randStringApplicationserverPubsub(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedApplicationPubSubs(r randyApplicationserverPubsub, easy bool) *ApplicationPubSubs {
	this := &ApplicationPubSubs{}
	if r.Intn(10) != 0 {
		v6 := r.Intn(5)
		this.Pubsubs = make([]*ApplicationPubSub, v6)
		for i := 0; i < v6; i++ {
			this.Pubsubs[i] = NewPopulatedApplicationPubSub(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedApplicationPubSubFormats(r randyApplicationserverPubsub, easy bool) *ApplicationPubSubFormats {
	this := &ApplicationPubSubFormats{}
	if r.Intn(10) != 0 {
		v7 := r.Intn(10)
		this.Formats = make(map[string]string)
		for i := 0; i < v7; i++ {
			this.Formats[randStringApplicationserverPubsub(r)] = randStringApplicationserverPubsub(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetApplicationPubSubRequest(r randyApplicationserverPubsub, easy bool) *GetApplicationPubSubRequest {
	this := &GetApplicationPubSubRequest{}
	v8 := NewPopulatedApplicationPubSubIdentifiers(r, easy)
	this.ApplicationPubSubIdentifiers = *v8
	v9 := types.NewPopulatedFieldMask(r, easy)
	this.FieldMask = *v9
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListApplicationPubSubsRequest(r randyApplicationserverPubsub, easy bool) *ListApplicationPubSubsRequest {
	this := &ListApplicationPubSubsRequest{}
	v10 := NewPopulatedApplicationIdentifiers(r, easy)
	this.ApplicationIdentifiers = *v10
	v11 := types.NewPopulatedFieldMask(r, easy)
	this.FieldMask = *v11
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSetApplicationPubSubRequest(r randyApplicationserverPubsub, easy bool) *SetApplicationPubSubRequest {
	this := &SetApplicationPubSubRequest{}
	v12 := NewPopulatedApplicationPubSub(r, easy)
	this.ApplicationPubSub = *v12
	v13 := types.NewPopulatedFieldMask(r, easy)
	this.FieldMask = *v13
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyApplicationserverPubsub interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneApplicationserverPubsub(r randyApplicationserverPubsub) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringApplicationserverPubsub(r randyApplicationserverPubsub) string {
	v14 := r.Intn(100)
	tmps := make([]rune, v14)
	for i := 0; i < v14; i++ {
		tmps[i] = randUTF8RuneApplicationserverPubsub(r)
	}
	return string(tmps)
}
func randUnrecognizedApplicationserverPubsub(r randyApplicationserverPubsub, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldApplicationserverPubsub(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldApplicationserverPubsub(dAtA []byte, r randyApplicationserverPubsub, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateApplicationserverPubsub(dAtA, uint64(key))
		v15 := r.Int63()
		if r.Intn(2) == 0 {
			v15 *= -1
		}
		dAtA = encodeVarintPopulateApplicationserverPubsub(dAtA, uint64(v15))
	case 1:
		dAtA = encodeVarintPopulateApplicationserverPubsub(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateApplicationserverPubsub(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateApplicationserverPubsub(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateApplicationserverPubsub(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateApplicationserverPubsub(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *ApplicationPubSubIdentifiers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ApplicationIdentifiers.Size()
	n += 1 + l + sovApplicationserverPubsub(uint64(l))
	l = len(m.PubSubID)
	if l > 0 {
		n += 1 + l + sovApplicationserverPubsub(uint64(l))
	}
	return n
}

func (m *ApplicationPubSub) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ApplicationPubSubIdentifiers.Size()
	n += 1 + l + sovApplicationserverPubsub(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovApplicationserverPubsub(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)
	n += 1 + l + sovApplicationserverPubsub(uint64(l))
	if len(m.Attributes) > 0 {
		for k, v := range m.Attributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApplicationserverPubsub(uint64(len(k))) + 1 + len(v) + sovApplicationserverPubsub(uint64(len(v)))
			n += mapEntrySize + 1 + sovApplicationserverPubsub(uint64(mapEntrySize))
		}
	}
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovApplicationserverPubsub(uint64(l))
	}
	if m.Service != 0 {
		n += 1 + sovApplicationserverPubsub(uint64(m.Service))
	}
	l = len(m.DownlinkPushTopic)
	if l > 0 {
		n += 1 + l + sovApplicationserverPubsub(uint64(l))
	}
	l = len(m.DownlinkReplaceTopic)
	if l > 0 {
		n += 1 + l + sovApplicationserverPubsub(uint64(l))
	}
	if m.UplinkMessage != nil {
		l = m.UplinkMessage.Size()
		n += 1 + l + sovApplicationserverPubsub(uint64(l))
	}
	if m.JoinAccept != nil {
		l = m.JoinAccept.Size()
		n += 1 + l + sovApplicationserverPubsub(uint64(l))
	}
	if m.DownlinkAck != nil {
		l = m.DownlinkAck.Size()
		n += 1 + l + sovApplicationserverPubsub(uint64(l))
	}
	if m.DownlinkNack != nil {
		l = m.DownlinkNack.Size()
		n += 1 + l + sovApplicationserverPubsub(uint64(l))
	}
	if m.DownlinkSent != nil {
		l = m.DownlinkSent.Size()
		n += 1 + l + sovApplicationserverPubsub(uint64(l))
	}
	if m.DownlinkFailed != nil {
		l = m.DownlinkFailed.Size()
		n += 1 + l + sovApplicationserverPubsub(uint64(l))
	}
	if m.DownlinkQueued != nil {
		l = m.DownlinkQueued.Size()
		n += 1 + l + sovApplicationserverPubsub(uint64(l))
	}
	if m.LocationSolved != nil {
		l = m.LocationSolved.Size()
		n += 2 + l + sovApplicationserverPubsub(uint64(l))
	}
	return n
}

func (m *ApplicationPubSub_Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovApplicationserverPubsub(uint64(l))
	}
	return n
}

func (m *ApplicationPubSubs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pubsubs) > 0 {
		for _, e := range m.Pubsubs {
			l = e.Size()
			n += 1 + l + sovApplicationserverPubsub(uint64(l))
		}
	}
	return n
}

func (m *ApplicationPubSubFormats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Formats) > 0 {
		for k, v := range m.Formats {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApplicationserverPubsub(uint64(len(k))) + 1 + len(v) + sovApplicationserverPubsub(uint64(len(v)))
			n += mapEntrySize + 1 + sovApplicationserverPubsub(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *GetApplicationPubSubRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ApplicationPubSubIdentifiers.Size()
	n += 1 + l + sovApplicationserverPubsub(uint64(l))
	l = m.FieldMask.Size()
	n += 1 + l + sovApplicationserverPubsub(uint64(l))
	return n
}

func (m *ListApplicationPubSubsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ApplicationIdentifiers.Size()
	n += 1 + l + sovApplicationserverPubsub(uint64(l))
	l = m.FieldMask.Size()
	n += 1 + l + sovApplicationserverPubsub(uint64(l))
	return n
}

func (m *SetApplicationPubSubRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ApplicationPubSub.Size()
	n += 1 + l + sovApplicationserverPubsub(uint64(l))
	l = m.FieldMask.Size()
	n += 1 + l + sovApplicationserverPubsub(uint64(l))
	return n
}

func sovApplicationserverPubsub(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApplicationserverPubsub(x uint64) (n int) {
	return sovApplicationserverPubsub((x << 1) ^ uint64((int64(x) >> 63)))
}
func (this *ApplicationPubSubIdentifiers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationPubSubIdentifiers{`,
		`ApplicationIdentifiers:` + strings.Replace(strings.Replace(this.ApplicationIdentifiers.String(), "ApplicationIdentifiers", "ApplicationIdentifiers", 1), `&`, ``, 1) + `,`,
		`PubSubID:` + fmt.Sprintf("%v", this.PubSubID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationPubSub) String() string {
	if this == nil {
		return "nil"
	}
	keysForAttributes := make([]string, 0, len(this.Attributes))
	for k := range this.Attributes {
		keysForAttributes = append(keysForAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributes)
	mapStringForAttributes := "map[string]string{"
	for _, k := range keysForAttributes {
		mapStringForAttributes += fmt.Sprintf("%v: %v,", k, this.Attributes[k])
	}
	mapStringForAttributes += "}"
	s := strings.Join([]string{`&ApplicationPubSub{`,
		`ApplicationPubSubIdentifiers:` + strings.Replace(strings.Replace(this.ApplicationPubSubIdentifiers.String(), "ApplicationPubSubIdentifiers", "ApplicationPubSubIdentifiers", 1), `&`, ``, 1) + `,`,
		`CreatedAt:` + strings.Replace(strings.Replace(this.CreatedAt.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`UpdatedAt:` + strings.Replace(strings.Replace(this.UpdatedAt.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`Attributes:` + mapStringForAttributes + `,`,
		`Format:` + fmt.Sprintf("%v", this.Format) + `,`,
		`Service:` + fmt.Sprintf("%v", this.Service) + `,`,
		`DownlinkPushTopic:` + fmt.Sprintf("%v", this.DownlinkPushTopic) + `,`,
		`DownlinkReplaceTopic:` + fmt.Sprintf("%v", this.DownlinkReplaceTopic) + `,`,
		`UplinkMessage:` + strings.Replace(fmt.Sprintf("%v", this.UplinkMessage), "ApplicationPubSub_Message", "ApplicationPubSub_Message", 1) + `,`,
		`JoinAccept:` + strings.Replace(fmt.Sprintf("%v", this.JoinAccept), "ApplicationPubSub_Message", "ApplicationPubSub_Message", 1) + `,`,
		`DownlinkAck:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkAck), "ApplicationPubSub_Message", "ApplicationPubSub_Message", 1) + `,`,
		`DownlinkNack:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkNack), "ApplicationPubSub_Message", "ApplicationPubSub_Message", 1) + `,`,
		`DownlinkSent:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkSent), "ApplicationPubSub_Message", "ApplicationPubSub_Message", 1) + `,`,
		`DownlinkFailed:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkFailed), "ApplicationPubSub_Message", "ApplicationPubSub_Message", 1) + `,`,
		`DownlinkQueued:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkQueued), "ApplicationPubSub_Message", "ApplicationPubSub_Message", 1) + `,`,
		`LocationSolved:` + strings.Replace(fmt.Sprintf("%v", this.LocationSolved), "ApplicationPubSub_Message", "ApplicationPubSub_Message", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationPubSub_Message) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationPubSub_Message{`,
		`Topic:` + fmt.Sprintf("%v", this.Topic) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationPubSubs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationPubSubs{`,
		`Pubsubs:` + strings.Replace(fmt.Sprintf("%v", this.Pubsubs), "ApplicationPubSub", "ApplicationPubSub", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationPubSubFormats) String() string {
	if this == nil {
		return "nil"
	}
	keysForFormats := make([]string, 0, len(this.Formats))
	for k := range this.Formats {
		keysForFormats = append(keysForFormats, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForFormats)
	mapStringForFormats := "map[string]string{"
	for _, k := range keysForFormats {
		mapStringForFormats += fmt.Sprintf("%v: %v,", k, this.Formats[k])
	}
	mapStringForFormats += "}"
	s := strings.Join([]string{`&ApplicationPubSubFormats{`,
		`Formats:` + mapStringForFormats + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetApplicationPubSubRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetApplicationPubSubRequest{`,
		`ApplicationPubSubIdentifiers:` + strings.Replace(strings.Replace(this.ApplicationPubSubIdentifiers.String(), "ApplicationPubSubIdentifiers", "ApplicationPubSubIdentifiers", 1), `&`, ``, 1) + `,`,
		`FieldMask:` + strings.Replace(strings.Replace(this.FieldMask.String(), "FieldMask", "types.FieldMask", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListApplicationPubSubsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListApplicationPubSubsRequest{`,
		`ApplicationIdentifiers:` + strings.Replace(strings.Replace(this.ApplicationIdentifiers.String(), "ApplicationIdentifiers", "ApplicationIdentifiers", 1), `&`, ``, 1) + `,`,
		`FieldMask:` + strings.Replace(strings.Replace(this.FieldMask.String(), "FieldMask", "types.FieldMask", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetApplicationPubSubRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetApplicationPubSubRequest{`,
		`ApplicationPubSub:` + strings.Replace(strings.Replace(this.ApplicationPubSub.String(), "ApplicationPubSub", "ApplicationPubSub", 1), `&`, ``, 1) + `,`,
		`FieldMask:` + strings.Replace(strings.Replace(this.FieldMask.String(), "FieldMask", "types.FieldMask", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringApplicationserverPubsub(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ApplicationPubSubIdentifiers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationserverPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationPubSubIdentifiers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationPubSubIdentifiers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubSubID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubSubID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationserverPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationPubSub) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationserverPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationPubSub: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationPubSub: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationPubSubIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationPubSubIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApplicationserverPubsub
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApplicationserverPubsub
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApplicationserverPubsub
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApplicationserverPubsub
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApplicationserverPubsub
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApplicationserverPubsub
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApplicationserverPubsub
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApplicationserverPubsub(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApplicationserverPubsub
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attributes[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			m.Service = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Service |= ApplicationPubSub_Service(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkPushTopic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownlinkPushTopic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkReplaceTopic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownlinkReplaceTopic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplinkMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UplinkMessage == nil {
				m.UplinkMessage = &ApplicationPubSub_Message{}
			}
			if err := m.UplinkMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinAccept", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JoinAccept == nil {
				m.JoinAccept = &ApplicationPubSub_Message{}
			}
			if err := m.JoinAccept.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkAck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DownlinkAck == nil {
				m.DownlinkAck = &ApplicationPubSub_Message{}
			}
			if err := m.DownlinkAck.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkNack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DownlinkNack == nil {
				m.DownlinkNack = &ApplicationPubSub_Message{}
			}
			if err := m.DownlinkNack.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkSent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DownlinkSent == nil {
				m.DownlinkSent = &ApplicationPubSub_Message{}
			}
			if err := m.DownlinkSent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkFailed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DownlinkFailed == nil {
				m.DownlinkFailed = &ApplicationPubSub_Message{}
			}
			if err := m.DownlinkFailed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkQueued", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DownlinkQueued == nil {
				m.DownlinkQueued = &ApplicationPubSub_Message{}
			}
			if err := m.DownlinkQueued.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationSolved", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LocationSolved == nil {
				m.LocationSolved = &ApplicationPubSub_Message{}
			}
			if err := m.LocationSolved.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationserverPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationPubSub_Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationserverPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationserverPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationPubSubs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationserverPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationPubSubs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationPubSubs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubsubs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubsubs = append(m.Pubsubs, &ApplicationPubSub{})
			if err := m.Pubsubs[len(m.Pubsubs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationserverPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationPubSubFormats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationserverPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationPubSubFormats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationPubSubFormats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Formats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Formats == nil {
				m.Formats = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApplicationserverPubsub
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApplicationserverPubsub
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApplicationserverPubsub
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApplicationserverPubsub
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApplicationserverPubsub
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApplicationserverPubsub
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApplicationserverPubsub
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApplicationserverPubsub(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApplicationserverPubsub
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Formats[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationserverPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetApplicationPubSubRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationserverPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetApplicationPubSubRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetApplicationPubSubRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationPubSubIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationPubSubIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationserverPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListApplicationPubSubsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationserverPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListApplicationPubSubsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListApplicationPubSubsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationserverPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetApplicationPubSubRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationserverPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetApplicationPubSubRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetApplicationPubSubRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationPubSub", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationPubSub.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationserverPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApplicationserverPubsub(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApplicationserverPubsub
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApplicationserverPubsub
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthApplicationserverPubsub
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApplicationserverPubsub
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApplicationserverPubsub(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthApplicationserverPubsub
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApplicationserverPubsub = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApplicationserverPubsub   = fmt.Errorf("proto: integer overflow")
)
