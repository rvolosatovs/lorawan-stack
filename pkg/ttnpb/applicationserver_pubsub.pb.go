// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/applicationserver_pubsub.proto

package ttnpb

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
	time "time"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ApplicationPubSubIdentifiers struct {
	ApplicationIdentifiers `protobuf:"bytes,1,opt,name=application_ids,json=applicationIds,proto3,embedded=application_ids" json:"application_ids"`
	PubSubID               string   `protobuf:"bytes,2,opt,name=pub_sub_id,json=pubSubId,proto3" json:"pub_sub_id,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *ApplicationPubSubIdentifiers) Reset()      { *m = ApplicationPubSubIdentifiers{} }
func (*ApplicationPubSubIdentifiers) ProtoMessage() {}
func (*ApplicationPubSubIdentifiers) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dce56ec18597200, []int{0}
}
func (m *ApplicationPubSubIdentifiers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationPubSubIdentifiers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationPubSubIdentifiers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationPubSubIdentifiers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationPubSubIdentifiers.Merge(m, src)
}
func (m *ApplicationPubSubIdentifiers) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationPubSubIdentifiers) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationPubSubIdentifiers.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationPubSubIdentifiers proto.InternalMessageInfo

func (m *ApplicationPubSubIdentifiers) GetPubSubID() string {
	if m != nil {
		return m.PubSubID
	}
	return ""
}

type ApplicationPubSub struct {
	ApplicationPubSubIdentifiers `protobuf:"bytes,1,opt,name=ids,proto3,embedded=ids" json:"ids"`
	CreatedAt                    time.Time `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
	UpdatedAt                    time.Time `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at"`
	// The format to use for the body.
	// Supported values depend on the Application Server configuration.
	Format string `protobuf:"bytes,4,opt,name=format,proto3" json:"format,omitempty"`
	// The provider for the PubSub.
	//
	// Types that are valid to be assigned to Provider:
	//	*ApplicationPubSub_NATS
	Provider isApplicationPubSub_Provider `protobuf_oneof:"provider"`
	// Base topic name to which the messages topic is appended.
	BaseTopic string `protobuf:"bytes,6,opt,name=base_topic,json=baseTopic,proto3" json:"base_topic,omitempty"`
	// The topic to which the Application Server subscribes for downlink queue push operations.
	DownlinkPush *ApplicationPubSub_Message `protobuf:"bytes,7,opt,name=downlink_push,json=downlinkPush,proto3" json:"downlink_push,omitempty"`
	// The topic to which the Application Server subscribes for downlink queue replace operations.
	DownlinkReplace      *ApplicationPubSub_Message `protobuf:"bytes,8,opt,name=downlink_replace,json=downlinkReplace,proto3" json:"downlink_replace,omitempty"`
	UplinkMessage        *ApplicationPubSub_Message `protobuf:"bytes,9,opt,name=uplink_message,json=uplinkMessage,proto3" json:"uplink_message,omitempty"`
	JoinAccept           *ApplicationPubSub_Message `protobuf:"bytes,10,opt,name=join_accept,json=joinAccept,proto3" json:"join_accept,omitempty"`
	DownlinkAck          *ApplicationPubSub_Message `protobuf:"bytes,11,opt,name=downlink_ack,json=downlinkAck,proto3" json:"downlink_ack,omitempty"`
	DownlinkNack         *ApplicationPubSub_Message `protobuf:"bytes,12,opt,name=downlink_nack,json=downlinkNack,proto3" json:"downlink_nack,omitempty"`
	DownlinkSent         *ApplicationPubSub_Message `protobuf:"bytes,13,opt,name=downlink_sent,json=downlinkSent,proto3" json:"downlink_sent,omitempty"`
	DownlinkFailed       *ApplicationPubSub_Message `protobuf:"bytes,14,opt,name=downlink_failed,json=downlinkFailed,proto3" json:"downlink_failed,omitempty"`
	DownlinkQueued       *ApplicationPubSub_Message `protobuf:"bytes,15,opt,name=downlink_queued,json=downlinkQueued,proto3" json:"downlink_queued,omitempty"`
	LocationSolved       *ApplicationPubSub_Message `protobuf:"bytes,16,opt,name=location_solved,json=locationSolved,proto3" json:"location_solved,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ApplicationPubSub) Reset()      { *m = ApplicationPubSub{} }
func (*ApplicationPubSub) ProtoMessage() {}
func (*ApplicationPubSub) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dce56ec18597200, []int{1}
}
func (m *ApplicationPubSub) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationPubSub) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationPubSub.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationPubSub) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationPubSub.Merge(m, src)
}
func (m *ApplicationPubSub) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationPubSub) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationPubSub.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationPubSub proto.InternalMessageInfo

type isApplicationPubSub_Provider interface {
	isApplicationPubSub_Provider()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ApplicationPubSub_NATS struct {
	NATS *ApplicationPubSub_NATSProvider `protobuf:"bytes,17,opt,name=nats,proto3,oneof"`
}

func (*ApplicationPubSub_NATS) isApplicationPubSub_Provider() {}

func (m *ApplicationPubSub) GetProvider() isApplicationPubSub_Provider {
	if m != nil {
		return m.Provider
	}
	return nil
}

func (m *ApplicationPubSub) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *ApplicationPubSub) GetUpdatedAt() time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return time.Time{}
}

func (m *ApplicationPubSub) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *ApplicationPubSub) GetNATS() *ApplicationPubSub_NATSProvider {
	if x, ok := m.GetProvider().(*ApplicationPubSub_NATS); ok {
		return x.NATS
	}
	return nil
}

func (m *ApplicationPubSub) GetBaseTopic() string {
	if m != nil {
		return m.BaseTopic
	}
	return ""
}

func (m *ApplicationPubSub) GetDownlinkPush() *ApplicationPubSub_Message {
	if m != nil {
		return m.DownlinkPush
	}
	return nil
}

func (m *ApplicationPubSub) GetDownlinkReplace() *ApplicationPubSub_Message {
	if m != nil {
		return m.DownlinkReplace
	}
	return nil
}

func (m *ApplicationPubSub) GetUplinkMessage() *ApplicationPubSub_Message {
	if m != nil {
		return m.UplinkMessage
	}
	return nil
}

func (m *ApplicationPubSub) GetJoinAccept() *ApplicationPubSub_Message {
	if m != nil {
		return m.JoinAccept
	}
	return nil
}

func (m *ApplicationPubSub) GetDownlinkAck() *ApplicationPubSub_Message {
	if m != nil {
		return m.DownlinkAck
	}
	return nil
}

func (m *ApplicationPubSub) GetDownlinkNack() *ApplicationPubSub_Message {
	if m != nil {
		return m.DownlinkNack
	}
	return nil
}

func (m *ApplicationPubSub) GetDownlinkSent() *ApplicationPubSub_Message {
	if m != nil {
		return m.DownlinkSent
	}
	return nil
}

func (m *ApplicationPubSub) GetDownlinkFailed() *ApplicationPubSub_Message {
	if m != nil {
		return m.DownlinkFailed
	}
	return nil
}

func (m *ApplicationPubSub) GetDownlinkQueued() *ApplicationPubSub_Message {
	if m != nil {
		return m.DownlinkQueued
	}
	return nil
}

func (m *ApplicationPubSub) GetLocationSolved() *ApplicationPubSub_Message {
	if m != nil {
		return m.LocationSolved
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ApplicationPubSub) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ApplicationPubSub_OneofMarshaler, _ApplicationPubSub_OneofUnmarshaler, _ApplicationPubSub_OneofSizer, []interface{}{
		(*ApplicationPubSub_NATS)(nil),
	}
}

func _ApplicationPubSub_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ApplicationPubSub)
	// provider
	switch x := m.Provider.(type) {
	case *ApplicationPubSub_NATS:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NATS); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ApplicationPubSub.Provider has unexpected type %T", x)
	}
	return nil
}

func _ApplicationPubSub_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ApplicationPubSub)
	switch tag {
	case 17: // provider.nats
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ApplicationPubSub_NATSProvider)
		err := b.DecodeMessage(msg)
		m.Provider = &ApplicationPubSub_NATS{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ApplicationPubSub_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ApplicationPubSub)
	// provider
	switch x := m.Provider.(type) {
	case *ApplicationPubSub_NATS:
		s := proto.Size(x.NATS)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// The NATS provider settings.
type ApplicationPubSub_NATSProvider struct {
	// The server connection URL.
	ServerURL            string   `protobuf:"bytes,1,opt,name=server_url,json=serverUrl,proto3" json:"server_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplicationPubSub_NATSProvider) Reset()      { *m = ApplicationPubSub_NATSProvider{} }
func (*ApplicationPubSub_NATSProvider) ProtoMessage() {}
func (*ApplicationPubSub_NATSProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dce56ec18597200, []int{1, 0}
}
func (m *ApplicationPubSub_NATSProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationPubSub_NATSProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationPubSub_NATSProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationPubSub_NATSProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationPubSub_NATSProvider.Merge(m, src)
}
func (m *ApplicationPubSub_NATSProvider) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationPubSub_NATSProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationPubSub_NATSProvider.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationPubSub_NATSProvider proto.InternalMessageInfo

func (m *ApplicationPubSub_NATSProvider) GetServerURL() string {
	if m != nil {
		return m.ServerURL
	}
	return ""
}

type ApplicationPubSub_Message struct {
	// The topic on which the Application Server publishes or receives the messages.
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplicationPubSub_Message) Reset()      { *m = ApplicationPubSub_Message{} }
func (*ApplicationPubSub_Message) ProtoMessage() {}
func (*ApplicationPubSub_Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dce56ec18597200, []int{1, 1}
}
func (m *ApplicationPubSub_Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationPubSub_Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationPubSub_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationPubSub_Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationPubSub_Message.Merge(m, src)
}
func (m *ApplicationPubSub_Message) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationPubSub_Message) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationPubSub_Message.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationPubSub_Message proto.InternalMessageInfo

func (m *ApplicationPubSub_Message) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

type ApplicationPubSubs struct {
	Pubsubs              []*ApplicationPubSub `protobuf:"bytes,1,rep,name=pubsubs,proto3" json:"pubsubs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ApplicationPubSubs) Reset()      { *m = ApplicationPubSubs{} }
func (*ApplicationPubSubs) ProtoMessage() {}
func (*ApplicationPubSubs) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dce56ec18597200, []int{2}
}
func (m *ApplicationPubSubs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationPubSubs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationPubSubs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationPubSubs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationPubSubs.Merge(m, src)
}
func (m *ApplicationPubSubs) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationPubSubs) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationPubSubs.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationPubSubs proto.InternalMessageInfo

func (m *ApplicationPubSubs) GetPubsubs() []*ApplicationPubSub {
	if m != nil {
		return m.Pubsubs
	}
	return nil
}

type ApplicationPubSubFormats struct {
	// Format and description.
	Formats              map[string]string `protobuf:"bytes,1,rep,name=formats,proto3" json:"formats,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ApplicationPubSubFormats) Reset()      { *m = ApplicationPubSubFormats{} }
func (*ApplicationPubSubFormats) ProtoMessage() {}
func (*ApplicationPubSubFormats) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dce56ec18597200, []int{3}
}
func (m *ApplicationPubSubFormats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationPubSubFormats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationPubSubFormats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationPubSubFormats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationPubSubFormats.Merge(m, src)
}
func (m *ApplicationPubSubFormats) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationPubSubFormats) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationPubSubFormats.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationPubSubFormats proto.InternalMessageInfo

func (m *ApplicationPubSubFormats) GetFormats() map[string]string {
	if m != nil {
		return m.Formats
	}
	return nil
}

type GetApplicationPubSubRequest struct {
	ApplicationPubSubIdentifiers `protobuf:"bytes,1,opt,name=ids,proto3,embedded=ids" json:"ids"`
	FieldMask                    types.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask"`
	XXX_NoUnkeyedLiteral         struct{}        `json:"-"`
	XXX_sizecache                int32           `json:"-"`
}

func (m *GetApplicationPubSubRequest) Reset()      { *m = GetApplicationPubSubRequest{} }
func (*GetApplicationPubSubRequest) ProtoMessage() {}
func (*GetApplicationPubSubRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dce56ec18597200, []int{4}
}
func (m *GetApplicationPubSubRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetApplicationPubSubRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetApplicationPubSubRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetApplicationPubSubRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetApplicationPubSubRequest.Merge(m, src)
}
func (m *GetApplicationPubSubRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetApplicationPubSubRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetApplicationPubSubRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetApplicationPubSubRequest proto.InternalMessageInfo

func (m *GetApplicationPubSubRequest) GetFieldMask() types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return types.FieldMask{}
}

type ListApplicationPubSubsRequest struct {
	ApplicationIdentifiers `protobuf:"bytes,1,opt,name=application_ids,json=applicationIds,proto3,embedded=application_ids" json:"application_ids"`
	FieldMask              types.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask"`
	XXX_NoUnkeyedLiteral   struct{}        `json:"-"`
	XXX_sizecache          int32           `json:"-"`
}

func (m *ListApplicationPubSubsRequest) Reset()      { *m = ListApplicationPubSubsRequest{} }
func (*ListApplicationPubSubsRequest) ProtoMessage() {}
func (*ListApplicationPubSubsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dce56ec18597200, []int{5}
}
func (m *ListApplicationPubSubsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListApplicationPubSubsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListApplicationPubSubsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListApplicationPubSubsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListApplicationPubSubsRequest.Merge(m, src)
}
func (m *ListApplicationPubSubsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListApplicationPubSubsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListApplicationPubSubsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListApplicationPubSubsRequest proto.InternalMessageInfo

func (m *ListApplicationPubSubsRequest) GetFieldMask() types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return types.FieldMask{}
}

type SetApplicationPubSubRequest struct {
	ApplicationPubSub    `protobuf:"bytes,1,opt,name=pubsub,proto3,embedded=pubsub" json:"pubsub"`
	FieldMask            types.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SetApplicationPubSubRequest) Reset()      { *m = SetApplicationPubSubRequest{} }
func (*SetApplicationPubSubRequest) ProtoMessage() {}
func (*SetApplicationPubSubRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dce56ec18597200, []int{6}
}
func (m *SetApplicationPubSubRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetApplicationPubSubRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetApplicationPubSubRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetApplicationPubSubRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetApplicationPubSubRequest.Merge(m, src)
}
func (m *SetApplicationPubSubRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetApplicationPubSubRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetApplicationPubSubRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetApplicationPubSubRequest proto.InternalMessageInfo

func (m *SetApplicationPubSubRequest) GetFieldMask() types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return types.FieldMask{}
}

func init() {
	proto.RegisterType((*ApplicationPubSubIdentifiers)(nil), "ttn.lorawan.v3.ApplicationPubSubIdentifiers")
	golang_proto.RegisterType((*ApplicationPubSubIdentifiers)(nil), "ttn.lorawan.v3.ApplicationPubSubIdentifiers")
	proto.RegisterType((*ApplicationPubSub)(nil), "ttn.lorawan.v3.ApplicationPubSub")
	golang_proto.RegisterType((*ApplicationPubSub)(nil), "ttn.lorawan.v3.ApplicationPubSub")
	proto.RegisterType((*ApplicationPubSub_NATSProvider)(nil), "ttn.lorawan.v3.ApplicationPubSub.NATSProvider")
	golang_proto.RegisterType((*ApplicationPubSub_NATSProvider)(nil), "ttn.lorawan.v3.ApplicationPubSub.NATSProvider")
	proto.RegisterType((*ApplicationPubSub_Message)(nil), "ttn.lorawan.v3.ApplicationPubSub.Message")
	golang_proto.RegisterType((*ApplicationPubSub_Message)(nil), "ttn.lorawan.v3.ApplicationPubSub.Message")
	proto.RegisterType((*ApplicationPubSubs)(nil), "ttn.lorawan.v3.ApplicationPubSubs")
	golang_proto.RegisterType((*ApplicationPubSubs)(nil), "ttn.lorawan.v3.ApplicationPubSubs")
	proto.RegisterType((*ApplicationPubSubFormats)(nil), "ttn.lorawan.v3.ApplicationPubSubFormats")
	golang_proto.RegisterType((*ApplicationPubSubFormats)(nil), "ttn.lorawan.v3.ApplicationPubSubFormats")
	proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.ApplicationPubSubFormats.FormatsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.ApplicationPubSubFormats.FormatsEntry")
	proto.RegisterType((*GetApplicationPubSubRequest)(nil), "ttn.lorawan.v3.GetApplicationPubSubRequest")
	golang_proto.RegisterType((*GetApplicationPubSubRequest)(nil), "ttn.lorawan.v3.GetApplicationPubSubRequest")
	proto.RegisterType((*ListApplicationPubSubsRequest)(nil), "ttn.lorawan.v3.ListApplicationPubSubsRequest")
	golang_proto.RegisterType((*ListApplicationPubSubsRequest)(nil), "ttn.lorawan.v3.ListApplicationPubSubsRequest")
	proto.RegisterType((*SetApplicationPubSubRequest)(nil), "ttn.lorawan.v3.SetApplicationPubSubRequest")
	golang_proto.RegisterType((*SetApplicationPubSubRequest)(nil), "ttn.lorawan.v3.SetApplicationPubSubRequest")
}

func init() {
	proto.RegisterFile("lorawan-stack/api/applicationserver_pubsub.proto", fileDescriptor_1dce56ec18597200)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/applicationserver_pubsub.proto", fileDescriptor_1dce56ec18597200)
}

var fileDescriptor_1dce56ec18597200 = []byte{
	// 1300 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x97, 0x4f, 0x6c, 0x13, 0xc7,
	0x17, 0xc7, 0x77, 0xe2, 0xfc, 0xf3, 0x24, 0x84, 0x30, 0x42, 0xbf, 0xdf, 0xd6, 0xd0, 0x31, 0x6c,
	0x51, 0x15, 0x02, 0x5e, 0xa3, 0x20, 0x10, 0x0d, 0x07, 0xb0, 0x0b, 0x81, 0x56, 0x90, 0x86, 0x75,
	0xb8, 0x80, 0xa8, 0x35, 0xf6, 0x4e, 0x9c, 0xc5, 0xeb, 0xdd, 0x65, 0x67, 0xd6, 0x34, 0x45, 0x48,
	0xa8, 0x27, 0xd4, 0x43, 0x15, 0xa9, 0x87, 0xf6, 0xd6, 0xaa, 0x97, 0x72, 0xa9, 0x84, 0x7a, 0x42,
	0xbd, 0x34, 0x52, 0x55, 0x89, 0x23, 0x52, 0x2f, 0x9c, 0x52, 0xbc, 0xee, 0x01, 0x4e, 0xe5, 0xc8,
	0xb1, 0xda, 0xd9, 0xdd, 0xd8, 0xb1, 0x43, 0x8c, 0x83, 0xda, 0x93, 0x77, 0xe6, 0xbd, 0xf7, 0x99,
	0xef, 0x7b, 0xf3, 0x76, 0xc6, 0x0b, 0x8f, 0x99, 0xb6, 0x4b, 0x6e, 0x13, 0x2b, 0xc3, 0x38, 0x29,
	0x57, 0xb3, 0xc4, 0x31, 0xb2, 0xc4, 0x71, 0x4c, 0xa3, 0x4c, 0xb8, 0x61, 0x5b, 0x8c, 0xba, 0x75,
	0xea, 0x16, 0x1d, 0xaf, 0xc4, 0xbc, 0x92, 0xea, 0xb8, 0x36, 0xb7, 0xd1, 0x04, 0xe7, 0x96, 0x1a,
	0x45, 0xa9, 0xf5, 0xe3, 0xa9, 0x5c, 0xc5, 0xe0, 0xcb, 0x5e, 0x49, 0x2d, 0xdb, 0xb5, 0x2c, 0xb5,
	0xea, 0xf6, 0x8a, 0xe3, 0xda, 0x9f, 0xad, 0x64, 0x85, 0x73, 0x39, 0x53, 0xa1, 0x56, 0xa6, 0x4e,
	0x4c, 0x43, 0x27, 0x9c, 0x66, 0xbb, 0x1e, 0x42, 0x64, 0x2a, 0xd3, 0x86, 0xa8, 0xd8, 0x15, 0x3b,
	0x0c, 0x2e, 0x79, 0x4b, 0x62, 0x24, 0x06, 0xe2, 0x29, 0x72, 0xdf, 0x5f, 0xb1, 0xed, 0x8a, 0x49,
	0x43, 0xb1, 0x96, 0x65, 0xf3, 0x50, 0x6b, 0x64, 0xdd, 0x17, 0x59, 0x37, 0x18, 0xb4, 0xe6, 0xf0,
	0x95, 0xc8, 0x78, 0xa0, 0xd3, 0xb8, 0x64, 0x50, 0x53, 0x2f, 0xd6, 0x08, 0xab, 0x46, 0x1e, 0xe9,
	0x4e, 0x0f, 0x6e, 0xd4, 0x28, 0xe3, 0xa4, 0xe6, 0x44, 0x0e, 0xef, 0x75, 0x57, 0xcc, 0xd0, 0xa9,
	0xc5, 0x8d, 0x25, 0x83, 0xba, 0x91, 0x08, 0xe5, 0x29, 0x80, 0xfb, 0x73, 0xad, 0x3a, 0x2e, 0x78,
	0xa5, 0x82, 0x57, 0xfa, 0xa8, 0xe5, 0x86, 0xca, 0x70, 0x77, 0x5b, 0x9d, 0x8b, 0x86, 0xce, 0x64,
	0x70, 0x00, 0x4c, 0x8d, 0xcd, 0xbc, 0xaf, 0x6e, 0xae, 0xaf, 0xda, 0x86, 0x69, 0x03, 0xe4, 0xd1,
	0xe3, 0xf5, 0xb4, 0xf4, 0x64, 0x3d, 0x0d, 0x7e, 0x79, 0xb1, 0x96, 0x18, 0xfa, 0x12, 0x0c, 0x4c,
	0x02, 0x6d, 0x82, 0xb4, 0xfb, 0x32, 0x54, 0x80, 0xd0, 0xf1, 0x4a, 0x45, 0xe6, 0x95, 0x8a, 0x86,
	0x2e, 0x0f, 0x1c, 0x00, 0x53, 0xc9, 0xfc, 0x09, 0x7f, 0x3d, 0x3d, 0x1a, 0xe9, 0x39, 0x17, 0xc4,
	0x1e, 0x72, 0x15, 0xf9, 0xd0, 0x0c, 0xfe, 0xf4, 0x3a, 0xc9, 0x7c, 0x7e, 0x2c, 0xf3, 0xc1, 0x8d,
	0xa9, 0x33, 0xb3, 0xd7, 0x33, 0x37, 0xce, 0xc4, 0xc3, 0xc3, 0x77, 0x66, 0x8e, 0xde, 0x3d, 0xa4,
	0x8d, 0x3a, 0x51, 0x0a, 0xca, 0x6f, 0x10, 0xee, 0xe9, 0x4a, 0x0d, 0x69, 0x30, 0xd1, 0xca, 0xe1,
	0xe8, 0x36, 0x39, 0x74, 0x95, 0x62, 0xcb, 0x4c, 0x02, 0x18, 0xfa, 0x10, 0xc2, 0xb2, 0x4b, 0x09,
	0xa7, 0x7a, 0x91, 0x70, 0x21, 0x7f, 0x6c, 0x26, 0xa5, 0x86, 0xfb, 0xa3, 0xc6, 0xfb, 0xa3, 0x2e,
	0xc6, 0xfb, 0x93, 0x1f, 0x0d, 0x40, 0xab, 0x7f, 0xa6, 0x81, 0x96, 0x8c, 0xe2, 0x72, 0x3c, 0x80,
	0x78, 0x8e, 0x1e, 0x43, 0x12, 0xfd, 0x40, 0xa2, 0xb8, 0x1c, 0x47, 0x07, 0xe1, 0xf0, 0x92, 0xed,
	0xd6, 0x08, 0x97, 0x07, 0x45, 0x11, 0x93, 0x81, 0xd4, 0x41, 0x77, 0x40, 0x86, 0x5a, 0x64, 0x40,
	0xf3, 0x70, 0xd0, 0x22, 0x9c, 0xc9, 0x7b, 0xc4, 0x0a, 0x6a, 0xcf, 0x0a, 0xa8, 0xf3, 0xb9, 0xc5,
	0xc2, 0x82, 0x6b, 0xd7, 0x0d, 0x9d, 0xba, 0xf9, 0x51, 0x7f, 0x3d, 0x3d, 0x18, 0xcc, 0x5c, 0x94,
	0x34, 0xc1, 0x41, 0x53, 0x10, 0x96, 0x08, 0xa3, 0x45, 0x6e, 0x3b, 0x46, 0x59, 0x1e, 0xde, 0xbc,
	0xac, 0xae, 0x25, 0x03, 0xe3, 0x62, 0x60, 0x43, 0xf3, 0x70, 0x97, 0x6e, 0xdf, 0xb6, 0x4c, 0xc3,
	0xaa, 0x16, 0x1d, 0x8f, 0x2d, 0xcb, 0x23, 0x42, 0xc2, 0xe1, 0xde, 0x12, 0x2e, 0x53, 0xc6, 0x48,
	0x85, 0x6a, 0xe3, 0x71, 0xfc, 0x82, 0xc7, 0x96, 0xd1, 0x22, 0x9c, 0xdc, 0xe0, 0xb9, 0xd4, 0x31,
	0x49, 0x99, 0xca, 0xa3, 0xfd, 0x22, 0x77, 0xc7, 0x08, 0x2d, 0x24, 0xa0, 0x05, 0x38, 0xe1, 0x39,
	0x82, 0x59, 0x0b, 0x5d, 0xe4, 0x64, 0xbf, 0xcc, 0x5d, 0x21, 0x20, 0x1a, 0xa2, 0x8f, 0xe1, 0xd8,
	0x4d, 0xdb, 0xb0, 0x8a, 0xa4, 0x5c, 0xa6, 0x0e, 0x97, 0x61, 0xbf, 0x38, 0x18, 0x44, 0xe7, 0x44,
	0x30, 0xba, 0x04, 0x37, 0x6a, 0x50, 0x24, 0xe5, 0xaa, 0x3c, 0xd6, 0x2f, 0x6c, 0x2c, 0x0e, 0xcf,
	0x95, 0xab, 0x9b, 0x76, 0xc4, 0x0a, 0x70, 0xe3, 0x3b, 0xde, 0x91, 0x79, 0xd2, 0xc1, 0x63, 0xd4,
	0xe2, 0xf2, 0xae, 0x1d, 0xf3, 0x0a, 0xd4, 0xe2, 0x48, 0x83, 0x1b, 0xdb, 0x53, 0x5c, 0x22, 0x86,
	0x49, 0x75, 0x79, 0xa2, 0x5f, 0xe2, 0x44, 0x4c, 0x98, 0x13, 0x80, 0x4d, 0xcc, 0x5b, 0x1e, 0xf5,
	0xa8, 0x2e, 0xef, 0xde, 0x31, 0xf3, 0x8a, 0x00, 0x04, 0x4c, 0xd3, 0x8e, 0x4e, 0x48, 0x66, 0x9b,
	0x75, 0xaa, 0xcb, 0x93, 0x7d, 0x33, 0x63, 0x42, 0x41, 0x00, 0x52, 0x73, 0x70, 0xbc, 0xfd, 0xcd,
	0x43, 0x27, 0x21, 0x8c, 0x6e, 0x39, 0xcf, 0x35, 0xc5, 0xf9, 0x95, 0xcc, 0xff, 0xdf, 0x5f, 0x4f,
	0x27, 0x0b, 0x62, 0xf6, 0xaa, 0x76, 0x49, 0x1c, 0x4b, 0x6e, 0xe2, 0x3e, 0x00, 0x5a, 0x32, 0x74,
	0xbd, 0xea, 0x9a, 0xa9, 0x69, 0x38, 0x12, 0x37, 0x62, 0x1a, 0x0e, 0x85, 0x6f, 0x29, 0xe8, 0x7c,
	0x4b, 0xc3, 0xf9, 0xfc, 0x1e, 0x38, 0xea, 0xc4, 0xeb, 0x0d, 0x3d, 0x7a, 0xb1, 0x96, 0x00, 0xca,
	0x15, 0x88, 0xba, 0x34, 0x33, 0x74, 0x1a, 0x8e, 0x84, 0x77, 0x6d, 0x70, 0x92, 0x26, 0xa6, 0xc6,
	0x66, 0x0e, 0xf6, 0x4c, 0x54, 0x8b, 0x23, 0x94, 0x1f, 0x01, 0x94, 0xbb, 0xcc, 0x73, 0xe2, 0x74,
	0x62, 0xe8, 0x13, 0x38, 0x12, 0x1e, 0x54, 0x31, 0xf9, 0x44, 0x4f, 0x72, 0x14, 0xaa, 0x46, 0xbf,
	0xe7, 0x2d, 0xee, 0xae, 0x68, 0x31, 0x25, 0x35, 0x0b, 0xc7, 0xdb, 0x0d, 0x68, 0x12, 0x26, 0xaa,
	0x74, 0x25, 0x2c, 0x81, 0x16, 0x3c, 0xa2, 0xbd, 0x70, 0xa8, 0x4e, 0x4c, 0x8f, 0x86, 0x17, 0x8f,
	0x16, 0x0e, 0x66, 0x07, 0x4e, 0x01, 0xe5, 0x67, 0x00, 0xf7, 0x5d, 0xa0, 0xbc, 0x3b, 0x17, 0x7a,
	0xcb, 0xa3, 0x8c, 0xff, 0x2b, 0x97, 0xc9, 0x19, 0x08, 0x5b, 0x77, 0xfd, 0x6b, 0x2f, 0x93, 0xb9,
	0xc0, 0xe5, 0x32, 0x61, 0xd5, 0xfc, 0x60, 0x00, 0xd2, 0x92, 0x4b, 0xf1, 0x84, 0xf2, 0x3b, 0x80,
	0xef, 0x5e, 0x32, 0x58, 0xb7, 0x6a, 0x16, 0xcb, 0xfe, 0x4f, 0xee, 0xf4, 0xb7, 0xce, 0xe3, 0x27,
	0x00, 0xf7, 0x15, 0xb6, 0x29, 0xfe, 0x65, 0x38, 0x1c, 0x76, 0x54, 0x24, 0xbe, 0x77, 0x0b, 0x6e,
	0xa9, 0x3b, 0x82, 0xbc, 0xb5, 0xde, 0x99, 0x5f, 0x87, 0xe1, 0x3b, 0x5b, 0x88, 0xad, 0x18, 0x2c,
	0x68, 0xbb, 0x9b, 0x10, 0x5e, 0xa0, 0x3c, 0xee, 0xf2, 0xff, 0x75, 0x81, 0xcf, 0x07, 0x7f, 0xfe,
	0x52, 0x53, 0x6f, 0xda, 0xec, 0x4a, 0xea, 0x8b, 0x3f, 0xfe, 0xfa, 0x7a, 0x60, 0x2f, 0x42, 0x59,
	0xc2, 0xb2, 0x61, 0x0a, 0x99, 0xa8, 0xe5, 0xd1, 0x77, 0x00, 0x26, 0x2e, 0x50, 0x8e, 0x8e, 0x74,
	0xd2, 0xb6, 0xe9, 0xe5, 0x54, 0xef, 0xf2, 0x29, 0x17, 0xc5, 0x9a, 0x79, 0x74, 0xb6, 0xb5, 0x66,
	0xf6, 0x8e, 0xa1, 0x33, 0xb5, 0xa3, 0x9b, 0x3a, 0xc6, 0x77, 0x43, 0xa7, 0xd6, 0x3f, 0xbc, 0xbb,
	0xe8, 0x2b, 0x00, 0x07, 0x83, 0x1e, 0x45, 0x99, 0xce, 0x55, 0xb7, 0xed, 0xdc, 0x94, 0xd2, 0x53,
	0x24, 0x53, 0x8e, 0x0b, 0x95, 0x19, 0x74, 0xa4, 0x5d, 0x65, 0x0f, 0x85, 0xe8, 0x6f, 0x00, 0x13,
	0x85, 0xad, 0x4a, 0x56, 0x78, 0xbb, 0x92, 0x7d, 0x03, 0x84, 0x9a, 0x55, 0x90, 0x9a, 0x6f, 0x97,
	0x13, 0x7d, 0xa8, 0xbc, 0x51, 0xed, 0xda, 0x7c, 0xdb, 0x4a, 0x38, 0x0b, 0xa6, 0xaf, 0x9d, 0x56,
	0x4e, 0xee, 0x0c, 0x3a, 0x0b, 0xa6, 0xd1, 0x2a, 0x80, 0xc3, 0xe7, 0xa8, 0x49, 0x39, 0x45, 0x7d,
	0x9d, 0x5c, 0xa9, 0xd7, 0xf4, 0xae, 0x72, 0x56, 0x64, 0x3a, 0x3b, 0x7d, 0xaa, 0x8f, 0xba, 0x0b,
	0xd1, 0x71, 0x4a, 0xf9, 0x1f, 0xc0, 0xe3, 0x06, 0x06, 0x4f, 0x1a, 0x18, 0x3c, 0x6d, 0x60, 0xe9,
	0x59, 0x03, 0x4b, 0xcf, 0x1b, 0x58, 0x7a, 0xd9, 0xc0, 0xd2, 0xab, 0x06, 0x06, 0xf7, 0x7c, 0x0c,
	0xee, 0xfb, 0x58, 0x7a, 0xe0, 0x63, 0xf0, 0xd0, 0xc7, 0xd2, 0x23, 0x1f, 0x4b, 0x6b, 0x3e, 0x96,
	0x1e, 0xfb, 0x18, 0x3c, 0xf1, 0x31, 0x78, 0xea, 0x63, 0xe9, 0x99, 0x8f, 0xc1, 0x73, 0x1f, 0x4b,
	0x2f, 0x7d, 0x0c, 0x5e, 0xf9, 0x58, 0xba, 0xd7, 0xc4, 0xd2, 0xfd, 0x26, 0x06, 0xab, 0x4d, 0x2c,
	0x7d, 0xdb, 0xc4, 0xe0, 0xfb, 0x26, 0x96, 0x1e, 0x34, 0xb1, 0xf4, 0xb0, 0x89, 0xc1, 0xa3, 0x26,
	0x06, 0x6b, 0x4d, 0x0c, 0xae, 0x1d, 0xad, 0xd8, 0x2a, 0x5f, 0xa6, 0x7c, 0xd9, 0xb0, 0x2a, 0x4c,
	0xb5, 0x28, 0xbf, 0x6d, 0xbb, 0xd5, 0xec, 0xe6, 0xaf, 0x27, 0xa7, 0x5a, 0xc9, 0x72, 0x6e, 0x39,
	0xa5, 0xd2, 0xb0, 0x48, 0xfb, 0xf8, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc8, 0x4a, 0x73, 0xc0,
	0x91, 0x0e, 0x00, 0x00,
}

func (this *ApplicationPubSubIdentifiers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationPubSubIdentifiers)
	if !ok {
		that2, ok := that.(ApplicationPubSubIdentifiers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationIdentifiers.Equal(&that1.ApplicationIdentifiers) {
		return false
	}
	if this.PubSubID != that1.PubSubID {
		return false
	}
	return true
}
func (this *ApplicationPubSub) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationPubSub)
	if !ok {
		that2, ok := that.(ApplicationPubSub)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationPubSubIdentifiers.Equal(&that1.ApplicationPubSubIdentifiers) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if this.Format != that1.Format {
		return false
	}
	if that1.Provider == nil {
		if this.Provider != nil {
			return false
		}
	} else if this.Provider == nil {
		return false
	} else if !this.Provider.Equal(that1.Provider) {
		return false
	}
	if this.BaseTopic != that1.BaseTopic {
		return false
	}
	if !this.DownlinkPush.Equal(that1.DownlinkPush) {
		return false
	}
	if !this.DownlinkReplace.Equal(that1.DownlinkReplace) {
		return false
	}
	if !this.UplinkMessage.Equal(that1.UplinkMessage) {
		return false
	}
	if !this.JoinAccept.Equal(that1.JoinAccept) {
		return false
	}
	if !this.DownlinkAck.Equal(that1.DownlinkAck) {
		return false
	}
	if !this.DownlinkNack.Equal(that1.DownlinkNack) {
		return false
	}
	if !this.DownlinkSent.Equal(that1.DownlinkSent) {
		return false
	}
	if !this.DownlinkFailed.Equal(that1.DownlinkFailed) {
		return false
	}
	if !this.DownlinkQueued.Equal(that1.DownlinkQueued) {
		return false
	}
	if !this.LocationSolved.Equal(that1.LocationSolved) {
		return false
	}
	return true
}
func (this *ApplicationPubSub_NATS) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationPubSub_NATS)
	if !ok {
		that2, ok := that.(ApplicationPubSub_NATS)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NATS.Equal(that1.NATS) {
		return false
	}
	return true
}
func (this *ApplicationPubSub_NATSProvider) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationPubSub_NATSProvider)
	if !ok {
		that2, ok := that.(ApplicationPubSub_NATSProvider)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerURL != that1.ServerURL {
		return false
	}
	return true
}
func (this *ApplicationPubSub_Message) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationPubSub_Message)
	if !ok {
		that2, ok := that.(ApplicationPubSub_Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Topic != that1.Topic {
		return false
	}
	return true
}
func (this *ApplicationPubSubs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationPubSubs)
	if !ok {
		that2, ok := that.(ApplicationPubSubs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Pubsubs) != len(that1.Pubsubs) {
		return false
	}
	for i := range this.Pubsubs {
		if !this.Pubsubs[i].Equal(that1.Pubsubs[i]) {
			return false
		}
	}
	return true
}
func (this *ApplicationPubSubFormats) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationPubSubFormats)
	if !ok {
		that2, ok := that.(ApplicationPubSubFormats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Formats) != len(that1.Formats) {
		return false
	}
	for i := range this.Formats {
		if this.Formats[i] != that1.Formats[i] {
			return false
		}
	}
	return true
}
func (this *GetApplicationPubSubRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetApplicationPubSubRequest)
	if !ok {
		that2, ok := that.(GetApplicationPubSubRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationPubSubIdentifiers.Equal(&that1.ApplicationPubSubIdentifiers) {
		return false
	}
	if !this.FieldMask.Equal(&that1.FieldMask) {
		return false
	}
	return true
}
func (this *ListApplicationPubSubsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListApplicationPubSubsRequest)
	if !ok {
		that2, ok := that.(ListApplicationPubSubsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationIdentifiers.Equal(&that1.ApplicationIdentifiers) {
		return false
	}
	if !this.FieldMask.Equal(&that1.FieldMask) {
		return false
	}
	return true
}
func (this *SetApplicationPubSubRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetApplicationPubSubRequest)
	if !ok {
		that2, ok := that.(SetApplicationPubSubRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationPubSub.Equal(&that1.ApplicationPubSub) {
		return false
	}
	if !this.FieldMask.Equal(&that1.FieldMask) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ApplicationPubSubRegistryClient is the client API for ApplicationPubSubRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApplicationPubSubRegistryClient interface {
	GetFormats(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*ApplicationPubSubFormats, error)
	Get(ctx context.Context, in *GetApplicationPubSubRequest, opts ...grpc.CallOption) (*ApplicationPubSub, error)
	List(ctx context.Context, in *ListApplicationPubSubsRequest, opts ...grpc.CallOption) (*ApplicationPubSubs, error)
	Set(ctx context.Context, in *SetApplicationPubSubRequest, opts ...grpc.CallOption) (*ApplicationPubSub, error)
	Delete(ctx context.Context, in *ApplicationPubSubIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
}

type applicationPubSubRegistryClient struct {
	cc *grpc.ClientConn
}

func NewApplicationPubSubRegistryClient(cc *grpc.ClientConn) ApplicationPubSubRegistryClient {
	return &applicationPubSubRegistryClient{cc}
}

func (c *applicationPubSubRegistryClient) GetFormats(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*ApplicationPubSubFormats, error) {
	out := new(ApplicationPubSubFormats)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationPubSubRegistry/GetFormats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationPubSubRegistryClient) Get(ctx context.Context, in *GetApplicationPubSubRequest, opts ...grpc.CallOption) (*ApplicationPubSub, error) {
	out := new(ApplicationPubSub)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationPubSubRegistry/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationPubSubRegistryClient) List(ctx context.Context, in *ListApplicationPubSubsRequest, opts ...grpc.CallOption) (*ApplicationPubSubs, error) {
	out := new(ApplicationPubSubs)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationPubSubRegistry/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationPubSubRegistryClient) Set(ctx context.Context, in *SetApplicationPubSubRequest, opts ...grpc.CallOption) (*ApplicationPubSub, error) {
	out := new(ApplicationPubSub)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationPubSubRegistry/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationPubSubRegistryClient) Delete(ctx context.Context, in *ApplicationPubSubIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationPubSubRegistry/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationPubSubRegistryServer is the server API for ApplicationPubSubRegistry service.
type ApplicationPubSubRegistryServer interface {
	GetFormats(context.Context, *types.Empty) (*ApplicationPubSubFormats, error)
	Get(context.Context, *GetApplicationPubSubRequest) (*ApplicationPubSub, error)
	List(context.Context, *ListApplicationPubSubsRequest) (*ApplicationPubSubs, error)
	Set(context.Context, *SetApplicationPubSubRequest) (*ApplicationPubSub, error)
	Delete(context.Context, *ApplicationPubSubIdentifiers) (*types.Empty, error)
}

func RegisterApplicationPubSubRegistryServer(s *grpc.Server, srv ApplicationPubSubRegistryServer) {
	s.RegisterService(&_ApplicationPubSubRegistry_serviceDesc, srv)
}

func _ApplicationPubSubRegistry_GetFormats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationPubSubRegistryServer).GetFormats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationPubSubRegistry/GetFormats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationPubSubRegistryServer).GetFormats(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationPubSubRegistry_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationPubSubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationPubSubRegistryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationPubSubRegistry/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationPubSubRegistryServer).Get(ctx, req.(*GetApplicationPubSubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationPubSubRegistry_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicationPubSubsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationPubSubRegistryServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationPubSubRegistry/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationPubSubRegistryServer).List(ctx, req.(*ListApplicationPubSubsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationPubSubRegistry_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetApplicationPubSubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationPubSubRegistryServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationPubSubRegistry/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationPubSubRegistryServer).Set(ctx, req.(*SetApplicationPubSubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationPubSubRegistry_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationPubSubIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationPubSubRegistryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationPubSubRegistry/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationPubSubRegistryServer).Delete(ctx, req.(*ApplicationPubSubIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApplicationPubSubRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.ApplicationPubSubRegistry",
	HandlerType: (*ApplicationPubSubRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFormats",
			Handler:    _ApplicationPubSubRegistry_GetFormats_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ApplicationPubSubRegistry_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ApplicationPubSubRegistry_List_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _ApplicationPubSubRegistry_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ApplicationPubSubRegistry_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/applicationserver_pubsub.proto",
}

func (m *ApplicationPubSubIdentifiers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationPubSubIdentifiers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(m.ApplicationIdentifiers.Size()))
	n1, err := m.ApplicationIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.PubSubID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(len(m.PubSubID)))
		i += copy(dAtA[i:], m.PubSubID)
	}
	return i, nil
}

func (m *ApplicationPubSub) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationPubSub) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(m.ApplicationPubSubIdentifiers.Size()))
	n2, err := m.ApplicationPubSubIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x12
	i++
	i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)))
	n3, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x1a
	i++
	i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)))
	n4, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if len(m.Format) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(len(m.Format)))
		i += copy(dAtA[i:], m.Format)
	}
	if len(m.BaseTopic) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(len(m.BaseTopic)))
		i += copy(dAtA[i:], m.BaseTopic)
	}
	if m.DownlinkPush != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(m.DownlinkPush.Size()))
		n5, err := m.DownlinkPush.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.DownlinkReplace != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(m.DownlinkReplace.Size()))
		n6, err := m.DownlinkReplace.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.UplinkMessage != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(m.UplinkMessage.Size()))
		n7, err := m.UplinkMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.JoinAccept != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(m.JoinAccept.Size()))
		n8, err := m.JoinAccept.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.DownlinkAck != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(m.DownlinkAck.Size()))
		n9, err := m.DownlinkAck.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.DownlinkNack != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(m.DownlinkNack.Size()))
		n10, err := m.DownlinkNack.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.DownlinkSent != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(m.DownlinkSent.Size()))
		n11, err := m.DownlinkSent.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.DownlinkFailed != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(m.DownlinkFailed.Size()))
		n12, err := m.DownlinkFailed.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.DownlinkQueued != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(m.DownlinkQueued.Size()))
		n13, err := m.DownlinkQueued.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.LocationSolved != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(m.LocationSolved.Size()))
		n14, err := m.LocationSolved.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.Provider != nil {
		nn15, err := m.Provider.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn15
	}
	return i, nil
}

func (m *ApplicationPubSub_NATS) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NATS != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(m.NATS.Size()))
		n16, err := m.NATS.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func (m *ApplicationPubSub_NATSProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationPubSub_NATSProvider) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ServerURL) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(len(m.ServerURL)))
		i += copy(dAtA[i:], m.ServerURL)
	}
	return i, nil
}

func (m *ApplicationPubSub_Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationPubSub_Message) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Topic) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(len(m.Topic)))
		i += copy(dAtA[i:], m.Topic)
	}
	return i, nil
}

func (m *ApplicationPubSubs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationPubSubs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Pubsubs) > 0 {
		for _, msg := range m.Pubsubs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ApplicationPubSubFormats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationPubSubFormats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Formats) > 0 {
		for k := range m.Formats {
			dAtA[i] = 0xa
			i++
			v := m.Formats[k]
			mapSize := 1 + len(k) + sovApplicationserverPubsub(uint64(len(k))) + 1 + len(v) + sovApplicationserverPubsub(uint64(len(v)))
			i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *GetApplicationPubSubRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetApplicationPubSubRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(m.ApplicationPubSubIdentifiers.Size()))
	n17, err := m.ApplicationPubSubIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n17
	dAtA[i] = 0x12
	i++
	i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(m.FieldMask.Size()))
	n18, err := m.FieldMask.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n18
	return i, nil
}

func (m *ListApplicationPubSubsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListApplicationPubSubsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(m.ApplicationIdentifiers.Size()))
	n19, err := m.ApplicationIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n19
	dAtA[i] = 0x12
	i++
	i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(m.FieldMask.Size()))
	n20, err := m.FieldMask.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n20
	return i, nil
}

func (m *SetApplicationPubSubRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetApplicationPubSubRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(m.ApplicationPubSub.Size()))
	n21, err := m.ApplicationPubSub.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n21
	dAtA[i] = 0x12
	i++
	i = encodeVarintApplicationserverPubsub(dAtA, i, uint64(m.FieldMask.Size()))
	n22, err := m.FieldMask.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n22
	return i, nil
}

func encodeVarintApplicationserverPubsub(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedApplicationPubSubIdentifiers(r randyApplicationserverPubsub, easy bool) *ApplicationPubSubIdentifiers {
	this := &ApplicationPubSubIdentifiers{}
	v1 := NewPopulatedApplicationIdentifiers(r, easy)
	this.ApplicationIdentifiers = *v1
	this.PubSubID = randStringApplicationserverPubsub(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedApplicationPubSub(r randyApplicationserverPubsub, easy bool) *ApplicationPubSub {
	this := &ApplicationPubSub{}
	v2 := NewPopulatedApplicationPubSubIdentifiers(r, easy)
	this.ApplicationPubSubIdentifiers = *v2
	v3 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.CreatedAt = *v3
	v4 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.UpdatedAt = *v4
	this.Format = randStringApplicationserverPubsub(r)
	this.BaseTopic = randStringApplicationserverPubsub(r)
	if r.Intn(10) != 0 {
		this.DownlinkPush = NewPopulatedApplicationPubSub_Message(r, easy)
	}
	if r.Intn(10) != 0 {
		this.DownlinkReplace = NewPopulatedApplicationPubSub_Message(r, easy)
	}
	if r.Intn(10) != 0 {
		this.UplinkMessage = NewPopulatedApplicationPubSub_Message(r, easy)
	}
	if r.Intn(10) != 0 {
		this.JoinAccept = NewPopulatedApplicationPubSub_Message(r, easy)
	}
	if r.Intn(10) != 0 {
		this.DownlinkAck = NewPopulatedApplicationPubSub_Message(r, easy)
	}
	if r.Intn(10) != 0 {
		this.DownlinkNack = NewPopulatedApplicationPubSub_Message(r, easy)
	}
	if r.Intn(10) != 0 {
		this.DownlinkSent = NewPopulatedApplicationPubSub_Message(r, easy)
	}
	if r.Intn(10) != 0 {
		this.DownlinkFailed = NewPopulatedApplicationPubSub_Message(r, easy)
	}
	if r.Intn(10) != 0 {
		this.DownlinkQueued = NewPopulatedApplicationPubSub_Message(r, easy)
	}
	if r.Intn(10) != 0 {
		this.LocationSolved = NewPopulatedApplicationPubSub_Message(r, easy)
	}
	oneofNumber_Provider := []int32{17}[r.Intn(1)]
	switch oneofNumber_Provider {
	case 17:
		this.Provider = NewPopulatedApplicationPubSub_NATS(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedApplicationPubSub_NATS(r randyApplicationserverPubsub, easy bool) *ApplicationPubSub_NATS {
	this := &ApplicationPubSub_NATS{}
	this.NATS = NewPopulatedApplicationPubSub_NATSProvider(r, easy)
	return this
}
func NewPopulatedApplicationPubSub_NATSProvider(r randyApplicationserverPubsub, easy bool) *ApplicationPubSub_NATSProvider {
	this := &ApplicationPubSub_NATSProvider{}
	this.ServerURL = randStringApplicationserverPubsub(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedApplicationPubSub_Message(r randyApplicationserverPubsub, easy bool) *ApplicationPubSub_Message {
	this := &ApplicationPubSub_Message{}
	this.Topic = randStringApplicationserverPubsub(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedApplicationPubSubs(r randyApplicationserverPubsub, easy bool) *ApplicationPubSubs {
	this := &ApplicationPubSubs{}
	if r.Intn(10) != 0 {
		v5 := r.Intn(5)
		this.Pubsubs = make([]*ApplicationPubSub, v5)
		for i := 0; i < v5; i++ {
			this.Pubsubs[i] = NewPopulatedApplicationPubSub(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedApplicationPubSubFormats(r randyApplicationserverPubsub, easy bool) *ApplicationPubSubFormats {
	this := &ApplicationPubSubFormats{}
	if r.Intn(10) != 0 {
		v6 := r.Intn(10)
		this.Formats = make(map[string]string)
		for i := 0; i < v6; i++ {
			this.Formats[randStringApplicationserverPubsub(r)] = randStringApplicationserverPubsub(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetApplicationPubSubRequest(r randyApplicationserverPubsub, easy bool) *GetApplicationPubSubRequest {
	this := &GetApplicationPubSubRequest{}
	v7 := NewPopulatedApplicationPubSubIdentifiers(r, easy)
	this.ApplicationPubSubIdentifiers = *v7
	v8 := types.NewPopulatedFieldMask(r, easy)
	this.FieldMask = *v8
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListApplicationPubSubsRequest(r randyApplicationserverPubsub, easy bool) *ListApplicationPubSubsRequest {
	this := &ListApplicationPubSubsRequest{}
	v9 := NewPopulatedApplicationIdentifiers(r, easy)
	this.ApplicationIdentifiers = *v9
	v10 := types.NewPopulatedFieldMask(r, easy)
	this.FieldMask = *v10
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSetApplicationPubSubRequest(r randyApplicationserverPubsub, easy bool) *SetApplicationPubSubRequest {
	this := &SetApplicationPubSubRequest{}
	v11 := NewPopulatedApplicationPubSub(r, easy)
	this.ApplicationPubSub = *v11
	v12 := types.NewPopulatedFieldMask(r, easy)
	this.FieldMask = *v12
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyApplicationserverPubsub interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneApplicationserverPubsub(r randyApplicationserverPubsub) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringApplicationserverPubsub(r randyApplicationserverPubsub) string {
	v13 := r.Intn(100)
	tmps := make([]rune, v13)
	for i := 0; i < v13; i++ {
		tmps[i] = randUTF8RuneApplicationserverPubsub(r)
	}
	return string(tmps)
}
func randUnrecognizedApplicationserverPubsub(r randyApplicationserverPubsub, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldApplicationserverPubsub(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldApplicationserverPubsub(dAtA []byte, r randyApplicationserverPubsub, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateApplicationserverPubsub(dAtA, uint64(key))
		v14 := r.Int63()
		if r.Intn(2) == 0 {
			v14 *= -1
		}
		dAtA = encodeVarintPopulateApplicationserverPubsub(dAtA, uint64(v14))
	case 1:
		dAtA = encodeVarintPopulateApplicationserverPubsub(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateApplicationserverPubsub(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateApplicationserverPubsub(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateApplicationserverPubsub(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateApplicationserverPubsub(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *ApplicationPubSubIdentifiers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ApplicationIdentifiers.Size()
	n += 1 + l + sovApplicationserverPubsub(uint64(l))
	l = len(m.PubSubID)
	if l > 0 {
		n += 1 + l + sovApplicationserverPubsub(uint64(l))
	}
	return n
}

func (m *ApplicationPubSub) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ApplicationPubSubIdentifiers.Size()
	n += 1 + l + sovApplicationserverPubsub(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovApplicationserverPubsub(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)
	n += 1 + l + sovApplicationserverPubsub(uint64(l))
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovApplicationserverPubsub(uint64(l))
	}
	l = len(m.BaseTopic)
	if l > 0 {
		n += 1 + l + sovApplicationserverPubsub(uint64(l))
	}
	if m.DownlinkPush != nil {
		l = m.DownlinkPush.Size()
		n += 1 + l + sovApplicationserverPubsub(uint64(l))
	}
	if m.DownlinkReplace != nil {
		l = m.DownlinkReplace.Size()
		n += 1 + l + sovApplicationserverPubsub(uint64(l))
	}
	if m.UplinkMessage != nil {
		l = m.UplinkMessage.Size()
		n += 1 + l + sovApplicationserverPubsub(uint64(l))
	}
	if m.JoinAccept != nil {
		l = m.JoinAccept.Size()
		n += 1 + l + sovApplicationserverPubsub(uint64(l))
	}
	if m.DownlinkAck != nil {
		l = m.DownlinkAck.Size()
		n += 1 + l + sovApplicationserverPubsub(uint64(l))
	}
	if m.DownlinkNack != nil {
		l = m.DownlinkNack.Size()
		n += 1 + l + sovApplicationserverPubsub(uint64(l))
	}
	if m.DownlinkSent != nil {
		l = m.DownlinkSent.Size()
		n += 1 + l + sovApplicationserverPubsub(uint64(l))
	}
	if m.DownlinkFailed != nil {
		l = m.DownlinkFailed.Size()
		n += 1 + l + sovApplicationserverPubsub(uint64(l))
	}
	if m.DownlinkQueued != nil {
		l = m.DownlinkQueued.Size()
		n += 1 + l + sovApplicationserverPubsub(uint64(l))
	}
	if m.LocationSolved != nil {
		l = m.LocationSolved.Size()
		n += 2 + l + sovApplicationserverPubsub(uint64(l))
	}
	if m.Provider != nil {
		n += m.Provider.Size()
	}
	return n
}

func (m *ApplicationPubSub_NATS) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NATS != nil {
		l = m.NATS.Size()
		n += 2 + l + sovApplicationserverPubsub(uint64(l))
	}
	return n
}
func (m *ApplicationPubSub_NATSProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServerURL)
	if l > 0 {
		n += 1 + l + sovApplicationserverPubsub(uint64(l))
	}
	return n
}

func (m *ApplicationPubSub_Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovApplicationserverPubsub(uint64(l))
	}
	return n
}

func (m *ApplicationPubSubs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pubsubs) > 0 {
		for _, e := range m.Pubsubs {
			l = e.Size()
			n += 1 + l + sovApplicationserverPubsub(uint64(l))
		}
	}
	return n
}

func (m *ApplicationPubSubFormats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Formats) > 0 {
		for k, v := range m.Formats {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApplicationserverPubsub(uint64(len(k))) + 1 + len(v) + sovApplicationserverPubsub(uint64(len(v)))
			n += mapEntrySize + 1 + sovApplicationserverPubsub(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *GetApplicationPubSubRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ApplicationPubSubIdentifiers.Size()
	n += 1 + l + sovApplicationserverPubsub(uint64(l))
	l = m.FieldMask.Size()
	n += 1 + l + sovApplicationserverPubsub(uint64(l))
	return n
}

func (m *ListApplicationPubSubsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ApplicationIdentifiers.Size()
	n += 1 + l + sovApplicationserverPubsub(uint64(l))
	l = m.FieldMask.Size()
	n += 1 + l + sovApplicationserverPubsub(uint64(l))
	return n
}

func (m *SetApplicationPubSubRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ApplicationPubSub.Size()
	n += 1 + l + sovApplicationserverPubsub(uint64(l))
	l = m.FieldMask.Size()
	n += 1 + l + sovApplicationserverPubsub(uint64(l))
	return n
}

func sovApplicationserverPubsub(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApplicationserverPubsub(x uint64) (n int) {
	return sovApplicationserverPubsub((x << 1) ^ uint64((int64(x) >> 63)))
}
func (this *ApplicationPubSubIdentifiers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationPubSubIdentifiers{`,
		`ApplicationIdentifiers:` + strings.Replace(strings.Replace(this.ApplicationIdentifiers.String(), "ApplicationIdentifiers", "ApplicationIdentifiers", 1), `&`, ``, 1) + `,`,
		`PubSubID:` + fmt.Sprintf("%v", this.PubSubID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationPubSub) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationPubSub{`,
		`ApplicationPubSubIdentifiers:` + strings.Replace(strings.Replace(this.ApplicationPubSubIdentifiers.String(), "ApplicationPubSubIdentifiers", "ApplicationPubSubIdentifiers", 1), `&`, ``, 1) + `,`,
		`CreatedAt:` + strings.Replace(strings.Replace(this.CreatedAt.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`UpdatedAt:` + strings.Replace(strings.Replace(this.UpdatedAt.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`Format:` + fmt.Sprintf("%v", this.Format) + `,`,
		`BaseTopic:` + fmt.Sprintf("%v", this.BaseTopic) + `,`,
		`DownlinkPush:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkPush), "ApplicationPubSub_Message", "ApplicationPubSub_Message", 1) + `,`,
		`DownlinkReplace:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkReplace), "ApplicationPubSub_Message", "ApplicationPubSub_Message", 1) + `,`,
		`UplinkMessage:` + strings.Replace(fmt.Sprintf("%v", this.UplinkMessage), "ApplicationPubSub_Message", "ApplicationPubSub_Message", 1) + `,`,
		`JoinAccept:` + strings.Replace(fmt.Sprintf("%v", this.JoinAccept), "ApplicationPubSub_Message", "ApplicationPubSub_Message", 1) + `,`,
		`DownlinkAck:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkAck), "ApplicationPubSub_Message", "ApplicationPubSub_Message", 1) + `,`,
		`DownlinkNack:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkNack), "ApplicationPubSub_Message", "ApplicationPubSub_Message", 1) + `,`,
		`DownlinkSent:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkSent), "ApplicationPubSub_Message", "ApplicationPubSub_Message", 1) + `,`,
		`DownlinkFailed:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkFailed), "ApplicationPubSub_Message", "ApplicationPubSub_Message", 1) + `,`,
		`DownlinkQueued:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkQueued), "ApplicationPubSub_Message", "ApplicationPubSub_Message", 1) + `,`,
		`LocationSolved:` + strings.Replace(fmt.Sprintf("%v", this.LocationSolved), "ApplicationPubSub_Message", "ApplicationPubSub_Message", 1) + `,`,
		`Provider:` + fmt.Sprintf("%v", this.Provider) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationPubSub_NATS) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationPubSub_NATS{`,
		`NATS:` + strings.Replace(fmt.Sprintf("%v", this.NATS), "ApplicationPubSub_NATSProvider", "ApplicationPubSub_NATSProvider", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationPubSub_NATSProvider) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationPubSub_NATSProvider{`,
		`ServerURL:` + fmt.Sprintf("%v", this.ServerURL) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationPubSub_Message) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationPubSub_Message{`,
		`Topic:` + fmt.Sprintf("%v", this.Topic) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationPubSubs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationPubSubs{`,
		`Pubsubs:` + strings.Replace(fmt.Sprintf("%v", this.Pubsubs), "ApplicationPubSub", "ApplicationPubSub", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationPubSubFormats) String() string {
	if this == nil {
		return "nil"
	}
	keysForFormats := make([]string, 0, len(this.Formats))
	for k := range this.Formats {
		keysForFormats = append(keysForFormats, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForFormats)
	mapStringForFormats := "map[string]string{"
	for _, k := range keysForFormats {
		mapStringForFormats += fmt.Sprintf("%v: %v,", k, this.Formats[k])
	}
	mapStringForFormats += "}"
	s := strings.Join([]string{`&ApplicationPubSubFormats{`,
		`Formats:` + mapStringForFormats + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetApplicationPubSubRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetApplicationPubSubRequest{`,
		`ApplicationPubSubIdentifiers:` + strings.Replace(strings.Replace(this.ApplicationPubSubIdentifiers.String(), "ApplicationPubSubIdentifiers", "ApplicationPubSubIdentifiers", 1), `&`, ``, 1) + `,`,
		`FieldMask:` + strings.Replace(strings.Replace(this.FieldMask.String(), "FieldMask", "types.FieldMask", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListApplicationPubSubsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListApplicationPubSubsRequest{`,
		`ApplicationIdentifiers:` + strings.Replace(strings.Replace(this.ApplicationIdentifiers.String(), "ApplicationIdentifiers", "ApplicationIdentifiers", 1), `&`, ``, 1) + `,`,
		`FieldMask:` + strings.Replace(strings.Replace(this.FieldMask.String(), "FieldMask", "types.FieldMask", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetApplicationPubSubRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetApplicationPubSubRequest{`,
		`ApplicationPubSub:` + strings.Replace(strings.Replace(this.ApplicationPubSub.String(), "ApplicationPubSub", "ApplicationPubSub", 1), `&`, ``, 1) + `,`,
		`FieldMask:` + strings.Replace(strings.Replace(this.FieldMask.String(), "FieldMask", "types.FieldMask", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringApplicationserverPubsub(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ApplicationPubSubIdentifiers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationserverPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationPubSubIdentifiers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationPubSubIdentifiers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubSubID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubSubID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationserverPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationPubSub) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationserverPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationPubSub: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationPubSub: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationPubSubIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationPubSubIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseTopic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseTopic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkPush", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DownlinkPush == nil {
				m.DownlinkPush = &ApplicationPubSub_Message{}
			}
			if err := m.DownlinkPush.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkReplace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DownlinkReplace == nil {
				m.DownlinkReplace = &ApplicationPubSub_Message{}
			}
			if err := m.DownlinkReplace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplinkMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UplinkMessage == nil {
				m.UplinkMessage = &ApplicationPubSub_Message{}
			}
			if err := m.UplinkMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinAccept", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JoinAccept == nil {
				m.JoinAccept = &ApplicationPubSub_Message{}
			}
			if err := m.JoinAccept.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkAck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DownlinkAck == nil {
				m.DownlinkAck = &ApplicationPubSub_Message{}
			}
			if err := m.DownlinkAck.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkNack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DownlinkNack == nil {
				m.DownlinkNack = &ApplicationPubSub_Message{}
			}
			if err := m.DownlinkNack.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkSent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DownlinkSent == nil {
				m.DownlinkSent = &ApplicationPubSub_Message{}
			}
			if err := m.DownlinkSent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkFailed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DownlinkFailed == nil {
				m.DownlinkFailed = &ApplicationPubSub_Message{}
			}
			if err := m.DownlinkFailed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkQueued", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DownlinkQueued == nil {
				m.DownlinkQueued = &ApplicationPubSub_Message{}
			}
			if err := m.DownlinkQueued.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationSolved", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LocationSolved == nil {
				m.LocationSolved = &ApplicationPubSub_Message{}
			}
			if err := m.LocationSolved.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NATS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApplicationPubSub_NATSProvider{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Provider = &ApplicationPubSub_NATS{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationserverPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationPubSub_NATSProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationserverPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NATSProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NATSProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationserverPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationPubSub_Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationserverPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationserverPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationPubSubs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationserverPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationPubSubs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationPubSubs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubsubs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubsubs = append(m.Pubsubs, &ApplicationPubSub{})
			if err := m.Pubsubs[len(m.Pubsubs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationserverPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationPubSubFormats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationserverPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationPubSubFormats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationPubSubFormats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Formats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Formats == nil {
				m.Formats = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApplicationserverPubsub
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApplicationserverPubsub
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApplicationserverPubsub
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApplicationserverPubsub
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApplicationserverPubsub
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApplicationserverPubsub
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApplicationserverPubsub
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApplicationserverPubsub(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApplicationserverPubsub
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Formats[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationserverPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetApplicationPubSubRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationserverPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetApplicationPubSubRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetApplicationPubSubRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationPubSubIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationPubSubIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationserverPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListApplicationPubSubsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationserverPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListApplicationPubSubsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListApplicationPubSubsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationserverPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetApplicationPubSubRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationserverPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetApplicationPubSubRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetApplicationPubSubRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationPubSub", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationPubSub.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationserverPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApplicationserverPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApplicationserverPubsub(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApplicationserverPubsub
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApplicationserverPubsub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApplicationserverPubsub
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthApplicationserverPubsub
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApplicationserverPubsub
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApplicationserverPubsub(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthApplicationserverPubsub
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApplicationserverPubsub = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApplicationserverPubsub   = fmt.Errorf("proto: integer overflow")
)
