// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: go.thethings.network/lorawan-stack/api/application.proto

package ttnpb // import "go.thethings.network/lorawan-stack/pkg/ttnpb"

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import types "github.com/gogo/protobuf/types"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import time "time"

import context "context"
import grpc "google.golang.org/grpc"

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Application is the message that defines an application in the network.
type Application struct {
	// Application identifiers.
	ApplicationIdentifiers `protobuf:"bytes,1,opt,name=ids,embedded=ids" json:"ids"`
	// description is the description of the application.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// created_at is the time when the application was created.
	// This is a read-only field.
	CreatedAt time.Time `protobuf:"bytes,3,opt,name=created_at,json=createdAt,stdtime" json:"created_at"`
	// updated_at is the last time the application was updated.
	// This is a read-only field.
	UpdatedAt              time.Time        `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,stdtime" json:"updated_at"`
	UpFormatter            PayloadFormatter `protobuf:"varint,5,opt,name=up_formatter,json=upFormatter,proto3,enum=ttn.lorawan.v3.PayloadFormatter" json:"up_formatter,omitempty"`
	UpFormatterParameter   string           `protobuf:"bytes,6,opt,name=up_formatter_parameter,json=upFormatterParameter,proto3" json:"up_formatter_parameter,omitempty"`
	DownFormatter          PayloadFormatter `protobuf:"varint,7,opt,name=down_formatter,json=downFormatter,proto3,enum=ttn.lorawan.v3.PayloadFormatter" json:"down_formatter,omitempty"`
	DownFormatterParameter string           `protobuf:"bytes,8,opt,name=down_formatter_parameter,json=downFormatterParameter,proto3" json:"down_formatter_parameter,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}         `json:"-"`
	XXX_sizecache          int32            `json:"-"`
}

func (m *Application) Reset()      { *m = Application{} }
func (*Application) ProtoMessage() {}
func (*Application) Descriptor() ([]byte, []int) {
	return fileDescriptor_application_23992fcf5e987218, []int{0}
}
func (m *Application) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Application) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Application.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Application) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Application.Merge(dst, src)
}
func (m *Application) XXX_Size() int {
	return m.Size()
}
func (m *Application) XXX_DiscardUnknown() {
	xxx_messageInfo_Application.DiscardUnknown(m)
}

var xxx_messageInfo_Application proto.InternalMessageInfo

func (m *Application) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Application) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *Application) GetUpdatedAt() time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return time.Time{}
}

func (m *Application) GetUpFormatter() PayloadFormatter {
	if m != nil {
		return m.UpFormatter
	}
	return PayloadFormatter_FORMATTER_NONE
}

func (m *Application) GetUpFormatterParameter() string {
	if m != nil {
		return m.UpFormatterParameter
	}
	return ""
}

func (m *Application) GetDownFormatter() PayloadFormatter {
	if m != nil {
		return m.DownFormatter
	}
	return PayloadFormatter_FORMATTER_NONE
}

func (m *Application) GetDownFormatterParameter() string {
	if m != nil {
		return m.DownFormatterParameter
	}
	return ""
}

type Applications struct {
	Applications         []*Application `protobuf:"bytes,1,rep,name=applications" json:"applications,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Applications) Reset()      { *m = Applications{} }
func (*Applications) ProtoMessage() {}
func (*Applications) Descriptor() ([]byte, []int) {
	return fileDescriptor_application_23992fcf5e987218, []int{1}
}
func (m *Applications) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Applications) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Applications.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Applications) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Applications.Merge(dst, src)
}
func (m *Applications) XXX_Size() int {
	return m.Size()
}
func (m *Applications) XXX_DiscardUnknown() {
	xxx_messageInfo_Applications.DiscardUnknown(m)
}

var xxx_messageInfo_Applications proto.InternalMessageInfo

func (m *Applications) GetApplications() []*Application {
	if m != nil {
		return m.Applications
	}
	return nil
}

// ApplicationUp wraps multiple application-layer uplink types
type ApplicationUp struct {
	EndDeviceIdentifiers `protobuf:"bytes,1,opt,name=end_device,json=endDevice,embedded=end_device" json:"end_device"`
	CorrelationIDs       []string `protobuf:"bytes,2,rep,name=correlation_ids,json=correlationIds" json:"correlation_ids,omitempty"`
	// Types that are valid to be assigned to Up:
	//	*ApplicationUp_UplinkMessage
	//	*ApplicationUp_JoinAccept
	//	*ApplicationUp_DownlinkAck
	//	*ApplicationUp_DownlinkNack
	//	*ApplicationUp_DownlinkSent
	//	*ApplicationUp_DownlinkQueued
	Up                   isApplicationUp_Up `protobuf_oneof:"up"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ApplicationUp) Reset()      { *m = ApplicationUp{} }
func (*ApplicationUp) ProtoMessage() {}
func (*ApplicationUp) Descriptor() ([]byte, []int) {
	return fileDescriptor_application_23992fcf5e987218, []int{2}
}
func (m *ApplicationUp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationUp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationUp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ApplicationUp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationUp.Merge(dst, src)
}
func (m *ApplicationUp) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationUp) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationUp.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationUp proto.InternalMessageInfo

type isApplicationUp_Up interface {
	isApplicationUp_Up()
	Equal(interface{}) bool
	VerboseEqual(interface{}) error
	MarshalTo([]byte) (int, error)
	Size() int
}

type ApplicationUp_UplinkMessage struct {
	UplinkMessage *ApplicationUplink `protobuf:"bytes,3,opt,name=uplink_message,json=uplinkMessage,oneof"`
}
type ApplicationUp_JoinAccept struct {
	JoinAccept *ApplicationJoinAccept `protobuf:"bytes,4,opt,name=join_accept,json=joinAccept,oneof"`
}
type ApplicationUp_DownlinkAck struct {
	DownlinkAck *ApplicationDownlink `protobuf:"bytes,5,opt,name=downlink_ack,json=downlinkAck,oneof"`
}
type ApplicationUp_DownlinkNack struct {
	DownlinkNack *ApplicationDownlink `protobuf:"bytes,6,opt,name=downlink_nack,json=downlinkNack,oneof"`
}
type ApplicationUp_DownlinkSent struct {
	DownlinkSent *ApplicationDownlink `protobuf:"bytes,7,opt,name=downlink_sent,json=downlinkSent,oneof"`
}
type ApplicationUp_DownlinkQueued struct {
	DownlinkQueued *ApplicationDownlink `protobuf:"bytes,8,opt,name=downlink_queued,json=downlinkQueued,oneof"`
}

func (*ApplicationUp_UplinkMessage) isApplicationUp_Up()  {}
func (*ApplicationUp_JoinAccept) isApplicationUp_Up()     {}
func (*ApplicationUp_DownlinkAck) isApplicationUp_Up()    {}
func (*ApplicationUp_DownlinkNack) isApplicationUp_Up()   {}
func (*ApplicationUp_DownlinkSent) isApplicationUp_Up()   {}
func (*ApplicationUp_DownlinkQueued) isApplicationUp_Up() {}

func (m *ApplicationUp) GetUp() isApplicationUp_Up {
	if m != nil {
		return m.Up
	}
	return nil
}

func (m *ApplicationUp) GetCorrelationIDs() []string {
	if m != nil {
		return m.CorrelationIDs
	}
	return nil
}

func (m *ApplicationUp) GetUplinkMessage() *ApplicationUplink {
	if x, ok := m.GetUp().(*ApplicationUp_UplinkMessage); ok {
		return x.UplinkMessage
	}
	return nil
}

func (m *ApplicationUp) GetJoinAccept() *ApplicationJoinAccept {
	if x, ok := m.GetUp().(*ApplicationUp_JoinAccept); ok {
		return x.JoinAccept
	}
	return nil
}

func (m *ApplicationUp) GetDownlinkAck() *ApplicationDownlink {
	if x, ok := m.GetUp().(*ApplicationUp_DownlinkAck); ok {
		return x.DownlinkAck
	}
	return nil
}

func (m *ApplicationUp) GetDownlinkNack() *ApplicationDownlink {
	if x, ok := m.GetUp().(*ApplicationUp_DownlinkNack); ok {
		return x.DownlinkNack
	}
	return nil
}

func (m *ApplicationUp) GetDownlinkSent() *ApplicationDownlink {
	if x, ok := m.GetUp().(*ApplicationUp_DownlinkSent); ok {
		return x.DownlinkSent
	}
	return nil
}

func (m *ApplicationUp) GetDownlinkQueued() *ApplicationDownlink {
	if x, ok := m.GetUp().(*ApplicationUp_DownlinkQueued); ok {
		return x.DownlinkQueued
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ApplicationUp) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ApplicationUp_OneofMarshaler, _ApplicationUp_OneofUnmarshaler, _ApplicationUp_OneofSizer, []interface{}{
		(*ApplicationUp_UplinkMessage)(nil),
		(*ApplicationUp_JoinAccept)(nil),
		(*ApplicationUp_DownlinkAck)(nil),
		(*ApplicationUp_DownlinkNack)(nil),
		(*ApplicationUp_DownlinkSent)(nil),
		(*ApplicationUp_DownlinkQueued)(nil),
	}
}

func _ApplicationUp_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ApplicationUp)
	// up
	switch x := m.Up.(type) {
	case *ApplicationUp_UplinkMessage:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UplinkMessage); err != nil {
			return err
		}
	case *ApplicationUp_JoinAccept:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.JoinAccept); err != nil {
			return err
		}
	case *ApplicationUp_DownlinkAck:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DownlinkAck); err != nil {
			return err
		}
	case *ApplicationUp_DownlinkNack:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DownlinkNack); err != nil {
			return err
		}
	case *ApplicationUp_DownlinkSent:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DownlinkSent); err != nil {
			return err
		}
	case *ApplicationUp_DownlinkQueued:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DownlinkQueued); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ApplicationUp.Up has unexpected type %T", x)
	}
	return nil
}

func _ApplicationUp_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ApplicationUp)
	switch tag {
	case 3: // up.uplink_message
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ApplicationUplink)
		err := b.DecodeMessage(msg)
		m.Up = &ApplicationUp_UplinkMessage{msg}
		return true, err
	case 4: // up.join_accept
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ApplicationJoinAccept)
		err := b.DecodeMessage(msg)
		m.Up = &ApplicationUp_JoinAccept{msg}
		return true, err
	case 5: // up.downlink_ack
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ApplicationDownlink)
		err := b.DecodeMessage(msg)
		m.Up = &ApplicationUp_DownlinkAck{msg}
		return true, err
	case 6: // up.downlink_nack
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ApplicationDownlink)
		err := b.DecodeMessage(msg)
		m.Up = &ApplicationUp_DownlinkNack{msg}
		return true, err
	case 7: // up.downlink_sent
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ApplicationDownlink)
		err := b.DecodeMessage(msg)
		m.Up = &ApplicationUp_DownlinkSent{msg}
		return true, err
	case 8: // up.downlink_queued
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ApplicationDownlink)
		err := b.DecodeMessage(msg)
		m.Up = &ApplicationUp_DownlinkQueued{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ApplicationUp_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ApplicationUp)
	// up
	switch x := m.Up.(type) {
	case *ApplicationUp_UplinkMessage:
		s := proto.Size(x.UplinkMessage)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ApplicationUp_JoinAccept:
		s := proto.Size(x.JoinAccept)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ApplicationUp_DownlinkAck:
		s := proto.Size(x.DownlinkAck)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ApplicationUp_DownlinkNack:
		s := proto.Size(x.DownlinkNack)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ApplicationUp_DownlinkSent:
		s := proto.Size(x.DownlinkSent)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ApplicationUp_DownlinkQueued:
		s := proto.Size(x.DownlinkQueued)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ApplicationDownlinks struct {
	Downlinks            []*ApplicationDownlink `protobuf:"bytes,1,rep,name=downlinks" json:"downlinks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ApplicationDownlinks) Reset()      { *m = ApplicationDownlinks{} }
func (*ApplicationDownlinks) ProtoMessage() {}
func (*ApplicationDownlinks) Descriptor() ([]byte, []int) {
	return fileDescriptor_application_23992fcf5e987218, []int{3}
}
func (m *ApplicationDownlinks) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationDownlinks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationDownlinks.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ApplicationDownlinks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationDownlinks.Merge(dst, src)
}
func (m *ApplicationDownlinks) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationDownlinks) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationDownlinks.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationDownlinks proto.InternalMessageInfo

func (m *ApplicationDownlinks) GetDownlinks() []*ApplicationDownlink {
	if m != nil {
		return m.Downlinks
	}
	return nil
}

type DownlinkQueueRequest struct {
	Downlinks            []*ApplicationDownlink `protobuf:"bytes,1,rep,name=downlinks" json:"downlinks,omitempty"`
	EndDeviceIdentifiers `protobuf:"bytes,2,opt,name=end_device,json=endDevice,embedded=end_device" json:"end_device"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DownlinkQueueRequest) Reset()      { *m = DownlinkQueueRequest{} }
func (*DownlinkQueueRequest) ProtoMessage() {}
func (*DownlinkQueueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_application_23992fcf5e987218, []int{4}
}
func (m *DownlinkQueueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownlinkQueueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownlinkQueueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DownlinkQueueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownlinkQueueRequest.Merge(dst, src)
}
func (m *DownlinkQueueRequest) XXX_Size() int {
	return m.Size()
}
func (m *DownlinkQueueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DownlinkQueueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DownlinkQueueRequest proto.InternalMessageInfo

func (m *DownlinkQueueRequest) GetDownlinks() []*ApplicationDownlink {
	if m != nil {
		return m.Downlinks
	}
	return nil
}

func init() {
	proto.RegisterType((*Application)(nil), "ttn.lorawan.v3.Application")
	golang_proto.RegisterType((*Application)(nil), "ttn.lorawan.v3.Application")
	proto.RegisterType((*Applications)(nil), "ttn.lorawan.v3.Applications")
	golang_proto.RegisterType((*Applications)(nil), "ttn.lorawan.v3.Applications")
	proto.RegisterType((*ApplicationUp)(nil), "ttn.lorawan.v3.ApplicationUp")
	golang_proto.RegisterType((*ApplicationUp)(nil), "ttn.lorawan.v3.ApplicationUp")
	proto.RegisterType((*ApplicationDownlinks)(nil), "ttn.lorawan.v3.ApplicationDownlinks")
	golang_proto.RegisterType((*ApplicationDownlinks)(nil), "ttn.lorawan.v3.ApplicationDownlinks")
	proto.RegisterType((*DownlinkQueueRequest)(nil), "ttn.lorawan.v3.DownlinkQueueRequest")
	golang_proto.RegisterType((*DownlinkQueueRequest)(nil), "ttn.lorawan.v3.DownlinkQueueRequest")
}
func (this *Application) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Application)
	if !ok {
		that2, ok := that.(Application)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Application")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Application but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Application but is not nil && this == nil")
	}
	if !this.ApplicationIdentifiers.Equal(&that1.ApplicationIdentifiers) {
		return fmt.Errorf("ApplicationIdentifiers this(%v) Not Equal that(%v)", this.ApplicationIdentifiers, that1.ApplicationIdentifiers)
	}
	if this.Description != that1.Description {
		return fmt.Errorf("Description this(%v) Not Equal that(%v)", this.Description, that1.Description)
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return fmt.Errorf("CreatedAt this(%v) Not Equal that(%v)", this.CreatedAt, that1.CreatedAt)
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return fmt.Errorf("UpdatedAt this(%v) Not Equal that(%v)", this.UpdatedAt, that1.UpdatedAt)
	}
	if this.UpFormatter != that1.UpFormatter {
		return fmt.Errorf("UpFormatter this(%v) Not Equal that(%v)", this.UpFormatter, that1.UpFormatter)
	}
	if this.UpFormatterParameter != that1.UpFormatterParameter {
		return fmt.Errorf("UpFormatterParameter this(%v) Not Equal that(%v)", this.UpFormatterParameter, that1.UpFormatterParameter)
	}
	if this.DownFormatter != that1.DownFormatter {
		return fmt.Errorf("DownFormatter this(%v) Not Equal that(%v)", this.DownFormatter, that1.DownFormatter)
	}
	if this.DownFormatterParameter != that1.DownFormatterParameter {
		return fmt.Errorf("DownFormatterParameter this(%v) Not Equal that(%v)", this.DownFormatterParameter, that1.DownFormatterParameter)
	}
	return nil
}
func (this *Application) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Application)
	if !ok {
		that2, ok := that.(Application)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationIdentifiers.Equal(&that1.ApplicationIdentifiers) {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if this.UpFormatter != that1.UpFormatter {
		return false
	}
	if this.UpFormatterParameter != that1.UpFormatterParameter {
		return false
	}
	if this.DownFormatter != that1.DownFormatter {
		return false
	}
	if this.DownFormatterParameter != that1.DownFormatterParameter {
		return false
	}
	return true
}
func (this *Applications) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Applications)
	if !ok {
		that2, ok := that.(Applications)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Applications")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Applications but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Applications but is not nil && this == nil")
	}
	if len(this.Applications) != len(that1.Applications) {
		return fmt.Errorf("Applications this(%v) Not Equal that(%v)", len(this.Applications), len(that1.Applications))
	}
	for i := range this.Applications {
		if !this.Applications[i].Equal(that1.Applications[i]) {
			return fmt.Errorf("Applications this[%v](%v) Not Equal that[%v](%v)", i, this.Applications[i], i, that1.Applications[i])
		}
	}
	return nil
}
func (this *Applications) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Applications)
	if !ok {
		that2, ok := that.(Applications)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Applications) != len(that1.Applications) {
		return false
	}
	for i := range this.Applications {
		if !this.Applications[i].Equal(that1.Applications[i]) {
			return false
		}
	}
	return true
}
func (this *ApplicationUp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ApplicationUp)
	if !ok {
		that2, ok := that.(ApplicationUp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ApplicationUp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ApplicationUp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ApplicationUp but is not nil && this == nil")
	}
	if !this.EndDeviceIdentifiers.Equal(&that1.EndDeviceIdentifiers) {
		return fmt.Errorf("EndDeviceIdentifiers this(%v) Not Equal that(%v)", this.EndDeviceIdentifiers, that1.EndDeviceIdentifiers)
	}
	if len(this.CorrelationIDs) != len(that1.CorrelationIDs) {
		return fmt.Errorf("CorrelationIDs this(%v) Not Equal that(%v)", len(this.CorrelationIDs), len(that1.CorrelationIDs))
	}
	for i := range this.CorrelationIDs {
		if this.CorrelationIDs[i] != that1.CorrelationIDs[i] {
			return fmt.Errorf("CorrelationIDs this[%v](%v) Not Equal that[%v](%v)", i, this.CorrelationIDs[i], i, that1.CorrelationIDs[i])
		}
	}
	if that1.Up == nil {
		if this.Up != nil {
			return fmt.Errorf("this.Up != nil && that1.Up == nil")
		}
	} else if this.Up == nil {
		return fmt.Errorf("this.Up == nil && that1.Up != nil")
	} else if err := this.Up.VerboseEqual(that1.Up); err != nil {
		return err
	}
	return nil
}
func (this *ApplicationUp_UplinkMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ApplicationUp_UplinkMessage)
	if !ok {
		that2, ok := that.(ApplicationUp_UplinkMessage)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ApplicationUp_UplinkMessage")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ApplicationUp_UplinkMessage but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ApplicationUp_UplinkMessage but is not nil && this == nil")
	}
	if !this.UplinkMessage.Equal(that1.UplinkMessage) {
		return fmt.Errorf("UplinkMessage this(%v) Not Equal that(%v)", this.UplinkMessage, that1.UplinkMessage)
	}
	return nil
}
func (this *ApplicationUp_JoinAccept) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ApplicationUp_JoinAccept)
	if !ok {
		that2, ok := that.(ApplicationUp_JoinAccept)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ApplicationUp_JoinAccept")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ApplicationUp_JoinAccept but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ApplicationUp_JoinAccept but is not nil && this == nil")
	}
	if !this.JoinAccept.Equal(that1.JoinAccept) {
		return fmt.Errorf("JoinAccept this(%v) Not Equal that(%v)", this.JoinAccept, that1.JoinAccept)
	}
	return nil
}
func (this *ApplicationUp_DownlinkAck) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ApplicationUp_DownlinkAck)
	if !ok {
		that2, ok := that.(ApplicationUp_DownlinkAck)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ApplicationUp_DownlinkAck")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ApplicationUp_DownlinkAck but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ApplicationUp_DownlinkAck but is not nil && this == nil")
	}
	if !this.DownlinkAck.Equal(that1.DownlinkAck) {
		return fmt.Errorf("DownlinkAck this(%v) Not Equal that(%v)", this.DownlinkAck, that1.DownlinkAck)
	}
	return nil
}
func (this *ApplicationUp_DownlinkNack) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ApplicationUp_DownlinkNack)
	if !ok {
		that2, ok := that.(ApplicationUp_DownlinkNack)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ApplicationUp_DownlinkNack")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ApplicationUp_DownlinkNack but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ApplicationUp_DownlinkNack but is not nil && this == nil")
	}
	if !this.DownlinkNack.Equal(that1.DownlinkNack) {
		return fmt.Errorf("DownlinkNack this(%v) Not Equal that(%v)", this.DownlinkNack, that1.DownlinkNack)
	}
	return nil
}
func (this *ApplicationUp_DownlinkSent) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ApplicationUp_DownlinkSent)
	if !ok {
		that2, ok := that.(ApplicationUp_DownlinkSent)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ApplicationUp_DownlinkSent")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ApplicationUp_DownlinkSent but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ApplicationUp_DownlinkSent but is not nil && this == nil")
	}
	if !this.DownlinkSent.Equal(that1.DownlinkSent) {
		return fmt.Errorf("DownlinkSent this(%v) Not Equal that(%v)", this.DownlinkSent, that1.DownlinkSent)
	}
	return nil
}
func (this *ApplicationUp_DownlinkQueued) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ApplicationUp_DownlinkQueued)
	if !ok {
		that2, ok := that.(ApplicationUp_DownlinkQueued)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ApplicationUp_DownlinkQueued")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ApplicationUp_DownlinkQueued but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ApplicationUp_DownlinkQueued but is not nil && this == nil")
	}
	if !this.DownlinkQueued.Equal(that1.DownlinkQueued) {
		return fmt.Errorf("DownlinkQueued this(%v) Not Equal that(%v)", this.DownlinkQueued, that1.DownlinkQueued)
	}
	return nil
}
func (this *ApplicationUp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationUp)
	if !ok {
		that2, ok := that.(ApplicationUp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EndDeviceIdentifiers.Equal(&that1.EndDeviceIdentifiers) {
		return false
	}
	if len(this.CorrelationIDs) != len(that1.CorrelationIDs) {
		return false
	}
	for i := range this.CorrelationIDs {
		if this.CorrelationIDs[i] != that1.CorrelationIDs[i] {
			return false
		}
	}
	if that1.Up == nil {
		if this.Up != nil {
			return false
		}
	} else if this.Up == nil {
		return false
	} else if !this.Up.Equal(that1.Up) {
		return false
	}
	return true
}
func (this *ApplicationUp_UplinkMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationUp_UplinkMessage)
	if !ok {
		that2, ok := that.(ApplicationUp_UplinkMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UplinkMessage.Equal(that1.UplinkMessage) {
		return false
	}
	return true
}
func (this *ApplicationUp_JoinAccept) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationUp_JoinAccept)
	if !ok {
		that2, ok := that.(ApplicationUp_JoinAccept)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JoinAccept.Equal(that1.JoinAccept) {
		return false
	}
	return true
}
func (this *ApplicationUp_DownlinkAck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationUp_DownlinkAck)
	if !ok {
		that2, ok := that.(ApplicationUp_DownlinkAck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DownlinkAck.Equal(that1.DownlinkAck) {
		return false
	}
	return true
}
func (this *ApplicationUp_DownlinkNack) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationUp_DownlinkNack)
	if !ok {
		that2, ok := that.(ApplicationUp_DownlinkNack)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DownlinkNack.Equal(that1.DownlinkNack) {
		return false
	}
	return true
}
func (this *ApplicationUp_DownlinkSent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationUp_DownlinkSent)
	if !ok {
		that2, ok := that.(ApplicationUp_DownlinkSent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DownlinkSent.Equal(that1.DownlinkSent) {
		return false
	}
	return true
}
func (this *ApplicationUp_DownlinkQueued) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationUp_DownlinkQueued)
	if !ok {
		that2, ok := that.(ApplicationUp_DownlinkQueued)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DownlinkQueued.Equal(that1.DownlinkQueued) {
		return false
	}
	return true
}
func (this *ApplicationDownlinks) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ApplicationDownlinks)
	if !ok {
		that2, ok := that.(ApplicationDownlinks)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ApplicationDownlinks")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ApplicationDownlinks but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ApplicationDownlinks but is not nil && this == nil")
	}
	if len(this.Downlinks) != len(that1.Downlinks) {
		return fmt.Errorf("Downlinks this(%v) Not Equal that(%v)", len(this.Downlinks), len(that1.Downlinks))
	}
	for i := range this.Downlinks {
		if !this.Downlinks[i].Equal(that1.Downlinks[i]) {
			return fmt.Errorf("Downlinks this[%v](%v) Not Equal that[%v](%v)", i, this.Downlinks[i], i, that1.Downlinks[i])
		}
	}
	return nil
}
func (this *ApplicationDownlinks) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationDownlinks)
	if !ok {
		that2, ok := that.(ApplicationDownlinks)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Downlinks) != len(that1.Downlinks) {
		return false
	}
	for i := range this.Downlinks {
		if !this.Downlinks[i].Equal(that1.Downlinks[i]) {
			return false
		}
	}
	return true
}
func (this *DownlinkQueueRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DownlinkQueueRequest)
	if !ok {
		that2, ok := that.(DownlinkQueueRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DownlinkQueueRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DownlinkQueueRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DownlinkQueueRequest but is not nil && this == nil")
	}
	if len(this.Downlinks) != len(that1.Downlinks) {
		return fmt.Errorf("Downlinks this(%v) Not Equal that(%v)", len(this.Downlinks), len(that1.Downlinks))
	}
	for i := range this.Downlinks {
		if !this.Downlinks[i].Equal(that1.Downlinks[i]) {
			return fmt.Errorf("Downlinks this[%v](%v) Not Equal that[%v](%v)", i, this.Downlinks[i], i, that1.Downlinks[i])
		}
	}
	if !this.EndDeviceIdentifiers.Equal(&that1.EndDeviceIdentifiers) {
		return fmt.Errorf("EndDeviceIdentifiers this(%v) Not Equal that(%v)", this.EndDeviceIdentifiers, that1.EndDeviceIdentifiers)
	}
	return nil
}
func (this *DownlinkQueueRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownlinkQueueRequest)
	if !ok {
		that2, ok := that.(DownlinkQueueRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Downlinks) != len(that1.Downlinks) {
		return false
	}
	for i := range this.Downlinks {
		if !this.Downlinks[i].Equal(that1.Downlinks[i]) {
			return false
		}
	}
	if !this.EndDeviceIdentifiers.Equal(&that1.EndDeviceIdentifiers) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NsApplicationDownlinkQueue service

type NsApplicationDownlinkQueueClient interface {
	DownlinkQueueReplace(ctx context.Context, in *DownlinkQueueRequest, opts ...grpc.CallOption) (*types.Empty, error)
	DownlinkQueuePush(ctx context.Context, in *DownlinkQueueRequest, opts ...grpc.CallOption) (*types.Empty, error)
	DownlinkQueueList(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*ApplicationDownlinks, error)
	DownlinkQueueClear(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
}

type nsApplicationDownlinkQueueClient struct {
	cc *grpc.ClientConn
}

func NewNsApplicationDownlinkQueueClient(cc *grpc.ClientConn) NsApplicationDownlinkQueueClient {
	return &nsApplicationDownlinkQueueClient{cc}
}

func (c *nsApplicationDownlinkQueueClient) DownlinkQueueReplace(ctx context.Context, in *DownlinkQueueRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.NsApplicationDownlinkQueue/DownlinkQueueReplace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nsApplicationDownlinkQueueClient) DownlinkQueuePush(ctx context.Context, in *DownlinkQueueRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.NsApplicationDownlinkQueue/DownlinkQueuePush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nsApplicationDownlinkQueueClient) DownlinkQueueList(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*ApplicationDownlinks, error) {
	out := new(ApplicationDownlinks)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.NsApplicationDownlinkQueue/DownlinkQueueList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nsApplicationDownlinkQueueClient) DownlinkQueueClear(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.NsApplicationDownlinkQueue/DownlinkQueueClear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NsApplicationDownlinkQueue service

type NsApplicationDownlinkQueueServer interface {
	DownlinkQueueReplace(context.Context, *DownlinkQueueRequest) (*types.Empty, error)
	DownlinkQueuePush(context.Context, *DownlinkQueueRequest) (*types.Empty, error)
	DownlinkQueueList(context.Context, *EndDeviceIdentifiers) (*ApplicationDownlinks, error)
	DownlinkQueueClear(context.Context, *EndDeviceIdentifiers) (*types.Empty, error)
}

func RegisterNsApplicationDownlinkQueueServer(s *grpc.Server, srv NsApplicationDownlinkQueueServer) {
	s.RegisterService(&_NsApplicationDownlinkQueue_serviceDesc, srv)
}

func _NsApplicationDownlinkQueue_DownlinkQueueReplace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownlinkQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NsApplicationDownlinkQueueServer).DownlinkQueueReplace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.NsApplicationDownlinkQueue/DownlinkQueueReplace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NsApplicationDownlinkQueueServer).DownlinkQueueReplace(ctx, req.(*DownlinkQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NsApplicationDownlinkQueue_DownlinkQueuePush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownlinkQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NsApplicationDownlinkQueueServer).DownlinkQueuePush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.NsApplicationDownlinkQueue/DownlinkQueuePush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NsApplicationDownlinkQueueServer).DownlinkQueuePush(ctx, req.(*DownlinkQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NsApplicationDownlinkQueue_DownlinkQueueList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDeviceIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NsApplicationDownlinkQueueServer).DownlinkQueueList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.NsApplicationDownlinkQueue/DownlinkQueueList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NsApplicationDownlinkQueueServer).DownlinkQueueList(ctx, req.(*EndDeviceIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _NsApplicationDownlinkQueue_DownlinkQueueClear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDeviceIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NsApplicationDownlinkQueueServer).DownlinkQueueClear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.NsApplicationDownlinkQueue/DownlinkQueueClear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NsApplicationDownlinkQueueServer).DownlinkQueueClear(ctx, req.(*EndDeviceIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _NsApplicationDownlinkQueue_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.NsApplicationDownlinkQueue",
	HandlerType: (*NsApplicationDownlinkQueueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DownlinkQueueReplace",
			Handler:    _NsApplicationDownlinkQueue_DownlinkQueueReplace_Handler,
		},
		{
			MethodName: "DownlinkQueuePush",
			Handler:    _NsApplicationDownlinkQueue_DownlinkQueuePush_Handler,
		},
		{
			MethodName: "DownlinkQueueList",
			Handler:    _NsApplicationDownlinkQueue_DownlinkQueueList_Handler,
		},
		{
			MethodName: "DownlinkQueueClear",
			Handler:    _NsApplicationDownlinkQueue_DownlinkQueueClear_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.thethings.network/lorawan-stack/api/application.proto",
}

// Client API for AsApplicationDownlinkQueue service

type AsApplicationDownlinkQueueClient interface {
	DownlinkQueueReplace(ctx context.Context, in *DownlinkQueueRequest, opts ...grpc.CallOption) (*types.Empty, error)
	DownlinkQueuePush(ctx context.Context, in *DownlinkQueueRequest, opts ...grpc.CallOption) (*types.Empty, error)
	DownlinkQueueList(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*ApplicationDownlinks, error)
	DownlinkQueueClear(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
}

type asApplicationDownlinkQueueClient struct {
	cc *grpc.ClientConn
}

func NewAsApplicationDownlinkQueueClient(cc *grpc.ClientConn) AsApplicationDownlinkQueueClient {
	return &asApplicationDownlinkQueueClient{cc}
}

func (c *asApplicationDownlinkQueueClient) DownlinkQueueReplace(ctx context.Context, in *DownlinkQueueRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.AsApplicationDownlinkQueue/DownlinkQueueReplace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asApplicationDownlinkQueueClient) DownlinkQueuePush(ctx context.Context, in *DownlinkQueueRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.AsApplicationDownlinkQueue/DownlinkQueuePush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asApplicationDownlinkQueueClient) DownlinkQueueList(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*ApplicationDownlinks, error) {
	out := new(ApplicationDownlinks)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.AsApplicationDownlinkQueue/DownlinkQueueList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asApplicationDownlinkQueueClient) DownlinkQueueClear(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.AsApplicationDownlinkQueue/DownlinkQueueClear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AsApplicationDownlinkQueue service

type AsApplicationDownlinkQueueServer interface {
	DownlinkQueueReplace(context.Context, *DownlinkQueueRequest) (*types.Empty, error)
	DownlinkQueuePush(context.Context, *DownlinkQueueRequest) (*types.Empty, error)
	DownlinkQueueList(context.Context, *EndDeviceIdentifiers) (*ApplicationDownlinks, error)
	DownlinkQueueClear(context.Context, *EndDeviceIdentifiers) (*types.Empty, error)
}

func RegisterAsApplicationDownlinkQueueServer(s *grpc.Server, srv AsApplicationDownlinkQueueServer) {
	s.RegisterService(&_AsApplicationDownlinkQueue_serviceDesc, srv)
}

func _AsApplicationDownlinkQueue_DownlinkQueueReplace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownlinkQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsApplicationDownlinkQueueServer).DownlinkQueueReplace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.AsApplicationDownlinkQueue/DownlinkQueueReplace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsApplicationDownlinkQueueServer).DownlinkQueueReplace(ctx, req.(*DownlinkQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsApplicationDownlinkQueue_DownlinkQueuePush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownlinkQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsApplicationDownlinkQueueServer).DownlinkQueuePush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.AsApplicationDownlinkQueue/DownlinkQueuePush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsApplicationDownlinkQueueServer).DownlinkQueuePush(ctx, req.(*DownlinkQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsApplicationDownlinkQueue_DownlinkQueueList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDeviceIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsApplicationDownlinkQueueServer).DownlinkQueueList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.AsApplicationDownlinkQueue/DownlinkQueueList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsApplicationDownlinkQueueServer).DownlinkQueueList(ctx, req.(*EndDeviceIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsApplicationDownlinkQueue_DownlinkQueueClear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDeviceIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsApplicationDownlinkQueueServer).DownlinkQueueClear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.AsApplicationDownlinkQueue/DownlinkQueueClear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsApplicationDownlinkQueueServer).DownlinkQueueClear(ctx, req.(*EndDeviceIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _AsApplicationDownlinkQueue_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.AsApplicationDownlinkQueue",
	HandlerType: (*AsApplicationDownlinkQueueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DownlinkQueueReplace",
			Handler:    _AsApplicationDownlinkQueue_DownlinkQueueReplace_Handler,
		},
		{
			MethodName: "DownlinkQueuePush",
			Handler:    _AsApplicationDownlinkQueue_DownlinkQueuePush_Handler,
		},
		{
			MethodName: "DownlinkQueueList",
			Handler:    _AsApplicationDownlinkQueue_DownlinkQueueList_Handler,
		},
		{
			MethodName: "DownlinkQueueClear",
			Handler:    _AsApplicationDownlinkQueue_DownlinkQueueClear_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.thethings.network/lorawan-stack/api/application.proto",
}

func (m *Application) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Application) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApplication(dAtA, i, uint64(m.ApplicationIdentifiers.Size()))
	n1, err := m.ApplicationIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Description) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApplication(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintApplication(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)))
	n2, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x22
	i++
	i = encodeVarintApplication(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)))
	n3, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if m.UpFormatter != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApplication(dAtA, i, uint64(m.UpFormatter))
	}
	if len(m.UpFormatterParameter) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApplication(dAtA, i, uint64(len(m.UpFormatterParameter)))
		i += copy(dAtA[i:], m.UpFormatterParameter)
	}
	if m.DownFormatter != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintApplication(dAtA, i, uint64(m.DownFormatter))
	}
	if len(m.DownFormatterParameter) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApplication(dAtA, i, uint64(len(m.DownFormatterParameter)))
		i += copy(dAtA[i:], m.DownFormatterParameter)
	}
	return i, nil
}

func (m *Applications) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Applications) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Applications) > 0 {
		for _, msg := range m.Applications {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApplication(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ApplicationUp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationUp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApplication(dAtA, i, uint64(m.EndDeviceIdentifiers.Size()))
	n4, err := m.EndDeviceIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if len(m.CorrelationIDs) > 0 {
		for _, s := range m.CorrelationIDs {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Up != nil {
		nn5, err := m.Up.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn5
	}
	return i, nil
}

func (m *ApplicationUp_UplinkMessage) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UplinkMessage != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApplication(dAtA, i, uint64(m.UplinkMessage.Size()))
		n6, err := m.UplinkMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *ApplicationUp_JoinAccept) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.JoinAccept != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApplication(dAtA, i, uint64(m.JoinAccept.Size()))
		n7, err := m.JoinAccept.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *ApplicationUp_DownlinkAck) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DownlinkAck != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApplication(dAtA, i, uint64(m.DownlinkAck.Size()))
		n8, err := m.DownlinkAck.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *ApplicationUp_DownlinkNack) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DownlinkNack != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApplication(dAtA, i, uint64(m.DownlinkNack.Size()))
		n9, err := m.DownlinkNack.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *ApplicationUp_DownlinkSent) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DownlinkSent != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApplication(dAtA, i, uint64(m.DownlinkSent.Size()))
		n10, err := m.DownlinkSent.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *ApplicationUp_DownlinkQueued) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DownlinkQueued != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApplication(dAtA, i, uint64(m.DownlinkQueued.Size()))
		n11, err := m.DownlinkQueued.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *ApplicationDownlinks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationDownlinks) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Downlinks) > 0 {
		for _, msg := range m.Downlinks {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApplication(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DownlinkQueueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownlinkQueueRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Downlinks) > 0 {
		for _, msg := range m.Downlinks {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApplication(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintApplication(dAtA, i, uint64(m.EndDeviceIdentifiers.Size()))
	n12, err := m.EndDeviceIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	return i, nil
}

func encodeVarintApplication(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedApplication(r randyApplication, easy bool) *Application {
	this := &Application{}
	v1 := NewPopulatedApplicationIdentifiers(r, easy)
	this.ApplicationIdentifiers = *v1
	this.Description = randStringApplication(r)
	v2 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.CreatedAt = *v2
	v3 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.UpdatedAt = *v3
	this.UpFormatter = PayloadFormatter([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	this.UpFormatterParameter = randStringApplication(r)
	this.DownFormatter = PayloadFormatter([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	this.DownFormatterParameter = randStringApplication(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedApplications(r randyApplication, easy bool) *Applications {
	this := &Applications{}
	if r.Intn(10) != 0 {
		v4 := r.Intn(5)
		this.Applications = make([]*Application, v4)
		for i := 0; i < v4; i++ {
			this.Applications[i] = NewPopulatedApplication(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedApplicationUp(r randyApplication, easy bool) *ApplicationUp {
	this := &ApplicationUp{}
	v5 := NewPopulatedEndDeviceIdentifiers(r, easy)
	this.EndDeviceIdentifiers = *v5
	v6 := r.Intn(10)
	this.CorrelationIDs = make([]string, v6)
	for i := 0; i < v6; i++ {
		this.CorrelationIDs[i] = randStringApplication(r)
	}
	oneofNumber_Up := []int32{3, 4, 5, 6, 7, 8}[r.Intn(6)]
	switch oneofNumber_Up {
	case 3:
		this.Up = NewPopulatedApplicationUp_UplinkMessage(r, easy)
	case 4:
		this.Up = NewPopulatedApplicationUp_JoinAccept(r, easy)
	case 5:
		this.Up = NewPopulatedApplicationUp_DownlinkAck(r, easy)
	case 6:
		this.Up = NewPopulatedApplicationUp_DownlinkNack(r, easy)
	case 7:
		this.Up = NewPopulatedApplicationUp_DownlinkSent(r, easy)
	case 8:
		this.Up = NewPopulatedApplicationUp_DownlinkQueued(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedApplicationUp_UplinkMessage(r randyApplication, easy bool) *ApplicationUp_UplinkMessage {
	this := &ApplicationUp_UplinkMessage{}
	this.UplinkMessage = NewPopulatedApplicationUplink(r, easy)
	return this
}
func NewPopulatedApplicationUp_JoinAccept(r randyApplication, easy bool) *ApplicationUp_JoinAccept {
	this := &ApplicationUp_JoinAccept{}
	this.JoinAccept = NewPopulatedApplicationJoinAccept(r, easy)
	return this
}
func NewPopulatedApplicationUp_DownlinkAck(r randyApplication, easy bool) *ApplicationUp_DownlinkAck {
	this := &ApplicationUp_DownlinkAck{}
	this.DownlinkAck = NewPopulatedApplicationDownlink(r, easy)
	return this
}
func NewPopulatedApplicationUp_DownlinkNack(r randyApplication, easy bool) *ApplicationUp_DownlinkNack {
	this := &ApplicationUp_DownlinkNack{}
	this.DownlinkNack = NewPopulatedApplicationDownlink(r, easy)
	return this
}
func NewPopulatedApplicationUp_DownlinkSent(r randyApplication, easy bool) *ApplicationUp_DownlinkSent {
	this := &ApplicationUp_DownlinkSent{}
	this.DownlinkSent = NewPopulatedApplicationDownlink(r, easy)
	return this
}
func NewPopulatedApplicationUp_DownlinkQueued(r randyApplication, easy bool) *ApplicationUp_DownlinkQueued {
	this := &ApplicationUp_DownlinkQueued{}
	this.DownlinkQueued = NewPopulatedApplicationDownlink(r, easy)
	return this
}
func NewPopulatedApplicationDownlinks(r randyApplication, easy bool) *ApplicationDownlinks {
	this := &ApplicationDownlinks{}
	if r.Intn(10) != 0 {
		v7 := r.Intn(5)
		this.Downlinks = make([]*ApplicationDownlink, v7)
		for i := 0; i < v7; i++ {
			this.Downlinks[i] = NewPopulatedApplicationDownlink(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDownlinkQueueRequest(r randyApplication, easy bool) *DownlinkQueueRequest {
	this := &DownlinkQueueRequest{}
	if r.Intn(10) != 0 {
		v8 := r.Intn(5)
		this.Downlinks = make([]*ApplicationDownlink, v8)
		for i := 0; i < v8; i++ {
			this.Downlinks[i] = NewPopulatedApplicationDownlink(r, easy)
		}
	}
	v9 := NewPopulatedEndDeviceIdentifiers(r, easy)
	this.EndDeviceIdentifiers = *v9
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyApplication interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneApplication(r randyApplication) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringApplication(r randyApplication) string {
	v10 := r.Intn(100)
	tmps := make([]rune, v10)
	for i := 0; i < v10; i++ {
		tmps[i] = randUTF8RuneApplication(r)
	}
	return string(tmps)
}
func randUnrecognizedApplication(r randyApplication, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldApplication(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldApplication(dAtA []byte, r randyApplication, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateApplication(dAtA, uint64(key))
		v11 := r.Int63()
		if r.Intn(2) == 0 {
			v11 *= -1
		}
		dAtA = encodeVarintPopulateApplication(dAtA, uint64(v11))
	case 1:
		dAtA = encodeVarintPopulateApplication(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateApplication(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateApplication(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateApplication(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateApplication(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Application) Size() (n int) {
	var l int
	_ = l
	l = m.ApplicationIdentifiers.Size()
	n += 1 + l + sovApplication(uint64(l))
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovApplication(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)
	n += 1 + l + sovApplication(uint64(l))
	if m.UpFormatter != 0 {
		n += 1 + sovApplication(uint64(m.UpFormatter))
	}
	l = len(m.UpFormatterParameter)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	if m.DownFormatter != 0 {
		n += 1 + sovApplication(uint64(m.DownFormatter))
	}
	l = len(m.DownFormatterParameter)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	return n
}

func (m *Applications) Size() (n int) {
	var l int
	_ = l
	if len(m.Applications) > 0 {
		for _, e := range m.Applications {
			l = e.Size()
			n += 1 + l + sovApplication(uint64(l))
		}
	}
	return n
}

func (m *ApplicationUp) Size() (n int) {
	var l int
	_ = l
	l = m.EndDeviceIdentifiers.Size()
	n += 1 + l + sovApplication(uint64(l))
	if len(m.CorrelationIDs) > 0 {
		for _, s := range m.CorrelationIDs {
			l = len(s)
			n += 1 + l + sovApplication(uint64(l))
		}
	}
	if m.Up != nil {
		n += m.Up.Size()
	}
	return n
}

func (m *ApplicationUp_UplinkMessage) Size() (n int) {
	var l int
	_ = l
	if m.UplinkMessage != nil {
		l = m.UplinkMessage.Size()
		n += 1 + l + sovApplication(uint64(l))
	}
	return n
}
func (m *ApplicationUp_JoinAccept) Size() (n int) {
	var l int
	_ = l
	if m.JoinAccept != nil {
		l = m.JoinAccept.Size()
		n += 1 + l + sovApplication(uint64(l))
	}
	return n
}
func (m *ApplicationUp_DownlinkAck) Size() (n int) {
	var l int
	_ = l
	if m.DownlinkAck != nil {
		l = m.DownlinkAck.Size()
		n += 1 + l + sovApplication(uint64(l))
	}
	return n
}
func (m *ApplicationUp_DownlinkNack) Size() (n int) {
	var l int
	_ = l
	if m.DownlinkNack != nil {
		l = m.DownlinkNack.Size()
		n += 1 + l + sovApplication(uint64(l))
	}
	return n
}
func (m *ApplicationUp_DownlinkSent) Size() (n int) {
	var l int
	_ = l
	if m.DownlinkSent != nil {
		l = m.DownlinkSent.Size()
		n += 1 + l + sovApplication(uint64(l))
	}
	return n
}
func (m *ApplicationUp_DownlinkQueued) Size() (n int) {
	var l int
	_ = l
	if m.DownlinkQueued != nil {
		l = m.DownlinkQueued.Size()
		n += 1 + l + sovApplication(uint64(l))
	}
	return n
}
func (m *ApplicationDownlinks) Size() (n int) {
	var l int
	_ = l
	if len(m.Downlinks) > 0 {
		for _, e := range m.Downlinks {
			l = e.Size()
			n += 1 + l + sovApplication(uint64(l))
		}
	}
	return n
}

func (m *DownlinkQueueRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Downlinks) > 0 {
		for _, e := range m.Downlinks {
			l = e.Size()
			n += 1 + l + sovApplication(uint64(l))
		}
	}
	l = m.EndDeviceIdentifiers.Size()
	n += 1 + l + sovApplication(uint64(l))
	return n
}

func sovApplication(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApplication(x uint64) (n int) {
	return sovApplication((x << 1) ^ uint64((int64(x) >> 63)))
}
func (this *Application) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Application{`,
		`ApplicationIdentifiers:` + strings.Replace(strings.Replace(this.ApplicationIdentifiers.String(), "ApplicationIdentifiers", "ApplicationIdentifiers", 1), `&`, ``, 1) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`CreatedAt:` + strings.Replace(strings.Replace(this.CreatedAt.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`UpdatedAt:` + strings.Replace(strings.Replace(this.UpdatedAt.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`UpFormatter:` + fmt.Sprintf("%v", this.UpFormatter) + `,`,
		`UpFormatterParameter:` + fmt.Sprintf("%v", this.UpFormatterParameter) + `,`,
		`DownFormatter:` + fmt.Sprintf("%v", this.DownFormatter) + `,`,
		`DownFormatterParameter:` + fmt.Sprintf("%v", this.DownFormatterParameter) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Applications) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Applications{`,
		`Applications:` + strings.Replace(fmt.Sprintf("%v", this.Applications), "Application", "Application", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationUp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationUp{`,
		`EndDeviceIdentifiers:` + strings.Replace(strings.Replace(this.EndDeviceIdentifiers.String(), "EndDeviceIdentifiers", "EndDeviceIdentifiers", 1), `&`, ``, 1) + `,`,
		`CorrelationIDs:` + fmt.Sprintf("%v", this.CorrelationIDs) + `,`,
		`Up:` + fmt.Sprintf("%v", this.Up) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationUp_UplinkMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationUp_UplinkMessage{`,
		`UplinkMessage:` + strings.Replace(fmt.Sprintf("%v", this.UplinkMessage), "ApplicationUplink", "ApplicationUplink", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationUp_JoinAccept) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationUp_JoinAccept{`,
		`JoinAccept:` + strings.Replace(fmt.Sprintf("%v", this.JoinAccept), "ApplicationJoinAccept", "ApplicationJoinAccept", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationUp_DownlinkAck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationUp_DownlinkAck{`,
		`DownlinkAck:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkAck), "ApplicationDownlink", "ApplicationDownlink", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationUp_DownlinkNack) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationUp_DownlinkNack{`,
		`DownlinkNack:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkNack), "ApplicationDownlink", "ApplicationDownlink", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationUp_DownlinkSent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationUp_DownlinkSent{`,
		`DownlinkSent:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkSent), "ApplicationDownlink", "ApplicationDownlink", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationUp_DownlinkQueued) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationUp_DownlinkQueued{`,
		`DownlinkQueued:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkQueued), "ApplicationDownlink", "ApplicationDownlink", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationDownlinks) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationDownlinks{`,
		`Downlinks:` + strings.Replace(fmt.Sprintf("%v", this.Downlinks), "ApplicationDownlink", "ApplicationDownlink", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownlinkQueueRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownlinkQueueRequest{`,
		`Downlinks:` + strings.Replace(fmt.Sprintf("%v", this.Downlinks), "ApplicationDownlink", "ApplicationDownlink", 1) + `,`,
		`EndDeviceIdentifiers:` + strings.Replace(strings.Replace(this.EndDeviceIdentifiers.String(), "EndDeviceIdentifiers", "EndDeviceIdentifiers", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringApplication(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Application) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Application: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Application: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpFormatter", wireType)
			}
			m.UpFormatter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpFormatter |= (PayloadFormatter(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpFormatterParameter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpFormatterParameter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownFormatter", wireType)
			}
			m.DownFormatter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DownFormatter |= (PayloadFormatter(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownFormatterParameter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownFormatterParameter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Applications) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Applications: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Applications: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Applications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Applications = append(m.Applications, &Application{})
			if err := m.Applications[len(m.Applications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationUp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationUp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationUp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDeviceIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EndDeviceIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrelationIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CorrelationIDs = append(m.CorrelationIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplinkMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApplicationUplink{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Up = &ApplicationUp_UplinkMessage{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinAccept", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApplicationJoinAccept{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Up = &ApplicationUp_JoinAccept{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkAck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApplicationDownlink{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Up = &ApplicationUp_DownlinkAck{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkNack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApplicationDownlink{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Up = &ApplicationUp_DownlinkNack{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkSent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApplicationDownlink{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Up = &ApplicationUp_DownlinkSent{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkQueued", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApplicationDownlink{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Up = &ApplicationUp_DownlinkQueued{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationDownlinks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationDownlinks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationDownlinks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Downlinks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Downlinks = append(m.Downlinks, &ApplicationDownlink{})
			if err := m.Downlinks[len(m.Downlinks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownlinkQueueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownlinkQueueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownlinkQueueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Downlinks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Downlinks = append(m.Downlinks, &ApplicationDownlink{})
			if err := m.Downlinks[len(m.Downlinks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDeviceIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EndDeviceIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApplication(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApplication
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApplication
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApplication(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApplication = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApplication   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("go.thethings.network/lorawan-stack/api/application.proto", fileDescriptor_application_23992fcf5e987218)
}
func init() {
	golang_proto.RegisterFile("go.thethings.network/lorawan-stack/api/application.proto", fileDescriptor_application_23992fcf5e987218)
}

var fileDescriptor_application_23992fcf5e987218 = []byte{
	// 958 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xcf, 0x6f, 0xe3, 0x44,
	0x18, 0xcd, 0x24, 0xa5, 0x6c, 0x26, 0x6d, 0x56, 0x8c, 0xaa, 0x2a, 0xca, 0x22, 0x27, 0x84, 0x05,
	0x45, 0x88, 0xda, 0x22, 0x0b, 0xd2, 0x4a, 0x48, 0xa0, 0xa4, 0x5d, 0x48, 0x2b, 0xb6, 0x74, 0x4d,
	0x17, 0x09, 0x84, 0x88, 0xa6, 0xf6, 0xd4, 0x75, 0xe3, 0xcc, 0xcc, 0x7a, 0xc6, 0x5b, 0x55, 0x08,
	0x09, 0xf1, 0x17, 0xac, 0xc4, 0x7f, 0xc0, 0x69, 0x8f, 0xfc, 0x03, 0x48, 0x5c, 0x90, 0x7a, 0x5c,
	0x89, 0x0b, 0xa7, 0xb2, 0xcd, 0x72, 0x80, 0x1b, 0x47, 0x04, 0x17, 0xe4, 0xb1, 0x9d, 0x38, 0xe9,
	0x0f, 0x39, 0xda, 0x96, 0x53, 0x3b, 0xf9, 0xde, 0x7b, 0xdf, 0xfb, 0xe6, 0x7b, 0x76, 0x02, 0x6f,
	0x3b, 0x4c, 0x97, 0x7b, 0x44, 0xee, 0xb9, 0xd4, 0x11, 0x3a, 0x25, 0xf2, 0x80, 0xf9, 0x7d, 0xc3,
	0x63, 0x3e, 0x3e, 0xc0, 0x74, 0x45, 0x48, 0x6c, 0xf5, 0x0d, 0xcc, 0x5d, 0x03, 0x73, 0xee, 0xb9,
	0x16, 0x96, 0x2e, 0xa3, 0x3a, 0xf7, 0x99, 0x64, 0xa8, 0x2c, 0x25, 0xd5, 0x63, 0xa0, 0xfe, 0xf0,
	0x56, 0x35, 0xab, 0x92, 0x6b, 0x13, 0x2a, 0xdd, 0x5d, 0x97, 0xf8, 0x22, 0x52, 0xaa, 0xbe, 0x95,
	0x91, 0xd9, 0x27, 0x87, 0x09, 0xe5, 0x9d, 0x8c, 0x94, 0x01, 0x11, 0x02, 0x3b, 0x64, 0x76, 0x9a,
	0xc4, 0x36, 0x96, 0x38, 0xa6, 0xbd, 0x97, 0x91, 0xc6, 0xf1, 0xa1, 0xc7, 0xb0, 0xdd, 0xdb, 0x65,
	0xfe, 0x00, 0x4b, 0x49, 0xfc, 0x98, 0xbf, 0xe2, 0xb8, 0x72, 0x2f, 0xd8, 0xd1, 0x2d, 0x36, 0x30,
	0x1c, 0xe6, 0x30, 0x43, 0x7d, 0xbc, 0x13, 0xec, 0xaa, 0x93, 0x3a, 0xa8, 0xff, 0x62, 0xf8, 0xcb,
	0x0e, 0x63, 0x8e, 0x47, 0xa2, 0x7b, 0xa7, 0x94, 0x49, 0x75, 0xed, 0xc9, 0x0c, 0x37, 0xe2, 0xea,
	0x48, 0x83, 0x0c, 0xb8, 0x3c, 0x8c, 0x8b, 0xb5, 0xe9, 0xa2, 0x74, 0x07, 0x44, 0x48, 0x3c, 0xe0,
	0x11, 0xa0, 0xf1, 0x6f, 0x01, 0x96, 0xda, 0xe3, 0x5d, 0xa2, 0x0e, 0x2c, 0xb8, 0xb6, 0xa8, 0x80,
	0x3a, 0x68, 0x96, 0x5a, 0xaf, 0xeb, 0x93, 0x3b, 0xd5, 0x53, 0xc8, 0xf5, 0xf1, 0xda, 0x3a, 0xd7,
	0x8e, 0x8e, 0x6b, 0xb9, 0x27, 0xc7, 0x35, 0x60, 0x86, 0x64, 0x54, 0x87, 0x25, 0x9b, 0x08, 0xcb,
	0x77, 0x79, 0x08, 0xac, 0xe4, 0xeb, 0xa0, 0x59, 0x34, 0xd3, 0x1f, 0xa1, 0x55, 0x08, 0x2d, 0x9f,
	0x60, 0x49, 0xec, 0x1e, 0x96, 0x95, 0x82, 0x6a, 0x56, 0xd5, 0x23, 0xaf, 0x7a, 0xe2, 0x55, 0xdf,
	0x4e, 0xbc, 0x46, 0x0d, 0x1e, 0xfd, 0x56, 0x03, 0x66, 0x31, 0xe6, 0xb5, 0x65, 0x28, 0x12, 0x70,
	0x3b, 0x11, 0x99, 0x9b, 0x45, 0x24, 0xe6, 0x29, 0x91, 0x85, 0x80, 0x8f, 0x17, 0x54, 0x79, 0xa1,
	0x0e, 0x9a, 0xe5, 0x56, 0x7d, 0x7a, 0xf0, 0xad, 0x68, 0x93, 0x1f, 0x24, 0x38, 0xb3, 0x14, 0xf0,
	0xd1, 0x01, 0xbd, 0x0d, 0x97, 0xd3, 0x22, 0x3d, 0x8e, 0x7d, 0x3c, 0x20, 0xa1, 0xdc, 0xbc, 0x9a,
	0x7d, 0x29, 0x05, 0xde, 0x4a, 0x6a, 0xe8, 0x43, 0x58, 0xb6, 0xd9, 0x01, 0x4d, 0x35, 0x7f, 0x31,
	0x63, 0xf3, 0xc5, 0x90, 0x37, 0x6e, 0x7f, 0x1b, 0x56, 0x26, 0x85, 0x52, 0x06, 0xae, 0x29, 0x03,
	0xcb, 0x13, 0x84, 0x91, 0x85, 0xc6, 0xc7, 0x70, 0x21, 0xb5, 0x52, 0x81, 0xde, 0x87, 0x0b, 0xa9,
	0x07, 0x3b, 0x8c, 0x41, 0xa1, 0x59, 0x6a, 0xdd, 0xb8, 0x20, 0x06, 0xe6, 0x04, 0xa1, 0xf1, 0xe7,
	0x1c, 0x5c, 0x4c, 0x55, 0xef, 0x73, 0x74, 0x17, 0x42, 0x42, 0xed, 0x9e, 0x4d, 0x1e, 0xba, 0x16,
	0x89, 0x73, 0x75, 0x73, 0x5a, 0xf0, 0x0e, 0xb5, 0xd7, 0x14, 0xe0, 0xec, 0x54, 0x15, 0x49, 0x52,
	0x47, 0xef, 0xc2, 0xeb, 0x16, 0xf3, 0x7d, 0xe2, 0x29, 0xfd, 0x5e, 0x98, 0xd5, 0x7c, 0xbd, 0xd0,
	0x2c, 0x76, 0xd0, 0xf0, 0xb8, 0x56, 0x5e, 0x1d, 0x97, 0xd6, 0xd7, 0x84, 0x59, 0x4e, 0x41, 0xd7,
	0x6d, 0x81, 0x36, 0x60, 0x39, 0xe0, 0x9e, 0x4b, 0xfb, 0xbd, 0xf8, 0x3d, 0x10, 0x47, 0xef, 0x95,
	0x0b, 0x06, 0xbc, 0xaf, 0x08, 0xdd, 0x9c, 0xb9, 0x18, 0x51, 0xef, 0x46, 0x4c, 0xd4, 0x85, 0xa5,
	0x7d, 0xe6, 0xd2, 0x1e, 0xb6, 0x2c, 0xc2, 0x93, 0xf8, 0xbd, 0x76, 0x81, 0xd0, 0x06, 0x73, 0x69,
	0x5b, 0x81, 0xbb, 0x39, 0x13, 0xee, 0x8f, 0x4e, 0xa8, 0x0b, 0x17, 0xc2, 0xf5, 0x28, 0x5f, 0xd8,
	0xea, 0xab, 0x08, 0x96, 0x5a, 0xaf, 0x5e, 0x20, 0xb5, 0x16, 0xc3, 0xbb, 0x39, 0xb3, 0x94, 0x50,
	0xdb, 0x56, 0x1f, 0x6d, 0xc0, 0xc5, 0x91, 0x12, 0x0d, 0xa5, 0xe6, 0x67, 0x91, 0x1a, 0xb9, 0xd8,
	0xc4, 0x53, 0x5a, 0x82, 0x50, 0xa9, 0xc2, 0x39, 0xbb, 0xd6, 0x27, 0x84, 0x4a, 0xb4, 0x09, 0xaf,
	0x8f, 0xb4, 0x1e, 0x04, 0x24, 0x20, 0xb6, 0xca, 0x65, 0x66, 0xb5, 0x72, 0xc2, 0xbe, 0xa7, 0xc8,
	0x9d, 0x39, 0x98, 0x0f, 0x78, 0xe3, 0x33, 0xb8, 0x74, 0x06, 0x5c, 0xa0, 0x36, 0x2c, 0x26, 0xf8,
	0x24, 0xc1, 0x59, 0xfa, 0x98, 0x63, 0x56, 0xe3, 0x31, 0x80, 0x4b, 0x6b, 0xe9, 0x9e, 0x26, 0x79,
	0x10, 0x10, 0x21, 0x2f, 0x41, 0x7b, 0xea, 0x81, 0xc8, 0x3f, 0xe7, 0x03, 0xd1, 0xfa, 0x27, 0x0f,
	0xab, 0x9b, 0xe2, 0x8c, 0x9e, 0xca, 0x37, 0xda, 0x3e, 0x35, 0x08, 0xf7, 0xb0, 0x45, 0xd0, 0xa9,
	0x8e, 0x67, 0x8d, 0x5b, 0x5d, 0x3e, 0xf5, 0x3a, 0xbd, 0x13, 0x7e, 0xb9, 0xa0, 0x7b, 0xf0, 0xa5,
	0x09, 0xfc, 0x56, 0x20, 0xf6, 0x9e, 0x53, 0xb2, 0x37, 0x25, 0xf9, 0x91, 0x2b, 0x24, 0xca, 0x74,
	0x2f, 0xd5, 0x9b, 0x19, 0x36, 0x20, 0x90, 0x09, 0xd1, 0x44, 0x83, 0x55, 0x8f, 0x60, 0x3f, 0x63,
	0x87, 0x73, 0x4c, 0xb7, 0xbe, 0x9f, 0x87, 0xd5, 0xf6, 0xf9, 0x97, 0x7f, 0x04, 0xae, 0xe2, 0xf6,
	0x1b, 0xfe, 0xb7, 0xbf, 0xfc, 0xfe, 0x5d, 0xde, 0x6b, 0xec, 0x1b, 0x58, 0xa4, 0x7f, 0x88, 0x09,
	0xe3, 0xab, 0x71, 0xb2, 0xf4, 0x54, 0x21, 0x7c, 0x4d, 0x4e, 0x9d, 0xbf, 0x36, 0x22, 0xd8, 0x24,
	0x27, 0xfa, 0x13, 0x95, 0x63, 0x47, 0x2b, 0xea, 0x81, 0x45, 0x3f, 0x83, 0x4b, 0x5f, 0x79, 0x32,
	0x47, 0xf5, 0xff, 0x9c, 0xe3, 0x47, 0x70, 0xc5, 0x39, 0x6b, 0x7c, 0xa1, 0xa6, 0xfa, 0x14, 0x6d,
	0x9f, 0x9e, 0x2a, 0xf3, 0x28, 0xe7, 0xfb, 0xff, 0x01, 0x5c, 0x7e, 0x8c, 0x13, 0xcb, 0x6f, 0x5c,
	0x89, 0xe5, 0xce, 0x97, 0xbf, 0x9e, 0x68, 0xb9, 0xa7, 0x27, 0x1a, 0xf8, 0xfb, 0x44, 0x03, 0xdf,
	0x0c, 0x35, 0xf0, 0x78, 0xa8, 0x81, 0xa3, 0xa1, 0x06, 0x9e, 0x0c, 0x35, 0xf0, 0x74, 0xa8, 0x81,
	0x3f, 0x86, 0x5a, 0xee, 0xaf, 0xa1, 0x06, 0x1e, 0x3d, 0xd3, 0x72, 0x3f, 0x3d, 0xd3, 0xc0, 0xe7,
	0x6f, 0x66, 0xf8, 0x7d, 0xcd, 0xfb, 0x8e, 0x21, 0x25, 0xe5, 0x3b, 0x3b, 0xf3, 0x6a, 0x9a, 0x5b,
	0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0xf1, 0x29, 0xd3, 0x2b, 0xbb, 0x0c, 0x00, 0x00,
}
