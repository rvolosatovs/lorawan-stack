// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/application.proto

package ttnpb // import "go.thethings.network/lorawan-stack/pkg/ttnpb"

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import types "github.com/gogo/protobuf/types"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import time "time"

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Application is the message that defines an Application in the network.
// The persistence of the Application is divided between the Identity Server and the Application Server.
// SDKs are responsible for combining (if desired) the two.
type Application struct {
	ApplicationIdentifiers `protobuf:"bytes,1,opt,name=ids,embedded=ids" json:"ids"`
	CreatedAt              time.Time                 `protobuf:"bytes,2,opt,name=created_at,json=createdAt,stdtime" json:"created_at"`
	UpdatedAt              time.Time                 `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,stdtime" json:"updated_at"`
	Name                   string                    `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description            string                    `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Attributes             map[string]string         `protobuf:"bytes,6,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ContactInfo            []*ContactInfo            `protobuf:"bytes,7,rep,name=contact_info,json=contactInfo" json:"contact_info,omitempty"`
	DefaultFormatters      *MessagePayloadFormatters `protobuf:"bytes,8,opt,name=default_formatters,json=defaultFormatters" json:"default_formatters,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                  `json:"-"`
	XXX_sizecache          int32                     `json:"-"`
}

func (m *Application) Reset()      { *m = Application{} }
func (*Application) ProtoMessage() {}
func (*Application) Descriptor() ([]byte, []int) {
	return fileDescriptor_application_f42dd1597e78dcfb, []int{0}
}
func (m *Application) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Application) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Application.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Application) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Application.Merge(dst, src)
}
func (m *Application) XXX_Size() int {
	return m.Size()
}
func (m *Application) XXX_DiscardUnknown() {
	xxx_messageInfo_Application.DiscardUnknown(m)
}

var xxx_messageInfo_Application proto.InternalMessageInfo

func (m *Application) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *Application) GetUpdatedAt() time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return time.Time{}
}

func (m *Application) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Application) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Application) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Application) GetContactInfo() []*ContactInfo {
	if m != nil {
		return m.ContactInfo
	}
	return nil
}

func (m *Application) GetDefaultFormatters() *MessagePayloadFormatters {
	if m != nil {
		return m.DefaultFormatters
	}
	return nil
}

type Applications struct {
	Applications         []*Application `protobuf:"bytes,1,rep,name=applications" json:"applications,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Applications) Reset()      { *m = Applications{} }
func (*Applications) ProtoMessage() {}
func (*Applications) Descriptor() ([]byte, []int) {
	return fileDescriptor_application_f42dd1597e78dcfb, []int{1}
}
func (m *Applications) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Applications) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Applications.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Applications) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Applications.Merge(dst, src)
}
func (m *Applications) XXX_Size() int {
	return m.Size()
}
func (m *Applications) XXX_DiscardUnknown() {
	xxx_messageInfo_Applications.DiscardUnknown(m)
}

var xxx_messageInfo_Applications proto.InternalMessageInfo

func (m *Applications) GetApplications() []*Application {
	if m != nil {
		return m.Applications
	}
	return nil
}

type GetApplicationRequest struct {
	ApplicationIdentifiers `protobuf:"bytes,1,opt,name=application_ids,json=applicationIds,embedded=application_ids" json:"application_ids"`
	FieldMask              types.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask" json:"field_mask"`
	XXX_NoUnkeyedLiteral   struct{}        `json:"-"`
	XXX_sizecache          int32           `json:"-"`
}

func (m *GetApplicationRequest) Reset()      { *m = GetApplicationRequest{} }
func (*GetApplicationRequest) ProtoMessage() {}
func (*GetApplicationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_application_f42dd1597e78dcfb, []int{2}
}
func (m *GetApplicationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetApplicationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetApplicationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetApplicationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetApplicationRequest.Merge(dst, src)
}
func (m *GetApplicationRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetApplicationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetApplicationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetApplicationRequest proto.InternalMessageInfo

func (m *GetApplicationRequest) GetFieldMask() types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return types.FieldMask{}
}

type ListApplicationsRequest struct {
	Collaborator         *OrganizationOrUserIdentifiers `protobuf:"bytes,1,opt,name=collaborator" json:"collaborator,omitempty"`
	FieldMask            types.FieldMask                `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask" json:"field_mask"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *ListApplicationsRequest) Reset()      { *m = ListApplicationsRequest{} }
func (*ListApplicationsRequest) ProtoMessage() {}
func (*ListApplicationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_application_f42dd1597e78dcfb, []int{3}
}
func (m *ListApplicationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListApplicationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListApplicationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListApplicationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListApplicationsRequest.Merge(dst, src)
}
func (m *ListApplicationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListApplicationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListApplicationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListApplicationsRequest proto.InternalMessageInfo

func (m *ListApplicationsRequest) GetCollaborator() *OrganizationOrUserIdentifiers {
	if m != nil {
		return m.Collaborator
	}
	return nil
}

func (m *ListApplicationsRequest) GetFieldMask() types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return types.FieldMask{}
}

type CreateApplicationRequest struct {
	Application `protobuf:"bytes,1,opt,name=application,embedded=application" json:"application"`
	// By default the account of the caller is set as first collaborator with admin rights.
	// Set the organization to instead make the organization the first collaborator with admin rights.
	OrganizationIDs      *OrganizationIdentifiers `protobuf:"bytes,2,opt,name=organization_ids,json=organizationIds" json:"organization_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *CreateApplicationRequest) Reset()      { *m = CreateApplicationRequest{} }
func (*CreateApplicationRequest) ProtoMessage() {}
func (*CreateApplicationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_application_f42dd1597e78dcfb, []int{4}
}
func (m *CreateApplicationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateApplicationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateApplicationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateApplicationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateApplicationRequest.Merge(dst, src)
}
func (m *CreateApplicationRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateApplicationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateApplicationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateApplicationRequest proto.InternalMessageInfo

func (m *CreateApplicationRequest) GetOrganizationIDs() *OrganizationIdentifiers {
	if m != nil {
		return m.OrganizationIDs
	}
	return nil
}

type UpdateApplicationRequest struct {
	Application          `protobuf:"bytes,1,opt,name=application,embedded=application" json:"application"`
	FieldMask            types.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask" json:"field_mask"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *UpdateApplicationRequest) Reset()      { *m = UpdateApplicationRequest{} }
func (*UpdateApplicationRequest) ProtoMessage() {}
func (*UpdateApplicationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_application_f42dd1597e78dcfb, []int{5}
}
func (m *UpdateApplicationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateApplicationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateApplicationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateApplicationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateApplicationRequest.Merge(dst, src)
}
func (m *UpdateApplicationRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateApplicationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateApplicationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateApplicationRequest proto.InternalMessageInfo

func (m *UpdateApplicationRequest) GetFieldMask() types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return types.FieldMask{}
}

type SetApplicationAPIKeyRequest struct {
	ApplicationIdentifiers `protobuf:"bytes,1,opt,name=application_ids,json=applicationIds,embedded=application_ids" json:"application_ids"`
	ID                     string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Rights                 []Right  `protobuf:"varint,3,rep,packed,name=rights,enum=ttn.lorawan.v3.Right" json:"rights,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *SetApplicationAPIKeyRequest) Reset()      { *m = SetApplicationAPIKeyRequest{} }
func (*SetApplicationAPIKeyRequest) ProtoMessage() {}
func (*SetApplicationAPIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_application_f42dd1597e78dcfb, []int{6}
}
func (m *SetApplicationAPIKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetApplicationAPIKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetApplicationAPIKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SetApplicationAPIKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetApplicationAPIKeyRequest.Merge(dst, src)
}
func (m *SetApplicationAPIKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetApplicationAPIKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetApplicationAPIKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetApplicationAPIKeyRequest proto.InternalMessageInfo

func (m *SetApplicationAPIKeyRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *SetApplicationAPIKeyRequest) GetRights() []Right {
	if m != nil {
		return m.Rights
	}
	return nil
}

type RemoveApplicationAPIKeyRequest struct {
	ApplicationIdentifiers `protobuf:"bytes,1,opt,name=application_ids,json=applicationIds,embedded=application_ids" json:"application_ids"`
	ID                     string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *RemoveApplicationAPIKeyRequest) Reset()      { *m = RemoveApplicationAPIKeyRequest{} }
func (*RemoveApplicationAPIKeyRequest) ProtoMessage() {}
func (*RemoveApplicationAPIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_application_f42dd1597e78dcfb, []int{7}
}
func (m *RemoveApplicationAPIKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveApplicationAPIKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveApplicationAPIKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RemoveApplicationAPIKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveApplicationAPIKeyRequest.Merge(dst, src)
}
func (m *RemoveApplicationAPIKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveApplicationAPIKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveApplicationAPIKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveApplicationAPIKeyRequest proto.InternalMessageInfo

func (m *RemoveApplicationAPIKeyRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type SetApplicationCollaboratorRequest struct {
	ApplicationIdentifiers `protobuf:"bytes,1,opt,name=application_ids,json=applicationIds,embedded=application_ids" json:"application_ids"`
	Collaborator           Collaborator `protobuf:"bytes,2,opt,name=collaborator" json:"collaborator"`
	XXX_NoUnkeyedLiteral   struct{}     `json:"-"`
	XXX_sizecache          int32        `json:"-"`
}

func (m *SetApplicationCollaboratorRequest) Reset()      { *m = SetApplicationCollaboratorRequest{} }
func (*SetApplicationCollaboratorRequest) ProtoMessage() {}
func (*SetApplicationCollaboratorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_application_f42dd1597e78dcfb, []int{8}
}
func (m *SetApplicationCollaboratorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetApplicationCollaboratorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetApplicationCollaboratorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SetApplicationCollaboratorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetApplicationCollaboratorRequest.Merge(dst, src)
}
func (m *SetApplicationCollaboratorRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetApplicationCollaboratorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetApplicationCollaboratorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetApplicationCollaboratorRequest proto.InternalMessageInfo

func (m *SetApplicationCollaboratorRequest) GetCollaborator() Collaborator {
	if m != nil {
		return m.Collaborator
	}
	return Collaborator{}
}

func init() {
	proto.RegisterType((*Application)(nil), "ttn.lorawan.v3.Application")
	golang_proto.RegisterType((*Application)(nil), "ttn.lorawan.v3.Application")
	proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.Application.AttributesEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.Application.AttributesEntry")
	proto.RegisterType((*Applications)(nil), "ttn.lorawan.v3.Applications")
	golang_proto.RegisterType((*Applications)(nil), "ttn.lorawan.v3.Applications")
	proto.RegisterType((*GetApplicationRequest)(nil), "ttn.lorawan.v3.GetApplicationRequest")
	golang_proto.RegisterType((*GetApplicationRequest)(nil), "ttn.lorawan.v3.GetApplicationRequest")
	proto.RegisterType((*ListApplicationsRequest)(nil), "ttn.lorawan.v3.ListApplicationsRequest")
	golang_proto.RegisterType((*ListApplicationsRequest)(nil), "ttn.lorawan.v3.ListApplicationsRequest")
	proto.RegisterType((*CreateApplicationRequest)(nil), "ttn.lorawan.v3.CreateApplicationRequest")
	golang_proto.RegisterType((*CreateApplicationRequest)(nil), "ttn.lorawan.v3.CreateApplicationRequest")
	proto.RegisterType((*UpdateApplicationRequest)(nil), "ttn.lorawan.v3.UpdateApplicationRequest")
	golang_proto.RegisterType((*UpdateApplicationRequest)(nil), "ttn.lorawan.v3.UpdateApplicationRequest")
	proto.RegisterType((*SetApplicationAPIKeyRequest)(nil), "ttn.lorawan.v3.SetApplicationAPIKeyRequest")
	golang_proto.RegisterType((*SetApplicationAPIKeyRequest)(nil), "ttn.lorawan.v3.SetApplicationAPIKeyRequest")
	proto.RegisterType((*RemoveApplicationAPIKeyRequest)(nil), "ttn.lorawan.v3.RemoveApplicationAPIKeyRequest")
	golang_proto.RegisterType((*RemoveApplicationAPIKeyRequest)(nil), "ttn.lorawan.v3.RemoveApplicationAPIKeyRequest")
	proto.RegisterType((*SetApplicationCollaboratorRequest)(nil), "ttn.lorawan.v3.SetApplicationCollaboratorRequest")
	golang_proto.RegisterType((*SetApplicationCollaboratorRequest)(nil), "ttn.lorawan.v3.SetApplicationCollaboratorRequest")
}
func (this *Application) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Application)
	if !ok {
		that2, ok := that.(Application)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationIdentifiers.Equal(&that1.ApplicationIdentifiers) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return false
	}
	for i := range this.Attributes {
		if this.Attributes[i] != that1.Attributes[i] {
			return false
		}
	}
	if len(this.ContactInfo) != len(that1.ContactInfo) {
		return false
	}
	for i := range this.ContactInfo {
		if !this.ContactInfo[i].Equal(that1.ContactInfo[i]) {
			return false
		}
	}
	if !this.DefaultFormatters.Equal(that1.DefaultFormatters) {
		return false
	}
	return true
}
func (this *Applications) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Applications)
	if !ok {
		that2, ok := that.(Applications)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Applications) != len(that1.Applications) {
		return false
	}
	for i := range this.Applications {
		if !this.Applications[i].Equal(that1.Applications[i]) {
			return false
		}
	}
	return true
}
func (this *GetApplicationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetApplicationRequest)
	if !ok {
		that2, ok := that.(GetApplicationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationIdentifiers.Equal(&that1.ApplicationIdentifiers) {
		return false
	}
	if !this.FieldMask.Equal(&that1.FieldMask) {
		return false
	}
	return true
}
func (this *ListApplicationsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListApplicationsRequest)
	if !ok {
		that2, ok := that.(ListApplicationsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Collaborator.Equal(that1.Collaborator) {
		return false
	}
	if !this.FieldMask.Equal(&that1.FieldMask) {
		return false
	}
	return true
}
func (this *CreateApplicationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateApplicationRequest)
	if !ok {
		that2, ok := that.(CreateApplicationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Application.Equal(&that1.Application) {
		return false
	}
	if !this.OrganizationIDs.Equal(that1.OrganizationIDs) {
		return false
	}
	return true
}
func (this *UpdateApplicationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateApplicationRequest)
	if !ok {
		that2, ok := that.(UpdateApplicationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Application.Equal(&that1.Application) {
		return false
	}
	if !this.FieldMask.Equal(&that1.FieldMask) {
		return false
	}
	return true
}
func (this *SetApplicationAPIKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetApplicationAPIKeyRequest)
	if !ok {
		that2, ok := that.(SetApplicationAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationIdentifiers.Equal(&that1.ApplicationIdentifiers) {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if len(this.Rights) != len(that1.Rights) {
		return false
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return false
		}
	}
	return true
}
func (this *RemoveApplicationAPIKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveApplicationAPIKeyRequest)
	if !ok {
		that2, ok := that.(RemoveApplicationAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationIdentifiers.Equal(&that1.ApplicationIdentifiers) {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	return true
}
func (this *SetApplicationCollaboratorRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetApplicationCollaboratorRequest)
	if !ok {
		that2, ok := that.(SetApplicationCollaboratorRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationIdentifiers.Equal(&that1.ApplicationIdentifiers) {
		return false
	}
	if !this.Collaborator.Equal(&that1.Collaborator) {
		return false
	}
	return true
}
func (m *Application) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Application) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApplication(dAtA, i, uint64(m.ApplicationIdentifiers.Size()))
	n1, err := m.ApplicationIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintApplication(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)))
	n2, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintApplication(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)))
	n3, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApplication(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApplication(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.Attributes) > 0 {
		for k := range m.Attributes {
			dAtA[i] = 0x32
			i++
			v := m.Attributes[k]
			mapSize := 1 + len(k) + sovApplication(uint64(len(k))) + 1 + len(v) + sovApplication(uint64(len(v)))
			i = encodeVarintApplication(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintApplication(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintApplication(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.ContactInfo) > 0 {
		for _, msg := range m.ContactInfo {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintApplication(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.DefaultFormatters != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApplication(dAtA, i, uint64(m.DefaultFormatters.Size()))
		n4, err := m.DefaultFormatters.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *Applications) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Applications) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Applications) > 0 {
		for _, msg := range m.Applications {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApplication(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetApplicationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetApplicationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApplication(dAtA, i, uint64(m.ApplicationIdentifiers.Size()))
	n5, err := m.ApplicationIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x12
	i++
	i = encodeVarintApplication(dAtA, i, uint64(m.FieldMask.Size()))
	n6, err := m.FieldMask.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	return i, nil
}

func (m *ListApplicationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListApplicationsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Collaborator != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApplication(dAtA, i, uint64(m.Collaborator.Size()))
		n7, err := m.Collaborator.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintApplication(dAtA, i, uint64(m.FieldMask.Size()))
	n8, err := m.FieldMask.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	return i, nil
}

func (m *CreateApplicationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateApplicationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApplication(dAtA, i, uint64(m.Application.Size()))
	n9, err := m.Application.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	if m.OrganizationIDs != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApplication(dAtA, i, uint64(m.OrganizationIDs.Size()))
		n10, err := m.OrganizationIDs.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *UpdateApplicationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateApplicationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApplication(dAtA, i, uint64(m.Application.Size()))
	n11, err := m.Application.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	dAtA[i] = 0x12
	i++
	i = encodeVarintApplication(dAtA, i, uint64(m.FieldMask.Size()))
	n12, err := m.FieldMask.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	return i, nil
}

func (m *SetApplicationAPIKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetApplicationAPIKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApplication(dAtA, i, uint64(m.ApplicationIdentifiers.Size()))
	n13, err := m.ApplicationIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	if len(m.ID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApplication(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Rights) > 0 {
		dAtA15 := make([]byte, len(m.Rights)*10)
		var j14 int
		for _, num := range m.Rights {
			for num >= 1<<7 {
				dAtA15[j14] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j14++
			}
			dAtA15[j14] = uint8(num)
			j14++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApplication(dAtA, i, uint64(j14))
		i += copy(dAtA[i:], dAtA15[:j14])
	}
	return i, nil
}

func (m *RemoveApplicationAPIKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveApplicationAPIKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApplication(dAtA, i, uint64(m.ApplicationIdentifiers.Size()))
	n16, err := m.ApplicationIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	if len(m.ID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApplication(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	return i, nil
}

func (m *SetApplicationCollaboratorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetApplicationCollaboratorRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApplication(dAtA, i, uint64(m.ApplicationIdentifiers.Size()))
	n17, err := m.ApplicationIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n17
	dAtA[i] = 0x12
	i++
	i = encodeVarintApplication(dAtA, i, uint64(m.Collaborator.Size()))
	n18, err := m.Collaborator.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n18
	return i, nil
}

func encodeVarintApplication(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedApplication(r randyApplication, easy bool) *Application {
	this := &Application{}
	v1 := NewPopulatedApplicationIdentifiers(r, easy)
	this.ApplicationIdentifiers = *v1
	v2 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.CreatedAt = *v2
	v3 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.UpdatedAt = *v3
	this.Name = randStringApplication(r)
	this.Description = randStringApplication(r)
	if r.Intn(10) != 0 {
		v4 := r.Intn(10)
		this.Attributes = make(map[string]string)
		for i := 0; i < v4; i++ {
			this.Attributes[randStringApplication(r)] = randStringApplication(r)
		}
	}
	if r.Intn(10) != 0 {
		v5 := r.Intn(5)
		this.ContactInfo = make([]*ContactInfo, v5)
		for i := 0; i < v5; i++ {
			this.ContactInfo[i] = NewPopulatedContactInfo(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.DefaultFormatters = NewPopulatedMessagePayloadFormatters(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedApplications(r randyApplication, easy bool) *Applications {
	this := &Applications{}
	if r.Intn(10) != 0 {
		v6 := r.Intn(5)
		this.Applications = make([]*Application, v6)
		for i := 0; i < v6; i++ {
			this.Applications[i] = NewPopulatedApplication(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetApplicationRequest(r randyApplication, easy bool) *GetApplicationRequest {
	this := &GetApplicationRequest{}
	v7 := NewPopulatedApplicationIdentifiers(r, easy)
	this.ApplicationIdentifiers = *v7
	v8 := types.NewPopulatedFieldMask(r, easy)
	this.FieldMask = *v8
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListApplicationsRequest(r randyApplication, easy bool) *ListApplicationsRequest {
	this := &ListApplicationsRequest{}
	if r.Intn(10) != 0 {
		this.Collaborator = NewPopulatedOrganizationOrUserIdentifiers(r, easy)
	}
	v9 := types.NewPopulatedFieldMask(r, easy)
	this.FieldMask = *v9
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateApplicationRequest(r randyApplication, easy bool) *CreateApplicationRequest {
	this := &CreateApplicationRequest{}
	v10 := NewPopulatedApplication(r, easy)
	this.Application = *v10
	if r.Intn(10) != 0 {
		this.OrganizationIDs = NewPopulatedOrganizationIdentifiers(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateApplicationRequest(r randyApplication, easy bool) *UpdateApplicationRequest {
	this := &UpdateApplicationRequest{}
	v11 := NewPopulatedApplication(r, easy)
	this.Application = *v11
	v12 := types.NewPopulatedFieldMask(r, easy)
	this.FieldMask = *v12
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSetApplicationAPIKeyRequest(r randyApplication, easy bool) *SetApplicationAPIKeyRequest {
	this := &SetApplicationAPIKeyRequest{}
	v13 := NewPopulatedApplicationIdentifiers(r, easy)
	this.ApplicationIdentifiers = *v13
	this.ID = randStringApplication(r)
	v14 := r.Intn(10)
	this.Rights = make([]Right, v14)
	for i := 0; i < v14; i++ {
		this.Rights[i] = Right([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51}[r.Intn(52)])
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRemoveApplicationAPIKeyRequest(r randyApplication, easy bool) *RemoveApplicationAPIKeyRequest {
	this := &RemoveApplicationAPIKeyRequest{}
	v15 := NewPopulatedApplicationIdentifiers(r, easy)
	this.ApplicationIdentifiers = *v15
	this.ID = randStringApplication(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSetApplicationCollaboratorRequest(r randyApplication, easy bool) *SetApplicationCollaboratorRequest {
	this := &SetApplicationCollaboratorRequest{}
	v16 := NewPopulatedApplicationIdentifiers(r, easy)
	this.ApplicationIdentifiers = *v16
	v17 := NewPopulatedCollaborator(r, easy)
	this.Collaborator = *v17
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyApplication interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneApplication(r randyApplication) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringApplication(r randyApplication) string {
	v18 := r.Intn(100)
	tmps := make([]rune, v18)
	for i := 0; i < v18; i++ {
		tmps[i] = randUTF8RuneApplication(r)
	}
	return string(tmps)
}
func randUnrecognizedApplication(r randyApplication, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldApplication(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldApplication(dAtA []byte, r randyApplication, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateApplication(dAtA, uint64(key))
		v19 := r.Int63()
		if r.Intn(2) == 0 {
			v19 *= -1
		}
		dAtA = encodeVarintPopulateApplication(dAtA, uint64(v19))
	case 1:
		dAtA = encodeVarintPopulateApplication(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateApplication(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateApplication(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateApplication(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateApplication(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Application) Size() (n int) {
	var l int
	_ = l
	l = m.ApplicationIdentifiers.Size()
	n += 1 + l + sovApplication(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovApplication(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)
	n += 1 + l + sovApplication(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	if len(m.Attributes) > 0 {
		for k, v := range m.Attributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApplication(uint64(len(k))) + 1 + len(v) + sovApplication(uint64(len(v)))
			n += mapEntrySize + 1 + sovApplication(uint64(mapEntrySize))
		}
	}
	if len(m.ContactInfo) > 0 {
		for _, e := range m.ContactInfo {
			l = e.Size()
			n += 1 + l + sovApplication(uint64(l))
		}
	}
	if m.DefaultFormatters != nil {
		l = m.DefaultFormatters.Size()
		n += 1 + l + sovApplication(uint64(l))
	}
	return n
}

func (m *Applications) Size() (n int) {
	var l int
	_ = l
	if len(m.Applications) > 0 {
		for _, e := range m.Applications {
			l = e.Size()
			n += 1 + l + sovApplication(uint64(l))
		}
	}
	return n
}

func (m *GetApplicationRequest) Size() (n int) {
	var l int
	_ = l
	l = m.ApplicationIdentifiers.Size()
	n += 1 + l + sovApplication(uint64(l))
	l = m.FieldMask.Size()
	n += 1 + l + sovApplication(uint64(l))
	return n
}

func (m *ListApplicationsRequest) Size() (n int) {
	var l int
	_ = l
	if m.Collaborator != nil {
		l = m.Collaborator.Size()
		n += 1 + l + sovApplication(uint64(l))
	}
	l = m.FieldMask.Size()
	n += 1 + l + sovApplication(uint64(l))
	return n
}

func (m *CreateApplicationRequest) Size() (n int) {
	var l int
	_ = l
	l = m.Application.Size()
	n += 1 + l + sovApplication(uint64(l))
	if m.OrganizationIDs != nil {
		l = m.OrganizationIDs.Size()
		n += 1 + l + sovApplication(uint64(l))
	}
	return n
}

func (m *UpdateApplicationRequest) Size() (n int) {
	var l int
	_ = l
	l = m.Application.Size()
	n += 1 + l + sovApplication(uint64(l))
	l = m.FieldMask.Size()
	n += 1 + l + sovApplication(uint64(l))
	return n
}

func (m *SetApplicationAPIKeyRequest) Size() (n int) {
	var l int
	_ = l
	l = m.ApplicationIdentifiers.Size()
	n += 1 + l + sovApplication(uint64(l))
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	if len(m.Rights) > 0 {
		l = 0
		for _, e := range m.Rights {
			l += sovApplication(uint64(e))
		}
		n += 1 + sovApplication(uint64(l)) + l
	}
	return n
}

func (m *RemoveApplicationAPIKeyRequest) Size() (n int) {
	var l int
	_ = l
	l = m.ApplicationIdentifiers.Size()
	n += 1 + l + sovApplication(uint64(l))
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	return n
}

func (m *SetApplicationCollaboratorRequest) Size() (n int) {
	var l int
	_ = l
	l = m.ApplicationIdentifiers.Size()
	n += 1 + l + sovApplication(uint64(l))
	l = m.Collaborator.Size()
	n += 1 + l + sovApplication(uint64(l))
	return n
}

func sovApplication(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApplication(x uint64) (n int) {
	return sovApplication((x << 1) ^ uint64((int64(x) >> 63)))
}
func (this *Application) String() string {
	if this == nil {
		return "nil"
	}
	keysForAttributes := make([]string, 0, len(this.Attributes))
	for k := range this.Attributes {
		keysForAttributes = append(keysForAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributes)
	mapStringForAttributes := "map[string]string{"
	for _, k := range keysForAttributes {
		mapStringForAttributes += fmt.Sprintf("%v: %v,", k, this.Attributes[k])
	}
	mapStringForAttributes += "}"
	s := strings.Join([]string{`&Application{`,
		`ApplicationIdentifiers:` + strings.Replace(strings.Replace(this.ApplicationIdentifiers.String(), "ApplicationIdentifiers", "ApplicationIdentifiers", 1), `&`, ``, 1) + `,`,
		`CreatedAt:` + strings.Replace(strings.Replace(this.CreatedAt.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`UpdatedAt:` + strings.Replace(strings.Replace(this.UpdatedAt.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Attributes:` + mapStringForAttributes + `,`,
		`ContactInfo:` + strings.Replace(fmt.Sprintf("%v", this.ContactInfo), "ContactInfo", "ContactInfo", 1) + `,`,
		`DefaultFormatters:` + strings.Replace(fmt.Sprintf("%v", this.DefaultFormatters), "MessagePayloadFormatters", "MessagePayloadFormatters", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Applications) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Applications{`,
		`Applications:` + strings.Replace(fmt.Sprintf("%v", this.Applications), "Application", "Application", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetApplicationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetApplicationRequest{`,
		`ApplicationIdentifiers:` + strings.Replace(strings.Replace(this.ApplicationIdentifiers.String(), "ApplicationIdentifiers", "ApplicationIdentifiers", 1), `&`, ``, 1) + `,`,
		`FieldMask:` + strings.Replace(strings.Replace(this.FieldMask.String(), "FieldMask", "types.FieldMask", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListApplicationsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListApplicationsRequest{`,
		`Collaborator:` + strings.Replace(fmt.Sprintf("%v", this.Collaborator), "OrganizationOrUserIdentifiers", "OrganizationOrUserIdentifiers", 1) + `,`,
		`FieldMask:` + strings.Replace(strings.Replace(this.FieldMask.String(), "FieldMask", "types.FieldMask", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateApplicationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateApplicationRequest{`,
		`Application:` + strings.Replace(strings.Replace(this.Application.String(), "Application", "Application", 1), `&`, ``, 1) + `,`,
		`OrganizationIDs:` + strings.Replace(fmt.Sprintf("%v", this.OrganizationIDs), "OrganizationIdentifiers", "OrganizationIdentifiers", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateApplicationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateApplicationRequest{`,
		`Application:` + strings.Replace(strings.Replace(this.Application.String(), "Application", "Application", 1), `&`, ``, 1) + `,`,
		`FieldMask:` + strings.Replace(strings.Replace(this.FieldMask.String(), "FieldMask", "types.FieldMask", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetApplicationAPIKeyRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetApplicationAPIKeyRequest{`,
		`ApplicationIdentifiers:` + strings.Replace(strings.Replace(this.ApplicationIdentifiers.String(), "ApplicationIdentifiers", "ApplicationIdentifiers", 1), `&`, ``, 1) + `,`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Rights:` + fmt.Sprintf("%v", this.Rights) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemoveApplicationAPIKeyRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveApplicationAPIKeyRequest{`,
		`ApplicationIdentifiers:` + strings.Replace(strings.Replace(this.ApplicationIdentifiers.String(), "ApplicationIdentifiers", "ApplicationIdentifiers", 1), `&`, ``, 1) + `,`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetApplicationCollaboratorRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetApplicationCollaboratorRequest{`,
		`ApplicationIdentifiers:` + strings.Replace(strings.Replace(this.ApplicationIdentifiers.String(), "ApplicationIdentifiers", "ApplicationIdentifiers", 1), `&`, ``, 1) + `,`,
		`Collaborator:` + strings.Replace(strings.Replace(this.Collaborator.String(), "Collaborator", "Collaborator", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringApplication(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Application) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Application: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Application: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApplication
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApplication
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApplication
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApplication
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApplication
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApplication(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApplication
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attributes[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactInfo = append(m.ContactInfo, &ContactInfo{})
			if err := m.ContactInfo[len(m.ContactInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultFormatters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultFormatters == nil {
				m.DefaultFormatters = &MessagePayloadFormatters{}
			}
			if err := m.DefaultFormatters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Applications) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Applications: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Applications: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Applications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Applications = append(m.Applications, &Application{})
			if err := m.Applications[len(m.Applications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetApplicationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetApplicationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetApplicationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListApplicationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListApplicationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListApplicationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collaborator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Collaborator == nil {
				m.Collaborator = &OrganizationOrUserIdentifiers{}
			}
			if err := m.Collaborator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateApplicationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateApplicationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateApplicationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Application", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Application.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationIDs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrganizationIDs == nil {
				m.OrganizationIDs = &OrganizationIdentifiers{}
			}
			if err := m.OrganizationIDs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateApplicationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateApplicationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateApplicationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Application", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Application.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetApplicationAPIKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetApplicationAPIKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetApplicationAPIKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v Right
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApplication
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Right(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rights = append(m.Rights, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApplication
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApplication
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v Right
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApplication
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Right(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rights = append(m.Rights, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rights", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApplication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveApplicationAPIKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveApplicationAPIKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveApplicationAPIKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetApplicationCollaboratorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetApplicationCollaboratorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetApplicationCollaboratorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collaborator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Collaborator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApplication(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApplication
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApplication
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApplication(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApplication = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApplication   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("lorawan-stack/api/application.proto", fileDescriptor_application_f42dd1597e78dcfb)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/application.proto", fileDescriptor_application_f42dd1597e78dcfb)
}

var fileDescriptor_application_f42dd1597e78dcfb = []byte{
	// 914 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0x41, 0x6c, 0x1b, 0x45,
	0x14, 0xdd, 0xb1, 0xd3, 0x50, 0x8f, 0xa3, 0xa4, 0x2c, 0x14, 0x56, 0x69, 0x19, 0x1b, 0x83, 0xc0,
	0x12, 0x64, 0x2d, 0xa5, 0x17, 0x84, 0x04, 0xc8, 0x4e, 0x49, 0x15, 0x95, 0x2a, 0x65, 0xa1, 0x42,
	0x70, 0xb1, 0xc6, 0xde, 0xf1, 0x66, 0xe4, 0xdd, 0x9d, 0x65, 0x66, 0x9c, 0x2a, 0x9c, 0x7a, 0xec,
	0xb1, 0x12, 0x17, 0x8e, 0x08, 0x71, 0xe8, 0x05, 0xa9, 0x12, 0x12, 0xea, 0x8d, 0x9e, 0x50, 0x0e,
	0x1c, 0x72, 0xec, 0x29, 0xd4, 0xbb, 0x97, 0x1e, 0x7b, 0xec, 0x11, 0xed, 0xec, 0xda, 0x9e, 0xb5,
	0x43, 0x24, 0x14, 0x51, 0x71, 0x9b, 0x99, 0xff, 0xfe, 0xf3, 0xfb, 0xef, 0xff, 0x6f, 0x1b, 0xbe,
	0xe5, 0x33, 0x8e, 0x6f, 0xe3, 0x70, 0x43, 0x48, 0xdc, 0x1f, 0xb6, 0x70, 0x44, 0x5b, 0x38, 0x8a,
	0x7c, 0xda, 0xc7, 0x92, 0xb2, 0xd0, 0x8e, 0x38, 0x93, 0xcc, 0x5c, 0x95, 0x32, 0xb4, 0x73, 0xa0,
	0xbd, 0x7f, 0x65, 0x7d, 0xc3, 0xa3, 0x72, 0x6f, 0xd4, 0xb3, 0xfb, 0x2c, 0x68, 0x79, 0xcc, 0x63,
	0x2d, 0x05, 0xeb, 0x8d, 0x06, 0xea, 0xa6, 0x2e, 0xea, 0x94, 0xa5, 0xaf, 0x5f, 0xf6, 0x18, 0xf3,
	0x7c, 0x92, 0x91, 0x87, 0x21, 0x93, 0x8a, 0x5b, 0xe4, 0xd1, 0x7a, 0x1e, 0x9d, 0x72, 0x0c, 0x28,
	0xf1, 0xdd, 0x6e, 0x80, 0xc5, 0x30, 0x47, 0xd4, 0xe6, 0x11, 0x92, 0x06, 0x44, 0x48, 0x1c, 0x44,
	0x39, 0xe0, 0xed, 0xc5, 0x22, 0xfa, 0x2c, 0x94, 0xb8, 0x2f, 0xbb, 0x34, 0x1c, 0x4c, 0x64, 0xbc,
	0xb1, 0x88, 0x22, 0xe1, 0x28, 0x98, 0xe8, 0x38, 0xc1, 0x09, 0xea, 0x92, 0x50, 0xd2, 0x01, 0x25,
	0x7c, 0x2a, 0x76, 0x11, 0x14, 0x10, 0x21, 0xb0, 0x47, 0x26, 0x08, 0xb4, 0x88, 0xe0, 0xd4, 0xdb,
	0x93, 0x79, 0xbc, 0xf1, 0xdb, 0x12, 0xac, 0xb6, 0x67, 0x0e, 0x9b, 0x1d, 0x58, 0xa6, 0xae, 0xb0,
	0x40, 0x1d, 0x34, 0xab, 0x9b, 0xef, 0xd8, 0x45, 0xa7, 0x6d, 0x0d, 0xb9, 0x33, 0x13, 0xd3, 0x39,
	0x7f, 0x78, 0x5c, 0x33, 0x8e, 0x8e, 0x6b, 0xc0, 0x49, 0x93, 0xcd, 0x2d, 0x08, 0xfb, 0x9c, 0x60,
	0x49, 0xdc, 0x2e, 0x96, 0x56, 0x49, 0x51, 0xad, 0xdb, 0x99, 0x6b, 0xf6, 0xc4, 0x35, 0xfb, 0xcb,
	0x89, 0x6b, 0x59, 0xfa, 0xbd, 0xbf, 0x6a, 0xc0, 0xa9, 0xe4, 0x79, 0x6d, 0x99, 0x92, 0x8c, 0x22,
	0x77, 0x42, 0x52, 0xfe, 0x37, 0x24, 0x79, 0x5e, 0x5b, 0x9a, 0x26, 0x5c, 0x0a, 0x71, 0x40, 0xac,
	0xa5, 0x3a, 0x68, 0x56, 0x1c, 0x75, 0x36, 0xeb, 0xb0, 0xea, 0x12, 0xd1, 0xe7, 0x34, 0x4a, 0xcb,
	0xb0, 0xce, 0xa9, 0x90, 0xfe, 0x64, 0x5e, 0x87, 0x10, 0x4b, 0xc9, 0x69, 0x6f, 0x24, 0x89, 0xb0,
	0x96, 0xeb, 0xe5, 0x66, 0x75, 0xf3, 0xbd, 0x53, 0xac, 0xb0, 0xdb, 0x53, 0xf4, 0xa7, 0xa1, 0xe4,
	0x07, 0x8e, 0x96, 0x6e, 0x7e, 0x0c, 0x57, 0xf4, 0xe6, 0x5b, 0x2f, 0x29, 0xba, 0x4b, 0xf3, 0x74,
	0x5b, 0x19, 0x66, 0x27, 0x1c, 0x30, 0xa7, 0xda, 0x9f, 0x5d, 0xcc, 0xaf, 0xa0, 0xe9, 0x92, 0x01,
	0x1e, 0xf9, 0xb2, 0x3b, 0x60, 0x3c, 0xc0, 0x52, 0x12, 0x2e, 0xac, 0xf3, 0xca, 0x8f, 0xe6, 0x3c,
	0xcb, 0x8d, 0xac, 0xf9, 0x37, 0xf1, 0x81, 0xcf, 0xb0, 0xbb, 0x3d, 0xc5, 0x3b, 0x2f, 0xe7, 0x1c,
	0xb3, 0xa7, 0xf5, 0x8f, 0xe0, 0xda, 0x9c, 0x6e, 0xf3, 0x02, 0x2c, 0x0f, 0xc9, 0x81, 0x6a, 0x7e,
	0xc5, 0x49, 0x8f, 0xe6, 0xab, 0xf0, 0xdc, 0x3e, 0xf6, 0x47, 0x44, 0x75, 0xb1, 0xe2, 0x64, 0x97,
	0x0f, 0x4b, 0x1f, 0x80, 0xc6, 0x2e, 0x5c, 0xd1, 0x2c, 0x10, 0xe6, 0x27, 0x70, 0x45, 0xdb, 0xd4,
	0x74, 0x82, 0x4e, 0xac, 0x53, 0xcb, 0x71, 0x0a, 0x09, 0x8d, 0x5f, 0x01, 0xbc, 0x78, 0x8d, 0x48,
	0x1d, 0x40, 0xbe, 0x1d, 0x11, 0x21, 0xcd, 0xaf, 0xe1, 0x9a, 0x86, 0xec, 0x9e, 0x65, 0x3e, 0x57,
	0xb1, 0x8e, 0x48, 0x55, 0xc3, 0xd9, 0x7e, 0xff, 0xe3, 0xa8, 0x6e, 0xa7, 0x90, 0x1b, 0x58, 0x0c,
	0x3b, 0x4b, 0x29, 0x93, 0x53, 0x19, 0x4c, 0x1e, 0x1a, 0xbf, 0x00, 0xf8, 0xfa, 0x67, 0x54, 0xe8,
	0xb2, 0xc5, 0x44, 0xf7, 0xe7, 0x69, 0xeb, 0x7d, 0x1f, 0xf7, 0x18, 0xc7, 0x92, 0xf1, 0x5c, 0xf4,
	0xc6, 0xbc, 0xe8, 0x5d, 0xee, 0xe1, 0x90, 0x7e, 0xa7, 0x72, 0x77, 0xf9, 0x2d, 0x41, 0xb8, 0xa6,
	0xdd, 0x29, 0x50, 0x9c, 0x5d, 0xef, 0x9f, 0x00, 0x5a, 0x5b, 0x6a, 0xc9, 0x4e, 0x30, 0xfa, 0x1a,
	0xac, 0x6a, 0xfe, 0xe4, 0x7a, 0x4f, 0x6b, 0xa1, 0xe6, 0xac, 0x9e, 0x69, 0x7a, 0xf0, 0x02, 0xd3,
	0xaa, 0x52, 0x2d, 0xcb, 0xc4, 0xbe, 0x7b, 0x5a, 0xf5, 0x7a, 0xcf, 0x5e, 0x89, 0x8f, 0x6b, 0x6b,
	0x85, 0xe0, 0x55, 0xe1, 0xac, 0xb1, 0x02, 0x5a, 0x34, 0x7e, 0x06, 0xd0, 0xba, 0xa5, 0xd6, 0xfd,
	0xbf, 0x2c, 0xe7, 0xcc, 0xae, 0xff, 0x0e, 0xe0, 0xa5, 0x2f, 0x0a, 0xb3, 0xdd, 0xbe, 0xb9, 0x73,
	0x9d, 0x1c, 0xbc, 0x80, 0x09, 0x7f, 0x0d, 0x96, 0xa8, 0x9b, 0xad, 0x6f, 0x67, 0x39, 0x3e, 0xae,
	0x95, 0x76, 0xae, 0x3a, 0x25, 0xea, 0x9a, 0x1b, 0x70, 0x39, 0xfb, 0x21, 0xb0, 0xca, 0xf5, 0x72,
	0x73, 0x75, 0xf3, 0xe2, 0xfc, 0x27, 0x39, 0x69, 0xd4, 0xc9, 0x41, 0x8d, 0xef, 0x01, 0x44, 0x0e,
	0x09, 0xd8, 0x3e, 0xf9, 0x1f, 0x15, 0xd1, 0xf8, 0x03, 0xc0, 0x37, 0x8b, 0xbe, 0x6e, 0x69, 0xdb,
	0xf2, 0x02, 0x84, 0x6d, 0xcf, 0xad, 0x78, 0x36, 0x1b, 0x97, 0x17, 0xbf, 0xdd, 0x67, 0x98, 0x7c,
	0x3a, 0x0a, 0x79, 0x9d, 0x9f, 0xc0, 0xe1, 0x18, 0x81, 0xa3, 0x31, 0x02, 0x8f, 0xc7, 0xc8, 0x78,
	0x32, 0x46, 0xc6, 0xd3, 0x31, 0x32, 0x9e, 0x8d, 0x91, 0xf1, 0x7c, 0x8c, 0xc0, 0x9d, 0x18, 0x81,
	0xbb, 0x31, 0x32, 0xee, 0xc7, 0x08, 0x3c, 0x88, 0x91, 0xf1, 0x30, 0x46, 0xc6, 0xa3, 0x18, 0x19,
	0x87, 0x31, 0x02, 0x47, 0x31, 0x02, 0x8f, 0x63, 0x64, 0x3c, 0x89, 0x11, 0x78, 0x1a, 0x23, 0xe3,
	0x59, 0x8c, 0xc0, 0xf3, 0x18, 0x19, 0x77, 0x12, 0x64, 0xdc, 0x4d, 0x10, 0xb8, 0x97, 0x20, 0xe3,
	0x87, 0x04, 0x81, 0x1f, 0x13, 0x64, 0xdc, 0x4f, 0x90, 0xf1, 0x20, 0x41, 0xe0, 0x61, 0x82, 0xc0,
	0xa3, 0x04, 0x81, 0x6f, 0xde, 0xf7, 0x98, 0x2d, 0xf7, 0x88, 0xdc, 0xa3, 0xa1, 0x27, 0xec, 0x90,
	0xc8, 0xdb, 0x8c, 0x0f, 0x5b, 0xc5, 0xbf, 0x0c, 0xd1, 0xd0, 0x6b, 0x49, 0x19, 0x46, 0xbd, 0xde,
	0xb2, 0x1a, 0xf5, 0x2b, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x81, 0x60, 0x38, 0x0b, 0xa5, 0x09,
	0x00, 0x00,
}
