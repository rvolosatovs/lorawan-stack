// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import fmt "fmt"

var _ConcentratorConfigFieldPaths = [...]string{
	"channels",
	"clock_source",
	"fsk_channel",
	"fsk_channel.bandwidth",
	"fsk_channel.bit_rate",
	"fsk_channel.channel",
	"fsk_channel.channel.frequency",
	"fsk_channel.channel.radio",
	"lbt",
	"lbt.rssi_offset",
	"lbt.rssi_target",
	"lbt.scan_time",
	"lora_standard_channel",
	"lora_standard_channel.bandwidth",
	"lora_standard_channel.channel",
	"lora_standard_channel.channel.frequency",
	"lora_standard_channel.channel.radio",
	"lora_standard_channel.spreading_factor",
	"ping_slot",
	"ping_slot.frequency",
	"ping_slot.radio",
	"radios",
}

func (*ConcentratorConfig) FieldMaskPaths() []string {
	ret := make([]string, len(_ConcentratorConfigFieldPaths))
	copy(ret, _ConcentratorConfigFieldPaths[:])
	return ret
}

func (dst *ConcentratorConfig) SetFields(src *ConcentratorConfig, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "channels":
			dst.Channels = src.Channels
		case "clock_source":
			dst.ClockSource = src.ClockSource
		case "fsk_channel":
			dst.FSKChannel = src.FSKChannel
		case "fsk_channel.bandwidth":
			if dst.FSKChannel == nil {
				dst.FSKChannel = &ConcentratorConfig_FSKChannel{}
			}
			dst.FSKChannel.SetFields(src.FSKChannel, _pathsWithoutPrefix("fsk_channel", paths)...)
		case "fsk_channel.bit_rate":
			if dst.FSKChannel == nil {
				dst.FSKChannel = &ConcentratorConfig_FSKChannel{}
			}
			dst.FSKChannel.SetFields(src.FSKChannel, _pathsWithoutPrefix("fsk_channel", paths)...)
		case "fsk_channel.channel":
			if dst.FSKChannel == nil {
				dst.FSKChannel = &ConcentratorConfig_FSKChannel{}
			}
			dst.FSKChannel.SetFields(src.FSKChannel, _pathsWithoutPrefix("fsk_channel", paths)...)
		case "fsk_channel.channel.frequency":
			if dst.FSKChannel == nil {
				dst.FSKChannel = &ConcentratorConfig_FSKChannel{}
			}
			dst.FSKChannel.SetFields(src.FSKChannel, _pathsWithoutPrefix("fsk_channel", paths)...)
		case "fsk_channel.channel.radio":
			if dst.FSKChannel == nil {
				dst.FSKChannel = &ConcentratorConfig_FSKChannel{}
			}
			dst.FSKChannel.SetFields(src.FSKChannel, _pathsWithoutPrefix("fsk_channel", paths)...)
		case "lbt":
			dst.LBT = src.LBT
		case "lbt.rssi_offset":
			if dst.LBT == nil {
				dst.LBT = &ConcentratorConfig_LBTConfiguration{}
			}
			dst.LBT.SetFields(src.LBT, _pathsWithoutPrefix("lbt", paths)...)
		case "lbt.rssi_target":
			if dst.LBT == nil {
				dst.LBT = &ConcentratorConfig_LBTConfiguration{}
			}
			dst.LBT.SetFields(src.LBT, _pathsWithoutPrefix("lbt", paths)...)
		case "lbt.scan_time":
			if dst.LBT == nil {
				dst.LBT = &ConcentratorConfig_LBTConfiguration{}
			}
			dst.LBT.SetFields(src.LBT, _pathsWithoutPrefix("lbt", paths)...)
		case "lora_standard_channel":
			dst.LoRaStandardChannel = src.LoRaStandardChannel
		case "lora_standard_channel.bandwidth":
			if dst.LoRaStandardChannel == nil {
				dst.LoRaStandardChannel = &ConcentratorConfig_LoRaStandardChannel{}
			}
			dst.LoRaStandardChannel.SetFields(src.LoRaStandardChannel, _pathsWithoutPrefix("lora_standard_channel", paths)...)
		case "lora_standard_channel.channel":
			if dst.LoRaStandardChannel == nil {
				dst.LoRaStandardChannel = &ConcentratorConfig_LoRaStandardChannel{}
			}
			dst.LoRaStandardChannel.SetFields(src.LoRaStandardChannel, _pathsWithoutPrefix("lora_standard_channel", paths)...)
		case "lora_standard_channel.channel.frequency":
			if dst.LoRaStandardChannel == nil {
				dst.LoRaStandardChannel = &ConcentratorConfig_LoRaStandardChannel{}
			}
			dst.LoRaStandardChannel.SetFields(src.LoRaStandardChannel, _pathsWithoutPrefix("lora_standard_channel", paths)...)
		case "lora_standard_channel.channel.radio":
			if dst.LoRaStandardChannel == nil {
				dst.LoRaStandardChannel = &ConcentratorConfig_LoRaStandardChannel{}
			}
			dst.LoRaStandardChannel.SetFields(src.LoRaStandardChannel, _pathsWithoutPrefix("lora_standard_channel", paths)...)
		case "lora_standard_channel.spreading_factor":
			if dst.LoRaStandardChannel == nil {
				dst.LoRaStandardChannel = &ConcentratorConfig_LoRaStandardChannel{}
			}
			dst.LoRaStandardChannel.SetFields(src.LoRaStandardChannel, _pathsWithoutPrefix("lora_standard_channel", paths)...)
		case "ping_slot":
			dst.PingSlot = src.PingSlot
		case "ping_slot.frequency":
			if dst.PingSlot == nil {
				dst.PingSlot = &ConcentratorConfig_Channel{}
			}
			dst.PingSlot.SetFields(src.PingSlot, _pathsWithoutPrefix("ping_slot", paths)...)
		case "ping_slot.radio":
			if dst.PingSlot == nil {
				dst.PingSlot = &ConcentratorConfig_Channel{}
			}
			dst.PingSlot.SetFields(src.PingSlot, _pathsWithoutPrefix("ping_slot", paths)...)
		case "radios":
			dst.Radios = src.Radios
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _ConcentratorConfig_ChannelFieldPaths = [...]string{
	"frequency",
	"radio",
}

func (*ConcentratorConfig_Channel) FieldMaskPaths() []string {
	ret := make([]string, len(_ConcentratorConfig_ChannelFieldPaths))
	copy(ret, _ConcentratorConfig_ChannelFieldPaths[:])
	return ret
}

func (dst *ConcentratorConfig_Channel) SetFields(src *ConcentratorConfig_Channel, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "frequency":
			dst.Frequency = src.Frequency
		case "radio":
			dst.Radio = src.Radio
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _ConcentratorConfig_LoRaStandardChannelFieldPaths = [...]string{
	"bandwidth",
	"channel",
	"channel.frequency",
	"channel.radio",
	"spreading_factor",
}

func (*ConcentratorConfig_LoRaStandardChannel) FieldMaskPaths() []string {
	ret := make([]string, len(_ConcentratorConfig_LoRaStandardChannelFieldPaths))
	copy(ret, _ConcentratorConfig_LoRaStandardChannelFieldPaths[:])
	return ret
}

func (dst *ConcentratorConfig_LoRaStandardChannel) SetFields(src *ConcentratorConfig_LoRaStandardChannel, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "bandwidth":
			dst.Bandwidth = src.Bandwidth
		case "channel":
			dst.ConcentratorConfig_Channel = src.ConcentratorConfig_Channel
		case "channel.frequency":
			dst.ConcentratorConfig_Channel.SetFields(&src.ConcentratorConfig_Channel, _pathsWithoutPrefix("channel", paths)...)
		case "channel.radio":
			dst.ConcentratorConfig_Channel.SetFields(&src.ConcentratorConfig_Channel, _pathsWithoutPrefix("channel", paths)...)
		case "spreading_factor":
			dst.SpreadingFactor = src.SpreadingFactor
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _ConcentratorConfig_FSKChannelFieldPaths = [...]string{
	"bandwidth",
	"bit_rate",
	"channel",
	"channel.frequency",
	"channel.radio",
}

func (*ConcentratorConfig_FSKChannel) FieldMaskPaths() []string {
	ret := make([]string, len(_ConcentratorConfig_FSKChannelFieldPaths))
	copy(ret, _ConcentratorConfig_FSKChannelFieldPaths[:])
	return ret
}

func (dst *ConcentratorConfig_FSKChannel) SetFields(src *ConcentratorConfig_FSKChannel, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "bandwidth":
			dst.Bandwidth = src.Bandwidth
		case "bit_rate":
			dst.BitRate = src.BitRate
		case "channel":
			dst.ConcentratorConfig_Channel = src.ConcentratorConfig_Channel
		case "channel.frequency":
			dst.ConcentratorConfig_Channel.SetFields(&src.ConcentratorConfig_Channel, _pathsWithoutPrefix("channel", paths)...)
		case "channel.radio":
			dst.ConcentratorConfig_Channel.SetFields(&src.ConcentratorConfig_Channel, _pathsWithoutPrefix("channel", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _ConcentratorConfig_LBTConfigurationFieldPaths = [...]string{
	"rssi_offset",
	"rssi_target",
	"scan_time",
}

func (*ConcentratorConfig_LBTConfiguration) FieldMaskPaths() []string {
	ret := make([]string, len(_ConcentratorConfig_LBTConfigurationFieldPaths))
	copy(ret, _ConcentratorConfig_LBTConfigurationFieldPaths[:])
	return ret
}

func (dst *ConcentratorConfig_LBTConfiguration) SetFields(src *ConcentratorConfig_LBTConfiguration, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "rssi_offset":
			dst.RSSIOffset = src.RSSIOffset
		case "rssi_target":
			dst.RSSITarget = src.RSSITarget
		case "scan_time":
			dst.ScanTime = src.ScanTime
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}
