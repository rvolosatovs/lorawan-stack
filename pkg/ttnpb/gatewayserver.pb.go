// Code generated by protoc-gen-gogo.
// source: github.com/TheThingsNetwork/ttn/api/gatewayserver.proto
// DO NOT EDIT!

package ttnpb

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import google_protobuf2 "github.com/gogo/protobuf/types"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// GatewayUp may contain zero or more uplink messages and/or a status message for the gateway.
type GatewayUp struct {
	UplinkMessage []*UplinkMessage `protobuf:"bytes,1,rep,name=uplink_message,json=uplinkMessage" json:"uplink_message,omitempty"`
	GatewayStatus *GatewayStatus   `protobuf:"bytes,2,opt,name=gateway_status,json=gatewayStatus" json:"gateway_status,omitempty"`
}

func (m *GatewayUp) Reset()                    { *m = GatewayUp{} }
func (m *GatewayUp) String() string            { return proto.CompactTextString(m) }
func (*GatewayUp) ProtoMessage()               {}
func (*GatewayUp) Descriptor() ([]byte, []int) { return fileDescriptorGatewayserver, []int{0} }

func (m *GatewayUp) GetUplinkMessage() []*UplinkMessage {
	if m != nil {
		return m.UplinkMessage
	}
	return nil
}

func (m *GatewayUp) GetGatewayStatus() *GatewayStatus {
	if m != nil {
		return m.GatewayStatus
	}
	return nil
}

// GatewayDown contains downlink messages for the gateway
type GatewayDown struct {
	DownlinkMessage *DownlinkMessage `protobuf:"bytes,1,opt,name=downlink_message,json=downlinkMessage" json:"downlink_message,omitempty"`
}

func (m *GatewayDown) Reset()                    { *m = GatewayDown{} }
func (m *GatewayDown) String() string            { return proto.CompactTextString(m) }
func (*GatewayDown) ProtoMessage()               {}
func (*GatewayDown) Descriptor() ([]byte, []int) { return fileDescriptorGatewayserver, []int{1} }

func (m *GatewayDown) GetDownlinkMessage() *DownlinkMessage {
	if m != nil {
		return m.DownlinkMessage
	}
	return nil
}

// FrequencyPlan contains the frequency plan for the gateway
type FrequencyPlan struct {
	BandID              string                          `protobuf:"bytes,1,opt,name=band_id,json=bandId,proto3" json:"band_id,omitempty" yaml:"band-id"`
	Channels            []*FrequencyPlan_Channel        `protobuf:"bytes,2,rep,name=channels" json:"channels,omitempty" yaml:"channels"`
	LoraStandardChannel *FrequencyPlan_Channel          `protobuf:"bytes,3,opt,name=lora_standard_channel,json=loraStandardChannel" json:"lora_standard_channel,omitempty" yaml:"lora-std-channel,omitempty"`
	FSKChannel          *FrequencyPlan_Channel          `protobuf:"bytes,4,opt,name=fsk_channel,json=fskChannel" json:"fsk_channel,omitempty" yaml:"fsk-channel,omitempty"`
	LBT                 *FrequencyPlan_LBTConfiguration `protobuf:"bytes,5,opt,name=lbt" json:"lbt,omitempty" yaml:"lbt,omitempty"`
}

func (m *FrequencyPlan) Reset()                    { *m = FrequencyPlan{} }
func (m *FrequencyPlan) String() string            { return proto.CompactTextString(m) }
func (*FrequencyPlan) ProtoMessage()               {}
func (*FrequencyPlan) Descriptor() ([]byte, []int) { return fileDescriptorGatewayserver, []int{2} }

func (m *FrequencyPlan) GetBandID() string {
	if m != nil {
		return m.BandID
	}
	return ""
}

func (m *FrequencyPlan) GetChannels() []*FrequencyPlan_Channel {
	if m != nil {
		return m.Channels
	}
	return nil
}

func (m *FrequencyPlan) GetLoraStandardChannel() *FrequencyPlan_Channel {
	if m != nil {
		return m.LoraStandardChannel
	}
	return nil
}

func (m *FrequencyPlan) GetFSKChannel() *FrequencyPlan_Channel {
	if m != nil {
		return m.FSKChannel
	}
	return nil
}

func (m *FrequencyPlan) GetLBT() *FrequencyPlan_LBTConfiguration {
	if m != nil {
		return m.LBT
	}
	return nil
}

type FrequencyPlan_Channel struct {
	Frequency uint32                               `protobuf:"varint,1,opt,name=frequency,proto3" json:"frequency,omitempty" yaml:"frequency"`
	DataRate  *FrequencyPlan_Channel_ForceDataRate `protobuf:"bytes,2,opt,name=data_rate,json=dataRate" json:"data_rate,omitempty" yaml:"data-rate,omitempty"`
}

func (m *FrequencyPlan_Channel) Reset()         { *m = FrequencyPlan_Channel{} }
func (m *FrequencyPlan_Channel) String() string { return proto.CompactTextString(m) }
func (*FrequencyPlan_Channel) ProtoMessage()    {}
func (*FrequencyPlan_Channel) Descriptor() ([]byte, []int) {
	return fileDescriptorGatewayserver, []int{2, 0}
}

func (m *FrequencyPlan_Channel) GetFrequency() uint32 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *FrequencyPlan_Channel) GetDataRate() *FrequencyPlan_Channel_ForceDataRate {
	if m != nil {
		return m.DataRate
	}
	return nil
}

type FrequencyPlan_Channel_ForceDataRate struct {
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty" yaml:"index,omitempty"`
}

func (m *FrequencyPlan_Channel_ForceDataRate) Reset()         { *m = FrequencyPlan_Channel_ForceDataRate{} }
func (m *FrequencyPlan_Channel_ForceDataRate) String() string { return proto.CompactTextString(m) }
func (*FrequencyPlan_Channel_ForceDataRate) ProtoMessage()    {}
func (*FrequencyPlan_Channel_ForceDataRate) Descriptor() ([]byte, []int) {
	return fileDescriptorGatewayserver, []int{2, 0, 0}
}

func (m *FrequencyPlan_Channel_ForceDataRate) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type FrequencyPlan_LBTConfiguration struct {
	RSSITarget float32 `protobuf:"fixed32,1,opt,name=rssi_target,json=rssiTarget,proto3" json:"rssi_target,omitempty" yaml:"rssi-target"`
	// RSSIOffset describes the LBT config-specific RSSI offset
	RSSIOffset float32 `protobuf:"fixed32,2,opt,name=rssi_offset,json=rssiOffset,proto3" json:"rssi_offset,omitempty" yaml:"rssi-offset"`
	ScanTime   int32   `protobuf:"varint,3,opt,name=scan_time,json=scanTime,proto3" json:"scan_time,omitempty" yaml:"scan-time"`
}

func (m *FrequencyPlan_LBTConfiguration) Reset()         { *m = FrequencyPlan_LBTConfiguration{} }
func (m *FrequencyPlan_LBTConfiguration) String() string { return proto.CompactTextString(m) }
func (*FrequencyPlan_LBTConfiguration) ProtoMessage()    {}
func (*FrequencyPlan_LBTConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptorGatewayserver, []int{2, 1}
}

func (m *FrequencyPlan_LBTConfiguration) GetRSSITarget() float32 {
	if m != nil {
		return m.RSSITarget
	}
	return 0
}

func (m *FrequencyPlan_LBTConfiguration) GetRSSIOffset() float32 {
	if m != nil {
		return m.RSSIOffset
	}
	return 0
}

func (m *FrequencyPlan_LBTConfiguration) GetScanTime() int32 {
	if m != nil {
		return m.ScanTime
	}
	return 0
}

type FrequencyPlanRequest struct {
	FrequencyPlanID string `protobuf:"bytes,1,opt,name=frequency_plan_id,json=frequencyPlanId,proto3" json:"frequency_plan_id,omitempty"`
}

func (m *FrequencyPlanRequest) Reset()         { *m = FrequencyPlanRequest{} }
func (m *FrequencyPlanRequest) String() string { return proto.CompactTextString(m) }
func (*FrequencyPlanRequest) ProtoMessage()    {}
func (*FrequencyPlanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorGatewayserver, []int{3}
}

func (m *FrequencyPlanRequest) GetFrequencyPlanID() string {
	if m != nil {
		return m.FrequencyPlanID
	}
	return ""
}

func init() {
	proto.RegisterType((*GatewayUp)(nil), "ttn.v3.GatewayUp")
	golang_proto.RegisterType((*GatewayUp)(nil), "ttn.v3.GatewayUp")
	proto.RegisterType((*GatewayDown)(nil), "ttn.v3.GatewayDown")
	golang_proto.RegisterType((*GatewayDown)(nil), "ttn.v3.GatewayDown")
	proto.RegisterType((*FrequencyPlan)(nil), "ttn.v3.FrequencyPlan")
	golang_proto.RegisterType((*FrequencyPlan)(nil), "ttn.v3.FrequencyPlan")
	proto.RegisterType((*FrequencyPlan_Channel)(nil), "ttn.v3.FrequencyPlan.Channel")
	golang_proto.RegisterType((*FrequencyPlan_Channel)(nil), "ttn.v3.FrequencyPlan.Channel")
	proto.RegisterType((*FrequencyPlan_Channel_ForceDataRate)(nil), "ttn.v3.FrequencyPlan.Channel.ForceDataRate")
	golang_proto.RegisterType((*FrequencyPlan_Channel_ForceDataRate)(nil), "ttn.v3.FrequencyPlan.Channel.ForceDataRate")
	proto.RegisterType((*FrequencyPlan_LBTConfiguration)(nil), "ttn.v3.FrequencyPlan.LBTConfiguration")
	golang_proto.RegisterType((*FrequencyPlan_LBTConfiguration)(nil), "ttn.v3.FrequencyPlan.LBTConfiguration")
	proto.RegisterType((*FrequencyPlanRequest)(nil), "ttn.v3.FrequencyPlanRequest")
	golang_proto.RegisterType((*FrequencyPlanRequest)(nil), "ttn.v3.FrequencyPlanRequest")
}
func (this *GatewayUp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GatewayUp)
	if !ok {
		that2, ok := that.(GatewayUp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GatewayUp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GatewayUp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GatewayUp but is not nil && this == nil")
	}
	if len(this.UplinkMessage) != len(that1.UplinkMessage) {
		return fmt.Errorf("UplinkMessage this(%v) Not Equal that(%v)", len(this.UplinkMessage), len(that1.UplinkMessage))
	}
	for i := range this.UplinkMessage {
		if !this.UplinkMessage[i].Equal(that1.UplinkMessage[i]) {
			return fmt.Errorf("UplinkMessage this[%v](%v) Not Equal that[%v](%v)", i, this.UplinkMessage[i], i, that1.UplinkMessage[i])
		}
	}
	if !this.GatewayStatus.Equal(that1.GatewayStatus) {
		return fmt.Errorf("GatewayStatus this(%v) Not Equal that(%v)", this.GatewayStatus, that1.GatewayStatus)
	}
	return nil
}
func (this *GatewayUp) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GatewayUp)
	if !ok {
		that2, ok := that.(GatewayUp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.UplinkMessage) != len(that1.UplinkMessage) {
		return false
	}
	for i := range this.UplinkMessage {
		if !this.UplinkMessage[i].Equal(that1.UplinkMessage[i]) {
			return false
		}
	}
	if !this.GatewayStatus.Equal(that1.GatewayStatus) {
		return false
	}
	return true
}
func (this *GatewayDown) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GatewayDown)
	if !ok {
		that2, ok := that.(GatewayDown)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GatewayDown")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GatewayDown but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GatewayDown but is not nil && this == nil")
	}
	if !this.DownlinkMessage.Equal(that1.DownlinkMessage) {
		return fmt.Errorf("DownlinkMessage this(%v) Not Equal that(%v)", this.DownlinkMessage, that1.DownlinkMessage)
	}
	return nil
}
func (this *GatewayDown) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GatewayDown)
	if !ok {
		that2, ok := that.(GatewayDown)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.DownlinkMessage.Equal(that1.DownlinkMessage) {
		return false
	}
	return true
}
func (this *FrequencyPlan) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FrequencyPlan)
	if !ok {
		that2, ok := that.(FrequencyPlan)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FrequencyPlan")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FrequencyPlan but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FrequencyPlan but is not nil && this == nil")
	}
	if this.BandID != that1.BandID {
		return fmt.Errorf("BandID this(%v) Not Equal that(%v)", this.BandID, that1.BandID)
	}
	if len(this.Channels) != len(that1.Channels) {
		return fmt.Errorf("Channels this(%v) Not Equal that(%v)", len(this.Channels), len(that1.Channels))
	}
	for i := range this.Channels {
		if !this.Channels[i].Equal(that1.Channels[i]) {
			return fmt.Errorf("Channels this[%v](%v) Not Equal that[%v](%v)", i, this.Channels[i], i, that1.Channels[i])
		}
	}
	if !this.LoraStandardChannel.Equal(that1.LoraStandardChannel) {
		return fmt.Errorf("LoraStandardChannel this(%v) Not Equal that(%v)", this.LoraStandardChannel, that1.LoraStandardChannel)
	}
	if !this.FSKChannel.Equal(that1.FSKChannel) {
		return fmt.Errorf("FSKChannel this(%v) Not Equal that(%v)", this.FSKChannel, that1.FSKChannel)
	}
	if !this.LBT.Equal(that1.LBT) {
		return fmt.Errorf("LBT this(%v) Not Equal that(%v)", this.LBT, that1.LBT)
	}
	return nil
}
func (this *FrequencyPlan) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*FrequencyPlan)
	if !ok {
		that2, ok := that.(FrequencyPlan)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.BandID != that1.BandID {
		return false
	}
	if len(this.Channels) != len(that1.Channels) {
		return false
	}
	for i := range this.Channels {
		if !this.Channels[i].Equal(that1.Channels[i]) {
			return false
		}
	}
	if !this.LoraStandardChannel.Equal(that1.LoraStandardChannel) {
		return false
	}
	if !this.FSKChannel.Equal(that1.FSKChannel) {
		return false
	}
	if !this.LBT.Equal(that1.LBT) {
		return false
	}
	return true
}
func (this *FrequencyPlan_Channel) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FrequencyPlan_Channel)
	if !ok {
		that2, ok := that.(FrequencyPlan_Channel)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FrequencyPlan_Channel")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FrequencyPlan_Channel but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FrequencyPlan_Channel but is not nil && this == nil")
	}
	if this.Frequency != that1.Frequency {
		return fmt.Errorf("Frequency this(%v) Not Equal that(%v)", this.Frequency, that1.Frequency)
	}
	if !this.DataRate.Equal(that1.DataRate) {
		return fmt.Errorf("DataRate this(%v) Not Equal that(%v)", this.DataRate, that1.DataRate)
	}
	return nil
}
func (this *FrequencyPlan_Channel) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*FrequencyPlan_Channel)
	if !ok {
		that2, ok := that.(FrequencyPlan_Channel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Frequency != that1.Frequency {
		return false
	}
	if !this.DataRate.Equal(that1.DataRate) {
		return false
	}
	return true
}
func (this *FrequencyPlan_Channel_ForceDataRate) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FrequencyPlan_Channel_ForceDataRate)
	if !ok {
		that2, ok := that.(FrequencyPlan_Channel_ForceDataRate)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FrequencyPlan_Channel_ForceDataRate")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FrequencyPlan_Channel_ForceDataRate but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FrequencyPlan_Channel_ForceDataRate but is not nil && this == nil")
	}
	if this.Index != that1.Index {
		return fmt.Errorf("Index this(%v) Not Equal that(%v)", this.Index, that1.Index)
	}
	return nil
}
func (this *FrequencyPlan_Channel_ForceDataRate) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*FrequencyPlan_Channel_ForceDataRate)
	if !ok {
		that2, ok := that.(FrequencyPlan_Channel_ForceDataRate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	return true
}
func (this *FrequencyPlan_LBTConfiguration) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FrequencyPlan_LBTConfiguration)
	if !ok {
		that2, ok := that.(FrequencyPlan_LBTConfiguration)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FrequencyPlan_LBTConfiguration")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FrequencyPlan_LBTConfiguration but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FrequencyPlan_LBTConfiguration but is not nil && this == nil")
	}
	if this.RSSITarget != that1.RSSITarget {
		return fmt.Errorf("RSSITarget this(%v) Not Equal that(%v)", this.RSSITarget, that1.RSSITarget)
	}
	if this.RSSIOffset != that1.RSSIOffset {
		return fmt.Errorf("RSSIOffset this(%v) Not Equal that(%v)", this.RSSIOffset, that1.RSSIOffset)
	}
	if this.ScanTime != that1.ScanTime {
		return fmt.Errorf("ScanTime this(%v) Not Equal that(%v)", this.ScanTime, that1.ScanTime)
	}
	return nil
}
func (this *FrequencyPlan_LBTConfiguration) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*FrequencyPlan_LBTConfiguration)
	if !ok {
		that2, ok := that.(FrequencyPlan_LBTConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.RSSITarget != that1.RSSITarget {
		return false
	}
	if this.RSSIOffset != that1.RSSIOffset {
		return false
	}
	if this.ScanTime != that1.ScanTime {
		return false
	}
	return true
}
func (this *FrequencyPlanRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FrequencyPlanRequest)
	if !ok {
		that2, ok := that.(FrequencyPlanRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FrequencyPlanRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FrequencyPlanRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FrequencyPlanRequest but is not nil && this == nil")
	}
	if this.FrequencyPlanID != that1.FrequencyPlanID {
		return fmt.Errorf("FrequencyPlanID this(%v) Not Equal that(%v)", this.FrequencyPlanID, that1.FrequencyPlanID)
	}
	return nil
}
func (this *FrequencyPlanRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*FrequencyPlanRequest)
	if !ok {
		that2, ok := that.(FrequencyPlanRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.FrequencyPlanID != that1.FrequencyPlanID {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GtwGs service

type GtwGsClient interface {
	// Link the gateway to the gateway server. The authentication information will
	// be used to determine the gateway ID. If no authentication information is present,
	// this gateway may not be used for downlink.
	Link(ctx context.Context, opts ...grpc.CallOption) (GtwGs_LinkClient, error)
	// GetFrequencyPlan associated to the gateway. The gateway is ID'd by its authentication token.
	GetFrequencyPlan(ctx context.Context, in *FrequencyPlanRequest, opts ...grpc.CallOption) (*FrequencyPlan, error)
}

type gtwGsClient struct {
	cc *grpc.ClientConn
}

func NewGtwGsClient(cc *grpc.ClientConn) GtwGsClient {
	return &gtwGsClient{cc}
}

func (c *gtwGsClient) Link(ctx context.Context, opts ...grpc.CallOption) (GtwGs_LinkClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GtwGs_serviceDesc.Streams[0], c.cc, "/ttn.v3.GtwGs/Link", opts...)
	if err != nil {
		return nil, err
	}
	x := &gtwGsLinkClient{stream}
	return x, nil
}

type GtwGs_LinkClient interface {
	Send(*GatewayUp) error
	Recv() (*GatewayDown, error)
	grpc.ClientStream
}

type gtwGsLinkClient struct {
	grpc.ClientStream
}

func (x *gtwGsLinkClient) Send(m *GatewayUp) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gtwGsLinkClient) Recv() (*GatewayDown, error) {
	m := new(GatewayDown)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gtwGsClient) GetFrequencyPlan(ctx context.Context, in *FrequencyPlanRequest, opts ...grpc.CallOption) (*FrequencyPlan, error) {
	out := new(FrequencyPlan)
	err := grpc.Invoke(ctx, "/ttn.v3.GtwGs/GetFrequencyPlan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GtwGs service

type GtwGsServer interface {
	// Link the gateway to the gateway server. The authentication information will
	// be used to determine the gateway ID. If no authentication information is present,
	// this gateway may not be used for downlink.
	Link(GtwGs_LinkServer) error
	// GetFrequencyPlan associated to the gateway. The gateway is ID'd by its authentication token.
	GetFrequencyPlan(context.Context, *FrequencyPlanRequest) (*FrequencyPlan, error)
}

func RegisterGtwGsServer(s *grpc.Server, srv GtwGsServer) {
	s.RegisterService(&_GtwGs_serviceDesc, srv)
}

func _GtwGs_Link_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GtwGsServer).Link(&gtwGsLinkServer{stream})
}

type GtwGs_LinkServer interface {
	Send(*GatewayDown) error
	Recv() (*GatewayUp, error)
	grpc.ServerStream
}

type gtwGsLinkServer struct {
	grpc.ServerStream
}

func (x *gtwGsLinkServer) Send(m *GatewayDown) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gtwGsLinkServer) Recv() (*GatewayUp, error) {
	m := new(GatewayUp)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GtwGs_GetFrequencyPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrequencyPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GtwGsServer).GetFrequencyPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.GtwGs/GetFrequencyPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GtwGsServer).GetFrequencyPlan(ctx, req.(*FrequencyPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GtwGs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.v3.GtwGs",
	HandlerType: (*GtwGsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFrequencyPlan",
			Handler:    _GtwGs_GetFrequencyPlan_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Link",
			Handler:       _GtwGs_Link_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/TheThingsNetwork/ttn/api/gatewayserver.proto",
}

// Client API for NsGs service

type NsGsClient interface {
	// ScheduleDownlink instructs the gateway server to schedule a downlink message.
	// The gateway server may refuse if there are any conflicts in the schedule or
	// if a duty cycle prevents the gateway from transmitting.
	ScheduleDownlink(ctx context.Context, in *DownlinkMessage, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
}

type nsGsClient struct {
	cc *grpc.ClientConn
}

func NewNsGsClient(cc *grpc.ClientConn) NsGsClient {
	return &nsGsClient{cc}
}

func (c *nsGsClient) ScheduleDownlink(ctx context.Context, in *DownlinkMessage, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.NsGs/ScheduleDownlink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NsGs service

type NsGsServer interface {
	// ScheduleDownlink instructs the gateway server to schedule a downlink message.
	// The gateway server may refuse if there are any conflicts in the schedule or
	// if a duty cycle prevents the gateway from transmitting.
	ScheduleDownlink(context.Context, *DownlinkMessage) (*google_protobuf2.Empty, error)
}

func RegisterNsGsServer(s *grpc.Server, srv NsGsServer) {
	s.RegisterService(&_NsGs_serviceDesc, srv)
}

func _NsGs_ScheduleDownlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownlinkMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NsGsServer).ScheduleDownlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.NsGs/ScheduleDownlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NsGsServer).ScheduleDownlink(ctx, req.(*DownlinkMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _NsGs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.v3.NsGs",
	HandlerType: (*NsGsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScheduleDownlink",
			Handler:    _NsGs_ScheduleDownlink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/ttn/api/gatewayserver.proto",
}

// Client API for Gs service

type GsClient interface {
	GetGatewayObservations(ctx context.Context, in *GatewayIdentifier, opts ...grpc.CallOption) (*GatewayObservations, error)
}

type gsClient struct {
	cc *grpc.ClientConn
}

func NewGsClient(cc *grpc.ClientConn) GsClient {
	return &gsClient{cc}
}

func (c *gsClient) GetGatewayObservations(ctx context.Context, in *GatewayIdentifier, opts ...grpc.CallOption) (*GatewayObservations, error) {
	out := new(GatewayObservations)
	err := grpc.Invoke(ctx, "/ttn.v3.Gs/GetGatewayObservations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Gs service

type GsServer interface {
	GetGatewayObservations(context.Context, *GatewayIdentifier) (*GatewayObservations, error)
}

func RegisterGsServer(s *grpc.Server, srv GsServer) {
	s.RegisterService(&_Gs_serviceDesc, srv)
}

func _Gs_GetGatewayObservations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GsServer).GetGatewayObservations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.Gs/GetGatewayObservations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GsServer).GetGatewayObservations(ctx, req.(*GatewayIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.v3.Gs",
	HandlerType: (*GsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGatewayObservations",
			Handler:    _Gs_GetGatewayObservations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/ttn/api/gatewayserver.proto",
}

func (m *GatewayUp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayUp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UplinkMessage) > 0 {
		for _, msg := range m.UplinkMessage {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGatewayserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.GatewayStatus != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGatewayserver(dAtA, i, uint64(m.GatewayStatus.Size()))
		n1, err := m.GatewayStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *GatewayDown) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayDown) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DownlinkMessage != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGatewayserver(dAtA, i, uint64(m.DownlinkMessage.Size()))
		n2, err := m.DownlinkMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *FrequencyPlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrequencyPlan) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BandID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGatewayserver(dAtA, i, uint64(len(m.BandID)))
		i += copy(dAtA[i:], m.BandID)
	}
	if len(m.Channels) > 0 {
		for _, msg := range m.Channels {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGatewayserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.LoraStandardChannel != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGatewayserver(dAtA, i, uint64(m.LoraStandardChannel.Size()))
		n3, err := m.LoraStandardChannel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.FSKChannel != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGatewayserver(dAtA, i, uint64(m.FSKChannel.Size()))
		n4, err := m.FSKChannel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.LBT != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGatewayserver(dAtA, i, uint64(m.LBT.Size()))
		n5, err := m.LBT.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *FrequencyPlan_Channel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrequencyPlan_Channel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Frequency != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGatewayserver(dAtA, i, uint64(m.Frequency))
	}
	if m.DataRate != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGatewayserver(dAtA, i, uint64(m.DataRate.Size()))
		n6, err := m.DataRate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *FrequencyPlan_Channel_ForceDataRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrequencyPlan_Channel_ForceDataRate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGatewayserver(dAtA, i, uint64(m.Index))
	}
	return i, nil
}

func (m *FrequencyPlan_LBTConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrequencyPlan_LBTConfiguration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RSSITarget != 0 {
		dAtA[i] = 0xd
		i++
		i = encodeFixed32Gatewayserver(dAtA, i, uint32(math.Float32bits(float32(m.RSSITarget))))
	}
	if m.RSSIOffset != 0 {
		dAtA[i] = 0x15
		i++
		i = encodeFixed32Gatewayserver(dAtA, i, uint32(math.Float32bits(float32(m.RSSIOffset))))
	}
	if m.ScanTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGatewayserver(dAtA, i, uint64(m.ScanTime))
	}
	return i, nil
}

func (m *FrequencyPlanRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrequencyPlanRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FrequencyPlanID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGatewayserver(dAtA, i, uint64(len(m.FrequencyPlanID)))
		i += copy(dAtA[i:], m.FrequencyPlanID)
	}
	return i, nil
}

func encodeFixed64Gatewayserver(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Gatewayserver(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGatewayserver(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedGatewayUp(r randyGatewayserver, easy bool) *GatewayUp {
	this := &GatewayUp{}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.UplinkMessage = make([]*UplinkMessage, v1)
		for i := 0; i < v1; i++ {
			this.UplinkMessage[i] = NewPopulatedUplinkMessage(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.GatewayStatus = NewPopulatedGatewayStatus(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGatewayDown(r randyGatewayserver, easy bool) *GatewayDown {
	this := &GatewayDown{}
	if r.Intn(10) != 0 {
		this.DownlinkMessage = NewPopulatedDownlinkMessage(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFrequencyPlan(r randyGatewayserver, easy bool) *FrequencyPlan {
	this := &FrequencyPlan{}
	this.BandID = string(randStringGatewayserver(r))
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.Channels = make([]*FrequencyPlan_Channel, v2)
		for i := 0; i < v2; i++ {
			this.Channels[i] = NewPopulatedFrequencyPlan_Channel(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.LoraStandardChannel = NewPopulatedFrequencyPlan_Channel(r, easy)
	}
	if r.Intn(10) != 0 {
		this.FSKChannel = NewPopulatedFrequencyPlan_Channel(r, easy)
	}
	if r.Intn(10) != 0 {
		this.LBT = NewPopulatedFrequencyPlan_LBTConfiguration(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFrequencyPlan_Channel(r randyGatewayserver, easy bool) *FrequencyPlan_Channel {
	this := &FrequencyPlan_Channel{}
	this.Frequency = uint32(r.Uint32())
	if r.Intn(10) != 0 {
		this.DataRate = NewPopulatedFrequencyPlan_Channel_ForceDataRate(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFrequencyPlan_Channel_ForceDataRate(r randyGatewayserver, easy bool) *FrequencyPlan_Channel_ForceDataRate {
	this := &FrequencyPlan_Channel_ForceDataRate{}
	this.Index = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFrequencyPlan_LBTConfiguration(r randyGatewayserver, easy bool) *FrequencyPlan_LBTConfiguration {
	this := &FrequencyPlan_LBTConfiguration{}
	this.RSSITarget = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.RSSITarget *= -1
	}
	this.RSSIOffset = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.RSSIOffset *= -1
	}
	this.ScanTime = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.ScanTime *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFrequencyPlanRequest(r randyGatewayserver, easy bool) *FrequencyPlanRequest {
	this := &FrequencyPlanRequest{}
	this.FrequencyPlanID = string(randStringGatewayserver(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyGatewayserver interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneGatewayserver(r randyGatewayserver) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringGatewayserver(r randyGatewayserver) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneGatewayserver(r)
	}
	return string(tmps)
}
func randUnrecognizedGatewayserver(r randyGatewayserver, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldGatewayserver(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldGatewayserver(dAtA []byte, r randyGatewayserver, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateGatewayserver(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulateGatewayserver(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulateGatewayserver(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateGatewayserver(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateGatewayserver(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateGatewayserver(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateGatewayserver(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *GatewayUp) Size() (n int) {
	var l int
	_ = l
	if len(m.UplinkMessage) > 0 {
		for _, e := range m.UplinkMessage {
			l = e.Size()
			n += 1 + l + sovGatewayserver(uint64(l))
		}
	}
	if m.GatewayStatus != nil {
		l = m.GatewayStatus.Size()
		n += 1 + l + sovGatewayserver(uint64(l))
	}
	return n
}

func (m *GatewayDown) Size() (n int) {
	var l int
	_ = l
	if m.DownlinkMessage != nil {
		l = m.DownlinkMessage.Size()
		n += 1 + l + sovGatewayserver(uint64(l))
	}
	return n
}

func (m *FrequencyPlan) Size() (n int) {
	var l int
	_ = l
	l = len(m.BandID)
	if l > 0 {
		n += 1 + l + sovGatewayserver(uint64(l))
	}
	if len(m.Channels) > 0 {
		for _, e := range m.Channels {
			l = e.Size()
			n += 1 + l + sovGatewayserver(uint64(l))
		}
	}
	if m.LoraStandardChannel != nil {
		l = m.LoraStandardChannel.Size()
		n += 1 + l + sovGatewayserver(uint64(l))
	}
	if m.FSKChannel != nil {
		l = m.FSKChannel.Size()
		n += 1 + l + sovGatewayserver(uint64(l))
	}
	if m.LBT != nil {
		l = m.LBT.Size()
		n += 1 + l + sovGatewayserver(uint64(l))
	}
	return n
}

func (m *FrequencyPlan_Channel) Size() (n int) {
	var l int
	_ = l
	if m.Frequency != 0 {
		n += 1 + sovGatewayserver(uint64(m.Frequency))
	}
	if m.DataRate != nil {
		l = m.DataRate.Size()
		n += 1 + l + sovGatewayserver(uint64(l))
	}
	return n
}

func (m *FrequencyPlan_Channel_ForceDataRate) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovGatewayserver(uint64(m.Index))
	}
	return n
}

func (m *FrequencyPlan_LBTConfiguration) Size() (n int) {
	var l int
	_ = l
	if m.RSSITarget != 0 {
		n += 5
	}
	if m.RSSIOffset != 0 {
		n += 5
	}
	if m.ScanTime != 0 {
		n += 1 + sovGatewayserver(uint64(m.ScanTime))
	}
	return n
}

func (m *FrequencyPlanRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.FrequencyPlanID)
	if l > 0 {
		n += 1 + l + sovGatewayserver(uint64(l))
	}
	return n
}

func sovGatewayserver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGatewayserver(x uint64) (n int) {
	return sovGatewayserver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GatewayUp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGatewayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayUp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayUp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplinkMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGatewayserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UplinkMessage = append(m.UplinkMessage, &UplinkMessage{})
			if err := m.UplinkMessage[len(m.UplinkMessage)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGatewayserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GatewayStatus == nil {
				m.GatewayStatus = &GatewayStatus{}
			}
			if err := m.GatewayStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGatewayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGatewayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayDown) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGatewayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayDown: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayDown: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGatewayserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DownlinkMessage == nil {
				m.DownlinkMessage = &DownlinkMessage{}
			}
			if err := m.DownlinkMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGatewayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGatewayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FrequencyPlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGatewayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FrequencyPlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FrequencyPlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BandID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGatewayserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BandID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGatewayserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channels = append(m.Channels, &FrequencyPlan_Channel{})
			if err := m.Channels[len(m.Channels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoraStandardChannel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGatewayserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LoraStandardChannel == nil {
				m.LoraStandardChannel = &FrequencyPlan_Channel{}
			}
			if err := m.LoraStandardChannel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FSKChannel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGatewayserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FSKChannel == nil {
				m.FSKChannel = &FrequencyPlan_Channel{}
			}
			if err := m.FSKChannel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LBT", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGatewayserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LBT == nil {
				m.LBT = &FrequencyPlan_LBTConfiguration{}
			}
			if err := m.LBT.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGatewayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGatewayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FrequencyPlan_Channel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGatewayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Channel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Channel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			m.Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frequency |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGatewayserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataRate == nil {
				m.DataRate = &FrequencyPlan_Channel_ForceDataRate{}
			}
			if err := m.DataRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGatewayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGatewayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FrequencyPlan_Channel_ForceDataRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGatewayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForceDataRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForceDataRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGatewayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGatewayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FrequencyPlan_LBTConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGatewayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LBTConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LBTConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RSSITarget", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.RSSITarget = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RSSIOffset", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.RSSIOffset = float32(math.Float32frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanTime", wireType)
			}
			m.ScanTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScanTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGatewayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGatewayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FrequencyPlanRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGatewayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FrequencyPlanRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FrequencyPlanRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyPlanID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGatewayserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrequencyPlanID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGatewayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGatewayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGatewayserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGatewayserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGatewayserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGatewayserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGatewayserver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGatewayserver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGatewayserver(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGatewayserver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGatewayserver   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/gatewayserver.proto", fileDescriptorGatewayserver)
}
func init() {
	golang_proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/gatewayserver.proto", fileDescriptorGatewayserver)
}

var fileDescriptorGatewayserver = []byte{
	// 986 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0x3f, 0x6c, 0xdb, 0xc6,
	0x17, 0xc7, 0x79, 0xfe, 0xef, 0x33, 0x1c, 0x3b, 0xe7, 0x3f, 0x3f, 0xff, 0x18, 0xf7, 0x98, 0x0a,
	0x6d, 0x91, 0xa2, 0x15, 0x9d, 0x28, 0x08, 0x0a, 0x14, 0x05, 0x8a, 0xd2, 0x8e, 0x05, 0x23, 0xae,
	0x93, 0x52, 0x72, 0x8b, 0x76, 0x11, 0x4e, 0xe2, 0x91, 0x22, 0x24, 0x1d, 0x55, 0xde, 0x29, 0x8e,
	0xb7, 0x0c, 0x05, 0x9a, 0xb1, 0x63, 0xa7, 0xb6, 0x63, 0xc6, 0x8c, 0x19, 0x33, 0x66, 0x0c, 0xd0,
	0x25, 0x13, 0x11, 0x51, 0x4b, 0xd0, 0x29, 0xd0, 0x94, 0xb1, 0x38, 0xf2, 0x28, 0x53, 0x82, 0xdb,
	0xb8, 0x93, 0xee, 0xee, 0xfb, 0xde, 0xe7, 0xfb, 0xee, 0xdd, 0xe9, 0x08, 0x3f, 0xf3, 0x7c, 0xd1,
	0xec, 0xd5, 0xcd, 0x46, 0xd0, 0xd9, 0xa9, 0x36, 0x69, 0xb5, 0xe9, 0x33, 0x8f, 0x1f, 0x51, 0x71,
	0x12, 0x84, 0xad, 0x1d, 0x21, 0xd8, 0x0e, 0xe9, 0xfa, 0x3b, 0x1e, 0x11, 0xf4, 0x84, 0x9c, 0x72,
	0x1a, 0xde, 0xa7, 0xa1, 0xd9, 0x0d, 0x03, 0x11, 0xa0, 0x39, 0x21, 0x98, 0x79, 0xff, 0xa6, 0x5e,
	0xcc, 0x01, 0xbc, 0xc0, 0x0b, 0x76, 0x12, 0xb9, 0xde, 0x73, 0x93, 0x59, 0x32, 0x49, 0x46, 0x69,
	0x9a, 0x7e, 0xeb, 0x22, 0x7e, 0xbe, 0x43, 0x99, 0xf0, 0x5d, 0x9f, 0x86, 0x5c, 0xa5, 0xdd, 0xf8,
	0x0f, 0x65, 0xaa, 0x94, 0xd2, 0x45, 0x52, 0x3a, 0x94, 0x73, 0xe2, 0xd1, 0xcc, 0xe6, 0x8a, 0x17,
	0x04, 0x5e, 0x9b, 0x9e, 0xed, 0x81, 0x76, 0xba, 0x42, 0x01, 0x0b, 0x3f, 0x03, 0xb8, 0x58, 0x4e,
	0x2d, 0x8e, 0xbb, 0xe8, 0x0b, 0x78, 0xa9, 0xd7, 0x6d, 0xfb, 0xac, 0x55, 0x53, 0x8c, 0x2d, 0x70,
	0x75, 0xfa, 0xda, 0x52, 0x69, 0xc3, 0x4c, 0x1b, 0x63, 0x1e, 0x27, 0xea, 0xd7, 0xa9, 0x68, 0x2f,
	0xf7, 0xf2, 0x53, 0x99, 0xad, 0xaa, 0xad, 0x71, 0x41, 0x44, 0x8f, 0x6f, 0x4d, 0x5d, 0x05, 0xf9,
	0x6c, 0x65, 0x54, 0x49, 0x44, 0x7b, 0xd9, 0xcb, 0x4f, 0x0b, 0xdf, 0xc0, 0x25, 0xa5, 0xef, 0x05,
	0x27, 0x0c, 0x59, 0x70, 0xd5, 0x09, 0x4e, 0xd8, 0x44, 0x31, 0x12, 0xf7, 0xbf, 0x0c, 0xb7, 0xa7,
	0xf4, 0xac, 0x9c, 0x15, 0x67, 0x7c, 0xa1, 0xf0, 0xdb, 0x3c, 0x5c, 0xde, 0x0f, 0xe9, 0x8f, 0x3d,
	0xca, 0x1a, 0xa7, 0xf7, 0xda, 0x84, 0xa1, 0x5b, 0x70, 0xbe, 0x4e, 0x98, 0x53, 0xf3, 0x9d, 0x04,
	0xb6, 0x68, 0x6d, 0xc7, 0x91, 0x31, 0x67, 0x11, 0xe6, 0x1c, 0xec, 0x0d, 0x23, 0xe3, 0xd2, 0x29,
	0xe9, 0xb4, 0x3f, 0x2f, 0xc8, 0x90, 0xa2, 0xef, 0x14, 0xec, 0x39, 0x39, 0x3a, 0x70, 0xd0, 0x11,
	0x5c, 0x68, 0x34, 0x09, 0x63, 0xb4, 0x2d, 0xf7, 0x24, 0x3b, 0xf2, 0x5e, 0x56, 0xc4, 0x18, 0xdf,
	0xdc, 0x4d, 0xa3, 0xac, 0xb5, 0x61, 0x64, 0xac, 0xa4, 0xb0, 0x2c, 0xb1, 0x60, 0x8f, 0x18, 0xe8,
	0x01, 0xdc, 0x68, 0x07, 0x21, 0x91, 0x6d, 0x62, 0x0e, 0x09, 0x9d, 0x9a, 0x52, 0xb6, 0xa6, 0x93,
	0x1d, 0xbe, 0x03, 0xfe, 0xe1, 0x30, 0x32, 0xde, 0x4f, 0xe1, 0x92, 0x52, 0xe4, 0xc2, 0x29, 0x2a,
	0xc0, 0xa7, 0x41, 0xc7, 0x17, 0xc9, 0xf9, 0x16, 0xec, 0x35, 0x29, 0x56, 0x94, 0x83, 0xca, 0x45,
	0x0c, 0x2e, 0xb9, 0xbc, 0x35, 0xf2, 0x9b, 0xb9, 0x88, 0x9f, 0x19, 0x47, 0x06, 0xdc, 0xaf, 0xdc,
	0x51, 0xf3, 0x61, 0x64, 0x6c, 0xa7, 0xee, 0x2e, 0x6f, 0x9d, 0x67, 0x0c, 0x5d, 0xde, 0xca, 0xfc,
	0xbe, 0x87, 0xd3, 0xed, 0xba, 0xd8, 0x9a, 0x4d, 0x7c, 0x3e, 0x3a, 0xdf, 0xe7, 0xd0, 0xaa, 0xee,
	0x06, 0xcc, 0xf5, 0xbd, 0x5e, 0x48, 0x84, 0x1f, 0x30, 0xcb, 0x88, 0x23, 0x63, 0xfa, 0xd0, 0xaa,
	0x0e, 0x23, 0x63, 0x5d, 0xed, 0xb3, 0x2e, 0xf2, 0x0e, 0x92, 0xa9, 0xff, 0x05, 0xe0, 0x7c, 0x66,
	0x53, 0x82, 0x8b, 0x6e, 0xc6, 0x4c, 0x4e, 0x76, 0xd9, 0x5a, 0x1f, 0x46, 0xc6, 0xaa, 0xaa, 0x33,
	0x93, 0x0a, 0xf6, 0x59, 0x18, 0x6a, 0xc2, 0x45, 0x87, 0x08, 0x52, 0x0b, 0x89, 0xa0, 0xea, 0xa6,
	0x7e, 0xf2, 0xaf, 0x8d, 0x30, 0xf7, 0x83, 0xb0, 0x41, 0xf7, 0x88, 0x20, 0x36, 0x11, 0xd4, 0xc2,
	0xc3, 0xc8, 0xd0, 0x53, 0x03, 0xc9, 0x29, 0x4a, 0x4e, 0xbe, 0xc8, 0x05, 0x47, 0x45, 0xea, 0x5f,
	0xc1, 0xe5, 0xb1, 0x54, 0x74, 0x1d, 0xce, 0xfa, 0xcc, 0xa1, 0x0f, 0x54, 0xa9, 0xfa, 0x30, 0x32,
	0x36, 0x53, 0x52, 0xb2, 0x9c, 0xa7, 0xa4, 0x81, 0xfa, 0x9f, 0x00, 0xae, 0x4e, 0xf6, 0x09, 0xdd,
	0x86, 0x4b, 0x21, 0xe7, 0x7e, 0x4d, 0x90, 0xd0, 0xa3, 0x22, 0x81, 0x4d, 0x59, 0x1f, 0xc8, 0xd3,
	0xb2, 0x2b, 0x95, 0x83, 0x6a, 0xb2, 0x3a, 0x8c, 0x0c, 0x94, 0xa2, 0x65, 0x68, 0x31, 0x0d, 0x2d,
	0xd8, 0x50, 0xce, 0xd2, 0x88, 0x11, 0x26, 0x70, 0x5d, 0x4e, 0x45, 0xd2, 0x8a, 0x1c, 0xe6, 0x6e,
	0xb2, 0x3a, 0x81, 0x49, 0x43, 0x15, 0x26, 0x8d, 0x40, 0x37, 0xe0, 0x22, 0x6f, 0x10, 0x56, 0x13,
	0x7e, 0x87, 0x26, 0x17, 0x79, 0x36, 0x7f, 0x06, 0x52, 0x2a, 0x4a, 0xa9, 0x60, 0x2f, 0xc8, 0x71,
	0x55, 0x0e, 0xbf, 0x83, 0xeb, 0x63, 0x9d, 0xb6, 0xe5, 0x98, 0x0b, 0xf4, 0x25, 0xbc, 0x3c, 0x3a,
	0xa7, 0x5a, 0xb7, 0x4d, 0xd8, 0xd9, 0x1f, 0x76, 0x2d, 0x8e, 0x8c, 0x95, 0xb1, 0xa4, 0x83, 0x3d,
	0x7b, 0xc5, 0x1d, 0x5b, 0x70, 0x4a, 0x3f, 0x01, 0x38, 0x5b, 0x16, 0x27, 0x65, 0x8e, 0x4a, 0x70,
	0xe6, 0xd0, 0x67, 0x2d, 0x74, 0x79, 0xe2, 0x11, 0x3a, 0xee, 0xea, 0x6b, 0x13, 0x4b, 0xf2, 0x3d,
	0xb9, 0x06, 0xae, 0x03, 0x54, 0x86, 0xab, 0x65, 0x2a, 0xc6, 0x5f, 0x8e, 0xed, 0x73, 0xaf, 0x86,
	0x2a, 0x58, 0xdf, 0x38, 0x57, 0x2d, 0xdd, 0x81, 0x33, 0x47, 0xbc, 0xcc, 0xd1, 0x2e, 0x5c, 0xad,
	0x34, 0x9a, 0xd4, 0xe9, 0xb5, 0x69, 0xf6, 0x68, 0xa1, 0x7f, 0x7a, 0xc6, 0xf4, 0x4d, 0x33, 0x7d,
	0xb0, 0xcd, 0xec, 0xc1, 0x36, 0x6f, 0xcb, 0xab, 0x50, 0xfa, 0x16, 0x4e, 0x95, 0x39, 0xba, 0x07,
	0x37, 0xcb, 0x54, 0xa8, 0x8a, 0xef, 0xd6, 0xe5, 0xe7, 0x2b, 0xb9, 0x0c, 0x1c, 0xfd, 0x7f, 0x62,
	0x3b, 0x07, 0xa3, 0x0f, 0x8e, 0x7e, 0x65, 0x42, 0xca, 0xe7, 0x59, 0xbf, 0x83, 0xe7, 0x7d, 0x0c,
	0x5e, 0xf4, 0x31, 0x78, 0xd9, 0xc7, 0xe0, 0x55, 0x1f, 0x83, 0xd7, 0x7d, 0xac, 0xbd, 0xe9, 0x63,
	0xed, 0x6d, 0x1f, 0x83, 0x87, 0x31, 0xd6, 0x1e, 0xc5, 0x58, 0x7b, 0x1c, 0x63, 0xf0, 0x24, 0xc6,
	0xda, 0xd3, 0x18, 0x83, 0x67, 0x31, 0x06, 0xcf, 0x63, 0x0c, 0x5e, 0xc4, 0x18, 0xbc, 0x8c, 0xb1,
	0xf6, 0x2a, 0xc6, 0xe0, 0x75, 0x8c, 0xb5, 0x37, 0x31, 0x06, 0x6f, 0x63, 0xac, 0x3d, 0x1c, 0x60,
	0xed, 0xd1, 0x00, 0x83, 0x5f, 0x06, 0x58, 0xfb, 0x75, 0x80, 0xc1, 0x1f, 0x03, 0xac, 0x3d, 0x1e,
	0x60, 0xed, 0xc9, 0x00, 0x83, 0xa7, 0x03, 0x0c, 0x9e, 0x0d, 0x30, 0xf8, 0xe1, 0xe3, 0x77, 0x7d,
	0xca, 0xba, 0x2d, 0x4f, 0xfe, 0x76, 0xeb, 0xf5, 0xb9, 0xa4, 0x13, 0x37, 0xff, 0x0e, 0x00, 0x00,
	0xff, 0xff, 0x7c, 0x97, 0x0c, 0xe4, 0xd8, 0x07, 0x00, 0x00,
}
