// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/gatewayserver.proto

package ttnpb

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GatewayUp may contain zero or more uplink messages and/or a status message for the gateway.
type GatewayUp struct {
	// UplinkMessages received by the gateway.
	UplinkMessages       []*UplinkMessage  `protobuf:"bytes,1,rep,name=uplink_messages,json=uplinkMessages,proto3" json:"uplink_messages,omitempty"`
	GatewayStatus        *GatewayStatus    `protobuf:"bytes,2,opt,name=gateway_status,json=gatewayStatus,proto3" json:"gateway_status,omitempty"`
	TxAcknowledgment     *TxAcknowledgment `protobuf:"bytes,3,opt,name=tx_acknowledgment,json=txAcknowledgment,proto3" json:"tx_acknowledgment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GatewayUp) Reset()      { *m = GatewayUp{} }
func (*GatewayUp) ProtoMessage() {}
func (*GatewayUp) Descriptor() ([]byte, []int) {
	return fileDescriptor_62b07a36420f2d6d, []int{0}
}
func (m *GatewayUp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayUp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayUp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayUp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayUp.Merge(m, src)
}
func (m *GatewayUp) XXX_Size() int {
	return m.Size()
}
func (m *GatewayUp) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayUp.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayUp proto.InternalMessageInfo

func (m *GatewayUp) GetUplinkMessages() []*UplinkMessage {
	if m != nil {
		return m.UplinkMessages
	}
	return nil
}

func (m *GatewayUp) GetGatewayStatus() *GatewayStatus {
	if m != nil {
		return m.GatewayStatus
	}
	return nil
}

func (m *GatewayUp) GetTxAcknowledgment() *TxAcknowledgment {
	if m != nil {
		return m.TxAcknowledgment
	}
	return nil
}

// GatewayDown contains downlink messages for the gateway.
type GatewayDown struct {
	// DownlinkMessage for the gateway.
	DownlinkMessage      *DownlinkMessage `protobuf:"bytes,1,opt,name=downlink_message,json=downlinkMessage,proto3" json:"downlink_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GatewayDown) Reset()      { *m = GatewayDown{} }
func (*GatewayDown) ProtoMessage() {}
func (*GatewayDown) Descriptor() ([]byte, []int) {
	return fileDescriptor_62b07a36420f2d6d, []int{1}
}
func (m *GatewayDown) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayDown) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayDown.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayDown) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayDown.Merge(m, src)
}
func (m *GatewayDown) XXX_Size() int {
	return m.Size()
}
func (m *GatewayDown) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayDown.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayDown proto.InternalMessageInfo

func (m *GatewayDown) GetDownlinkMessage() *DownlinkMessage {
	if m != nil {
		return m.DownlinkMessage
	}
	return nil
}

type ScheduleDownlinkResponse struct {
	Delay                time.Duration `protobuf:"bytes,1,opt,name=delay,proto3,stdduration" json:"delay"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ScheduleDownlinkResponse) Reset()      { *m = ScheduleDownlinkResponse{} }
func (*ScheduleDownlinkResponse) ProtoMessage() {}
func (*ScheduleDownlinkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62b07a36420f2d6d, []int{2}
}
func (m *ScheduleDownlinkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScheduleDownlinkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScheduleDownlinkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScheduleDownlinkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduleDownlinkResponse.Merge(m, src)
}
func (m *ScheduleDownlinkResponse) XXX_Size() int {
	return m.Size()
}
func (m *ScheduleDownlinkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduleDownlinkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduleDownlinkResponse proto.InternalMessageInfo

func (m *ScheduleDownlinkResponse) GetDelay() time.Duration {
	if m != nil {
		return m.Delay
	}
	return 0
}

type ScheduleDownlinkErrorDetails struct {
	PathErrors           []*ErrorDetails `protobuf:"bytes,1,rep,name=path_errors,json=pathErrors,proto3" json:"path_errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ScheduleDownlinkErrorDetails) Reset()      { *m = ScheduleDownlinkErrorDetails{} }
func (*ScheduleDownlinkErrorDetails) ProtoMessage() {}
func (*ScheduleDownlinkErrorDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_62b07a36420f2d6d, []int{3}
}
func (m *ScheduleDownlinkErrorDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScheduleDownlinkErrorDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScheduleDownlinkErrorDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScheduleDownlinkErrorDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduleDownlinkErrorDetails.Merge(m, src)
}
func (m *ScheduleDownlinkErrorDetails) XXX_Size() int {
	return m.Size()
}
func (m *ScheduleDownlinkErrorDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduleDownlinkErrorDetails.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduleDownlinkErrorDetails proto.InternalMessageInfo

func (m *ScheduleDownlinkErrorDetails) GetPathErrors() []*ErrorDetails {
	if m != nil {
		return m.PathErrors
	}
	return nil
}

func init() {
	proto.RegisterType((*GatewayUp)(nil), "ttn.lorawan.v3.GatewayUp")
	golang_proto.RegisterType((*GatewayUp)(nil), "ttn.lorawan.v3.GatewayUp")
	proto.RegisterType((*GatewayDown)(nil), "ttn.lorawan.v3.GatewayDown")
	golang_proto.RegisterType((*GatewayDown)(nil), "ttn.lorawan.v3.GatewayDown")
	proto.RegisterType((*ScheduleDownlinkResponse)(nil), "ttn.lorawan.v3.ScheduleDownlinkResponse")
	golang_proto.RegisterType((*ScheduleDownlinkResponse)(nil), "ttn.lorawan.v3.ScheduleDownlinkResponse")
	proto.RegisterType((*ScheduleDownlinkErrorDetails)(nil), "ttn.lorawan.v3.ScheduleDownlinkErrorDetails")
	golang_proto.RegisterType((*ScheduleDownlinkErrorDetails)(nil), "ttn.lorawan.v3.ScheduleDownlinkErrorDetails")
}

func init() {
	proto.RegisterFile("lorawan-stack/api/gatewayserver.proto", fileDescriptor_62b07a36420f2d6d)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/gatewayserver.proto", fileDescriptor_62b07a36420f2d6d)
}

var fileDescriptor_62b07a36420f2d6d = []byte{
	// 853 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x31, 0x6c, 0x1c, 0x45,
	0x14, 0x9d, 0xb1, 0x31, 0x82, 0xb1, 0x70, 0xcc, 0x48, 0xc0, 0xf9, 0xe2, 0x8c, 0xad, 0x43, 0x20,
	0x0b, 0xe5, 0x76, 0xad, 0x8b, 0x84, 0x68, 0x28, 0x6c, 0x5f, 0x38, 0x19, 0x61, 0x24, 0xce, 0x36,
	0x12, 0x48, 0x96, 0x35, 0xbe, 0x1d, 0xcf, 0xad, 0x6e, 0x3d, 0xb3, 0xec, 0xcc, 0xdd, 0xf9, 0x84,
	0x90, 0x22, 0xaa, 0x94, 0x48, 0x14, 0x44, 0xa2, 0x41, 0xa9, 0x22, 0xaa, 0x94, 0x29, 0x53, 0xba,
	0x8c, 0x44, 0x93, 0x8a, 0xe4, 0x76, 0x29, 0x5c, 0xa6, 0x8c, 0xa8, 0xd0, 0xce, 0xcd, 0xda, 0x77,
	0x7b, 0x5e, 0xa0, 0x49, 0xb7, 0xb3, 0xff, 0xfd, 0xf7, 0xdf, 0x7f, 0xf3, 0xff, 0xa0, 0x0f, 0x02,
	0x19, 0xd1, 0x3e, 0x15, 0x55, 0xa5, 0x69, 0xab, 0xe3, 0xd2, 0xd0, 0x77, 0x39, 0xd5, 0xac, 0x4f,
	0x07, 0x8a, 0x45, 0x3d, 0x16, 0x39, 0x61, 0x24, 0xb5, 0xc4, 0x0b, 0x5a, 0x0b, 0xc7, 0x42, 0x9d,
	0xde, 0xad, 0xf2, 0x06, 0xf7, 0x75, 0xbb, 0x7b, 0xe4, 0xb4, 0xe4, 0x89, 0xcb, 0x44, 0x4f, 0x0e,
	0xc2, 0x48, 0x9e, 0x0e, 0x5c, 0x03, 0x6e, 0x55, 0x39, 0x13, 0xd5, 0x1e, 0x0d, 0x7c, 0x8f, 0x6a,
	0xe6, 0x4e, 0x7d, 0x8c, 0x28, 0xcb, 0xd5, 0x31, 0x0a, 0x2e, 0xb9, 0x1c, 0x25, 0x1f, 0x75, 0x8f,
	0xcd, 0xc9, 0x1c, 0xcc, 0x97, 0x85, 0x2f, 0x73, 0x29, 0x79, 0xc0, 0x8c, 0x42, 0x2a, 0x84, 0xd4,
	0x54, 0xfb, 0x52, 0x28, 0x1b, 0x25, 0x36, 0x7a, 0xc1, 0xe1, 0x75, 0x23, 0x03, 0xb0, 0xf1, 0xeb,
	0xf9, 0x38, 0x3b, 0x09, 0xf5, 0xc0, 0x06, 0x6f, 0x4c, 0x7b, 0xc0, 0xa2, 0x48, 0xda, 0xde, 0xcb,
	0x2b, 0x85, 0x16, 0x59, 0xc0, 0xfb, 0xd3, 0x00, 0xdf, 0x63, 0x42, 0xfb, 0xc7, 0x3e, 0x8b, 0x32,
	0x85, 0xab, 0xd3, 0xa0, 0x13, 0xa6, 0x14, 0xe5, 0x2c, 0x43, 0x2c, 0x5f, 0x81, 0xf8, 0x4e, 0xeb,
	0xe2, 0xfc, 0x88, 0x71, 0x5f, 0x0a, 0x1a, 0x8c, 0x10, 0x95, 0x73, 0x88, 0xde, 0x6c, 0x8c, 0x84,
	0xed, 0x87, 0xf8, 0x33, 0x74, 0xad, 0x1b, 0x06, 0xbe, 0xe8, 0x1c, 0x66, 0x65, 0x4a, 0x70, 0x75,
	0x76, 0x6d, 0xbe, 0x76, 0xc3, 0x99, 0xbc, 0x4b, 0x67, 0xdf, 0xc0, 0x76, 0x46, 0xa8, 0xe6, 0x42,
	0x77, 0xfc, 0xa8, 0x70, 0x1d, 0x2d, 0xd8, 0x6e, 0x0f, 0x95, 0xa6, 0xba, 0xab, 0x4a, 0x33, 0xab,
	0xf0, 0x2a, 0x1a, 0x5b, 0x7a, 0xd7, 0x80, 0x9a, 0x6f, 0xf1, 0xf1, 0x23, 0xde, 0x41, 0x6f, 0xeb,
	0xd3, 0x43, 0xda, 0xea, 0x08, 0xd9, 0x0f, 0x98, 0xc7, 0x4f, 0x98, 0xd0, 0xa5, 0x59, 0x43, 0xb4,
	0x9a, 0x27, 0xda, 0x3b, 0xdd, 0x98, 0xc0, 0x35, 0x17, 0x75, 0xee, 0x4f, 0xe5, 0x1b, 0x34, 0x6f,
	0xcb, 0xd5, 0x65, 0x5f, 0xe0, 0xcf, 0xd1, 0xa2, 0x27, 0xfb, 0x62, 0xbc, 0xdb, 0x12, 0x34, 0xe4,
	0x2b, 0x79, 0xf2, 0xba, 0xc5, 0x65, 0xed, 0x5e, 0xf3, 0x26, 0x7f, 0x54, 0x0e, 0x50, 0x69, 0xb7,
	0xd5, 0x66, 0x5e, 0x37, 0x60, 0x19, 0xb6, 0xc9, 0x54, 0x28, 0x85, 0x62, 0x78, 0x03, 0xcd, 0x79,
	0x2c, 0xa0, 0x03, 0x4b, 0xbe, 0xe4, 0x8c, 0xa6, 0xca, 0xc9, 0xa6, 0xca, 0xa9, 0xdb, 0xa9, 0xdb,
	0x5c, 0xfc, 0x7b, 0x73, 0xee, 0x77, 0x38, 0xf3, 0x06, 0x3c, 0xfb, 0x73, 0x05, 0xdc, 0x7b, 0xb6,
	0x02, 0x9b, 0xa3, 0xcc, 0xca, 0x01, 0x5a, 0xce, 0xd3, 0xdf, 0x4e, 0x67, 0xad, 0xce, 0x34, 0xf5,
	0x03, 0x85, 0x3f, 0x45, 0xf3, 0x21, 0xd5, 0xed, 0x43, 0x33, 0x80, 0xd9, 0x95, 0x2d, 0xe7, 0xbb,
	0x18, 0x4f, 0x69, 0xa2, 0x34, 0xc1, 0xfc, 0x51, 0xb5, 0x67, 0xb3, 0x68, 0xae, 0xa1, 0xfb, 0x0d,
	0x85, 0xb7, 0xd1, 0xfc, 0x17, 0xbe, 0xe8, 0x58, 0x9b, 0xf0, 0x52, 0xc1, 0x75, 0xed, 0x87, 0xe5,
	0xeb, 0x05, 0xa1, 0x54, 0xdf, 0x1a, 0x5c, 0x87, 0x78, 0x17, 0xbd, 0xd3, 0x60, 0x7a, 0x4b, 0x8a,
	0x16, 0x13, 0x3a, 0xa2, 0x5a, 0x46, 0x5b, 0x52, 0x1c, 0xfb, 0x1c, 0xbf, 0x3b, 0x65, 0xc0, 0xed,
	0x74, 0xad, 0xca, 0x95, 0x3c, 0xe3, 0x15, 0xb9, 0xbf, 0x40, 0xc3, 0xba, 0xf3, 0xd5, 0xde, 0xde,
	0x96, 0x14, 0x82, 0xb5, 0x52, 0xdf, 0xb6, 0xc5, 0xb1, 0xc4, 0x95, 0x02, 0x3d, 0xdb, 0x97, 0x3b,
	0x35, 0x5d, 0x61, 0x9a, 0xa7, 0xf2, 0xf1, 0x8f, 0x7f, 0xfc, 0xf5, 0xf3, 0xcc, 0x3a, 0x76, 0x5c,
	0xae, 0x2e, 0x1e, 0x35, 0xf7, 0xfb, 0x6c, 0x9a, 0x7d, 0xef, 0x07, 0xb3, 0x5f, 0xd5, 0xd6, 0x45,
	0x5a, 0xd5, 0x4f, 0xeb, 0xff, 0x0a, 0xd1, 0x7b, 0x56, 0xd9, 0xd7, 0xb5, 0x57, 0xa4, 0xed, 0x13,
	0xa3, 0xad, 0x86, 0xd7, 0xff, 0x5d, 0x5b, 0xaf, 0x96, 0x57, 0x57, 0x63, 0xe8, 0xb5, 0x2f, 0x55,
	0x43, 0xe1, 0x03, 0xb4, 0x98, 0x1f, 0x24, 0xfc, 0x5f, 0xd3, 0x5e, 0x5e, 0xcb, 0x03, 0x8a, 0x46,
	0xbd, 0x76, 0x1f, 0xa2, 0x99, 0x86, 0x4a, 0xbd, 0x58, 0x6a, 0x30, 0x6d, 0xbb, 0xbc, 0x6c, 0x22,
	0x5d, 0x6b, 0xf5, 0xbf, 0xdc, 0xf8, 0xb0, 0x00, 0x93, 0xe3, 0xaa, 0xd4, 0x8c, 0x23, 0x37, 0xf1,
	0x47, 0xc5, 0x8e, 0x5c, 0x5a, 0xe1, 0xa6, 0x4f, 0x91, 0xda, 0xbc, 0x0f, 0xcf, 0x86, 0x04, 0x3e,
	0x19, 0x12, 0xf8, 0x74, 0x48, 0xc0, 0xf3, 0x21, 0x01, 0xe7, 0x43, 0x02, 0x5e, 0x0c, 0x09, 0x78,
	0x39, 0x24, 0xf0, 0x4e, 0x4c, 0xe0, 0xdd, 0x98, 0x80, 0x07, 0x31, 0x81, 0x0f, 0x63, 0x02, 0x1e,
	0xc5, 0x04, 0x3c, 0x8e, 0x09, 0x38, 0x8b, 0x09, 0x7c, 0x12, 0x13, 0xf8, 0x34, 0x26, 0xe0, 0x79,
	0x4c, 0xe0, 0x79, 0x4c, 0xc0, 0x8b, 0x98, 0xc0, 0x97, 0x31, 0x01, 0x77, 0x12, 0x02, 0xee, 0x26,
	0x04, 0xfe, 0x94, 0x10, 0x70, 0x2f, 0x21, 0xf0, 0xb7, 0x84, 0x80, 0x07, 0x09, 0x01, 0x0f, 0x13,
	0x02, 0x1f, 0x25, 0x04, 0x3e, 0x4e, 0x08, 0xfc, 0xf6, 0x26, 0x97, 0x8e, 0x6e, 0x33, 0xdd, 0xf6,
	0x05, 0x57, 0x8e, 0x60, 0xba, 0x2f, 0xa3, 0x8e, 0x3b, 0xf9, 0x3e, 0x87, 0x1d, 0xee, 0x6a, 0x2d,
	0xc2, 0xa3, 0xa3, 0xd7, 0xcd, 0x72, 0xdc, 0xfa, 0x27, 0x00, 0x00, 0xff, 0xff, 0x29, 0x78, 0x18,
	0x24, 0x6a, 0x07, 0x00, 0x00,
}

func (this *GatewayUp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayUp)
	if !ok {
		that2, ok := that.(GatewayUp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.UplinkMessages) != len(that1.UplinkMessages) {
		return false
	}
	for i := range this.UplinkMessages {
		if !this.UplinkMessages[i].Equal(that1.UplinkMessages[i]) {
			return false
		}
	}
	if !this.GatewayStatus.Equal(that1.GatewayStatus) {
		return false
	}
	if !this.TxAcknowledgment.Equal(that1.TxAcknowledgment) {
		return false
	}
	return true
}
func (this *GatewayDown) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayDown)
	if !ok {
		that2, ok := that.(GatewayDown)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DownlinkMessage.Equal(that1.DownlinkMessage) {
		return false
	}
	return true
}
func (this *ScheduleDownlinkResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScheduleDownlinkResponse)
	if !ok {
		that2, ok := that.(ScheduleDownlinkResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Delay != that1.Delay {
		return false
	}
	return true
}
func (this *ScheduleDownlinkErrorDetails) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScheduleDownlinkErrorDetails)
	if !ok {
		that2, ok := that.(ScheduleDownlinkErrorDetails)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PathErrors) != len(that1.PathErrors) {
		return false
	}
	for i := range this.PathErrors {
		if !this.PathErrors[i].Equal(that1.PathErrors[i]) {
			return false
		}
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GtwGsClient is the client API for GtwGs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GtwGsClient interface {
	// Link the gateway to the Gateway Server.
	LinkGateway(ctx context.Context, opts ...grpc.CallOption) (GtwGs_LinkGatewayClient, error)
	// GetConcentratorConfig associated to the gateway.
	GetConcentratorConfig(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*ConcentratorConfig, error)
	// Get the MQTT server address and the username for the gateway.
	GetMQTTConnectionInfo(ctx context.Context, in *GatewayIdentifiers, opts ...grpc.CallOption) (*MQTTConnectionInfo, error)
	// Get the MQTTV2 server address and the username for the gateway.
	GetMQTTV2ConnectionInfo(ctx context.Context, in *GatewayIdentifiers, opts ...grpc.CallOption) (*MQTTConnectionInfo, error)
}

type gtwGsClient struct {
	cc *grpc.ClientConn
}

func NewGtwGsClient(cc *grpc.ClientConn) GtwGsClient {
	return &gtwGsClient{cc}
}

func (c *gtwGsClient) LinkGateway(ctx context.Context, opts ...grpc.CallOption) (GtwGs_LinkGatewayClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GtwGs_serviceDesc.Streams[0], "/ttn.lorawan.v3.GtwGs/LinkGateway", opts...)
	if err != nil {
		return nil, err
	}
	x := &gtwGsLinkGatewayClient{stream}
	return x, nil
}

type GtwGs_LinkGatewayClient interface {
	Send(*GatewayUp) error
	Recv() (*GatewayDown, error)
	grpc.ClientStream
}

type gtwGsLinkGatewayClient struct {
	grpc.ClientStream
}

func (x *gtwGsLinkGatewayClient) Send(m *GatewayUp) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gtwGsLinkGatewayClient) Recv() (*GatewayDown, error) {
	m := new(GatewayDown)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gtwGsClient) GetConcentratorConfig(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*ConcentratorConfig, error) {
	out := new(ConcentratorConfig)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GtwGs/GetConcentratorConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gtwGsClient) GetMQTTConnectionInfo(ctx context.Context, in *GatewayIdentifiers, opts ...grpc.CallOption) (*MQTTConnectionInfo, error) {
	out := new(MQTTConnectionInfo)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GtwGs/GetMQTTConnectionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gtwGsClient) GetMQTTV2ConnectionInfo(ctx context.Context, in *GatewayIdentifiers, opts ...grpc.CallOption) (*MQTTConnectionInfo, error) {
	out := new(MQTTConnectionInfo)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GtwGs/GetMQTTV2ConnectionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GtwGsServer is the server API for GtwGs service.
type GtwGsServer interface {
	// Link the gateway to the Gateway Server.
	LinkGateway(GtwGs_LinkGatewayServer) error
	// GetConcentratorConfig associated to the gateway.
	GetConcentratorConfig(context.Context, *types.Empty) (*ConcentratorConfig, error)
	// Get the MQTT server address and the username for the gateway.
	GetMQTTConnectionInfo(context.Context, *GatewayIdentifiers) (*MQTTConnectionInfo, error)
	// Get the MQTTV2 server address and the username for the gateway.
	GetMQTTV2ConnectionInfo(context.Context, *GatewayIdentifiers) (*MQTTConnectionInfo, error)
}

// UnimplementedGtwGsServer can be embedded to have forward compatible implementations.
type UnimplementedGtwGsServer struct {
}

func (*UnimplementedGtwGsServer) LinkGateway(srv GtwGs_LinkGatewayServer) error {
	return status.Errorf(codes.Unimplemented, "method LinkGateway not implemented")
}
func (*UnimplementedGtwGsServer) GetConcentratorConfig(ctx context.Context, req *types.Empty) (*ConcentratorConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConcentratorConfig not implemented")
}
func (*UnimplementedGtwGsServer) GetMQTTConnectionInfo(ctx context.Context, req *GatewayIdentifiers) (*MQTTConnectionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMQTTConnectionInfo not implemented")
}
func (*UnimplementedGtwGsServer) GetMQTTV2ConnectionInfo(ctx context.Context, req *GatewayIdentifiers) (*MQTTConnectionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMQTTV2ConnectionInfo not implemented")
}

func RegisterGtwGsServer(s *grpc.Server, srv GtwGsServer) {
	s.RegisterService(&_GtwGs_serviceDesc, srv)
}

func _GtwGs_LinkGateway_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GtwGsServer).LinkGateway(&gtwGsLinkGatewayServer{stream})
}

type GtwGs_LinkGatewayServer interface {
	Send(*GatewayDown) error
	Recv() (*GatewayUp, error)
	grpc.ServerStream
}

type gtwGsLinkGatewayServer struct {
	grpc.ServerStream
}

func (x *gtwGsLinkGatewayServer) Send(m *GatewayDown) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gtwGsLinkGatewayServer) Recv() (*GatewayUp, error) {
	m := new(GatewayUp)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GtwGs_GetConcentratorConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GtwGsServer).GetConcentratorConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GtwGs/GetConcentratorConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GtwGsServer).GetConcentratorConfig(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GtwGs_GetMQTTConnectionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GtwGsServer).GetMQTTConnectionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GtwGs/GetMQTTConnectionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GtwGsServer).GetMQTTConnectionInfo(ctx, req.(*GatewayIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _GtwGs_GetMQTTV2ConnectionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GtwGsServer).GetMQTTV2ConnectionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GtwGs/GetMQTTV2ConnectionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GtwGsServer).GetMQTTV2ConnectionInfo(ctx, req.(*GatewayIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _GtwGs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.GtwGs",
	HandlerType: (*GtwGsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConcentratorConfig",
			Handler:    _GtwGs_GetConcentratorConfig_Handler,
		},
		{
			MethodName: "GetMQTTConnectionInfo",
			Handler:    _GtwGs_GetMQTTConnectionInfo_Handler,
		},
		{
			MethodName: "GetMQTTV2ConnectionInfo",
			Handler:    _GtwGs_GetMQTTV2ConnectionInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LinkGateway",
			Handler:       _GtwGs_LinkGateway_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "lorawan-stack/api/gatewayserver.proto",
}

// NsGsClient is the client API for NsGs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NsGsClient interface {
	// ScheduleDownlink instructs the Gateway Server to schedule a downlink message.
	// The Gateway Server may refuse if there are any conflicts in the schedule or
	// if a duty cycle prevents the gateway from transmitting.
	ScheduleDownlink(ctx context.Context, in *DownlinkMessage, opts ...grpc.CallOption) (*ScheduleDownlinkResponse, error)
}

type nsGsClient struct {
	cc *grpc.ClientConn
}

func NewNsGsClient(cc *grpc.ClientConn) NsGsClient {
	return &nsGsClient{cc}
}

func (c *nsGsClient) ScheduleDownlink(ctx context.Context, in *DownlinkMessage, opts ...grpc.CallOption) (*ScheduleDownlinkResponse, error) {
	out := new(ScheduleDownlinkResponse)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.NsGs/ScheduleDownlink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NsGsServer is the server API for NsGs service.
type NsGsServer interface {
	// ScheduleDownlink instructs the Gateway Server to schedule a downlink message.
	// The Gateway Server may refuse if there are any conflicts in the schedule or
	// if a duty cycle prevents the gateway from transmitting.
	ScheduleDownlink(context.Context, *DownlinkMessage) (*ScheduleDownlinkResponse, error)
}

// UnimplementedNsGsServer can be embedded to have forward compatible implementations.
type UnimplementedNsGsServer struct {
}

func (*UnimplementedNsGsServer) ScheduleDownlink(ctx context.Context, req *DownlinkMessage) (*ScheduleDownlinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleDownlink not implemented")
}

func RegisterNsGsServer(s *grpc.Server, srv NsGsServer) {
	s.RegisterService(&_NsGs_serviceDesc, srv)
}

func _NsGs_ScheduleDownlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownlinkMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NsGsServer).ScheduleDownlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.NsGs/ScheduleDownlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NsGsServer).ScheduleDownlink(ctx, req.(*DownlinkMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _NsGs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.NsGs",
	HandlerType: (*NsGsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScheduleDownlink",
			Handler:    _NsGs_ScheduleDownlink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/gatewayserver.proto",
}

// GsClient is the client API for Gs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GsClient interface {
	// Get statistics about the current gateway connection to the Gateway Server.
	// This is not persisted between reconnects.
	GetGatewayConnectionStats(ctx context.Context, in *GatewayIdentifiers, opts ...grpc.CallOption) (*GatewayConnectionStats, error)
}

type gsClient struct {
	cc *grpc.ClientConn
}

func NewGsClient(cc *grpc.ClientConn) GsClient {
	return &gsClient{cc}
}

func (c *gsClient) GetGatewayConnectionStats(ctx context.Context, in *GatewayIdentifiers, opts ...grpc.CallOption) (*GatewayConnectionStats, error) {
	out := new(GatewayConnectionStats)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.Gs/GetGatewayConnectionStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GsServer is the server API for Gs service.
type GsServer interface {
	// Get statistics about the current gateway connection to the Gateway Server.
	// This is not persisted between reconnects.
	GetGatewayConnectionStats(context.Context, *GatewayIdentifiers) (*GatewayConnectionStats, error)
}

// UnimplementedGsServer can be embedded to have forward compatible implementations.
type UnimplementedGsServer struct {
}

func (*UnimplementedGsServer) GetGatewayConnectionStats(ctx context.Context, req *GatewayIdentifiers) (*GatewayConnectionStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGatewayConnectionStats not implemented")
}

func RegisterGsServer(s *grpc.Server, srv GsServer) {
	s.RegisterService(&_Gs_serviceDesc, srv)
}

func _Gs_GetGatewayConnectionStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GsServer).GetGatewayConnectionStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.Gs/GetGatewayConnectionStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GsServer).GetGatewayConnectionStats(ctx, req.(*GatewayIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.Gs",
	HandlerType: (*GsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGatewayConnectionStats",
			Handler:    _Gs_GetGatewayConnectionStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/gatewayserver.proto",
}

func (m *GatewayUp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayUp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayUp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxAcknowledgment != nil {
		{
			size, err := m.TxAcknowledgment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGatewayserver(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.GatewayStatus != nil {
		{
			size, err := m.GatewayStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGatewayserver(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.UplinkMessages) > 0 {
		for iNdEx := len(m.UplinkMessages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UplinkMessages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGatewayserver(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GatewayDown) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayDown) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayDown) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DownlinkMessage != nil {
		{
			size, err := m.DownlinkMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGatewayserver(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScheduleDownlinkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScheduleDownlinkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScheduleDownlinkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n4, err4 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.Delay, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.Delay):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintGatewayserver(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ScheduleDownlinkErrorDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScheduleDownlinkErrorDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScheduleDownlinkErrorDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PathErrors) > 0 {
		for iNdEx := len(m.PathErrors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PathErrors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGatewayserver(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintGatewayserver(dAtA []byte, offset int, v uint64) int {
	offset -= sovGatewayserver(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedGatewayUp(r randyGatewayserver, easy bool) *GatewayUp {
	this := &GatewayUp{}
	if r.Intn(5) != 0 {
		v1 := r.Intn(5)
		this.UplinkMessages = make([]*UplinkMessage, v1)
		for i := 0; i < v1; i++ {
			this.UplinkMessages[i] = NewPopulatedUplinkMessage(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		this.GatewayStatus = NewPopulatedGatewayStatus(r, easy)
	}
	if r.Intn(5) != 0 {
		this.TxAcknowledgment = NewPopulatedTxAcknowledgment(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGatewayDown(r randyGatewayserver, easy bool) *GatewayDown {
	this := &GatewayDown{}
	if r.Intn(5) != 0 {
		this.DownlinkMessage = NewPopulatedDownlinkMessage(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedScheduleDownlinkResponse(r randyGatewayserver, easy bool) *ScheduleDownlinkResponse {
	this := &ScheduleDownlinkResponse{}
	v2 := github_com_gogo_protobuf_types.NewPopulatedStdDuration(r, easy)
	this.Delay = *v2
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedScheduleDownlinkErrorDetails(r randyGatewayserver, easy bool) *ScheduleDownlinkErrorDetails {
	this := &ScheduleDownlinkErrorDetails{}
	if r.Intn(5) == 0 {
		v3 := r.Intn(5)
		this.PathErrors = make([]*ErrorDetails, v3)
		for i := 0; i < v3; i++ {
			this.PathErrors[i] = NewPopulatedErrorDetails(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyGatewayserver interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneGatewayserver(r randyGatewayserver) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringGatewayserver(r randyGatewayserver) string {
	v4 := r.Intn(100)
	tmps := make([]rune, v4)
	for i := 0; i < v4; i++ {
		tmps[i] = randUTF8RuneGatewayserver(r)
	}
	return string(tmps)
}
func randUnrecognizedGatewayserver(r randyGatewayserver, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldGatewayserver(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldGatewayserver(dAtA []byte, r randyGatewayserver, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateGatewayserver(dAtA, uint64(key))
		v5 := r.Int63()
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		dAtA = encodeVarintPopulateGatewayserver(dAtA, uint64(v5))
	case 1:
		dAtA = encodeVarintPopulateGatewayserver(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateGatewayserver(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateGatewayserver(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateGatewayserver(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateGatewayserver(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *GatewayUp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UplinkMessages) > 0 {
		for _, e := range m.UplinkMessages {
			l = e.Size()
			n += 1 + l + sovGatewayserver(uint64(l))
		}
	}
	if m.GatewayStatus != nil {
		l = m.GatewayStatus.Size()
		n += 1 + l + sovGatewayserver(uint64(l))
	}
	if m.TxAcknowledgment != nil {
		l = m.TxAcknowledgment.Size()
		n += 1 + l + sovGatewayserver(uint64(l))
	}
	return n
}

func (m *GatewayDown) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DownlinkMessage != nil {
		l = m.DownlinkMessage.Size()
		n += 1 + l + sovGatewayserver(uint64(l))
	}
	return n
}

func (m *ScheduleDownlinkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.Delay)
	n += 1 + l + sovGatewayserver(uint64(l))
	return n
}

func (m *ScheduleDownlinkErrorDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PathErrors) > 0 {
		for _, e := range m.PathErrors {
			l = e.Size()
			n += 1 + l + sovGatewayserver(uint64(l))
		}
	}
	return n
}

func sovGatewayserver(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGatewayserver(x uint64) (n int) {
	return sovGatewayserver((x << 1) ^ uint64((int64(x) >> 63)))
}
func (this *GatewayUp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUplinkMessages := "[]*UplinkMessage{"
	for _, f := range this.UplinkMessages {
		repeatedStringForUplinkMessages += strings.Replace(fmt.Sprintf("%v", f), "UplinkMessage", "UplinkMessage", 1) + ","
	}
	repeatedStringForUplinkMessages += "}"
	s := strings.Join([]string{`&GatewayUp{`,
		`UplinkMessages:` + repeatedStringForUplinkMessages + `,`,
		`GatewayStatus:` + strings.Replace(fmt.Sprintf("%v", this.GatewayStatus), "GatewayStatus", "GatewayStatus", 1) + `,`,
		`TxAcknowledgment:` + strings.Replace(fmt.Sprintf("%v", this.TxAcknowledgment), "TxAcknowledgment", "TxAcknowledgment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayDown) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayDown{`,
		`DownlinkMessage:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkMessage), "DownlinkMessage", "DownlinkMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScheduleDownlinkResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScheduleDownlinkResponse{`,
		`Delay:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Delay), "Duration", "types.Duration", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScheduleDownlinkErrorDetails) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPathErrors := "[]*ErrorDetails{"
	for _, f := range this.PathErrors {
		repeatedStringForPathErrors += strings.Replace(fmt.Sprintf("%v", f), "ErrorDetails", "ErrorDetails", 1) + ","
	}
	repeatedStringForPathErrors += "}"
	s := strings.Join([]string{`&ScheduleDownlinkErrorDetails{`,
		`PathErrors:` + repeatedStringForPathErrors + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGatewayserver(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GatewayUp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGatewayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayUp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayUp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplinkMessages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGatewayserver
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGatewayserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UplinkMessages = append(m.UplinkMessages, &UplinkMessage{})
			if err := m.UplinkMessages[len(m.UplinkMessages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGatewayserver
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGatewayserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GatewayStatus == nil {
				m.GatewayStatus = &GatewayStatus{}
			}
			if err := m.GatewayStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxAcknowledgment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGatewayserver
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGatewayserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxAcknowledgment == nil {
				m.TxAcknowledgment = &TxAcknowledgment{}
			}
			if err := m.TxAcknowledgment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGatewayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGatewayserver
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGatewayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayDown) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGatewayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayDown: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayDown: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGatewayserver
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGatewayserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DownlinkMessage == nil {
				m.DownlinkMessage = &DownlinkMessage{}
			}
			if err := m.DownlinkMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGatewayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGatewayserver
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGatewayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScheduleDownlinkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGatewayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScheduleDownlinkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScheduleDownlinkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGatewayserver
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGatewayserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.Delay, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGatewayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGatewayserver
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGatewayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScheduleDownlinkErrorDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGatewayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScheduleDownlinkErrorDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScheduleDownlinkErrorDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathErrors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGatewayserver
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGatewayserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PathErrors = append(m.PathErrors, &ErrorDetails{})
			if err := m.PathErrors[len(m.PathErrors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGatewayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGatewayserver
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGatewayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGatewayserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGatewayserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGatewayserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGatewayserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGatewayserver
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGatewayserver
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGatewayserver
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGatewayserver        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGatewayserver          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGatewayserver = fmt.Errorf("proto: unexpected end of group")
)
