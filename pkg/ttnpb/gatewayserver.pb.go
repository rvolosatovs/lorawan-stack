// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/TheThingsNetwork/ttn/api/gatewayserver.proto

package ttnpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import google_protobuf1 "github.com/gogo/protobuf/types"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// GatewayUp may contain zero or more uplink messages and/or a status message for the gateway.
type GatewayUp struct {
	UplinkMessage []*UplinkMessage `protobuf:"bytes,1,rep,name=uplink_message,json=uplinkMessage" json:"uplink_message,omitempty"`
	GatewayStatus *GatewayStatus   `protobuf:"bytes,2,opt,name=gateway_status,json=gatewayStatus" json:"gateway_status,omitempty"`
}

func (m *GatewayUp) Reset()                    { *m = GatewayUp{} }
func (*GatewayUp) ProtoMessage()               {}
func (*GatewayUp) Descriptor() ([]byte, []int) { return fileDescriptorGatewayserver, []int{0} }

func (m *GatewayUp) GetUplinkMessage() []*UplinkMessage {
	if m != nil {
		return m.UplinkMessage
	}
	return nil
}

func (m *GatewayUp) GetGatewayStatus() *GatewayStatus {
	if m != nil {
		return m.GatewayStatus
	}
	return nil
}

// GatewayDown contains downlink messages for the gateway
type GatewayDown struct {
	DownlinkMessage *DownlinkMessage `protobuf:"bytes,1,opt,name=downlink_message,json=downlinkMessage" json:"downlink_message,omitempty"`
}

func (m *GatewayDown) Reset()                    { *m = GatewayDown{} }
func (*GatewayDown) ProtoMessage()               {}
func (*GatewayDown) Descriptor() ([]byte, []int) { return fileDescriptorGatewayserver, []int{1} }

func (m *GatewayDown) GetDownlinkMessage() *DownlinkMessage {
	if m != nil {
		return m.DownlinkMessage
	}
	return nil
}

func init() {
	proto.RegisterType((*GatewayUp)(nil), "ttn.v3.GatewayUp")
	proto.RegisterType((*GatewayDown)(nil), "ttn.v3.GatewayDown")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GtwGs service

type GtwGsClient interface {
	// Link the gateway to the gateway server. The authentication information will
	// be used to determine the gateway ID. If no authentication information is present,
	// this gateway may not be used for downlink.
	Link(ctx context.Context, opts ...grpc.CallOption) (GtwGs_LinkClient, error)
}

type gtwGsClient struct {
	cc *grpc.ClientConn
}

func NewGtwGsClient(cc *grpc.ClientConn) GtwGsClient {
	return &gtwGsClient{cc}
}

func (c *gtwGsClient) Link(ctx context.Context, opts ...grpc.CallOption) (GtwGs_LinkClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GtwGs_serviceDesc.Streams[0], c.cc, "/ttn.v3.GtwGs/Link", opts...)
	if err != nil {
		return nil, err
	}
	x := &gtwGsLinkClient{stream}
	return x, nil
}

type GtwGs_LinkClient interface {
	Send(*GatewayUp) error
	Recv() (*GatewayDown, error)
	grpc.ClientStream
}

type gtwGsLinkClient struct {
	grpc.ClientStream
}

func (x *gtwGsLinkClient) Send(m *GatewayUp) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gtwGsLinkClient) Recv() (*GatewayDown, error) {
	m := new(GatewayDown)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GtwGs service

type GtwGsServer interface {
	// Link the gateway to the gateway server. The authentication information will
	// be used to determine the gateway ID. If no authentication information is present,
	// this gateway may not be used for downlink.
	Link(GtwGs_LinkServer) error
}

func RegisterGtwGsServer(s *grpc.Server, srv GtwGsServer) {
	s.RegisterService(&_GtwGs_serviceDesc, srv)
}

func _GtwGs_Link_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GtwGsServer).Link(&gtwGsLinkServer{stream})
}

type GtwGs_LinkServer interface {
	Send(*GatewayDown) error
	Recv() (*GatewayUp, error)
	grpc.ServerStream
}

type gtwGsLinkServer struct {
	grpc.ServerStream
}

func (x *gtwGsLinkServer) Send(m *GatewayDown) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gtwGsLinkServer) Recv() (*GatewayUp, error) {
	m := new(GatewayUp)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GtwGs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.v3.GtwGs",
	HandlerType: (*GtwGsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Link",
			Handler:       _GtwGs_Link_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/TheThingsNetwork/ttn/api/gatewayserver.proto",
}

// Client API for NsGs service

type NsGsClient interface {
	// ScheduleDownlink instructs the gateway server to schedule a downlink message.
	// The gateway server may refuse if there are any conflicts in the schedule or
	// if a duty cycle prevents the gateway from transmitting.
	ScheduleDownlink(ctx context.Context, in *DownlinkMessage, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type nsGsClient struct {
	cc *grpc.ClientConn
}

func NewNsGsClient(cc *grpc.ClientConn) NsGsClient {
	return &nsGsClient{cc}
}

func (c *nsGsClient) ScheduleDownlink(ctx context.Context, in *DownlinkMessage, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/ttn.v3.NsGs/ScheduleDownlink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NsGs service

type NsGsServer interface {
	// ScheduleDownlink instructs the gateway server to schedule a downlink message.
	// The gateway server may refuse if there are any conflicts in the schedule or
	// if a duty cycle prevents the gateway from transmitting.
	ScheduleDownlink(context.Context, *DownlinkMessage) (*google_protobuf1.Empty, error)
}

func RegisterNsGsServer(s *grpc.Server, srv NsGsServer) {
	s.RegisterService(&_NsGs_serviceDesc, srv)
}

func _NsGs_ScheduleDownlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownlinkMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NsGsServer).ScheduleDownlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.NsGs/ScheduleDownlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NsGsServer).ScheduleDownlink(ctx, req.(*DownlinkMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _NsGs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.v3.NsGs",
	HandlerType: (*NsGsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScheduleDownlink",
			Handler:    _NsGs_ScheduleDownlink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/ttn/api/gatewayserver.proto",
}

// Client API for Gs service

type GsClient interface {
	GetGatewayObservations(ctx context.Context, in *GatewayIdentifiers, opts ...grpc.CallOption) (*GatewayObservations, error)
}

type gsClient struct {
	cc *grpc.ClientConn
}

func NewGsClient(cc *grpc.ClientConn) GsClient {
	return &gsClient{cc}
}

func (c *gsClient) GetGatewayObservations(ctx context.Context, in *GatewayIdentifiers, opts ...grpc.CallOption) (*GatewayObservations, error) {
	out := new(GatewayObservations)
	err := grpc.Invoke(ctx, "/ttn.v3.Gs/GetGatewayObservations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Gs service

type GsServer interface {
	GetGatewayObservations(context.Context, *GatewayIdentifiers) (*GatewayObservations, error)
}

func RegisterGsServer(s *grpc.Server, srv GsServer) {
	s.RegisterService(&_Gs_serviceDesc, srv)
}

func _Gs_GetGatewayObservations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GsServer).GetGatewayObservations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.v3.Gs/GetGatewayObservations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GsServer).GetGatewayObservations(ctx, req.(*GatewayIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.v3.Gs",
	HandlerType: (*GsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGatewayObservations",
			Handler:    _Gs_GetGatewayObservations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/ttn/api/gatewayserver.proto",
}

func (m *GatewayUp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayUp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UplinkMessage) > 0 {
		for _, msg := range m.UplinkMessage {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGatewayserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.GatewayStatus != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGatewayserver(dAtA, i, uint64(m.GatewayStatus.Size()))
		n1, err := m.GatewayStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *GatewayDown) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayDown) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DownlinkMessage != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGatewayserver(dAtA, i, uint64(m.DownlinkMessage.Size()))
		n2, err := m.DownlinkMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func encodeFixed64Gatewayserver(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Gatewayserver(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGatewayserver(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GatewayUp) Size() (n int) {
	var l int
	_ = l
	if len(m.UplinkMessage) > 0 {
		for _, e := range m.UplinkMessage {
			l = e.Size()
			n += 1 + l + sovGatewayserver(uint64(l))
		}
	}
	if m.GatewayStatus != nil {
		l = m.GatewayStatus.Size()
		n += 1 + l + sovGatewayserver(uint64(l))
	}
	return n
}

func (m *GatewayDown) Size() (n int) {
	var l int
	_ = l
	if m.DownlinkMessage != nil {
		l = m.DownlinkMessage.Size()
		n += 1 + l + sovGatewayserver(uint64(l))
	}
	return n
}

func sovGatewayserver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGatewayserver(x uint64) (n int) {
	return sovGatewayserver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GatewayUp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayUp{`,
		`UplinkMessage:` + strings.Replace(fmt.Sprintf("%v", this.UplinkMessage), "UplinkMessage", "UplinkMessage", 1) + `,`,
		`GatewayStatus:` + strings.Replace(fmt.Sprintf("%v", this.GatewayStatus), "GatewayStatus", "GatewayStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayDown) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayDown{`,
		`DownlinkMessage:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkMessage), "DownlinkMessage", "DownlinkMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGatewayserver(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GatewayUp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGatewayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayUp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayUp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplinkMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGatewayserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UplinkMessage = append(m.UplinkMessage, &UplinkMessage{})
			if err := m.UplinkMessage[len(m.UplinkMessage)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGatewayserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GatewayStatus == nil {
				m.GatewayStatus = &GatewayStatus{}
			}
			if err := m.GatewayStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGatewayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGatewayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayDown) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGatewayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayDown: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayDown: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGatewayserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DownlinkMessage == nil {
				m.DownlinkMessage = &DownlinkMessage{}
			}
			if err := m.DownlinkMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGatewayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGatewayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGatewayserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGatewayserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGatewayserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGatewayserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGatewayserver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGatewayserver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGatewayserver(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGatewayserver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGatewayserver   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/gatewayserver.proto", fileDescriptorGatewayserver)
}

var fileDescriptorGatewayserver = []byte{
	// 418 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x4d, 0x8b, 0xd3, 0x40,
	0x18, 0xde, 0x59, 0xd7, 0x05, 0x67, 0x59, 0x5d, 0x47, 0x5c, 0x97, 0x14, 0x42, 0xe9, 0xa9, 0x1e,
	0x9c, 0x68, 0x8a, 0x78, 0xd0, 0x53, 0xad, 0x04, 0x51, 0x2b, 0xfd, 0x42, 0xf0, 0x52, 0x92, 0x66,
	0x3a, 0x19, 0xd2, 0xce, 0x0c, 0x99, 0x49, 0x83, 0x37, 0x6f, 0xfe, 0x35, 0x8f, 0x1e, 0x3d, 0x6a,
	0x4e, 0x1e, 0xfd, 0x09, 0x92, 0x64, 0x42, 0x63, 0x40, 0xec, 0x9e, 0x92, 0xf7, 0x7d, 0x78, 0x3e,
	0xe6, 0xe1, 0x85, 0xcf, 0x28, 0xd3, 0x51, 0x1a, 0xe0, 0x95, 0xd8, 0x3a, 0xf3, 0x88, 0xcc, 0x23,
	0xc6, 0xa9, 0x1a, 0x13, 0x9d, 0x89, 0x24, 0x76, 0xb4, 0xe6, 0x8e, 0x2f, 0x99, 0x43, 0x7d, 0x4d,
	0x32, 0xff, 0x93, 0x22, 0xc9, 0x8e, 0x24, 0x58, 0x26, 0x42, 0x0b, 0x74, 0xaa, 0x35, 0xc7, 0xbb,
	0x81, 0xf5, 0xa8, 0x21, 0x40, 0x05, 0x15, 0x4e, 0x09, 0x07, 0xe9, 0xba, 0x9c, 0xca, 0xa1, 0xfc,
	0xab, 0x68, 0xd6, 0xd3, 0x43, 0xfc, 0x58, 0x48, 0xb8, 0x66, 0x6b, 0x46, 0x12, 0x65, 0x68, 0x4f,
	0xae, 0x11, 0xd3, 0x50, 0xdc, 0x43, 0x28, 0x5b, 0xa2, 0x94, 0x4f, 0x49, 0x6d, 0xd3, 0xa1, 0x42,
	0xd0, 0x0d, 0xd9, 0xbf, 0x81, 0x6c, 0xa5, 0x36, 0x82, 0xbd, 0x2f, 0x00, 0xde, 0xf2, 0x2a, 0x8b,
	0x85, 0x44, 0x2f, 0xe0, 0xed, 0x54, 0x6e, 0x18, 0x8f, 0x97, 0x46, 0xe3, 0x0a, 0x74, 0x6f, 0xf4,
	0xcf, 0xdc, 0xfb, 0xb8, 0x2a, 0x06, 0x2f, 0x4a, 0xf4, 0x5d, 0x05, 0x4e, 0xcf, 0xd3, 0xe6, 0x58,
	0xb0, 0x4d, 0xda, 0xa5, 0xd2, 0xbe, 0x4e, 0xd5, 0xd5, 0x71, 0x17, 0x34, 0xd9, 0xc6, 0x68, 0x56,
	0x82, 0xd3, 0x73, 0xda, 0x1c, 0x7b, 0x13, 0x78, 0x66, 0xf0, 0x91, 0xc8, 0x38, 0x1a, 0xc2, 0x8b,
	0x50, 0x64, 0xbc, 0x15, 0xa6, 0x90, 0x7b, 0x50, 0xcb, 0x8d, 0x0c, 0x5e, 0xc7, 0xb9, 0x13, 0xfe,
	0xbd, 0x70, 0x9f, 0xc3, 0x9b, 0x9e, 0xce, 0x3c, 0x85, 0x5c, 0x78, 0xf2, 0x96, 0xf1, 0x18, 0xdd,
	0x6d, 0x25, 0x59, 0x48, 0xeb, 0x5e, 0x6b, 0x55, 0x88, 0xf6, 0xc1, 0x63, 0xe0, 0xbe, 0x81, 0x27,
	0x63, 0xe5, 0x29, 0xf4, 0x12, 0x5e, 0xcc, 0x56, 0x11, 0x09, 0xd3, 0x0d, 0xa9, 0x0d, 0xd1, 0xbf,
	0x22, 0x58, 0x97, 0xb8, 0x2a, 0x1b, 0xd7, 0x65, 0xe3, 0x57, 0x45, 0xd9, 0xee, 0x07, 0x78, 0xec,
	0x29, 0x34, 0x81, 0x97, 0x1e, 0xd1, 0xc6, 0xe8, 0x7d, 0x50, 0x9c, 0x9e, 0xaf, 0x99, 0xe0, 0x0a,
	0x59, 0xad, 0x14, 0xaf, 0xf7, 0xc7, 0x62, 0x75, 0x5a, 0x58, 0x93, 0x38, 0xf4, 0xbe, 0xff, 0xb4,
	0x8f, 0x3e, 0xe7, 0x36, 0xf8, 0x9a, 0xdb, 0xe0, 0x5b, 0x6e, 0x83, 0x1f, 0xb9, 0x0d, 0x7e, 0xe5,
	0xf6, 0xd1, 0xef, 0xdc, 0x06, 0x1f, 0x1f, 0xfe, 0xef, 0x5c, 0x64, 0x4c, 0x8b, 0xaf, 0x0c, 0x82,
	0xd3, 0x32, 0xf1, 0xe0, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa5, 0x95, 0x45, 0x03, 0x3c, 0x03,
	0x00, 0x00,
}
