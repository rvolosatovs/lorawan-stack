// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/TheThingsNetwork/ttn/api/auth.proto

package ttnpb

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// GrantType enum defines the OAuth2 flows a third-party client can use to get
// access to a token.
type GrantType int32

const (
	// Grant type used to exchange an authorization code for an access token.
	GRANT_AUTHORIZATION_CODE GrantType = 0
	// Grant type used to exchange an user ID and password for an access token.
	GRANT_PASSWORD GrantType = 1
	// Grant type used to exchange a refresh token for an access token.
	GRANT_REFRESH_TOKEN GrantType = 2
)

var GrantType_name = map[int32]string{
	0: "GRANT_AUTHORIZATION_CODE",
	1: "GRANT_PASSWORD",
	2: "GRANT_REFRESH_TOKEN",
}
var GrantType_value = map[string]int32{
	"GRANT_AUTHORIZATION_CODE": 0,
	"GRANT_PASSWORD":           1,
	"GRANT_REFRESH_TOKEN":      2,
}

func (GrantType) EnumDescriptor() ([]byte, []int) { return fileDescriptorAuth, []int{0} }

func init() {
	proto.RegisterEnum("ttn.v3.GrantType", GrantType_name, GrantType_value)
	golang_proto.RegisterEnum("ttn.v3.GrantType", GrantType_name, GrantType_value)
}
func (x GrantType) String() string {
	s, ok := GrantType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

func init() { proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/auth.proto", fileDescriptorAuth) }
func init() {
	golang_proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/auth.proto", fileDescriptorAuth)
}

var fileDescriptorAuth = []byte{
	// 329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xb1, 0x4b, 0xeb, 0x50,
	0x14, 0xc6, 0xef, 0x79, 0x3c, 0x0a, 0x2f, 0xc3, 0xa3, 0xc4, 0x41, 0x29, 0xf2, 0xed, 0x0a, 0x26,
	0x42, 0xff, 0x82, 0x68, 0x63, 0x5b, 0x84, 0x44, 0xd2, 0x88, 0x50, 0x84, 0xd2, 0x48, 0x4d, 0x42,
	0x31, 0x09, 0xe9, 0xad, 0xe2, 0xd6, 0xb1, 0xa3, 0xa3, 0x9b, 0x82, 0x4b, 0xc7, 0x8e, 0x1d, 0x3b,
	0x76, 0xec, 0xd8, 0xb1, 0xb9, 0x77, 0xe9, 0xd8, 0xb1, 0xa3, 0x98, 0x2c, 0x6e, 0x3a, 0x9d, 0xf3,
	0x9d, 0x8f, 0x1f, 0x07, 0x7e, 0x8a, 0xe6, 0x87, 0x3c, 0x18, 0x7a, 0xda, 0x5d, 0xfc, 0xa0, 0xbb,
	0x41, 0xcf, 0x0d, 0xc2, 0xc8, 0x1f, 0x58, 0x3d, 0xfe, 0x14, 0xa7, 0x7d, 0x9d, 0xf3, 0x48, 0xef,
	0x26, 0xa1, 0xde, 0x1d, 0xf2, 0x40, 0x4b, 0xd2, 0x98, 0xc7, 0x6a, 0x89, 0xf3, 0x48, 0x7b, 0xac,
	0x56, 0x4e, 0xbe, 0x71, 0x7e, 0xec, 0xc7, 0x7a, 0x5e, 0x7b, 0xc3, 0xfb, 0x3c, 0xe5, 0x21, 0xdf,
	0x0a, 0xac, 0x72, 0xfa, 0x9b, 0x37, 0x69, 0xe8, 0x07, 0x7c, 0x50, 0x10, 0xc7, 0xb7, 0xca, 0xbf,
	0x7a, 0xda, 0x8d, 0xb8, 0xfb, 0x9c, 0xf4, 0xd4, 0x43, 0xe5, 0xa0, 0xee, 0x18, 0x96, 0xdb, 0x31,
	0xae, 0xdd, 0x86, 0xed, 0x34, 0xdb, 0x86, 0xdb, 0xb4, 0xad, 0xce, 0xb9, 0x5d, 0x33, 0xcb, 0x4c,
	0x55, 0x95, 0xff, 0x45, 0x7b, 0x65, 0xb4, 0x5a, 0x37, 0xb6, 0x53, 0x2b, 0x93, 0xba, 0xaf, 0xec,
	0x15, 0x37, 0xc7, 0xbc, 0x70, 0xcc, 0x56, 0xa3, 0xe3, 0xda, 0x97, 0xa6, 0x55, 0xfe, 0x53, 0xf9,
	0x3b, 0xfe, 0x00, 0x3b, 0x7b, 0xa3, 0x45, 0x06, 0x5a, 0x66, 0xa0, 0x55, 0x06, 0x5a, 0x67, 0xa0,
	0x4d, 0x06, 0xb6, 0xcd, 0xc0, 0x76, 0x19, 0x68, 0x24, 0xc0, 0xc6, 0x02, 0x6c, 0x22, 0x40, 0x53,
	0x01, 0x36, 0x13, 0xa0, 0xb9, 0x00, 0x2d, 0x04, 0x68, 0x29, 0x40, 0x2b, 0x01, 0xb6, 0x16, 0xa0,
	0x8d, 0x00, 0xdb, 0x0a, 0xd0, 0x4e, 0x80, 0x8d, 0x24, 0xd8, 0x58, 0x82, 0x5e, 0x24, 0xd8, 0xab,
	0x04, 0xbd, 0x4b, 0xb0, 0x89, 0x04, 0x9b, 0x4a, 0xd0, 0x4c, 0x82, 0xe6, 0x12, 0xd4, 0x3e, 0xfa,
	0x49, 0x43, 0xd2, 0xf7, 0xbf, 0x66, 0xe2, 0x79, 0xa5, 0x5c, 0x43, 0xf5, 0x33, 0x00, 0x00, 0xff,
	0xff, 0x6b, 0x1e, 0xdc, 0x4f, 0xa1, 0x01, 0x00, 0x00,
}
