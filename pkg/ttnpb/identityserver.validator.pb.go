// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/identityserver.proto

package ttnpb // import "go.thethings.network/lorawan-stack/pkg/ttnpb"

import github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import time "time"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

func (this *AuthInfoResponse) Validate() error {
	if oneOfNester, ok := this.GetAccessMethod().(*AuthInfoResponse_APIKey); ok {
		if oneOfNester.APIKey != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(oneOfNester.APIKey); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("APIKey", err)
			}
		}
	}
	if oneOfNester, ok := this.GetAccessMethod().(*AuthInfoResponse_OAuthAccessToken); ok {
		if oneOfNester.OAuthAccessToken != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(oneOfNester.OAuthAccessToken); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("OAuthAccessToken", err)
			}
		}
	}
	if this.UniversalRights != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.UniversalRights); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("UniversalRights", err)
		}
	}
	return nil
}
func (this *AuthInfoResponse_APIKeyAccess) Validate() error {
	if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(&(this.APIKey)); err != nil {
		return github_com_mwitkow_go_proto_validators.FieldError("APIKey", err)
	}
	if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(&(this.EntityIDs)); err != nil {
		return github_com_mwitkow_go_proto_validators.FieldError("EntityIDs", err)
	}
	return nil
}
