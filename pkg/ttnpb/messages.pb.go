// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/messages.proto

package ttnpb

import (
	bytes "bytes"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
	time "time"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PayloadFormatter int32

const (
	// No payload formatter to work with raw payload only.
	PayloadFormatter_FORMATTER_NONE PayloadFormatter = 0
	// Use payload formatter for the end device type from a repository.
	PayloadFormatter_FORMATTER_REPOSITORY PayloadFormatter = 1
	// gRPC service payload formatter. The parameter is the host:port of the service.
	PayloadFormatter_FORMATTER_GRPC_SERVICE PayloadFormatter = 2
	// Custom payload formatter that executes Javascript code. The parameter is a JavaScript filename.
	PayloadFormatter_FORMATTER_JAVASCRIPT PayloadFormatter = 3
	// CayenneLPP payload formatter.
	PayloadFormatter_FORMATTER_CAYENNELPP PayloadFormatter = 4
)

var PayloadFormatter_name = map[int32]string{
	0: "FORMATTER_NONE",
	1: "FORMATTER_REPOSITORY",
	2: "FORMATTER_GRPC_SERVICE",
	3: "FORMATTER_JAVASCRIPT",
	4: "FORMATTER_CAYENNELPP",
}

var PayloadFormatter_value = map[string]int32{
	"FORMATTER_NONE":         0,
	"FORMATTER_REPOSITORY":   1,
	"FORMATTER_GRPC_SERVICE": 2,
	"FORMATTER_JAVASCRIPT":   3,
	"FORMATTER_CAYENNELPP":   4,
}

func (PayloadFormatter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bbc6bff5780bdc9d, []int{0}
}

type TxAcknowledgment_Result int32

const (
	TxAcknowledgment_SUCCESS          TxAcknowledgment_Result = 0
	TxAcknowledgment_UNKNOWN_ERROR    TxAcknowledgment_Result = 1
	TxAcknowledgment_TOO_LATE         TxAcknowledgment_Result = 2
	TxAcknowledgment_TOO_EARLY        TxAcknowledgment_Result = 3
	TxAcknowledgment_COLLISION_PACKET TxAcknowledgment_Result = 4
	TxAcknowledgment_COLLISION_BEACON TxAcknowledgment_Result = 5
	TxAcknowledgment_TX_FREQ          TxAcknowledgment_Result = 6
	TxAcknowledgment_TX_POWER         TxAcknowledgment_Result = 7
	TxAcknowledgment_GPS_UNLOCKED     TxAcknowledgment_Result = 8
)

var TxAcknowledgment_Result_name = map[int32]string{
	0: "SUCCESS",
	1: "UNKNOWN_ERROR",
	2: "TOO_LATE",
	3: "TOO_EARLY",
	4: "COLLISION_PACKET",
	5: "COLLISION_BEACON",
	6: "TX_FREQ",
	7: "TX_POWER",
	8: "GPS_UNLOCKED",
}

var TxAcknowledgment_Result_value = map[string]int32{
	"SUCCESS":          0,
	"UNKNOWN_ERROR":    1,
	"TOO_LATE":         2,
	"TOO_EARLY":        3,
	"COLLISION_PACKET": 4,
	"COLLISION_BEACON": 5,
	"TX_FREQ":          6,
	"TX_POWER":         7,
	"GPS_UNLOCKED":     8,
}

func (TxAcknowledgment_Result) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bbc6bff5780bdc9d, []int{2, 0}
}

// Uplink message from the end device to the network
type UplinkMessage struct {
	RawPayload []byte        `protobuf:"bytes,1,opt,name=raw_payload,json=rawPayload,proto3" json:"raw_payload,omitempty"`
	Payload    *Message      `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Settings   TxSettings    `protobuf:"bytes,4,opt,name=settings,proto3" json:"settings"`
	RxMetadata []*RxMetadata `protobuf:"bytes,5,rep,name=rx_metadata,json=rxMetadata,proto3" json:"rx_metadata,omitempty"`
	// Server time when a component received the message.
	// The Gateway Server and Network Server set this value to their local server time of reception.
	ReceivedAt     time.Time `protobuf:"bytes,6,opt,name=received_at,json=receivedAt,proto3,stdtime" json:"received_at"`
	CorrelationIDs []string  `protobuf:"bytes,7,rep,name=correlation_ids,json=correlationIds,proto3" json:"correlation_ids,omitempty"`
	// Index of the device channel that received the message.
	// Set by Network Server.
	DeviceChannelIndex   uint32   `protobuf:"varint,9,opt,name=device_channel_index,json=deviceChannelIndex,proto3" json:"device_channel_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UplinkMessage) Reset()      { *m = UplinkMessage{} }
func (*UplinkMessage) ProtoMessage() {}
func (*UplinkMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbc6bff5780bdc9d, []int{0}
}
func (m *UplinkMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UplinkMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UplinkMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UplinkMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UplinkMessage.Merge(m, src)
}
func (m *UplinkMessage) XXX_Size() int {
	return m.Size()
}
func (m *UplinkMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_UplinkMessage.DiscardUnknown(m)
}

var xxx_messageInfo_UplinkMessage proto.InternalMessageInfo

func (m *UplinkMessage) GetRawPayload() []byte {
	if m != nil {
		return m.RawPayload
	}
	return nil
}

func (m *UplinkMessage) GetPayload() *Message {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *UplinkMessage) GetSettings() TxSettings {
	if m != nil {
		return m.Settings
	}
	return TxSettings{}
}

func (m *UplinkMessage) GetRxMetadata() []*RxMetadata {
	if m != nil {
		return m.RxMetadata
	}
	return nil
}

func (m *UplinkMessage) GetReceivedAt() time.Time {
	if m != nil {
		return m.ReceivedAt
	}
	return time.Time{}
}

func (m *UplinkMessage) GetCorrelationIDs() []string {
	if m != nil {
		return m.CorrelationIDs
	}
	return nil
}

func (m *UplinkMessage) GetDeviceChannelIndex() uint32 {
	if m != nil {
		return m.DeviceChannelIndex
	}
	return 0
}

// Downlink message from the network to the end device
type DownlinkMessage struct {
	RawPayload   []byte                `protobuf:"bytes,1,opt,name=raw_payload,json=rawPayload,proto3" json:"raw_payload,omitempty"`
	Payload      *Message              `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	EndDeviceIDs *EndDeviceIdentifiers `protobuf:"bytes,3,opt,name=end_device_ids,json=endDeviceIds,proto3" json:"end_device_ids,omitempty"`
	// Types that are valid to be assigned to Settings:
	//	*DownlinkMessage_Request
	//	*DownlinkMessage_Scheduled
	Settings             isDownlinkMessage_Settings `protobuf_oneof:"settings"`
	CorrelationIDs       []string                   `protobuf:"bytes,6,rep,name=correlation_ids,json=correlationIds,proto3" json:"correlation_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *DownlinkMessage) Reset()      { *m = DownlinkMessage{} }
func (*DownlinkMessage) ProtoMessage() {}
func (*DownlinkMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbc6bff5780bdc9d, []int{1}
}
func (m *DownlinkMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownlinkMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownlinkMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownlinkMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownlinkMessage.Merge(m, src)
}
func (m *DownlinkMessage) XXX_Size() int {
	return m.Size()
}
func (m *DownlinkMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_DownlinkMessage.DiscardUnknown(m)
}

var xxx_messageInfo_DownlinkMessage proto.InternalMessageInfo

type isDownlinkMessage_Settings interface {
	isDownlinkMessage_Settings()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DownlinkMessage_Request struct {
	Request *TxRequest `protobuf:"bytes,4,opt,name=request,proto3,oneof" json:"request,omitempty"`
}
type DownlinkMessage_Scheduled struct {
	Scheduled *TxSettings `protobuf:"bytes,5,opt,name=scheduled,proto3,oneof" json:"scheduled,omitempty"`
}

func (*DownlinkMessage_Request) isDownlinkMessage_Settings()   {}
func (*DownlinkMessage_Scheduled) isDownlinkMessage_Settings() {}

func (m *DownlinkMessage) GetSettings() isDownlinkMessage_Settings {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *DownlinkMessage) GetRawPayload() []byte {
	if m != nil {
		return m.RawPayload
	}
	return nil
}

func (m *DownlinkMessage) GetPayload() *Message {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *DownlinkMessage) GetEndDeviceIDs() *EndDeviceIdentifiers {
	if m != nil {
		return m.EndDeviceIDs
	}
	return nil
}

func (m *DownlinkMessage) GetRequest() *TxRequest {
	if x, ok := m.GetSettings().(*DownlinkMessage_Request); ok {
		return x.Request
	}
	return nil
}

func (m *DownlinkMessage) GetScheduled() *TxSettings {
	if x, ok := m.GetSettings().(*DownlinkMessage_Scheduled); ok {
		return x.Scheduled
	}
	return nil
}

func (m *DownlinkMessage) GetCorrelationIDs() []string {
	if m != nil {
		return m.CorrelationIDs
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DownlinkMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DownlinkMessage_Request)(nil),
		(*DownlinkMessage_Scheduled)(nil),
	}
}

type TxAcknowledgment struct {
	CorrelationIDs       []string                `protobuf:"bytes,1,rep,name=correlation_ids,json=correlationIds,proto3" json:"correlation_ids,omitempty"`
	Result               TxAcknowledgment_Result `protobuf:"varint,2,opt,name=result,proto3,enum=ttn.lorawan.v3.TxAcknowledgment_Result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *TxAcknowledgment) Reset()      { *m = TxAcknowledgment{} }
func (*TxAcknowledgment) ProtoMessage() {}
func (*TxAcknowledgment) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbc6bff5780bdc9d, []int{2}
}
func (m *TxAcknowledgment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxAcknowledgment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxAcknowledgment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxAcknowledgment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxAcknowledgment.Merge(m, src)
}
func (m *TxAcknowledgment) XXX_Size() int {
	return m.Size()
}
func (m *TxAcknowledgment) XXX_DiscardUnknown() {
	xxx_messageInfo_TxAcknowledgment.DiscardUnknown(m)
}

var xxx_messageInfo_TxAcknowledgment proto.InternalMessageInfo

func (m *TxAcknowledgment) GetCorrelationIDs() []string {
	if m != nil {
		return m.CorrelationIDs
	}
	return nil
}

func (m *TxAcknowledgment) GetResult() TxAcknowledgment_Result {
	if m != nil {
		return m.Result
	}
	return TxAcknowledgment_SUCCESS
}

type ApplicationUplink struct {
	// Join Server issued identifier for the session keys used by this uplink.
	SessionKeyID   []byte        `protobuf:"bytes,1,opt,name=session_key_id,json=sessionKeyId,proto3" json:"session_key_id,omitempty"`
	FPort          uint32        `protobuf:"varint,2,opt,name=f_port,json=fPort,proto3" json:"f_port,omitempty"`
	FCnt           uint32        `protobuf:"varint,3,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	FRMPayload     []byte        `protobuf:"bytes,4,opt,name=frm_payload,json=frmPayload,proto3" json:"frm_payload,omitempty"`
	DecodedPayload *types.Struct `protobuf:"bytes,5,opt,name=decoded_payload,json=decodedPayload,proto3" json:"decoded_payload,omitempty"`
	RxMetadata     []*RxMetadata `protobuf:"bytes,6,rep,name=rx_metadata,json=rxMetadata,proto3" json:"rx_metadata,omitempty"`
	Settings       TxSettings    `protobuf:"bytes,7,opt,name=settings,proto3" json:"settings"`
	// Server time when the Network Server received the message.
	ReceivedAt           time.Time `protobuf:"bytes,8,opt,name=received_at,json=receivedAt,proto3,stdtime" json:"received_at"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ApplicationUplink) Reset()      { *m = ApplicationUplink{} }
func (*ApplicationUplink) ProtoMessage() {}
func (*ApplicationUplink) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbc6bff5780bdc9d, []int{3}
}
func (m *ApplicationUplink) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationUplink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationUplink.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationUplink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationUplink.Merge(m, src)
}
func (m *ApplicationUplink) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationUplink) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationUplink.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationUplink proto.InternalMessageInfo

func (m *ApplicationUplink) GetSessionKeyID() []byte {
	if m != nil {
		return m.SessionKeyID
	}
	return nil
}

func (m *ApplicationUplink) GetFPort() uint32 {
	if m != nil {
		return m.FPort
	}
	return 0
}

func (m *ApplicationUplink) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

func (m *ApplicationUplink) GetFRMPayload() []byte {
	if m != nil {
		return m.FRMPayload
	}
	return nil
}

func (m *ApplicationUplink) GetDecodedPayload() *types.Struct {
	if m != nil {
		return m.DecodedPayload
	}
	return nil
}

func (m *ApplicationUplink) GetRxMetadata() []*RxMetadata {
	if m != nil {
		return m.RxMetadata
	}
	return nil
}

func (m *ApplicationUplink) GetSettings() TxSettings {
	if m != nil {
		return m.Settings
	}
	return TxSettings{}
}

func (m *ApplicationUplink) GetReceivedAt() time.Time {
	if m != nil {
		return m.ReceivedAt
	}
	return time.Time{}
}

type ApplicationLocation struct {
	Service              string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Location             `protobuf:"bytes,2,opt,name=location,proto3,embedded=location" json:"location"`
	Attributes           map[string]string `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ApplicationLocation) Reset()      { *m = ApplicationLocation{} }
func (*ApplicationLocation) ProtoMessage() {}
func (*ApplicationLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbc6bff5780bdc9d, []int{4}
}
func (m *ApplicationLocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationLocation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationLocation.Merge(m, src)
}
func (m *ApplicationLocation) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationLocation.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationLocation proto.InternalMessageInfo

func (m *ApplicationLocation) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *ApplicationLocation) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type ApplicationJoinAccept struct {
	// Join Server issued identifier for the session keys negotiated in this join.
	SessionKeyID []byte `protobuf:"bytes,1,opt,name=session_key_id,json=sessionKeyId,proto3" json:"session_key_id,omitempty"`
	// Encrypted Application Session Key (if Join Server sent it to Network Server).
	AppSKey *KeyEnvelope `protobuf:"bytes,2,opt,name=app_s_key,json=appSKey,proto3" json:"app_s_key,omitempty"`
	// Downlink messages in the queue that got invalidated because of the session change.
	InvalidatedDownlinks []*ApplicationDownlink `protobuf:"bytes,3,rep,name=invalidated_downlinks,json=invalidatedDownlinks,proto3" json:"invalidated_downlinks,omitempty"`
	// Indicates whether the security context refers to the pending session, i.e. when this join-accept is an answer to a
	// rejoin-request.
	PendingSession bool `protobuf:"varint,4,opt,name=pending_session,json=pendingSession,proto3" json:"pending_session,omitempty"`
	// Server time when the Network Server received the message.
	ReceivedAt           time.Time `protobuf:"bytes,8,opt,name=received_at,json=receivedAt,proto3,stdtime" json:"received_at"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ApplicationJoinAccept) Reset()      { *m = ApplicationJoinAccept{} }
func (*ApplicationJoinAccept) ProtoMessage() {}
func (*ApplicationJoinAccept) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbc6bff5780bdc9d, []int{5}
}
func (m *ApplicationJoinAccept) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationJoinAccept) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationJoinAccept.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationJoinAccept) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationJoinAccept.Merge(m, src)
}
func (m *ApplicationJoinAccept) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationJoinAccept) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationJoinAccept.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationJoinAccept proto.InternalMessageInfo

func (m *ApplicationJoinAccept) GetSessionKeyID() []byte {
	if m != nil {
		return m.SessionKeyID
	}
	return nil
}

func (m *ApplicationJoinAccept) GetAppSKey() *KeyEnvelope {
	if m != nil {
		return m.AppSKey
	}
	return nil
}

func (m *ApplicationJoinAccept) GetInvalidatedDownlinks() []*ApplicationDownlink {
	if m != nil {
		return m.InvalidatedDownlinks
	}
	return nil
}

func (m *ApplicationJoinAccept) GetPendingSession() bool {
	if m != nil {
		return m.PendingSession
	}
	return false
}

func (m *ApplicationJoinAccept) GetReceivedAt() time.Time {
	if m != nil {
		return m.ReceivedAt
	}
	return time.Time{}
}

type ApplicationDownlink struct {
	// Join Server issued identifier for the session keys used by this downlink.
	SessionKeyID   []byte        `protobuf:"bytes,1,opt,name=session_key_id,json=sessionKeyId,proto3" json:"session_key_id,omitempty"`
	FPort          uint32        `protobuf:"varint,2,opt,name=f_port,json=fPort,proto3" json:"f_port,omitempty"`
	FCnt           uint32        `protobuf:"varint,3,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	FRMPayload     []byte        `protobuf:"bytes,4,opt,name=frm_payload,json=frmPayload,proto3" json:"frm_payload,omitempty"`
	DecodedPayload *types.Struct `protobuf:"bytes,5,opt,name=decoded_payload,json=decodedPayload,proto3" json:"decoded_payload,omitempty"`
	Confirmed      bool          `protobuf:"varint,6,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	// Optional gateway and timing information for class B and C.
	// If set, this downlink message will only be transmitted as class B or C downlink.
	// If not set, this downlink message may be transmitted in class A, B and C.
	ClassBC *ApplicationDownlink_ClassBC `protobuf:"bytes,7,opt,name=class_b_c,json=classBC,proto3" json:"class_b_c,omitempty"`
	// Priority for scheduling the downlink message.
	Priority             TxSchedulePriority `protobuf:"varint,8,opt,name=priority,proto3,enum=ttn.lorawan.v3.TxSchedulePriority" json:"priority,omitempty"`
	CorrelationIDs       []string           `protobuf:"bytes,9,rep,name=correlation_ids,json=correlationIds,proto3" json:"correlation_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ApplicationDownlink) Reset()      { *m = ApplicationDownlink{} }
func (*ApplicationDownlink) ProtoMessage() {}
func (*ApplicationDownlink) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbc6bff5780bdc9d, []int{6}
}
func (m *ApplicationDownlink) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationDownlink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationDownlink.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationDownlink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationDownlink.Merge(m, src)
}
func (m *ApplicationDownlink) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationDownlink) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationDownlink.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationDownlink proto.InternalMessageInfo

func (m *ApplicationDownlink) GetSessionKeyID() []byte {
	if m != nil {
		return m.SessionKeyID
	}
	return nil
}

func (m *ApplicationDownlink) GetFPort() uint32 {
	if m != nil {
		return m.FPort
	}
	return 0
}

func (m *ApplicationDownlink) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

func (m *ApplicationDownlink) GetFRMPayload() []byte {
	if m != nil {
		return m.FRMPayload
	}
	return nil
}

func (m *ApplicationDownlink) GetDecodedPayload() *types.Struct {
	if m != nil {
		return m.DecodedPayload
	}
	return nil
}

func (m *ApplicationDownlink) GetConfirmed() bool {
	if m != nil {
		return m.Confirmed
	}
	return false
}

func (m *ApplicationDownlink) GetClassBC() *ApplicationDownlink_ClassBC {
	if m != nil {
		return m.ClassBC
	}
	return nil
}

func (m *ApplicationDownlink) GetPriority() TxSchedulePriority {
	if m != nil {
		return m.Priority
	}
	return TxSchedulePriority_LOWEST
}

func (m *ApplicationDownlink) GetCorrelationIDs() []string {
	if m != nil {
		return m.CorrelationIDs
	}
	return nil
}

type ApplicationDownlink_ClassBC struct {
	// Possible gateway identifiers and antenna index to use for this downlink message.
	// The Network Server selects one of these gateways for downlink, based on connectivity, signal quality, channel utilization and an available slot.
	// If none of the gateways can be selected, the downlink message fails.
	// If empty, a gateway and antenna is selected automatically from the gateways seen in recent uplinks.
	Gateways []GatewayAntennaIdentifiers `protobuf:"bytes,7,rep,name=gateways,proto3" json:"gateways"`
	// Absolute time when the downlink message should be transmitted.
	// This requires the gateway to have GPS time synchronization.
	// If the time is in the past or if there is a scheduling conflict, the downlink message fails.
	// If null, the time is selected based on slot availability. This is recommended in class B mode.
	AbsoluteTime         *time.Time `protobuf:"bytes,8,opt,name=absolute_time,json=absoluteTime,proto3,stdtime" json:"absolute_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ApplicationDownlink_ClassBC) Reset()      { *m = ApplicationDownlink_ClassBC{} }
func (*ApplicationDownlink_ClassBC) ProtoMessage() {}
func (*ApplicationDownlink_ClassBC) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbc6bff5780bdc9d, []int{6, 0}
}
func (m *ApplicationDownlink_ClassBC) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationDownlink_ClassBC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationDownlink_ClassBC.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationDownlink_ClassBC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationDownlink_ClassBC.Merge(m, src)
}
func (m *ApplicationDownlink_ClassBC) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationDownlink_ClassBC) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationDownlink_ClassBC.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationDownlink_ClassBC proto.InternalMessageInfo

func (m *ApplicationDownlink_ClassBC) GetGateways() []GatewayAntennaIdentifiers {
	if m != nil {
		return m.Gateways
	}
	return nil
}

func (m *ApplicationDownlink_ClassBC) GetAbsoluteTime() *time.Time {
	if m != nil {
		return m.AbsoluteTime
	}
	return nil
}

type ApplicationDownlinks struct {
	Downlinks            []*ApplicationDownlink `protobuf:"bytes,1,rep,name=downlinks,proto3" json:"downlinks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ApplicationDownlinks) Reset()      { *m = ApplicationDownlinks{} }
func (*ApplicationDownlinks) ProtoMessage() {}
func (*ApplicationDownlinks) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbc6bff5780bdc9d, []int{7}
}
func (m *ApplicationDownlinks) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationDownlinks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationDownlinks.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationDownlinks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationDownlinks.Merge(m, src)
}
func (m *ApplicationDownlinks) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationDownlinks) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationDownlinks.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationDownlinks proto.InternalMessageInfo

func (m *ApplicationDownlinks) GetDownlinks() []*ApplicationDownlink {
	if m != nil {
		return m.Downlinks
	}
	return nil
}

type ApplicationDownlinkFailed struct {
	ApplicationDownlink  `protobuf:"bytes,1,opt,name=downlink,proto3,embedded=downlink" json:"downlink"`
	Error                ErrorDetails `protobuf:"bytes,2,opt,name=error,proto3" json:"error"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ApplicationDownlinkFailed) Reset()      { *m = ApplicationDownlinkFailed{} }
func (*ApplicationDownlinkFailed) ProtoMessage() {}
func (*ApplicationDownlinkFailed) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbc6bff5780bdc9d, []int{8}
}
func (m *ApplicationDownlinkFailed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationDownlinkFailed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationDownlinkFailed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationDownlinkFailed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationDownlinkFailed.Merge(m, src)
}
func (m *ApplicationDownlinkFailed) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationDownlinkFailed) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationDownlinkFailed.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationDownlinkFailed proto.InternalMessageInfo

func (m *ApplicationDownlinkFailed) GetError() ErrorDetails {
	if m != nil {
		return m.Error
	}
	return ErrorDetails{}
}

type ApplicationInvalidatedDownlinks struct {
	Downlinks            []*ApplicationDownlink `protobuf:"bytes,1,rep,name=downlinks,proto3" json:"downlinks,omitempty"`
	LastFCntDown         uint32                 `protobuf:"varint,2,opt,name=last_f_cnt_down,json=lastFCntDown,proto3" json:"last_f_cnt_down,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ApplicationInvalidatedDownlinks) Reset()      { *m = ApplicationInvalidatedDownlinks{} }
func (*ApplicationInvalidatedDownlinks) ProtoMessage() {}
func (*ApplicationInvalidatedDownlinks) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbc6bff5780bdc9d, []int{9}
}
func (m *ApplicationInvalidatedDownlinks) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationInvalidatedDownlinks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationInvalidatedDownlinks.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationInvalidatedDownlinks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationInvalidatedDownlinks.Merge(m, src)
}
func (m *ApplicationInvalidatedDownlinks) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationInvalidatedDownlinks) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationInvalidatedDownlinks.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationInvalidatedDownlinks proto.InternalMessageInfo

func (m *ApplicationInvalidatedDownlinks) GetDownlinks() []*ApplicationDownlink {
	if m != nil {
		return m.Downlinks
	}
	return nil
}

func (m *ApplicationInvalidatedDownlinks) GetLastFCntDown() uint32 {
	if m != nil {
		return m.LastFCntDown
	}
	return 0
}

type ApplicationUp struct {
	EndDeviceIdentifiers `protobuf:"bytes,1,opt,name=end_device_ids,json=endDeviceIds,proto3,embedded=end_device_ids" json:"end_device_ids"`
	CorrelationIDs       []string `protobuf:"bytes,2,rep,name=correlation_ids,json=correlationIds,proto3" json:"correlation_ids,omitempty"`
	// Server time when the Application Server received the message.
	ReceivedAt *time.Time `protobuf:"bytes,12,opt,name=received_at,json=receivedAt,proto3,stdtime" json:"received_at,omitempty"`
	// Types that are valid to be assigned to Up:
	//	*ApplicationUp_UplinkMessage
	//	*ApplicationUp_JoinAccept
	//	*ApplicationUp_DownlinkAck
	//	*ApplicationUp_DownlinkNack
	//	*ApplicationUp_DownlinkSent
	//	*ApplicationUp_DownlinkFailed
	//	*ApplicationUp_DownlinkQueued
	//	*ApplicationUp_DownlinkQueueInvalidated
	//	*ApplicationUp_LocationSolved
	Up                   isApplicationUp_Up `protobuf_oneof:"up"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ApplicationUp) Reset()      { *m = ApplicationUp{} }
func (*ApplicationUp) ProtoMessage() {}
func (*ApplicationUp) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbc6bff5780bdc9d, []int{10}
}
func (m *ApplicationUp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationUp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationUp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationUp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationUp.Merge(m, src)
}
func (m *ApplicationUp) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationUp) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationUp.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationUp proto.InternalMessageInfo

type isApplicationUp_Up interface {
	isApplicationUp_Up()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ApplicationUp_UplinkMessage struct {
	UplinkMessage *ApplicationUplink `protobuf:"bytes,3,opt,name=uplink_message,json=uplinkMessage,proto3,oneof" json:"uplink_message,omitempty"`
}
type ApplicationUp_JoinAccept struct {
	JoinAccept *ApplicationJoinAccept `protobuf:"bytes,4,opt,name=join_accept,json=joinAccept,proto3,oneof" json:"join_accept,omitempty"`
}
type ApplicationUp_DownlinkAck struct {
	DownlinkAck *ApplicationDownlink `protobuf:"bytes,5,opt,name=downlink_ack,json=downlinkAck,proto3,oneof" json:"downlink_ack,omitempty"`
}
type ApplicationUp_DownlinkNack struct {
	DownlinkNack *ApplicationDownlink `protobuf:"bytes,6,opt,name=downlink_nack,json=downlinkNack,proto3,oneof" json:"downlink_nack,omitempty"`
}
type ApplicationUp_DownlinkSent struct {
	DownlinkSent *ApplicationDownlink `protobuf:"bytes,7,opt,name=downlink_sent,json=downlinkSent,proto3,oneof" json:"downlink_sent,omitempty"`
}
type ApplicationUp_DownlinkFailed struct {
	DownlinkFailed *ApplicationDownlinkFailed `protobuf:"bytes,8,opt,name=downlink_failed,json=downlinkFailed,proto3,oneof" json:"downlink_failed,omitempty"`
}
type ApplicationUp_DownlinkQueued struct {
	DownlinkQueued *ApplicationDownlink `protobuf:"bytes,9,opt,name=downlink_queued,json=downlinkQueued,proto3,oneof" json:"downlink_queued,omitempty"`
}
type ApplicationUp_DownlinkQueueInvalidated struct {
	DownlinkQueueInvalidated *ApplicationInvalidatedDownlinks `protobuf:"bytes,10,opt,name=downlink_queue_invalidated,json=downlinkQueueInvalidated,proto3,oneof" json:"downlink_queue_invalidated,omitempty"`
}
type ApplicationUp_LocationSolved struct {
	LocationSolved *ApplicationLocation `protobuf:"bytes,11,opt,name=location_solved,json=locationSolved,proto3,oneof" json:"location_solved,omitempty"`
}

func (*ApplicationUp_UplinkMessage) isApplicationUp_Up()            {}
func (*ApplicationUp_JoinAccept) isApplicationUp_Up()               {}
func (*ApplicationUp_DownlinkAck) isApplicationUp_Up()              {}
func (*ApplicationUp_DownlinkNack) isApplicationUp_Up()             {}
func (*ApplicationUp_DownlinkSent) isApplicationUp_Up()             {}
func (*ApplicationUp_DownlinkFailed) isApplicationUp_Up()           {}
func (*ApplicationUp_DownlinkQueued) isApplicationUp_Up()           {}
func (*ApplicationUp_DownlinkQueueInvalidated) isApplicationUp_Up() {}
func (*ApplicationUp_LocationSolved) isApplicationUp_Up()           {}

func (m *ApplicationUp) GetUp() isApplicationUp_Up {
	if m != nil {
		return m.Up
	}
	return nil
}

func (m *ApplicationUp) GetCorrelationIDs() []string {
	if m != nil {
		return m.CorrelationIDs
	}
	return nil
}

func (m *ApplicationUp) GetReceivedAt() *time.Time {
	if m != nil {
		return m.ReceivedAt
	}
	return nil
}

func (m *ApplicationUp) GetUplinkMessage() *ApplicationUplink {
	if x, ok := m.GetUp().(*ApplicationUp_UplinkMessage); ok {
		return x.UplinkMessage
	}
	return nil
}

func (m *ApplicationUp) GetJoinAccept() *ApplicationJoinAccept {
	if x, ok := m.GetUp().(*ApplicationUp_JoinAccept); ok {
		return x.JoinAccept
	}
	return nil
}

func (m *ApplicationUp) GetDownlinkAck() *ApplicationDownlink {
	if x, ok := m.GetUp().(*ApplicationUp_DownlinkAck); ok {
		return x.DownlinkAck
	}
	return nil
}

func (m *ApplicationUp) GetDownlinkNack() *ApplicationDownlink {
	if x, ok := m.GetUp().(*ApplicationUp_DownlinkNack); ok {
		return x.DownlinkNack
	}
	return nil
}

func (m *ApplicationUp) GetDownlinkSent() *ApplicationDownlink {
	if x, ok := m.GetUp().(*ApplicationUp_DownlinkSent); ok {
		return x.DownlinkSent
	}
	return nil
}

func (m *ApplicationUp) GetDownlinkFailed() *ApplicationDownlinkFailed {
	if x, ok := m.GetUp().(*ApplicationUp_DownlinkFailed); ok {
		return x.DownlinkFailed
	}
	return nil
}

func (m *ApplicationUp) GetDownlinkQueued() *ApplicationDownlink {
	if x, ok := m.GetUp().(*ApplicationUp_DownlinkQueued); ok {
		return x.DownlinkQueued
	}
	return nil
}

func (m *ApplicationUp) GetDownlinkQueueInvalidated() *ApplicationInvalidatedDownlinks {
	if x, ok := m.GetUp().(*ApplicationUp_DownlinkQueueInvalidated); ok {
		return x.DownlinkQueueInvalidated
	}
	return nil
}

func (m *ApplicationUp) GetLocationSolved() *ApplicationLocation {
	if x, ok := m.GetUp().(*ApplicationUp_LocationSolved); ok {
		return x.LocationSolved
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ApplicationUp) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ApplicationUp_UplinkMessage)(nil),
		(*ApplicationUp_JoinAccept)(nil),
		(*ApplicationUp_DownlinkAck)(nil),
		(*ApplicationUp_DownlinkNack)(nil),
		(*ApplicationUp_DownlinkSent)(nil),
		(*ApplicationUp_DownlinkFailed)(nil),
		(*ApplicationUp_DownlinkQueued)(nil),
		(*ApplicationUp_DownlinkQueueInvalidated)(nil),
		(*ApplicationUp_LocationSolved)(nil),
	}
}

type MessagePayloadFormatters struct {
	// Payload formatter for uplink messages, must be set together with its parameter.
	UpFormatter PayloadFormatter `protobuf:"varint,1,opt,name=up_formatter,json=upFormatter,proto3,enum=ttn.lorawan.v3.PayloadFormatter" json:"up_formatter,omitempty"`
	// Parameter for the up_formatter, must be set together.
	UpFormatterParameter string `protobuf:"bytes,2,opt,name=up_formatter_parameter,json=upFormatterParameter,proto3" json:"up_formatter_parameter,omitempty"`
	// Payload formatter for downlink messages, must be set together with its parameter.
	DownFormatter PayloadFormatter `protobuf:"varint,3,opt,name=down_formatter,json=downFormatter,proto3,enum=ttn.lorawan.v3.PayloadFormatter" json:"down_formatter,omitempty"`
	// Parameter for the down_formatter, must be set together.
	DownFormatterParameter string   `protobuf:"bytes,4,opt,name=down_formatter_parameter,json=downFormatterParameter,proto3" json:"down_formatter_parameter,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *MessagePayloadFormatters) Reset()      { *m = MessagePayloadFormatters{} }
func (*MessagePayloadFormatters) ProtoMessage() {}
func (*MessagePayloadFormatters) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbc6bff5780bdc9d, []int{11}
}
func (m *MessagePayloadFormatters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagePayloadFormatters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagePayloadFormatters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagePayloadFormatters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagePayloadFormatters.Merge(m, src)
}
func (m *MessagePayloadFormatters) XXX_Size() int {
	return m.Size()
}
func (m *MessagePayloadFormatters) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagePayloadFormatters.DiscardUnknown(m)
}

var xxx_messageInfo_MessagePayloadFormatters proto.InternalMessageInfo

func (m *MessagePayloadFormatters) GetUpFormatter() PayloadFormatter {
	if m != nil {
		return m.UpFormatter
	}
	return PayloadFormatter_FORMATTER_NONE
}

func (m *MessagePayloadFormatters) GetUpFormatterParameter() string {
	if m != nil {
		return m.UpFormatterParameter
	}
	return ""
}

func (m *MessagePayloadFormatters) GetDownFormatter() PayloadFormatter {
	if m != nil {
		return m.DownFormatter
	}
	return PayloadFormatter_FORMATTER_NONE
}

func (m *MessagePayloadFormatters) GetDownFormatterParameter() string {
	if m != nil {
		return m.DownFormatterParameter
	}
	return ""
}

type DownlinkQueueRequest struct {
	EndDeviceIdentifiers `protobuf:"bytes,1,opt,name=end_device_ids,json=endDeviceIds,proto3,embedded=end_device_ids" json:"end_device_ids"`
	Downlinks            []*ApplicationDownlink `protobuf:"bytes,2,rep,name=downlinks,proto3" json:"downlinks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *DownlinkQueueRequest) Reset()      { *m = DownlinkQueueRequest{} }
func (*DownlinkQueueRequest) ProtoMessage() {}
func (*DownlinkQueueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbc6bff5780bdc9d, []int{12}
}
func (m *DownlinkQueueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownlinkQueueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownlinkQueueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownlinkQueueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownlinkQueueRequest.Merge(m, src)
}
func (m *DownlinkQueueRequest) XXX_Size() int {
	return m.Size()
}
func (m *DownlinkQueueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DownlinkQueueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DownlinkQueueRequest proto.InternalMessageInfo

func (m *DownlinkQueueRequest) GetDownlinks() []*ApplicationDownlink {
	if m != nil {
		return m.Downlinks
	}
	return nil
}

func init() {
	proto.RegisterEnum("ttn.lorawan.v3.PayloadFormatter", PayloadFormatter_name, PayloadFormatter_value)
	golang_proto.RegisterEnum("ttn.lorawan.v3.PayloadFormatter", PayloadFormatter_name, PayloadFormatter_value)
	proto.RegisterEnum("ttn.lorawan.v3.TxAcknowledgment_Result", TxAcknowledgment_Result_name, TxAcknowledgment_Result_value)
	golang_proto.RegisterEnum("ttn.lorawan.v3.TxAcknowledgment_Result", TxAcknowledgment_Result_name, TxAcknowledgment_Result_value)
	proto.RegisterType((*UplinkMessage)(nil), "ttn.lorawan.v3.UplinkMessage")
	golang_proto.RegisterType((*UplinkMessage)(nil), "ttn.lorawan.v3.UplinkMessage")
	proto.RegisterType((*DownlinkMessage)(nil), "ttn.lorawan.v3.DownlinkMessage")
	golang_proto.RegisterType((*DownlinkMessage)(nil), "ttn.lorawan.v3.DownlinkMessage")
	proto.RegisterType((*TxAcknowledgment)(nil), "ttn.lorawan.v3.TxAcknowledgment")
	golang_proto.RegisterType((*TxAcknowledgment)(nil), "ttn.lorawan.v3.TxAcknowledgment")
	proto.RegisterType((*ApplicationUplink)(nil), "ttn.lorawan.v3.ApplicationUplink")
	golang_proto.RegisterType((*ApplicationUplink)(nil), "ttn.lorawan.v3.ApplicationUplink")
	proto.RegisterType((*ApplicationLocation)(nil), "ttn.lorawan.v3.ApplicationLocation")
	golang_proto.RegisterType((*ApplicationLocation)(nil), "ttn.lorawan.v3.ApplicationLocation")
	proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.ApplicationLocation.AttributesEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.ApplicationLocation.AttributesEntry")
	proto.RegisterType((*ApplicationJoinAccept)(nil), "ttn.lorawan.v3.ApplicationJoinAccept")
	golang_proto.RegisterType((*ApplicationJoinAccept)(nil), "ttn.lorawan.v3.ApplicationJoinAccept")
	proto.RegisterType((*ApplicationDownlink)(nil), "ttn.lorawan.v3.ApplicationDownlink")
	golang_proto.RegisterType((*ApplicationDownlink)(nil), "ttn.lorawan.v3.ApplicationDownlink")
	proto.RegisterType((*ApplicationDownlink_ClassBC)(nil), "ttn.lorawan.v3.ApplicationDownlink.ClassBC")
	golang_proto.RegisterType((*ApplicationDownlink_ClassBC)(nil), "ttn.lorawan.v3.ApplicationDownlink.ClassBC")
	proto.RegisterType((*ApplicationDownlinks)(nil), "ttn.lorawan.v3.ApplicationDownlinks")
	golang_proto.RegisterType((*ApplicationDownlinks)(nil), "ttn.lorawan.v3.ApplicationDownlinks")
	proto.RegisterType((*ApplicationDownlinkFailed)(nil), "ttn.lorawan.v3.ApplicationDownlinkFailed")
	golang_proto.RegisterType((*ApplicationDownlinkFailed)(nil), "ttn.lorawan.v3.ApplicationDownlinkFailed")
	proto.RegisterType((*ApplicationInvalidatedDownlinks)(nil), "ttn.lorawan.v3.ApplicationInvalidatedDownlinks")
	golang_proto.RegisterType((*ApplicationInvalidatedDownlinks)(nil), "ttn.lorawan.v3.ApplicationInvalidatedDownlinks")
	proto.RegisterType((*ApplicationUp)(nil), "ttn.lorawan.v3.ApplicationUp")
	golang_proto.RegisterType((*ApplicationUp)(nil), "ttn.lorawan.v3.ApplicationUp")
	proto.RegisterType((*MessagePayloadFormatters)(nil), "ttn.lorawan.v3.MessagePayloadFormatters")
	golang_proto.RegisterType((*MessagePayloadFormatters)(nil), "ttn.lorawan.v3.MessagePayloadFormatters")
	proto.RegisterType((*DownlinkQueueRequest)(nil), "ttn.lorawan.v3.DownlinkQueueRequest")
	golang_proto.RegisterType((*DownlinkQueueRequest)(nil), "ttn.lorawan.v3.DownlinkQueueRequest")
}

func init() { proto.RegisterFile("lorawan-stack/api/messages.proto", fileDescriptor_bbc6bff5780bdc9d) }
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/messages.proto", fileDescriptor_bbc6bff5780bdc9d)
}

var fileDescriptor_bbc6bff5780bdc9d = []byte{
	// 2058 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x58, 0x4f, 0x6c, 0xdb, 0xd6,
	0x19, 0xe7, 0xd3, 0x1f, 0x4b, 0x7a, 0x96, 0x64, 0xf6, 0xd5, 0xed, 0x58, 0x2f, 0xa3, 0x3c, 0x35,
	0x5d, 0x9d, 0x2c, 0x96, 0x37, 0x67, 0xc3, 0xb2, 0x00, 0x5b, 0x2b, 0xca, 0x72, 0xac, 0xd8, 0x91,
	0x94, 0x27, 0xa5, 0x4d, 0xd6, 0x75, 0x04, 0x4d, 0x3e, 0x29, 0xac, 0x65, 0x92, 0x25, 0x9f, 0x6c,
	0xab, 0xc3, 0x80, 0x6c, 0xa7, 0x62, 0xa7, 0xa0, 0xc0, 0x86, 0x61, 0xc0, 0x86, 0x62, 0xbb, 0xf4,
	0x30, 0x60, 0x39, 0x06, 0x3b, 0xf5, 0xb6, 0x1c, 0x73, 0x19, 0x50, 0xec, 0x90, 0xc5, 0xd2, 0xa5,
	0xc7, 0x1e, 0x03, 0x5f, 0x3a, 0xf0, 0x91, 0x94, 0x28, 0x59, 0x4b, 0x1d, 0x67, 0x3b, 0xed, 0x64,
	0xf1, 0xbd, 0xdf, 0xf7, 0x7b, 0xdf, 0xfb, 0xfe, 0x3f, 0xc3, 0xc5, 0x8e, 0x69, 0x2b, 0xfb, 0x8a,
	0xb1, 0xec, 0x50, 0x45, 0xdd, 0x59, 0x51, 0x2c, 0x7d, 0x65, 0x97, 0x38, 0x8e, 0xd2, 0x26, 0x4e,
	0xc1, 0xb2, 0x4d, 0x6a, 0xa2, 0x2c, 0xa5, 0x46, 0xc1, 0x47, 0x15, 0xf6, 0x2e, 0x2e, 0x14, 0xdb,
	0x3a, 0xbd, 0xdd, 0xdd, 0x2e, 0xa8, 0xe6, 0xee, 0x0a, 0x31, 0xf6, 0xcc, 0x9e, 0x65, 0x9b, 0x07,
	0xbd, 0x15, 0x06, 0x56, 0x97, 0xdb, 0xc4, 0x58, 0xde, 0x53, 0x3a, 0xba, 0xa6, 0x50, 0xb2, 0x72,
	0xec, 0x87, 0x47, 0xb9, 0xb0, 0x1c, 0xa2, 0x68, 0x9b, 0x6d, 0xd3, 0x13, 0xde, 0xee, 0xb6, 0xd8,
	0x17, 0xfb, 0x60, 0xbf, 0x7c, 0xf8, 0x99, 0xb6, 0x69, 0xb6, 0x3b, 0x64, 0x84, 0x72, 0xa8, 0xdd,
	0x55, 0xa9, 0xbf, 0x9b, 0x9b, 0xdc, 0xa5, 0xfa, 0x2e, 0x71, 0xa8, 0xb2, 0x6b, 0xf9, 0x80, 0x6f,
	0x1c, 0xbf, 0x22, 0xb1, 0x6d, 0xd3, 0xf6, 0xb7, 0x5f, 0x3d, 0xbe, 0xad, 0x6b, 0xc4, 0xa0, 0x7a,
	0x4b, 0x27, 0xb6, 0x13, 0xa8, 0x70, 0x1c, 0xb4, 0x43, 0x7a, 0xc1, 0x6e, 0xee, 0xf8, 0x6e, 0x60,
	0x30, 0x0f, 0x30, 0xd5, 0xca, 0x54, 0xd1, 0x14, 0xaa, 0x78, 0x88, 0xfc, 0x83, 0x28, 0xcc, 0xdc,
	0xb0, 0x3a, 0xba, 0xb1, 0x73, 0xcd, 0x33, 0x3f, 0xca, 0xc1, 0x59, 0x5b, 0xd9, 0x97, 0x2d, 0xa5,
	0xd7, 0x31, 0x15, 0x4d, 0x00, 0x8b, 0x60, 0x29, 0x8d, 0xa1, 0xad, 0xec, 0xd7, 0xbd, 0x15, 0xf4,
	0x5d, 0x98, 0x08, 0x36, 0x23, 0x8b, 0x60, 0x69, 0x76, 0xf5, 0x6b, 0x85, 0x71, 0x57, 0x15, 0x7c,
	0x2a, 0x1c, 0xe0, 0xd0, 0x1a, 0x4c, 0x3a, 0x84, 0x52, 0xdd, 0x68, 0x3b, 0x42, 0x8c, 0xc9, 0x2c,
	0x4c, 0xca, 0x34, 0x0f, 0x1a, 0x3e, 0x42, 0x4a, 0x1f, 0x49, 0xf1, 0x5f, 0x83, 0x08, 0x0f, 0x1e,
	0x3c, 0xca, 0x71, 0x78, 0x28, 0x89, 0xca, 0x70, 0xd6, 0x3e, 0x90, 0x83, 0x0b, 0x08, 0xf1, 0xc5,
	0xe8, 0x34, 0x22, 0x7c, 0x70, 0xcd, 0x47, 0x48, 0xc9, 0x23, 0x29, 0xfe, 0x11, 0x88, 0x24, 0x01,
	0x86, 0xf6, 0x70, 0x95, 0xd1, 0x10, 0x95, 0xe8, 0x7b, 0x44, 0x93, 0x15, 0x2a, 0xcc, 0xf8, 0xfa,
	0x78, 0xee, 0x2c, 0x04, 0xee, 0x2c, 0x34, 0x03, 0x77, 0x4a, 0x49, 0x57, 0x8f, 0xbb, 0xff, 0xca,
	0xb9, 0x34, 0xbe, 0x60, 0x91, 0xa2, 0x2b, 0x70, 0x4e, 0x35, 0x6d, 0x9b, 0x74, 0x14, 0xaa, 0x9b,
	0x86, 0xac, 0x6b, 0x8e, 0x90, 0x58, 0x8c, 0x2e, 0xa5, 0x24, 0xf1, 0x48, 0x4a, 0x7d, 0x04, 0x66,
	0xf2, 0x31, 0x3b, 0x22, 0x68, 0xfd, 0x47, 0xb9, 0x6c, 0x69, 0x04, 0xab, 0xac, 0x39, 0x38, 0x1b,
	0x12, 0xab, 0x68, 0x0e, 0xba, 0x0c, 0xe7, 0x35, 0xb2, 0xa7, 0xab, 0x44, 0x56, 0x6f, 0x2b, 0x86,
	0x41, 0x3a, 0xb2, 0x6e, 0x68, 0xe4, 0x40, 0x48, 0x2d, 0x82, 0xa5, 0x0c, 0xbb, 0xc3, 0xf9, 0xa8,
	0xf0, 0x25, 0xc0, 0xc8, 0x43, 0x95, 0x3c, 0x50, 0xc5, 0xc5, 0x5c, 0x8e, 0xdd, 0xff, 0x38, 0xc7,
	0x5d, 0x8d, 0x25, 0x93, 0x7c, 0x2a, 0xff, 0xdb, 0x28, 0x9c, 0x5b, 0x33, 0xf7, 0x8d, 0xff, 0xb5,
	0x33, 0x7f, 0x0a, 0xb3, 0xc4, 0xd0, 0x64, 0x5f, 0x67, 0xf7, 0xde, 0x51, 0x26, 0x79, 0x76, 0x52,
	0xb2, 0x6c, 0x68, 0x6b, 0x0c, 0x54, 0x19, 0xc5, 0xb5, 0xc4, 0xf7, 0x1f, 0xe5, 0xd2, 0xa3, 0x9d,
	0x35, 0x07, 0xa7, 0xc9, 0x08, 0xe7, 0xa0, 0xef, 0xc3, 0x84, 0x4d, 0xde, 0xef, 0x12, 0x87, 0xfa,
	0x91, 0xf2, 0xca, 0xf1, 0x48, 0xc1, 0x1e, 0x60, 0x83, 0xc3, 0x01, 0x16, 0x5d, 0x86, 0x29, 0x47,
	0xbd, 0x4d, 0xb4, 0x6e, 0x87, 0x68, 0x42, 0xfc, 0xab, 0x42, 0x6c, 0x83, 0xc3, 0x23, 0xf8, 0x34,
	0x4f, 0xce, 0x9c, 0xc6, 0x93, 0x9e, 0x37, 0xa4, 0xb9, 0x51, 0xb0, 0xa3, 0xe8, 0x13, 0x09, 0xe4,
	0xff, 0x1e, 0x81, 0x7c, 0xf3, 0xa0, 0xa8, 0xee, 0x18, 0xe6, 0x7e, 0x87, 0x68, 0xed, 0x5d, 0x62,
	0x4c, 0x0d, 0x1f, 0x70, 0xaa, 0xf0, 0xa9, 0xc0, 0x19, 0x9b, 0x38, 0xdd, 0x0e, 0x65, 0x0e, 0xcc,
	0xae, 0xbe, 0x7e, 0xfc, 0xda, 0xe3, 0x47, 0x17, 0x30, 0x83, 0xb3, 0xc8, 0xfa, 0x95, 0x9b, 0x66,
	0xd8, 0x27, 0xc8, 0xff, 0x11, 0xc0, 0x19, 0x6f, 0x13, 0xcd, 0xc2, 0x44, 0xe3, 0x46, 0xa9, 0x54,
	0x6e, 0x34, 0x78, 0x0e, 0xbd, 0x00, 0x33, 0x37, 0xaa, 0x9b, 0xd5, 0xda, 0xdb, 0x55, 0xb9, 0x8c,
	0x71, 0x0d, 0xf3, 0x00, 0xa5, 0x61, 0xb2, 0x59, 0xab, 0xc9, 0x5b, 0xc5, 0x66, 0x99, 0x8f, 0xa0,
	0x0c, 0x4c, 0xb9, 0x5f, 0xe5, 0x22, 0xde, 0xba, 0xc5, 0x47, 0xd1, 0x3c, 0xe4, 0x4b, 0xb5, 0xad,
	0xad, 0x4a, 0xa3, 0x52, 0xab, 0xca, 0xf5, 0x62, 0x69, 0xb3, 0xdc, 0xe4, 0x63, 0xe3, 0xab, 0x52,
	0xb9, 0x58, 0xaa, 0x55, 0xf9, 0xb8, 0x7b, 0x50, 0xf3, 0xa6, 0xbc, 0x8e, 0xcb, 0xd7, 0xf9, 0x19,
	0xc6, 0x7a, 0x53, 0xae, 0xd7, 0xde, 0x2e, 0x63, 0x3e, 0x81, 0x78, 0x98, 0xbe, 0x52, 0x6f, 0xc8,
	0x37, 0xaa, 0x5b, 0xb5, 0xd2, 0x66, 0x79, 0x8d, 0x4f, 0xe6, 0xff, 0x11, 0x85, 0x2f, 0x14, 0x2d,
	0xab, 0xa3, 0xab, 0xec, 0xfa, 0x5e, 0xe1, 0x42, 0x3f, 0x86, 0x59, 0x87, 0x38, 0x8e, 0x6b, 0xc6,
	0x1d, 0xd2, 0x93, 0x75, 0x3f, 0xce, 0x25, 0xe1, 0x48, 0x8a, 0x7f, 0x10, 0x15, 0xee, 0xb0, 0x90,
	0x6b, 0x78, 0x88, 0x4d, 0xd2, 0xab, 0xac, 0xe1, 0xb4, 0x33, 0xfa, 0xd2, 0xd0, 0x59, 0x38, 0xd3,
	0x92, 0x2d, 0xd3, 0xf6, 0x2c, 0x98, 0x91, 0x32, 0x47, 0x12, 0x3c, 0x9f, 0x14, 0xbe, 0x04, 0x4b,
	0xe0, 0xd2, 0x63, 0x80, 0xe3, 0xad, 0xba, 0x69, 0x53, 0xf4, 0x22, 0x8c, 0xb7, 0x64, 0xd5, 0xa0,
	0x2c, 0xda, 0x33, 0x38, 0xd6, 0x2a, 0x19, 0x14, 0xad, 0xc0, 0xd9, 0x96, 0xbd, 0x3b, 0xcc, 0xaf,
	0x18, 0x3b, 0x37, 0xdb, 0x7f, 0x94, 0x83, 0xeb, 0xf8, 0x9a, 0x9f, 0x63, 0x18, 0xb6, 0xec, 0xdd,
	0x20, 0xdf, 0xde, 0x84, 0x73, 0x1a, 0x51, 0x4d, 0x8d, 0x68, 0x43, 0xa1, 0xb8, 0x9f, 0x77, 0x93,
	0x05, 0xa8, 0xc1, 0xba, 0x0d, 0xce, 0xfa, 0xf8, 0x80, 0x61, 0xa2, 0x0a, 0xce, 0x9c, 0xb2, 0x0a,
	0x86, 0x4b, 0x72, 0xe2, 0xb9, 0x4a, 0x72, 0xa8, 0x96, 0x26, 0x4f, 0x57, 0x4b, 0xf3, 0x7f, 0x8b,
	0xc0, 0x17, 0x43, 0x7e, 0xdd, 0x32, 0xbd, 0xbf, 0x48, 0x80, 0x09, 0x87, 0xd8, 0x6e, 0x69, 0x60,
	0x2e, 0x4d, 0xe1, 0xe0, 0x13, 0xad, 0xc3, 0x64, 0xc7, 0x47, 0xf9, 0x85, 0x4b, 0x98, 0x54, 0x3f,
	0x60, 0x91, 0xf8, 0xb0, 0xf2, 0x0f, 0x1f, 0xe5, 0x00, 0x1e, 0xca, 0xa2, 0x5f, 0x02, 0x08, 0x15,
	0x4a, 0x6d, 0x7d, 0xbb, 0x4b, 0x89, 0x5b, 0xc9, 0x5c, 0x6b, 0x5e, 0x9c, 0xa4, 0x9a, 0xa2, 0x5b,
	0xa1, 0x38, 0x94, 0x2a, 0x1b, 0xd4, 0xee, 0x49, 0x17, 0x8e, 0xa4, 0x73, 0xbf, 0x07, 0xdf, 0xca,
	0x9f, 0xb5, 0xf3, 0xc2, 0xd9, 0x55, 0xf1, 0x67, 0xef, 0x28, 0xcb, 0x1f, 0x7c, 0x67, 0xf9, 0x87,
	0xef, 0x2e, 0xbd, 0x71, 0xf9, 0x9d, 0xe5, 0x77, 0xdf, 0x08, 0x3e, 0xcf, 0xfd, 0x7c, 0xf5, 0xc2,
	0x2f, 0xce, 0xe2, 0xd0, 0xa1, 0x0b, 0x3f, 0x82, 0x73, 0x13, 0x64, 0x88, 0x87, 0xd1, 0x1d, 0xd2,
	0xf3, 0x2f, 0xed, 0xfe, 0x44, 0xf3, 0x30, 0xbe, 0xa7, 0x74, 0xba, 0x84, 0xdd, 0x36, 0x85, 0xbd,
	0x8f, 0xcb, 0x91, 0x4b, 0x20, 0xff, 0xcf, 0x08, 0x7c, 0x29, 0xa4, 0xe0, 0x55, 0x53, 0x37, 0x8a,
	0xaa, 0x4a, 0x2c, 0xfa, 0xdc, 0x89, 0xf1, 0x03, 0x98, 0x52, 0x2c, 0x4b, 0x76, 0x5c, 0x69, 0xdf,
	0xca, 0x5f, 0x9f, 0x34, 0xcd, 0x26, 0xe9, 0x95, 0x8d, 0x3d, 0xd2, 0x31, 0x2d, 0x82, 0x13, 0x8a,
	0x65, 0x35, 0x36, 0x49, 0x0f, 0xdd, 0x84, 0x2f, 0xe9, 0x46, 0x30, 0x7c, 0x69, 0xb2, 0xe6, 0x77,
	0xa5, 0xc0, 0xbe, 0xaf, 0x3e, 0xc5, 0xbe, 0x41, 0x07, 0xc3, 0xf3, 0x21, 0x86, 0x60, 0xd1, 0x41,
	0xaf, 0xc3, 0x39, 0x8b, 0x18, 0x9a, 0x6e, 0xb4, 0x65, 0x5f, 0x55, 0x96, 0x74, 0x49, 0x9c, 0xf5,
	0x97, 0xfd, 0xeb, 0xfc, 0xb7, 0x22, 0xf3, 0xcf, 0xf1, 0xb1, 0xc8, 0x0c, 0x14, 0xf9, 0x3f, 0xab,
	0x39, 0x67, 0x60, 0x4a, 0x35, 0x8d, 0x96, 0x6e, 0xef, 0x12, 0x8d, 0x0d, 0x4c, 0x49, 0x3c, 0x5a,
	0x40, 0x57, 0x60, 0x4a, 0xed, 0x28, 0x8e, 0x23, 0x6f, 0xcb, 0xaa, 0x5f, 0x4b, 0xbe, 0x7d, 0x02,
	0x0f, 0x17, 0x4a, 0xae, 0x90, 0x54, 0xc2, 0x09, 0xd5, 0xfb, 0x81, 0x36, 0x60, 0xd2, 0xb2, 0x75,
	0xd3, 0xd6, 0x69, 0x8f, 0x39, 0x2c, 0xbb, 0x9a, 0x9f, 0x52, 0x93, 0xfc, 0xbe, 0x5d, 0xf7, 0x91,
	0xa1, 0x3e, 0x36, 0x94, 0x9e, 0xd6, 0x5d, 0x53, 0xa7, 0xe9, 0xae, 0x0b, 0x7f, 0x00, 0x30, 0xe1,
	0xeb, 0x89, 0x36, 0x61, 0xb2, 0xad, 0x50, 0xb2, 0xaf, 0xf4, 0xbc, 0x51, 0x6f, 0x76, 0xf5, 0xdc,
	0xa4, 0x7a, 0x57, 0xbc, 0xfd, 0xa2, 0x41, 0x89, 0x61, 0x28, 0xe1, 0xb9, 0x27, 0xe6, 0x55, 0xce,
	0x80, 0x00, 0x95, 0x61, 0x46, 0xd9, 0x76, 0xcc, 0x4e, 0x97, 0x12, 0xd9, 0x7d, 0x39, 0x9c, 0x20,
	0x42, 0x63, 0x2c, 0x3a, 0xd3, 0x81, 0x98, 0xbb, 0xe1, 0x8d, 0x1c, 0xf9, 0x5b, 0x70, 0x7e, 0x8a,
	0x81, 0x1d, 0x54, 0x84, 0xa9, 0x51, 0xee, 0x81, 0x93, 0xe7, 0xde, 0x48, 0x2a, 0x7f, 0x0f, 0xc0,
	0x57, 0xa6, 0x40, 0xd6, 0x15, 0xdd, 0x1d, 0x9d, 0xae, 0xc3, 0x64, 0x00, 0x65, 0x09, 0x70, 0x32,
	0xfe, 0x69, 0x15, 0x39, 0xa0, 0x41, 0x6f, 0xc2, 0x38, 0x7b, 0x26, 0xf9, 0x05, 0xe7, 0xcc, 0xb1,
	0xa9, 0xd2, 0xdd, 0x5c, 0x23, 0x54, 0xd1, 0x3b, 0x93, 0x7d, 0xc9, 0x13, 0xcc, 0xff, 0x06, 0xc0,
	0x5c, 0xe8, 0xd4, 0xca, 0xb4, 0x3a, 0xb2, 0x79, 0x3a, 0xcb, 0x84, 0x9a, 0xe9, 0x48, 0x1e, 0xbd,
	0x06, 0xe7, 0x3a, 0x8a, 0x43, 0x65, 0x96, 0xab, 0xac, 0xda, 0x79, 0x59, 0x8d, 0xd3, 0xee, 0xf2,
	0x7a, 0xc9, 0xa0, 0xae, 0x7c, 0x7e, 0x90, 0x80, 0x99, 0xb1, 0xe9, 0x65, 0xca, 0x28, 0x0d, 0x9e,
	0x65, 0x94, 0x3e, 0x66, 0xc5, 0xf1, 0x51, 0x7a, 0x4a, 0x12, 0x44, 0x4e, 0x35, 0x62, 0x16, 0xc7,
	0x6b, 0x69, 0xfa, 0x84, 0x91, 0x1a, 0x7e, 0x2d, 0x5d, 0x85, 0xd9, 0x2e, 0x9b, 0xd6, 0x64, 0xff,
	0x99, 0xef, 0x3f, 0x1a, 0xbe, 0xf9, 0x14, 0xa3, 0x7b, 0xe3, 0xdd, 0x06, 0x87, 0x33, 0xdd, 0xb1,
	0x17, 0xea, 0x06, 0x9c, 0x7d, 0xcf, 0xd4, 0x0d, 0x59, 0x61, 0x5d, 0xce, 0x7f, 0x26, 0xbc, 0xf6,
	0x14, 0xa2, 0x51, 0x4b, 0xdc, 0xe0, 0x30, 0x7c, 0x6f, 0xd4, 0x20, 0x37, 0x60, 0x3a, 0xf0, 0xa2,
	0xac, 0xa8, 0x3b, 0x7e, 0x59, 0x3c, 0x49, 0x20, 0x6c, 0x70, 0x78, 0x36, 0x10, 0x2d, 0xaa, 0x3b,
	0xe8, 0x2a, 0xcc, 0x0c, 0x99, 0x0c, 0x97, 0x6a, 0xe6, 0x59, 0xa8, 0x86, 0x5a, 0x54, 0x95, 0x09,
	0x2e, 0x87, 0x18, 0xd4, 0xaf, 0xa9, 0xcf, 0xca, 0xd5, 0x70, 0x9f, 0x19, 0x4d, 0x38, 0x37, 0xe4,
	0x6a, 0xb1, 0x9c, 0xf5, 0x0b, 0xcd, 0xb9, 0x13, 0xb0, 0x79, 0x49, 0xbe, 0xc1, 0xe1, 0xac, 0x36,
	0x9e, 0xf6, 0xd5, 0x10, 0xeb, 0xfb, 0x5d, 0xd2, 0x25, 0x1a, 0x7b, 0xad, 0x9e, 0x58, 0xc7, 0x21,
	0xdf, 0x75, 0x26, 0x8c, 0x4c, 0xb8, 0x30, 0xce, 0x27, 0x87, 0x9a, 0xbf, 0x00, 0x19, 0xf5, 0xca,
	0x53, 0xa8, 0xa7, 0xa5, 0xf8, 0x06, 0x87, 0x85, 0xb1, 0x63, 0x42, 0x20, 0xf7, 0x02, 0xc1, 0x08,
	0x28, 0x3b, 0x66, 0x67, 0x8f, 0x68, 0xc2, 0xec, 0x57, 0x5e, 0x20, 0x18, 0xfd, 0xdc, 0x0b, 0x04,
	0xd2, 0x0d, 0x26, 0x2c, 0xa5, 0x60, 0xa4, 0x6b, 0x79, 0xaf, 0xbd, 0xbf, 0x44, 0xa0, 0xe0, 0x47,
	0xaa, 0xdf, 0x3e, 0xd7, 0x4d, 0x7b, 0x57, 0xa1, 0x94, 0xd8, 0x0e, 0xba, 0x06, 0xd3, 0x5d, 0x4b,
	0x6e, 0x05, 0x0b, 0x2c, 0xdd, 0xb3, 0xab, 0x8b, 0x93, 0x87, 0x4e, 0x0a, 0x86, 0x7a, 0xdc, 0x6c,
	0xd7, 0x1a, 0x2e, 0xa3, 0xef, 0xc1, 0x97, 0xc3, 0x74, 0xb2, 0xa5, 0xd8, 0xca, 0x2e, 0x71, 0x89,
	0xbd, 0x29, 0x71, 0x3e, 0x04, 0xae, 0x07, 0x7b, 0xe8, 0x3a, 0x64, 0xf6, 0x0f, 0xa9, 0x11, 0x7d,
	0x66, 0x35, 0x58, 0x84, 0x8e, 0x14, 0xb9, 0x04, 0x85, 0x71, 0xca, 0x90, 0x2a, 0x31, 0xa6, 0xca,
	0xcb, 0x63, 0x02, 0x43, 0x65, 0xf2, 0x7f, 0x05, 0x70, 0x7e, 0x2d, 0xec, 0x26, 0xff, 0x71, 0x8f,
	0x9a, 0xcf, 0x55, 0x1b, 0x93, 0xff, 0xa1, 0x26, 0x8e, 0x75, 0xc4, 0xc8, 0x69, 0x3a, 0xe2, 0xf9,
	0xbb, 0x00, 0xf2, 0x93, 0x96, 0x41, 0x08, 0x66, 0xd7, 0x6b, 0xf8, 0x5a, 0xb1, 0xd9, 0x2c, 0x63,
	0xb9, 0x5a, 0xab, 0x96, 0x79, 0x0e, 0x09, 0x70, 0x7e, 0xb4, 0x86, 0xcb, 0xf5, 0x5a, 0xa3, 0xd2,
	0xac, 0xe1, 0x5b, 0x3c, 0x40, 0x0b, 0xf0, 0xe5, 0xd1, 0xce, 0x15, 0x5c, 0x2f, 0xc9, 0x8d, 0x32,
	0x7e, 0xab, 0x52, 0x72, 0xdf, 0xd2, 0x63, 0x52, 0x57, 0x8b, 0x6f, 0x15, 0x1b, 0x25, 0x5c, 0xa9,
	0x37, 0xf9, 0xe8, 0xf8, 0x4e, 0xa9, 0x78, 0xab, 0x5c, 0xad, 0x96, 0xb7, 0xea, 0x75, 0x3e, 0x26,
	0xfd, 0x09, 0x3c, 0x38, 0x14, 0xc1, 0xc3, 0x43, 0x11, 0x7c, 0x76, 0x28, 0x72, 0x8f, 0x0f, 0x45,
	0xee, 0xf3, 0x43, 0x91, 0xfb, 0xe2, 0x50, 0xe4, 0x9e, 0x1c, 0x8a, 0xe0, 0x4e, 0x5f, 0x04, 0x1f,
	0xf6, 0x45, 0xee, 0x93, 0xbe, 0x08, 0xee, 0xf5, 0x45, 0xee, 0x7e, 0x5f, 0xe4, 0x3e, 0xed, 0x8b,
	0xdc, 0x83, 0xbe, 0x08, 0x1e, 0xf6, 0x45, 0xf0, 0x59, 0x5f, 0xe4, 0x1e, 0xf7, 0x45, 0xf0, 0x79,
	0x5f, 0xe4, 0xbe, 0xe8, 0x8b, 0xe0, 0x49, 0x5f, 0xe4, 0xee, 0x0c, 0x44, 0xee, 0xc3, 0x81, 0x08,
	0xee, 0x0e, 0x44, 0xee, 0x77, 0x03, 0x11, 0x7c, 0x3c, 0x10, 0xb9, 0x4f, 0x06, 0x22, 0x77, 0x6f,
	0x20, 0x82, 0xfb, 0x03, 0x11, 0x7c, 0x3a, 0x10, 0xc1, 0x4f, 0x2e, 0xb4, 0xcd, 0x02, 0xbd, 0x4d,
	0xe8, 0x6d, 0xf7, 0x2d, 0x58, 0x30, 0x08, 0xdd, 0x37, 0xed, 0x9d, 0x95, 0xf1, 0xff, 0x39, 0x5a,
	0x3b, 0xed, 0x15, 0x4a, 0x0d, 0x6b, 0x7b, 0x7b, 0x86, 0x35, 0x8a, 0x8b, 0xff, 0x0e, 0x00, 0x00,
	0xff, 0xff, 0x3f, 0x5c, 0x36, 0x60, 0xfb, 0x15, 0x00, 0x00,
}

func (x PayloadFormatter) String() string {
	s, ok := PayloadFormatter_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x TxAcknowledgment_Result) String() string {
	s, ok := TxAcknowledgment_Result_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *UplinkMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UplinkMessage)
	if !ok {
		that2, ok := that.(UplinkMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.RawPayload, that1.RawPayload) {
		return false
	}
	if !this.Payload.Equal(that1.Payload) {
		return false
	}
	if !this.Settings.Equal(&that1.Settings) {
		return false
	}
	if len(this.RxMetadata) != len(that1.RxMetadata) {
		return false
	}
	for i := range this.RxMetadata {
		if !this.RxMetadata[i].Equal(that1.RxMetadata[i]) {
			return false
		}
	}
	if !this.ReceivedAt.Equal(that1.ReceivedAt) {
		return false
	}
	if len(this.CorrelationIDs) != len(that1.CorrelationIDs) {
		return false
	}
	for i := range this.CorrelationIDs {
		if this.CorrelationIDs[i] != that1.CorrelationIDs[i] {
			return false
		}
	}
	if this.DeviceChannelIndex != that1.DeviceChannelIndex {
		return false
	}
	return true
}
func (this *DownlinkMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownlinkMessage)
	if !ok {
		that2, ok := that.(DownlinkMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.RawPayload, that1.RawPayload) {
		return false
	}
	if !this.Payload.Equal(that1.Payload) {
		return false
	}
	if !this.EndDeviceIDs.Equal(that1.EndDeviceIDs) {
		return false
	}
	if that1.Settings == nil {
		if this.Settings != nil {
			return false
		}
	} else if this.Settings == nil {
		return false
	} else if !this.Settings.Equal(that1.Settings) {
		return false
	}
	if len(this.CorrelationIDs) != len(that1.CorrelationIDs) {
		return false
	}
	for i := range this.CorrelationIDs {
		if this.CorrelationIDs[i] != that1.CorrelationIDs[i] {
			return false
		}
	}
	return true
}
func (this *DownlinkMessage_Request) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownlinkMessage_Request)
	if !ok {
		that2, ok := that.(DownlinkMessage_Request)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Request.Equal(that1.Request) {
		return false
	}
	return true
}
func (this *DownlinkMessage_Scheduled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownlinkMessage_Scheduled)
	if !ok {
		that2, ok := that.(DownlinkMessage_Scheduled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Scheduled.Equal(that1.Scheduled) {
		return false
	}
	return true
}
func (this *TxAcknowledgment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TxAcknowledgment)
	if !ok {
		that2, ok := that.(TxAcknowledgment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.CorrelationIDs) != len(that1.CorrelationIDs) {
		return false
	}
	for i := range this.CorrelationIDs {
		if this.CorrelationIDs[i] != that1.CorrelationIDs[i] {
			return false
		}
	}
	if this.Result != that1.Result {
		return false
	}
	return true
}
func (this *ApplicationUplink) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationUplink)
	if !ok {
		that2, ok := that.(ApplicationUplink)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.SessionKeyID, that1.SessionKeyID) {
		return false
	}
	if this.FPort != that1.FPort {
		return false
	}
	if this.FCnt != that1.FCnt {
		return false
	}
	if !bytes.Equal(this.FRMPayload, that1.FRMPayload) {
		return false
	}
	if !this.DecodedPayload.Equal(that1.DecodedPayload) {
		return false
	}
	if len(this.RxMetadata) != len(that1.RxMetadata) {
		return false
	}
	for i := range this.RxMetadata {
		if !this.RxMetadata[i].Equal(that1.RxMetadata[i]) {
			return false
		}
	}
	if !this.Settings.Equal(&that1.Settings) {
		return false
	}
	if !this.ReceivedAt.Equal(that1.ReceivedAt) {
		return false
	}
	return true
}
func (this *ApplicationLocation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationLocation)
	if !ok {
		that2, ok := that.(ApplicationLocation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Service != that1.Service {
		return false
	}
	if !this.Location.Equal(&that1.Location) {
		return false
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return false
	}
	for i := range this.Attributes {
		if this.Attributes[i] != that1.Attributes[i] {
			return false
		}
	}
	return true
}
func (this *ApplicationJoinAccept) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationJoinAccept)
	if !ok {
		that2, ok := that.(ApplicationJoinAccept)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.SessionKeyID, that1.SessionKeyID) {
		return false
	}
	if !this.AppSKey.Equal(that1.AppSKey) {
		return false
	}
	if len(this.InvalidatedDownlinks) != len(that1.InvalidatedDownlinks) {
		return false
	}
	for i := range this.InvalidatedDownlinks {
		if !this.InvalidatedDownlinks[i].Equal(that1.InvalidatedDownlinks[i]) {
			return false
		}
	}
	if this.PendingSession != that1.PendingSession {
		return false
	}
	if !this.ReceivedAt.Equal(that1.ReceivedAt) {
		return false
	}
	return true
}
func (this *ApplicationDownlink) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationDownlink)
	if !ok {
		that2, ok := that.(ApplicationDownlink)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.SessionKeyID, that1.SessionKeyID) {
		return false
	}
	if this.FPort != that1.FPort {
		return false
	}
	if this.FCnt != that1.FCnt {
		return false
	}
	if !bytes.Equal(this.FRMPayload, that1.FRMPayload) {
		return false
	}
	if !this.DecodedPayload.Equal(that1.DecodedPayload) {
		return false
	}
	if this.Confirmed != that1.Confirmed {
		return false
	}
	if !this.ClassBC.Equal(that1.ClassBC) {
		return false
	}
	if this.Priority != that1.Priority {
		return false
	}
	if len(this.CorrelationIDs) != len(that1.CorrelationIDs) {
		return false
	}
	for i := range this.CorrelationIDs {
		if this.CorrelationIDs[i] != that1.CorrelationIDs[i] {
			return false
		}
	}
	return true
}
func (this *ApplicationDownlink_ClassBC) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationDownlink_ClassBC)
	if !ok {
		that2, ok := that.(ApplicationDownlink_ClassBC)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Gateways) != len(that1.Gateways) {
		return false
	}
	for i := range this.Gateways {
		if !this.Gateways[i].Equal(&that1.Gateways[i]) {
			return false
		}
	}
	if that1.AbsoluteTime == nil {
		if this.AbsoluteTime != nil {
			return false
		}
	} else if !this.AbsoluteTime.Equal(*that1.AbsoluteTime) {
		return false
	}
	return true
}
func (this *ApplicationDownlinks) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationDownlinks)
	if !ok {
		that2, ok := that.(ApplicationDownlinks)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Downlinks) != len(that1.Downlinks) {
		return false
	}
	for i := range this.Downlinks {
		if !this.Downlinks[i].Equal(that1.Downlinks[i]) {
			return false
		}
	}
	return true
}
func (this *ApplicationDownlinkFailed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationDownlinkFailed)
	if !ok {
		that2, ok := that.(ApplicationDownlinkFailed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationDownlink.Equal(&that1.ApplicationDownlink) {
		return false
	}
	if !this.Error.Equal(&that1.Error) {
		return false
	}
	return true
}
func (this *ApplicationInvalidatedDownlinks) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationInvalidatedDownlinks)
	if !ok {
		that2, ok := that.(ApplicationInvalidatedDownlinks)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Downlinks) != len(that1.Downlinks) {
		return false
	}
	for i := range this.Downlinks {
		if !this.Downlinks[i].Equal(that1.Downlinks[i]) {
			return false
		}
	}
	if this.LastFCntDown != that1.LastFCntDown {
		return false
	}
	return true
}
func (this *ApplicationUp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationUp)
	if !ok {
		that2, ok := that.(ApplicationUp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EndDeviceIdentifiers.Equal(&that1.EndDeviceIdentifiers) {
		return false
	}
	if len(this.CorrelationIDs) != len(that1.CorrelationIDs) {
		return false
	}
	for i := range this.CorrelationIDs {
		if this.CorrelationIDs[i] != that1.CorrelationIDs[i] {
			return false
		}
	}
	if that1.ReceivedAt == nil {
		if this.ReceivedAt != nil {
			return false
		}
	} else if !this.ReceivedAt.Equal(*that1.ReceivedAt) {
		return false
	}
	if that1.Up == nil {
		if this.Up != nil {
			return false
		}
	} else if this.Up == nil {
		return false
	} else if !this.Up.Equal(that1.Up) {
		return false
	}
	return true
}
func (this *ApplicationUp_UplinkMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationUp_UplinkMessage)
	if !ok {
		that2, ok := that.(ApplicationUp_UplinkMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UplinkMessage.Equal(that1.UplinkMessage) {
		return false
	}
	return true
}
func (this *ApplicationUp_JoinAccept) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationUp_JoinAccept)
	if !ok {
		that2, ok := that.(ApplicationUp_JoinAccept)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JoinAccept.Equal(that1.JoinAccept) {
		return false
	}
	return true
}
func (this *ApplicationUp_DownlinkAck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationUp_DownlinkAck)
	if !ok {
		that2, ok := that.(ApplicationUp_DownlinkAck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DownlinkAck.Equal(that1.DownlinkAck) {
		return false
	}
	return true
}
func (this *ApplicationUp_DownlinkNack) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationUp_DownlinkNack)
	if !ok {
		that2, ok := that.(ApplicationUp_DownlinkNack)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DownlinkNack.Equal(that1.DownlinkNack) {
		return false
	}
	return true
}
func (this *ApplicationUp_DownlinkSent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationUp_DownlinkSent)
	if !ok {
		that2, ok := that.(ApplicationUp_DownlinkSent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DownlinkSent.Equal(that1.DownlinkSent) {
		return false
	}
	return true
}
func (this *ApplicationUp_DownlinkFailed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationUp_DownlinkFailed)
	if !ok {
		that2, ok := that.(ApplicationUp_DownlinkFailed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DownlinkFailed.Equal(that1.DownlinkFailed) {
		return false
	}
	return true
}
func (this *ApplicationUp_DownlinkQueued) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationUp_DownlinkQueued)
	if !ok {
		that2, ok := that.(ApplicationUp_DownlinkQueued)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DownlinkQueued.Equal(that1.DownlinkQueued) {
		return false
	}
	return true
}
func (this *ApplicationUp_DownlinkQueueInvalidated) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationUp_DownlinkQueueInvalidated)
	if !ok {
		that2, ok := that.(ApplicationUp_DownlinkQueueInvalidated)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DownlinkQueueInvalidated.Equal(that1.DownlinkQueueInvalidated) {
		return false
	}
	return true
}
func (this *ApplicationUp_LocationSolved) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationUp_LocationSolved)
	if !ok {
		that2, ok := that.(ApplicationUp_LocationSolved)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LocationSolved.Equal(that1.LocationSolved) {
		return false
	}
	return true
}
func (this *MessagePayloadFormatters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessagePayloadFormatters)
	if !ok {
		that2, ok := that.(MessagePayloadFormatters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UpFormatter != that1.UpFormatter {
		return false
	}
	if this.UpFormatterParameter != that1.UpFormatterParameter {
		return false
	}
	if this.DownFormatter != that1.DownFormatter {
		return false
	}
	if this.DownFormatterParameter != that1.DownFormatterParameter {
		return false
	}
	return true
}
func (this *DownlinkQueueRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownlinkQueueRequest)
	if !ok {
		that2, ok := that.(DownlinkQueueRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EndDeviceIdentifiers.Equal(&that1.EndDeviceIdentifiers) {
		return false
	}
	if len(this.Downlinks) != len(that1.Downlinks) {
		return false
	}
	for i := range this.Downlinks {
		if !this.Downlinks[i].Equal(that1.Downlinks[i]) {
			return false
		}
	}
	return true
}
func (m *UplinkMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UplinkMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UplinkMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeviceChannelIndex != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.DeviceChannelIndex))
		i--
		dAtA[i] = 0x48
	}
	if len(m.CorrelationIDs) > 0 {
		for iNdEx := len(m.CorrelationIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CorrelationIDs[iNdEx])
			copy(dAtA[i:], m.CorrelationIDs[iNdEx])
			i = encodeVarintMessages(dAtA, i, uint64(len(m.CorrelationIDs[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ReceivedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ReceivedAt):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintMessages(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x32
	if len(m.RxMetadata) > 0 {
		for iNdEx := len(m.RxMetadata) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RxMetadata[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	{
		size, err := m.Settings.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMessages(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Payload != nil {
		{
			size, err := m.Payload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RawPayload) > 0 {
		i -= len(m.RawPayload)
		copy(dAtA[i:], m.RawPayload)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.RawPayload)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DownlinkMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownlinkMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownlinkMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CorrelationIDs) > 0 {
		for iNdEx := len(m.CorrelationIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CorrelationIDs[iNdEx])
			copy(dAtA[i:], m.CorrelationIDs[iNdEx])
			i = encodeVarintMessages(dAtA, i, uint64(len(m.CorrelationIDs[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Settings != nil {
		{
			size := m.Settings.Size()
			i -= size
			if _, err := m.Settings.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.EndDeviceIDs != nil {
		{
			size, err := m.EndDeviceIDs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Payload != nil {
		{
			size, err := m.Payload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RawPayload) > 0 {
		i -= len(m.RawPayload)
		copy(dAtA[i:], m.RawPayload)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.RawPayload)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DownlinkMessage_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownlinkMessage_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *DownlinkMessage_Scheduled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownlinkMessage_Scheduled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Scheduled != nil {
		{
			size, err := m.Scheduled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *TxAcknowledgment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxAcknowledgment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxAcknowledgment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CorrelationIDs) > 0 {
		for iNdEx := len(m.CorrelationIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CorrelationIDs[iNdEx])
			copy(dAtA[i:], m.CorrelationIDs[iNdEx])
			i = encodeVarintMessages(dAtA, i, uint64(len(m.CorrelationIDs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationUplink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationUplink) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationUplink) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n8, err8 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ReceivedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ReceivedAt):])
	if err8 != nil {
		return 0, err8
	}
	i -= n8
	i = encodeVarintMessages(dAtA, i, uint64(n8))
	i--
	dAtA[i] = 0x42
	{
		size, err := m.Settings.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMessages(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.RxMetadata) > 0 {
		for iNdEx := len(m.RxMetadata) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RxMetadata[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.DecodedPayload != nil {
		{
			size, err := m.DecodedPayload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FRMPayload) > 0 {
		i -= len(m.FRMPayload)
		copy(dAtA[i:], m.FRMPayload)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.FRMPayload)))
		i--
		dAtA[i] = 0x22
	}
	if m.FCnt != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.FCnt))
		i--
		dAtA[i] = 0x18
	}
	if m.FPort != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.FPort))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SessionKeyID) > 0 {
		i -= len(m.SessionKeyID)
		copy(dAtA[i:], m.SessionKeyID)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.SessionKeyID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationLocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationLocation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationLocation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		for k := range m.Attributes {
			v := m.Attributes[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintMessages(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMessages(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMessages(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMessages(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Service) > 0 {
		i -= len(m.Service)
		copy(dAtA[i:], m.Service)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Service)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationJoinAccept) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationJoinAccept) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationJoinAccept) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n12, err12 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ReceivedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ReceivedAt):])
	if err12 != nil {
		return 0, err12
	}
	i -= n12
	i = encodeVarintMessages(dAtA, i, uint64(n12))
	i--
	dAtA[i] = 0x42
	if m.PendingSession {
		i--
		if m.PendingSession {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.InvalidatedDownlinks) > 0 {
		for iNdEx := len(m.InvalidatedDownlinks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InvalidatedDownlinks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.AppSKey != nil {
		{
			size, err := m.AppSKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SessionKeyID) > 0 {
		i -= len(m.SessionKeyID)
		copy(dAtA[i:], m.SessionKeyID)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.SessionKeyID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationDownlink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationDownlink) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationDownlink) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CorrelationIDs) > 0 {
		for iNdEx := len(m.CorrelationIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CorrelationIDs[iNdEx])
			copy(dAtA[i:], m.CorrelationIDs[iNdEx])
			i = encodeVarintMessages(dAtA, i, uint64(len(m.CorrelationIDs[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.Priority != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.Priority))
		i--
		dAtA[i] = 0x40
	}
	if m.ClassBC != nil {
		{
			size, err := m.ClassBC.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Confirmed {
		i--
		if m.Confirmed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.DecodedPayload != nil {
		{
			size, err := m.DecodedPayload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FRMPayload) > 0 {
		i -= len(m.FRMPayload)
		copy(dAtA[i:], m.FRMPayload)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.FRMPayload)))
		i--
		dAtA[i] = 0x22
	}
	if m.FCnt != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.FCnt))
		i--
		dAtA[i] = 0x18
	}
	if m.FPort != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.FPort))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SessionKeyID) > 0 {
		i -= len(m.SessionKeyID)
		copy(dAtA[i:], m.SessionKeyID)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.SessionKeyID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationDownlink_ClassBC) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationDownlink_ClassBC) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationDownlink_ClassBC) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AbsoluteTime != nil {
		n16, err16 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.AbsoluteTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.AbsoluteTime):])
		if err16 != nil {
			return 0, err16
		}
		i -= n16
		i = encodeVarintMessages(dAtA, i, uint64(n16))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Gateways) > 0 {
		for iNdEx := len(m.Gateways) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Gateways[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationDownlinks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationDownlinks) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationDownlinks) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Downlinks) > 0 {
		for iNdEx := len(m.Downlinks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Downlinks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationDownlinkFailed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationDownlinkFailed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationDownlinkFailed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMessages(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ApplicationDownlink.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMessages(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ApplicationInvalidatedDownlinks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationInvalidatedDownlinks) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationInvalidatedDownlinks) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastFCntDown != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.LastFCntDown))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Downlinks) > 0 {
		for iNdEx := len(m.Downlinks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Downlinks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationUp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationUp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationUp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReceivedAt != nil {
		n19, err19 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ReceivedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.ReceivedAt):])
		if err19 != nil {
			return 0, err19
		}
		i -= n19
		i = encodeVarintMessages(dAtA, i, uint64(n19))
		i--
		dAtA[i] = 0x62
	}
	if m.Up != nil {
		{
			size := m.Up.Size()
			i -= size
			if _, err := m.Up.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.CorrelationIDs) > 0 {
		for iNdEx := len(m.CorrelationIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CorrelationIDs[iNdEx])
			copy(dAtA[i:], m.CorrelationIDs[iNdEx])
			i = encodeVarintMessages(dAtA, i, uint64(len(m.CorrelationIDs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.EndDeviceIdentifiers.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMessages(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ApplicationUp_UplinkMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationUp_UplinkMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UplinkMessage != nil {
		{
			size, err := m.UplinkMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ApplicationUp_JoinAccept) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationUp_JoinAccept) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JoinAccept != nil {
		{
			size, err := m.JoinAccept.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ApplicationUp_DownlinkAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationUp_DownlinkAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DownlinkAck != nil {
		{
			size, err := m.DownlinkAck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ApplicationUp_DownlinkNack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationUp_DownlinkNack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DownlinkNack != nil {
		{
			size, err := m.DownlinkNack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ApplicationUp_DownlinkSent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationUp_DownlinkSent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DownlinkSent != nil {
		{
			size, err := m.DownlinkSent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ApplicationUp_DownlinkFailed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationUp_DownlinkFailed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DownlinkFailed != nil {
		{
			size, err := m.DownlinkFailed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *ApplicationUp_DownlinkQueued) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationUp_DownlinkQueued) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DownlinkQueued != nil {
		{
			size, err := m.DownlinkQueued.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *ApplicationUp_DownlinkQueueInvalidated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationUp_DownlinkQueueInvalidated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DownlinkQueueInvalidated != nil {
		{
			size, err := m.DownlinkQueueInvalidated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *ApplicationUp_LocationSolved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationUp_LocationSolved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LocationSolved != nil {
		{
			size, err := m.LocationSolved.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *MessagePayloadFormatters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagePayloadFormatters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagePayloadFormatters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DownFormatterParameter) > 0 {
		i -= len(m.DownFormatterParameter)
		copy(dAtA[i:], m.DownFormatterParameter)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.DownFormatterParameter)))
		i--
		dAtA[i] = 0x22
	}
	if m.DownFormatter != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.DownFormatter))
		i--
		dAtA[i] = 0x18
	}
	if len(m.UpFormatterParameter) > 0 {
		i -= len(m.UpFormatterParameter)
		copy(dAtA[i:], m.UpFormatterParameter)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.UpFormatterParameter)))
		i--
		dAtA[i] = 0x12
	}
	if m.UpFormatter != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.UpFormatter))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DownlinkQueueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownlinkQueueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownlinkQueueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Downlinks) > 0 {
		for iNdEx := len(m.Downlinks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Downlinks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.EndDeviceIdentifiers.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMessages(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintMessages(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessages(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedTxAcknowledgment(r randyMessages, easy bool) *TxAcknowledgment {
	this := &TxAcknowledgment{}
	v1 := r.Intn(10)
	this.CorrelationIDs = make([]string, v1)
	for i := 0; i < v1; i++ {
		this.CorrelationIDs[i] = randStringMessages(r)
	}
	this.Result = TxAcknowledgment_Result([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8}[r.Intn(9)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedApplicationUplink(r randyMessages, easy bool) *ApplicationUplink {
	this := &ApplicationUplink{}
	v2 := r.Intn(100)
	this.SessionKeyID = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.SessionKeyID[i] = byte(r.Intn(256))
	}
	this.FPort = r.Uint32()
	this.FCnt = r.Uint32()
	v3 := r.Intn(100)
	this.FRMPayload = make([]byte, v3)
	for i := 0; i < v3; i++ {
		this.FRMPayload[i] = byte(r.Intn(256))
	}
	if r.Intn(5) != 0 {
		this.DecodedPayload = types.NewPopulatedStruct(r, easy)
	}
	if r.Intn(5) != 0 {
		v4 := r.Intn(5)
		this.RxMetadata = make([]*RxMetadata, v4)
		for i := 0; i < v4; i++ {
			this.RxMetadata[i] = NewPopulatedRxMetadata(r, easy)
		}
	}
	v5 := NewPopulatedTxSettings(r, easy)
	this.Settings = *v5
	v6 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.ReceivedAt = *v6
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedApplicationLocation(r randyMessages, easy bool) *ApplicationLocation {
	this := &ApplicationLocation{}
	this.Service = randStringMessages(r)
	v7 := NewPopulatedLocation(r, easy)
	this.Location = *v7
	if r.Intn(5) != 0 {
		v8 := r.Intn(10)
		this.Attributes = make(map[string]string)
		for i := 0; i < v8; i++ {
			this.Attributes[randStringMessages(r)] = randStringMessages(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedApplicationJoinAccept(r randyMessages, easy bool) *ApplicationJoinAccept {
	this := &ApplicationJoinAccept{}
	v9 := r.Intn(100)
	this.SessionKeyID = make([]byte, v9)
	for i := 0; i < v9; i++ {
		this.SessionKeyID[i] = byte(r.Intn(256))
	}
	if r.Intn(5) != 0 {
		this.AppSKey = NewPopulatedKeyEnvelope(r, easy)
	}
	if r.Intn(5) != 0 {
		v10 := r.Intn(5)
		this.InvalidatedDownlinks = make([]*ApplicationDownlink, v10)
		for i := 0; i < v10; i++ {
			this.InvalidatedDownlinks[i] = NewPopulatedApplicationDownlink(r, easy)
		}
	}
	this.PendingSession = bool(r.Intn(2) == 0)
	v11 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.ReceivedAt = *v11
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedApplicationDownlink_ClassBC(r randyMessages, easy bool) *ApplicationDownlink_ClassBC {
	this := &ApplicationDownlink_ClassBC{}
	if r.Intn(5) != 0 {
		v12 := r.Intn(5)
		this.Gateways = make([]GatewayAntennaIdentifiers, v12)
		for i := 0; i < v12; i++ {
			v13 := NewPopulatedGatewayAntennaIdentifiers(r, easy)
			this.Gateways[i] = *v13
		}
	}
	if r.Intn(5) != 0 {
		this.AbsoluteTime = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedApplicationDownlinks(r randyMessages, easy bool) *ApplicationDownlinks {
	this := &ApplicationDownlinks{}
	if r.Intn(5) != 0 {
		v14 := r.Intn(5)
		this.Downlinks = make([]*ApplicationDownlink, v14)
		for i := 0; i < v14; i++ {
			this.Downlinks[i] = NewPopulatedApplicationDownlink(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedApplicationDownlinkFailed(r randyMessages, easy bool) *ApplicationDownlinkFailed {
	this := &ApplicationDownlinkFailed{}
	v15 := NewPopulatedApplicationDownlink(r, easy)
	this.ApplicationDownlink = *v15
	v16 := NewPopulatedErrorDetails(r, easy)
	this.Error = *v16
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedApplicationInvalidatedDownlinks(r randyMessages, easy bool) *ApplicationInvalidatedDownlinks {
	this := &ApplicationInvalidatedDownlinks{}
	if r.Intn(5) != 0 {
		v17 := r.Intn(5)
		this.Downlinks = make([]*ApplicationDownlink, v17)
		for i := 0; i < v17; i++ {
			this.Downlinks[i] = NewPopulatedApplicationDownlink(r, easy)
		}
	}
	this.LastFCntDown = r.Uint32()
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedApplicationUp(r randyMessages, easy bool) *ApplicationUp {
	this := &ApplicationUp{}
	v18 := NewPopulatedEndDeviceIdentifiers(r, easy)
	this.EndDeviceIdentifiers = *v18
	v19 := r.Intn(10)
	this.CorrelationIDs = make([]string, v19)
	for i := 0; i < v19; i++ {
		this.CorrelationIDs[i] = randStringMessages(r)
	}
	oneofNumber_Up := []int32{3, 4, 5, 6, 7, 8, 9, 10, 11}[r.Intn(9)]
	switch oneofNumber_Up {
	case 3:
		this.Up = NewPopulatedApplicationUp_UplinkMessage(r, easy)
	case 4:
		this.Up = NewPopulatedApplicationUp_JoinAccept(r, easy)
	case 5:
		this.Up = NewPopulatedApplicationUp_DownlinkAck(r, easy)
	case 6:
		this.Up = NewPopulatedApplicationUp_DownlinkNack(r, easy)
	case 7:
		this.Up = NewPopulatedApplicationUp_DownlinkSent(r, easy)
	case 8:
		this.Up = NewPopulatedApplicationUp_DownlinkFailed(r, easy)
	case 9:
		this.Up = NewPopulatedApplicationUp_DownlinkQueued(r, easy)
	case 10:
		this.Up = NewPopulatedApplicationUp_DownlinkQueueInvalidated(r, easy)
	case 11:
		this.Up = NewPopulatedApplicationUp_LocationSolved(r, easy)
	}
	if r.Intn(5) != 0 {
		this.ReceivedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedApplicationUp_UplinkMessage(r randyMessages, easy bool) *ApplicationUp_UplinkMessage {
	this := &ApplicationUp_UplinkMessage{}
	this.UplinkMessage = NewPopulatedApplicationUplink(r, easy)
	return this
}
func NewPopulatedApplicationUp_JoinAccept(r randyMessages, easy bool) *ApplicationUp_JoinAccept {
	this := &ApplicationUp_JoinAccept{}
	this.JoinAccept = NewPopulatedApplicationJoinAccept(r, easy)
	return this
}
func NewPopulatedApplicationUp_DownlinkAck(r randyMessages, easy bool) *ApplicationUp_DownlinkAck {
	this := &ApplicationUp_DownlinkAck{}
	this.DownlinkAck = NewPopulatedApplicationDownlink(r, easy)
	return this
}
func NewPopulatedApplicationUp_DownlinkNack(r randyMessages, easy bool) *ApplicationUp_DownlinkNack {
	this := &ApplicationUp_DownlinkNack{}
	this.DownlinkNack = NewPopulatedApplicationDownlink(r, easy)
	return this
}
func NewPopulatedApplicationUp_DownlinkSent(r randyMessages, easy bool) *ApplicationUp_DownlinkSent {
	this := &ApplicationUp_DownlinkSent{}
	this.DownlinkSent = NewPopulatedApplicationDownlink(r, easy)
	return this
}
func NewPopulatedApplicationUp_DownlinkFailed(r randyMessages, easy bool) *ApplicationUp_DownlinkFailed {
	this := &ApplicationUp_DownlinkFailed{}
	this.DownlinkFailed = NewPopulatedApplicationDownlinkFailed(r, easy)
	return this
}
func NewPopulatedApplicationUp_DownlinkQueued(r randyMessages, easy bool) *ApplicationUp_DownlinkQueued {
	this := &ApplicationUp_DownlinkQueued{}
	this.DownlinkQueued = NewPopulatedApplicationDownlink(r, easy)
	return this
}
func NewPopulatedApplicationUp_DownlinkQueueInvalidated(r randyMessages, easy bool) *ApplicationUp_DownlinkQueueInvalidated {
	this := &ApplicationUp_DownlinkQueueInvalidated{}
	this.DownlinkQueueInvalidated = NewPopulatedApplicationInvalidatedDownlinks(r, easy)
	return this
}
func NewPopulatedApplicationUp_LocationSolved(r randyMessages, easy bool) *ApplicationUp_LocationSolved {
	this := &ApplicationUp_LocationSolved{}
	this.LocationSolved = NewPopulatedApplicationLocation(r, easy)
	return this
}
func NewPopulatedMessagePayloadFormatters(r randyMessages, easy bool) *MessagePayloadFormatters {
	this := &MessagePayloadFormatters{}
	this.UpFormatter = PayloadFormatter([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	this.UpFormatterParameter = randStringMessages(r)
	this.DownFormatter = PayloadFormatter([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	this.DownFormatterParameter = randStringMessages(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDownlinkQueueRequest(r randyMessages, easy bool) *DownlinkQueueRequest {
	this := &DownlinkQueueRequest{}
	v20 := NewPopulatedEndDeviceIdentifiers(r, easy)
	this.EndDeviceIdentifiers = *v20
	if r.Intn(5) != 0 {
		v21 := r.Intn(5)
		this.Downlinks = make([]*ApplicationDownlink, v21)
		for i := 0; i < v21; i++ {
			this.Downlinks[i] = NewPopulatedApplicationDownlink(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyMessages interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneMessages(r randyMessages) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringMessages(r randyMessages) string {
	v22 := r.Intn(100)
	tmps := make([]rune, v22)
	for i := 0; i < v22; i++ {
		tmps[i] = randUTF8RuneMessages(r)
	}
	return string(tmps)
}
func randUnrecognizedMessages(r randyMessages, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldMessages(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldMessages(dAtA []byte, r randyMessages, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateMessages(dAtA, uint64(key))
		v23 := r.Int63()
		if r.Intn(2) == 0 {
			v23 *= -1
		}
		dAtA = encodeVarintPopulateMessages(dAtA, uint64(v23))
	case 1:
		dAtA = encodeVarintPopulateMessages(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateMessages(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateMessages(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateMessages(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateMessages(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *UplinkMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RawPayload)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.Payload != nil {
		l = m.Payload.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	l = m.Settings.Size()
	n += 1 + l + sovMessages(uint64(l))
	if len(m.RxMetadata) > 0 {
		for _, e := range m.RxMetadata {
			l = e.Size()
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ReceivedAt)
	n += 1 + l + sovMessages(uint64(l))
	if len(m.CorrelationIDs) > 0 {
		for _, s := range m.CorrelationIDs {
			l = len(s)
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	if m.DeviceChannelIndex != 0 {
		n += 1 + sovMessages(uint64(m.DeviceChannelIndex))
	}
	return n
}

func (m *DownlinkMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RawPayload)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.Payload != nil {
		l = m.Payload.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.EndDeviceIDs != nil {
		l = m.EndDeviceIDs.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.Settings != nil {
		n += m.Settings.Size()
	}
	if len(m.CorrelationIDs) > 0 {
		for _, s := range m.CorrelationIDs {
			l = len(s)
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	return n
}

func (m *DownlinkMessage_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}
func (m *DownlinkMessage_Scheduled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Scheduled != nil {
		l = m.Scheduled.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}
func (m *TxAcknowledgment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CorrelationIDs) > 0 {
		for _, s := range m.CorrelationIDs {
			l = len(s)
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	if m.Result != 0 {
		n += 1 + sovMessages(uint64(m.Result))
	}
	return n
}

func (m *ApplicationUplink) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionKeyID)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.FPort != 0 {
		n += 1 + sovMessages(uint64(m.FPort))
	}
	if m.FCnt != 0 {
		n += 1 + sovMessages(uint64(m.FCnt))
	}
	l = len(m.FRMPayload)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.DecodedPayload != nil {
		l = m.DecodedPayload.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if len(m.RxMetadata) > 0 {
		for _, e := range m.RxMetadata {
			l = e.Size()
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	l = m.Settings.Size()
	n += 1 + l + sovMessages(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ReceivedAt)
	n += 1 + l + sovMessages(uint64(l))
	return n
}

func (m *ApplicationLocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = m.Location.Size()
	n += 1 + l + sovMessages(uint64(l))
	if len(m.Attributes) > 0 {
		for k, v := range m.Attributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMessages(uint64(len(k))) + 1 + len(v) + sovMessages(uint64(len(v)))
			n += mapEntrySize + 1 + sovMessages(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ApplicationJoinAccept) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionKeyID)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.AppSKey != nil {
		l = m.AppSKey.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if len(m.InvalidatedDownlinks) > 0 {
		for _, e := range m.InvalidatedDownlinks {
			l = e.Size()
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	if m.PendingSession {
		n += 2
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ReceivedAt)
	n += 1 + l + sovMessages(uint64(l))
	return n
}

func (m *ApplicationDownlink) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionKeyID)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.FPort != 0 {
		n += 1 + sovMessages(uint64(m.FPort))
	}
	if m.FCnt != 0 {
		n += 1 + sovMessages(uint64(m.FCnt))
	}
	l = len(m.FRMPayload)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.DecodedPayload != nil {
		l = m.DecodedPayload.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.Confirmed {
		n += 2
	}
	if m.ClassBC != nil {
		l = m.ClassBC.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.Priority != 0 {
		n += 1 + sovMessages(uint64(m.Priority))
	}
	if len(m.CorrelationIDs) > 0 {
		for _, s := range m.CorrelationIDs {
			l = len(s)
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	return n
}

func (m *ApplicationDownlink_ClassBC) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Gateways) > 0 {
		for _, e := range m.Gateways {
			l = e.Size()
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	if m.AbsoluteTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.AbsoluteTime)
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *ApplicationDownlinks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Downlinks) > 0 {
		for _, e := range m.Downlinks {
			l = e.Size()
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	return n
}

func (m *ApplicationDownlinkFailed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ApplicationDownlink.Size()
	n += 1 + l + sovMessages(uint64(l))
	l = m.Error.Size()
	n += 1 + l + sovMessages(uint64(l))
	return n
}

func (m *ApplicationInvalidatedDownlinks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Downlinks) > 0 {
		for _, e := range m.Downlinks {
			l = e.Size()
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	if m.LastFCntDown != 0 {
		n += 1 + sovMessages(uint64(m.LastFCntDown))
	}
	return n
}

func (m *ApplicationUp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EndDeviceIdentifiers.Size()
	n += 1 + l + sovMessages(uint64(l))
	if len(m.CorrelationIDs) > 0 {
		for _, s := range m.CorrelationIDs {
			l = len(s)
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	if m.Up != nil {
		n += m.Up.Size()
	}
	if m.ReceivedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ReceivedAt)
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *ApplicationUp_UplinkMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UplinkMessage != nil {
		l = m.UplinkMessage.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}
func (m *ApplicationUp_JoinAccept) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JoinAccept != nil {
		l = m.JoinAccept.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}
func (m *ApplicationUp_DownlinkAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DownlinkAck != nil {
		l = m.DownlinkAck.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}
func (m *ApplicationUp_DownlinkNack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DownlinkNack != nil {
		l = m.DownlinkNack.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}
func (m *ApplicationUp_DownlinkSent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DownlinkSent != nil {
		l = m.DownlinkSent.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}
func (m *ApplicationUp_DownlinkFailed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DownlinkFailed != nil {
		l = m.DownlinkFailed.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}
func (m *ApplicationUp_DownlinkQueued) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DownlinkQueued != nil {
		l = m.DownlinkQueued.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}
func (m *ApplicationUp_DownlinkQueueInvalidated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DownlinkQueueInvalidated != nil {
		l = m.DownlinkQueueInvalidated.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}
func (m *ApplicationUp_LocationSolved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LocationSolved != nil {
		l = m.LocationSolved.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}
func (m *MessagePayloadFormatters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpFormatter != 0 {
		n += 1 + sovMessages(uint64(m.UpFormatter))
	}
	l = len(m.UpFormatterParameter)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.DownFormatter != 0 {
		n += 1 + sovMessages(uint64(m.DownFormatter))
	}
	l = len(m.DownFormatterParameter)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *DownlinkQueueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EndDeviceIdentifiers.Size()
	n += 1 + l + sovMessages(uint64(l))
	if len(m.Downlinks) > 0 {
		for _, e := range m.Downlinks {
			l = e.Size()
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	return n
}

func sovMessages(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessages(x uint64) (n int) {
	return sovMessages((x << 1) ^ uint64((int64(x) >> 63)))
}
func (this *UplinkMessage) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRxMetadata := "[]*RxMetadata{"
	for _, f := range this.RxMetadata {
		repeatedStringForRxMetadata += strings.Replace(fmt.Sprintf("%v", f), "RxMetadata", "RxMetadata", 1) + ","
	}
	repeatedStringForRxMetadata += "}"
	s := strings.Join([]string{`&UplinkMessage{`,
		`RawPayload:` + fmt.Sprintf("%v", this.RawPayload) + `,`,
		`Payload:` + strings.Replace(fmt.Sprintf("%v", this.Payload), "Message", "Message", 1) + `,`,
		`Settings:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Settings), "TxSettings", "TxSettings", 1), `&`, ``, 1) + `,`,
		`RxMetadata:` + repeatedStringForRxMetadata + `,`,
		`ReceivedAt:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ReceivedAt), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`CorrelationIDs:` + fmt.Sprintf("%v", this.CorrelationIDs) + `,`,
		`DeviceChannelIndex:` + fmt.Sprintf("%v", this.DeviceChannelIndex) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownlinkMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownlinkMessage{`,
		`RawPayload:` + fmt.Sprintf("%v", this.RawPayload) + `,`,
		`Payload:` + strings.Replace(fmt.Sprintf("%v", this.Payload), "Message", "Message", 1) + `,`,
		`EndDeviceIDs:` + strings.Replace(fmt.Sprintf("%v", this.EndDeviceIDs), "EndDeviceIdentifiers", "EndDeviceIdentifiers", 1) + `,`,
		`Settings:` + fmt.Sprintf("%v", this.Settings) + `,`,
		`CorrelationIDs:` + fmt.Sprintf("%v", this.CorrelationIDs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownlinkMessage_Request) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownlinkMessage_Request{`,
		`Request:` + strings.Replace(fmt.Sprintf("%v", this.Request), "TxRequest", "TxRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownlinkMessage_Scheduled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownlinkMessage_Scheduled{`,
		`Scheduled:` + strings.Replace(fmt.Sprintf("%v", this.Scheduled), "TxSettings", "TxSettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TxAcknowledgment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TxAcknowledgment{`,
		`CorrelationIDs:` + fmt.Sprintf("%v", this.CorrelationIDs) + `,`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationUplink) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRxMetadata := "[]*RxMetadata{"
	for _, f := range this.RxMetadata {
		repeatedStringForRxMetadata += strings.Replace(fmt.Sprintf("%v", f), "RxMetadata", "RxMetadata", 1) + ","
	}
	repeatedStringForRxMetadata += "}"
	s := strings.Join([]string{`&ApplicationUplink{`,
		`SessionKeyID:` + fmt.Sprintf("%v", this.SessionKeyID) + `,`,
		`FPort:` + fmt.Sprintf("%v", this.FPort) + `,`,
		`FCnt:` + fmt.Sprintf("%v", this.FCnt) + `,`,
		`FRMPayload:` + fmt.Sprintf("%v", this.FRMPayload) + `,`,
		`DecodedPayload:` + strings.Replace(fmt.Sprintf("%v", this.DecodedPayload), "Struct", "types.Struct", 1) + `,`,
		`RxMetadata:` + repeatedStringForRxMetadata + `,`,
		`Settings:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Settings), "TxSettings", "TxSettings", 1), `&`, ``, 1) + `,`,
		`ReceivedAt:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ReceivedAt), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationLocation) String() string {
	if this == nil {
		return "nil"
	}
	keysForAttributes := make([]string, 0, len(this.Attributes))
	for k := range this.Attributes {
		keysForAttributes = append(keysForAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributes)
	mapStringForAttributes := "map[string]string{"
	for _, k := range keysForAttributes {
		mapStringForAttributes += fmt.Sprintf("%v: %v,", k, this.Attributes[k])
	}
	mapStringForAttributes += "}"
	s := strings.Join([]string{`&ApplicationLocation{`,
		`Service:` + fmt.Sprintf("%v", this.Service) + `,`,
		`Location:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Location), "Location", "Location", 1), `&`, ``, 1) + `,`,
		`Attributes:` + mapStringForAttributes + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationJoinAccept) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForInvalidatedDownlinks := "[]*ApplicationDownlink{"
	for _, f := range this.InvalidatedDownlinks {
		repeatedStringForInvalidatedDownlinks += strings.Replace(f.String(), "ApplicationDownlink", "ApplicationDownlink", 1) + ","
	}
	repeatedStringForInvalidatedDownlinks += "}"
	s := strings.Join([]string{`&ApplicationJoinAccept{`,
		`SessionKeyID:` + fmt.Sprintf("%v", this.SessionKeyID) + `,`,
		`AppSKey:` + strings.Replace(fmt.Sprintf("%v", this.AppSKey), "KeyEnvelope", "KeyEnvelope", 1) + `,`,
		`InvalidatedDownlinks:` + repeatedStringForInvalidatedDownlinks + `,`,
		`PendingSession:` + fmt.Sprintf("%v", this.PendingSession) + `,`,
		`ReceivedAt:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ReceivedAt), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationDownlink) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationDownlink{`,
		`SessionKeyID:` + fmt.Sprintf("%v", this.SessionKeyID) + `,`,
		`FPort:` + fmt.Sprintf("%v", this.FPort) + `,`,
		`FCnt:` + fmt.Sprintf("%v", this.FCnt) + `,`,
		`FRMPayload:` + fmt.Sprintf("%v", this.FRMPayload) + `,`,
		`DecodedPayload:` + strings.Replace(fmt.Sprintf("%v", this.DecodedPayload), "Struct", "types.Struct", 1) + `,`,
		`Confirmed:` + fmt.Sprintf("%v", this.Confirmed) + `,`,
		`ClassBC:` + strings.Replace(fmt.Sprintf("%v", this.ClassBC), "ApplicationDownlink_ClassBC", "ApplicationDownlink_ClassBC", 1) + `,`,
		`Priority:` + fmt.Sprintf("%v", this.Priority) + `,`,
		`CorrelationIDs:` + fmt.Sprintf("%v", this.CorrelationIDs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationDownlink_ClassBC) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForGateways := "[]GatewayAntennaIdentifiers{"
	for _, f := range this.Gateways {
		repeatedStringForGateways += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForGateways += "}"
	s := strings.Join([]string{`&ApplicationDownlink_ClassBC{`,
		`Gateways:` + repeatedStringForGateways + `,`,
		`AbsoluteTime:` + strings.Replace(fmt.Sprintf("%v", this.AbsoluteTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationDownlinks) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDownlinks := "[]*ApplicationDownlink{"
	for _, f := range this.Downlinks {
		repeatedStringForDownlinks += strings.Replace(f.String(), "ApplicationDownlink", "ApplicationDownlink", 1) + ","
	}
	repeatedStringForDownlinks += "}"
	s := strings.Join([]string{`&ApplicationDownlinks{`,
		`Downlinks:` + repeatedStringForDownlinks + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationDownlinkFailed) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationDownlinkFailed{`,
		`ApplicationDownlink:` + strings.Replace(strings.Replace(this.ApplicationDownlink.String(), "ApplicationDownlink", "ApplicationDownlink", 1), `&`, ``, 1) + `,`,
		`Error:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Error), "ErrorDetails", "ErrorDetails", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationInvalidatedDownlinks) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDownlinks := "[]*ApplicationDownlink{"
	for _, f := range this.Downlinks {
		repeatedStringForDownlinks += strings.Replace(f.String(), "ApplicationDownlink", "ApplicationDownlink", 1) + ","
	}
	repeatedStringForDownlinks += "}"
	s := strings.Join([]string{`&ApplicationInvalidatedDownlinks{`,
		`Downlinks:` + repeatedStringForDownlinks + `,`,
		`LastFCntDown:` + fmt.Sprintf("%v", this.LastFCntDown) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationUp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationUp{`,
		`EndDeviceIdentifiers:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.EndDeviceIdentifiers), "EndDeviceIdentifiers", "EndDeviceIdentifiers", 1), `&`, ``, 1) + `,`,
		`CorrelationIDs:` + fmt.Sprintf("%v", this.CorrelationIDs) + `,`,
		`Up:` + fmt.Sprintf("%v", this.Up) + `,`,
		`ReceivedAt:` + strings.Replace(fmt.Sprintf("%v", this.ReceivedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationUp_UplinkMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationUp_UplinkMessage{`,
		`UplinkMessage:` + strings.Replace(fmt.Sprintf("%v", this.UplinkMessage), "ApplicationUplink", "ApplicationUplink", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationUp_JoinAccept) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationUp_JoinAccept{`,
		`JoinAccept:` + strings.Replace(fmt.Sprintf("%v", this.JoinAccept), "ApplicationJoinAccept", "ApplicationJoinAccept", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationUp_DownlinkAck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationUp_DownlinkAck{`,
		`DownlinkAck:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkAck), "ApplicationDownlink", "ApplicationDownlink", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationUp_DownlinkNack) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationUp_DownlinkNack{`,
		`DownlinkNack:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkNack), "ApplicationDownlink", "ApplicationDownlink", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationUp_DownlinkSent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationUp_DownlinkSent{`,
		`DownlinkSent:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkSent), "ApplicationDownlink", "ApplicationDownlink", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationUp_DownlinkFailed) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationUp_DownlinkFailed{`,
		`DownlinkFailed:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkFailed), "ApplicationDownlinkFailed", "ApplicationDownlinkFailed", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationUp_DownlinkQueued) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationUp_DownlinkQueued{`,
		`DownlinkQueued:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkQueued), "ApplicationDownlink", "ApplicationDownlink", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationUp_DownlinkQueueInvalidated) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationUp_DownlinkQueueInvalidated{`,
		`DownlinkQueueInvalidated:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkQueueInvalidated), "ApplicationInvalidatedDownlinks", "ApplicationInvalidatedDownlinks", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationUp_LocationSolved) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationUp_LocationSolved{`,
		`LocationSolved:` + strings.Replace(fmt.Sprintf("%v", this.LocationSolved), "ApplicationLocation", "ApplicationLocation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessagePayloadFormatters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessagePayloadFormatters{`,
		`UpFormatter:` + fmt.Sprintf("%v", this.UpFormatter) + `,`,
		`UpFormatterParameter:` + fmt.Sprintf("%v", this.UpFormatterParameter) + `,`,
		`DownFormatter:` + fmt.Sprintf("%v", this.DownFormatter) + `,`,
		`DownFormatterParameter:` + fmt.Sprintf("%v", this.DownFormatterParameter) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownlinkQueueRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDownlinks := "[]*ApplicationDownlink{"
	for _, f := range this.Downlinks {
		repeatedStringForDownlinks += strings.Replace(f.String(), "ApplicationDownlink", "ApplicationDownlink", 1) + ","
	}
	repeatedStringForDownlinks += "}"
	s := strings.Join([]string{`&DownlinkQueueRequest{`,
		`EndDeviceIdentifiers:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.EndDeviceIdentifiers), "EndDeviceIdentifiers", "EndDeviceIdentifiers", 1), `&`, ``, 1) + `,`,
		`Downlinks:` + repeatedStringForDownlinks + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessages(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *UplinkMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UplinkMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UplinkMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawPayload = append(m.RawPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.RawPayload == nil {
				m.RawPayload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payload == nil {
				m.Payload = &Message{}
			}
			if err := m.Payload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RxMetadata = append(m.RxMetadata, &RxMetadata{})
			if err := m.RxMetadata[len(m.RxMetadata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ReceivedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrelationIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CorrelationIDs = append(m.CorrelationIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceChannelIndex", wireType)
			}
			m.DeviceChannelIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceChannelIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownlinkMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownlinkMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownlinkMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawPayload = append(m.RawPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.RawPayload == nil {
				m.RawPayload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payload == nil {
				m.Payload = &Message{}
			}
			if err := m.Payload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDeviceIDs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndDeviceIDs == nil {
				m.EndDeviceIDs = &EndDeviceIdentifiers{}
			}
			if err := m.EndDeviceIDs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TxRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Settings = &DownlinkMessage_Request{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scheduled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TxSettings{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Settings = &DownlinkMessage_Scheduled{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrelationIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CorrelationIDs = append(m.CorrelationIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxAcknowledgment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxAcknowledgment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxAcknowledgment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrelationIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CorrelationIDs = append(m.CorrelationIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= TxAcknowledgment_Result(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationUplink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationUplink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationUplink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionKeyID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionKeyID = append(m.SessionKeyID[:0], dAtA[iNdEx:postIndex]...)
			if m.SessionKeyID == nil {
				m.SessionKeyID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FPort", wireType)
			}
			m.FPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCnt", wireType)
			}
			m.FCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FCnt |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FRMPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FRMPayload = append(m.FRMPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.FRMPayload == nil {
				m.FRMPayload = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecodedPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DecodedPayload == nil {
				m.DecodedPayload = &types.Struct{}
			}
			if err := m.DecodedPayload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RxMetadata = append(m.RxMetadata, &RxMetadata{})
			if err := m.RxMetadata[len(m.RxMetadata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ReceivedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationLocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationLocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationLocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMessages
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMessages
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthMessages
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthMessages
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessages(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMessages
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attributes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationJoinAccept) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationJoinAccept: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationJoinAccept: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionKeyID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionKeyID = append(m.SessionKeyID[:0], dAtA[iNdEx:postIndex]...)
			if m.SessionKeyID == nil {
				m.SessionKeyID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppSKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppSKey == nil {
				m.AppSKey = &KeyEnvelope{}
			}
			if err := m.AppSKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidatedDownlinks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvalidatedDownlinks = append(m.InvalidatedDownlinks, &ApplicationDownlink{})
			if err := m.InvalidatedDownlinks[len(m.InvalidatedDownlinks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingSession", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PendingSession = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ReceivedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationDownlink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationDownlink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationDownlink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionKeyID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionKeyID = append(m.SessionKeyID[:0], dAtA[iNdEx:postIndex]...)
			if m.SessionKeyID == nil {
				m.SessionKeyID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FPort", wireType)
			}
			m.FPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCnt", wireType)
			}
			m.FCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FCnt |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FRMPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FRMPayload = append(m.FRMPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.FRMPayload == nil {
				m.FRMPayload = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecodedPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DecodedPayload == nil {
				m.DecodedPayload = &types.Struct{}
			}
			if err := m.DecodedPayload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirmed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Confirmed = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassBC", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClassBC == nil {
				m.ClassBC = &ApplicationDownlink_ClassBC{}
			}
			if err := m.ClassBC.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= TxSchedulePriority(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrelationIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CorrelationIDs = append(m.CorrelationIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationDownlink_ClassBC) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClassBC: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClassBC: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateways", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateways = append(m.Gateways, GatewayAntennaIdentifiers{})
			if err := m.Gateways[len(m.Gateways)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbsoluteTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AbsoluteTime == nil {
				m.AbsoluteTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.AbsoluteTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationDownlinks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationDownlinks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationDownlinks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Downlinks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Downlinks = append(m.Downlinks, &ApplicationDownlink{})
			if err := m.Downlinks[len(m.Downlinks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationDownlinkFailed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationDownlinkFailed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationDownlinkFailed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationDownlink", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationDownlink.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationInvalidatedDownlinks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationInvalidatedDownlinks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationInvalidatedDownlinks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Downlinks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Downlinks = append(m.Downlinks, &ApplicationDownlink{})
			if err := m.Downlinks[len(m.Downlinks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastFCntDown", wireType)
			}
			m.LastFCntDown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastFCntDown |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationUp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationUp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationUp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDeviceIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EndDeviceIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrelationIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CorrelationIDs = append(m.CorrelationIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplinkMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApplicationUplink{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Up = &ApplicationUp_UplinkMessage{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinAccept", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApplicationJoinAccept{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Up = &ApplicationUp_JoinAccept{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkAck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApplicationDownlink{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Up = &ApplicationUp_DownlinkAck{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkNack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApplicationDownlink{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Up = &ApplicationUp_DownlinkNack{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkSent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApplicationDownlink{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Up = &ApplicationUp_DownlinkSent{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkFailed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApplicationDownlinkFailed{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Up = &ApplicationUp_DownlinkFailed{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkQueued", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApplicationDownlink{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Up = &ApplicationUp_DownlinkQueued{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkQueueInvalidated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApplicationInvalidatedDownlinks{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Up = &ApplicationUp_DownlinkQueueInvalidated{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationSolved", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApplicationLocation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Up = &ApplicationUp_LocationSolved{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReceivedAt == nil {
				m.ReceivedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ReceivedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagePayloadFormatters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagePayloadFormatters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagePayloadFormatters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpFormatter", wireType)
			}
			m.UpFormatter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpFormatter |= PayloadFormatter(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpFormatterParameter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpFormatterParameter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownFormatter", wireType)
			}
			m.DownFormatter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DownFormatter |= PayloadFormatter(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownFormatterParameter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownFormatterParameter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownlinkQueueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownlinkQueueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownlinkQueueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDeviceIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EndDeviceIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Downlinks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Downlinks = append(m.Downlinks, &ApplicationDownlink{})
			if err := m.Downlinks[len(m.Downlinks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessages(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessages
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessages
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessages
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessages        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessages          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessages = fmt.Errorf("proto: unexpected end of group")
)
