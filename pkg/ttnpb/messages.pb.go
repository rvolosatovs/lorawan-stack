// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: go.thethings.network/lorawan-stack/api/messages.proto

package ttnpb // import "go.thethings.network/lorawan-stack/pkg/ttnpb"

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"

import time "time"

import bytes "bytes"

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Uplink message from the end device to the network
type UplinkMessage struct {
	// Raw uplink bytes (PHYPayload)
	RawPayload []byte `protobuf:"bytes,1,opt,name=raw_payload,json=rawPayload,proto3" json:"raw_payload,omitempty"`
	// LoRaWAN Payload
	Payload Message `protobuf:"bytes,2,opt,name=payload" json:"payload"`
	// End device identifiers
	EndDeviceIdentifiers `protobuf:"bytes,3,opt,name=end_device,json=endDevice,embedded=end_device" json:"end_device"`
	// LoRaWAN Tx settings used for this transmission
	Settings TxSettings `protobuf:"bytes,4,opt,name=settings" json:"settings"`
	// Rx metadata from the gateway, one for each antenna that received the message
	RxMetadata []*RxMetadata `protobuf:"bytes,5,rep,name=rx_metadata,json=rxMetadata" json:"rx_metadata,omitempty"`
	// Locations from various sources
	Locations map[string]LocationSource `protobuf:"bytes,6,rep,name=locations" json:"locations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=ttn.lorawan.v3.LocationSource"`
	// ReceivedAt represents the time instant when the Gateway Server received the message.
	ReceivedAt           time.Time `protobuf:"bytes,7,opt,name=received_at,json=receivedAt,stdtime" json:"received_at"`
	CorrelationIDs       []string  `protobuf:"bytes,8,rep,name=correlation_ids,json=correlationIds" json:"correlation_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *UplinkMessage) Reset()      { *m = UplinkMessage{} }
func (*UplinkMessage) ProtoMessage() {}
func (*UplinkMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_messages_fcfc45cc96fcf0db, []int{0}
}
func (m *UplinkMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UplinkMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UplinkMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UplinkMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UplinkMessage.Merge(dst, src)
}
func (m *UplinkMessage) XXX_Size() int {
	return m.Size()
}
func (m *UplinkMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_UplinkMessage.DiscardUnknown(m)
}

var xxx_messageInfo_UplinkMessage proto.InternalMessageInfo

func (m *UplinkMessage) GetRawPayload() []byte {
	if m != nil {
		return m.RawPayload
	}
	return nil
}

func (m *UplinkMessage) GetPayload() Message {
	if m != nil {
		return m.Payload
	}
	return Message{}
}

func (m *UplinkMessage) GetSettings() TxSettings {
	if m != nil {
		return m.Settings
	}
	return TxSettings{}
}

func (m *UplinkMessage) GetRxMetadata() []*RxMetadata {
	if m != nil {
		return m.RxMetadata
	}
	return nil
}

func (m *UplinkMessage) GetLocations() map[string]LocationSource {
	if m != nil {
		return m.Locations
	}
	return nil
}

func (m *UplinkMessage) GetReceivedAt() time.Time {
	if m != nil {
		return m.ReceivedAt
	}
	return time.Time{}
}

func (m *UplinkMessage) GetCorrelationIDs() []string {
	if m != nil {
		return m.CorrelationIDs
	}
	return nil
}

// Downlink message from the network to the end device
type DownlinkMessage struct {
	// Raw downlink bytes (PHYPayload)
	RawPayload []byte `protobuf:"bytes,1,opt,name=raw_payload,json=rawPayload,proto3" json:"raw_payload,omitempty"`
	// LoRaWAN Payload
	Payload Message `protobuf:"bytes,2,opt,name=payload" json:"payload"`
	// End device identifiers
	EndDeviceIdentifiers `protobuf:"bytes,3,opt,name=end_device,json=endDevice,embedded=end_device" json:"end_device"`
	// LoRaWAN Tx settings used for this transmission
	Settings TxSettings `protobuf:"bytes,4,opt,name=settings" json:"settings"`
	// Tx metadata for the gateway
	TxMetadata           TxMetadata `protobuf:"bytes,5,opt,name=tx_metadata,json=txMetadata" json:"tx_metadata"`
	CorrelationIDs       []string   `protobuf:"bytes,6,rep,name=correlation_ids,json=correlationIds" json:"correlation_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *DownlinkMessage) Reset()      { *m = DownlinkMessage{} }
func (*DownlinkMessage) ProtoMessage() {}
func (*DownlinkMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_messages_fcfc45cc96fcf0db, []int{1}
}
func (m *DownlinkMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownlinkMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownlinkMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DownlinkMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownlinkMessage.Merge(dst, src)
}
func (m *DownlinkMessage) XXX_Size() int {
	return m.Size()
}
func (m *DownlinkMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_DownlinkMessage.DiscardUnknown(m)
}

var xxx_messageInfo_DownlinkMessage proto.InternalMessageInfo

func (m *DownlinkMessage) GetRawPayload() []byte {
	if m != nil {
		return m.RawPayload
	}
	return nil
}

func (m *DownlinkMessage) GetPayload() Message {
	if m != nil {
		return m.Payload
	}
	return Message{}
}

func (m *DownlinkMessage) GetSettings() TxSettings {
	if m != nil {
		return m.Settings
	}
	return TxSettings{}
}

func (m *DownlinkMessage) GetTxMetadata() TxMetadata {
	if m != nil {
		return m.TxMetadata
	}
	return TxMetadata{}
}

func (m *DownlinkMessage) GetCorrelationIDs() []string {
	if m != nil {
		return m.CorrelationIDs
	}
	return nil
}

type ApplicationUplink struct {
	// Join Server issued identifier for the session keys.
	SessionKeyID         string        `protobuf:"bytes,1,opt,name=session_key_id,json=sessionKeyId,proto3" json:"session_key_id,omitempty"`
	FPort                uint32        `protobuf:"varint,2,opt,name=f_port,json=fPort,proto3" json:"f_port,omitempty"`
	FCnt                 uint32        `protobuf:"varint,3,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	FRMPayload           []byte        `protobuf:"bytes,4,opt,name=frm_payload,json=frmPayload,proto3" json:"frm_payload,omitempty"`
	RxMetadata           []*RxMetadata `protobuf:"bytes,5,rep,name=rx_metadata,json=rxMetadata" json:"rx_metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ApplicationUplink) Reset()      { *m = ApplicationUplink{} }
func (*ApplicationUplink) ProtoMessage() {}
func (*ApplicationUplink) Descriptor() ([]byte, []int) {
	return fileDescriptor_messages_fcfc45cc96fcf0db, []int{2}
}
func (m *ApplicationUplink) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationUplink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationUplink.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ApplicationUplink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationUplink.Merge(dst, src)
}
func (m *ApplicationUplink) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationUplink) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationUplink.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationUplink proto.InternalMessageInfo

func (m *ApplicationUplink) GetSessionKeyID() string {
	if m != nil {
		return m.SessionKeyID
	}
	return ""
}

func (m *ApplicationUplink) GetFPort() uint32 {
	if m != nil {
		return m.FPort
	}
	return 0
}

func (m *ApplicationUplink) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

func (m *ApplicationUplink) GetFRMPayload() []byte {
	if m != nil {
		return m.FRMPayload
	}
	return nil
}

func (m *ApplicationUplink) GetRxMetadata() []*RxMetadata {
	if m != nil {
		return m.RxMetadata
	}
	return nil
}

type ApplicationJoinAccept struct {
	// Join Server issued identifier for the session keys.
	SessionKeyID string `protobuf:"bytes,1,opt,name=session_key_id,json=sessionKeyId,proto3" json:"session_key_id,omitempty"`
	// The (encrypted) Application Session Key.
	AppSKey              *KeyEnvelope `protobuf:"bytes,2,opt,name=app_s_key,json=appSKey" json:"app_s_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ApplicationJoinAccept) Reset()      { *m = ApplicationJoinAccept{} }
func (*ApplicationJoinAccept) ProtoMessage() {}
func (*ApplicationJoinAccept) Descriptor() ([]byte, []int) {
	return fileDescriptor_messages_fcfc45cc96fcf0db, []int{3}
}
func (m *ApplicationJoinAccept) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationJoinAccept) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationJoinAccept.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ApplicationJoinAccept) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationJoinAccept.Merge(dst, src)
}
func (m *ApplicationJoinAccept) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationJoinAccept) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationJoinAccept.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationJoinAccept proto.InternalMessageInfo

func (m *ApplicationJoinAccept) GetSessionKeyID() string {
	if m != nil {
		return m.SessionKeyID
	}
	return ""
}

func (m *ApplicationJoinAccept) GetAppSKey() *KeyEnvelope {
	if m != nil {
		return m.AppSKey
	}
	return nil
}

type ApplicationDownlink struct {
	FPort                uint32   `protobuf:"varint,1,opt,name=f_port,json=fPort,proto3" json:"f_port,omitempty"`
	FCnt                 uint32   `protobuf:"varint,2,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	FRMPayload           []byte   `protobuf:"bytes,3,opt,name=frm_payload,json=frmPayload,proto3" json:"frm_payload,omitempty"`
	Confirmed            bool     `protobuf:"varint,4,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	CorrelationIDs       []string `protobuf:"bytes,5,rep,name=correlation_ids,json=correlationIds" json:"correlation_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplicationDownlink) Reset()      { *m = ApplicationDownlink{} }
func (*ApplicationDownlink) ProtoMessage() {}
func (*ApplicationDownlink) Descriptor() ([]byte, []int) {
	return fileDescriptor_messages_fcfc45cc96fcf0db, []int{4}
}
func (m *ApplicationDownlink) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationDownlink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationDownlink.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ApplicationDownlink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationDownlink.Merge(dst, src)
}
func (m *ApplicationDownlink) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationDownlink) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationDownlink.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationDownlink proto.InternalMessageInfo

func (m *ApplicationDownlink) GetFPort() uint32 {
	if m != nil {
		return m.FPort
	}
	return 0
}

func (m *ApplicationDownlink) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

func (m *ApplicationDownlink) GetFRMPayload() []byte {
	if m != nil {
		return m.FRMPayload
	}
	return nil
}

func (m *ApplicationDownlink) GetConfirmed() bool {
	if m != nil {
		return m.Confirmed
	}
	return false
}

func (m *ApplicationDownlink) GetCorrelationIDs() []string {
	if m != nil {
		return m.CorrelationIDs
	}
	return nil
}

func init() {
	proto.RegisterType((*UplinkMessage)(nil), "ttn.lorawan.v3.UplinkMessage")
	golang_proto.RegisterType((*UplinkMessage)(nil), "ttn.lorawan.v3.UplinkMessage")
	proto.RegisterMapType((map[string]LocationSource)(nil), "ttn.lorawan.v3.UplinkMessage.LocationsEntry")
	golang_proto.RegisterMapType((map[string]LocationSource)(nil), "ttn.lorawan.v3.UplinkMessage.LocationsEntry")
	proto.RegisterType((*DownlinkMessage)(nil), "ttn.lorawan.v3.DownlinkMessage")
	golang_proto.RegisterType((*DownlinkMessage)(nil), "ttn.lorawan.v3.DownlinkMessage")
	proto.RegisterType((*ApplicationUplink)(nil), "ttn.lorawan.v3.ApplicationUplink")
	golang_proto.RegisterType((*ApplicationUplink)(nil), "ttn.lorawan.v3.ApplicationUplink")
	proto.RegisterType((*ApplicationJoinAccept)(nil), "ttn.lorawan.v3.ApplicationJoinAccept")
	golang_proto.RegisterType((*ApplicationJoinAccept)(nil), "ttn.lorawan.v3.ApplicationJoinAccept")
	proto.RegisterType((*ApplicationDownlink)(nil), "ttn.lorawan.v3.ApplicationDownlink")
	golang_proto.RegisterType((*ApplicationDownlink)(nil), "ttn.lorawan.v3.ApplicationDownlink")
}
func (this *UplinkMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UplinkMessage)
	if !ok {
		that2, ok := that.(UplinkMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.RawPayload, that1.RawPayload) {
		return false
	}
	if !this.Payload.Equal(&that1.Payload) {
		return false
	}
	if !this.EndDeviceIdentifiers.Equal(&that1.EndDeviceIdentifiers) {
		return false
	}
	if !this.Settings.Equal(&that1.Settings) {
		return false
	}
	if len(this.RxMetadata) != len(that1.RxMetadata) {
		return false
	}
	for i := range this.RxMetadata {
		if !this.RxMetadata[i].Equal(that1.RxMetadata[i]) {
			return false
		}
	}
	if len(this.Locations) != len(that1.Locations) {
		return false
	}
	for i := range this.Locations {
		if this.Locations[i] != that1.Locations[i] {
			return false
		}
	}
	if !this.ReceivedAt.Equal(that1.ReceivedAt) {
		return false
	}
	if len(this.CorrelationIDs) != len(that1.CorrelationIDs) {
		return false
	}
	for i := range this.CorrelationIDs {
		if this.CorrelationIDs[i] != that1.CorrelationIDs[i] {
			return false
		}
	}
	return true
}
func (this *DownlinkMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownlinkMessage)
	if !ok {
		that2, ok := that.(DownlinkMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.RawPayload, that1.RawPayload) {
		return false
	}
	if !this.Payload.Equal(&that1.Payload) {
		return false
	}
	if !this.EndDeviceIdentifiers.Equal(&that1.EndDeviceIdentifiers) {
		return false
	}
	if !this.Settings.Equal(&that1.Settings) {
		return false
	}
	if !this.TxMetadata.Equal(&that1.TxMetadata) {
		return false
	}
	if len(this.CorrelationIDs) != len(that1.CorrelationIDs) {
		return false
	}
	for i := range this.CorrelationIDs {
		if this.CorrelationIDs[i] != that1.CorrelationIDs[i] {
			return false
		}
	}
	return true
}
func (this *ApplicationUplink) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationUplink)
	if !ok {
		that2, ok := that.(ApplicationUplink)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SessionKeyID != that1.SessionKeyID {
		return false
	}
	if this.FPort != that1.FPort {
		return false
	}
	if this.FCnt != that1.FCnt {
		return false
	}
	if !bytes.Equal(this.FRMPayload, that1.FRMPayload) {
		return false
	}
	if len(this.RxMetadata) != len(that1.RxMetadata) {
		return false
	}
	for i := range this.RxMetadata {
		if !this.RxMetadata[i].Equal(that1.RxMetadata[i]) {
			return false
		}
	}
	return true
}
func (this *ApplicationJoinAccept) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationJoinAccept)
	if !ok {
		that2, ok := that.(ApplicationJoinAccept)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SessionKeyID != that1.SessionKeyID {
		return false
	}
	if !this.AppSKey.Equal(that1.AppSKey) {
		return false
	}
	return true
}
func (this *ApplicationDownlink) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationDownlink)
	if !ok {
		that2, ok := that.(ApplicationDownlink)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FPort != that1.FPort {
		return false
	}
	if this.FCnt != that1.FCnt {
		return false
	}
	if !bytes.Equal(this.FRMPayload, that1.FRMPayload) {
		return false
	}
	if this.Confirmed != that1.Confirmed {
		return false
	}
	if len(this.CorrelationIDs) != len(that1.CorrelationIDs) {
		return false
	}
	for i := range this.CorrelationIDs {
		if this.CorrelationIDs[i] != that1.CorrelationIDs[i] {
			return false
		}
	}
	return true
}
func (m *UplinkMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UplinkMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RawPayload) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessages(dAtA, i, uint64(len(m.RawPayload)))
		i += copy(dAtA[i:], m.RawPayload)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintMessages(dAtA, i, uint64(m.Payload.Size()))
	n1, err := m.Payload.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x1a
	i++
	i = encodeVarintMessages(dAtA, i, uint64(m.EndDeviceIdentifiers.Size()))
	n2, err := m.EndDeviceIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x22
	i++
	i = encodeVarintMessages(dAtA, i, uint64(m.Settings.Size()))
	n3, err := m.Settings.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if len(m.RxMetadata) > 0 {
		for _, msg := range m.RxMetadata {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintMessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Locations) > 0 {
		for k := range m.Locations {
			dAtA[i] = 0x32
			i++
			v := m.Locations[k]
			mapSize := 1 + len(k) + sovMessages(uint64(len(k))) + 1 + sovMessages(uint64(v))
			i = encodeVarintMessages(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessages(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			i = encodeVarintMessages(dAtA, i, uint64(v))
		}
	}
	dAtA[i] = 0x3a
	i++
	i = encodeVarintMessages(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.ReceivedAt)))
	n4, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ReceivedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if len(m.CorrelationIDs) > 0 {
		for _, s := range m.CorrelationIDs {
			dAtA[i] = 0x42
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *DownlinkMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownlinkMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RawPayload) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessages(dAtA, i, uint64(len(m.RawPayload)))
		i += copy(dAtA[i:], m.RawPayload)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintMessages(dAtA, i, uint64(m.Payload.Size()))
	n5, err := m.Payload.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x1a
	i++
	i = encodeVarintMessages(dAtA, i, uint64(m.EndDeviceIdentifiers.Size()))
	n6, err := m.EndDeviceIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x22
	i++
	i = encodeVarintMessages(dAtA, i, uint64(m.Settings.Size()))
	n7, err := m.Settings.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x2a
	i++
	i = encodeVarintMessages(dAtA, i, uint64(m.TxMetadata.Size()))
	n8, err := m.TxMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	if len(m.CorrelationIDs) > 0 {
		for _, s := range m.CorrelationIDs {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *ApplicationUplink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationUplink) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SessionKeyID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessages(dAtA, i, uint64(len(m.SessionKeyID)))
		i += copy(dAtA[i:], m.SessionKeyID)
	}
	if m.FPort != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessages(dAtA, i, uint64(m.FPort))
	}
	if m.FCnt != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessages(dAtA, i, uint64(m.FCnt))
	}
	if len(m.FRMPayload) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessages(dAtA, i, uint64(len(m.FRMPayload)))
		i += copy(dAtA[i:], m.FRMPayload)
	}
	if len(m.RxMetadata) > 0 {
		for _, msg := range m.RxMetadata {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintMessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ApplicationJoinAccept) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationJoinAccept) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SessionKeyID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessages(dAtA, i, uint64(len(m.SessionKeyID)))
		i += copy(dAtA[i:], m.SessionKeyID)
	}
	if m.AppSKey != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessages(dAtA, i, uint64(m.AppSKey.Size()))
		n9, err := m.AppSKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *ApplicationDownlink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationDownlink) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FPort != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessages(dAtA, i, uint64(m.FPort))
	}
	if m.FCnt != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessages(dAtA, i, uint64(m.FCnt))
	}
	if len(m.FRMPayload) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessages(dAtA, i, uint64(len(m.FRMPayload)))
		i += copy(dAtA[i:], m.FRMPayload)
	}
	if m.Confirmed {
		dAtA[i] = 0x20
		i++
		if m.Confirmed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.CorrelationIDs) > 0 {
		for _, s := range m.CorrelationIDs {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeVarintMessages(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedApplicationUplink(r randyMessages, easy bool) *ApplicationUplink {
	this := &ApplicationUplink{}
	this.SessionKeyID = randStringMessages(r)
	this.FPort = r.Uint32()
	this.FCnt = r.Uint32()
	v1 := r.Intn(100)
	this.FRMPayload = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.FRMPayload[i] = byte(r.Intn(256))
	}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.RxMetadata = make([]*RxMetadata, v2)
		for i := 0; i < v2; i++ {
			this.RxMetadata[i] = NewPopulatedRxMetadata(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedApplicationJoinAccept(r randyMessages, easy bool) *ApplicationJoinAccept {
	this := &ApplicationJoinAccept{}
	this.SessionKeyID = randStringMessages(r)
	if r.Intn(10) != 0 {
		this.AppSKey = NewPopulatedKeyEnvelope(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyMessages interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneMessages(r randyMessages) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringMessages(r randyMessages) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneMessages(r)
	}
	return string(tmps)
}
func randUnrecognizedMessages(r randyMessages, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldMessages(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldMessages(dAtA []byte, r randyMessages, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateMessages(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulateMessages(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulateMessages(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateMessages(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateMessages(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateMessages(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateMessages(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *UplinkMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.RawPayload)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = m.Payload.Size()
	n += 1 + l + sovMessages(uint64(l))
	l = m.EndDeviceIdentifiers.Size()
	n += 1 + l + sovMessages(uint64(l))
	l = m.Settings.Size()
	n += 1 + l + sovMessages(uint64(l))
	if len(m.RxMetadata) > 0 {
		for _, e := range m.RxMetadata {
			l = e.Size()
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	if len(m.Locations) > 0 {
		for k, v := range m.Locations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMessages(uint64(len(k))) + 1 + sovMessages(uint64(v))
			n += mapEntrySize + 1 + sovMessages(uint64(mapEntrySize))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ReceivedAt)
	n += 1 + l + sovMessages(uint64(l))
	if len(m.CorrelationIDs) > 0 {
		for _, s := range m.CorrelationIDs {
			l = len(s)
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	return n
}

func (m *DownlinkMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.RawPayload)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = m.Payload.Size()
	n += 1 + l + sovMessages(uint64(l))
	l = m.EndDeviceIdentifiers.Size()
	n += 1 + l + sovMessages(uint64(l))
	l = m.Settings.Size()
	n += 1 + l + sovMessages(uint64(l))
	l = m.TxMetadata.Size()
	n += 1 + l + sovMessages(uint64(l))
	if len(m.CorrelationIDs) > 0 {
		for _, s := range m.CorrelationIDs {
			l = len(s)
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	return n
}

func (m *ApplicationUplink) Size() (n int) {
	var l int
	_ = l
	l = len(m.SessionKeyID)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.FPort != 0 {
		n += 1 + sovMessages(uint64(m.FPort))
	}
	if m.FCnt != 0 {
		n += 1 + sovMessages(uint64(m.FCnt))
	}
	l = len(m.FRMPayload)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if len(m.RxMetadata) > 0 {
		for _, e := range m.RxMetadata {
			l = e.Size()
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	return n
}

func (m *ApplicationJoinAccept) Size() (n int) {
	var l int
	_ = l
	l = len(m.SessionKeyID)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.AppSKey != nil {
		l = m.AppSKey.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *ApplicationDownlink) Size() (n int) {
	var l int
	_ = l
	if m.FPort != 0 {
		n += 1 + sovMessages(uint64(m.FPort))
	}
	if m.FCnt != 0 {
		n += 1 + sovMessages(uint64(m.FCnt))
	}
	l = len(m.FRMPayload)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.Confirmed {
		n += 2
	}
	if len(m.CorrelationIDs) > 0 {
		for _, s := range m.CorrelationIDs {
			l = len(s)
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	return n
}

func sovMessages(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMessages(x uint64) (n int) {
	return sovMessages((x << 1) ^ uint64((int64(x) >> 63)))
}
func (this *UplinkMessage) String() string {
	if this == nil {
		return "nil"
	}
	keysForLocations := make([]string, 0, len(this.Locations))
	for k := range this.Locations {
		keysForLocations = append(keysForLocations, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLocations)
	mapStringForLocations := "map[string]LocationSource{"
	for _, k := range keysForLocations {
		mapStringForLocations += fmt.Sprintf("%v: %v,", k, this.Locations[k])
	}
	mapStringForLocations += "}"
	s := strings.Join([]string{`&UplinkMessage{`,
		`RawPayload:` + fmt.Sprintf("%v", this.RawPayload) + `,`,
		`Payload:` + strings.Replace(strings.Replace(this.Payload.String(), "Message", "Message", 1), `&`, ``, 1) + `,`,
		`EndDeviceIdentifiers:` + strings.Replace(strings.Replace(this.EndDeviceIdentifiers.String(), "EndDeviceIdentifiers", "EndDeviceIdentifiers", 1), `&`, ``, 1) + `,`,
		`Settings:` + strings.Replace(strings.Replace(this.Settings.String(), "TxSettings", "TxSettings", 1), `&`, ``, 1) + `,`,
		`RxMetadata:` + strings.Replace(fmt.Sprintf("%v", this.RxMetadata), "RxMetadata", "RxMetadata", 1) + `,`,
		`Locations:` + mapStringForLocations + `,`,
		`ReceivedAt:` + strings.Replace(strings.Replace(this.ReceivedAt.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`CorrelationIDs:` + fmt.Sprintf("%v", this.CorrelationIDs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownlinkMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownlinkMessage{`,
		`RawPayload:` + fmt.Sprintf("%v", this.RawPayload) + `,`,
		`Payload:` + strings.Replace(strings.Replace(this.Payload.String(), "Message", "Message", 1), `&`, ``, 1) + `,`,
		`EndDeviceIdentifiers:` + strings.Replace(strings.Replace(this.EndDeviceIdentifiers.String(), "EndDeviceIdentifiers", "EndDeviceIdentifiers", 1), `&`, ``, 1) + `,`,
		`Settings:` + strings.Replace(strings.Replace(this.Settings.String(), "TxSettings", "TxSettings", 1), `&`, ``, 1) + `,`,
		`TxMetadata:` + strings.Replace(strings.Replace(this.TxMetadata.String(), "TxMetadata", "TxMetadata", 1), `&`, ``, 1) + `,`,
		`CorrelationIDs:` + fmt.Sprintf("%v", this.CorrelationIDs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationUplink) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationUplink{`,
		`SessionKeyID:` + fmt.Sprintf("%v", this.SessionKeyID) + `,`,
		`FPort:` + fmt.Sprintf("%v", this.FPort) + `,`,
		`FCnt:` + fmt.Sprintf("%v", this.FCnt) + `,`,
		`FRMPayload:` + fmt.Sprintf("%v", this.FRMPayload) + `,`,
		`RxMetadata:` + strings.Replace(fmt.Sprintf("%v", this.RxMetadata), "RxMetadata", "RxMetadata", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationJoinAccept) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationJoinAccept{`,
		`SessionKeyID:` + fmt.Sprintf("%v", this.SessionKeyID) + `,`,
		`AppSKey:` + strings.Replace(fmt.Sprintf("%v", this.AppSKey), "KeyEnvelope", "KeyEnvelope", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationDownlink) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationDownlink{`,
		`FPort:` + fmt.Sprintf("%v", this.FPort) + `,`,
		`FCnt:` + fmt.Sprintf("%v", this.FCnt) + `,`,
		`FRMPayload:` + fmt.Sprintf("%v", this.FRMPayload) + `,`,
		`Confirmed:` + fmt.Sprintf("%v", this.Confirmed) + `,`,
		`CorrelationIDs:` + fmt.Sprintf("%v", this.CorrelationIDs) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessages(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *UplinkMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UplinkMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UplinkMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawPayload = append(m.RawPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.RawPayload == nil {
				m.RawPayload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Payload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDeviceIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EndDeviceIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RxMetadata = append(m.RxMetadata, &RxMetadata{})
			if err := m.RxMetadata[len(m.RxMetadata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Locations == nil {
				m.Locations = make(map[string]LocationSource)
			}
			var mapkey string
			var mapvalue LocationSource
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMessages
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (LocationSource(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessages(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMessages
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Locations[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ReceivedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrelationIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CorrelationIDs = append(m.CorrelationIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownlinkMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownlinkMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownlinkMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawPayload = append(m.RawPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.RawPayload == nil {
				m.RawPayload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Payload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDeviceIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EndDeviceIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TxMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrelationIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CorrelationIDs = append(m.CorrelationIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationUplink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationUplink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationUplink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionKeyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionKeyID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FPort", wireType)
			}
			m.FPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCnt", wireType)
			}
			m.FCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FRMPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FRMPayload = append(m.FRMPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.FRMPayload == nil {
				m.FRMPayload = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RxMetadata = append(m.RxMetadata, &RxMetadata{})
			if err := m.RxMetadata[len(m.RxMetadata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationJoinAccept) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationJoinAccept: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationJoinAccept: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionKeyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionKeyID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppSKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppSKey == nil {
				m.AppSKey = &KeyEnvelope{}
			}
			if err := m.AppSKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationDownlink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationDownlink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationDownlink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FPort", wireType)
			}
			m.FPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCnt", wireType)
			}
			m.FCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FRMPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FRMPayload = append(m.FRMPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.FRMPayload == nil {
				m.FRMPayload = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirmed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Confirmed = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrelationIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CorrelationIDs = append(m.CorrelationIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessages(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMessages
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMessages
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMessages(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMessages = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessages   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("go.thethings.network/lorawan-stack/api/messages.proto", fileDescriptor_messages_fcfc45cc96fcf0db)
}
func init() {
	golang_proto.RegisterFile("go.thethings.network/lorawan-stack/api/messages.proto", fileDescriptor_messages_fcfc45cc96fcf0db)
}

var fileDescriptor_messages_fcfc45cc96fcf0db = []byte{
	// 866 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x55, 0x3d, 0x6c, 0xdb, 0x46,
	0x18, 0xbd, 0xb3, 0x24, 0xdb, 0x3a, 0xd9, 0x4a, 0xca, 0x20, 0xa8, 0xe0, 0x16, 0x47, 0xc3, 0xe8,
	0xe0, 0x21, 0xa1, 0xd0, 0x24, 0x6d, 0x82, 0xa4, 0x8b, 0x15, 0xbb, 0x80, 0xe3, 0x1a, 0x08, 0xce,
	0xe9, 0x52, 0x14, 0x20, 0xce, 0xe4, 0x91, 0x26, 0x44, 0xdd, 0x11, 0xc7, 0xb3, 0x64, 0x6d, 0x19,
	0x3d, 0x66, 0xec, 0x18, 0x74, 0xca, 0x98, 0xd1, 0x63, 0x46, 0x8f, 0x06, 0xba, 0x64, 0x52, 0xa3,
	0x23, 0x8a, 0x66, 0xcc, 0x98, 0xa9, 0x28, 0xc4, 0x1f, 0xcb, 0x16, 0x64, 0x54, 0x6d, 0xc7, 0x6c,
	0xf7, 0xf3, 0xde, 0xc3, 0x7d, 0xef, 0x3d, 0x89, 0xe8, 0x1b, 0x5f, 0x58, 0xea, 0x80, 0xa9, 0x83,
	0x80, 0xfb, 0xb1, 0xc5, 0x99, 0xea, 0x09, 0xd9, 0x6e, 0x86, 0x42, 0xd2, 0x1e, 0xe5, 0xb7, 0x63,
	0x45, 0x9d, 0x76, 0x93, 0x46, 0x41, 0xb3, 0xc3, 0xe2, 0x98, 0xfa, 0x2c, 0xb6, 0x22, 0x29, 0x94,
	0x30, 0xea, 0x4a, 0x71, 0x2b, 0x47, 0x59, 0xdd, 0xbb, 0x2b, 0x0f, 0x66, 0x94, 0x09, 0x5c, 0xc6,
	0x55, 0xe0, 0x05, 0x4c, 0xe6, 0x4a, 0x2b, 0x5f, 0xcf, 0xc8, 0x6c, 0xb3, 0x7e, 0x41, 0xb9, 0x37,
	0x23, 0xa5, 0x78, 0x5f, 0xc6, 0x9a, 0x7d, 0x52, 0x45, 0x5d, 0xaa, 0x68, 0x4e, 0xbb, 0xed, 0x07,
	0xea, 0xe0, 0x70, 0xdf, 0x72, 0x44, 0xa7, 0xe9, 0x0b, 0x5f, 0x34, 0xd3, 0xe3, 0xfd, 0x43, 0x2f,
	0xdd, 0xa5, 0x9b, 0x74, 0x95, 0xc3, 0x4d, 0x5f, 0x08, 0x3f, 0x64, 0x63, 0x94, 0x0a, 0x3a, 0x2c,
	0x56, 0xb4, 0x13, 0x65, 0x80, 0xb5, 0x3f, 0xcb, 0x68, 0xf9, 0xc7, 0x28, 0x0c, 0x78, 0x7b, 0x37,
	0xb3, 0xd4, 0x30, 0x51, 0x4d, 0xd2, 0x9e, 0x1d, 0xd1, 0x7e, 0x28, 0xa8, 0xdb, 0x80, 0xab, 0x70,
	0x7d, 0x89, 0x20, 0x49, 0x7b, 0x4f, 0xb3, 0x13, 0xe3, 0x3e, 0x5a, 0x28, 0x2e, 0xe7, 0x56, 0xe1,
	0x7a, 0xed, 0xce, 0xe7, 0xd6, 0x65, 0xfb, 0xad, 0x5c, 0xaa, 0x55, 0x3e, 0x1d, 0x98, 0x80, 0x14,
	0x68, 0x63, 0x17, 0x21, 0xc6, 0x5d, 0xdb, 0x65, 0xdd, 0xc0, 0x61, 0x8d, 0x52, 0xca, 0xfd, 0x6a,
	0x92, 0xbb, 0xc5, 0xdd, 0xcd, 0x14, 0xb0, 0x3d, 0xce, 0xa6, 0xb5, 0x38, 0x12, 0x3a, 0x1b, 0x98,
	0x90, 0x54, 0x59, 0x71, 0x6f, 0x7c, 0x87, 0x16, 0x63, 0xa6, 0xd4, 0xc8, 0xbf, 0x46, 0x39, 0x15,
	0x5b, 0x99, 0x14, 0x7b, 0x76, 0xb4, 0x97, 0x23, 0xf2, 0xb7, 0x9c, 0x33, 0x8c, 0x47, 0xa8, 0x26,
	0x8f, 0xec, 0xc2, 0xdd, 0x46, 0x65, 0xb5, 0x34, 0x4d, 0x80, 0x1c, 0xed, 0xe6, 0x08, 0x82, 0xe4,
	0xf9, 0xda, 0x78, 0x82, 0xaa, 0xa1, 0x70, 0xa8, 0x0a, 0x04, 0x8f, 0x1b, 0xf3, 0x29, 0xf5, 0xd6,
	0x24, 0xf5, 0x92, 0xab, 0xd6, 0x0f, 0x05, 0x7c, 0x8b, 0x2b, 0xd9, 0x27, 0x63, 0xba, 0xb1, 0x85,
	0x6a, 0x92, 0x39, 0x2c, 0xe8, 0x32, 0xd7, 0xa6, 0xaa, 0xb1, 0x90, 0x4f, 0x92, 0x05, 0x67, 0x15,
	0xc1, 0x59, 0xcf, 0x8a, 0xe0, 0x32, 0x33, 0x5e, 0xfc, 0x6e, 0x42, 0x82, 0x0a, 0xe2, 0x86, 0x32,
	0x1e, 0xa1, 0x6b, 0x8e, 0x90, 0x92, 0x85, 0xa9, 0xac, 0x1d, 0xb8, 0x71, 0x63, 0x71, 0xb5, 0xb4,
	0x5e, 0x6d, 0x19, 0x7a, 0x60, 0xd6, 0x1f, 0x8f, 0xaf, 0xb6, 0x37, 0x63, 0x52, 0xbf, 0x00, 0xdd,
	0x76, 0xe3, 0x95, 0x9f, 0x51, 0xfd, 0xf2, 0x03, 0x8d, 0xeb, 0xa8, 0xd4, 0x66, 0xfd, 0x34, 0xfd,
	0x2a, 0x19, 0x2d, 0x8d, 0x7b, 0xa8, 0xd2, 0xa5, 0xe1, 0x21, 0x4b, 0x43, 0xaf, 0xdf, 0xc1, 0x93,
	0xf3, 0x16, 0x02, 0x7b, 0xe2, 0x50, 0x3a, 0x8c, 0x64, 0xe0, 0x87, 0x73, 0x0f, 0xe0, 0xc3, 0xf2,
	0xc9, 0x4b, 0x13, 0xac, 0xfd, 0x35, 0x87, 0xae, 0x6d, 0x8a, 0x1e, 0xff, 0x04, 0xbb, 0xb6, 0x81,
	0x6a, 0xea, 0x52, 0xd7, 0xae, 0x10, 0x28, 0xfa, 0x95, 0x0b, 0x20, 0x35, 0x6e, 0xdc, 0x94, 0x78,
	0xe7, 0x67, 0x8d, 0x37, 0x0f, 0xe0, 0x0f, 0x88, 0x3e, 0xdb, 0x88, 0xa2, 0x30, 0xc8, 0x72, 0xca,
	0xfa, 0x69, 0x7c, 0x8b, 0xea, 0x31, 0x8b, 0xe3, 0x91, 0x68, 0x9b, 0xf5, 0xed, 0x20, 0x4b, 0xa1,
	0xda, 0xba, 0xae, 0x07, 0xe6, 0xd2, 0x5e, 0x76, 0xb3, 0xc3, 0xfa, 0xdb, 0x9b, 0x64, 0x29, 0x1e,
	0xef, 0x5c, 0xe3, 0x26, 0x9a, 0xf7, 0xec, 0x48, 0x48, 0x95, 0x06, 0xb3, 0x4c, 0x2a, 0xde, 0x53,
	0x21, 0x95, 0x71, 0x03, 0x55, 0x3c, 0xdb, 0xe1, 0x2a, 0xb5, 0x7c, 0x99, 0x94, 0xbd, 0xc7, 0x5c,
	0x19, 0x4d, 0x54, 0xf3, 0x64, 0xe7, 0x3c, 0xe6, 0x91, 0x81, 0x4b, 0xad, 0xba, 0x1e, 0x98, 0xe8,
	0x7b, 0xb2, 0x9b, 0x47, 0x4d, 0x90, 0x27, 0x3b, 0x45, 0xec, 0xff, 0xe7, 0xc7, 0xb9, 0x76, 0x0c,
	0xd1, 0xcd, 0x0b, 0x73, 0x3e, 0x11, 0x01, 0xdf, 0x70, 0x1c, 0x16, 0xa9, 0xff, 0x3c, 0xeb, 0x7d,
	0x54, 0xa5, 0x51, 0x64, 0xc7, 0x23, 0x56, 0xde, 0xc3, 0x2f, 0x26, 0x1f, 0xb3, 0xc3, 0xfa, 0x5b,
	0xbc, 0xcb, 0x42, 0x11, 0x31, 0xb2, 0x40, 0xa3, 0x68, 0x6f, 0x87, 0xf5, 0xd7, 0x7e, 0x83, 0xe8,
	0xc6, 0x85, 0xa7, 0x14, 0xf5, 0xbf, 0x60, 0x1e, 0x9c, 0x6a, 0xde, 0xdc, 0xd5, 0xe6, 0x95, 0xfe,
	0xd1, 0xbc, 0x2f, 0x51, 0xd5, 0x11, 0xdc, 0x0b, 0x64, 0x87, 0x65, 0x5e, 0x2f, 0x92, 0xf1, 0xc1,
	0xb4, 0x22, 0x55, 0xfe, 0x5d, 0x91, 0x5a, 0xbf, 0xc2, 0xd3, 0x21, 0x86, 0x67, 0x43, 0x0c, 0xdf,
	0x0e, 0x31, 0x78, 0x37, 0xc4, 0xe0, 0xfd, 0x10, 0x83, 0x0f, 0x43, 0x0c, 0x3e, 0x0e, 0x31, 0x7c,
	0xae, 0x31, 0x3c, 0xd6, 0x18, 0xbc, 0xd2, 0x18, 0xbe, 0xd6, 0x18, 0x9c, 0x68, 0x0c, 0xde, 0x68,
	0x0c, 0x4e, 0x35, 0x86, 0x67, 0x1a, 0xc3, 0xb7, 0x1a, 0x83, 0x77, 0x1a, 0xc3, 0xf7, 0x1a, 0x83,
	0x0f, 0x1a, 0xc3, 0x8f, 0x1a, 0x83, 0xe7, 0x09, 0x06, 0xc7, 0x09, 0x86, 0x2f, 0x12, 0x0c, 0x7e,
	0x49, 0x30, 0x7c, 0x99, 0x60, 0xf0, 0x2a, 0xc1, 0xe0, 0x75, 0x82, 0xe1, 0x49, 0x82, 0xe1, 0x9b,
	0x04, 0xc3, 0x9f, 0x6e, 0xcd, 0xf0, 0xc5, 0x8c, 0xda, 0x7e, 0x53, 0x29, 0x1e, 0xed, 0xef, 0xcf,
	0xa7, 0xff, 0x9c, 0x77, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x2a, 0x94, 0x3a, 0x52, 0x08,
	0x00, 0x00,
}
