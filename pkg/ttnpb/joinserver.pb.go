// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/joinserver.proto

package ttnpb // import "go.thethings.network/lorawan-stack/pkg/ttnpb"

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import types "github.com/gogo/protobuf/types"
import _ "github.com/mwitkow/go-proto-validators"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import go_thethings_network_lorawan_stack_pkg_types "go.thethings.network/lorawan-stack/pkg/types"

import bytes "bytes"

import (
	context "context"

	grpc "google.golang.org/grpc"
)

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SessionKeyRequest struct {
	// Join Server issued identifier for the session keys.
	SessionKeyID []byte `protobuf:"bytes,1,opt,name=session_key_id,json=sessionKeyId,proto3" json:"session_key_id,omitempty"`
	// LoRaWAN DevEUI.
	DevEUI               go_thethings_network_lorawan_stack_pkg_types.EUI64 `protobuf:"bytes,2,opt,name=dev_eui,json=devEui,proto3,customtype=go.thethings.network/lorawan-stack/pkg/types.EUI64" json:"dev_eui"`
	XXX_NoUnkeyedLiteral struct{}                                           `json:"-"`
	XXX_sizecache        int32                                              `json:"-"`
}

func (m *SessionKeyRequest) Reset()      { *m = SessionKeyRequest{} }
func (*SessionKeyRequest) ProtoMessage() {}
func (*SessionKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_joinserver_10feeed0db84c081, []int{0}
}
func (m *SessionKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SessionKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionKeyRequest.Merge(dst, src)
}
func (m *SessionKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *SessionKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SessionKeyRequest proto.InternalMessageInfo

func (m *SessionKeyRequest) GetSessionKeyID() []byte {
	if m != nil {
		return m.SessionKeyID
	}
	return nil
}

type NwkSKeysResponse struct {
	// The (encrypted) Forwarding Network Session Integrity Key (or Network Session Key in 1.0 compatibility mode).
	FNwkSIntKey KeyEnvelope `protobuf:"bytes,1,opt,name=f_nwk_s_int_key,json=fNwkSIntKey,proto3" json:"f_nwk_s_int_key"`
	// The (encrypted) Serving Network Session Integrity Key.
	SNwkSIntKey KeyEnvelope `protobuf:"bytes,2,opt,name=s_nwk_s_int_key,json=sNwkSIntKey,proto3" json:"s_nwk_s_int_key"`
	// The (encrypted) Network Session Encryption Key.
	NwkSEncKey           KeyEnvelope `protobuf:"bytes,3,opt,name=nwk_s_enc_key,json=nwkSEncKey,proto3" json:"nwk_s_enc_key"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *NwkSKeysResponse) Reset()      { *m = NwkSKeysResponse{} }
func (*NwkSKeysResponse) ProtoMessage() {}
func (*NwkSKeysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_joinserver_10feeed0db84c081, []int{1}
}
func (m *NwkSKeysResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NwkSKeysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NwkSKeysResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *NwkSKeysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NwkSKeysResponse.Merge(dst, src)
}
func (m *NwkSKeysResponse) XXX_Size() int {
	return m.Size()
}
func (m *NwkSKeysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NwkSKeysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NwkSKeysResponse proto.InternalMessageInfo

func (m *NwkSKeysResponse) GetFNwkSIntKey() KeyEnvelope {
	if m != nil {
		return m.FNwkSIntKey
	}
	return KeyEnvelope{}
}

func (m *NwkSKeysResponse) GetSNwkSIntKey() KeyEnvelope {
	if m != nil {
		return m.SNwkSIntKey
	}
	return KeyEnvelope{}
}

func (m *NwkSKeysResponse) GetNwkSEncKey() KeyEnvelope {
	if m != nil {
		return m.NwkSEncKey
	}
	return KeyEnvelope{}
}

type AppSKeyResponse struct {
	// The (encrypted) Application Session Key.
	AppSKey              KeyEnvelope `protobuf:"bytes,1,opt,name=app_s_key,json=appSKey,proto3" json:"app_s_key"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *AppSKeyResponse) Reset()      { *m = AppSKeyResponse{} }
func (*AppSKeyResponse) ProtoMessage() {}
func (*AppSKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_joinserver_10feeed0db84c081, []int{2}
}
func (m *AppSKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppSKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppSKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppSKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppSKeyResponse.Merge(dst, src)
}
func (m *AppSKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *AppSKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AppSKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AppSKeyResponse proto.InternalMessageInfo

func (m *AppSKeyResponse) GetAppSKey() KeyEnvelope {
	if m != nil {
		return m.AppSKey
	}
	return KeyEnvelope{}
}

type CryptoServicePayloadRequest struct {
	EndDeviceIdentifiers `protobuf:"bytes,1,opt,name=ids,proto3,embedded=ids" json:"ids"`
	LoRaWANVersion       MACVersion    `protobuf:"varint,2,opt,name=lorawan_version,json=lorawanVersion,proto3,enum=ttn.lorawan.v3.MACVersion" json:"lorawan_version,omitempty"`
	Payload              []byte        `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	Provisioner          string        `protobuf:"bytes,4,opt,name=provisioner,proto3" json:"provisioner,omitempty"`
	ProvisioningData     *types.Struct `protobuf:"bytes,5,opt,name=provisioning_data,json=provisioningData,proto3" json:"provisioning_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *CryptoServicePayloadRequest) Reset()      { *m = CryptoServicePayloadRequest{} }
func (*CryptoServicePayloadRequest) ProtoMessage() {}
func (*CryptoServicePayloadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_joinserver_10feeed0db84c081, []int{3}
}
func (m *CryptoServicePayloadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CryptoServicePayloadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CryptoServicePayloadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CryptoServicePayloadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CryptoServicePayloadRequest.Merge(dst, src)
}
func (m *CryptoServicePayloadRequest) XXX_Size() int {
	return m.Size()
}
func (m *CryptoServicePayloadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CryptoServicePayloadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CryptoServicePayloadRequest proto.InternalMessageInfo

func (m *CryptoServicePayloadRequest) GetLoRaWANVersion() MACVersion {
	if m != nil {
		return m.LoRaWANVersion
	}
	return MAC_UNKNOWN
}

func (m *CryptoServicePayloadRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *CryptoServicePayloadRequest) GetProvisioner() string {
	if m != nil {
		return m.Provisioner
	}
	return ""
}

func (m *CryptoServicePayloadRequest) GetProvisioningData() *types.Struct {
	if m != nil {
		return m.ProvisioningData
	}
	return nil
}

type CryptoServicePayloadResponse struct {
	Payload              []byte   `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CryptoServicePayloadResponse) Reset()      { *m = CryptoServicePayloadResponse{} }
func (*CryptoServicePayloadResponse) ProtoMessage() {}
func (*CryptoServicePayloadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_joinserver_10feeed0db84c081, []int{4}
}
func (m *CryptoServicePayloadResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CryptoServicePayloadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CryptoServicePayloadResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CryptoServicePayloadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CryptoServicePayloadResponse.Merge(dst, src)
}
func (m *CryptoServicePayloadResponse) XXX_Size() int {
	return m.Size()
}
func (m *CryptoServicePayloadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CryptoServicePayloadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CryptoServicePayloadResponse proto.InternalMessageInfo

func (m *CryptoServicePayloadResponse) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type JoinAcceptMICRequest struct {
	CryptoServicePayloadRequest `protobuf:"bytes,1,opt,name=payload_request,json=payloadRequest,proto3,embedded=payload_request" json:"payload_request"`
	JoinRequestType             uint32                                                `protobuf:"varint,2,opt,name=join_request_type,json=joinRequestType,proto3" json:"join_request_type,omitempty"`
	DevNonce                    go_thethings_network_lorawan_stack_pkg_types.DevNonce `protobuf:"bytes,3,opt,name=dev_nonce,json=devNonce,proto3,customtype=go.thethings.network/lorawan-stack/pkg/types.DevNonce" json:"dev_nonce"`
	XXX_NoUnkeyedLiteral        struct{}                                              `json:"-"`
	XXX_sizecache               int32                                                 `json:"-"`
}

func (m *JoinAcceptMICRequest) Reset()      { *m = JoinAcceptMICRequest{} }
func (*JoinAcceptMICRequest) ProtoMessage() {}
func (*JoinAcceptMICRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_joinserver_10feeed0db84c081, []int{5}
}
func (m *JoinAcceptMICRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JoinAcceptMICRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JoinAcceptMICRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *JoinAcceptMICRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinAcceptMICRequest.Merge(dst, src)
}
func (m *JoinAcceptMICRequest) XXX_Size() int {
	return m.Size()
}
func (m *JoinAcceptMICRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinAcceptMICRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JoinAcceptMICRequest proto.InternalMessageInfo

func (m *JoinAcceptMICRequest) GetJoinRequestType() uint32 {
	if m != nil {
		return m.JoinRequestType
	}
	return 0
}

type DeriveSessionKeysRequest struct {
	EndDeviceIdentifiers `protobuf:"bytes,1,opt,name=ids,proto3,embedded=ids" json:"ids"`
	LoRaWANVersion       MACVersion                                             `protobuf:"varint,2,opt,name=lorawan_version,json=lorawanVersion,proto3,enum=ttn.lorawan.v3.MACVersion" json:"lorawan_version,omitempty"`
	JoinNonce            go_thethings_network_lorawan_stack_pkg_types.JoinNonce `protobuf:"bytes,3,opt,name=join_nonce,json=joinNonce,proto3,customtype=go.thethings.network/lorawan-stack/pkg/types.JoinNonce" json:"join_nonce"`
	DevNonce             go_thethings_network_lorawan_stack_pkg_types.DevNonce  `protobuf:"bytes,4,opt,name=dev_nonce,json=devNonce,proto3,customtype=go.thethings.network/lorawan-stack/pkg/types.DevNonce" json:"dev_nonce"`
	NetID                go_thethings_network_lorawan_stack_pkg_types.NetID     `protobuf:"bytes,5,opt,name=net_id,json=netId,proto3,customtype=go.thethings.network/lorawan-stack/pkg/types.NetID" json:"net_id"`
	Provisioner          string                                                 `protobuf:"bytes,6,opt,name=provisioner,proto3" json:"provisioner,omitempty"`
	ProvisioningData     *types.Struct                                          `protobuf:"bytes,7,opt,name=provisioning_data,json=provisioningData,proto3" json:"provisioning_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                               `json:"-"`
	XXX_sizecache        int32                                                  `json:"-"`
}

func (m *DeriveSessionKeysRequest) Reset()      { *m = DeriveSessionKeysRequest{} }
func (*DeriveSessionKeysRequest) ProtoMessage() {}
func (*DeriveSessionKeysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_joinserver_10feeed0db84c081, []int{6}
}
func (m *DeriveSessionKeysRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeriveSessionKeysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeriveSessionKeysRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeriveSessionKeysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeriveSessionKeysRequest.Merge(dst, src)
}
func (m *DeriveSessionKeysRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeriveSessionKeysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeriveSessionKeysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeriveSessionKeysRequest proto.InternalMessageInfo

func (m *DeriveSessionKeysRequest) GetLoRaWANVersion() MACVersion {
	if m != nil {
		return m.LoRaWANVersion
	}
	return MAC_UNKNOWN
}

func (m *DeriveSessionKeysRequest) GetProvisioner() string {
	if m != nil {
		return m.Provisioner
	}
	return ""
}

func (m *DeriveSessionKeysRequest) GetProvisioningData() *types.Struct {
	if m != nil {
		return m.ProvisioningData
	}
	return nil
}

type ProvisionEndDevicesRequest struct {
	ApplicationIdentifiers `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3,embedded=application_id" json:"application_id"`
	// Provisioner service as configured in the Join Server.
	Provisioner string `protobuf:"bytes,2,opt,name=provisioner,proto3" json:"provisioner,omitempty"`
	// Vendor-specific provisioning data.
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// List of device identifiers that will be provisioned.
	// The devices must refer to application_id.
	// The number of entries in data must match the number of given identifiers.
	EndDeviceIDs         []EndDeviceIdentifiers `protobuf:"bytes,4,rep,name=end_device_ids,json=endDeviceIds,proto3" json:"end_device_ids"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ProvisionEndDevicesRequest) Reset()      { *m = ProvisionEndDevicesRequest{} }
func (*ProvisionEndDevicesRequest) ProtoMessage() {}
func (*ProvisionEndDevicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_joinserver_10feeed0db84c081, []int{7}
}
func (m *ProvisionEndDevicesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProvisionEndDevicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProvisionEndDevicesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ProvisionEndDevicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProvisionEndDevicesRequest.Merge(dst, src)
}
func (m *ProvisionEndDevicesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ProvisionEndDevicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProvisionEndDevicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProvisionEndDevicesRequest proto.InternalMessageInfo

func (m *ProvisionEndDevicesRequest) GetProvisioner() string {
	if m != nil {
		return m.Provisioner
	}
	return ""
}

func (m *ProvisionEndDevicesRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ProvisionEndDevicesRequest) GetEndDeviceIDs() []EndDeviceIdentifiers {
	if m != nil {
		return m.EndDeviceIDs
	}
	return nil
}

func init() {
	proto.RegisterType((*SessionKeyRequest)(nil), "ttn.lorawan.v3.SessionKeyRequest")
	golang_proto.RegisterType((*SessionKeyRequest)(nil), "ttn.lorawan.v3.SessionKeyRequest")
	proto.RegisterType((*NwkSKeysResponse)(nil), "ttn.lorawan.v3.NwkSKeysResponse")
	golang_proto.RegisterType((*NwkSKeysResponse)(nil), "ttn.lorawan.v3.NwkSKeysResponse")
	proto.RegisterType((*AppSKeyResponse)(nil), "ttn.lorawan.v3.AppSKeyResponse")
	golang_proto.RegisterType((*AppSKeyResponse)(nil), "ttn.lorawan.v3.AppSKeyResponse")
	proto.RegisterType((*CryptoServicePayloadRequest)(nil), "ttn.lorawan.v3.CryptoServicePayloadRequest")
	golang_proto.RegisterType((*CryptoServicePayloadRequest)(nil), "ttn.lorawan.v3.CryptoServicePayloadRequest")
	proto.RegisterType((*CryptoServicePayloadResponse)(nil), "ttn.lorawan.v3.CryptoServicePayloadResponse")
	golang_proto.RegisterType((*CryptoServicePayloadResponse)(nil), "ttn.lorawan.v3.CryptoServicePayloadResponse")
	proto.RegisterType((*JoinAcceptMICRequest)(nil), "ttn.lorawan.v3.JoinAcceptMICRequest")
	golang_proto.RegisterType((*JoinAcceptMICRequest)(nil), "ttn.lorawan.v3.JoinAcceptMICRequest")
	proto.RegisterType((*DeriveSessionKeysRequest)(nil), "ttn.lorawan.v3.DeriveSessionKeysRequest")
	golang_proto.RegisterType((*DeriveSessionKeysRequest)(nil), "ttn.lorawan.v3.DeriveSessionKeysRequest")
	proto.RegisterType((*ProvisionEndDevicesRequest)(nil), "ttn.lorawan.v3.ProvisionEndDevicesRequest")
	golang_proto.RegisterType((*ProvisionEndDevicesRequest)(nil), "ttn.lorawan.v3.ProvisionEndDevicesRequest")
}
func (this *SessionKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SessionKeyRequest)
	if !ok {
		that2, ok := that.(SessionKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.SessionKeyID, that1.SessionKeyID) {
		return false
	}
	if !this.DevEUI.Equal(that1.DevEUI) {
		return false
	}
	return true
}
func (this *NwkSKeysResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NwkSKeysResponse)
	if !ok {
		that2, ok := that.(NwkSKeysResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FNwkSIntKey.Equal(&that1.FNwkSIntKey) {
		return false
	}
	if !this.SNwkSIntKey.Equal(&that1.SNwkSIntKey) {
		return false
	}
	if !this.NwkSEncKey.Equal(&that1.NwkSEncKey) {
		return false
	}
	return true
}
func (this *AppSKeyResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AppSKeyResponse)
	if !ok {
		that2, ok := that.(AppSKeyResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AppSKey.Equal(&that1.AppSKey) {
		return false
	}
	return true
}
func (this *CryptoServicePayloadRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CryptoServicePayloadRequest)
	if !ok {
		that2, ok := that.(CryptoServicePayloadRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EndDeviceIdentifiers.Equal(&that1.EndDeviceIdentifiers) {
		return false
	}
	if this.LoRaWANVersion != that1.LoRaWANVersion {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	if this.Provisioner != that1.Provisioner {
		return false
	}
	if !this.ProvisioningData.Equal(that1.ProvisioningData) {
		return false
	}
	return true
}
func (this *CryptoServicePayloadResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CryptoServicePayloadResponse)
	if !ok {
		that2, ok := that.(CryptoServicePayloadResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	return true
}
func (this *JoinAcceptMICRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JoinAcceptMICRequest)
	if !ok {
		that2, ok := that.(JoinAcceptMICRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CryptoServicePayloadRequest.Equal(&that1.CryptoServicePayloadRequest) {
		return false
	}
	if this.JoinRequestType != that1.JoinRequestType {
		return false
	}
	if !this.DevNonce.Equal(that1.DevNonce) {
		return false
	}
	return true
}
func (this *DeriveSessionKeysRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeriveSessionKeysRequest)
	if !ok {
		that2, ok := that.(DeriveSessionKeysRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EndDeviceIdentifiers.Equal(&that1.EndDeviceIdentifiers) {
		return false
	}
	if this.LoRaWANVersion != that1.LoRaWANVersion {
		return false
	}
	if !this.JoinNonce.Equal(that1.JoinNonce) {
		return false
	}
	if !this.DevNonce.Equal(that1.DevNonce) {
		return false
	}
	if !this.NetID.Equal(that1.NetID) {
		return false
	}
	if this.Provisioner != that1.Provisioner {
		return false
	}
	if !this.ProvisioningData.Equal(that1.ProvisioningData) {
		return false
	}
	return true
}
func (this *ProvisionEndDevicesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProvisionEndDevicesRequest)
	if !ok {
		that2, ok := that.(ProvisionEndDevicesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationIdentifiers.Equal(&that1.ApplicationIdentifiers) {
		return false
	}
	if this.Provisioner != that1.Provisioner {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if len(this.EndDeviceIDs) != len(that1.EndDeviceIDs) {
		return false
	}
	for i := range this.EndDeviceIDs {
		if !this.EndDeviceIDs[i].Equal(&that1.EndDeviceIDs[i]) {
			return false
		}
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NsJsClient is the client API for NsJs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NsJsClient interface {
	HandleJoin(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	GetNwkSKeys(ctx context.Context, in *SessionKeyRequest, opts ...grpc.CallOption) (*NwkSKeysResponse, error)
}

type nsJsClient struct {
	cc *grpc.ClientConn
}

func NewNsJsClient(cc *grpc.ClientConn) NsJsClient {
	return &nsJsClient{cc}
}

func (c *nsJsClient) HandleJoin(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.NsJs/HandleJoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nsJsClient) GetNwkSKeys(ctx context.Context, in *SessionKeyRequest, opts ...grpc.CallOption) (*NwkSKeysResponse, error) {
	out := new(NwkSKeysResponse)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.NsJs/GetNwkSKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NsJsServer is the server API for NsJs service.
type NsJsServer interface {
	HandleJoin(context.Context, *JoinRequest) (*JoinResponse, error)
	GetNwkSKeys(context.Context, *SessionKeyRequest) (*NwkSKeysResponse, error)
}

func RegisterNsJsServer(s *grpc.Server, srv NsJsServer) {
	s.RegisterService(&_NsJs_serviceDesc, srv)
}

func _NsJs_HandleJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NsJsServer).HandleJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.NsJs/HandleJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NsJsServer).HandleJoin(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NsJs_GetNwkSKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NsJsServer).GetNwkSKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.NsJs/GetNwkSKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NsJsServer).GetNwkSKeys(ctx, req.(*SessionKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NsJs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.NsJs",
	HandlerType: (*NsJsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleJoin",
			Handler:    _NsJs_HandleJoin_Handler,
		},
		{
			MethodName: "GetNwkSKeys",
			Handler:    _NsJs_GetNwkSKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/joinserver.proto",
}

// AsJsClient is the client API for AsJs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AsJsClient interface {
	GetAppSKey(ctx context.Context, in *SessionKeyRequest, opts ...grpc.CallOption) (*AppSKeyResponse, error)
}

type asJsClient struct {
	cc *grpc.ClientConn
}

func NewAsJsClient(cc *grpc.ClientConn) AsJsClient {
	return &asJsClient{cc}
}

func (c *asJsClient) GetAppSKey(ctx context.Context, in *SessionKeyRequest, opts ...grpc.CallOption) (*AppSKeyResponse, error) {
	out := new(AppSKeyResponse)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.AsJs/GetAppSKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AsJsServer is the server API for AsJs service.
type AsJsServer interface {
	GetAppSKey(context.Context, *SessionKeyRequest) (*AppSKeyResponse, error)
}

func RegisterAsJsServer(s *grpc.Server, srv AsJsServer) {
	s.RegisterService(&_AsJs_serviceDesc, srv)
}

func _AsJs_GetAppSKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsJsServer).GetAppSKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.AsJs/GetAppSKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsJsServer).GetAppSKey(ctx, req.(*SessionKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AsJs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.AsJs",
	HandlerType: (*AsJsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAppSKey",
			Handler:    _AsJs_GetAppSKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/joinserver.proto",
}

// NetworkCryptoServiceClient is the client API for NetworkCryptoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkCryptoServiceClient interface {
	JoinRequestMIC(ctx context.Context, in *CryptoServicePayloadRequest, opts ...grpc.CallOption) (*CryptoServicePayloadResponse, error)
	JoinAcceptMIC(ctx context.Context, in *JoinAcceptMICRequest, opts ...grpc.CallOption) (*CryptoServicePayloadResponse, error)
	EncryptJoinAccept(ctx context.Context, in *CryptoServicePayloadRequest, opts ...grpc.CallOption) (*CryptoServicePayloadResponse, error)
	EncryptRejoinAccept(ctx context.Context, in *CryptoServicePayloadRequest, opts ...grpc.CallOption) (*CryptoServicePayloadResponse, error)
	DeriveNwkSKeys(ctx context.Context, in *DeriveSessionKeysRequest, opts ...grpc.CallOption) (*NwkSKeysResponse, error)
}

type networkCryptoServiceClient struct {
	cc *grpc.ClientConn
}

func NewNetworkCryptoServiceClient(cc *grpc.ClientConn) NetworkCryptoServiceClient {
	return &networkCryptoServiceClient{cc}
}

func (c *networkCryptoServiceClient) JoinRequestMIC(ctx context.Context, in *CryptoServicePayloadRequest, opts ...grpc.CallOption) (*CryptoServicePayloadResponse, error) {
	out := new(CryptoServicePayloadResponse)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.NetworkCryptoService/JoinRequestMIC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkCryptoServiceClient) JoinAcceptMIC(ctx context.Context, in *JoinAcceptMICRequest, opts ...grpc.CallOption) (*CryptoServicePayloadResponse, error) {
	out := new(CryptoServicePayloadResponse)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.NetworkCryptoService/JoinAcceptMIC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkCryptoServiceClient) EncryptJoinAccept(ctx context.Context, in *CryptoServicePayloadRequest, opts ...grpc.CallOption) (*CryptoServicePayloadResponse, error) {
	out := new(CryptoServicePayloadResponse)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.NetworkCryptoService/EncryptJoinAccept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkCryptoServiceClient) EncryptRejoinAccept(ctx context.Context, in *CryptoServicePayloadRequest, opts ...grpc.CallOption) (*CryptoServicePayloadResponse, error) {
	out := new(CryptoServicePayloadResponse)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.NetworkCryptoService/EncryptRejoinAccept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkCryptoServiceClient) DeriveNwkSKeys(ctx context.Context, in *DeriveSessionKeysRequest, opts ...grpc.CallOption) (*NwkSKeysResponse, error) {
	out := new(NwkSKeysResponse)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.NetworkCryptoService/DeriveNwkSKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkCryptoServiceServer is the server API for NetworkCryptoService service.
type NetworkCryptoServiceServer interface {
	JoinRequestMIC(context.Context, *CryptoServicePayloadRequest) (*CryptoServicePayloadResponse, error)
	JoinAcceptMIC(context.Context, *JoinAcceptMICRequest) (*CryptoServicePayloadResponse, error)
	EncryptJoinAccept(context.Context, *CryptoServicePayloadRequest) (*CryptoServicePayloadResponse, error)
	EncryptRejoinAccept(context.Context, *CryptoServicePayloadRequest) (*CryptoServicePayloadResponse, error)
	DeriveNwkSKeys(context.Context, *DeriveSessionKeysRequest) (*NwkSKeysResponse, error)
}

func RegisterNetworkCryptoServiceServer(s *grpc.Server, srv NetworkCryptoServiceServer) {
	s.RegisterService(&_NetworkCryptoService_serviceDesc, srv)
}

func _NetworkCryptoService_JoinRequestMIC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoServicePayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkCryptoServiceServer).JoinRequestMIC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.NetworkCryptoService/JoinRequestMIC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkCryptoServiceServer).JoinRequestMIC(ctx, req.(*CryptoServicePayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkCryptoService_JoinAcceptMIC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinAcceptMICRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkCryptoServiceServer).JoinAcceptMIC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.NetworkCryptoService/JoinAcceptMIC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkCryptoServiceServer).JoinAcceptMIC(ctx, req.(*JoinAcceptMICRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkCryptoService_EncryptJoinAccept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoServicePayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkCryptoServiceServer).EncryptJoinAccept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.NetworkCryptoService/EncryptJoinAccept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkCryptoServiceServer).EncryptJoinAccept(ctx, req.(*CryptoServicePayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkCryptoService_EncryptRejoinAccept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoServicePayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkCryptoServiceServer).EncryptRejoinAccept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.NetworkCryptoService/EncryptRejoinAccept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkCryptoServiceServer).EncryptRejoinAccept(ctx, req.(*CryptoServicePayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkCryptoService_DeriveNwkSKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeriveSessionKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkCryptoServiceServer).DeriveNwkSKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.NetworkCryptoService/DeriveNwkSKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkCryptoServiceServer).DeriveNwkSKeys(ctx, req.(*DeriveSessionKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkCryptoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.NetworkCryptoService",
	HandlerType: (*NetworkCryptoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinRequestMIC",
			Handler:    _NetworkCryptoService_JoinRequestMIC_Handler,
		},
		{
			MethodName: "JoinAcceptMIC",
			Handler:    _NetworkCryptoService_JoinAcceptMIC_Handler,
		},
		{
			MethodName: "EncryptJoinAccept",
			Handler:    _NetworkCryptoService_EncryptJoinAccept_Handler,
		},
		{
			MethodName: "EncryptRejoinAccept",
			Handler:    _NetworkCryptoService_EncryptRejoinAccept_Handler,
		},
		{
			MethodName: "DeriveNwkSKeys",
			Handler:    _NetworkCryptoService_DeriveNwkSKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/joinserver.proto",
}

// ApplicationCryptoServiceClient is the client API for ApplicationCryptoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApplicationCryptoServiceClient interface {
	DeriveAppSKey(ctx context.Context, in *DeriveSessionKeysRequest, opts ...grpc.CallOption) (*AppSKeyResponse, error)
}

type applicationCryptoServiceClient struct {
	cc *grpc.ClientConn
}

func NewApplicationCryptoServiceClient(cc *grpc.ClientConn) ApplicationCryptoServiceClient {
	return &applicationCryptoServiceClient{cc}
}

func (c *applicationCryptoServiceClient) DeriveAppSKey(ctx context.Context, in *DeriveSessionKeysRequest, opts ...grpc.CallOption) (*AppSKeyResponse, error) {
	out := new(AppSKeyResponse)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationCryptoService/DeriveAppSKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationCryptoServiceServer is the server API for ApplicationCryptoService service.
type ApplicationCryptoServiceServer interface {
	DeriveAppSKey(context.Context, *DeriveSessionKeysRequest) (*AppSKeyResponse, error)
}

func RegisterApplicationCryptoServiceServer(s *grpc.Server, srv ApplicationCryptoServiceServer) {
	s.RegisterService(&_ApplicationCryptoService_serviceDesc, srv)
}

func _ApplicationCryptoService_DeriveAppSKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeriveSessionKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationCryptoServiceServer).DeriveAppSKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationCryptoService/DeriveAppSKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationCryptoServiceServer).DeriveAppSKey(ctx, req.(*DeriveSessionKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApplicationCryptoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.ApplicationCryptoService",
	HandlerType: (*ApplicationCryptoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeriveAppSKey",
			Handler:    _ApplicationCryptoService_DeriveAppSKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/joinserver.proto",
}

// JsEndDeviceRegistryClient is the client API for JsEndDeviceRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JsEndDeviceRegistryClient interface {
	// Get returns the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	Get(ctx context.Context, in *GetEndDeviceRequest, opts ...grpc.CallOption) (*EndDevice, error)
	// Set creates or updates the device.
	Set(ctx context.Context, in *SetEndDeviceRequest, opts ...grpc.CallOption) (*EndDevice, error)
	// Provision provisions vendor-specific data.
	// The given devices must already exist before provisioning.
	Provision(ctx context.Context, in *ProvisionEndDevicesRequest, opts ...grpc.CallOption) (*EndDevices, error)
	// Delete deletes the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	Delete(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
}

type jsEndDeviceRegistryClient struct {
	cc *grpc.ClientConn
}

func NewJsEndDeviceRegistryClient(cc *grpc.ClientConn) JsEndDeviceRegistryClient {
	return &jsEndDeviceRegistryClient{cc}
}

func (c *jsEndDeviceRegistryClient) Get(ctx context.Context, in *GetEndDeviceRequest, opts ...grpc.CallOption) (*EndDevice, error) {
	out := new(EndDevice)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.JsEndDeviceRegistry/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jsEndDeviceRegistryClient) Set(ctx context.Context, in *SetEndDeviceRequest, opts ...grpc.CallOption) (*EndDevice, error) {
	out := new(EndDevice)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.JsEndDeviceRegistry/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jsEndDeviceRegistryClient) Provision(ctx context.Context, in *ProvisionEndDevicesRequest, opts ...grpc.CallOption) (*EndDevices, error) {
	out := new(EndDevices)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.JsEndDeviceRegistry/Provision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jsEndDeviceRegistryClient) Delete(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.JsEndDeviceRegistry/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JsEndDeviceRegistryServer is the server API for JsEndDeviceRegistry service.
type JsEndDeviceRegistryServer interface {
	// Get returns the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	Get(context.Context, *GetEndDeviceRequest) (*EndDevice, error)
	// Set creates or updates the device.
	Set(context.Context, *SetEndDeviceRequest) (*EndDevice, error)
	// Provision provisions vendor-specific data.
	// The given devices must already exist before provisioning.
	Provision(context.Context, *ProvisionEndDevicesRequest) (*EndDevices, error)
	// Delete deletes the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	Delete(context.Context, *EndDeviceIdentifiers) (*types.Empty, error)
}

func RegisterJsEndDeviceRegistryServer(s *grpc.Server, srv JsEndDeviceRegistryServer) {
	s.RegisterService(&_JsEndDeviceRegistry_serviceDesc, srv)
}

func _JsEndDeviceRegistry_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JsEndDeviceRegistryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.JsEndDeviceRegistry/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JsEndDeviceRegistryServer).Get(ctx, req.(*GetEndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JsEndDeviceRegistry_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JsEndDeviceRegistryServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.JsEndDeviceRegistry/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JsEndDeviceRegistryServer).Set(ctx, req.(*SetEndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JsEndDeviceRegistry_Provision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvisionEndDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JsEndDeviceRegistryServer).Provision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.JsEndDeviceRegistry/Provision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JsEndDeviceRegistryServer).Provision(ctx, req.(*ProvisionEndDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JsEndDeviceRegistry_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDeviceIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JsEndDeviceRegistryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.JsEndDeviceRegistry/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JsEndDeviceRegistryServer).Delete(ctx, req.(*EndDeviceIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _JsEndDeviceRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.JsEndDeviceRegistry",
	HandlerType: (*JsEndDeviceRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _JsEndDeviceRegistry_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _JsEndDeviceRegistry_Set_Handler,
		},
		{
			MethodName: "Provision",
			Handler:    _JsEndDeviceRegistry_Provision_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _JsEndDeviceRegistry_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/joinserver.proto",
}

func (m *SessionKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SessionKeyID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintJoinserver(dAtA, i, uint64(len(m.SessionKeyID)))
		i += copy(dAtA[i:], m.SessionKeyID)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintJoinserver(dAtA, i, uint64(m.DevEUI.Size()))
	n1, err := m.DevEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func (m *NwkSKeysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NwkSKeysResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintJoinserver(dAtA, i, uint64(m.FNwkSIntKey.Size()))
	n2, err := m.FNwkSIntKey.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x12
	i++
	i = encodeVarintJoinserver(dAtA, i, uint64(m.SNwkSIntKey.Size()))
	n3, err := m.SNwkSIntKey.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x1a
	i++
	i = encodeVarintJoinserver(dAtA, i, uint64(m.NwkSEncKey.Size()))
	n4, err := m.NwkSEncKey.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *AppSKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppSKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintJoinserver(dAtA, i, uint64(m.AppSKey.Size()))
	n5, err := m.AppSKey.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func (m *CryptoServicePayloadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoServicePayloadRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintJoinserver(dAtA, i, uint64(m.EndDeviceIdentifiers.Size()))
	n6, err := m.EndDeviceIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if m.LoRaWANVersion != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintJoinserver(dAtA, i, uint64(m.LoRaWANVersion))
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintJoinserver(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if len(m.Provisioner) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintJoinserver(dAtA, i, uint64(len(m.Provisioner)))
		i += copy(dAtA[i:], m.Provisioner)
	}
	if m.ProvisioningData != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintJoinserver(dAtA, i, uint64(m.ProvisioningData.Size()))
		n7, err := m.ProvisioningData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *CryptoServicePayloadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoServicePayloadResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintJoinserver(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	return i, nil
}

func (m *JoinAcceptMICRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinAcceptMICRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintJoinserver(dAtA, i, uint64(m.CryptoServicePayloadRequest.Size()))
	n8, err := m.CryptoServicePayloadRequest.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	if m.JoinRequestType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintJoinserver(dAtA, i, uint64(m.JoinRequestType))
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintJoinserver(dAtA, i, uint64(m.DevNonce.Size()))
	n9, err := m.DevNonce.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	return i, nil
}

func (m *DeriveSessionKeysRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeriveSessionKeysRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintJoinserver(dAtA, i, uint64(m.EndDeviceIdentifiers.Size()))
	n10, err := m.EndDeviceIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	if m.LoRaWANVersion != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintJoinserver(dAtA, i, uint64(m.LoRaWANVersion))
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintJoinserver(dAtA, i, uint64(m.JoinNonce.Size()))
	n11, err := m.JoinNonce.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	dAtA[i] = 0x22
	i++
	i = encodeVarintJoinserver(dAtA, i, uint64(m.DevNonce.Size()))
	n12, err := m.DevNonce.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	dAtA[i] = 0x2a
	i++
	i = encodeVarintJoinserver(dAtA, i, uint64(m.NetID.Size()))
	n13, err := m.NetID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	if len(m.Provisioner) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintJoinserver(dAtA, i, uint64(len(m.Provisioner)))
		i += copy(dAtA[i:], m.Provisioner)
	}
	if m.ProvisioningData != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintJoinserver(dAtA, i, uint64(m.ProvisioningData.Size()))
		n14, err := m.ProvisioningData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *ProvisionEndDevicesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProvisionEndDevicesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintJoinserver(dAtA, i, uint64(m.ApplicationIdentifiers.Size()))
	n15, err := m.ApplicationIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	if len(m.Provisioner) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintJoinserver(dAtA, i, uint64(len(m.Provisioner)))
		i += copy(dAtA[i:], m.Provisioner)
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintJoinserver(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if len(m.EndDeviceIDs) > 0 {
		for _, msg := range m.EndDeviceIDs {
			dAtA[i] = 0x22
			i++
			i = encodeVarintJoinserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintJoinserver(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedSessionKeyRequest(r randyJoinserver, easy bool) *SessionKeyRequest {
	this := &SessionKeyRequest{}
	v1 := r.Intn(100)
	this.SessionKeyID = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.SessionKeyID[i] = byte(r.Intn(256))
	}
	v2 := go_thethings_network_lorawan_stack_pkg_types.NewPopulatedEUI64(r)
	this.DevEUI = *v2
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedNwkSKeysResponse(r randyJoinserver, easy bool) *NwkSKeysResponse {
	this := &NwkSKeysResponse{}
	v3 := NewPopulatedKeyEnvelope(r, easy)
	this.FNwkSIntKey = *v3
	v4 := NewPopulatedKeyEnvelope(r, easy)
	this.SNwkSIntKey = *v4
	v5 := NewPopulatedKeyEnvelope(r, easy)
	this.NwkSEncKey = *v5
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAppSKeyResponse(r randyJoinserver, easy bool) *AppSKeyResponse {
	this := &AppSKeyResponse{}
	v6 := NewPopulatedKeyEnvelope(r, easy)
	this.AppSKey = *v6
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCryptoServicePayloadRequest(r randyJoinserver, easy bool) *CryptoServicePayloadRequest {
	this := &CryptoServicePayloadRequest{}
	v7 := NewPopulatedEndDeviceIdentifiers(r, easy)
	this.EndDeviceIdentifiers = *v7
	this.LoRaWANVersion = MACVersion([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	v8 := r.Intn(100)
	this.Payload = make([]byte, v8)
	for i := 0; i < v8; i++ {
		this.Payload[i] = byte(r.Intn(256))
	}
	this.Provisioner = randStringJoinserver(r)
	if r.Intn(10) != 0 {
		this.ProvisioningData = types.NewPopulatedStruct(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCryptoServicePayloadResponse(r randyJoinserver, easy bool) *CryptoServicePayloadResponse {
	this := &CryptoServicePayloadResponse{}
	v9 := r.Intn(100)
	this.Payload = make([]byte, v9)
	for i := 0; i < v9; i++ {
		this.Payload[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedJoinAcceptMICRequest(r randyJoinserver, easy bool) *JoinAcceptMICRequest {
	this := &JoinAcceptMICRequest{}
	v10 := NewPopulatedCryptoServicePayloadRequest(r, easy)
	this.CryptoServicePayloadRequest = *v10
	this.JoinRequestType = r.Uint32()
	v11 := go_thethings_network_lorawan_stack_pkg_types.NewPopulatedDevNonce(r)
	this.DevNonce = *v11
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDeriveSessionKeysRequest(r randyJoinserver, easy bool) *DeriveSessionKeysRequest {
	this := &DeriveSessionKeysRequest{}
	v12 := NewPopulatedEndDeviceIdentifiers(r, easy)
	this.EndDeviceIdentifiers = *v12
	this.LoRaWANVersion = MACVersion([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	v13 := go_thethings_network_lorawan_stack_pkg_types.NewPopulatedJoinNonce(r)
	this.JoinNonce = *v13
	v14 := go_thethings_network_lorawan_stack_pkg_types.NewPopulatedDevNonce(r)
	this.DevNonce = *v14
	v15 := go_thethings_network_lorawan_stack_pkg_types.NewPopulatedNetID(r)
	this.NetID = *v15
	this.Provisioner = randStringJoinserver(r)
	if r.Intn(10) != 0 {
		this.ProvisioningData = types.NewPopulatedStruct(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedProvisionEndDevicesRequest(r randyJoinserver, easy bool) *ProvisionEndDevicesRequest {
	this := &ProvisionEndDevicesRequest{}
	v16 := NewPopulatedApplicationIdentifiers(r, easy)
	this.ApplicationIdentifiers = *v16
	this.Provisioner = randStringJoinserver(r)
	v17 := r.Intn(100)
	this.Data = make([]byte, v17)
	for i := 0; i < v17; i++ {
		this.Data[i] = byte(r.Intn(256))
	}
	if r.Intn(10) != 0 {
		v18 := r.Intn(5)
		this.EndDeviceIDs = make([]EndDeviceIdentifiers, v18)
		for i := 0; i < v18; i++ {
			v19 := NewPopulatedEndDeviceIdentifiers(r, easy)
			this.EndDeviceIDs[i] = *v19
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyJoinserver interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneJoinserver(r randyJoinserver) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringJoinserver(r randyJoinserver) string {
	v20 := r.Intn(100)
	tmps := make([]rune, v20)
	for i := 0; i < v20; i++ {
		tmps[i] = randUTF8RuneJoinserver(r)
	}
	return string(tmps)
}
func randUnrecognizedJoinserver(r randyJoinserver, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldJoinserver(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldJoinserver(dAtA []byte, r randyJoinserver, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateJoinserver(dAtA, uint64(key))
		v21 := r.Int63()
		if r.Intn(2) == 0 {
			v21 *= -1
		}
		dAtA = encodeVarintPopulateJoinserver(dAtA, uint64(v21))
	case 1:
		dAtA = encodeVarintPopulateJoinserver(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateJoinserver(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateJoinserver(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateJoinserver(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateJoinserver(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *SessionKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionKeyID)
	if l > 0 {
		n += 1 + l + sovJoinserver(uint64(l))
	}
	l = m.DevEUI.Size()
	n += 1 + l + sovJoinserver(uint64(l))
	return n
}

func (m *NwkSKeysResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FNwkSIntKey.Size()
	n += 1 + l + sovJoinserver(uint64(l))
	l = m.SNwkSIntKey.Size()
	n += 1 + l + sovJoinserver(uint64(l))
	l = m.NwkSEncKey.Size()
	n += 1 + l + sovJoinserver(uint64(l))
	return n
}

func (m *AppSKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AppSKey.Size()
	n += 1 + l + sovJoinserver(uint64(l))
	return n
}

func (m *CryptoServicePayloadRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EndDeviceIdentifiers.Size()
	n += 1 + l + sovJoinserver(uint64(l))
	if m.LoRaWANVersion != 0 {
		n += 1 + sovJoinserver(uint64(m.LoRaWANVersion))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovJoinserver(uint64(l))
	}
	l = len(m.Provisioner)
	if l > 0 {
		n += 1 + l + sovJoinserver(uint64(l))
	}
	if m.ProvisioningData != nil {
		l = m.ProvisioningData.Size()
		n += 1 + l + sovJoinserver(uint64(l))
	}
	return n
}

func (m *CryptoServicePayloadResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovJoinserver(uint64(l))
	}
	return n
}

func (m *JoinAcceptMICRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CryptoServicePayloadRequest.Size()
	n += 1 + l + sovJoinserver(uint64(l))
	if m.JoinRequestType != 0 {
		n += 1 + sovJoinserver(uint64(m.JoinRequestType))
	}
	l = m.DevNonce.Size()
	n += 1 + l + sovJoinserver(uint64(l))
	return n
}

func (m *DeriveSessionKeysRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EndDeviceIdentifiers.Size()
	n += 1 + l + sovJoinserver(uint64(l))
	if m.LoRaWANVersion != 0 {
		n += 1 + sovJoinserver(uint64(m.LoRaWANVersion))
	}
	l = m.JoinNonce.Size()
	n += 1 + l + sovJoinserver(uint64(l))
	l = m.DevNonce.Size()
	n += 1 + l + sovJoinserver(uint64(l))
	l = m.NetID.Size()
	n += 1 + l + sovJoinserver(uint64(l))
	l = len(m.Provisioner)
	if l > 0 {
		n += 1 + l + sovJoinserver(uint64(l))
	}
	if m.ProvisioningData != nil {
		l = m.ProvisioningData.Size()
		n += 1 + l + sovJoinserver(uint64(l))
	}
	return n
}

func (m *ProvisionEndDevicesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ApplicationIdentifiers.Size()
	n += 1 + l + sovJoinserver(uint64(l))
	l = len(m.Provisioner)
	if l > 0 {
		n += 1 + l + sovJoinserver(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovJoinserver(uint64(l))
	}
	if len(m.EndDeviceIDs) > 0 {
		for _, e := range m.EndDeviceIDs {
			l = e.Size()
			n += 1 + l + sovJoinserver(uint64(l))
		}
	}
	return n
}

func sovJoinserver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozJoinserver(x uint64) (n int) {
	return sovJoinserver((x << 1) ^ uint64((int64(x) >> 63)))
}
func (this *SessionKeyRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SessionKeyRequest{`,
		`SessionKeyID:` + fmt.Sprintf("%v", this.SessionKeyID) + `,`,
		`DevEUI:` + fmt.Sprintf("%v", this.DevEUI) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NwkSKeysResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NwkSKeysResponse{`,
		`FNwkSIntKey:` + strings.Replace(strings.Replace(this.FNwkSIntKey.String(), "KeyEnvelope", "KeyEnvelope", 1), `&`, ``, 1) + `,`,
		`SNwkSIntKey:` + strings.Replace(strings.Replace(this.SNwkSIntKey.String(), "KeyEnvelope", "KeyEnvelope", 1), `&`, ``, 1) + `,`,
		`NwkSEncKey:` + strings.Replace(strings.Replace(this.NwkSEncKey.String(), "KeyEnvelope", "KeyEnvelope", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppSKeyResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppSKeyResponse{`,
		`AppSKey:` + strings.Replace(strings.Replace(this.AppSKey.String(), "KeyEnvelope", "KeyEnvelope", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CryptoServicePayloadRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CryptoServicePayloadRequest{`,
		`EndDeviceIdentifiers:` + strings.Replace(strings.Replace(this.EndDeviceIdentifiers.String(), "EndDeviceIdentifiers", "EndDeviceIdentifiers", 1), `&`, ``, 1) + `,`,
		`LoRaWANVersion:` + fmt.Sprintf("%v", this.LoRaWANVersion) + `,`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`Provisioner:` + fmt.Sprintf("%v", this.Provisioner) + `,`,
		`ProvisioningData:` + strings.Replace(fmt.Sprintf("%v", this.ProvisioningData), "Struct", "types.Struct", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CryptoServicePayloadResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CryptoServicePayloadResponse{`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JoinAcceptMICRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JoinAcceptMICRequest{`,
		`CryptoServicePayloadRequest:` + strings.Replace(strings.Replace(this.CryptoServicePayloadRequest.String(), "CryptoServicePayloadRequest", "CryptoServicePayloadRequest", 1), `&`, ``, 1) + `,`,
		`JoinRequestType:` + fmt.Sprintf("%v", this.JoinRequestType) + `,`,
		`DevNonce:` + fmt.Sprintf("%v", this.DevNonce) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeriveSessionKeysRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeriveSessionKeysRequest{`,
		`EndDeviceIdentifiers:` + strings.Replace(strings.Replace(this.EndDeviceIdentifiers.String(), "EndDeviceIdentifiers", "EndDeviceIdentifiers", 1), `&`, ``, 1) + `,`,
		`LoRaWANVersion:` + fmt.Sprintf("%v", this.LoRaWANVersion) + `,`,
		`JoinNonce:` + fmt.Sprintf("%v", this.JoinNonce) + `,`,
		`DevNonce:` + fmt.Sprintf("%v", this.DevNonce) + `,`,
		`NetID:` + fmt.Sprintf("%v", this.NetID) + `,`,
		`Provisioner:` + fmt.Sprintf("%v", this.Provisioner) + `,`,
		`ProvisioningData:` + strings.Replace(fmt.Sprintf("%v", this.ProvisioningData), "Struct", "types.Struct", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProvisionEndDevicesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProvisionEndDevicesRequest{`,
		`ApplicationIdentifiers:` + strings.Replace(strings.Replace(this.ApplicationIdentifiers.String(), "ApplicationIdentifiers", "ApplicationIdentifiers", 1), `&`, ``, 1) + `,`,
		`Provisioner:` + fmt.Sprintf("%v", this.Provisioner) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`EndDeviceIDs:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.EndDeviceIDs), "EndDeviceIdentifiers", "EndDeviceIdentifiers", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringJoinserver(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SessionKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJoinserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionKeyID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoinserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthJoinserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionKeyID = append(m.SessionKeyID[:0], dAtA[iNdEx:postIndex]...)
			if m.SessionKeyID == nil {
				m.SessionKeyID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoinserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthJoinserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJoinserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJoinserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NwkSKeysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJoinserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NwkSKeysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NwkSKeysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FNwkSIntKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoinserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJoinserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FNwkSIntKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SNwkSIntKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoinserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJoinserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SNwkSIntKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NwkSEncKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoinserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJoinserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NwkSEncKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJoinserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJoinserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppSKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJoinserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppSKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppSKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppSKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoinserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJoinserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AppSKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJoinserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJoinserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoServicePayloadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJoinserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoServicePayloadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoServicePayloadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDeviceIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoinserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJoinserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EndDeviceIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoRaWANVersion", wireType)
			}
			m.LoRaWANVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoinserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoRaWANVersion |= (MACVersion(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoinserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthJoinserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provisioner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoinserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJoinserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provisioner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvisioningData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoinserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJoinserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProvisioningData == nil {
				m.ProvisioningData = &types.Struct{}
			}
			if err := m.ProvisioningData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJoinserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJoinserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoServicePayloadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJoinserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoServicePayloadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoServicePayloadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoinserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthJoinserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJoinserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJoinserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinAcceptMICRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJoinserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinAcceptMICRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinAcceptMICRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CryptoServicePayloadRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoinserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJoinserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CryptoServicePayloadRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinRequestType", wireType)
			}
			m.JoinRequestType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoinserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinRequestType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevNonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoinserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthJoinserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevNonce.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJoinserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJoinserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeriveSessionKeysRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJoinserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeriveSessionKeysRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeriveSessionKeysRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDeviceIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoinserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJoinserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EndDeviceIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoRaWANVersion", wireType)
			}
			m.LoRaWANVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoinserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoRaWANVersion |= (MACVersion(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinNonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoinserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthJoinserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.JoinNonce.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevNonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoinserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthJoinserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevNonce.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoinserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthJoinserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NetID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provisioner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoinserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJoinserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provisioner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvisioningData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoinserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJoinserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProvisioningData == nil {
				m.ProvisioningData = &types.Struct{}
			}
			if err := m.ProvisioningData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJoinserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJoinserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProvisionEndDevicesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJoinserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProvisionEndDevicesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProvisionEndDevicesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoinserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJoinserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provisioner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoinserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJoinserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provisioner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoinserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthJoinserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDeviceIDs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoinserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJoinserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndDeviceIDs = append(m.EndDeviceIDs, EndDeviceIdentifiers{})
			if err := m.EndDeviceIDs[len(m.EndDeviceIDs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJoinserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJoinserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipJoinserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowJoinserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJoinserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJoinserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthJoinserver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowJoinserver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipJoinserver(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthJoinserver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowJoinserver   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("lorawan-stack/api/joinserver.proto", fileDescriptor_joinserver_10feeed0db84c081)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/joinserver.proto", fileDescriptor_joinserver_10feeed0db84c081)
}

var fileDescriptor_joinserver_10feeed0db84c081 = []byte{
	// 1452 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x57, 0x4d, 0x6c, 0x1b, 0xc5,
	0x17, 0xdf, 0x49, 0x1c, 0xa7, 0x99, 0x24, 0x4e, 0xb3, 0xad, 0xfe, 0x7f, 0xe3, 0x46, 0xe3, 0xd4,
	0x4d, 0x51, 0x1a, 0x6a, 0x1b, 0xb9, 0x10, 0x41, 0xa5, 0x52, 0xe2, 0xd8, 0x32, 0x4e, 0x48, 0x14,
	0xad, 0x29, 0x45, 0x29, 0xa9, 0xd9, 0x78, 0x27, 0xee, 0xc6, 0xee, 0xec, 0xb2, 0x33, 0xb1, 0x31,
	0xa5, 0x52, 0x85, 0x38, 0xf4, 0x82, 0x84, 0x84, 0x90, 0x38, 0xa2, 0x72, 0xa9, 0xe0, 0x52, 0xf5,
	0xd4, 0x63, 0x8f, 0x3d, 0x56, 0xe2, 0x52, 0x71, 0x70, 0xeb, 0x35, 0x48, 0x15, 0xa7, 0x1e, 0x2b,
	0x0e, 0x08, 0xed, 0x97, 0xbd, 0x5e, 0x3b, 0xd4, 0x46, 0x01, 0x89, 0xdb, 0x7c, 0xbc, 0xf7, 0xe6,
	0xf7, 0xde, 0xfb, 0xbd, 0xf7, 0x76, 0x61, 0xa4, 0xac, 0x68, 0x62, 0x55, 0x24, 0x51, 0xca, 0xc4,
	0x42, 0x29, 0x2e, 0xaa, 0x72, 0x7c, 0x57, 0x91, 0x09, 0xc5, 0x5a, 0x05, 0x6b, 0x31, 0x55, 0x53,
	0x98, 0xc2, 0x07, 0x18, 0x23, 0x31, 0x5b, 0x2e, 0x56, 0x39, 0x13, 0x8a, 0x16, 0x65, 0x76, 0x65,
	0x6f, 0x3b, 0x56, 0x50, 0xae, 0xc6, 0x8b, 0x4a, 0x51, 0x89, 0x9b, 0x62, 0xdb, 0x7b, 0x3b, 0xe6,
	0xce, 0xdc, 0x98, 0x2b, 0x4b, 0x3d, 0xb4, 0xe8, 0x12, 0xbf, 0x5a, 0x95, 0x59, 0x49, 0xa9, 0xc6,
	0x8b, 0x4a, 0xd4, 0xbc, 0x8c, 0x56, 0xc4, 0xb2, 0x2c, 0x89, 0x4c, 0xd1, 0x68, 0xbc, 0xb5, 0xb4,
	0xf5, 0x66, 0x8a, 0x8a, 0x52, 0x2c, 0x63, 0x13, 0x93, 0x48, 0x88, 0xc2, 0x44, 0x26, 0x2b, 0x84,
	0xda, 0xb7, 0xc7, 0xec, 0xdb, 0xd6, 0xdb, 0xf8, 0xaa, 0xca, 0x6a, 0x1e, 0xd5, 0xd6, 0x25, 0x65,
	0xda, 0x5e, 0x81, 0xd9, 0xb7, 0x3d, 0x7c, 0xc6, 0x44, 0xca, 0x4b, 0xb8, 0x22, 0x17, 0xb0, 0x2d,
	0x73, 0xa2, 0x5b, 0x46, 0x96, 0x30, 0x61, 0xf2, 0x8e, 0x8c, 0x35, 0x07, 0xc3, 0x4c, 0xef, 0xe0,
	0xd9, 0xb7, 0xe1, 0xee, 0x5b, 0x27, 0x88, 0xfb, 0xaa, 0x97, 0x70, 0xcd, 0x36, 0x1e, 0xf9, 0x01,
	0xc0, 0xe9, 0x1c, 0xa6, 0x54, 0x56, 0xc8, 0x2a, 0xae, 0x09, 0xf8, 0xe3, 0x3d, 0x4c, 0x19, 0xbf,
	0x08, 0x03, 0xd4, 0x3a, 0xcc, 0x97, 0x70, 0x2d, 0x2f, 0x4b, 0x41, 0x30, 0x0b, 0xe6, 0x27, 0x92,
	0x87, 0xf5, 0x7a, 0x78, 0xa2, 0x2d, 0x9e, 0x4d, 0x09, 0x13, 0xb4, 0xbd, 0x93, 0xf8, 0x2d, 0x38,
	0x2a, 0xe1, 0x4a, 0x1e, 0xef, 0xc9, 0xc1, 0x21, 0x53, 0x21, 0xf5, 0xa0, 0x1e, 0xe6, 0x7e, 0xae,
	0x87, 0x13, 0x45, 0x25, 0xc6, 0xae, 0x60, 0x76, 0x45, 0x26, 0x45, 0x1a, 0x23, 0x98, 0x55, 0x15,
	0xad, 0x14, 0xef, 0x44, 0xa6, 0x96, 0x8a, 0x71, 0x56, 0x53, 0x31, 0x8d, 0xa5, 0x2f, 0x64, 0x17,
	0x5f, 0xd3, 0xeb, 0x61, 0x7f, 0x0a, 0x57, 0xd2, 0x17, 0xb2, 0x82, 0x5f, 0xc2, 0x95, 0xf4, 0x9e,
	0x1c, 0xf9, 0x0d, 0xc0, 0xc3, 0xeb, 0xd5, 0x52, 0x6e, 0x15, 0xd7, 0xa8, 0x80, 0xa9, 0xaa, 0x10,
	0x8a, 0xf9, 0x0c, 0x9c, 0xda, 0xc9, 0x93, 0x6a, 0x29, 0x4f, 0xf3, 0x32, 0x61, 0x06, 0x5e, 0x13,
	0xec, 0x78, 0xe2, 0x58, 0xac, 0x93, 0x51, 0xb1, 0x55, 0x5c, 0x4b, 0x93, 0x0a, 0x2e, 0x2b, 0x2a,
	0x4e, 0xfa, 0x0c, 0x60, 0xc2, 0xf8, 0x8e, 0x61, 0x2e, 0x4b, 0xd8, 0x2a, 0xae, 0x19, 0x86, 0xa8,
	0xc7, 0xd0, 0x50, 0xdf, 0x86, 0xa8, 0xcb, 0x50, 0x0a, 0x4e, 0x5a, 0x66, 0x30, 0x29, 0x98, 0x66,
	0x86, 0xfb, 0x35, 0x03, 0x49, 0xb5, 0x94, 0x4b, 0x93, 0xc2, 0x2a, 0xae, 0x45, 0x36, 0xe0, 0xd4,
	0x92, 0xaa, 0xe6, 0xcc, 0xac, 0xd8, 0xae, 0x9e, 0x83, 0x63, 0xa2, 0xaa, 0xe6, 0xe9, 0x60, 0x4e,
	0x8e, 0x8a, 0x96, 0x99, 0xc8, 0xaf, 0x43, 0xf0, 0xd8, 0xb2, 0x56, 0x53, 0x99, 0x92, 0xc3, 0x9a,
	0xc1, 0xc2, 0x0d, 0xb1, 0x56, 0x56, 0x44, 0xc9, 0xc9, 0xfa, 0xdb, 0x70, 0x58, 0x96, 0xa8, 0x6d,
	0x78, 0xce, 0x6b, 0x38, 0x4d, 0xa4, 0x94, 0xc9, 0xdd, 0x6c, 0x9b, 0xa1, 0xc9, 0x43, 0xc6, 0x0b,
	0x0f, 0xeb, 0x61, 0x20, 0x18, 0xaa, 0xfc, 0x45, 0x38, 0x65, 0x6b, 0xe4, 0x2b, 0x58, 0x33, 0x78,
	0x61, 0x86, 0x30, 0x90, 0x08, 0x79, 0xad, 0xad, 0x2d, 0x2d, 0xbf, 0x6f, 0x49, 0x24, 0x79, 0xbd,
	0x1e, 0x0e, 0xbc, 0xab, 0x08, 0xe2, 0xc5, 0xa5, 0x75, 0xfb, 0x4c, 0x08, 0xd8, 0xa2, 0xf6, 0x9e,
	0x0f, 0xc2, 0x51, 0xd5, 0x02, 0x6b, 0x06, 0x73, 0x42, 0x70, 0xb6, 0xfc, 0x2a, 0x1c, 0x57, 0x35,
	0xa5, 0x22, 0x1b, 0x62, 0x58, 0x0b, 0xfa, 0x66, 0xc1, 0xfc, 0x58, 0xf2, 0x94, 0xfe, 0x38, 0x7c,
	0x12, 0x1e, 0xbf, 0x7c, 0x49, 0x8c, 0x7e, 0xfa, 0x6a, 0xf4, 0xcd, 0xad, 0xf9, 0xf3, 0x67, 0x2f,
	0x45, 0xb7, 0xce, 0x3b, 0xdb, 0x53, 0xd7, 0x12, 0xa7, 0xaf, 0xcf, 0x7d, 0x76, 0x79, 0xee, 0x93,
	0x93, 0x82, 0x5b, 0x9b, 0x4f, 0xc1, 0xe9, 0xd6, 0x56, 0x26, 0xc5, 0xbc, 0x24, 0x32, 0x31, 0x38,
	0x62, 0xc6, 0xe3, 0xff, 0x31, 0xab, 0xda, 0x63, 0x4e, 0xb5, 0xc7, 0x72, 0x66, 0xb5, 0x0b, 0x87,
	0xdd, 0x1a, 0x29, 0x91, 0x89, 0x91, 0x37, 0xe0, 0x4c, 0xef, 0x30, 0xdb, 0x69, 0x74, 0x39, 0x03,
	0x3a, 0x9c, 0x89, 0xfc, 0x01, 0xe0, 0xd1, 0x15, 0x45, 0x26, 0x4b, 0x85, 0x02, 0x56, 0xd9, 0x5a,
	0x76, 0xd9, 0x49, 0xcd, 0x65, 0x38, 0x65, 0xcb, 0xe4, 0x35, 0xeb, 0xc8, 0x4e, 0xd3, 0x2b, 0xde,
	0xc0, 0xfe, 0x45, 0x82, 0x5d, 0xd9, 0x0a, 0xa8, 0x9d, 0xa9, 0x5f, 0x80, 0xd3, 0x46, 0x4f, 0x71,
	0x8c, 0xe7, 0x8d, 0x3a, 0x34, 0x53, 0x37, 0x29, 0x4c, 0x19, 0x17, 0xb6, 0xdc, 0x7b, 0x35, 0x15,
	0xf3, 0x9b, 0x70, 0xcc, 0x28, 0x72, 0xa2, 0x90, 0x02, 0xb6, 0xb2, 0x91, 0x3c, 0x67, 0x97, 0xf9,
	0xeb, 0x03, 0x95, 0x79, 0x0a, 0x57, 0xd6, 0x0d, 0x23, 0xc2, 0x21, 0xc9, 0x5e, 0x45, 0x1e, 0xfb,
	0x60, 0x30, 0x85, 0x35, 0xb9, 0x82, 0xdb, 0x5d, 0x86, 0xfe, 0x07, 0xf8, 0xb9, 0x05, 0xa1, 0x19,
	0x3f, 0x77, 0x50, 0xde, 0xb2, 0x83, 0xb2, 0x38, 0x50, 0x50, 0x8c, 0xf4, 0x5b, 0x51, 0x19, 0xdb,
	0x75, 0x96, 0x9d, 0x21, 0xf7, 0x1d, 0x68, 0xc8, 0xf9, 0x4d, 0xe8, 0x27, 0x98, 0x19, 0x3d, 0x7e,
	0xc4, 0x34, 0xbc, 0xfc, 0xb7, 0x5a, 0xf6, 0x3a, 0x66, 0xd9, 0x94, 0x5e, 0x0f, 0x8f, 0x98, 0x0b,
	0x61, 0x84, 0x60, 0x96, 0xed, 0x2a, 0x4e, 0xff, 0xc1, 0x17, 0xe7, 0xe8, 0xa0, 0xc5, 0xf9, 0xe5,
	0x10, 0x0c, 0x6d, 0x38, 0x87, 0x2d, 0xce, 0xb4, 0x38, 0x76, 0x11, 0x06, 0x44, 0x55, 0x2d, 0xcb,
	0x05, 0xf3, 0x33, 0xc0, 0x99, 0x7c, 0xe3, 0x89, 0x97, 0xbd, 0x04, 0x59, 0x6a, 0x4b, 0xf5, 0x26,
	0xdc, 0xa4, 0xe8, 0x96, 0xe0, 0x67, 0x3b, 0x43, 0x61, 0xd0, 0x6e, 0xac, 0xd3, 0x3f, 0x1e, 0xfa,
	0x4c, 0x97, 0xac, 0x06, 0x67, 0xae, 0xf9, 0x8f, 0x60, 0xa0, 0xfd, 0xd1, 0x90, 0x37, 0xd8, 0xef,
	0x9b, 0x1d, 0xee, 0x9b, 0xfd, 0x47, 0x0d, 0x30, 0xc6, 0xc8, 0x6e, 0xdf, 0xa6, 0xa8, 0x30, 0x81,
	0xdb, 0xb2, 0x34, 0xf1, 0x3d, 0x80, 0xbe, 0x75, 0xba, 0x42, 0xf9, 0x0c, 0x84, 0xef, 0x88, 0x44,
	0x2a, 0x63, 0x83, 0x81, 0x7c, 0xd7, 0x5c, 0x59, 0x69, 0x77, 0x81, 0xd0, 0x4c, 0xef, 0x4b, 0xbb,
	0xbd, 0x09, 0x70, 0x3c, 0x83, 0x99, 0x33, 0xa7, 0xf9, 0xe3, 0x5e, 0xe1, 0xae, 0xcf, 0x8d, 0xd0,
	0xac, 0x57, 0xc4, 0x3b, 0xe4, 0x13, 0x1f, 0x40, 0xdf, 0x92, 0x01, 0x72, 0x03, 0xc2, 0x0c, 0x66,
	0xf6, 0x5c, 0xec, 0xc7, 0x74, 0xb8, 0x47, 0xde, 0xdc, 0x33, 0x35, 0x71, 0xdb, 0x07, 0x8f, 0xae,
	0x5b, 0xe4, 0xee, 0x68, 0x9d, 0x7c, 0x09, 0x06, 0x5c, 0x3e, 0xaf, 0x65, 0x97, 0xf9, 0x41, 0x7a,
	0x6d, 0xe8, 0x74, 0x7f, 0xc2, 0x76, 0xcc, 0x0a, 0x70, 0xb2, 0xa3, 0xef, 0xf3, 0x73, 0xbd, 0x42,
	0xec, 0x1d, 0x0b, 0x03, 0x3e, 0x42, 0xe0, 0x74, 0x9a, 0x14, 0x0c, 0x89, 0xb6, 0xb1, 0x7f, 0xd2,
	0x29, 0x15, 0x1e, 0xb1, 0xdf, 0x13, 0xf0, 0xee, 0xbf, 0xf2, 0xe2, 0x87, 0x30, 0x60, 0x4d, 0x8f,
	0x16, 0xfb, 0xe6, 0xbd, 0xfa, 0xfb, 0x4d, 0x97, 0x3e, 0x48, 0x58, 0x81, 0x41, 0x57, 0xd5, 0x77,
	0xb2, 0x65, 0x13, 0x4e, 0x5a, 0x96, 0x1d, 0x6e, 0xf6, 0xff, 0xf0, 0x0b, 0x29, 0xfa, 0x85, 0x1f,
	0x1e, 0x59, 0xa1, 0xad, 0x1a, 0x16, 0x70, 0x51, 0xa6, 0x4c, 0xab, 0xf1, 0x77, 0x01, 0x1c, 0xce,
	0x60, 0xc6, 0x9f, 0xf0, 0x1a, 0xc8, 0x60, 0xe6, 0x92, 0xb6, 0x5e, 0x79, 0x69, 0xdf, 0x8e, 0x11,
	0x29, 0x7d, 0xfe, 0xd3, 0x2f, 0x5f, 0x0f, 0x61, 0xbe, 0x10, 0xdf, 0xa5, 0x71, 0x57, 0xd7, 0xa2,
	0xf1, 0x6b, 0x9d, 0xcd, 0x27, 0xd6, 0xd9, 0x1a, 0xbd, 0xfb, 0xeb, 0x71, 0x4b, 0xb4, 0x5b, 0xaf,
	0xb5, 0xbc, 0xce, 0xff, 0x0e, 0xe0, 0x70, 0xae, 0x17, 0xe8, 0xdc, 0x60, 0xa0, 0xef, 0x02, 0x13,
	0xf5, 0x8f, 0x20, 0x74, 0xa9, 0x1b, 0xb6, 0xfd, 0x93, 0x35, 0x10, 0x64, 0x97, 0x4e, 0x1b, 0xee,
	0x59, 0xb0, 0xb0, 0x99, 0x8d, 0xa4, 0x0e, 0xe2, 0x85, 0xb3, 0x60, 0x81, 0xbf, 0x05, 0xe0, 0x58,
	0x6b, 0xf8, 0xf0, 0x0b, 0x5e, 0xef, 0xf6, 0x9f, 0x4b, 0xa1, 0xd0, 0xbe, 0x91, 0xa0, 0x91, 0x35,
	0x33, 0x12, 0x99, 0x50, 0xb2, 0x1b, 0x66, 0x27, 0x96, 0x2e, 0x68, 0xad, 0xf1, 0x13, 0x75, 0x81,
	0xfc, 0x06, 0x40, 0x7f, 0x0a, 0x97, 0x31, 0xc3, 0x7c, 0x5f, 0x63, 0x26, 0xf4, 0xbf, 0xae, 0xe9,
	0x9b, 0x36, 0xfe, 0x92, 0x1d, 0x5c, 0x0b, 0xe9, 0x17, 0xe1, 0x7a, 0x61, 0x56, 0x8c, 0xb3, 0xe4,
	0x2d, 0xf0, 0xa0, 0x81, 0xc0, 0xc3, 0x06, 0x02, 0x8f, 0x1a, 0x88, 0x7b, 0xd2, 0x40, 0xdc, 0xd3,
	0x06, 0xe2, 0x9e, 0x35, 0x10, 0xf7, 0xbc, 0x81, 0xc0, 0x0d, 0x1d, 0x81, 0x9b, 0x3a, 0xe2, 0x6e,
	0xeb, 0x08, 0xdc, 0xd1, 0x11, 0x77, 0x4f, 0x47, 0xdc, 0x7d, 0x1d, 0x71, 0x0f, 0x74, 0x04, 0x1e,
	0xea, 0x08, 0x3c, 0xd2, 0x11, 0xf7, 0x44, 0x47, 0xe0, 0xa9, 0x8e, 0xb8, 0x67, 0x3a, 0x02, 0xcf,
	0x75, 0xc4, 0xdd, 0x68, 0x22, 0xee, 0x66, 0x13, 0x81, 0xaf, 0x9a, 0x88, 0xfb, 0xb6, 0x89, 0xc0,
	0x77, 0x4d, 0xc4, 0xdd, 0x6e, 0x22, 0xee, 0x4e, 0x13, 0x81, 0x7b, 0x4d, 0x04, 0xee, 0x37, 0x11,
	0xd8, 0x3c, 0xdd, 0xef, 0x77, 0x10, 0x23, 0xea, 0xf6, 0xb6, 0xdf, 0x8c, 0xc1, 0x99, 0x3f, 0x03,
	0x00, 0x00, 0xff, 0xff, 0x7a, 0xdd, 0xdb, 0x29, 0xf2, 0x10, 0x00, 0x00,
}
