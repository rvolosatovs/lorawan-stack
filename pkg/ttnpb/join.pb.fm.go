// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import fmt "fmt"

var _JoinRequestFieldPaths = [...]string{
	"cf_list",
	"cf_list.ch_masks",
	"cf_list.freq",
	"cf_list.type",
	"correlation_ids",
	"downlink_settings",
	"downlink_settings.opt_neg",
	"downlink_settings.rx1_dr_offset",
	"downlink_settings.rx2_dr",
	"end_device_ids",
	"end_device_ids.application_ids",
	"end_device_ids.application_ids.application_id",
	"end_device_ids.dev_addr",
	"end_device_ids.dev_eui",
	"end_device_ids.device_id",
	"end_device_ids.join_eui",
	"net_id",
	"payload",
	"payload.join_accept_payload",
	"payload.join_accept_payload.cf_list",
	"payload.join_accept_payload.cf_list.ch_masks",
	"payload.join_accept_payload.cf_list.freq",
	"payload.join_accept_payload.cf_list.type",
	"payload.join_accept_payload.dev_addr",
	"payload.join_accept_payload.dl_settings",
	"payload.join_accept_payload.dl_settings.opt_neg",
	"payload.join_accept_payload.dl_settings.rx1_dr_offset",
	"payload.join_accept_payload.dl_settings.rx2_dr",
	"payload.join_accept_payload.encrypted",
	"payload.join_accept_payload.join_nonce",
	"payload.join_accept_payload.net_id",
	"payload.join_accept_payload.rx_delay",
	"payload.join_request_payload",
	"payload.join_request_payload.dev_eui",
	"payload.join_request_payload.dev_nonce",
	"payload.join_request_payload.join_eui",
	"payload.m_hdr",
	"payload.m_hdr.m_type",
	"payload.m_hdr.major",
	"payload.mac_payload",
	"payload.mac_payload.decoded_payload",
	"payload.mac_payload.f_hdr",
	"payload.mac_payload.f_hdr.dev_addr",
	"payload.mac_payload.f_hdr.f_cnt",
	"payload.mac_payload.f_hdr.f_ctrl",
	"payload.mac_payload.f_hdr.f_ctrl.ack",
	"payload.mac_payload.f_hdr.f_ctrl.adr",
	"payload.mac_payload.f_hdr.f_ctrl.adr_ack_req",
	"payload.mac_payload.f_hdr.f_ctrl.class_b",
	"payload.mac_payload.f_hdr.f_ctrl.f_pending",
	"payload.mac_payload.f_hdr.f_opts",
	"payload.mac_payload.f_port",
	"payload.mac_payload.frm_payload",
	"payload.mic",
	"payload.rejoin_request_payload",
	"payload.rejoin_request_payload.dev_eui",
	"payload.rejoin_request_payload.join_eui",
	"payload.rejoin_request_payload.net_id",
	"payload.rejoin_request_payload.rejoin_cnt",
	"payload.rejoin_request_payload.rejoin_type",
	"raw_payload",
	"rx_delay",
	"selected_mac_version",
}

func (*JoinRequest) FieldMaskPaths() []string {
	ret := make([]string, len(_JoinRequestFieldPaths))
	copy(ret, _JoinRequestFieldPaths[:])
	return ret
}

func (dst *JoinRequest) SetFields(src *JoinRequest, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "cf_list":
			dst.CFList = src.CFList
		case "cf_list.ch_masks":
			if dst.CFList == nil {
				dst.CFList = &CFList{}
			}
			dst.CFList.SetFields(src.CFList, _pathsWithoutPrefix("cf_list", paths)...)
		case "cf_list.freq":
			if dst.CFList == nil {
				dst.CFList = &CFList{}
			}
			dst.CFList.SetFields(src.CFList, _pathsWithoutPrefix("cf_list", paths)...)
		case "cf_list.type":
			if dst.CFList == nil {
				dst.CFList = &CFList{}
			}
			dst.CFList.SetFields(src.CFList, _pathsWithoutPrefix("cf_list", paths)...)
		case "correlation_ids":
			dst.CorrelationIDs = src.CorrelationIDs
		case "downlink_settings":
			dst.DownlinkSettings = src.DownlinkSettings
		case "downlink_settings.opt_neg":
			dst.DownlinkSettings.SetFields(&src.DownlinkSettings, _pathsWithoutPrefix("downlink_settings", paths)...)
		case "downlink_settings.rx1_dr_offset":
			dst.DownlinkSettings.SetFields(&src.DownlinkSettings, _pathsWithoutPrefix("downlink_settings", paths)...)
		case "downlink_settings.rx2_dr":
			dst.DownlinkSettings.SetFields(&src.DownlinkSettings, _pathsWithoutPrefix("downlink_settings", paths)...)
		case "end_device_ids":
			dst.EndDeviceIdentifiers = src.EndDeviceIdentifiers
		case "end_device_ids.application_ids":
			dst.EndDeviceIdentifiers.SetFields(&src.EndDeviceIdentifiers, _pathsWithoutPrefix("end_device_ids", paths)...)
		case "end_device_ids.application_ids.application_id":
			dst.EndDeviceIdentifiers.SetFields(&src.EndDeviceIdentifiers, _pathsWithoutPrefix("end_device_ids", paths)...)
		case "end_device_ids.dev_addr":
			dst.EndDeviceIdentifiers.SetFields(&src.EndDeviceIdentifiers, _pathsWithoutPrefix("end_device_ids", paths)...)
		case "end_device_ids.dev_eui":
			dst.EndDeviceIdentifiers.SetFields(&src.EndDeviceIdentifiers, _pathsWithoutPrefix("end_device_ids", paths)...)
		case "end_device_ids.device_id":
			dst.EndDeviceIdentifiers.SetFields(&src.EndDeviceIdentifiers, _pathsWithoutPrefix("end_device_ids", paths)...)
		case "end_device_ids.join_eui":
			dst.EndDeviceIdentifiers.SetFields(&src.EndDeviceIdentifiers, _pathsWithoutPrefix("end_device_ids", paths)...)
		case "net_id":
			dst.NetID = src.NetID
		case "payload":
			dst.Payload = src.Payload
		case "payload.join_accept_payload":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_accept_payload.cf_list":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_accept_payload.cf_list.ch_masks":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_accept_payload.cf_list.freq":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_accept_payload.cf_list.type":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_accept_payload.dev_addr":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_accept_payload.dl_settings":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_accept_payload.dl_settings.opt_neg":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_accept_payload.dl_settings.rx1_dr_offset":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_accept_payload.dl_settings.rx2_dr":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_accept_payload.encrypted":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_accept_payload.join_nonce":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_accept_payload.net_id":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_accept_payload.rx_delay":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_request_payload":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_request_payload.dev_eui":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_request_payload.dev_nonce":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.join_request_payload.join_eui":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.m_hdr":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.m_hdr.m_type":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.m_hdr.major":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload.decoded_payload":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload.f_hdr":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload.f_hdr.dev_addr":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload.f_hdr.f_cnt":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload.f_hdr.f_ctrl":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload.f_hdr.f_ctrl.ack":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload.f_hdr.f_ctrl.adr":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload.f_hdr.f_ctrl.adr_ack_req":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload.f_hdr.f_ctrl.class_b":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload.f_hdr.f_ctrl.f_pending":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload.f_hdr.f_opts":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload.f_port":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mac_payload.frm_payload":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.mic":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.rejoin_request_payload":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.rejoin_request_payload.dev_eui":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.rejoin_request_payload.join_eui":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.rejoin_request_payload.net_id":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.rejoin_request_payload.rejoin_cnt":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "payload.rejoin_request_payload.rejoin_type":
			if dst.Payload == nil {
				dst.Payload = &Message{}
			}
			dst.Payload.SetFields(src.Payload, _pathsWithoutPrefix("payload", paths)...)
		case "raw_payload":
			dst.RawPayload = src.RawPayload
		case "rx_delay":
			dst.RxDelay = src.RxDelay
		case "selected_mac_version":
			dst.SelectedMACVersion = src.SelectedMACVersion
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _JoinResponseFieldPaths = [...]string{
	"correlation_ids",
	"lifetime",
	"raw_payload",
	"session_keys",
	"session_keys.app_s_key",
	"session_keys.app_s_key.kek_label",
	"session_keys.app_s_key.key",
	"session_keys.f_nwk_s_int_key",
	"session_keys.f_nwk_s_int_key.kek_label",
	"session_keys.f_nwk_s_int_key.key",
	"session_keys.nwk_s_enc_key",
	"session_keys.nwk_s_enc_key.kek_label",
	"session_keys.nwk_s_enc_key.key",
	"session_keys.s_nwk_s_int_key",
	"session_keys.s_nwk_s_int_key.kek_label",
	"session_keys.s_nwk_s_int_key.key",
	"session_keys.session_key_id",
}

func (*JoinResponse) FieldMaskPaths() []string {
	ret := make([]string, len(_JoinResponseFieldPaths))
	copy(ret, _JoinResponseFieldPaths[:])
	return ret
}

func (dst *JoinResponse) SetFields(src *JoinResponse, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "correlation_ids":
			dst.CorrelationIDs = src.CorrelationIDs
		case "lifetime":
			dst.Lifetime = src.Lifetime
		case "raw_payload":
			dst.RawPayload = src.RawPayload
		case "session_keys":
			dst.SessionKeys = src.SessionKeys
		case "session_keys.app_s_key":
			dst.SessionKeys.SetFields(&src.SessionKeys, _pathsWithoutPrefix("session_keys", paths)...)
		case "session_keys.app_s_key.kek_label":
			dst.SessionKeys.SetFields(&src.SessionKeys, _pathsWithoutPrefix("session_keys", paths)...)
		case "session_keys.app_s_key.key":
			dst.SessionKeys.SetFields(&src.SessionKeys, _pathsWithoutPrefix("session_keys", paths)...)
		case "session_keys.f_nwk_s_int_key":
			dst.SessionKeys.SetFields(&src.SessionKeys, _pathsWithoutPrefix("session_keys", paths)...)
		case "session_keys.f_nwk_s_int_key.kek_label":
			dst.SessionKeys.SetFields(&src.SessionKeys, _pathsWithoutPrefix("session_keys", paths)...)
		case "session_keys.f_nwk_s_int_key.key":
			dst.SessionKeys.SetFields(&src.SessionKeys, _pathsWithoutPrefix("session_keys", paths)...)
		case "session_keys.nwk_s_enc_key":
			dst.SessionKeys.SetFields(&src.SessionKeys, _pathsWithoutPrefix("session_keys", paths)...)
		case "session_keys.nwk_s_enc_key.kek_label":
			dst.SessionKeys.SetFields(&src.SessionKeys, _pathsWithoutPrefix("session_keys", paths)...)
		case "session_keys.nwk_s_enc_key.key":
			dst.SessionKeys.SetFields(&src.SessionKeys, _pathsWithoutPrefix("session_keys", paths)...)
		case "session_keys.s_nwk_s_int_key":
			dst.SessionKeys.SetFields(&src.SessionKeys, _pathsWithoutPrefix("session_keys", paths)...)
		case "session_keys.s_nwk_s_int_key.kek_label":
			dst.SessionKeys.SetFields(&src.SessionKeys, _pathsWithoutPrefix("session_keys", paths)...)
		case "session_keys.s_nwk_s_int_key.key":
			dst.SessionKeys.SetFields(&src.SessionKeys, _pathsWithoutPrefix("session_keys", paths)...)
		case "session_keys.session_key_id":
			dst.SessionKeys.SetFields(&src.SessionKeys, _pathsWithoutPrefix("session_keys", paths)...)
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}
