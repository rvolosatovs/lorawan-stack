// Copyright Â© 2017 The Things Network Foundation, distributed under the MIT license (see LICENSE file)

// Package encoding is an extension of standard library 'encoding'
// package with additional encoding interfaces added.
package encoding

import "encoding"

// BinaryMarshaler is an encoding.BinaryMarshaler.
// Refer to standard library `encoding` package for documentation.
type BinaryMarshaler encoding.BinaryMarshaler

// BinaryUnmarshaler is an encoding.BinaryUnmarshaler.
// Refer to standard library `encoding` package for documentation.
type BinaryUnmarshaler encoding.BinaryUnmarshaler

// TextMarshaler is an encoding.TextMarshaler.
// Refer to standard library `encoding` package for documentation.
type TextMarshaler encoding.TextMarshaler

// TextUnmarshaler is an encoding.TextUnmarshaler.
// Refer to standard library `encoding` package for documentation.
type TextUnmarshaler encoding.TextUnmarshaler

// LoRaWANMarshaler is the interface implemented by an object that can
// marshal itself into LoRaWAN form.
//
// MarshalLoRaWAN encodes the receiver into LoRaWAN form and returns the result.
type LoRaWANMarshaler interface {
	MarshalLoRaWAN() (data []byte, err error)
}

// LoRaWANAppender is the interface implemented by an object that can append LoRaWAN representation of itself to a byte slice.
//
// AppendLoRaWAN encodes the receiver into LoRaWAN form, appends it to supplied byte slice and returns the result.
type LoRaWANAppender interface {
	AppendLoRaWAN(dst []byte) (data []byte, err error)
}

// LoRaWANUnmarshaler is the interface implemented by an object that can
// unmarshal a LoRaWAN representation of itself.
//
// UnmarshalLoRaWAN must be able to decode the form generated by MarshalLoRaWAN.
// UnmarshalLoRaWAN must copy the data if it wishes to retain the data
// after returning.
type LoRaWANUnmarshaler interface {
	UnmarshalLoRaWAN(data []byte) error
}
