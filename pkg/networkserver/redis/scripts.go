// Code generated by generate_scripts.go. DO NOT EDIT.

package redis

import "github.com/go-redis/redis/v8"

var (
	// ARGV[1]	- 2 LSB of FCnt (same as 16-bit FCnt field in MAC frames)
	// ARGV[2] 	- output TTL in milliseconds
	//
	// KEYS[1] 	- previous matching result key
	//
	// KEYS[2] 	- sorted set of uids of devices matching current session DevAddr sorted ascending by LSB of LastFCntUp
	// KEYS[3] 	- hash containing msgpack-encoded sessions for devices matching current session DevAddr keyed by uid
	// KEYS[4] 	- sorted list of uids of devices matching with current session LastFCntUp LSB being lower than or equal to current
	// KEYS[5] 	- sorted list of uids of devices matching with current session LastFCntUp LSB being greater than current
	// KEYS[6]  - copy of KEYS[3]
	//
	// KEYS[7] 	- sorted set of uids of devices matching pending session DevAddr sorted ascending by creation time
	// KEYS[8] 	- hash containing msgpack-encoded sessions for devices matching pending session DevAddr keyed by uid
	// KEYS[9]  - sorted list of uids of devices matching pending session DevAddr
	// KEYS[10] - copy of KEYS[8]
	deviceMatchScript = redis.NewScript(`if redis.call('pexpire', KEYS[1], ARGV[2]) == 1 then
  return { 'result', redis.call('get', KEYS[1]) }
end
local to_scan = { 'scan' }
local function scan_expiring(i)
  local ret = redis.call('pexpire', KEYS[i], ARGV[2])
  if ret == 1 then
    table.insert(to_scan, i)
  end
  return ret
end
if scan_expiring(4) + scan_expiring(5) > 0 then
  redis.call('pexpire', KEYS[6], ARGV[2])
end
if #KEYS == 10 then
  if scan_expiring(9) > 0 then
    redis.call('pexpire', KEYS[10], ARGV[2])
  end
end
if #to_scan > 1 then
  return to_scan
end
local pivot = redis.call('zcount', KEYS[2], '-inf', ARGV[1])
if pivot > 0 then
  redis.call('sort', KEYS[2], 'by', 'nosort', 'limit', 0, pivot, 'store', KEYS[4])
  redis.call('pexpire', KEYS[4], ARGV[2])
  table.insert(to_scan, 4)
end
local gt = redis.call('sort', KEYS[2], 'by', 'nosort', 'limit', pivot, -1, 'store', KEYS[5])
if gt > 0 then
  redis.call('pexpire', KEYS[5], ARGV[2])
  table.insert(to_scan, 5)
end
if pivot > 0 or gt > 0 then
  redis.call('restore', KEYS[6], ARGV[2], redis.call('dump', KEYS[3]))
end
if #KEYS == 10 and redis.call('sort', KEYS[7], 'by', 'nosort', 'store', KEYS[9]) > 0 then
  redis.call('pexpire', KEYS[9], ARGV[2])
  table.insert(to_scan, 9)
  redis.call('restore', KEYS[10], ARGV[2], redis.call('dump', KEYS[8]))
end
if #to_scan > 1 then
    return to_scan
end
return nil`)

	deviceMatchScanScript = redis.NewScript(`for _, old_uid in ipairs(ARGV) do
  local uid = redis.call('lindex', KEYS[1], -1)
  if uid ~= old_uid then
    return uid
  end
  redis.call('ltrim', KEYS[1], 0, -2)
  redis.call('hdel', KEYS[2], old_uid)
end
return redis.call('lindex', KEYS[1], -1)`)

	deviceMatchScanGTScript = redis.NewScript(`for _, old_uid in ipairs(ARGV) do
  local uid = redis.call('lindex', KEYS[1], -1)
  if uid ~= old_uid then
    local s = redis.call('hget', KEYS[2], uid)
    local m = cmsgpack.unpack(s)
    if not m.Supports32BitFCnt or m.Supports32BitFCnt.value
      or m.ResetsFCnt and m.ResetsFCnt.value then
      return { uid, s }
    end
  end
  redis.call('ltrim', KEYS[1], 0, -2)
  redis.call('hdel', KEYS[2], uid)
end
local uid = redis.call('lindex', KEYS[1], -1)
while uid do
  local s = redis.call('hget', KEYS[2], uid)
  local m = cmsgpack.unpack(s)
  if not m.Supports32BitFCnt or m.Supports32BitFCnt.value
    or m.ResetsFCnt and m.ResetsFCnt.value then
    return { uid, s }
  end
  redis.call('ltrim', KEYS[1], 0, -2)
  redis.call('hdel', KEYS[2], uid)
  uid = redis.call('lindex', KEYS[1], -1)
end
return nil`)
)
