// Copyright Â© 2017 The Things Network Foundation, distributed under the MIT license (see LICENSE file)

package crypto

import (
	"testing"

	"github.com/TheThingsNetwork/ttn/pkg/types"
	"github.com/smartystreets/assertions"
	"github.com/smartystreets/assertions/should"
)

func TestKeyDerivation(t *testing.T) {
	a := assertions.New(t)

	a.So(reverse([]byte{1, 2, 3, 4}), should.Resemble, []byte{4, 3, 2, 1})

	key := types.AES128Key{0xBE, 0xC4, 0x99, 0xC6, 0x9E, 0x9C, 0x93, 0x9E, 0x41, 0x3B, 0x66, 0x39, 0x61, 0x63, 0x6C, 0x61}
	dn := [2]byte{0x73, 0x69}
	nid := [3]byte{0x00, 0x00, 0x00}
	jn := [3]byte{0xAE, 0x3B, 0x1C}

	appSKey := DeriveAppSKey(key, jn, nid, dn)
	a.So(appSKey, should.Equal, types.AES128Key{0x71, 0x4F, 0xA5, 0x53, 0x03, 0x07, 0xD6, 0x03, 0xE8, 0x7C, 0x78, 0x65, 0xDF, 0x86, 0x2A, 0x85})

	nwkSKey := DeriveNwkSKey(key, jn, nid, dn)
	a.So(nwkSKey, should.Equal, types.AES128Key{0x33, 0xD5, 0xF3, 0x74, 0x29, 0xDA, 0x60, 0xF0, 0xA5, 0x7A, 0xB5, 0xAA, 0x06, 0x95, 0xE4, 0x98})

	fNwkSIntKey := DeriveFNwkSIntKey(key, jn, nid, dn)
	a.So(fNwkSIntKey, should.Equal, types.AES128Key{0x33, 0xD5, 0xF3, 0x74, 0x29, 0xDA, 0x60, 0xF0, 0xA5, 0x7A, 0xB5, 0xAA, 0x06, 0x95, 0xE4, 0x98})

	sNwkSIntKey := DeriveSNwkSIntKey(key, jn, nid, dn)
	a.So(sNwkSIntKey, should.Equal, types.AES128Key{0x3B, 0x33, 0xD5, 0x6C, 0x31, 0x06, 0x4C, 0x80, 0xEC, 0x89, 0xB4, 0x5F, 0xA5, 0xDE, 0xBC, 0x67})

	nwkSEncKey := DeriveNwkSEncKey(key, jn, nid, dn)
	a.So(nwkSEncKey, should.Equal, types.AES128Key{0x2E, 0xD2, 0xC1, 0x45, 0xED, 0x3E, 0x23, 0xE7, 0xA8, 0xBD, 0x87, 0x27, 0x48, 0xD7, 0x3A, 0x6D})

	eui := types.EUI64{}

	jsIntKey := DeriveJSIntKey(key, eui)
	a.So(jsIntKey, should.Equal, types.AES128Key{0x05, 0x66, 0x38, 0x5A, 0xA9, 0xCF, 0x43, 0x27, 0x8C, 0xF4, 0x05, 0xA5, 0x3F, 0x41, 0x3E, 0x00})

	jsEncKey := DeriveJSEncKey(key, eui)
	a.So(jsEncKey, should.Equal, types.AES128Key{0xAC, 0x40, 0xD2, 0x30, 0x41, 0xF8, 0x6C, 0x92, 0x63, 0x79, 0x91, 0xB7, 0x0E, 0x70, 0x62, 0x3C})
}
