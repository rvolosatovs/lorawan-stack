// Copyright © 2019 The Things Network Foundation, The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { defineMessages } from 'react-intl'

export default defineMessages({
  // Keep these sorted alphabetically.
  abp: 'Activation by personalization (ABP)',
  activationMode: 'Activation mode',
  add: 'Add',
  addApiKey: 'Add API key',
  addApplication: 'Add application',
  addAttributes: 'Add attributes',
  addCollaborator: 'Add collaborator',
  addDevice: 'Add end device',
  addDeviceBulk: 'End device bulk creation',
  addGateway: 'Add gateway',
  addOrganization: 'Add organization',
  addPubsub: 'Add Pub/Sub',
  address: 'Address',
  addressPlaceholder: 'host',
  addWebhook: 'Add webhook',
  admin: 'Admin',
  all: 'All',
  allAdmin: 'All (Admin)',
  altitude: 'Altitude',
  altitudeDesc: 'The altitude in meters, where 0 means sea level',
  antennas: 'Antennas',
  apiKey: 'API key',
  apiKeyCounted: '{count, plural, one {API key} other {API keys}}',
  apiKeyNamePlaceholder: 'My new API key',
  apiKeys: 'API keys',
  appEUI: 'AppEUI',
  appEUIJoinEUI: 'AppEUI/JoinEUI',
  appEUIDescription:
    'The AppEUI is a global application ID that uniquely identifies the owner of the end ­device. AppEUI is used for end devices with LoRaWAN versions 1.0.0-1.0.3, JoinEUI for 1.0.4+.',
  appId: 'Application ID',
  appKey: 'AppKey',
  appKeyDescription:
    'The root key to derive session keys to secure communication between the end device and the application',
  appKeyNewDescription:
    'The root key to derive the application session key to secure communication between the end device and the application',
  application: 'Application',
  applications: 'Applications',
  applicationServerAddress: 'Application Server address',
  approve: 'Approve',
  appSKey: 'AppSKey',
  appSKeyDescription: 'Application session key',
  asServerID: 'Application Server ID',
  asServerIDDescription: 'The AS-ID of the Application Server to use',
  asServerKekLabel: 'Application Server KEK label',
  asServerKekLabelDescription:
    'The KEK label of the Application Server to use for wrapping the application session key',
  attributeDescription:
    'Attributes can be used to set arbitrary information about the entity, to be used by scripts, or simply for your own organization',
  attributeKeyValidateTooShort:
    'Attribute keys must have at least 3 characters and contain no special characters',
  attributes: 'Attributes',
  attributesValidateRequired:
    'All attribute entry values are required. Please remove empty entries.',
  automaticUpdates: 'Automatic updates',
  brand: 'Brand',
  cancel: 'Cancel',
  changeLocation: 'Change location settings',
  changePassword: 'Change password',
  channel: 'Channel',
  claimAuthCode: 'Claim authentication code',
  claiming: 'Claiming',
  clear: 'Clear',
  collaborator: 'Collaborator',
  collaboratorCounted: '{count, plural, one {Collaborator} other {Collaborators}}',
  collaboratorDeleteSuccess: 'Collaborator removed',
  collaboratorEdit: 'Edit {collaboratorId}',
  collaboratorEditRights: 'Edit rights of {collaboratorId}',
  collaboratorId: 'Collaborator ID',
  collaboratorIdPlaceholder: 'collaborator-id',
  collaboratorModalWarning: 'Are you sure you want to remove {collaboratorId} as a collaborator?',
  collaboratorRemove: 'Collaborator remove',
  collaborators: 'Collaborators',
  collaboratorUpdateSuccess: 'Collaborator rights updated',
  componentAs: 'Application Server',
  componentEdtc: 'End Device Template Converter',
  componentGs: 'Gateway Server',
  componentIs: 'Identity Server',
  componentJs: 'Join Server',
  componentNs: 'Network Server',
  componentQrg: 'QR Code Generator',
  confirmPassword: 'Confirm password',
  connected: 'Connected',
  connecting: 'Connecting',
  createApiKey: 'Create API key',
  created: 'Created',
  createdAt: 'Created at',
  currentCollaborators: 'Current collaborators',
  data: 'Data',
  defineRights: 'Define rights',
  description: 'Description',
  devAddr: 'Device address',
  devDesc: 'End device description',
  devEUI: 'DevEUI',
  deviceAddrDescription:
    'Device address, issued by the Network Server or chosen by device manufacturer in case of testing range',
  deviceCounted: '{count, plural, one {End device} other {End devices}}',
  deviceDescDescription:
    'Optional device description; can also be used to save notes about the end device',
  deviceDescPlaceholder: 'Description for my new end device',
  deviceEUIDescription: 'The DevEUI is the unique identifier for this end device',
  deviceIdPlaceholder: 'my-new-device',
  deviceNamePlaceholder: 'My new end device',
  devices: 'End devices',
  devID: 'End device ID',
  devName: 'End device name',
  disabled: 'Disabled',
  disconnected: 'Disconnected',
  downlink: 'Downlink',
  downlinkAck: 'Downlink ack',
  downlinkFailed: 'Downlink failed',
  downlinkFrameCount: 'Downlink frame count',
  downlinkNack: 'Downlink Nack',
  downlinkPush: 'Downlink push',
  downlinkQueued: 'Downlink queued',
  downlinkReplace: 'Downlink replace',
  downlinkSent: 'Downlink sent',
  downlinksScheduled: 'Downlinks (re)scheduled',
  edit: 'Edit',
  email: 'Email',
  emailAddress: 'Email address',
  empty: 'Empty',
  enabled: 'Enabled',
  entityId: 'Entity ID',
  eventsCannotShow: 'Cannot show events',
  external: 'External',
  externalJoinServer: 'External Join Server',
  fetching: 'Fetching data…',
  firmwareVersion: 'Firmware version',
  fNwkSIntKey: 'FNwkSIntKey',
  fNwkSIntKeyDescription: 'Forwarding network session integrity key',
  frequencyPlan: 'Frequency plan',
  gatewayDescription: 'Gateway description',
  gatewayEUI: 'Gateway EUI',
  gatewayID: 'Gateway ID',
  gatewayLocation: 'Gateway location',
  gatewayName: 'Gateway Name',
  gateways: 'Gateways',
  gatewayScheduleDownlinkLate: 'Schedule downlink late',
  gatewayServerAddress: 'Gateway Server address',
  gatewayStatus: 'Gateway status',
  gatewayUpdateOptions: 'Gateway updates',
  general: 'General',
  generalInformation: 'General information',
  generalSettings: 'General settings',
  hardware: 'Hardware',
  hardwareVersion: 'Hardware version',
  homeNetID: 'Home NetID',
  homeNetIDDescription: 'ID to identify the LoRaWAN network',
  id: 'ID',
  import: 'Import',
  importDevices: 'Import end devices',
  integrations: 'Integrations',
  joinAccept: 'Join accept',
  joinEUI: 'JoinEUI',
  joinEUIDescription:
    'JoinEUI identifies the Join Server. JoinEUI is used for end devices with LoRaWAN versions 1.0.4+, AppEUI for 1.0.0-1.0.3.',
  joinServerAddress: 'Join Server address',
  key: 'key',
  keyEdit: 'Edit API key',
  keyId: 'Key ID',
  lastSeen: 'Last seen',
  latitude: 'Latitude',
  latitudeDesc: 'The north-south position in degrees, where 0 is the equator',
  link: 'Link',
  linked: 'Linked',
  location: 'Location',
  locationSolved: 'Location solved',
  login: 'Login',
  logout: 'Logout',
  longitude: 'Longitude',
  longitudeDesc: 'The east-west position in degrees, where 0 is the prime meridian (Greenwich)',
  lorawanInformation: 'LoRaWAN information',
  lorawanOptions: 'LoRaWAN options',
  lorawanPhyVersionDescription: 'The LoRaWAN PHY version of the end device',
  lorawanVersionDescription: 'The LoRaWAN MAC version of the end device',
  macVersion: 'LoRaWAN version',
  macVersionDescription: 'The LoRaWAN version (MAC), as provided by the device manufacturer',
  messages: 'Messages',
  messageTypes: 'Message types',
  model: 'Model',
  mqtt: 'MQTT',
  multicast: 'Multicast',
  name: 'Name',
  networkServerAddress: 'Network Server address',
  noDesc: 'This end device has no description',
  noEvents: '{entityId} has not sent any events recently',
  noLocation: 'No location information available',
  noMatch: 'No items found',
  none: 'None',
  notAvailable: 'n/a',
  notLinked: 'Not linked',
  notSet: 'Not set',
  nsAddress: 'Network Server address',
  nsEmptyDefault: 'Leave empty to link to the Network Server in the same cluster',
  nsServerKekLabel: 'Network Server KEK label',
  nsServerKekLabelDescription:
    'The KEK label of the Network Server to use for wrapping the network session key',
  nwkKey: 'NwkKey',
  nwkKeyDescription:
    'The root key to derive network session keys to secure communication between the end device and the network',
  nwkSEncKey: 'NwkSEncKey',
  nwkSEncKeyDescription: 'Network session encryption key',
  nwkSKey: 'NwkSKey',
  nwkSKeyDescription: 'Network session key',
  offline: 'Offline',
  ok: 'Ok',
  online: 'Online',
  options: 'Options',
  organization: 'Organization',
  organizationId: 'Organization ID',
  organizations: 'Organizations',
  otaa: 'Over the air activation (OTAA)',
  otherCluster: 'Other cluster',
  overview: 'Overview',
  password: 'Password',
  pause: 'Pause',
  payload: 'Payload',
  payloadFormatters: 'Payload formatters',
  payloadFormattersDownlink: 'Downlink payload formatters',
  payloadFormattersUpdateFailure: 'There was an error updating the payload formatter',
  payloadFormattersUpdateSuccess: 'Payload formatter updated',
  payloadFormattersUplink: 'Uplink payload formatters',
  phyVersion: 'Regional Parameters version',
  phyVersionDescription:
    'The Regional Parameters version (PHY), as provided by the device manufacturer',
  port: 'Port',
  privacyPolicy: 'Privacy policy',
  provider: 'Provider',
  provisionedOnExternalJoinServer: 'Provisioned on external Join Server',
  public: 'Public',
  pubsubBaseTopic: 'Base topic',
  pubsubFormat: 'Pub/Sub format',
  pubsubId: 'Pub/Sub ID',
  pubsubs: 'Pub/Subs',
  redirecting: 'Redirecting…',
  refresh: 'Refresh',
  refreshPage: 'Refresh page',
  removeCollaborator: 'Remove collaborator',
  resetsFCnt: 'Resets frame counters',
  resetsJoinNonces: 'Resets join nonces',
  resetWarning: 'Reseting is insecure and makes your end device susceptible for replay attacks',
  restartStream: 'Restart stream',
  resume: 'Resume',
  rights: 'Rights',
  saveChanges: 'Save changes',
  searchById: 'Search by ID',
  secure: 'Secure',
  settings: 'Settings',
  sNwkSIKey: 'SNwkSIntKey',
  sNwkSIKeyDescription: 'Serving network session integrity key',
  stable: 'Stable',
  state: 'State',
  stateApproved: 'Approved',
  stateFlagged: 'Flagged',
  stateRejected: 'Rejected',
  stateRequested: 'Requested',
  stateSuspended: 'Suspended',
  status: 'Status',
  statusUnknown: 'Status unknown',
  success: 'Success',
  supportsClassC: 'Supports class C',
  takeMeBack: 'Take me back',
  termsAndCondition: 'Terms and conditions',
  time: 'Time',
  traffic: 'Traffic',
  type: 'Type',
  unknown: 'Unknown',
  updatedAt: 'Last updated at',
  uplink: 'Uplink',
  uplinkFrameCount: 'Uplink frame count',
  uplinkMessage: 'Uplink message',
  uplinksReceived: 'Uplinks received',
  unexposed: 'Unexposed',
  user: 'User',
  userDelete: 'Delete user',
  userEdit: 'Edit user',
  userId: 'User ID',
  userManagement: 'User management',
  username: 'Username',
  users: 'Users',
  validateAddressFormat: '{field} must be in the format "host" or "host:port"',
  validateApiKey: 'API keys must follow the format "NNSXS.[…].[…]"',
  validateDelayFormat: '{field} must be a positive, whole number',
  validateEmail: 'An email address must use exactly one "@" and use no special characters',
  validateIdFormat: '{field} must contain only lowercase letters, numbers and dashes (-)',
  validateInt32: '{field} must be a whole number, negative or positive',
  validateLatitude: 'Latitude must be a whole or decimal number between -90 and 90',
  validateLength: '{field} must be exactly {length} characters long',
  validateLongitude: 'Longitude must be a whole or decimal number between -180 and 180',
  validateMqttPassword: '{field} must be empty or have at least 2 characters',
  validateMqttUrl:
    'MQTT URLs must have the format "mqtt[s]://[username][:password]@host.domain[:port]"',
  validateNoSpaces: '{field} must contain no spaces',
  validatePasswordMatch: 'Passwords must match',
  validateRequired: '{field} is required',
  validateRights: 'At least one right must be selected',
  validateTooLong: '{field} must have less than {max} characters',
  validateTooShort: '{field} must have at least {min} characters',
  validateUrl: 'Must be a valid URL format, contain no spaces or special characters',
  validFrom: 'Valid from',
  validTo: 'Valid to',
  value: 'value',
  webhookBaseUrl: 'Base URL',
  webhookFormat: 'Webhook format',
  webhookId: 'Webhook ID',
  webhooks: 'Webhooks',
})
