// Copyright Â© 2018 The Things Network Foundation, The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// BORDERS
// =======

// ## General

border-normal($side = '')
  $prefix = '-'
  if $side == ''
    $prefix = ''
  border{$prefix + $side}: 1px solid $c-divider

border-dark($side = '')
  $prefix = '-'
  if $side == ''
    $prefix = ''
  border{$prefix + $side}: 1px solid $c-divider-dark

border-input($side = '')
  $prefix = '-'
  if $side == ''
    $prefix = ''
  border{$prefix + $side}: 1px solid $c-input-border

border-subtle($side = '')
  $prefix = '-'
  if $side == ''
    $prefix = ''
  border{$prefix + $side}: 1px solid $c-divider-subtle



// COLORS
// ======

darker($color, $step = 1)
  darken($color, 5 * $step * $step)

lighter($color, $step = 1)
  lighten($color, 5 * $step * $step)



// POSITIONING
// ======

// Nudges push the element in the specified direction by the specified amount.

nudge($direction, $amount = 1px)
  position: relative

  if $direction == 'up'
    bottom: $amount
  if $direction == 'down'
    top: $amount
  if $direction == 'left'
    right: $amount
  if $direction == 'right'
    left: $amount

// Center absolute uses absolute positioning to put the element in the
// center of its container.
center-absolute()
  top: 50%
  left: 50%
  position: absolute
  transform: translate(-50%, -50%)


// Fullscreen forces an element to be full screen using position absolute
full-screen()
  position: absolute
  top: 0
  left: 0
  width: 100vw
  height: 100vh
  transform: translate(0, 0)
  max-width: initial
  max-height: initial


// TYPOGRAPHY
// ==========

// Heading size definitions

h1()
  font-size: $fs.xxl
  line-height: $lh.xxl

h2()
  font-size: $fs.xl
  line-height: $lh.xl

h3()
  font-size: $fs.l
  line-height: $lh.l


// One liner, sets line-height to 1, makes components spacing a lot easier.
// Only suitable for texts that will not wrap at all. Otherwise use to-bb()

one-liner($display = inline-block)
  line-height: 1
  display: $display
  white-space: nowrap


// To bounding box will make text elements spacing relative to bounding box
// again by subtracting the gap that results from line-heights higher than 1.
// Currently this only works for the standard line-height.

to-bb($size = 0, $line-height = $line-height-base)
  $subtractor = $line-height * $line-height-margin-factor
  return 'calc(%s - %s)' % ($size $subtractor)


// Text margin will return a margin value that compensates for the elements
// line height, in order to make it relative to the elements visual bounding
// box again. It can be used to space text elements that cannot have a
// line height of 1

text-margin-top($val = 0rem, $line-height = @line-height)
  if not $line-height
    $line-height = $line-height-base
  $subtractor = $line-height * ($line-height-margin-factor - .04rem)
  margin-top: 'calc(%s - %s)' % ($val $subtractor)

text-margin-bottom($val = 0rem, $line-height = @line-height)
  if not $line-height
    $line-height = $line-height-base
  $subtractor = $line-height * ($line-height-margin-factor + .04rem)
  margin-bottom: 'calc(%s - %s)' % ($val $subtractor)

text-margin($up = 0rem, $down = false, $line-height = @line-height)
  text-margin-top($up, $line-height)
  if $down
    text-margin-bottom($down, $line-height)
  else
    text-margin-bottom($up, $line-height)


// Eat text margin is a shorthand mixin to strip off a text elements margins
// relative to its visual bounding box

eat-text-margins($line-height = @line-height)
  text-margin(0rem, false, $line-height)


// LAYOUT
// ======

// Horizontalize is a shorthand to make elements in a container horizonatally
// distributed.

horizontalize()
  display: flex
  justify-content: space-between


// RESPONSIVENESS
// ==============

media-query($max)
  @media screen and (max-width: $max)
    {block}

media-query-min($min)
  @media screen and (min-width: $min + 1)
    {block} // @stylint ignore

media-query-between($min, $max)
  @media screen and (min-width: $min + 1) and (max-width: $max)
    {block} // @stylint ignore

