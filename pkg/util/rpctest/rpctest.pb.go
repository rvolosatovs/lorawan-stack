// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: go.thethings.network/lorawan-stack/pkg/rpctest/rpctest.proto

/*
Package rpctest is a generated protocol buffer package.

It is generated from these files:
	go.thethings.network/lorawan-stack/pkg/rpctest/rpctest.proto

It has these top-level messages:
	Foo
	Bar
*/
package rpctest

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"

	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Foo struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *Foo) Reset()                    { *m = Foo{} }
func (m *Foo) String() string            { return proto.CompactTextString(m) }
func (*Foo) ProtoMessage()               {}
func (*Foo) Descriptor() ([]byte, []int) { return fileDescriptorRpctest, []int{0} }

func (m *Foo) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Bar struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *Bar) Reset()                    { *m = Bar{} }
func (m *Bar) String() string            { return proto.CompactTextString(m) }
func (*Bar) ProtoMessage()               {}
func (*Bar) Descriptor() ([]byte, []int) { return fileDescriptorRpctest, []int{1} }

func (m *Bar) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Foo)(nil), "rpctest.Foo")
	golang_proto.RegisterType((*Foo)(nil), "rpctest.Foo")
	proto.RegisterType((*Bar)(nil), "rpctest.Bar")
	golang_proto.RegisterType((*Bar)(nil), "rpctest.Bar")
}
func (this *Foo) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Foo)
	if !ok {
		that2, ok := that.(Foo)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Foo")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Foo but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Foo but is not nil && this == nil")
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	return nil
}
func (this *Foo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Foo)
	if !ok {
		that2, ok := that.(Foo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *Bar) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Bar)
	if !ok {
		that2, ok := that.(Bar)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Bar")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Bar but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Bar but is not nil && this == nil")
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	return nil
}
func (this *Bar) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Bar)
	if !ok {
		that2, ok := that.(Bar)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FooBar service

type FooBarClient interface {
	Unary(ctx context.Context, in *Foo, opts ...grpc.CallOption) (*Bar, error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (FooBar_ClientStreamClient, error)
	ServerStream(ctx context.Context, in *Foo, opts ...grpc.CallOption) (FooBar_ServerStreamClient, error)
	BidiStream(ctx context.Context, opts ...grpc.CallOption) (FooBar_BidiStreamClient, error)
}

type fooBarClient struct {
	cc *grpc.ClientConn
}

func NewFooBarClient(cc *grpc.ClientConn) FooBarClient {
	return &fooBarClient{cc}
}

func (c *fooBarClient) Unary(ctx context.Context, in *Foo, opts ...grpc.CallOption) (*Bar, error) {
	out := new(Bar)
	err := grpc.Invoke(ctx, "/rpctest.FooBar/Unary", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fooBarClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (FooBar_ClientStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_FooBar_serviceDesc.Streams[0], c.cc, "/rpctest.FooBar/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &fooBarClientStreamClient{stream}
	return x, nil
}

type FooBar_ClientStreamClient interface {
	Send(*Foo) error
	CloseAndRecv() (*Bar, error)
	grpc.ClientStream
}

type fooBarClientStreamClient struct {
	grpc.ClientStream
}

func (x *fooBarClientStreamClient) Send(m *Foo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fooBarClientStreamClient) CloseAndRecv() (*Bar, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Bar)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fooBarClient) ServerStream(ctx context.Context, in *Foo, opts ...grpc.CallOption) (FooBar_ServerStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_FooBar_serviceDesc.Streams[1], c.cc, "/rpctest.FooBar/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &fooBarServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FooBar_ServerStreamClient interface {
	Recv() (*Bar, error)
	grpc.ClientStream
}

type fooBarServerStreamClient struct {
	grpc.ClientStream
}

func (x *fooBarServerStreamClient) Recv() (*Bar, error) {
	m := new(Bar)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fooBarClient) BidiStream(ctx context.Context, opts ...grpc.CallOption) (FooBar_BidiStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_FooBar_serviceDesc.Streams[2], c.cc, "/rpctest.FooBar/BidiStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &fooBarBidiStreamClient{stream}
	return x, nil
}

type FooBar_BidiStreamClient interface {
	Send(*Foo) error
	Recv() (*Bar, error)
	grpc.ClientStream
}

type fooBarBidiStreamClient struct {
	grpc.ClientStream
}

func (x *fooBarBidiStreamClient) Send(m *Foo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fooBarBidiStreamClient) Recv() (*Bar, error) {
	m := new(Bar)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for FooBar service

type FooBarServer interface {
	Unary(context.Context, *Foo) (*Bar, error)
	ClientStream(FooBar_ClientStreamServer) error
	ServerStream(*Foo, FooBar_ServerStreamServer) error
	BidiStream(FooBar_BidiStreamServer) error
}

func RegisterFooBarServer(s *grpc.Server, srv FooBarServer) {
	s.RegisterService(&_FooBar_serviceDesc, srv)
}

func _FooBar_Unary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Foo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooBarServer).Unary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpctest.FooBar/Unary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooBarServer).Unary(ctx, req.(*Foo))
	}
	return interceptor(ctx, in, info, handler)
}

func _FooBar_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FooBarServer).ClientStream(&fooBarClientStreamServer{stream})
}

type FooBar_ClientStreamServer interface {
	SendAndClose(*Bar) error
	Recv() (*Foo, error)
	grpc.ServerStream
}

type fooBarClientStreamServer struct {
	grpc.ServerStream
}

func (x *fooBarClientStreamServer) SendAndClose(m *Bar) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fooBarClientStreamServer) Recv() (*Foo, error) {
	m := new(Foo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FooBar_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Foo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FooBarServer).ServerStream(m, &fooBarServerStreamServer{stream})
}

type FooBar_ServerStreamServer interface {
	Send(*Bar) error
	grpc.ServerStream
}

type fooBarServerStreamServer struct {
	grpc.ServerStream
}

func (x *fooBarServerStreamServer) Send(m *Bar) error {
	return x.ServerStream.SendMsg(m)
}

func _FooBar_BidiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FooBarServer).BidiStream(&fooBarBidiStreamServer{stream})
}

type FooBar_BidiStreamServer interface {
	Send(*Bar) error
	Recv() (*Foo, error)
	grpc.ServerStream
}

type fooBarBidiStreamServer struct {
	grpc.ServerStream
}

func (x *fooBarBidiStreamServer) Send(m *Bar) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fooBarBidiStreamServer) Recv() (*Foo, error) {
	m := new(Foo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FooBar_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpctest.FooBar",
	HandlerType: (*FooBarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unary",
			Handler:    _FooBar_Unary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStream",
			Handler:       _FooBar_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStream",
			Handler:       _FooBar_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BidiStream",
			Handler:       _FooBar_BidiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "go.thethings.network/lorawan-stack/pkg/rpctest/rpctest.proto",
}

func (m *Foo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Foo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRpctest(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *Bar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bar) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRpctest(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func encodeVarintRpctest(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedFoo(r randyRpctest, easy bool) *Foo {
	this := &Foo{}
	this.Message = randStringRpctest(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBar(r randyRpctest, easy bool) *Bar {
	this := &Bar{}
	this.Message = randStringRpctest(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyRpctest interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneRpctest(r randyRpctest) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringRpctest(r randyRpctest) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneRpctest(r)
	}
	return string(tmps)
}
func randUnrecognizedRpctest(r randyRpctest, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldRpctest(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldRpctest(dAtA []byte, r randyRpctest, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateRpctest(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateRpctest(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateRpctest(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateRpctest(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateRpctest(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateRpctest(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateRpctest(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Foo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovRpctest(uint64(l))
	}
	return n
}

func (m *Bar) Size() (n int) {
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovRpctest(uint64(l))
	}
	return n
}

func sovRpctest(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRpctest(x uint64) (n int) {
	return sovRpctest((x << 1) ^ uint64((int64(x) >> 63)))
}
func (m *Foo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpctest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Foo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Foo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpctest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpctest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpctest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpctest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpctest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpctest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpctest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpctest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpctest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRpctest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRpctest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpctest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpctest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRpctest
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRpctest
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRpctest(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRpctest = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRpctest   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("go.thethings.network/lorawan-stack/pkg/rpctest/rpctest.proto", fileDescriptorRpctest)
}
func init() {
	golang_proto.RegisterFile("go.thethings.network/lorawan-stack/pkg/rpctest/rpctest.proto", fileDescriptorRpctest)
}

var fileDescriptorRpctest = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0xd1, 0x21, 0x4c, 0x42, 0x41,
	0x1c, 0xc7, 0xf1, 0xfb, 0xcf, 0x09, 0xf3, 0x46, 0x7a, 0x89, 0x19, 0x7e, 0x3a, 0x36, 0x37, 0x36,
	0xb7, 0xf7, 0x98, 0x26, 0xeb, 0x73, 0x23, 0x1a, 0x04, 0x8b, 0xed, 0x81, 0xb7, 0xc7, 0x1b, 0xf2,
	0x8e, 0xdd, 0x3b, 0x75, 0x36, 0x22, 0xd1, 0x68, 0xd4, 0x46, 0x24, 0xd2, 0x24, 0x12, 0x89, 0x44,
	0xee, 0xae, 0x10, 0x89, 0x44, 0xf7, 0x9c, 0xcc, 0xa4, 0xc3, 0x74, 0xfb, 0x6e, 0x9f, 0xdd, 0x3f,
	0xfc, 0xf8, 0x45, 0x9c, 0xe8, 0xce, 0x43, 0xcb, 0x6f, 0xcb, 0x5e, 0xd0, 0xec, 0x88, 0x66, 0x27,
	0x49, 0xe3, 0xec, 0x4a, 0xe8, 0x27, 0xa9, 0xba, 0x81, 0xd6, 0x69, 0xd0, 0xef, 0xc6, 0x81, 0xea,
	0xb7, 0xb5, 0xc8, 0xf4, 0xf6, 0xf5, 0xfb, 0x4a, 0x6a, 0xe9, 0x15, 0xbf, 0xb3, 0x72, 0xc4, 0xf7,
	0xea, 0x52, 0x7a, 0x65, 0x5e, 0xec, 0x89, 0x2c, 0x8b, 0x62, 0x51, 0xa6, 0x63, 0xaa, 0x1e, 0x5c,
	0x6f, 0x33, 0x07, 0x61, 0xa4, 0x7e, 0x07, 0x67, 0x1f, 0xc4, 0x0b, 0x75, 0x29, 0x73, 0x74, 0xc2,
	0xf7, 0x6f, 0xd2, 0x48, 0x3d, 0x7b, 0x25, 0x7f, 0x7b, 0xae, 0x2e, 0xe5, 0xe1, 0x4f, 0x85, 0x91,
	0xaa, 0x30, 0xcf, 0xe7, 0xa5, 0xcb, 0xfb, 0x44, 0xa4, 0xba, 0xa1, 0x95, 0x88, 0x7a, 0x7f, 0xeb,
	0x2a, 0xe5, 0xbe, 0x21, 0xd4, 0xa3, 0x50, 0xbb, 0xf8, 0x5a, 0xee, 0x79, 0x98, 0xdc, 0x25, 0xbb,
	0xfd, 0x5e, 0xa3, 0xf0, 0x9d, 0x66, 0x06, 0x34, 0x37, 0xa0, 0x85, 0x01, 0x2d, 0x0d, 0x68, 0x65,
	0xc0, 0xd6, 0x06, 0x6c, 0x63, 0x40, 0x03, 0x0b, 0x36, 0xb4, 0x60, 0x23, 0x0b, 0x1a, 0x5b, 0xb0,
	0x89, 0x05, 0x4d, 0x2d, 0x68, 0x66, 0x41, 0x73, 0x0b, 0x5a, 0x58, 0xb0, 0xa5, 0x05, 0xad, 0x2c,
	0xd8, 0xda, 0x82, 0x36, 0x16, 0x6c, 0xe0, 0xc0, 0x86, 0x0e, 0xf4, 0xe2, 0xc0, 0x5e, 0x1d, 0xe8,
	0xcd, 0x81, 0x8d, 0x1c, 0xd8, 0xd8, 0x81, 0x26, 0x0e, 0x34, 0x75, 0xa0, 0xdb, 0xd3, 0x7f, 0xcc,
	0xd7, 0x2a, 0x7c, 0xed, 0x76, 0xfe, 0x19, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x08, 0xdc, 0xe4, 0xf4,
	0x01, 0x00, 0x00,
}
