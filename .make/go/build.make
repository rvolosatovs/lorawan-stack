# Copyright Â© 2018 The Things Network Foundation, distributed under the MIT license (see LICENSE file)

# Infer GOOS and GOARCH
GOOS ?= $(shell go env GOOS)
GOARCH ?= $(shell go env GOARCH)

# default main file
MAIN ?= ./main.go

# default vendor folder
VENDOR_DIR ?= $(PWD)/vendor
VENDOR_FILE ?= Gopkg.toml

LAZY_GOOS = `echo $@ | sed 's:$(RELEASE_DIR)/.*-\(.*\)-\(.*\):\1:'`
LAZY_GOARCH = `echo $@ | sed 's:$(RELEASE_DIR)/.*-\(.*\)-\(.*\):\2:'`

# Build the executable
$(RELEASE_DIR)/%: $(shell $(GO_FILES)) $(GO_VENDOR_FILE)
	@$(log) "Building" [$(GO_ENV) GOOS=$(LAZY_GOOS) GOARCH=$(LAZY_GOARCH) $(GO) build $(GO_FLAGS) ...]
	@$(GO_ENV) GOOS=$(LAZY_GOOS) GOARCH=$(LAZY_GOARCH) $(GO) build -o "$@" -v $(GO_FLAGS) $(LD_FLAGS) $(MAIN)

# link executables to a simplified name that is the same on all architectures.
go.link:
	@for i in $(wildcard $(RELEASE_DIR)/*-$(GOOS)-$(GOARCH)); do \
		ln -sfr $$i `echo $$i | sed 's:\(.*\)-.*-.*:\1:'`; \
	done

## initialize go dep
$(VENDOR_FILE):
	@$(log) "Initializing go deps"
	@mkdir -p $(VENDOR_DIR) && cd $(VENDOR_DIR)/.. && dep init


go.translations: $(GO_MESSAGES_FILE)

$(GO_MESSAGES_FILE): $(CACHE_DIR)/errors.go $(shell $(GO_FILES | grep -v pkg/version/ttn.go))
	@$(log) "Writing error messages to $(GO_MESSAGES_FILE)"
	@go run $(CACHE_DIR)/errors.go

$(CACHE_DIR)/errors.go: pkgs := $(shell go list ./pkg/... | grep -v cmd | grep -v internal | grep -v '/example$$')
$(CACHE_DIR)/errors.go: $(shell $(GO_FILES | grep -v pkg/version/ttn.go))
	@$(log) "Gathering go packages"
	@mkdir -p $(CACHE_DIR)
	@mkdir -p $(RELEASE_DIR)
	@echo -e "// Code generated by Makefile. DO NOT EDIT.\n" > $(CACHE_DIR)/errors.go
	@echo -e "package main\n\nimport (" >> $(CACHE_DIR)/errors.go
	@echo -e "\t\"github.com/TheThingsNetwork/ttn/pkg/errors\"" >> $(CACHE_DIR)/errors.go
	@for i in $(pkgs); do \
		echo -e "\t_ \"$$i\"" >> $(CACHE_DIR)/errors.go; \
	done
	@echo -e ")\n" >> $(CACHE_DIR)/errors.go
	@echo -e "func main() {\n\terrors.WriteAll(\"$(GO_MESSAGES_FILE)\")\n}" >> $(CACHE_DIR)/errors.go

# vim: ft=make
